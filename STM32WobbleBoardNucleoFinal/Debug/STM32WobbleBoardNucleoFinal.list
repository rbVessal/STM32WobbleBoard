
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  0801a148  0801a148  0002a148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801abe4  0801abe4  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801abe4  0801abe4  0002abe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801abec  0801abec  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801abec  0801abec  0002abec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801abf0  0801abf0  0002abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801abf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801aeb4  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801aeb4  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a3fc  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b0c  00000000  00000000  0007a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b50  00000000  00000000  000801f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002908  00000000  00000000  00082d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000307b3  00000000  00000000  00085650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a855  00000000  00000000  000b5e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f30b  00000000  00000000  000e0658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ef963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf98  00000000  00000000  001ef9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a12c 	.word	0x0801a12c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a12c 	.word	0x0801a12c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
{
	// TODO Auto-generated constructor stub

}
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f004 ffd3 	bl	8005f4c <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fa6:	f001 fba7 	bl	80026f8 <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000faa:	2164      	movs	r1, #100	; 0x64
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 fc29 	bl	8001804 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 f856 	bl	8001064 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000fb8:	f000 ffd0 	bl	8001f5c <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f001 f874 	bl	80020aa <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f014 fa64 	bl	8015494 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d132      	bne.n	8001038 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000fd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001060 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fde:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8000fe2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fea:	ee17 2a90 	vmov	r2, s15
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001060 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8001002:	edd7 7a07 	vldr	s15, [r7, #28]
 8001006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800100a:	ee17 2a90 	vmov	r2, s15
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001012:	edd7 7a05 	vldr	s15, [r7, #20]
 8001016:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001060 <_ZN14WobbleBoardApp4InitEv+0xc8>
 800101a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101e:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8001022:	edd7 7a07 	vldr	s15, [r7, #28]
 8001026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102a:	ee17 2a90 	vmov	r2, s15
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
	}

	DWTInit();
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 fb31 	bl	80016a0 <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 800103e:	f000 fc69 	bl	8001914 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Enable9AxisMotionFusion();
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fbce 	bl	80017ec <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>

	StartDataStreaming();
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fb97 	bl	8001784 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	43fa0000 	.word	0x43fa0000

08001064 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 800106c:	f000 fdfc 	bl	8001c68 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8001070:	f000 fe02 	bl	8001c78 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 8001074:	f000 fe08 	bl	8001c88 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001078:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001090 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 800107c:	f000 fe63 	bl	8001d46 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001080:	2004      	movs	r0, #4
 8001082:	f000 fe6f 	bl	8001d64 <BSP_SENSOR_ACC_SetFullScale>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	42c80000 	.word	0x42c80000

08001094 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800109a:	af00      	add	r7, sp, #0
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	6018      	str	r0, [r3, #0]
//		}
//	}
//
//	HandleMSG((TMsg *)&msg_cmd);

	if (MagCalRequest == 1U)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	bf0c      	ite	eq
 80010ae:	2301      	moveq	r3, #1
 80010b0:	2300      	movne	r3, #0
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d017      	beq.n	80010e8 <_ZN14WobbleBoardApp7ProcessEv+0x54>
	{
		MagCalRequest = 0;
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f000 ffe1 	bl	80020aa <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!ShouldStartUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80010f0:	f083 0301 	eor.w	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <_ZN14WobbleBoardApp7ProcessEv+0x74>
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <_ZN14WobbleBoardApp7ProcessEv+0x108>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <_ZN14WobbleBoardApp7ProcessEv+0x74>
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <_ZN14WobbleBoardApp7ProcessEv+0x76>
 8001108:	2300      	movs	r3, #0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <_ZN14WobbleBoardApp7ProcessEv+0x84>
	{
		SensorReadRequest = 1;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(ShouldStartUserCalibrationMode && __HAL_TIM_GET_COUNTER(&htim15) == 0)
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <_ZN14WobbleBoardApp7ProcessEv+0x9e>
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <_ZN14WobbleBoardApp7ProcessEv+0x10c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <_ZN14WobbleBoardApp7ProcessEv+0x9e>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <_ZN14WobbleBoardApp7ProcessEv+0xa0>
 8001132:	2300      	movs	r3, #0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <_ZN14WobbleBoardApp7ProcessEv+0xac>
	{
		ExitUserCalibrationMode();
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	f000 fbd4 	bl	80018e8 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>
	}

	if (SensorReadRequest == 1U)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	bf0c      	ite	eq
 800114e:	2301      	moveq	r3, #1
 8001150:	2300      	movne	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01b      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xfc>
	{
		SensorReadRequest = 0;
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		// Write the motion sensor data to the terminal
		AccelerometerSensorHandler();
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	f000 f81d 	bl	80011a4 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
		GyroSensorHandler();
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f000 f841 	bl	80011f4 <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
		MagnetometerSensorHandler();
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f000 f865 	bl	8001244 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f000 f915 	bl	80013ac <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>

		// Add the header that contains the command
		InitStreamingHeader(&msg_dat);
 8001182:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4611      	mov	r1, r2
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	f000 fae0 	bl	8001750 <_ZN14WobbleBoardApp19InitStreamingHeaderEP4TMsg>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 8001190:	bf00      	nop
 8001192:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200014a8 	.word	0x200014a8
 80011a0:	2000145c 	.word	0x2000145c

080011a4 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3310      	adds	r3, #16
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fda1 	bl	8001cf8 <BSP_SENSOR_ACC_GetAxes>

//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f103 0044 	add.w	r0, r3, #68	; 0x44
	             (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6919      	ldr	r1, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6992      	ldr	r2, [r2, #24]
	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011c8:	9201      	str	r2, [sp, #4]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	460b      	mov	r3, r1
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x48>)
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	f016 fe88 	bl	8017ee8 <sniprintf>
    printf("%s", DataOut);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3344      	adds	r3, #68	; 0x44
 80011dc:	4619      	mov	r1, r3
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4c>)
 80011e0:	f016 fe16 	bl	8017e10 <iprintf>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	0801a148 	.word	0x0801a148
 80011f0:	0801a174 	.word	0x0801a174

080011f4 <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	331c      	adds	r3, #28
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fd86 	bl	8001d12 <BSP_SENSOR_GYR_GetAxes>

//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f103 0044 	add.w	r0, r3, #68	; 0x44
	             (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69d9      	ldr	r1, [r3, #28]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6a52      	ldr	r2, [r2, #36]	; 0x24
	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001218:	9201      	str	r2, [sp, #4]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	460b      	mov	r3, r1
 800121e:	4a07      	ldr	r2, [pc, #28]	; (800123c <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x48>)
 8001220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001224:	f016 fe60 	bl	8017ee8 <sniprintf>
    printf("%s", DataOut);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3344      	adds	r3, #68	; 0x44
 800122c:	4619      	mov	r1, r3
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4c>)
 8001230:	f016 fdee 	bl	8017e10 <iprintf>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0801a178 	.word	0x0801a178
 8001240:	0801a174 	.word	0x0801a174

08001244 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3328      	adds	r3, #40	; 0x28
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fd6b 	bl	8001d2c <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d16d      	bne.n	800133a <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800139c <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
 800126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001272:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800139c <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
 8001286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128a:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800139c <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	f103 020a 	add.w	r2, r3, #10
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80012b8:	f107 020c 	add.w	r2, r7, #12
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fee2 	bl	800208c <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80012c8:	7e3b      	ldrb	r3, [r7, #24]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d135      	bne.n	800133a <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80013a0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x15c>
 80012dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 80012e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ec:	ee17 2a90 	vmov	r2, s15
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	605a      	str	r2, [r3, #4]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80012f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012f8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80013a0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x15c>
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001304:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130c:	ee17 2a90 	vmov	r2, s15
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001314:	edd7 7a05 	vldr	s15, [r7, #20]
 8001318:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80013a0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x15c>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001324:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132c:	ee17 2a90 	vmov	r2, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001334:	200a      	movs	r0, #10
 8001336:	f000 fec4 	bl	80020c2 <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	1ad2      	subs	r2, r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	62da      	str	r2, [r3, #44]	; 0x2c
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	631a      	str	r2, [r3, #48]	; 0x30

//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f103 0044 	add.w	r0, r3, #68	; 0x44
	             (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6b12      	ldr	r2, [r2, #48]	; 0x30
	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	460b      	mov	r3, r1
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>)
 800137e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001382:	f016 fdb1 	bl	8017ee8 <sniprintf>
    printf("%s", DataOut);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3344      	adds	r3, #68	; 0x44
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>)
 800138e:	f016 fd3f 	bl	8017e10 <iprintf>
}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	3b03126f 	.word	0x3b03126f
 80013a0:	43fa0000 	.word	0x43fa0000
 80013a4:	0801a19c 	.word	0x0801a19c
 80013a8:	0801a174 	.word	0x0801a174

080013ac <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

void WobbleBoardApp::MotionFXDataHandler()
{
 80013ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013b0:	b0a5      	sub	sp, #148	; 0x94
 80013b2:	af06      	add	r7, sp, #24
 80013b4:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time_us = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 80013ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013be:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800167c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d0>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800167c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d0>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001402:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800167c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d0>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	/* Convert acceleration from [mg] to [g] */
	data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800167c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d0>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800167c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d0>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800167c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d0>
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	ee07 3a90 	vmov	s15, r3
 800145e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001462:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001680 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d4>
 8001466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001680 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d4>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001680 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d4>
 8001496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/* Run Sensor Fusion algorithm */
	DWTStart();
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f918 	bl	80016d4 <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 80014a4:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8001684 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2d8>
 80014a8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014aa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014ac:	f000 fdae 	bl	800200c <MotionFX_manager_run>
	elapsed_time_us = DWTStop();
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f925 	bl	8001700 <_ZN14WobbleBoardApp7DWTStopEv>
 80014b6:	6778      	str	r0, [r7, #116]	; 0x74
//	(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if(pdata_out != nullptr)
 80014b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 80d8 	beq.w	8001670 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2c4>
	{
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 80014c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014c8:	68db      	ldr	r3, [r3, #12]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f83c 	bl	8000548 <__aeabi_f2d>
 80014d0:	4604      	mov	r4, r0
 80014d2:	460d      	mov	r5, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 80014d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d6:	691b      	ldr	r3, [r3, #16]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f835 	bl	8000548 <__aeabi_f2d>
 80014de:	4680      	mov	r8, r0
 80014e0:	4689      	mov	r9, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 80014e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e4:	695b      	ldr	r3, [r3, #20]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f82e 	bl	8000548 <__aeabi_f2d>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014f8:	e9cd 4500 	strd	r4, r5, [sp]
 80014fc:	4a62      	ldr	r2, [pc, #392]	; (8001688 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2dc>)
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4630      	mov	r0, r6
 8001504:	f016 fcf0 	bl	8017ee8 <sniprintf>
	    printf("%s", DataOut);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3344      	adds	r3, #68	; 0x44
 800150c:	4619      	mov	r1, r3
 800150e:	485f      	ldr	r0, [pc, #380]	; (800168c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e0>)
 8001510:	f016 fc7e 	bl	8017e10 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 800151a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151c:	681b      	ldr	r3, [r3, #0]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f812 	bl	8000548 <__aeabi_f2d>
 8001524:	4604      	mov	r4, r0
 8001526:	460d      	mov	r5, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 8001528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800152a:	685b      	ldr	r3, [r3, #4]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4680      	mov	r8, r0
 8001534:	4689      	mov	r9, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 8001536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001538:	689b      	ldr	r3, [r3, #8]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f804 	bl	8000548 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001548:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800154c:	e9cd 4500 	strd	r4, r5, [sp]
 8001550:	4a4f      	ldr	r2, [pc, #316]	; (8001690 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>)
 8001552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001556:	4630      	mov	r0, r6
 8001558:	f016 fcc6 	bl	8017ee8 <sniprintf>
	    printf("%s", DataOut);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3344      	adds	r3, #68	; 0x44
 8001560:	4619      	mov	r1, r3
 8001562:	484a      	ldr	r0, [pc, #296]	; (800168c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e0>)
 8001564:	f016 fc54 	bl	8017e10 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 800156e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001570:	69db      	ldr	r3, [r3, #28]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	4604      	mov	r4, r0
 800157a:	460d      	mov	r5, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 800157c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157e:	6a1b      	ldr	r3, [r3, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffe1 	bl	8000548 <__aeabi_f2d>
 8001586:	4680      	mov	r8, r0
 8001588:	4689      	mov	r9, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 800158a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffda 	bl	8000548 <__aeabi_f2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800159c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015a0:	e9cd 4500 	strd	r4, r5, [sp]
 80015a4:	4a3b      	ldr	r2, [pc, #236]	; (8001694 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>)
 80015a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015aa:	4630      	mov	r0, r6
 80015ac:	f016 fc9c 	bl	8017ee8 <sniprintf>
	    printf("%s", DataOut);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3344      	adds	r3, #68	; 0x44
 80015b4:	4619      	mov	r1, r3
 80015b6:	4835      	ldr	r0, [pc, #212]	; (800168c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e0>)
 80015b8:	f016 fc2a 	bl	8017e10 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 80015c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffbe 	bl	8000548 <__aeabi_f2d>
 80015cc:	4604      	mov	r4, r0
 80015ce:	460d      	mov	r5, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 80015d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	4680      	mov	r8, r0
 80015dc:	4689      	mov	r9, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 80015de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb0 	bl	8000548 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015f0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015f4:	e9cd 4500 	strd	r4, r5, [sp]
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2dc>)
 80015fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fe:	4630      	mov	r0, r6
 8001600:	f016 fc72 	bl	8017ee8 <sniprintf>
	    printf("%s", DataOut);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3344      	adds	r3, #68	; 0x44
 8001608:	4619      	mov	r1, r3
 800160a:	4820      	ldr	r0, [pc, #128]	; (800168c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e0>)
 800160c:	f016 fc00 	bl	8017e10 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f103 0444 	add.w	r4, r3, #68	; 0x44
				pdata_out->heading);
 8001616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	e9cd 2300 	strd	r2, r3, [sp]
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2ec>)
 800162a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162e:	4620      	mov	r0, r4
 8001630:	f016 fc5a 	bl	8017ee8 <sniprintf>
	    printf("%s", DataOut);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3344      	adds	r3, #68	; 0x44
 8001638:	4619      	mov	r1, r3
 800163a:	4814      	ldr	r0, [pc, #80]	; (800168c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e0>)
 800163c:	f016 fbe8 	bl	8017e10 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f103 0444 	add.w	r4, r3, #68	; 0x44
				pdata_out->headingErr);
 8001646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff7c 	bl	8000548 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	e9cd 2300 	strd	r2, r3, [sp]
 8001658:	4a10      	ldr	r2, [pc, #64]	; (800169c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f0>)
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	4620      	mov	r0, r4
 8001660:	f016 fc42 	bl	8017ee8 <sniprintf>
	    printf("%s", DataOut);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3344      	adds	r3, #68	; 0x44
 8001668:	4619      	mov	r1, r3
 800166a:	4808      	ldr	r0, [pc, #32]	; (800168c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e0>)
 800166c:	f016 fbd0 	bl	8017e10 <iprintf>
	}
}
 8001670:	bf00      	nop
 8001672:	377c      	adds	r7, #124	; 0x7c
 8001674:	46bd      	mov	sp, r7
 8001676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800167a:	bf00      	nop
 800167c:	3a83126f 	.word	0x3a83126f
 8001680:	3b03126f 	.word	0x3b03126f
 8001684:	3c23d70a 	.word	0x3c23d70a
 8001688:	0801a1c8 	.word	0x0801a1c8
 800168c:	0801a174 	.word	0x0801a174
 8001690:	0801a200 	.word	0x0801a200
 8001694:	0801a238 	.word	0x0801a238
 8001698:	0801a26c 	.word	0x0801a26c
 800169c:	0801a28c 	.word	0x0801a28c

080016a0 <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000edf0 	.word	0xe000edf0
 80016d0:	e0001000 	.word	0xe0001000

080016d4 <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e0001000 	.word	0xe0001000

08001700 <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 8001716:	f023 0301 	bic.w	r3, r3, #1
 800171a:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a09      	ldr	r2, [pc, #36]	; (800174c <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9b      	lsrs	r3, r3, #18
 800172e:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 8001730:	68ba      	ldr	r2, [r7, #8]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e0001000 	.word	0xe0001000
 8001748:	2000000c 	.word	0x2000000c
 800174c:	431bde83 	.word	0x431bde83

08001750 <_ZN14WobbleBoardApp19InitStreamingHeaderEP4TMsg>:

void WobbleBoardApp::InitStreamingHeader(TMsg* Msg)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2232      	movs	r2, #50	; 0x32
 800176a:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2203      	movs	r2, #3
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 800178c:	f000 fa84 	bl	8001c98 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 8001790:	f000 fa8a 	bl	8001ca8 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 8001794:	f000 fa90 	bl	8001cb8 <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 800179a:	f008 f80d 	bl	80097b8 <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SensorsEnabled = 1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2201      	movs	r2, #1
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200014a8 	.word	0x200014a8

080017b8 <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <_ZN14WobbleBoardApp17StopDataStreamingEv+0x30>)
 80017ca:	f008 f85d 	bl	8009888 <HAL_TIM_Base_Stop>

	/* Disable all sensors */
	BSP_SENSOR_ACC_Disable();
 80017ce:	f000 fa7b 	bl	8001cc8 <BSP_SENSOR_ACC_Disable>
	BSP_SENSOR_GYR_Disable();
 80017d2:	f000 fa81 	bl	8001cd8 <BSP_SENSOR_GYR_Disable>
	BSP_SENSOR_MAG_Disable();
 80017d6:	f000 fa87 	bl	8001ce8 <BSP_SENSOR_MAG_Disable>

	SensorsEnabled = 0;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	200014a8 	.word	0x200014a8

080017ec <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:
	MotionFX_manager_stop_9X();
	MotionFX_manager_start_6X();
}

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 80017f4:	f000 fc36 	bl	8002064 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 80017f8:	f000 fc3e 	bl	8002078 <MotionFX_manager_start_9X>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800180e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001812:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	09db      	lsrs	r3, r3, #7
 8001820:	3b01      	subs	r3, #1
 8001822:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001824:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001850:	480a      	ldr	r0, [pc, #40]	; (800187c <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 8001852:	f007 ff59 	bl	8009708 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 8001866:	f000 fb73 	bl	8001f50 <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000000c 	.word	0x2000000c
 8001878:	10624dd3 	.word	0x10624dd3
 800187c:	200014a8 	.word	0x200014a8

08001880 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 800188e:	f083 0301 	eor.w	r3, r3, #1
 8001892:	b2da      	uxtb	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144

	if(ShouldStartUserCalibrationMode)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f809 	bl	80018bc <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode();
	}
}
 80018aa:	e002      	b.n	80018b2 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x32>
		ExitUserCalibrationMode();
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f81b 	bl	80018e8 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	StopDataStreaming();
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff77 	bl	80017b8 <_ZN14WobbleBoardApp17StopDataStreamingEv>
	// Start the interrupt of timer 15 that is specifically
	// for the user calibration mode timer
	//HAL_TIM_Base_Start_IT(&htim15);

	// Start the user calibration timer
	HAL_TIM_Base_Start(&htim15);
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0x24>)
 80018cc:	f007 ff74 	bl	80097b8 <HAL_TIM_Base_Start>

	printf("Entered User Calibration Mode");
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0x28>)
 80018d2:	f016 fa9d 	bl	8017e10 <iprintf>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000145c 	.word	0x2000145c
 80018e4:	0801a2b4 	.word	0x0801a2b4

080018e8 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>:
{

}

void WobbleBoardApp::ExitUserCalibrationMode()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	// Stop the user calibration timer interrupt mode
	//HAL_TIM_Base_Stop_IT(&htim15);

	// Stop the user calibration timer
	HAL_TIM_Base_Stop(&htim15);
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0x24>)
 80018f2:	f007 ffc9 	bl	8009888 <HAL_TIM_Base_Stop>

	// Start streaming out the motion data again
	StartDataStreaming();
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff44 	bl	8001784 <_ZN14WobbleBoardApp18StartDataStreamingEv>

	printf("Exited User Calibration Mode");
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0x28>)
 80018fe:	f016 fa87 	bl	8017e10 <iprintf>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000145c 	.word	0x2000145c
 8001910:	0801a2d4 	.word	0x0801a2d4

08001914 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <UART_StartReceiveMsg+0x2c>)
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <UART_StartReceiveMsg+0x30>)
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <UART_StartReceiveMsg+0x2c>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <UART_StartReceiveMsg+0x2c>)
 800192a:	2200      	movs	r2, #0
 800192c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <UART_StartReceiveMsg+0x30>)
 8001936:	4802      	ldr	r0, [pc, #8]	; (8001940 <UART_StartReceiveMsg+0x2c>)
 8001938:	f008 fcae 	bl	800a298 <HAL_UART_Receive_DMA>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20001548 	.word	0x20001548
 8001944:	200011c0 	.word	0x200011c0

08001948 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <MX_CRC_Init+0x3c>)
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <MX_CRC_Init+0x40>)
 8001950:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_CRC_Init+0x3c>)
 8001954:	2200      	movs	r2, #0
 8001956:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <MX_CRC_Init+0x3c>)
 800195a:	2200      	movs	r2, #0
 800195c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_CRC_Init+0x3c>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <MX_CRC_Init+0x3c>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_CRC_Init+0x3c>)
 800196c:	2201      	movs	r2, #1
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_CRC_Init+0x3c>)
 8001972:	f004 fd73 	bl	800645c <HAL_CRC_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800197c:	f000 fae8 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200013c8 	.word	0x200013c8
 8001988:	40023000 	.word	0x40023000

0800198c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_CRC_MspInit+0x38>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10b      	bne.n	80019b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	6493      	str	r3, [r2, #72]	; 0x48
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_CRC_MspInit+0x3c>)
 80019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023000 	.word	0x40023000
 80019c8:	40021000 	.word	0x40021000

080019cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_DMA_Init+0x38>)
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <MX_DMA_Init+0x38>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6493      	str	r3, [r2, #72]	; 0x48
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_DMA_Init+0x38>)
 80019e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2010      	movs	r0, #16
 80019f0:	f004 fcfd 	bl	80063ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019f4:	2010      	movs	r0, #16
 80019f6:	f004 fd16 	bl	8006426 <HAL_NVIC_EnableIRQ>

}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b2f      	ldr	r3, [pc, #188]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a2e      	ldr	r2, [pc, #184]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a42:	4b26      	ldr	r3, [pc, #152]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	4a22      	ldr	r2, [pc, #136]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_GPIO_Init+0xd4>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2120      	movs	r1, #32
 8001a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a86:	f005 fa69 	bl	8006f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480f      	ldr	r0, [pc, #60]	; (8001ae0 <MX_GPIO_Init+0xd8>)
 8001aa2:	f004 ffbd 	bl	8006a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac0:	f004 ffae 	bl	8006a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f004 fc90 	bl	80063ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ace:	2028      	movs	r0, #40	; 0x28
 8001ad0:	f004 fca9 	bl	8006426 <HAL_NVIC_EnableIRQ>

}
 8001ad4:	bf00      	nop
 8001ad6:	3728      	adds	r7, #40	; 0x28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000800 	.word	0x48000800

08001ae4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <MX_I2C1_Init+0x78>)
 8001aec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af0:	4a1b      	ldr	r2, [pc, #108]	; (8001b60 <MX_I2C1_Init+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1e:	480e      	ldr	r0, [pc, #56]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b20:	f005 fa4c 	bl	8006fbc <HAL_I2C_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b2a:	f000 fa11 	bl	8001f50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4809      	ldr	r0, [pc, #36]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b32:	f005 ffef 	bl	8007b14 <HAL_I2CEx_ConfigAnalogFilter>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b3c:	f000 fa08 	bl	8001f50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b40:	2100      	movs	r1, #0
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_I2C1_Init+0x74>)
 8001b44:	f006 f831 	bl	8007baa <HAL_I2CEx_ConfigDigitalFilter>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b4e:	f000 f9ff 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200013ec 	.word	0x200013ec
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	00702991 	.word	0x00702991

08001b64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b0ac      	sub	sp, #176	; 0xb0
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2288      	movs	r2, #136	; 0x88
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f015 fc27 	bl	80173d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <HAL_I2C_MspInit+0xb0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d13b      	bne.n	8001c0c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b94:	2340      	movs	r3, #64	; 0x40
 8001b96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f006 fe9f 	bl	80088e4 <HAL_RCCEx_PeriphCLKConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bac:	f000 f9d0 	bl	8001f50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd0:	2312      	movs	r3, #18
 8001bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be2:	2304      	movs	r3, #4
 8001be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bec:	4619      	mov	r1, r3
 8001bee:	480b      	ldr	r0, [pc, #44]	; (8001c1c <HAL_I2C_MspInit+0xb8>)
 8001bf0:	f004 ff16 	bl	8006a20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_I2C_MspInit+0xb4>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	37b0      	adds	r7, #176	; 0xb0
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	48000400 	.word	0x48000400

08001c20 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_I2C_MspDeInit+0x3c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10f      	bne.n	8001c52 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_I2C_MspDeInit+0x40>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_I2C_MspDeInit+0x40>)
 8001c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c3c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <HAL_I2C_MspDeInit+0x44>)
 8001c44:	f005 f896 	bl	8006d74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c4c:	4805      	ldr	r0, [pc, #20]	; (8001c64 <HAL_I2C_MspDeInit+0x44>)
 8001c4e:	f005 f891 	bl	8006d74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400

08001c68 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f003 fd1a 	bl	80056a8 <IKS01A2_MOTION_SENSOR_Init>
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f003 fd12 	bl	80056a8 <IKS01A2_MOTION_SENSOR_Init>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001c8c:	2104      	movs	r1, #4
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f003 fd0a 	bl	80056a8 <IKS01A2_MOTION_SENSOR_Init>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f003 fdfe 	bl	80058a0 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001cac:	2101      	movs	r1, #1
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f003 fdf6 	bl	80058a0 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f003 fdee 	bl	80058a0 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001ccc:	2102      	movs	r1, #2
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f003 fe28 	bl	8005924 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f003 fe20 	bl	8005924 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001cec:	2104      	movs	r1, #4
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f003 fe18 	bl	8005924 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	2102      	movs	r1, #2
 8001d04:	2000      	movs	r0, #0
 8001d06:	f003 fe4f 	bl	80059a8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f003 fe42 	bl	80059a8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	2104      	movs	r1, #4
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f003 fe35 	bl	80059a8 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8001d50:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d54:	2102      	movs	r1, #2
 8001d56:	2000      	movs	r0, #0
 8001d58:	f003 fe6a 	bl	8005a30 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	2102      	movs	r1, #2
 8001d70:	2000      	movs	r0, #0
 8001d72:	f003 fea3 	bl	8005abc <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	226e      	movs	r2, #110	; 0x6e
 8001d8a:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	2277      	movs	r2, #119	; 0x77
 8001d92:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3302      	adds	r3, #2
 8001d98:	2275      	movs	r2, #117	; 0x75
 8001d9a:	701a      	strb	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	226e      	movs	r2, #110	; 0x6e
 8001db4:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3301      	adds	r3, #1
 8001dba:	2277      	movs	r2, #119	; 0x77
 8001dbc:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	2275      	movs	r2, #117	; 0x75
 8001dc4:	701a      	strb	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	226e      	movs	r2, #110	; 0x6e
 8001dde:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3301      	adds	r3, #1
 8001de4:	2265      	movs	r2, #101	; 0x65
 8001de6:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3302      	adds	r3, #2
 8001dec:	2275      	movs	r2, #117	; 0x75
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dfc:	b598      	push	{r3, r4, r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e00:	f004 f99e 	bl	8006140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e04:	f000 f82a 	bl	8001e5c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e08:	f7ff fdfe 	bl	8001a08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e0c:	f7ff fdde 	bl	80019cc <MX_DMA_Init>
  MX_CRC_Init();
 8001e10:	f7ff fd9a 	bl	8001948 <MX_CRC_Init>
  MX_RTC_Init();
 8001e14:	f000 f962 	bl	80020dc <MX_RTC_Init>
  MX_TIM15_Init();
 8001e18:	f000 fcbc 	bl	8002794 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8001e1c:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8001e20:	f013 fb74 	bl	801550c <_Znwj>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461c      	mov	r4, r3
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff f889 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <main+0x5c>)
 8001e30:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <main+0x5c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <main+0x48>
  {
	  wobbleBoardApp->Init();
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <main+0x5c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f8aa 	bl	8000f98 <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <main+0x5c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0fb      	beq.n	8001e44 <main+0x48>
	  {
		  wobbleBoardApp->Process();
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <main+0x5c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f91f 	bl	8001094 <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 8001e56:	e7f5      	b.n	8001e44 <main+0x48>
 8001e58:	2000072c 	.word	0x2000072c

08001e5c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b096      	sub	sp, #88	; 0x58
 8001e60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2244      	movs	r2, #68	; 0x44
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f015 fab4 	bl	80173d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	463b      	mov	r3, r7
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e7e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e82:	f005 feed 	bl	8007c60 <HAL_PWREx_ControlVoltageScaling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 8001e96:	f000 f85b 	bl	8001f50 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea4:	2310      	movs	r3, #16
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eac:	2302      	movs	r3, #2
 8001eae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001eb8:	230a      	movs	r3, #10
 8001eba:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f005 ff1d 	bl	8007d0c <HAL_RCC_OscConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 8001ee2:	f000 f835 	bl	8001f50 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee6:	230f      	movs	r3, #15
 8001ee8:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eea:	2303      	movs	r3, #3
 8001eec:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001efa:	463b      	mov	r3, r7
 8001efc:	2104      	movs	r1, #4
 8001efe:	4618      	mov	r0, r3
 8001f00:	f006 faea 	bl	80084d8 <HAL_RCC_ClockConfig>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 8001f14:	f000 f81c 	bl	8001f50 <Error_Handler>
	}
}
 8001f18:	bf00      	nop
 8001f1a:	3758      	adds	r7, #88	; 0x58
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f30:	d108      	bne.n	8001f44 <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d004      	beq.n	8001f44 <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 8001f3a:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fc9e 	bl	8001880 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000072c 	.word	0x2000072c

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <Error_Handler+0x8>
	...

08001f5c <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8001f60:	f012 fd1a 	bl	8014998 <MotionFX_GetStateSize>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8001f6a:	d901      	bls.n	8001f70 <MotionFX_manager_init+0x14>
    Error_Handler();
 8001f6c:	f7ff fff0 	bl	8001f50 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8001f70:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <MotionFX_manager_init+0x9c>)
 8001f72:	f012 fd15 	bl	80149a0 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <MotionFX_manager_init+0x9c>)
 8001f7e:	f012 fdf3 	bl	8014b68 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	331d      	adds	r3, #29
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fef8 	bl	8001d7e <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3321      	adds	r3, #33	; 0x21
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff07 	bl	8001da8 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	3325      	adds	r3, #37	; 0x25
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff16 	bl	8001dd2 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <MotionFX_manager_init+0xa4>)
 8001fac:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <MotionFX_manager_init+0xa8>)
 8001fb4:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <MotionFX_manager_init+0xac>)
 8001fbc:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <MotionFX_manager_init+0xa0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <MotionFX_manager_init+0x9c>)
 8001fe0:	f012 fd78 	bl	8014ad4 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <MotionFX_manager_init+0x9c>)
 8001fe8:	f012 fdfa 	bl	8014be0 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8001fec:	2100      	movs	r1, #0
 8001fee:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <MotionFX_manager_init+0x9c>)
 8001ff0:	f012 fe16 	bl	8014c20 <MotionFX_enable_9X>
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000764 	.word	0x20000764
 8001ffc:	20000004 	.word	0x20000004
 8002000:	3ac88a48 	.word	0x3ac88a48
 8002004:	3b83126f 	.word	0x3b83126f
 8002008:	3b449ba6 	.word	0x3b449ba6

0800200c <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MotionFX_manager_run+0x4c>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MotionFX_manager_run+0x50>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d10e      	bne.n	8002044 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	68b9      	ldr	r1, [r7, #8]
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <MotionFX_manager_run+0x54>)
 800202e:	f012 fe27 	bl	8014c80 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	9200      	str	r2, [sp, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <MotionFX_manager_run+0x54>)
 800203e:	f012 fe0f 	bl	8014c60 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8002042:	e004      	b.n	800204e <MotionFX_manager_run+0x42>
    discardedCount++;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <MotionFX_manager_run+0x4c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	4a03      	ldr	r2, [pc, #12]	; (8002058 <MotionFX_manager_run+0x4c>)
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000760 	.word	0x20000760
 800205c:	20000008 	.word	0x20000008
 8002060:	20000764 	.word	0x20000764

08002064 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002068:	2100      	movs	r1, #0
 800206a:	4802      	ldr	r0, [pc, #8]	; (8002074 <MotionFX_manager_stop_6X+0x10>)
 800206c:	f012 fdb8 	bl	8014be0 <MotionFX_enable_6X>
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000764 	.word	0x20000764

08002078 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 800207c:	2101      	movs	r1, #1
 800207e:	4802      	ldr	r0, [pc, #8]	; (8002088 <MotionFX_manager_start_9X+0x10>)
 8002080:	f012 fdce 	bl	8014c20 <MotionFX_enable_9X>
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000764 	.word	0x20000764

0800208c <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f012 ffda 	bl	8015050 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f013 f9f9 	bl	8015494 <MotionFX_MagCal_getParams>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 80020b2:	2101      	movs	r1, #1
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f012 ff35 	bl	8014f24 <MotionFX_MagCal_init>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 80020ca:	2100      	movs	r1, #0
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f012 ff29 	bl	8014f24 <MotionFX_MagCal_init>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020f0:	2300      	movs	r3, #0
 80020f2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <MX_RTC_Init+0xb0>)
 80020f6:	4a26      	ldr	r2, [pc, #152]	; (8002190 <MX_RTC_Init+0xb4>)
 80020f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <MX_RTC_Init+0xb0>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <MX_RTC_Init+0xb0>)
 8002102:	227f      	movs	r2, #127	; 0x7f
 8002104:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_RTC_Init+0xb0>)
 8002108:	22ff      	movs	r2, #255	; 0xff
 800210a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_RTC_Init+0xb0>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <MX_RTC_Init+0xb0>)
 8002114:	2200      	movs	r2, #0
 8002116:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002118:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_RTC_Init+0xb0>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_RTC_Init+0xb0>)
 8002120:	2200      	movs	r2, #0
 8002122:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002124:	4819      	ldr	r0, [pc, #100]	; (800218c <MX_RTC_Init+0xb0>)
 8002126:	f007 f899 	bl	800925c <HAL_RTC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002130:	f7ff ff0e 	bl	8001f50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002134:	2300      	movs	r3, #0
 8002136:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002138:	2300      	movs	r3, #0
 800213a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800213c:	2300      	movs	r3, #0
 800213e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2201      	movs	r2, #1
 800214c:	4619      	mov	r1, r3
 800214e:	480f      	ldr	r0, [pc, #60]	; (800218c <MX_RTC_Init+0xb0>)
 8002150:	f007 f8ff 	bl	8009352 <HAL_RTC_SetTime>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800215a:	f7ff fef9 	bl	8001f50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800215e:	2301      	movs	r3, #1
 8002160:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002162:	2301      	movs	r3, #1
 8002164:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002166:	2301      	movs	r3, #1
 8002168:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800216a:	2300      	movs	r3, #0
 800216c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800216e:	463b      	mov	r3, r7
 8002170:	2201      	movs	r2, #1
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_RTC_Init+0xb0>)
 8002176:	f007 f989 	bl	800948c <HAL_RTC_SetDate>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002180:	f7ff fee6 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20001438 	.word	0x20001438
 8002190:	40002800 	.word	0x40002800

08002194 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0a4      	sub	sp, #144	; 0x90
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	2288      	movs	r2, #136	; 0x88
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f015 f917 	bl	80173d8 <memset>
  if(rtcHandle->Instance==RTC)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_RTC_MspInit+0x5c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d118      	bne.n	80021e6 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	4618      	mov	r0, r3
 80021c8:	f006 fb8c 	bl	80088e4 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80021d2:	f7ff febd 	bl	8001f50 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <HAL_RTC_MspInit+0x60>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <HAL_RTC_MspInit+0x60>)
 80021de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021e6:	bf00      	nop
 80021e8:	3790      	adds	r7, #144	; 0x90
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40002800 	.word	0x40002800
 80021f4:	40021000 	.word	0x40021000

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_MspInit+0x44>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_MspInit+0x44>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6613      	str	r3, [r2, #96]	; 0x60
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_MspInit+0x44>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_MspInit+0x44>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_MspInit+0x44>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_MspInit+0x44>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228c:	f003 ffb4 	bl	80061f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA1_Channel6_IRQHandler+0x10>)
 800229a:	f004 fae1 	bl	8006860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20001500 	.word	0x20001500

080022a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80022ae:	f007 fb12 	bl	80098d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000145c 	.word	0x2000145c

080022bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <TIM3_IRQHandler+0x10>)
 80022c2:	f007 fb08 	bl	80098d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200014a8 	.word	0x200014a8

080022d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 80022d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022d8:	f004 fe58 	bl	8006f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <BSP_I2C1_Init+0x70>)
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <BSP_I2C1_Init+0x74>)
 80022ee:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <BSP_I2C1_Init+0x78>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BSP_I2C1_Init+0x78>)
 80022f8:	600a      	str	r2, [r1, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d122      	bne.n	8002344 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <BSP_I2C1_Init+0x70>)
 8002300:	f005 f948 	bl	8007594 <HAL_I2C_GetState>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11c      	bne.n	8002344 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800230a:	4811      	ldr	r0, [pc, #68]	; (8002350 <BSP_I2C1_Init+0x70>)
 800230c:	f000 f8ba 	bl	8002484 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002316:	480e      	ldr	r0, [pc, #56]	; (8002350 <BSP_I2C1_Init+0x70>)
 8002318:	f7ff fbe4 	bl	8001ae4 <MX_I2C1_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002322:	f06f 0307 	mvn.w	r3, #7
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	e00c      	b.n	8002344 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800232a:	2100      	movs	r1, #0
 800232c:	4808      	ldr	r0, [pc, #32]	; (8002350 <BSP_I2C1_Init+0x70>)
 800232e:	f005 fbf1 	bl	8007b14 <HAL_I2CEx_ConfigAnalogFilter>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002338:	f06f 0307 	mvn.w	r3, #7
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e001      	b.n	8002344 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200013ec 	.word	0x200013ec
 8002354:	40005400 	.word	0x40005400
 8002358:	200010e4 	.word	0x200010e4

0800235c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <BSP_I2C1_DeInit+0x48>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d014      	beq.n	8002398 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <BSP_I2C1_DeInit+0x48>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3b01      	subs	r3, #1
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <BSP_I2C1_DeInit+0x48>)
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <BSP_I2C1_DeInit+0x48>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <BSP_I2C1_DeInit+0x4c>)
 8002382:	f000 f8c5 	bl	8002510 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002386:	4808      	ldr	r0, [pc, #32]	; (80023a8 <BSP_I2C1_DeInit+0x4c>)
 8002388:	f004 fea7 	bl	80070da <HAL_I2C_DeInit>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002392:	f06f 0307 	mvn.w	r3, #7
 8002396:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002398:	687b      	ldr	r3, [r7, #4]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200010e4 	.word	0x200010e4
 80023a8:	200013ec 	.word	0x200013ec

080023ac <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af04      	add	r7, sp, #16
 80023b2:	60ba      	str	r2, [r7, #8]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	81fb      	strh	r3, [r7, #14]
 80023ba:	460b      	mov	r3, r1
 80023bc:	81bb      	strh	r3, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80023c6:	89ba      	ldrh	r2, [r7, #12]
 80023c8:	89f9      	ldrh	r1, [r7, #14]
 80023ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2301      	movs	r3, #1
 80023da:	480c      	ldr	r0, [pc, #48]	; (800240c <BSP_I2C1_WriteReg+0x60>)
 80023dc:	f004 feac 	bl	8007138 <HAL_I2C_Mem_Write>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00c      	beq.n	8002400 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80023e6:	4809      	ldr	r0, [pc, #36]	; (800240c <BSP_I2C1_WriteReg+0x60>)
 80023e8:	f005 f8e2 	bl	80075b0 <HAL_I2C_GetError>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d103      	bne.n	80023fa <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80023f2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e002      	b.n	8002400 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80023fa:	f06f 0303 	mvn.w	r3, #3
 80023fe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002400:	697b      	ldr	r3, [r7, #20]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200013ec 	.word	0x200013ec

08002410 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af04      	add	r7, sp, #16
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	81fb      	strh	r3, [r7, #14]
 800241e:	460b      	mov	r3, r1
 8002420:	81bb      	strh	r3, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800242a:	89ba      	ldrh	r2, [r7, #12]
 800242c:	89f9      	ldrh	r1, [r7, #14]
 800242e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002432:	9302      	str	r3, [sp, #8]
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	480c      	ldr	r0, [pc, #48]	; (8002470 <BSP_I2C1_ReadReg+0x60>)
 8002440:	f004 ff8e 	bl	8007360 <HAL_I2C_Mem_Read>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00c      	beq.n	8002464 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800244a:	4809      	ldr	r0, [pc, #36]	; (8002470 <BSP_I2C1_ReadReg+0x60>)
 800244c:	f005 f8b0 	bl	80075b0 <HAL_I2C_GetError>
 8002450:	4603      	mov	r3, r0
 8002452:	2b04      	cmp	r3, #4
 8002454:	d103      	bne.n	800245e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002456:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e002      	b.n	8002464 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800245e:	f06f 0303 	mvn.w	r3, #3
 8002462:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002464:	697b      	ldr	r3, [r7, #20]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200013ec 	.word	0x200013ec

08002474 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002478:	f003 fed2 	bl	8006220 <HAL_GetTick>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <I2C1_MspInit+0x84>)
 800248e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <I2C1_MspInit+0x84>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002498:	4b1b      	ldr	r3, [pc, #108]	; (8002508 <I2C1_MspInit+0x84>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80024a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024aa:	2312      	movs	r3, #18
 80024ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80024b6:	2304      	movs	r3, #4
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4812      	ldr	r0, [pc, #72]	; (800250c <I2C1_MspInit+0x88>)
 80024c2:	f004 faad 	bl	8006a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80024c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024cc:	2312      	movs	r3, #18
 80024ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d4:	2303      	movs	r3, #3
 80024d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80024d8:	2304      	movs	r3, #4
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	480a      	ldr	r0, [pc, #40]	; (800250c <I2C1_MspInit+0x88>)
 80024e4:	f004 fa9c 	bl	8006a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <I2C1_MspInit+0x84>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <I2C1_MspInit+0x84>)
 80024ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <I2C1_MspInit+0x84>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	48000400 	.word	0x48000400

08002510 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <I2C1_MspDeInit+0x30>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	4a08      	ldr	r2, [pc, #32]	; (8002540 <I2C1_MspDeInit+0x30>)
 800251e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002522:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <I2C1_MspDeInit+0x34>)
 800252a:	f004 fc23 	bl	8006d74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800252e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002532:	4804      	ldr	r0, [pc, #16]	; (8002544 <I2C1_MspDeInit+0x34>)
 8002534:	f004 fc1e 	bl	8006d74 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	48000400 	.word	0x48000400

08002548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	return 1;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_kill>:

int _kill(int pid, int sig)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002562:	f014 fef9 	bl	8017358 <__errno>
 8002566:	4603      	mov	r3, r0
 8002568:	2216      	movs	r2, #22
 800256a:	601a      	str	r2, [r3, #0]
	return -1;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_exit>:

void _exit (int status)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffe7 	bl	8002558 <_kill>
	while (1) {}		/* Make sure we hang here */
 800258a:	e7fe      	b.n	800258a <_exit+0x12>

0800258c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	4601      	mov	r1, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf0      	blt.n	800259e <_read+0x12>
	}

return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e009      	b.n	80025ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fd25 	bl	8006030 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf1      	blt.n	80025d8 <_write+0x12>
	}
	return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_close>:

int _close(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002626:	605a      	str	r2, [r3, #4]
	return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_isatty>:

int _isatty(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002670:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <_sbrk+0x5c>)
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <_sbrk+0x60>)
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <_sbrk+0x64>)
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <_sbrk+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d207      	bcs.n	80026a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002698:	f014 fe5e 	bl	8017358 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	e009      	b.n	80026bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <_sbrk+0x64>)
 80026b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20018000 	.word	0x20018000
 80026c8:	00000400 	.word	0x00000400
 80026cc:	200010e8 	.word	0x200010e8
 80026d0:	20001a08 	.word	0x20001a08

080026d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <SystemInit+0x20>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <SystemInit+0x20>)
 80026e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026fe:	f107 0310 	add.w	r3, r7, #16
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <MX_TIM3_Init+0x94>)
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <MX_TIM3_Init+0x98>)
 800271a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_TIM3_Init+0x94>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <MX_TIM3_Init+0x94>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_TIM3_Init+0x94>)
 800272a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800272e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <MX_TIM3_Init+0x94>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_TIM3_Init+0x94>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800273c:	4813      	ldr	r0, [pc, #76]	; (800278c <MX_TIM3_Init+0x94>)
 800273e:	f006 ffe3 	bl	8009708 <HAL_TIM_Base_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002748:	f7ff fc02 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002752:	f107 0310 	add.w	r3, r7, #16
 8002756:	4619      	mov	r1, r3
 8002758:	480c      	ldr	r0, [pc, #48]	; (800278c <MX_TIM3_Init+0x94>)
 800275a:	f007 f9db 	bl	8009b14 <HAL_TIM_ConfigClockSource>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002764:	f7ff fbf4 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <MX_TIM3_Init+0x94>)
 8002776:	f007 fbfd 	bl	8009f74 <HAL_TIMEx_MasterConfigSynchronization>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002780:	f7ff fbe6 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002784:	bf00      	nop
 8002786:	3720      	adds	r7, #32
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200014a8 	.word	0x200014a8
 8002790:	40000400 	.word	0x40000400

08002794 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279a:	f107 0310 	add.w	r3, r7, #16
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027b4:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <MX_TIM15_Init+0xa0>)
 80027b6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027de:	4814      	ldr	r0, [pc, #80]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027e0:	f006 ff92 	bl	8009708 <HAL_TIM_Base_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80027ea:	f7ff fbb1 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	4619      	mov	r1, r3
 80027fa:	480d      	ldr	r0, [pc, #52]	; (8002830 <MX_TIM15_Init+0x9c>)
 80027fc:	f007 f98a 	bl	8009b14 <HAL_TIM_ConfigClockSource>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002806:	f7ff fba3 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	4619      	mov	r1, r3
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_TIM15_Init+0x9c>)
 8002818:	f007 fbac 	bl	8009f74 <HAL_TIMEx_MasterConfigSynchronization>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002822:	f7ff fb95 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000145c 	.word	0x2000145c
 8002834:	40014000 	.word	0x40014000

08002838 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_TIM_Base_MspInit+0x78>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d114      	bne.n	8002874 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <HAL_TIM_Base_MspInit+0x7c>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_TIM_Base_MspInit+0x7c>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6593      	str	r3, [r2, #88]	; 0x58
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_TIM_Base_MspInit+0x7c>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	201d      	movs	r0, #29
 8002868:	f003 fdc1 	bl	80063ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800286c:	201d      	movs	r0, #29
 800286e:	f003 fdda 	bl	8006426 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002872:	e018      	b.n	80028a6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0f      	ldr	r2, [pc, #60]	; (80028b8 <HAL_TIM_Base_MspInit+0x80>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d113      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_TIM_Base_MspInit+0x7c>)
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	4a0c      	ldr	r2, [pc, #48]	; (80028b4 <HAL_TIM_Base_MspInit+0x7c>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6613      	str	r3, [r2, #96]	; 0x60
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <HAL_TIM_Base_MspInit+0x7c>)
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	2018      	movs	r0, #24
 800289c:	f003 fda7 	bl	80063ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80028a0:	2018      	movs	r0, #24
 80028a2:	f003 fdc0 	bl	8006426 <HAL_NVIC_EnableIRQ>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40014000 	.word	0x40014000

080028bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c0:	f7ff ff08 	bl	80026d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80028c6:	490d      	ldr	r1, [pc, #52]	; (80028fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <LoopForever+0xe>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028dc:	4c0a      	ldr	r4, [pc, #40]	; (8002908 <LoopForever+0x16>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ea:	f014 fd3b 	bl	8017364 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028ee:	f7ff fa85 	bl	8001dfc <main>

080028f2 <LoopForever>:

LoopForever:
    b LoopForever
 80028f2:	e7fe      	b.n	80028f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028fc:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002900:	0801abf4 	.word	0x0801abf4
  ldr r2, =_sbss
 8002904:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002908:	20001a08 	.word	0x20001a08

0800290c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800290c:	e7fe      	b.n	800290c <ADC1_2_IRQHandler>
	...

08002910 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	e04d      	b.n	80029c8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	7b1a      	ldrb	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002968:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 800296e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e020      	b.n	80029c8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4798      	blx	r3
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e016      	b.n	80029c8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d112      	bne.n	80029c8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80029ac:	2301      	movs	r3, #1
 80029ae:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80029b0:	7afb      	ldrb	r3, [r7, #11]
 80029b2:	461a      	mov	r2, r3
 80029b4:	2123      	movs	r1, #35	; 0x23
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fb55 	bl	8003066 <LSM303AGR_ACC_Write_Reg>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e000      	b.n	80029ca <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08003875 	.word	0x08003875
 80029d8:	080038d7 	.word	0x080038d7

080029dc <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	331c      	adds	r3, #28
 80029e8:	2101      	movs	r1, #1
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f94a 	bl	8003c84 <lsm303agr_xl_block_data_update_set>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	e02c      	b.n	8002a56 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	331c      	adds	r3, #28
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 faed 	bl	8003fe2 <lsm303agr_xl_fifo_mode_set>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	e020      	b.n	8002a56 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2205      	movs	r2, #5
 8002a18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	331c      	adds	r3, #28
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 f84e 	bl	8003ac4 <lsm303agr_xl_data_rate_set>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	e010      	b.n	8002a56 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	331c      	adds	r3, #28
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 f8c4 	bl	8003bc8 <lsm303agr_xl_full_scale_set>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	e004      	b.n	8002a56 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f87c 	bl	8002b64 <LSM303AGR_ACC_Disable>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	e008      	b.n	8002a8a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	331c      	adds	r3, #28
 8002aa0:	6839      	ldr	r1, [r7, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 fa55 	bl	8003f52 <lsm303agr_xl_device_id_get>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab2:	e000      	b.n	8002ab6 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2210      	movs	r2, #16
 8002aec:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002b00:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	43c80000 	.word	0x43c80000

08002b1c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e014      	b.n	8002b5c <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f103 021c 	add.w	r2, r3, #28
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 ffbf 	bl	8003ac4 <lsm303agr_xl_data_rate_set>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b50:	e004      	b.n	8002b5c <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e01f      	b.n	8002bba <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 021c 	add.w	r2, r3, #28
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	332a      	adds	r3, #42	; 0x2a
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 ffc2 	bl	8003b10 <lsm303agr_xl_data_rate_get>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d002      	beq.n	8002b98 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e010      	b.n	8002bba <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	331c      	adds	r3, #28
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 ff90 	bl	8003ac4 <lsm303agr_xl_data_rate_set>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e004      	b.n	8002bba <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	331c      	adds	r3, #28
 8002bd4:	f107 020b 	add.w	r2, r7, #11
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 ff3e 	bl	8003a5c <lsm303agr_xl_operating_mode_get>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e031      	b.n	8002c50 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d01a      	beq.n	8002c28 <LSM303AGR_ACC_GetSensitivity+0x66>
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	dc22      	bgt.n	8002c3c <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00a      	beq.n	8002c14 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002bfe:	e01d      	b.n	8002c3c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002c00:	6839      	ldr	r1, [r7, #0]
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fca8 	bl	8003558 <LSM303AGR_ACC_GetSensitivityHR>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01a      	beq.n	8002c44 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	e01d      	b.n	8002c50 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002c14:	6839      	ldr	r1, [r7, #0]
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fce4 	bl	80035e4 <LSM303AGR_ACC_GetSensitivityNM>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	e013      	b.n	8002c50 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 fd20 	bl	8003670 <LSM303AGR_ACC_GetSensitivityLP>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e009      	b.n	8002c50 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	60fb      	str	r3, [r7, #12]
      break;
 8002c42:	e004      	b.n	8002c4e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002c44:	bf00      	nop
 8002c46:	e002      	b.n	8002c4e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002c48:	bf00      	nop
 8002c4a:	e000      	b.n	8002c4e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002c4c:	bf00      	nop
  }

  return ret;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	331c      	adds	r3, #28
 8002c6a:	f107 020b 	add.w	r2, r7, #11
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fef3 	bl	8003a5c <lsm303agr_xl_operating_mode_get>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c80:	e09d      	b.n	8002dbe <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	331c      	adds	r3, #28
 8002c86:	f107 020a 	add.w	r2, r7, #10
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 ff3f 	bl	8003b10 <lsm303agr_xl_data_rate_get>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	e08f      	b.n	8002dbe <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d147      	bne.n	8002d34 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002ca4:	7abb      	ldrb	r3, [r7, #10]
 8002ca6:	2b09      	cmp	r3, #9
 8002ca8:	d840      	bhi.n	8002d2c <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002caa:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cd9 	.word	0x08002cd9
 8002cb4:	08002ce3 	.word	0x08002ce3
 8002cb8:	08002ced 	.word	0x08002ced
 8002cbc:	08002cf5 	.word	0x08002cf5
 8002cc0:	08002cfd 	.word	0x08002cfd
 8002cc4:	08002d05 	.word	0x08002d05
 8002cc8:	08002d0d 	.word	0x08002d0d
 8002ccc:	08002d15 	.word	0x08002d15
 8002cd0:	08002d1d 	.word	0x08002d1d
 8002cd4:	08002d25 	.word	0x08002d25
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
        break;
 8002ce0:	e06c      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ce8:	601a      	str	r2, [r3, #0]
        break;
 8002cea:	e067      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002cf0:	601a      	str	r2, [r3, #0]
        break;
 8002cf2:	e063      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4a35      	ldr	r2, [pc, #212]	; (8002dcc <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002cf8:	601a      	str	r2, [r3, #0]
        break;
 8002cfa:	e05f      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4a34      	ldr	r2, [pc, #208]	; (8002dd0 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002d00:	601a      	str	r2, [r3, #0]
        break;
 8002d02:	e05b      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4a33      	ldr	r2, [pc, #204]	; (8002dd4 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002d08:	601a      	str	r2, [r3, #0]
        break;
 8002d0a:	e057      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4a32      	ldr	r2, [pc, #200]	; (8002dd8 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002d10:	601a      	str	r2, [r3, #0]
        break;
 8002d12:	e053      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002d18:	601a      	str	r2, [r3, #0]
        break;
 8002d1a:	e04f      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002d20:	601a      	str	r2, [r3, #0]
        break;
 8002d22:	e04b      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002d28:	601a      	str	r2, [r3, #0]
        break;
 8002d2a:	e047      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	60fb      	str	r3, [r7, #12]
        break;
 8002d32:	e043      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002d34:	7abb      	ldrb	r3, [r7, #10]
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	d83c      	bhi.n	8002db4 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002d69 	.word	0x08002d69
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d7d 	.word	0x08002d7d
 8002d4c:	08002d85 	.word	0x08002d85
 8002d50:	08002d8d 	.word	0x08002d8d
 8002d54:	08002d95 	.word	0x08002d95
 8002d58:	08002d9d 	.word	0x08002d9d
 8002d5c:	08002da5 	.word	0x08002da5
 8002d60:	08002db5 	.word	0x08002db5
 8002d64:	08002dad 	.word	0x08002dad
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
        break;
 8002d70:	e024      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d78:	601a      	str	r2, [r3, #0]
        break;
 8002d7a:	e01f      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002d80:	601a      	str	r2, [r3, #0]
        break;
 8002d82:	e01b      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002d88:	601a      	str	r2, [r3, #0]
        break;
 8002d8a:	e017      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002d90:	601a      	str	r2, [r3, #0]
        break;
 8002d92:	e013      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4a0f      	ldr	r2, [pc, #60]	; (8002dd4 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002d98:	601a      	str	r2, [r3, #0]
        break;
 8002d9a:	e00f      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002da0:	601a      	str	r2, [r3, #0]
        break;
 8002da2:	e00b      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002da8:	601a      	str	r2, [r3, #0]
        break;
 8002daa:	e007      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002db0:	601a      	str	r2, [r3, #0]
        break;
 8002db2:	e003      	b.n	8002dbc <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	60fb      	str	r3, [r7, #12]
        break;
 8002dba:	bf00      	nop
    }
  }

  return ret;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	41200000 	.word	0x41200000
 8002dcc:	41c80000 	.word	0x41c80000
 8002dd0:	42480000 	.word	0x42480000
 8002dd4:	42c80000 	.word	0x42c80000
 8002dd8:	43480000 	.word	0x43480000
 8002ddc:	43c80000 	.word	0x43c80000
 8002de0:	44ca8000 	.word	0x44ca8000
 8002de4:	45a80000 	.word	0x45a80000
 8002de8:	44a80000 	.word	0x44a80000

08002dec <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d106      	bne.n	8002e10 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002e02:	ed97 0a00 	vldr	s0, [r7]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fc78 	bl	80036fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	e005      	b.n	8002e1c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002e10:	ed97 0a00 	vldr	s0, [r7]
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fcd3 	bl	80037c0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002e1a:	4603      	mov	r3, r0
  }
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	331c      	adds	r3, #28
 8002e36:	f107 020b 	add.w	r2, r7, #11
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fee9 	bl	8003c14 <lsm303agr_xl_full_scale_get>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4c:	e023      	b.n	8002e96 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002e4e:	7afb      	ldrb	r3, [r7, #11]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d81b      	bhi.n	8002e8c <LSM303AGR_ACC_GetFullScale+0x68>
 8002e54:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <LSM303AGR_ACC_GetFullScale+0x38>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e75 	.word	0x08002e75
 8002e64:	08002e7d 	.word	0x08002e7d
 8002e68:	08002e85 	.word	0x08002e85
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	601a      	str	r2, [r3, #0]
      break;
 8002e72:	e00f      	b.n	8002e94 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2204      	movs	r2, #4
 8002e78:	601a      	str	r2, [r3, #0]
      break;
 8002e7a:	e00b      	b.n	8002e94 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2208      	movs	r2, #8
 8002e80:	601a      	str	r2, [r3, #0]
      break;
 8002e82:	e007      	b.n	8002e94 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2210      	movs	r2, #16
 8002e88:	601a      	str	r2, [r3, #0]
      break;
 8002e8a:	e003      	b.n	8002e94 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	60fb      	str	r3, [r7, #12]
      break;
 8002e92:	bf00      	nop
  }

  return ret;
 8002e94:	68fb      	ldr	r3, [r7, #12]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	dd0b      	ble.n	8002ec8 <LSM303AGR_ACC_SetFullScale+0x28>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	dd06      	ble.n	8002ec4 <LSM303AGR_ACC_SetFullScale+0x24>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	dc01      	bgt.n	8002ec0 <LSM303AGR_ACC_SetFullScale+0x20>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e004      	b.n	8002eca <LSM303AGR_ACC_SetFullScale+0x2a>
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e002      	b.n	8002eca <LSM303AGR_ACC_SetFullScale+0x2a>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <LSM303AGR_ACC_SetFullScale+0x2a>
 8002ec8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002eca:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	331c      	adds	r3, #28
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fe77 	bl	8003bc8 <lsm303agr_xl_full_scale_set>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee4:	e000      	b.n	8002ee8 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	331c      	adds	r3, #28
 8002f06:	f107 020f 	add.w	r2, r7, #15
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fda5 	bl	8003a5c <lsm303agr_xl_operating_mode_get>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	e04a      	b.n	8002fb4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d00c      	beq.n	8002f3e <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	dc0e      	bgt.n	8002f46 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d003      	beq.n	8002f38 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002f30:	e009      	b.n	8002f46 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002f32:	2310      	movs	r3, #16
 8002f34:	83fb      	strh	r3, [r7, #30]
      break;
 8002f36:	e00a      	b.n	8002f4e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002f38:	2340      	movs	r3, #64	; 0x40
 8002f3a:	83fb      	strh	r3, [r7, #30]
      break;
 8002f3c:	e007      	b.n	8002f4e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f42:	83fb      	strh	r3, [r7, #30]
      break;
 8002f44:	e003      	b.n	8002f4e <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	61bb      	str	r3, [r7, #24]
      break;
 8002f4c:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d101      	bne.n	8002f5a <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	e02c      	b.n	8002fb4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	331c      	adds	r3, #28
 8002f5e:	f107 0210 	add.w	r2, r7, #16
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 feb3 	bl	8003cd0 <lsm303agr_acceleration_raw_get>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e01e      	b.n	8002fb4 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002f76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f80:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002f8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002f9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002fa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fac:	b21a      	sxth	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	809a      	strh	r2, [r3, #4]

  return ret;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ff8c 	bl	8002ef0 <LSM303AGR_ACC_GetAxesRaw>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe2:	e03c      	b.n	800305e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fde9 	bl	8002bc2 <LSM303AGR_ACC_GetSensitivity>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	e030      	b.n	800305e <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002ffc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003000:	ee07 3a90 	vmov	s15, r3
 8003004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003008:	edd7 7a03 	vldr	s15, [r7, #12]
 800300c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003014:	ee17 2a90 	vmov	r2, s15
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800301c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003028:	edd7 7a03 	vldr	s15, [r7, #12]
 800302c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003034:	ee17 2a90 	vmov	r2, s15
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800303c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003048:	edd7 7a03 	vldr	s15, [r7, #12]
 800304c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003054:	ee17 2a90 	vmov	r2, s15
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	70fb      	strb	r3, [r7, #3]
 8003072:	4613      	mov	r3, r2
 8003074:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f103 001c 	add.w	r0, r3, #28
 800307c:	1cba      	adds	r2, r7, #2
 800307e:	78f9      	ldrb	r1, [r7, #3]
 8003080:	2301      	movs	r3, #1
 8003082:	f000 fcd3 	bl	8003a2c <lsm303agr_write_reg>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295
 8003090:	e000      	b.n	8003094 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	e04b      	b.n	8003150 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	7b1a      	ldrb	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a1a      	ldr	r2, [pc, #104]	; (800315c <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 80030f4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 80030fa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800310a:	f04f 33ff 	mov.w	r3, #4294967295
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e01e      	b.n	8003150 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4798      	blx	r3
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e014      	b.n	8003150 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	331c      	adds	r3, #28
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ff75 	bl	800402e <lsm303agr_mag_i2c_interface_set>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e000      	b.n	8003152 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8003150:	68fb      	ldr	r3, [r7, #12]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	08003939 	.word	0x08003939
 8003160:	0800399b 	.word	0x0800399b

08003164 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	331c      	adds	r3, #28
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fe7c 	bl	8003e70 <lsm303agr_mag_block_data_update_set>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	e028      	b.n	80031d6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	331c      	adds	r3, #28
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fdeb 	bl	8003d66 <lsm303agr_mag_operating_mode_set>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e01c      	b.n	80031d6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	331c      	adds	r3, #28
 80031a0:	2103      	movs	r1, #3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fe05 	bl	8003db2 <lsm303agr_mag_data_rate_set>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	e010      	b.n	80031d6 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	331c      	adds	r3, #28
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 feeb 	bl	8003f96 <lsm303agr_mag_self_test_set>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ca:	e004      	b.n	80031d6 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f874 	bl	80032d4 <LSM303AGR_MAG_Disable>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e004      	b.n	8003202 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	331c      	adds	r3, #28
 8003218:	6839      	ldr	r1, [r7, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 feaa 	bl	8003f74 <lsm303agr_mag_device_id_get>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e000      	b.n	800322e <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2200      	movs	r2, #0
 800324c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2201      	movs	r2, #1
 8003252:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2200      	movs	r2, #0
 800325e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2232      	movs	r2, #50	; 0x32
 800326a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003280:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	42c80000 	.word	0x42c80000

08003294 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e010      	b.n	80032cc <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	331c      	adds	r3, #28
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fd58 	bl	8003d66 <lsm303agr_mag_operating_mode_set>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	e004      	b.n	80032cc <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e010      	b.n	800330c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	331c      	adds	r3, #28
 80032ee:	2102      	movs	r1, #2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fd38 	bl	8003d66 <lsm303agr_mag_operating_mode_set>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 80032fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003300:	e004      	b.n	800330c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003324:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	331c      	adds	r3, #28
 8003346:	f107 020b 	add.w	r2, r7, #11
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fd57 	bl	8003e00 <lsm303agr_mag_data_rate_get>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295
 800335c:	e023      	b.n	80033a6 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d81b      	bhi.n	800339c <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	0800337d 	.word	0x0800337d
 8003370:	08003385 	.word	0x08003385
 8003374:	0800338d 	.word	0x0800338d
 8003378:	08003395 	.word	0x08003395
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003380:	601a      	str	r2, [r3, #0]
      break;
 8003382:	e00f      	b.n	80033a4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003388:	601a      	str	r2, [r3, #0]
      break;
 800338a:	e00b      	b.n	80033a4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003390:	601a      	str	r2, [r3, #0]
      break;
 8003392:	e007      	b.n	80033a4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003398:	601a      	str	r2, [r3, #0]
      break;
 800339a:	e003      	b.n	80033a4 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
 80033a0:	60fb      	str	r3, [r7, #12]
      break;
 80033a2:	bf00      	nop
  }

  return ret;
 80033a4:	68fb      	ldr	r3, [r7, #12]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	41200000 	.word	0x41200000
 80033b4:	41a00000 	.word	0x41a00000
 80033b8:	42480000 	.word	0x42480000
 80033bc:	42c80000 	.word	0x42c80000

080033c0 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80033cc:	edd7 7a00 	vldr	s15, [r7]
 80033d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80033d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d801      	bhi.n	80033e2 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 80033de:	2300      	movs	r3, #0
 80033e0:	e016      	b.n	8003410 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80033e2:	edd7 7a00 	vldr	s15, [r7]
 80033e6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80033ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f2:	d801      	bhi.n	80033f8 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e00b      	b.n	8003410 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80033f8:	edd7 7a00 	vldr	s15, [r7]
 80033fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003438 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003408:	d801      	bhi.n	800340e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800340a:	2302      	movs	r3, #2
 800340c:	e000      	b.n	8003410 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800340e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003410:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	331c      	adds	r3, #28
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fcc9 	bl	8003db2 <lsm303agr_mag_data_rate_set>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	e000      	b.n	800342e <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	42480000 	.word	0x42480000

0800343c <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2232      	movs	r2, #50	; 0x32
 800344a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	331c      	adds	r3, #28
 8003480:	f107 0208 	add.w	r2, r7, #8
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fd18 	bl	8003ebc <lsm303agr_magnetic_raw_get>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	e00c      	b.n	80034b2 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003498:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80034a0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80034a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	331c      	adds	r3, #28
 80034c8:	f107 0210 	add.w	r2, r7, #16
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fcf4 	bl	8003ebc <lsm303agr_magnetic_raw_get>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295
 80034de:	e036      	b.n	800354e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ff14 	bl	8003314 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80034ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003504:	ee17 2a90 	vmov	r2, s15
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800350c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003510:	ee07 3a90 	vmov	s15, r3
 8003514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003518:	edd7 7a03 	vldr	s15, [r7, #12]
 800351c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003524:	ee17 2a90 	vmov	r2, s15
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800352c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003538:	edd7 7a03 	vldr	s15, [r7, #12]
 800353c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003544:	ee17 2a90 	vmov	r2, s15
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	331c      	adds	r3, #28
 800356a:	f107 020b 	add.w	r2, r7, #11
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fb4f 	bl	8003c14 <lsm303agr_xl_full_scale_get>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	e023      	b.n	80035ca <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003582:	7afb      	ldrb	r3, [r7, #11]
 8003584:	2b03      	cmp	r3, #3
 8003586:	d81b      	bhi.n	80035c0 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035a9 	.word	0x080035a9
 8003598:	080035b1 	.word	0x080035b1
 800359c:	080035b9 	.word	0x080035b9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80035a4:	601a      	str	r2, [r3, #0]
      break;
 80035a6:	e00f      	b.n	80035c8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80035ac:	601a      	str	r2, [r3, #0]
      break;
 80035ae:	e00b      	b.n	80035c8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80035b4:	601a      	str	r2, [r3, #0]
      break;
 80035b6:	e007      	b.n	80035c8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80035bc:	601a      	str	r2, [r3, #0]
      break;
 80035be:	e003      	b.n	80035c8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	60fb      	str	r3, [r7, #12]
      break;
 80035c6:	bf00      	nop
  }

  return ret;
 80035c8:	68fb      	ldr	r3, [r7, #12]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	3f7ae148 	.word	0x3f7ae148
 80035d8:	3ff9999a 	.word	0x3ff9999a
 80035dc:	4079999a 	.word	0x4079999a
 80035e0:	413b851f 	.word	0x413b851f

080035e4 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	331c      	adds	r3, #28
 80035f6:	f107 020b 	add.w	r2, r7, #11
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fb09 	bl	8003c14 <lsm303agr_xl_full_scale_get>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	e023      	b.n	8003656 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d81b      	bhi.n	800364c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	0800362d 	.word	0x0800362d
 8003620:	08003635 	.word	0x08003635
 8003624:	0800363d 	.word	0x0800363d
 8003628:	08003645 	.word	0x08003645
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003630:	601a      	str	r2, [r3, #0]
      break;
 8003632:	e00f      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003638:	601a      	str	r2, [r3, #0]
      break;
 800363a:	e00b      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003640:	601a      	str	r2, [r3, #0]
      break;
 8003642:	e007      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003648:	601a      	str	r2, [r3, #0]
      break;
 800364a:	e003      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
 8003650:	60fb      	str	r3, [r7, #12]
      break;
 8003652:	bf00      	nop
  }

  return ret;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	4079999a 	.word	0x4079999a
 8003664:	40fa3d71 	.word	0x40fa3d71
 8003668:	417a147b 	.word	0x417a147b
 800366c:	423b999a 	.word	0x423b999a

08003670 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	331c      	adds	r3, #28
 8003682:	f107 020b 	add.w	r2, r7, #11
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fac3 	bl	8003c14 <lsm303agr_xl_full_scale_get>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	e023      	b.n	80036e2 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d81b      	bhi.n	80036d8 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c1 	.word	0x080036c1
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036d1 	.word	0x080036d1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80036bc:	601a      	str	r2, [r3, #0]
      break;
 80036be:	e00f      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80036c4:	601a      	str	r2, [r3, #0]
      break;
 80036c6:	e00b      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80036cc:	601a      	str	r2, [r3, #0]
      break;
 80036ce:	e007      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80036d4:	601a      	str	r2, [r3, #0]
      break;
 80036d6:	e003      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	60fb      	str	r3, [r7, #12]
      break;
 80036de:	bf00      	nop
  }

  return ret;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	417a147b 	.word	0x417a147b
 80036f0:	41fa147b 	.word	0x41fa147b
 80036f4:	427a147b 	.word	0x427a147b
 80036f8:	433b947b 	.word	0x433b947b

080036fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003708:	edd7 7a00 	vldr	s15, [r7]
 800370c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	d801      	bhi.n	800371e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 800371a:	2301      	movs	r3, #1
 800371c:	e037      	b.n	800378e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800371e:	edd7 7a00 	vldr	s15, [r7]
 8003722:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d801      	bhi.n	8003734 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003730:	2302      	movs	r3, #2
 8003732:	e02c      	b.n	800378e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003734:	edd7 7a00 	vldr	s15, [r7]
 8003738:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800373c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003744:	d801      	bhi.n	800374a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003746:	2303      	movs	r3, #3
 8003748:	e021      	b.n	800378e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800374a:	edd7 7a00 	vldr	s15, [r7]
 800374e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80037b4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	d801      	bhi.n	8003760 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 800375c:	2304      	movs	r3, #4
 800375e:	e016      	b.n	800378e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003760:	edd7 7a00 	vldr	s15, [r7]
 8003764:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80037b8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003770:	d801      	bhi.n	8003776 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003772:	2305      	movs	r3, #5
 8003774:	e00b      	b.n	800378e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003776:	edd7 7a00 	vldr	s15, [r7]
 800377a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80037bc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800377e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	d801      	bhi.n	800378c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003788:	2306      	movs	r3, #6
 800378a:	e000      	b.n	800378e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800378c:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800378e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	331c      	adds	r3, #28
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f993 	bl	8003ac4 <lsm303agr_xl_data_rate_set>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d002      	beq.n	80037aa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
 80037a8:	e000      	b.n	80037ac <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	42480000 	.word	0x42480000
 80037b8:	42c80000 	.word	0x42c80000
 80037bc:	43480000 	.word	0x43480000

080037c0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80037cc:	edd7 7a00 	vldr	s15, [r7]
 80037d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	d801      	bhi.n	80037e2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80037de:	2301      	movs	r3, #1
 80037e0:	e037      	b.n	8003852 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037e2:	edd7 7a00 	vldr	s15, [r7]
 80037e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	d801      	bhi.n	80037f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e02c      	b.n	8003852 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80037f8:	edd7 7a00 	vldr	s15, [r7]
 80037fc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	d801      	bhi.n	800380e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800380a:	2303      	movs	r3, #3
 800380c:	e021      	b.n	8003852 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800380e:	edd7 7a00 	vldr	s15, [r7]
 8003812:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003868 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	d801      	bhi.n	8003824 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003820:	2304      	movs	r3, #4
 8003822:	e016      	b.n	8003852 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003824:	edd7 7a00 	vldr	s15, [r7]
 8003828:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800386c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 800382c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003834:	d801      	bhi.n	800383a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003836:	2305      	movs	r3, #5
 8003838:	e00b      	b.n	8003852 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800383a:	edd7 7a00 	vldr	s15, [r7]
 800383e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003870 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	d801      	bhi.n	8003850 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 800384c:	2306      	movs	r3, #6
 800384e:	e000      	b.n	8003852 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003850:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	42480000 	.word	0x42480000
 800386c:	42c80000 	.word	0x42c80000
 8003870:	43480000 	.word	0x43480000

08003874 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	460b      	mov	r3, r1
 8003882:	72fb      	strb	r3, [r7, #11]
 8003884:	4613      	mov	r3, r2
 8003886:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10e      	bne.n	80038b2 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	695c      	ldr	r4, [r3, #20]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	b298      	uxth	r0, r3
 800389e:	7afb      	ldrb	r3, [r7, #11]
 80038a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	b299      	uxth	r1, r3
 80038a8:	893b      	ldrh	r3, [r7, #8]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	47a0      	blx	r4
 80038ae:	4603      	mov	r3, r0
 80038b0:	e00d      	b.n	80038ce <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	695c      	ldr	r4, [r3, #20]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	7b1b      	ldrb	r3, [r3, #12]
 80038ba:	b298      	uxth	r0, r3
 80038bc:	7afb      	ldrb	r3, [r7, #11]
 80038be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	b299      	uxth	r1, r3
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	47a0      	blx	r4
 80038cc:	4603      	mov	r3, r0
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd90      	pop	{r4, r7, pc}

080038d6 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038d6:	b590      	push	{r4, r7, lr}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	461a      	mov	r2, r3
 80038e2:	460b      	mov	r3, r1
 80038e4:	72fb      	strb	r3, [r7, #11]
 80038e6:	4613      	mov	r3, r2
 80038e8:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	691c      	ldr	r4, [r3, #16]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	7b1b      	ldrb	r3, [r3, #12]
 80038fe:	b298      	uxth	r0, r3
 8003900:	7afb      	ldrb	r3, [r7, #11]
 8003902:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003906:	b2db      	uxtb	r3, r3
 8003908:	b299      	uxth	r1, r3
 800390a:	893b      	ldrh	r3, [r7, #8]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	47a0      	blx	r4
 8003910:	4603      	mov	r3, r0
 8003912:	e00d      	b.n	8003930 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	691c      	ldr	r4, [r3, #16]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	7b1b      	ldrb	r3, [r3, #12]
 800391c:	b298      	uxth	r0, r3
 800391e:	7afb      	ldrb	r3, [r7, #11]
 8003920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003924:	b2db      	uxtb	r3, r3
 8003926:	b299      	uxth	r1, r3
 8003928:	893b      	ldrh	r3, [r7, #8]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	47a0      	blx	r4
 800392e:	4603      	mov	r3, r0
  }
}
 8003930:	4618      	mov	r0, r3
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bd90      	pop	{r4, r7, pc}

08003938 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	461a      	mov	r2, r3
 8003944:	460b      	mov	r3, r1
 8003946:	72fb      	strb	r3, [r7, #11]
 8003948:	4613      	mov	r3, r2
 800394a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10e      	bne.n	8003976 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	695c      	ldr	r4, [r3, #20]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	7b1b      	ldrb	r3, [r3, #12]
 8003960:	b298      	uxth	r0, r3
 8003962:	7afb      	ldrb	r3, [r7, #11]
 8003964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003968:	b2db      	uxtb	r3, r3
 800396a:	b299      	uxth	r1, r3
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	47a0      	blx	r4
 8003972:	4603      	mov	r3, r0
 8003974:	e00d      	b.n	8003992 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	695c      	ldr	r4, [r3, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	7b1b      	ldrb	r3, [r3, #12]
 800397e:	b298      	uxth	r0, r3
 8003980:	7afb      	ldrb	r3, [r7, #11]
 8003982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003986:	b2db      	uxtb	r3, r3
 8003988:	b299      	uxth	r1, r3
 800398a:	893b      	ldrh	r3, [r7, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	47a0      	blx	r4
 8003990:	4603      	mov	r3, r0
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd90      	pop	{r4, r7, pc}

0800399a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800399a:	b590      	push	{r4, r7, lr}
 800399c:	b087      	sub	sp, #28
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	461a      	mov	r2, r3
 80039a6:	460b      	mov	r3, r1
 80039a8:	72fb      	strb	r3, [r7, #11]
 80039aa:	4613      	mov	r3, r2
 80039ac:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10e      	bne.n	80039d8 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	691c      	ldr	r4, [r3, #16]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	7b1b      	ldrb	r3, [r3, #12]
 80039c2:	b298      	uxth	r0, r3
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	b299      	uxth	r1, r3
 80039ce:	893b      	ldrh	r3, [r7, #8]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	47a0      	blx	r4
 80039d4:	4603      	mov	r3, r0
 80039d6:	e00d      	b.n	80039f4 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	691c      	ldr	r4, [r3, #16]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	7b1b      	ldrb	r3, [r3, #12]
 80039e0:	b298      	uxth	r0, r3
 80039e2:	7afb      	ldrb	r3, [r7, #11]
 80039e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	b299      	uxth	r1, r3
 80039ec:	893b      	ldrh	r3, [r7, #8]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	47a0      	blx	r4
 80039f2:	4603      	mov	r3, r0
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd90      	pop	{r4, r7, pc}

080039fc <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	72fb      	strb	r3, [r7, #11]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685c      	ldr	r4, [r3, #4]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6898      	ldr	r0, [r3, #8]
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	7af9      	ldrb	r1, [r7, #11]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	47a0      	blx	r4
 8003a20:	6178      	str	r0, [r7, #20]
  return ret;
 8003a22:	697b      	ldr	r3, [r7, #20]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd90      	pop	{r4, r7, pc}

08003a2c <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	461a      	mov	r2, r3
 8003a38:	460b      	mov	r3, r1
 8003a3a:	72fb      	strb	r3, [r7, #11]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681c      	ldr	r4, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6898      	ldr	r0, [r3, #8]
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	7af9      	ldrb	r1, [r7, #11]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	47a0      	blx	r4
 8003a50:	6178      	str	r0, [r7, #20]
  return ret;
 8003a52:	697b      	ldr	r3, [r7, #20]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}

08003a5c <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003a66:	f107 020c 	add.w	r2, r7, #12
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	2120      	movs	r1, #32
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ffc4 	bl	80039fc <lsm303agr_read_reg>
 8003a74:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d107      	bne.n	8003a8c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003a7c:	f107 0210 	add.w	r2, r7, #16
 8003a80:	2301      	movs	r3, #1
 8003a82:	2123      	movs	r1, #35	; 0x23
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ffb9 	bl	80039fc <lsm303agr_read_reg>
 8003a8a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003a8c:	7b3b      	ldrb	r3, [r7, #12]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	e00c      	b.n	8003aba <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003aa0:	7c3b      	ldrb	r3, [r7, #16]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e002      	b.n	8003aba <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003aba:	697b      	ldr	r3, [r7, #20]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003ad0:	f107 0208 	add.w	r2, r7, #8
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2120      	movs	r1, #32
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff8f 	bl	80039fc <lsm303agr_read_reg>
 8003ade:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003ae6:	78fb      	ldrb	r3, [r7, #3]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	7a3b      	ldrb	r3, [r7, #8]
 8003af0:	f362 1307 	bfi	r3, r2, #4, #4
 8003af4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003af6:	f107 0208 	add.w	r2, r7, #8
 8003afa:	2301      	movs	r3, #1
 8003afc:	2120      	movs	r1, #32
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff94 	bl	8003a2c <lsm303agr_write_reg>
 8003b04:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003b1a:	f107 0208 	add.w	r2, r7, #8
 8003b1e:	2301      	movs	r3, #1
 8003b20:	2120      	movs	r1, #32
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff ff6a 	bl	80039fc <lsm303agr_read_reg>
 8003b28:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003b2a:	7a3b      	ldrb	r3, [r7, #8]
 8003b2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	d83e      	bhi.n	8003bb4 <lsm303agr_xl_data_rate_get+0xa4>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <lsm303agr_xl_data_rate_get+0x2c>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b65 	.word	0x08003b65
 8003b40:	08003b6d 	.word	0x08003b6d
 8003b44:	08003b75 	.word	0x08003b75
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b8d 	.word	0x08003b8d
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003b9d 	.word	0x08003b9d
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003bad 	.word	0x08003bad
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
      break;
 8003b6a:	e027      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
      break;
 8003b72:	e023      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2202      	movs	r2, #2
 8003b78:	701a      	strb	r2, [r3, #0]
      break;
 8003b7a:	e01f      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	701a      	strb	r2, [r3, #0]
      break;
 8003b82:	e01b      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2204      	movs	r2, #4
 8003b88:	701a      	strb	r2, [r3, #0]
      break;
 8003b8a:	e017      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	701a      	strb	r2, [r3, #0]
      break;
 8003b92:	e013      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2206      	movs	r2, #6
 8003b98:	701a      	strb	r2, [r3, #0]
      break;
 8003b9a:	e00f      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	701a      	strb	r2, [r3, #0]
      break;
 8003ba2:	e00b      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	701a      	strb	r2, [r3, #0]
      break;
 8003baa:	e007      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2209      	movs	r2, #9
 8003bb0:	701a      	strb	r2, [r3, #0]
      break;
 8003bb2:	e003      	b.n	8003bbc <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
      break;
 8003bba:	bf00      	nop
  }

  return ret;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop

08003bc8 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003bd4:	f107 0208 	add.w	r2, r7, #8
 8003bd8:	2301      	movs	r3, #1
 8003bda:	2123      	movs	r1, #35	; 0x23
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff0d 	bl	80039fc <lsm303agr_read_reg>
 8003be2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10f      	bne.n	8003c0a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	7a3b      	ldrb	r3, [r7, #8]
 8003bf4:	f362 1305 	bfi	r3, r2, #4, #2
 8003bf8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003bfa:	f107 0208 	add.w	r2, r7, #8
 8003bfe:	2301      	movs	r3, #1
 8003c00:	2123      	movs	r1, #35	; 0x23
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ff12 	bl	8003a2c <lsm303agr_write_reg>
 8003c08:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c1e:	f107 0208 	add.w	r2, r7, #8
 8003c22:	2301      	movs	r3, #1
 8003c24:	2123      	movs	r1, #35	; 0x23
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fee8 	bl	80039fc <lsm303agr_read_reg>
 8003c2c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003c2e:	7a3b      	ldrb	r3, [r7, #8]
 8003c30:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d81a      	bhi.n	8003c70 <lsm303agr_xl_full_scale_get+0x5c>
 8003c3a:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <lsm303agr_xl_full_scale_get+0x2c>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c51 	.word	0x08003c51
 8003c44:	08003c59 	.word	0x08003c59
 8003c48:	08003c61 	.word	0x08003c61
 8003c4c:	08003c69 	.word	0x08003c69
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
      break;
 8003c56:	e00f      	b.n	8003c78 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
      break;
 8003c5e:	e00b      	b.n	8003c78 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2202      	movs	r2, #2
 8003c64:	701a      	strb	r2, [r3, #0]
      break;
 8003c66:	e007      	b.n	8003c78 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	701a      	strb	r2, [r3, #0]
      break;
 8003c6e:	e003      	b.n	8003c78 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	bf00      	nop
  }

  return ret;
 8003c78:	68fb      	ldr	r3, [r7, #12]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop

08003c84 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c90:	f107 0208 	add.w	r2, r7, #8
 8003c94:	2301      	movs	r3, #1
 8003c96:	2123      	movs	r1, #35	; 0x23
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff feaf 	bl	80039fc <lsm303agr_read_reg>
 8003c9e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	7a3b      	ldrb	r3, [r7, #8]
 8003cb0:	f362 13c7 	bfi	r3, r2, #7, #1
 8003cb4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003cb6:	f107 0208 	add.w	r2, r7, #8
 8003cba:	2301      	movs	r3, #1
 8003cbc:	2123      	movs	r1, #35	; 0x23
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff feb4 	bl	8003a2c <lsm303agr_write_reg>
 8003cc4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003cda:	f107 020c 	add.w	r2, r7, #12
 8003cde:	2306      	movs	r3, #6
 8003ce0:	2128      	movs	r1, #40	; 0x28
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fe8a 	bl	80039fc <lsm303agr_read_reg>
 8003ce8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003cea:	7b7b      	ldrb	r3, [r7, #13]
 8003cec:	b21a      	sxth	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	7b3b      	ldrb	r3, [r7, #12]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	b21a      	sxth	r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	3302      	adds	r3, #2
 8003d12:	b212      	sxth	r2, r2
 8003d14:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	7bbb      	ldrb	r3, [r7, #14]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	3302      	adds	r3, #2
 8003d30:	b212      	sxth	r2, r2
 8003d32:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003d34:	7c7a      	ldrb	r2, [r7, #17]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	b212      	sxth	r2, r2
 8003d3c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	3304      	adds	r3, #4
 8003d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	7c3b      	ldrb	r3, [r7, #16]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	3304      	adds	r3, #4
 8003d58:	b212      	sxth	r2, r2
 8003d5a:	801a      	strh	r2, [r3, #0]
  return ret;
 8003d5c:	697b      	ldr	r3, [r7, #20]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d72:	f107 0208 	add.w	r2, r7, #8
 8003d76:	2301      	movs	r3, #1
 8003d78:	2160      	movs	r1, #96	; 0x60
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fe3e 	bl	80039fc <lsm303agr_read_reg>
 8003d80:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	7a3b      	ldrb	r3, [r7, #8]
 8003d92:	f362 0301 	bfi	r3, r2, #0, #2
 8003d96:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003d98:	f107 0208 	add.w	r2, r7, #8
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	2160      	movs	r1, #96	; 0x60
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7ff fe43 	bl	8003a2c <lsm303agr_write_reg>
 8003da6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003da8:	68fb      	ldr	r3, [r7, #12]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	2160      	movs	r1, #96	; 0x60
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fe18 	bl	80039fc <lsm303agr_read_reg>
 8003dcc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	7a3b      	ldrb	r3, [r7, #8]
 8003dde:	f362 0383 	bfi	r3, r2, #2, #2
 8003de2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003de4:	f107 0208 	add.w	r2, r7, #8
 8003de8:	2301      	movs	r3, #1
 8003dea:	2160      	movs	r1, #96	; 0x60
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fe1d 	bl	8003a2c <lsm303agr_write_reg>
 8003df2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003df4:	68fb      	ldr	r3, [r7, #12]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e0a:	f107 0208 	add.w	r2, r7, #8
 8003e0e:	2301      	movs	r3, #1
 8003e10:	2160      	movs	r1, #96	; 0x60
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff fdf2 	bl	80039fc <lsm303agr_read_reg>
 8003e18:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003e1a:	7a3b      	ldrb	r3, [r7, #8]
 8003e1c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d81a      	bhi.n	8003e5c <lsm303agr_mag_data_rate_get+0x5c>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <lsm303agr_mag_data_rate_get+0x2c>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e45 	.word	0x08003e45
 8003e34:	08003e4d 	.word	0x08003e4d
 8003e38:	08003e55 	.word	0x08003e55
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
      break;
 8003e42:	e00f      	b.n	8003e64 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
      break;
 8003e4a:	e00b      	b.n	8003e64 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	701a      	strb	r2, [r3, #0]
      break;
 8003e52:	e007      	b.n	8003e64 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]
      break;
 8003e5a:	e003      	b.n	8003e64 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	bf00      	nop
  }

  return ret;
 8003e64:	68fb      	ldr	r3, [r7, #12]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop

08003e70 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003e7c:	f107 0208 	add.w	r2, r7, #8
 8003e80:	2301      	movs	r3, #1
 8003e82:	2162      	movs	r1, #98	; 0x62
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff fdb9 	bl	80039fc <lsm303agr_read_reg>
 8003e8a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10f      	bne.n	8003eb2 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	7a3b      	ldrb	r3, [r7, #8]
 8003e9c:	f362 1304 	bfi	r3, r2, #4, #1
 8003ea0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ea2:	f107 0208 	add.w	r2, r7, #8
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	2162      	movs	r1, #98	; 0x62
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff fdbe 	bl	8003a2c <lsm303agr_write_reg>
 8003eb0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003ec6:	f107 020c 	add.w	r2, r7, #12
 8003eca:	2306      	movs	r3, #6
 8003ecc:	2168      	movs	r1, #104	; 0x68
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fd94 	bl	80039fc <lsm303agr_read_reg>
 8003ed4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003ed6:	7b7b      	ldrb	r3, [r7, #13]
 8003ed8:	b21a      	sxth	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	7b3b      	ldrb	r3, [r7, #12]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	b21a      	sxth	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	3302      	adds	r3, #2
 8003efe:	b212      	sxth	r2, r2
 8003f00:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3302      	adds	r3, #2
 8003f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	7bbb      	ldrb	r3, [r7, #14]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	b212      	sxth	r2, r2
 8003f1e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003f20:	7c7a      	ldrb	r2, [r7, #17]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	3304      	adds	r3, #4
 8003f26:	b212      	sxth	r2, r2
 8003f28:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	7c3b      	ldrb	r3, [r7, #16]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	3304      	adds	r3, #4
 8003f44:	b212      	sxth	r2, r2
 8003f46:	801a      	strh	r2, [r3, #0]
  return ret;
 8003f48:	697b      	ldr	r3, [r7, #20]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	210f      	movs	r1, #15
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fd4a 	bl	80039fc <lsm303agr_read_reg>
 8003f68:	60f8      	str	r0, [r7, #12]
  return ret;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003f7e:	2301      	movs	r3, #1
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	214f      	movs	r1, #79	; 0x4f
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff fd39 	bl	80039fc <lsm303agr_read_reg>
 8003f8a:	60f8      	str	r0, [r7, #12]
  return ret;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003fa2:	f107 0208 	add.w	r2, r7, #8
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	2162      	movs	r1, #98	; 0x62
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fd26 	bl	80039fc <lsm303agr_read_reg>
 8003fb0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10f      	bne.n	8003fd8 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	7a3b      	ldrb	r3, [r7, #8]
 8003fc2:	f362 0341 	bfi	r3, r2, #1, #1
 8003fc6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003fc8:	f107 0208 	add.w	r2, r7, #8
 8003fcc:	2301      	movs	r3, #1
 8003fce:	2162      	movs	r1, #98	; 0x62
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fd2b 	bl	8003a2c <lsm303agr_write_reg>
 8003fd6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003fee:	f107 0208 	add.w	r2, r7, #8
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	212e      	movs	r1, #46	; 0x2e
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fd00 	bl	80039fc <lsm303agr_read_reg>
 8003ffc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	b2da      	uxtb	r2, r3
 800400c:	7a3b      	ldrb	r3, [r7, #8]
 800400e:	f362 1387 	bfi	r3, r2, #6, #2
 8004012:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004014:	f107 0208 	add.w	r2, r7, #8
 8004018:	2301      	movs	r3, #1
 800401a:	212e      	movs	r1, #46	; 0x2e
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff fd05 	bl	8003a2c <lsm303agr_write_reg>
 8004022:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004024:	68fb      	ldr	r3, [r7, #12]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800403a:	f107 0208 	add.w	r2, r7, #8
 800403e:	2301      	movs	r3, #1
 8004040:	2162      	movs	r1, #98	; 0x62
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff fcda 	bl	80039fc <lsm303agr_read_reg>
 8004048:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10f      	bne.n	8004070 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	7a3b      	ldrb	r3, [r7, #8]
 800405a:	f362 1345 	bfi	r3, r2, #5, #1
 800405e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004060:	f107 0208 	add.w	r2, r7, #8
 8004064:	2301      	movs	r3, #1
 8004066:	2162      	movs	r1, #98	; 0x62
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fcdf 	bl	8003a2c <lsm303agr_write_reg>
 800406e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004070:	68fb      	ldr	r3, [r7, #12]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e04d      	b.n	8004134 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	7b1a      	ldrb	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	699a      	ldr	r2, [r3, #24]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1b      	ldr	r2, [pc, #108]	; (8004140 <LSM6DSL_RegisterBusIO+0xc4>)
 80040d4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1a      	ldr	r2, [pc, #104]	; (8004144 <LSM6DSL_RegisterBusIO+0xc8>)
 80040da:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e020      	b.n	8004134 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4798      	blx	r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e016      	b.n	8004134 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d112      	bne.n	8004134 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10d      	bne.n	8004134 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004118:	230c      	movs	r3, #12
 800411a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800411c:	7afb      	ldrb	r3, [r7, #11]
 800411e:	461a      	mov	r2, r3
 8004120:	2112      	movs	r1, #18
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fd2d 	bl	8004b82 <LSM6DSL_Write_Reg>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
 8004132:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004134:	68fb      	ldr	r3, [r7, #12]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	08004ff1 	.word	0x08004ff1
 8004144:	08005027 	.word	0x08005027

08004148 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	331c      	adds	r3, #28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f001 fa59 	bl	800560e <lsm6dsl_auto_increment_set>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8004162:	f04f 33ff 	mov.w	r3, #4294967295
 8004166:	e054      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	331c      	adds	r3, #28
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f001 f980 	bl	8005474 <lsm6dsl_block_data_update_set>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 800417a:	f04f 33ff 	mov.w	r3, #4294967295
 800417e:	e048      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	331c      	adds	r3, #28
 8004184:	2100      	movs	r1, #0
 8004186:	4618      	mov	r0, r3
 8004188:	f001 fa67 	bl	800565a <lsm6dsl_fifo_mode_set>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d002      	beq.n	8004198 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	e03c      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	331c      	adds	r3, #28
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 ffe6 	bl	8005178 <lsm6dsl_xl_data_rate_set>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	e02c      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	331c      	adds	r3, #28
 80041bc:	2100      	movs	r1, #0
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 ff7c 	bl	80050bc <lsm6dsl_xl_full_scale_set>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e020      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	331c      	adds	r3, #28
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f8c0 	bl	8005364 <lsm6dsl_gy_data_rate_set>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	e010      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	331c      	adds	r3, #28
 80041f4:	2106      	movs	r1, #6
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 f84c 	bl	8005294 <lsm6dsl_gy_full_scale_set>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	e004      	b.n	8004212 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f888 	bl	8004338 <LSM6DSL_ACC_Disable>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295
 8004232:	e015      	b.n	8004260 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fa9a 	bl	800476e <LSM6DSL_GYRO_Disable>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	e00c      	b.n	8004260 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	331c      	adds	r3, #28
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f001 f9b7 	bl	80055ec <lsm6dsl_device_id_get>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004284:	f04f 33ff 	mov.w	r3, #4294967295
 8004288:	e000      	b.n	800428c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2201      	movs	r2, #1
 80042a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2200      	movs	r2, #0
 80042ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80042bc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2210      	movs	r2, #16
 80042c2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2200      	movs	r2, #0
 80042c8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	4a07      	ldr	r2, [pc, #28]	; (80042ec <LSM6DSL_GetCapabilities+0x58>)
 80042ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	4a06      	ldr	r2, [pc, #24]	; (80042ec <LSM6DSL_GetCapabilities+0x58>)
 80042d4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	45d02000 	.word	0x45d02000

080042f0 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e014      	b.n	8004330 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 021c 	add.w	r2, r3, #28
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 ff2f 	bl	8005178 <lsm6dsl_xl_data_rate_set>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	e004      	b.n	8004330 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e01f      	b.n	800438e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f103 021c 	add.w	r2, r3, #28
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	332b      	adds	r3, #43	; 0x2b
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f000 ff32 	bl	80051c4 <lsm6dsl_xl_data_rate_get>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	e010      	b.n	800438e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	331c      	adds	r3, #28
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f000 ff00 	bl	8005178 <lsm6dsl_xl_data_rate_set>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	e004      	b.n	800438e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	331c      	adds	r3, #28
 80043aa:	f107 020b 	add.w	r2, r7, #11
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fea9 	bl	8005108 <lsm6dsl_xl_full_scale_get>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80043bc:	f04f 33ff 	mov.w	r3, #4294967295
 80043c0:	e023      	b.n	800440a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d81b      	bhi.n	8004400 <LSM6DSL_ACC_GetSensitivity+0x68>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043e1 	.word	0x080043e1
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043f1 	.word	0x080043f1
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80043e4:	601a      	str	r2, [r3, #0]
      break;
 80043e6:	e00f      	b.n	8004408 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <LSM6DSL_ACC_GetSensitivity+0x80>)
 80043ec:	601a      	str	r2, [r3, #0]
      break;
 80043ee:	e00b      	b.n	8004408 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <LSM6DSL_ACC_GetSensitivity+0x84>)
 80043f4:	601a      	str	r2, [r3, #0]
      break;
 80043f6:	e007      	b.n	8004408 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <LSM6DSL_ACC_GetSensitivity+0x88>)
 80043fc:	601a      	str	r2, [r3, #0]
      break;
 80043fe:	e003      	b.n	8004408 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	60fb      	str	r3, [r7, #12]
      break;
 8004406:	bf00      	nop
  }

  return ret;
 8004408:	68fb      	ldr	r3, [r7, #12]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	3d79db23 	.word	0x3d79db23
 8004418:	3df9db23 	.word	0x3df9db23
 800441c:	3e79db23 	.word	0x3e79db23
 8004420:	3ef9db23 	.word	0x3ef9db23

08004424 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	331c      	adds	r3, #28
 8004436:	f107 020b 	add.w	r2, r7, #11
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fec1 	bl	80051c4 <lsm6dsl_xl_data_rate_get>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	e054      	b.n	80044f8 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	2b0b      	cmp	r3, #11
 8004452:	d84c      	bhi.n	80044ee <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800448d 	.word	0x0800448d
 8004460:	0800449f 	.word	0x0800449f
 8004464:	080044a7 	.word	0x080044a7
 8004468:	080044af 	.word	0x080044af
 800446c:	080044b7 	.word	0x080044b7
 8004470:	080044bf 	.word	0x080044bf
 8004474:	080044c7 	.word	0x080044c7
 8004478:	080044cf 	.word	0x080044cf
 800447c:	080044d7 	.word	0x080044d7
 8004480:	080044df 	.word	0x080044df
 8004484:	080044e7 	.word	0x080044e7
 8004488:	08004497 	.word	0x08004497
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
      break;
 8004494:	e02f      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	; (8004500 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800449a:	601a      	str	r2, [r3, #0]
      break;
 800449c:	e02b      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	4a18      	ldr	r2, [pc, #96]	; (8004504 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80044a2:	601a      	str	r2, [r3, #0]
      break;
 80044a4:	e027      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	4a17      	ldr	r2, [pc, #92]	; (8004508 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 80044aa:	601a      	str	r2, [r3, #0]
      break;
 80044ac:	e023      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	4a16      	ldr	r2, [pc, #88]	; (800450c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 80044b2:	601a      	str	r2, [r3, #0]
      break;
 80044b4:	e01f      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 80044ba:	601a      	str	r2, [r3, #0]
      break;
 80044bc:	e01b      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	4a14      	ldr	r2, [pc, #80]	; (8004514 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 80044c2:	601a      	str	r2, [r3, #0]
      break;
 80044c4:	e017      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 80044ca:	601a      	str	r2, [r3, #0]
      break;
 80044cc:	e013      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	4a12      	ldr	r2, [pc, #72]	; (800451c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 80044d2:	601a      	str	r2, [r3, #0]
      break;
 80044d4:	e00f      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	4a11      	ldr	r2, [pc, #68]	; (8004520 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 80044da:	601a      	str	r2, [r3, #0]
      break;
 80044dc:	e00b      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	4a10      	ldr	r2, [pc, #64]	; (8004524 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 80044e2:	601a      	str	r2, [r3, #0]
      break;
 80044e4:	e007      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 80044ea:	601a      	str	r2, [r3, #0]
      break;
 80044ec:	e003      	b.n	80044f6 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 80044ee:	f04f 33ff 	mov.w	r3, #4294967295
 80044f2:	60fb      	str	r3, [r7, #12]
      break;
 80044f4:	bf00      	nop
  }

  return ret;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	3fcccccd 	.word	0x3fcccccd
 8004504:	41480000 	.word	0x41480000
 8004508:	41d00000 	.word	0x41d00000
 800450c:	42500000 	.word	0x42500000
 8004510:	42d00000 	.word	0x42d00000
 8004514:	43500000 	.word	0x43500000
 8004518:	43d00000 	.word	0x43d00000
 800451c:	44504000 	.word	0x44504000
 8004520:	44cf8000 	.word	0x44cf8000
 8004524:	45502000 	.word	0x45502000
 8004528:	45d02000 	.word	0x45d02000

0800452c <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800453e:	2b01      	cmp	r3, #1
 8004540:	d106      	bne.n	8004550 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004542:	ed97 0a00 	vldr	s0, [r7]
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fb36 	bl	8004bb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 800454c:	4603      	mov	r3, r0
 800454e:	e005      	b.n	800455c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004550:	ed97 0a00 	vldr	s0, [r7]
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fbbb 	bl	8004cd0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 800455a:	4603      	mov	r3, r0
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	331c      	adds	r3, #28
 8004576:	f107 020b 	add.w	r2, r7, #11
 800457a:	4611      	mov	r1, r2
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fdc3 	bl	8005108 <lsm6dsl_xl_full_scale_get>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
 800458c:	e023      	b.n	80045d6 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d81b      	bhi.n	80045cc <LSM6DSL_ACC_GetFullScale+0x68>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <LSM6DSL_ACC_GetFullScale+0x38>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045b5 	.word	0x080045b5
 80045a8:	080045bd 	.word	0x080045bd
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2202      	movs	r2, #2
 80045b0:	601a      	str	r2, [r3, #0]
      break;
 80045b2:	e00f      	b.n	80045d4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2204      	movs	r2, #4
 80045b8:	601a      	str	r2, [r3, #0]
      break;
 80045ba:	e00b      	b.n	80045d4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2208      	movs	r2, #8
 80045c0:	601a      	str	r2, [r3, #0]
      break;
 80045c2:	e007      	b.n	80045d4 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2210      	movs	r2, #16
 80045c8:	601a      	str	r2, [r3, #0]
      break;
 80045ca:	e003      	b.n	80045d4 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
 80045d0:	60fb      	str	r3, [r7, #12]
      break;
 80045d2:	bf00      	nop
  }

  return ret;
 80045d4:	68fb      	ldr	r3, [r7, #12]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop

080045e0 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	dd0b      	ble.n	8004608 <LSM6DSL_ACC_SetFullScale+0x28>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	dd06      	ble.n	8004604 <LSM6DSL_ACC_SetFullScale+0x24>
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	dc01      	bgt.n	8004600 <LSM6DSL_ACC_SetFullScale+0x20>
 80045fc:	2303      	movs	r3, #3
 80045fe:	e004      	b.n	800460a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004600:	2301      	movs	r3, #1
 8004602:	e002      	b.n	800460a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004604:	2302      	movs	r3, #2
 8004606:	e000      	b.n	800460a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004608:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800460a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	331c      	adds	r3, #28
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fd51 	bl	80050bc <lsm6dsl_xl_full_scale_set>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	e000      	b.n	8004628 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	331c      	adds	r3, #28
 800463e:	f107 0208 	add.w	r2, r7, #8
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 ff86 	bl	8005556 <lsm6dsl_acceleration_raw_get>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004650:	f04f 33ff 	mov.w	r3, #4294967295
 8004654:	e00c      	b.n	8004670 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004656:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800465e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004666:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	331c      	adds	r3, #28
 800468c:	f107 0210 	add.w	r2, r7, #16
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff5f 	bl	8005556 <lsm6dsl_acceleration_raw_get>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	e03c      	b.n	800471e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fe74 	bl	8004398 <LSM6DSL_ACC_GetSensitivity>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	e030      	b.n	800471e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80046bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046c0:	ee07 3a90 	vmov	s15, r3
 80046c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046d4:	ee17 2a90 	vmov	r2, s15
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80046dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f4:	ee17 2a90 	vmov	r2, s15
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80046fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004708:	edd7 7a03 	vldr	s15, [r7, #12]
 800470c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004714:	ee17 2a90 	vmov	r2, s15
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004738:	2300      	movs	r3, #0
 800473a:	e014      	b.n	8004766 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f103 021c 	add.w	r2, r3, #28
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f000 fe0a 	bl	8005364 <lsm6dsl_gy_data_rate_set>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	e004      	b.n	8004766 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e01f      	b.n	80047c4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 021c 	add.w	r2, r3, #28
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	332c      	adds	r3, #44	; 0x2c
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 fe0d 	bl	80053b0 <lsm6dsl_gy_data_rate_get>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	e010      	b.n	80047c4 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	331c      	adds	r3, #28
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fddb 	bl	8005364 <lsm6dsl_gy_data_rate_set>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	e004      	b.n	80047c4 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	331c      	adds	r3, #28
 80047de:	f107 020b 	add.w	r2, r7, #11
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fd7b 	bl	80052e0 <lsm6dsl_gy_full_scale_get>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295
 80047f4:	e02d      	b.n	8004852 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80047f6:	7afb      	ldrb	r3, [r7, #11]
 80047f8:	2b06      	cmp	r3, #6
 80047fa:	d825      	bhi.n	8004848 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004829 	.word	0x08004829
 8004808:	08004821 	.word	0x08004821
 800480c:	08004831 	.word	0x08004831
 8004810:	08004849 	.word	0x08004849
 8004814:	08004839 	.word	0x08004839
 8004818:	08004849 	.word	0x08004849
 800481c:	08004841 	.word	0x08004841
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	4a0e      	ldr	r2, [pc, #56]	; (800485c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004824:	601a      	str	r2, [r3, #0]
      break;
 8004826:	e013      	b.n	8004850 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4a0d      	ldr	r2, [pc, #52]	; (8004860 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800482c:	601a      	str	r2, [r3, #0]
      break;
 800482e:	e00f      	b.n	8004850 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004834:	601a      	str	r2, [r3, #0]
      break;
 8004836:	e00b      	b.n	8004850 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	4a0b      	ldr	r2, [pc, #44]	; (8004868 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800483c:	601a      	str	r2, [r3, #0]
      break;
 800483e:	e007      	b.n	8004850 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004844:	601a      	str	r2, [r3, #0]
      break;
 8004846:	e003      	b.n	8004850 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004848:	f04f 33ff 	mov.w	r3, #4294967295
 800484c:	60fb      	str	r3, [r7, #12]
      break;
 800484e:	bf00      	nop
  }

  return ret;
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	408c0000 	.word	0x408c0000
 8004860:	410c0000 	.word	0x410c0000
 8004864:	418c0000 	.word	0x418c0000
 8004868:	420c0000 	.word	0x420c0000
 800486c:	428c0000 	.word	0x428c0000

08004870 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	331c      	adds	r3, #28
 8004882:	f107 020b 	add.w	r2, r7, #11
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fd91 	bl	80053b0 <lsm6dsl_gy_data_rate_get>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004894:	f04f 33ff 	mov.w	r3, #4294967295
 8004898:	e04e      	b.n	8004938 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	2b0a      	cmp	r3, #10
 800489e:	d846      	bhi.n	800492e <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80048a0:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048d5 	.word	0x080048d5
 80048ac:	080048df 	.word	0x080048df
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048ef 	.word	0x080048ef
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048ff 	.word	0x080048ff
 80048c0:	08004907 	.word	0x08004907
 80048c4:	0800490f 	.word	0x0800490f
 80048c8:	08004917 	.word	0x08004917
 80048cc:	0800491f 	.word	0x0800491f
 80048d0:	08004927 	.word	0x08004927
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
      break;
 80048dc:	e02b      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	4a17      	ldr	r2, [pc, #92]	; (8004940 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80048e2:	601a      	str	r2, [r3, #0]
      break;
 80048e4:	e027      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	4a16      	ldr	r2, [pc, #88]	; (8004944 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80048ea:	601a      	str	r2, [r3, #0]
      break;
 80048ec:	e023      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	4a15      	ldr	r2, [pc, #84]	; (8004948 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80048f2:	601a      	str	r2, [r3, #0]
      break;
 80048f4:	e01f      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	4a14      	ldr	r2, [pc, #80]	; (800494c <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80048fa:	601a      	str	r2, [r3, #0]
      break;
 80048fc:	e01b      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4a13      	ldr	r2, [pc, #76]	; (8004950 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004902:	601a      	str	r2, [r3, #0]
      break;
 8004904:	e017      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 800490a:	601a      	str	r2, [r3, #0]
      break;
 800490c:	e013      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	4a11      	ldr	r2, [pc, #68]	; (8004958 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004912:	601a      	str	r2, [r3, #0]
      break;
 8004914:	e00f      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	4a10      	ldr	r2, [pc, #64]	; (800495c <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 800491a:	601a      	str	r2, [r3, #0]
      break;
 800491c:	e00b      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	4a0f      	ldr	r2, [pc, #60]	; (8004960 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004922:	601a      	str	r2, [r3, #0]
      break;
 8004924:	e007      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 800492a:	601a      	str	r2, [r3, #0]
      break;
 800492c:	e003      	b.n	8004936 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	60fb      	str	r3, [r7, #12]
      break;
 8004934:	bf00      	nop
  }

  return ret;
 8004936:	68fb      	ldr	r3, [r7, #12]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	41480000 	.word	0x41480000
 8004944:	41d00000 	.word	0x41d00000
 8004948:	42500000 	.word	0x42500000
 800494c:	42d00000 	.word	0x42d00000
 8004950:	43500000 	.word	0x43500000
 8004954:	43d00000 	.word	0x43d00000
 8004958:	44504000 	.word	0x44504000
 800495c:	44cf8000 	.word	0x44cf8000
 8004960:	45502000 	.word	0x45502000
 8004964:	45d02000 	.word	0x45d02000

08004968 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800497a:	2b01      	cmp	r3, #1
 800497c:	d106      	bne.n	800498c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800497e:	ed97 0a00 	vldr	s0, [r7]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa26 	bl	8004dd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004988:	4603      	mov	r3, r0
 800498a:	e005      	b.n	8004998 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 800498c:	ed97 0a00 	vldr	s0, [r7]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 faab 	bl	8004eec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004996:	4603      	mov	r3, r0
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	331c      	adds	r3, #28
 80049b2:	f107 020b 	add.w	r2, r7, #11
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fc91 	bl	80052e0 <lsm6dsl_gy_full_scale_get>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e030      	b.n	8004a2c <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	2b06      	cmp	r3, #6
 80049ce:	d828      	bhi.n	8004a22 <LSM6DSL_GYRO_GetFullScale+0x82>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	080049f5 	.word	0x080049f5
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a23 	.word	0x08004a23
 80049e8:	08004a0f 	.word	0x08004a0f
 80049ec:	08004a23 	.word	0x08004a23
 80049f0:	08004a19 	.word	0x08004a19
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	227d      	movs	r2, #125	; 0x7d
 80049f8:	601a      	str	r2, [r3, #0]
      break;
 80049fa:	e016      	b.n	8004a2a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	22fa      	movs	r2, #250	; 0xfa
 8004a00:	601a      	str	r2, [r3, #0]
      break;
 8004a02:	e012      	b.n	8004a2a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a0a:	601a      	str	r2, [r3, #0]
      break;
 8004a0c:	e00d      	b.n	8004a2a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a14:	601a      	str	r2, [r3, #0]
      break;
 8004a16:	e008      	b.n	8004a2a <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a1e:	601a      	str	r2, [r3, #0]
      break;
 8004a20:	e003      	b.n	8004a2a <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004a22:	f04f 33ff 	mov.w	r3, #4294967295
 8004a26:	60fb      	str	r3, [r7, #12]
      break;
 8004a28:	bf00      	nop
  }

  return ret;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b7d      	cmp	r3, #125	; 0x7d
 8004a42:	dd12      	ble.n	8004a6a <LSM6DSL_GYRO_SetFullScale+0x36>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2bfa      	cmp	r3, #250	; 0xfa
 8004a48:	dd0d      	ble.n	8004a66 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a50:	dd07      	ble.n	8004a62 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a58:	dc01      	bgt.n	8004a5e <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	e006      	b.n	8004a6c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004a5e:	2306      	movs	r3, #6
 8004a60:	e004      	b.n	8004a6c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e002      	b.n	8004a6c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <LSM6DSL_GYRO_SetFullScale+0x38>
 8004a6a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004a6c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	331c      	adds	r3, #28
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fc0c 	bl	8005294 <lsm6dsl_gy_full_scale_set>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	e000      	b.n	8004a8a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	331c      	adds	r3, #28
 8004aa0:	f107 0208 	add.w	r2, r7, #8
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fd0a 	bl	80054c0 <lsm6dsl_angular_rate_raw_get>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab6:	e00c      	b.n	8004ad2 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ab8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004ac0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ac8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	331c      	adds	r3, #28
 8004ae8:	f107 0210 	add.w	r2, r7, #16
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fce6 	bl	80054c0 <lsm6dsl_angular_rate_raw_get>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	e03c      	b.n	8004b7a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fe60 	bl	80047cc <LSM6DSL_GYRO_GetSensitivity>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	e030      	b.n	8004b7a <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b30:	ee17 2a90 	vmov	r2, s15
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b50:	ee17 2a90 	vmov	r2, s15
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b70:	ee17 2a90 	vmov	r2, s15
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	70fb      	strb	r3, [r7, #3]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f103 001c 	add.w	r0, r3, #28
 8004b98:	1cba      	adds	r2, r7, #2
 8004b9a:	78f9      	ldrb	r1, [r7, #3]
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f000 fa75 	bl	800508c <lsm6dsl_write_reg>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bac:	e000      	b.n	8004bb0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004bc4:	edd7 7a00 	vldr	s15, [r7]
 8004bc8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d801      	bhi.n	8004bda <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e058      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bda:	edd7 7a00 	vldr	s15, [r7]
 8004bde:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bea:	d801      	bhi.n	8004bf0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e04d      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004bf0:	edd7 7a00 	vldr	s15, [r7]
 8004bf4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004cb4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c00:	d801      	bhi.n	8004c06 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004c02:	2303      	movs	r3, #3
 8004c04:	e042      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c06:	edd7 7a00 	vldr	s15, [r7]
 8004c0a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004cb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c16:	d801      	bhi.n	8004c1c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	e037      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c1c:	edd7 7a00 	vldr	s15, [r7]
 8004c20:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004cbc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2c:	d801      	bhi.n	8004c32 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004c2e:	2305      	movs	r3, #5
 8004c30:	e02c      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c32:	edd7 7a00 	vldr	s15, [r7]
 8004c36:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004cc0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c42:	d801      	bhi.n	8004c48 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004c44:	2306      	movs	r3, #6
 8004c46:	e021      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c48:	edd7 7a00 	vldr	s15, [r7]
 8004c4c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004cc4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c58:	d801      	bhi.n	8004c5e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004c5a:	2307      	movs	r3, #7
 8004c5c:	e016      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c5e:	edd7 7a00 	vldr	s15, [r7]
 8004c62:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004cc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	d801      	bhi.n	8004c74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004c70:	2308      	movs	r3, #8
 8004c72:	e00b      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c74:	edd7 7a00 	vldr	s15, [r7]
 8004c78:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ccc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004c7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c84:	d801      	bhi.n	8004c8a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004c86:	2309      	movs	r3, #9
 8004c88:	e000      	b.n	8004c8c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c8a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004c8c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	331c      	adds	r3, #28
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa6e 	bl	8005178 <lsm6dsl_xl_data_rate_set>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca6:	e000      	b.n	8004caa <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	42500000 	.word	0x42500000
 8004cb8:	42d00000 	.word	0x42d00000
 8004cbc:	43500000 	.word	0x43500000
 8004cc0:	43d00000 	.word	0x43d00000
 8004cc4:	44504000 	.word	0x44504000
 8004cc8:	44cf8000 	.word	0x44cf8000
 8004ccc:	45502000 	.word	0x45502000

08004cd0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004cdc:	edd7 7a00 	vldr	s15, [r7]
 8004ce0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cec:	d801      	bhi.n	8004cf2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e058      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004cf2:	edd7 7a00 	vldr	s15, [r7]
 8004cf6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d02:	d801      	bhi.n	8004d08 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e04d      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d08:	edd7 7a00 	vldr	s15, [r7]
 8004d0c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004db8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d18:	d801      	bhi.n	8004d1e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e042      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d1e:	edd7 7a00 	vldr	s15, [r7]
 8004d22:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004dbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2e:	d801      	bhi.n	8004d34 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004d30:	2304      	movs	r3, #4
 8004d32:	e037      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d34:	edd7 7a00 	vldr	s15, [r7]
 8004d38:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004dc0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	d801      	bhi.n	8004d4a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004d46:	2305      	movs	r3, #5
 8004d48:	e02c      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d4a:	edd7 7a00 	vldr	s15, [r7]
 8004d4e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004dc4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	d801      	bhi.n	8004d60 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	e021      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d60:	edd7 7a00 	vldr	s15, [r7]
 8004d64:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004dc8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	d801      	bhi.n	8004d76 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004d72:	2307      	movs	r3, #7
 8004d74:	e016      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d76:	edd7 7a00 	vldr	s15, [r7]
 8004d7a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004dcc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d86:	d801      	bhi.n	8004d8c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004d88:	2308      	movs	r3, #8
 8004d8a:	e00b      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d8c:	edd7 7a00 	vldr	s15, [r7]
 8004d90:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004dd0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9c:	d801      	bhi.n	8004da2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004d9e:	2309      	movs	r3, #9
 8004da0:	e000      	b.n	8004da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004da2:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	42500000 	.word	0x42500000
 8004dbc:	42d00000 	.word	0x42d00000
 8004dc0:	43500000 	.word	0x43500000
 8004dc4:	43d00000 	.word	0x43d00000
 8004dc8:	44504000 	.word	0x44504000
 8004dcc:	44cf8000 	.word	0x44cf8000
 8004dd0:	45502000 	.word	0x45502000

08004dd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004de0:	edd7 7a00 	vldr	s15, [r7]
 8004de4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df0:	d801      	bhi.n	8004df6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e058      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004df6:	edd7 7a00 	vldr	s15, [r7]
 8004dfa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e06:	d801      	bhi.n	8004e0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e04d      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e0c:	edd7 7a00 	vldr	s15, [r7]
 8004e10:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004ed0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1c:	d801      	bhi.n	8004e22 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e042      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e22:	edd7 7a00 	vldr	s15, [r7]
 8004e26:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004ed4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e32:	d801      	bhi.n	8004e38 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004e34:	2304      	movs	r3, #4
 8004e36:	e037      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e38:	edd7 7a00 	vldr	s15, [r7]
 8004e3c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ed8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e48:	d801      	bhi.n	8004e4e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004e4a:	2305      	movs	r3, #5
 8004e4c:	e02c      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e4e:	edd7 7a00 	vldr	s15, [r7]
 8004e52:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004edc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5e:	d801      	bhi.n	8004e64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004e60:	2306      	movs	r3, #6
 8004e62:	e021      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e64:	edd7 7a00 	vldr	s15, [r7]
 8004e68:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004ee0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e74:	d801      	bhi.n	8004e7a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004e76:	2307      	movs	r3, #7
 8004e78:	e016      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e7a:	edd7 7a00 	vldr	s15, [r7]
 8004e7e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004ee4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	d801      	bhi.n	8004e90 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	e00b      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e90:	edd7 7a00 	vldr	s15, [r7]
 8004e94:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ee8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea0:	d801      	bhi.n	8004ea6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004ea2:	2309      	movs	r3, #9
 8004ea4:	e000      	b.n	8004ea8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ea6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004ea8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	331c      	adds	r3, #28
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fa56 	bl	8005364 <lsm6dsl_gy_data_rate_set>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec2:	e000      	b.n	8004ec6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	42500000 	.word	0x42500000
 8004ed4:	42d00000 	.word	0x42d00000
 8004ed8:	43500000 	.word	0x43500000
 8004edc:	43d00000 	.word	0x43d00000
 8004ee0:	44504000 	.word	0x44504000
 8004ee4:	44cf8000 	.word	0x44cf8000
 8004ee8:	45502000 	.word	0x45502000

08004eec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004ef8:	edd7 7a00 	vldr	s15, [r7]
 8004efc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	d801      	bhi.n	8004f0e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e058      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f0e:	edd7 7a00 	vldr	s15, [r7]
 8004f12:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1e:	d801      	bhi.n	8004f24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e04d      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f24:	edd7 7a00 	vldr	s15, [r7]
 8004f28:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004fd4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f34:	d801      	bhi.n	8004f3a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004f36:	2303      	movs	r3, #3
 8004f38:	e042      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f3a:	edd7 7a00 	vldr	s15, [r7]
 8004f3e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004fd8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	d801      	bhi.n	8004f50 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	e037      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f50:	edd7 7a00 	vldr	s15, [r7]
 8004f54:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004fdc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	d801      	bhi.n	8004f66 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004f62:	2305      	movs	r3, #5
 8004f64:	e02c      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f66:	edd7 7a00 	vldr	s15, [r7]
 8004f6a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004fe0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f76:	d801      	bhi.n	8004f7c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004f78:	2306      	movs	r3, #6
 8004f7a:	e021      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f7c:	edd7 7a00 	vldr	s15, [r7]
 8004f80:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004fe4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	d801      	bhi.n	8004f92 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004f8e:	2307      	movs	r3, #7
 8004f90:	e016      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f92:	edd7 7a00 	vldr	s15, [r7]
 8004f96:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004fe8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa2:	d801      	bhi.n	8004fa8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	e00b      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004fa8:	edd7 7a00 	vldr	s15, [r7]
 8004fac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004fec <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb8:	d801      	bhi.n	8004fbe <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004fba:	2309      	movs	r3, #9
 8004fbc:	e000      	b.n	8004fc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004fbe:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	42500000 	.word	0x42500000
 8004fd8:	42d00000 	.word	0x42d00000
 8004fdc:	43500000 	.word	0x43500000
 8004fe0:	43d00000 	.word	0x43d00000
 8004fe4:	44504000 	.word	0x44504000
 8004fe8:	44cf8000 	.word	0x44cf8000
 8004fec:	45502000 	.word	0x45502000

08004ff0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	72fb      	strb	r3, [r7, #11]
 8005000:	4613      	mov	r3, r2
 8005002:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	695c      	ldr	r4, [r3, #20]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	7b1b      	ldrb	r3, [r3, #12]
 8005010:	b298      	uxth	r0, r3
 8005012:	7afb      	ldrb	r3, [r7, #11]
 8005014:	b299      	uxth	r1, r3
 8005016:	893b      	ldrh	r3, [r7, #8]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	47a0      	blx	r4
 800501c:	4603      	mov	r3, r0
}
 800501e:	4618      	mov	r0, r3
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}

08005026 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005026:	b590      	push	{r4, r7, lr}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	461a      	mov	r2, r3
 8005032:	460b      	mov	r3, r1
 8005034:	72fb      	strb	r3, [r7, #11]
 8005036:	4613      	mov	r3, r2
 8005038:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	691c      	ldr	r4, [r3, #16]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	7b1b      	ldrb	r3, [r3, #12]
 8005046:	b298      	uxth	r0, r3
 8005048:	7afb      	ldrb	r3, [r7, #11]
 800504a:	b299      	uxth	r1, r3
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	47a0      	blx	r4
 8005052:	4603      	mov	r3, r0
}
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	bd90      	pop	{r4, r7, pc}

0800505c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800505c:	b590      	push	{r4, r7, lr}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	461a      	mov	r2, r3
 8005068:	460b      	mov	r3, r1
 800506a:	72fb      	strb	r3, [r7, #11]
 800506c:	4613      	mov	r3, r2
 800506e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685c      	ldr	r4, [r3, #4]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6898      	ldr	r0, [r3, #8]
 8005078:	893b      	ldrh	r3, [r7, #8]
 800507a:	7af9      	ldrb	r1, [r7, #11]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	47a0      	blx	r4
 8005080:	6178      	str	r0, [r7, #20]
  return ret;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}

0800508c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	461a      	mov	r2, r3
 8005098:	460b      	mov	r3, r1
 800509a:	72fb      	strb	r3, [r7, #11]
 800509c:	4613      	mov	r3, r2
 800509e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681c      	ldr	r4, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6898      	ldr	r0, [r3, #8]
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	7af9      	ldrb	r1, [r7, #11]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	47a0      	blx	r4
 80050b0:	6178      	str	r0, [r7, #20]
  return ret;
 80050b2:	697b      	ldr	r3, [r7, #20]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}

080050bc <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80050c8:	f107 0208 	add.w	r2, r7, #8
 80050cc:	2301      	movs	r3, #1
 80050ce:	2110      	movs	r1, #16
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ffc3 	bl	800505c <lsm6dsl_read_reg>
 80050d6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10f      	bne.n	80050fe <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	7a3b      	ldrb	r3, [r7, #8]
 80050e8:	f362 0383 	bfi	r3, r2, #2, #2
 80050ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80050ee:	f107 0208 	add.w	r2, r7, #8
 80050f2:	2301      	movs	r3, #1
 80050f4:	2110      	movs	r1, #16
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff ffc8 	bl	800508c <lsm6dsl_write_reg>
 80050fc:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80050fe:	68fb      	ldr	r3, [r7, #12]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005112:	f107 0208 	add.w	r2, r7, #8
 8005116:	2301      	movs	r3, #1
 8005118:	2110      	movs	r1, #16
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff ff9e 	bl	800505c <lsm6dsl_read_reg>
 8005120:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8005122:	7a3b      	ldrb	r3, [r7, #8]
 8005124:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b03      	cmp	r3, #3
 800512c:	d81a      	bhi.n	8005164 <lsm6dsl_xl_full_scale_get+0x5c>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <lsm6dsl_xl_full_scale_get+0x2c>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005145 	.word	0x08005145
 8005138:	0800514d 	.word	0x0800514d
 800513c:	08005155 	.word	0x08005155
 8005140:	0800515d 	.word	0x0800515d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
      break;
 800514a:	e00f      	b.n	800516c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	701a      	strb	r2, [r3, #0]
      break;
 8005152:	e00b      	b.n	800516c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
      break;
 800515a:	e007      	b.n	800516c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2203      	movs	r2, #3
 8005160:	701a      	strb	r2, [r3, #0]
      break;
 8005162:	e003      	b.n	800516c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2204      	movs	r2, #4
 8005168:	701a      	strb	r2, [r3, #0]
      break;
 800516a:	bf00      	nop
  }

  return ret;
 800516c:	68fb      	ldr	r3, [r7, #12]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop

08005178 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005184:	f107 0208 	add.w	r2, r7, #8
 8005188:	2301      	movs	r3, #1
 800518a:	2110      	movs	r1, #16
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff ff65 	bl	800505c <lsm6dsl_read_reg>
 8005192:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10f      	bne.n	80051ba <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	7a3b      	ldrb	r3, [r7, #8]
 80051a4:	f362 1307 	bfi	r3, r2, #4, #4
 80051a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80051aa:	f107 0208 	add.w	r2, r7, #8
 80051ae:	2301      	movs	r3, #1
 80051b0:	2110      	movs	r1, #16
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff ff6a 	bl	800508c <lsm6dsl_write_reg>
 80051b8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80051ce:	f107 0208 	add.w	r2, r7, #8
 80051d2:	2301      	movs	r3, #1
 80051d4:	2110      	movs	r1, #16
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff ff40 	bl	800505c <lsm6dsl_read_reg>
 80051dc:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 80051de:	7a3b      	ldrb	r3, [r7, #8]
 80051e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b0b      	cmp	r3, #11
 80051e8:	d84a      	bhi.n	8005280 <lsm6dsl_xl_data_rate_get+0xbc>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <lsm6dsl_xl_data_rate_get+0x2c>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005221 	.word	0x08005221
 80051f4:	08005229 	.word	0x08005229
 80051f8:	08005231 	.word	0x08005231
 80051fc:	08005239 	.word	0x08005239
 8005200:	08005241 	.word	0x08005241
 8005204:	08005249 	.word	0x08005249
 8005208:	08005251 	.word	0x08005251
 800520c:	08005259 	.word	0x08005259
 8005210:	08005261 	.word	0x08005261
 8005214:	08005269 	.word	0x08005269
 8005218:	08005271 	.word	0x08005271
 800521c:	08005279 	.word	0x08005279
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
      break;
 8005226:	e02f      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
      break;
 800522e:	e02b      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2202      	movs	r2, #2
 8005234:	701a      	strb	r2, [r3, #0]
      break;
 8005236:	e027      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2203      	movs	r2, #3
 800523c:	701a      	strb	r2, [r3, #0]
      break;
 800523e:	e023      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2204      	movs	r2, #4
 8005244:	701a      	strb	r2, [r3, #0]
      break;
 8005246:	e01f      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	2205      	movs	r2, #5
 800524c:	701a      	strb	r2, [r3, #0]
      break;
 800524e:	e01b      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2206      	movs	r2, #6
 8005254:	701a      	strb	r2, [r3, #0]
      break;
 8005256:	e017      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2207      	movs	r2, #7
 800525c:	701a      	strb	r2, [r3, #0]
      break;
 800525e:	e013      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2208      	movs	r2, #8
 8005264:	701a      	strb	r2, [r3, #0]
      break;
 8005266:	e00f      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2209      	movs	r2, #9
 800526c:	701a      	strb	r2, [r3, #0]
      break;
 800526e:	e00b      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	220a      	movs	r2, #10
 8005274:	701a      	strb	r2, [r3, #0]
      break;
 8005276:	e007      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	220b      	movs	r2, #11
 800527c:	701a      	strb	r2, [r3, #0]
      break;
 800527e:	e003      	b.n	8005288 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	220c      	movs	r2, #12
 8005284:	701a      	strb	r2, [r3, #0]
      break;
 8005286:	bf00      	nop
  }

  return ret;
 8005288:	68fb      	ldr	r3, [r7, #12]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop

08005294 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80052a0:	f107 0208 	add.w	r2, r7, #8
 80052a4:	2301      	movs	r3, #1
 80052a6:	2111      	movs	r1, #17
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fed7 	bl	800505c <lsm6dsl_read_reg>
 80052ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	7a3b      	ldrb	r3, [r7, #8]
 80052c0:	f362 0343 	bfi	r3, r2, #1, #3
 80052c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80052c6:	f107 0208 	add.w	r2, r7, #8
 80052ca:	2301      	movs	r3, #1
 80052cc:	2111      	movs	r1, #17
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff fedc 	bl	800508c <lsm6dsl_write_reg>
 80052d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80052ea:	f107 0208 	add.w	r2, r7, #8
 80052ee:	2301      	movs	r3, #1
 80052f0:	2111      	movs	r1, #17
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff feb2 	bl	800505c <lsm6dsl_read_reg>
 80052f8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 80052fa:	7a3b      	ldrb	r3, [r7, #8]
 80052fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b06      	cmp	r3, #6
 8005304:	d824      	bhi.n	8005350 <lsm6dsl_gy_full_scale_get+0x70>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	08005329 	.word	0x08005329
 8005310:	08005331 	.word	0x08005331
 8005314:	08005339 	.word	0x08005339
 8005318:	08005351 	.word	0x08005351
 800531c:	08005341 	.word	0x08005341
 8005320:	08005351 	.word	0x08005351
 8005324:	08005349 	.word	0x08005349
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
      break;
 800532e:	e013      	b.n	8005358 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
      break;
 8005336:	e00f      	b.n	8005358 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2202      	movs	r2, #2
 800533c:	701a      	strb	r2, [r3, #0]
      break;
 800533e:	e00b      	b.n	8005358 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2204      	movs	r2, #4
 8005344:	701a      	strb	r2, [r3, #0]
      break;
 8005346:	e007      	b.n	8005358 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2206      	movs	r2, #6
 800534c:	701a      	strb	r2, [r3, #0]
      break;
 800534e:	e003      	b.n	8005358 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2207      	movs	r2, #7
 8005354:	701a      	strb	r2, [r3, #0]
      break;
 8005356:	bf00      	nop
  }

  return ret;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop

08005364 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005370:	f107 0208 	add.w	r2, r7, #8
 8005374:	2301      	movs	r3, #1
 8005376:	2111      	movs	r1, #17
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fe6f 	bl	800505c <lsm6dsl_read_reg>
 800537e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	b2da      	uxtb	r2, r3
 800538e:	7a3b      	ldrb	r3, [r7, #8]
 8005390:	f362 1307 	bfi	r3, r2, #4, #4
 8005394:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005396:	f107 0208 	add.w	r2, r7, #8
 800539a:	2301      	movs	r3, #1
 800539c:	2111      	movs	r1, #17
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fe74 	bl	800508c <lsm6dsl_write_reg>
 80053a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053a6:	68fb      	ldr	r3, [r7, #12]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80053ba:	f107 0208 	add.w	r2, r7, #8
 80053be:	2301      	movs	r3, #1
 80053c0:	2111      	movs	r1, #17
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7ff fe4a 	bl	800505c <lsm6dsl_read_reg>
 80053c8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 80053ca:	7a3b      	ldrb	r3, [r7, #8]
 80053cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b0a      	cmp	r3, #10
 80053d4:	d844      	bhi.n	8005460 <lsm6dsl_gy_data_rate_get+0xb0>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <lsm6dsl_gy_data_rate_get+0x2c>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	08005409 	.word	0x08005409
 80053e0:	08005411 	.word	0x08005411
 80053e4:	08005419 	.word	0x08005419
 80053e8:	08005421 	.word	0x08005421
 80053ec:	08005429 	.word	0x08005429
 80053f0:	08005431 	.word	0x08005431
 80053f4:	08005439 	.word	0x08005439
 80053f8:	08005441 	.word	0x08005441
 80053fc:	08005449 	.word	0x08005449
 8005400:	08005451 	.word	0x08005451
 8005404:	08005459 	.word	0x08005459
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e02b      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	701a      	strb	r2, [r3, #0]
      break;
 8005416:	e027      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2202      	movs	r2, #2
 800541c:	701a      	strb	r2, [r3, #0]
      break;
 800541e:	e023      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2203      	movs	r2, #3
 8005424:	701a      	strb	r2, [r3, #0]
      break;
 8005426:	e01f      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2204      	movs	r2, #4
 800542c:	701a      	strb	r2, [r3, #0]
      break;
 800542e:	e01b      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2205      	movs	r2, #5
 8005434:	701a      	strb	r2, [r3, #0]
      break;
 8005436:	e017      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2206      	movs	r2, #6
 800543c:	701a      	strb	r2, [r3, #0]
      break;
 800543e:	e013      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2207      	movs	r2, #7
 8005444:	701a      	strb	r2, [r3, #0]
      break;
 8005446:	e00f      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	701a      	strb	r2, [r3, #0]
      break;
 800544e:	e00b      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2209      	movs	r2, #9
 8005454:	701a      	strb	r2, [r3, #0]
      break;
 8005456:	e007      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	220a      	movs	r2, #10
 800545c:	701a      	strb	r2, [r3, #0]
      break;
 800545e:	e003      	b.n	8005468 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	220b      	movs	r2, #11
 8005464:	701a      	strb	r2, [r3, #0]
      break;
 8005466:	bf00      	nop
  }

  return ret;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop

08005474 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005480:	f107 0208 	add.w	r2, r7, #8
 8005484:	2301      	movs	r3, #1
 8005486:	2112      	movs	r1, #18
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fde7 	bl	800505c <lsm6dsl_read_reg>
 800548e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	7a3b      	ldrb	r3, [r7, #8]
 80054a0:	f362 1386 	bfi	r3, r2, #6, #1
 80054a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80054a6:	f107 0208 	add.w	r2, r7, #8
 80054aa:	2301      	movs	r3, #1
 80054ac:	2112      	movs	r1, #18
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fdec 	bl	800508c <lsm6dsl_write_reg>
 80054b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054b6:	68fb      	ldr	r3, [r7, #12]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80054ca:	f107 020c 	add.w	r2, r7, #12
 80054ce:	2306      	movs	r3, #6
 80054d0:	2122      	movs	r1, #34	; 0x22
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fdc2 	bl	800505c <lsm6dsl_read_reg>
 80054d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80054da:	7b7b      	ldrb	r3, [r7, #13]
 80054dc:	b21a      	sxth	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	7b3b      	ldrb	r3, [r7, #12]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	b21a      	sxth	r2, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	3302      	adds	r3, #2
 8005502:	b212      	sxth	r2, r2
 8005504:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	3302      	adds	r3, #2
 800550a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800550e:	b29b      	uxth	r3, r3
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	b29a      	uxth	r2, r3
 8005514:	7bbb      	ldrb	r3, [r7, #14]
 8005516:	b29b      	uxth	r3, r3
 8005518:	4413      	add	r3, r2
 800551a:	b29a      	uxth	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3302      	adds	r3, #2
 8005520:	b212      	sxth	r2, r2
 8005522:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005524:	7c7a      	ldrb	r2, [r7, #17]
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	3304      	adds	r3, #4
 800552a:	b212      	sxth	r2, r2
 800552c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	3304      	adds	r3, #4
 8005532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005536:	b29b      	uxth	r3, r3
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	b29a      	uxth	r2, r3
 800553c:	7c3b      	ldrb	r3, [r7, #16]
 800553e:	b29b      	uxth	r3, r3
 8005540:	4413      	add	r3, r2
 8005542:	b29a      	uxth	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	3304      	adds	r3, #4
 8005548:	b212      	sxth	r2, r2
 800554a:	801a      	strh	r2, [r3, #0]
  return ret;
 800554c:	697b      	ldr	r3, [r7, #20]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8005560:	f107 020c 	add.w	r2, r7, #12
 8005564:	2306      	movs	r3, #6
 8005566:	2128      	movs	r1, #40	; 0x28
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fd77 	bl	800505c <lsm6dsl_read_reg>
 800556e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005570:	7b7b      	ldrb	r3, [r7, #13]
 8005572:	b21a      	sxth	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557e:	b29b      	uxth	r3, r3
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	b29a      	uxth	r2, r3
 8005584:	7b3b      	ldrb	r3, [r7, #12]
 8005586:	b29b      	uxth	r3, r3
 8005588:	4413      	add	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	b21a      	sxth	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005592:	7bfa      	ldrb	r2, [r7, #15]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	3302      	adds	r3, #2
 8005598:	b212      	sxth	r2, r2
 800559a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	3302      	adds	r3, #2
 80055a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	b29a      	uxth	r2, r3
 80055aa:	7bbb      	ldrb	r3, [r7, #14]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	4413      	add	r3, r2
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	3302      	adds	r3, #2
 80055b6:	b212      	sxth	r2, r2
 80055b8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80055ba:	7c7a      	ldrb	r2, [r7, #17]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	3304      	adds	r3, #4
 80055c0:	b212      	sxth	r2, r2
 80055c2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	3304      	adds	r3, #4
 80055c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	7c3b      	ldrb	r3, [r7, #16]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	3304      	adds	r3, #4
 80055de:	b212      	sxth	r2, r2
 80055e0:	801a      	strh	r2, [r3, #0]
  return ret;
 80055e2:	697b      	ldr	r3, [r7, #20]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80055f6:	2301      	movs	r3, #1
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	210f      	movs	r1, #15
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fd2d 	bl	800505c <lsm6dsl_read_reg>
 8005602:	60f8      	str	r0, [r7, #12]
  return ret;
 8005604:	68fb      	ldr	r3, [r7, #12]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800561a:	f107 0208 	add.w	r2, r7, #8
 800561e:	2301      	movs	r3, #1
 8005620:	2112      	movs	r1, #18
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fd1a 	bl	800505c <lsm6dsl_read_reg>
 8005628:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10f      	bne.n	8005650 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	b2da      	uxtb	r2, r3
 8005638:	7a3b      	ldrb	r3, [r7, #8]
 800563a:	f362 0382 	bfi	r3, r2, #2, #1
 800563e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005640:	f107 0208 	add.w	r2, r7, #8
 8005644:	2301      	movs	r3, #1
 8005646:	2112      	movs	r1, #18
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fd1f 	bl	800508c <lsm6dsl_write_reg>
 800564e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005650:	68fb      	ldr	r3, [r7, #12]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005666:	f107 0208 	add.w	r2, r7, #8
 800566a:	2301      	movs	r3, #1
 800566c:	210a      	movs	r1, #10
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fcf4 	bl	800505c <lsm6dsl_read_reg>
 8005674:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	b2da      	uxtb	r2, r3
 8005684:	7a3b      	ldrb	r3, [r7, #8]
 8005686:	f362 0302 	bfi	r3, r2, #0, #3
 800568a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800568c:	f107 0208 	add.w	r2, r7, #8
 8005690:	2301      	movs	r3, #1
 8005692:	210a      	movs	r1, #10
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fcf9 	bl	800508c <lsm6dsl_write_reg>
 800569a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	; 0x38
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80056b6:	2301      	movs	r3, #1
 80056b8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d06e      	beq.n	80057a2 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f200 809d 	bhi.w	8005806 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <IKS01A2_MOTION_SENSOR_Init+0x32>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d032      	beq.n	800573e <IKS01A2_MOTION_SENSOR_Init+0x96>
 80056d8:	e095      	b.n	8005806 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80056da:	6838      	ldr	r0, [r7, #0]
 80056dc:	f000 fa32 	bl	8005b44 <LSM6DSL_0_Probe>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80056e6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ea:	e0cc      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056ec:	4a68      	ldr	r2, [pc, #416]	; (8005890 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4967      	ldr	r1, [pc, #412]	; (8005894 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056fe:	f107 010c 	add.w	r1, r7, #12
 8005702:	4610      	mov	r0, r2
 8005704:	4798      	blx	r3
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800570c:	f06f 0306 	mvn.w	r3, #6
 8005710:	e0b9      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005712:	7b3b      	ldrb	r3, [r7, #12]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d103      	bne.n	8005720 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005720:	7b7b      	ldrb	r3, [r7, #13]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d103      	bne.n	800572e <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	f043 0301 	orr.w	r3, r3, #1
 800572c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d16c      	bne.n	800580e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	f043 0304 	orr.w	r3, r3, #4
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800573c:	e067      	b.n	800580e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800573e:	6838      	ldr	r0, [r7, #0]
 8005740:	f000 fabc 	bl	8005cbc <LSM303AGR_ACC_0_Probe>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e09a      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005750:	4a4f      	ldr	r2, [pc, #316]	; (8005890 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	494e      	ldr	r1, [pc, #312]	; (8005894 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005762:	f107 010c 	add.w	r1, r7, #12
 8005766:	4610      	mov	r0, r2
 8005768:	4798      	blx	r3
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005770:	f06f 0306 	mvn.w	r3, #6
 8005774:	e087      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005776:	7b3b      	ldrb	r3, [r7, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d103      	bne.n	8005784 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f043 0302 	orr.w	r3, r3, #2
 8005782:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005784:	7b7b      	ldrb	r3, [r7, #13]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d103      	bne.n	8005792 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	f043 0301 	orr.w	r3, r3, #1
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d13c      	bne.n	8005812 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	f043 0304 	orr.w	r3, r3, #4
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80057a0:	e037      	b.n	8005812 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80057a2:	6838      	ldr	r0, [r7, #0]
 80057a4:	f000 fb2e 	bl	8005e04 <LSM303AGR_MAG_0_Probe>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	e068      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80057b4:	4a36      	ldr	r2, [pc, #216]	; (8005890 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4935      	ldr	r1, [pc, #212]	; (8005894 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057c6:	f107 010c 	add.w	r1, r7, #12
 80057ca:	4610      	mov	r0, r2
 80057cc:	4798      	blx	r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80057d4:	f06f 0306 	mvn.w	r3, #6
 80057d8:	e055      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80057da:	7b3b      	ldrb	r3, [r7, #12]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d103      	bne.n	80057e8 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80057e8:	7b7b      	ldrb	r3, [r7, #13]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d103      	bne.n	80057f6 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d10c      	bne.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	f043 0304 	orr.w	r3, r3, #4
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005804:	e007      	b.n	8005816 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005806:	f06f 0301 	mvn.w	r3, #1
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800580c:	e004      	b.n	8005818 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005816:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800581e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005820:	e031      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005822:	2300      	movs	r3, #0
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005826:	e02a      	b.n	800587e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005828:	683a      	ldr	r2, [r7, #0]
 800582a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582c:	4013      	ands	r3, r2
 800582e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005830:	429a      	cmp	r2, r3
 8005832:	d11e      	bne.n	8005872 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	4013      	ands	r3, r2
 800583a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583c:	429a      	cmp	r2, r3
 800583e:	d118      	bne.n	8005872 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005840:	4a15      	ldr	r2, [pc, #84]	; (8005898 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005848:	4814      	ldr	r0, [pc, #80]	; (800589c <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	4413      	add	r3, r2
 8005852:	440b      	add	r3, r1
 8005854:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	490e      	ldr	r1, [pc, #56]	; (8005894 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800586c:	f06f 0304 	mvn.w	r3, #4
 8005870:	e009      	b.n	8005886 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	3301      	adds	r3, #1
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	2b02      	cmp	r3, #2
 8005882:	d9d1      	bls.n	8005828 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005886:	4618      	mov	r0, r3
 8005888:	3738      	adds	r7, #56	; 0x38
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20001110 	.word	0x20001110
 8005894:	200014f4 	.word	0x200014f4
 8005898:	200000d0 	.word	0x200000d0
 800589c:	200010ec 	.word	0x200010ec

080058a0 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d903      	bls.n	80058b8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80058b0:	f06f 0301 	mvn.w	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e028      	b.n	800590a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80058b8:	4a16      	ldr	r2, [pc, #88]	; (8005914 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	4013      	ands	r3, r2
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d11c      	bne.n	8005904 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80058ca:	4a13      	ldr	r2, [pc, #76]	; (8005918 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058d2:	4812      	ldr	r0, [pc, #72]	; (800591c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	440b      	add	r3, r1
 80058de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	490e      	ldr	r1, [pc, #56]	; (8005920 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058ec:	4610      	mov	r0, r2
 80058ee:	4798      	blx	r3
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058f6:	f06f 0304 	mvn.w	r3, #4
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	e005      	b.n	800590a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e002      	b.n	800590a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005904:	f06f 0301 	mvn.w	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800590a:	68fb      	ldr	r3, [r7, #12]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	2000111c 	.word	0x2000111c
 8005918:	200000d0 	.word	0x200000d0
 800591c:	200010ec 	.word	0x200010ec
 8005920:	200014f4 	.word	0x200014f4

08005924 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d903      	bls.n	800593c <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005934:	f06f 0301 	mvn.w	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e028      	b.n	800598e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800593c:	4a16      	ldr	r2, [pc, #88]	; (8005998 <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4013      	ands	r3, r2
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d11c      	bne.n	8005988 <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800594e:	4a13      	ldr	r2, [pc, #76]	; (800599c <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005956:	4812      	ldr	r0, [pc, #72]	; (80059a0 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	440b      	add	r3, r1
 8005962:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	490e      	ldr	r1, [pc, #56]	; (80059a4 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800597a:	f06f 0304 	mvn.w	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e005      	b.n	800598e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	e002      	b.n	800598e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005988:	f06f 0301 	mvn.w	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	2000111c 	.word	0x2000111c
 800599c:	200000d0 	.word	0x200000d0
 80059a0:	200010ec 	.word	0x200010ec
 80059a4:	200014f4 	.word	0x200014f4

080059a8 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d903      	bls.n	80059c2 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059ba:	f06f 0301 	mvn.w	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e029      	b.n	8005a16 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4013      	ands	r3, r2
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d11d      	bne.n	8005a10 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059dc:	4812      	ldr	r0, [pc, #72]	; (8005a28 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	440b      	add	r3, r1
 80059e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	490f      	ldr	r1, [pc, #60]	; (8005a2c <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a02:	f06f 0304 	mvn.w	r3, #4
 8005a06:	617b      	str	r3, [r7, #20]
 8005a08:	e005      	b.n	8005a16 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	e002      	b.n	8005a16 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a10:	f06f 0301 	mvn.w	r3, #1
 8005a14:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	2000111c 	.word	0x2000111c
 8005a24:	200000d0 	.word	0x200000d0
 8005a28:	200010ec 	.word	0x200010ec
 8005a2c:	200014f4 	.word	0x200014f4

08005a30 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d903      	bls.n	8005a4c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a44:	f06f 0301 	mvn.w	r3, #1
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	e02a      	b.n	8005aa2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005a4c:	4a17      	ldr	r2, [pc, #92]	; (8005aac <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d11e      	bne.n	8005a9c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005a5e:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a66:	4813      	ldr	r0, [pc, #76]	; (8005ab4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	440b      	add	r3, r1
 8005a72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	490f      	ldr	r1, [pc, #60]	; (8005ab8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a80:	ed97 0a01 	vldr	s0, [r7, #4]
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a8e:	f06f 0304 	mvn.w	r3, #4
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e005      	b.n	8005aa2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e002      	b.n	8005aa2 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a9c:	f06f 0301 	mvn.w	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005aa2:	697b      	ldr	r3, [r7, #20]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2000111c 	.word	0x2000111c
 8005ab0:	200000d0 	.word	0x200000d0
 8005ab4:	200010ec 	.word	0x200010ec
 8005ab8:	200014f4 	.word	0x200014f4

08005abc <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d903      	bls.n	8005ad6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ace:	f06f 0301 	mvn.w	r3, #1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	e029      	b.n	8005b2a <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005ad6:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d11d      	bne.n	8005b24 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005ae8:	4a13      	ldr	r2, [pc, #76]	; (8005b38 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005af0:	4812      	ldr	r0, [pc, #72]	; (8005b3c <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	440b      	add	r3, r1
 8005afc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	490f      	ldr	r1, [pc, #60]	; (8005b40 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b16:	f06f 0304 	mvn.w	r3, #4
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	e005      	b.n	8005b2a <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	e002      	b.n	8005b2a <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005b24:	f06f 0301 	mvn.w	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005b2a:	697b      	ldr	r3, [r7, #20]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	2000111c 	.word	0x2000111c
 8005b38:	200000d0 	.word	0x200000d0
 8005b3c:	200010ec 	.word	0x200010ec
 8005b40:	200014f4 	.word	0x200014f4

08005b44 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b092      	sub	sp, #72	; 0x48
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005b50:	2300      	movs	r3, #0
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005b54:	23d7      	movs	r3, #215	; 0xd7
 8005b56:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005b5a:	4b4a      	ldr	r3, [pc, #296]	; (8005c84 <LSM6DSL_0_Probe+0x140>)
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005b5e:	4b4a      	ldr	r3, [pc, #296]	; (8005c88 <LSM6DSL_0_Probe+0x144>)
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005b62:	4b4a      	ldr	r3, [pc, #296]	; (8005c8c <LSM6DSL_0_Probe+0x148>)
 8005b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005b66:	4b4a      	ldr	r3, [pc, #296]	; (8005c90 <LSM6DSL_0_Probe+0x14c>)
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005b6a:	4b4a      	ldr	r3, [pc, #296]	; (8005c94 <LSM6DSL_0_Probe+0x150>)
 8005b6c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b72:	4619      	mov	r1, r3
 8005b74:	4848      	ldr	r0, [pc, #288]	; (8005c98 <LSM6DSL_0_Probe+0x154>)
 8005b76:	f7fe fa81 	bl	800407c <LSM6DSL_RegisterBusIO>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b80:	f06f 0306 	mvn.w	r3, #6
 8005b84:	647b      	str	r3, [r7, #68]	; 0x44
 8005b86:	e077      	b.n	8005c78 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005b88:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4842      	ldr	r0, [pc, #264]	; (8005c98 <LSM6DSL_0_Probe+0x154>)
 8005b90:	f7fe fb6a 	bl	8004268 <LSM6DSL_ReadID>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005b9a:	f06f 0306 	mvn.w	r3, #6
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba0:	e06a      	b.n	8005c78 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ba6:	2b6a      	cmp	r3, #106	; 0x6a
 8005ba8:	d003      	beq.n	8005bb2 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005baa:	f06f 0306 	mvn.w	r3, #6
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb0:	e062      	b.n	8005c78 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4837      	ldr	r0, [pc, #220]	; (8005c98 <LSM6DSL_0_Probe+0x154>)
 8005bba:	f7fe fb6b 	bl	8004294 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005bbe:	7a7b      	ldrb	r3, [r7, #9]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	7a3b      	ldrb	r3, [r7, #8]
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	7abb      	ldrb	r3, [r7, #10]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	4a33      	ldr	r2, [pc, #204]	; (8005c9c <LSM6DSL_0_Probe+0x158>)
 8005bd0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005bd2:	4b33      	ldr	r3, [pc, #204]	; (8005ca0 <LSM6DSL_0_Probe+0x15c>)
 8005bd4:	4a30      	ldr	r2, [pc, #192]	; (8005c98 <LSM6DSL_0_Probe+0x154>)
 8005bd6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005bd8:	4b32      	ldr	r3, [pc, #200]	; (8005ca4 <LSM6DSL_0_Probe+0x160>)
 8005bda:	4a33      	ldr	r2, [pc, #204]	; (8005ca8 <LSM6DSL_0_Probe+0x164>)
 8005bdc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <LSM6DSL_0_Probe+0xdc>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <LSM6DSL_0_Probe+0xdc>
 8005bee:	7a7b      	ldrb	r3, [r7, #9]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d115      	bne.n	8005c20 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005bf4:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <LSM6DSL_0_Probe+0x168>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a2d      	ldr	r2, [pc, #180]	; (8005cb0 <LSM6DSL_0_Probe+0x16c>)
 8005bfa:	492e      	ldr	r1, [pc, #184]	; (8005cb4 <LSM6DSL_0_Probe+0x170>)
 8005bfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005c00:	4b28      	ldr	r3, [pc, #160]	; (8005ca4 <LSM6DSL_0_Probe+0x160>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a26      	ldr	r2, [pc, #152]	; (8005ca0 <LSM6DSL_0_Probe+0x15c>)
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4798      	blx	r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c14:	f06f 0304 	mvn.w	r3, #4
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1a:	e001      	b.n	8005c20 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11d      	bne.n	8005c62 <LSM6DSL_0_Probe+0x11e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d018      	beq.n	8005c62 <LSM6DSL_0_Probe+0x11e>
 8005c30:	7a3b      	ldrb	r3, [r7, #8]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d115      	bne.n	8005c62 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <LSM6DSL_0_Probe+0x168>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <LSM6DSL_0_Probe+0x16c>)
 8005c3c:	491e      	ldr	r1, [pc, #120]	; (8005cb8 <LSM6DSL_0_Probe+0x174>)
 8005c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <LSM6DSL_0_Probe+0x160>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a15      	ldr	r2, [pc, #84]	; (8005ca0 <LSM6DSL_0_Probe+0x15c>)
 8005c4a:	6812      	ldr	r2, [r2, #0]
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4798      	blx	r3
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c56:	f06f 0304 	mvn.w	r3, #4
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5c:	e001      	b.n	8005c62 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <LSM6DSL_0_Probe+0x134>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c72:	f06f 0304 	mvn.w	r3, #4
 8005c76:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3748      	adds	r7, #72	; 0x48
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	080022e1 	.word	0x080022e1
 8005c88:	0800235d 	.word	0x0800235d
 8005c8c:	08002411 	.word	0x08002411
 8005c90:	080023ad 	.word	0x080023ad
 8005c94:	08002475 	.word	0x08002475
 8005c98:	20001128 	.word	0x20001128
 8005c9c:	2000111c 	.word	0x2000111c
 8005ca0:	200014f4 	.word	0x200014f4
 8005ca4:	20001110 	.word	0x20001110
 8005ca8:	20000078 	.word	0x20000078
 8005cac:	200000d0 	.word	0x200000d0
 8005cb0:	200010ec 	.word	0x200010ec
 8005cb4:	200000ac 	.word	0x200000ac
 8005cb8:	20000088 	.word	0x20000088

08005cbc <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b092      	sub	sp, #72	; 0x48
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005cc8:	2300      	movs	r3, #0
 8005cca:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005ccc:	2333      	movs	r3, #51	; 0x33
 8005cce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005cd2:	4b3f      	ldr	r3, [pc, #252]	; (8005dd0 <LSM303AGR_ACC_0_Probe+0x114>)
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005cd6:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <LSM303AGR_ACC_0_Probe+0x118>)
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005cda:	4b3f      	ldr	r3, [pc, #252]	; (8005dd8 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005cde:	4b3f      	ldr	r3, [pc, #252]	; (8005ddc <LSM303AGR_ACC_0_Probe+0x120>)
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005ce2:	4b3f      	ldr	r3, [pc, #252]	; (8005de0 <LSM303AGR_ACC_0_Probe+0x124>)
 8005ce4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cea:	4619      	mov	r1, r3
 8005cec:	483d      	ldr	r0, [pc, #244]	; (8005de4 <LSM303AGR_ACC_0_Probe+0x128>)
 8005cee:	f7fc fe0f 	bl	8002910 <LSM303AGR_ACC_RegisterBusIO>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005cf8:	f06f 0306 	mvn.w	r3, #6
 8005cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cfe:	e062      	b.n	8005dc6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005d00:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005d04:	4619      	mov	r1, r3
 8005d06:	4837      	ldr	r0, [pc, #220]	; (8005de4 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d08:	f7fc fec3 	bl	8002a92 <LSM303AGR_ACC_ReadID>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d12:	f06f 0306 	mvn.w	r3, #6
 8005d16:	647b      	str	r3, [r7, #68]	; 0x44
 8005d18:	e055      	b.n	8005dc6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d1e:	2b33      	cmp	r3, #51	; 0x33
 8005d20:	d003      	beq.n	8005d2a <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d22:	f06f 0306 	mvn.w	r3, #6
 8005d26:	647b      	str	r3, [r7, #68]	; 0x44
 8005d28:	e04d      	b.n	8005dc6 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005d2a:	f107 0308 	add.w	r3, r7, #8
 8005d2e:	4619      	mov	r1, r3
 8005d30:	482c      	ldr	r0, [pc, #176]	; (8005de4 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d32:	f7fc fec5 	bl	8002ac0 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005d36:	7a7b      	ldrb	r3, [r7, #9]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	7a3b      	ldrb	r3, [r7, #8]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005d40:	7abb      	ldrb	r3, [r7, #10]
 8005d42:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005d44:	4313      	orrs	r3, r2
 8005d46:	4a28      	ldr	r2, [pc, #160]	; (8005de8 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005d48:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005d4a:	4b28      	ldr	r3, [pc, #160]	; (8005dec <LSM303AGR_ACC_0_Probe+0x130>)
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d4e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005d50:	4b27      	ldr	r3, [pc, #156]	; (8005df0 <LSM303AGR_ACC_0_Probe+0x134>)
 8005d52:	4a28      	ldr	r2, [pc, #160]	; (8005df4 <LSM303AGR_ACC_0_Probe+0x138>)
 8005d54:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11e      	bne.n	8005d9a <LSM303AGR_ACC_0_Probe+0xde>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <LSM303AGR_ACC_0_Probe+0xde>
 8005d66:	7a3b      	ldrb	r3, [r7, #8]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d116      	bne.n	8005d9a <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005d6c:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	4a22      	ldr	r2, [pc, #136]	; (8005dfc <LSM303AGR_ACC_0_Probe+0x140>)
 8005d72:	3303      	adds	r3, #3
 8005d74:	4922      	ldr	r1, [pc, #136]	; (8005e00 <LSM303AGR_ACC_0_Probe+0x144>)
 8005d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <LSM303AGR_ACC_0_Probe+0x134>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1a      	ldr	r2, [pc, #104]	; (8005dec <LSM303AGR_ACC_0_Probe+0x130>)
 8005d82:	6852      	ldr	r2, [r2, #4]
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d8e:	f06f 0304 	mvn.w	r3, #4
 8005d92:	647b      	str	r3, [r7, #68]	; 0x44
 8005d94:	e001      	b.n	8005d9a <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d107      	bne.n	8005db0 <LSM303AGR_ACC_0_Probe+0xf4>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005daa:	f06f 0304 	mvn.w	r3, #4
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d107      	bne.n	8005dc6 <LSM303AGR_ACC_0_Probe+0x10a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dc0:	f06f 0304 	mvn.w	r3, #4
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005dc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3748      	adds	r7, #72	; 0x48
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	080022e1 	.word	0x080022e1
 8005dd4:	0800235d 	.word	0x0800235d
 8005dd8:	08002411 	.word	0x08002411
 8005ddc:	080023ad 	.word	0x080023ad
 8005de0:	08002475 	.word	0x08002475
 8005de4:	20001158 	.word	0x20001158
 8005de8:	2000111c 	.word	0x2000111c
 8005dec:	200014f4 	.word	0x200014f4
 8005df0:	20001110 	.word	0x20001110
 8005df4:	20000010 	.word	0x20000010
 8005df8:	200000d0 	.word	0x200000d0
 8005dfc:	200010ec 	.word	0x200010ec
 8005e00:	20000020 	.word	0x20000020

08005e04 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b092      	sub	sp, #72	; 0x48
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005e10:	2300      	movs	r3, #0
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005e14:	233d      	movs	r3, #61	; 0x3d
 8005e16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <LSM303AGR_MAG_0_Probe+0x114>)
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <LSM303AGR_MAG_0_Probe+0x118>)
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005e22:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005e26:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <LSM303AGR_MAG_0_Probe+0x120>)
 8005e28:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <LSM303AGR_MAG_0_Probe+0x124>)
 8005e2c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e32:	4619      	mov	r1, r3
 8005e34:	483d      	ldr	r0, [pc, #244]	; (8005f2c <LSM303AGR_MAG_0_Probe+0x128>)
 8005e36:	f7fd f931 	bl	800309c <LSM303AGR_MAG_RegisterBusIO>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e40:	f06f 0306 	mvn.w	r3, #6
 8005e44:	647b      	str	r3, [r7, #68]	; 0x44
 8005e46:	e062      	b.n	8005f0e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005e48:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4837      	ldr	r0, [pc, #220]	; (8005f2c <LSM303AGR_MAG_0_Probe+0x128>)
 8005e50:	f7fd f9db 	bl	800320a <LSM303AGR_MAG_ReadID>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e5a:	f06f 0306 	mvn.w	r3, #6
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e60:	e055      	b.n	8005f0e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d003      	beq.n	8005e72 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005e6a:	f06f 0306 	mvn.w	r3, #6
 8005e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e70:	e04d      	b.n	8005f0e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4619      	mov	r1, r3
 8005e78:	482c      	ldr	r0, [pc, #176]	; (8005f2c <LSM303AGR_MAG_0_Probe+0x128>)
 8005e7a:	f7fd f9dd 	bl	8003238 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e7e:	7a7b      	ldrb	r3, [r7, #9]
 8005e80:	461a      	mov	r2, r3
 8005e82:	7a3b      	ldrb	r3, [r7, #8]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005e88:	7abb      	ldrb	r3, [r7, #10]
 8005e8a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	4a28      	ldr	r2, [pc, #160]	; (8005f30 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005e90:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005e92:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <LSM303AGR_MAG_0_Probe+0x130>)
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <LSM303AGR_MAG_0_Probe+0x128>)
 8005e96:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005e98:	4b27      	ldr	r3, [pc, #156]	; (8005f38 <LSM303AGR_MAG_0_Probe+0x134>)
 8005e9a:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <LSM303AGR_MAG_0_Probe+0x138>)
 8005e9c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11e      	bne.n	8005ee2 <LSM303AGR_MAG_0_Probe+0xde>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d019      	beq.n	8005ee2 <LSM303AGR_MAG_0_Probe+0xde>
 8005eae:	7abb      	ldrb	r3, [r7, #10]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d116      	bne.n	8005ee2 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	4a22      	ldr	r2, [pc, #136]	; (8005f44 <LSM303AGR_MAG_0_Probe+0x140>)
 8005eba:	3306      	adds	r3, #6
 8005ebc:	4922      	ldr	r1, [pc, #136]	; (8005f48 <LSM303AGR_MAG_0_Probe+0x144>)
 8005ebe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <LSM303AGR_MAG_0_Probe+0x134>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1a      	ldr	r2, [pc, #104]	; (8005f34 <LSM303AGR_MAG_0_Probe+0x130>)
 8005eca:	6892      	ldr	r2, [r2, #8]
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ed6:	f06f 0304 	mvn.w	r3, #4
 8005eda:	647b      	str	r3, [r7, #68]	; 0x44
 8005edc:	e001      	b.n	8005ee2 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <LSM303AGR_MAG_0_Probe+0xf4>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ef2:	f06f 0304 	mvn.w	r3, #4
 8005ef6:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <LSM303AGR_MAG_0_Probe+0x10a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f08:	f06f 0304 	mvn.w	r3, #4
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3748      	adds	r7, #72	; 0x48
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	080022e1 	.word	0x080022e1
 8005f1c:	0800235d 	.word	0x0800235d
 8005f20:	08002411 	.word	0x08002411
 8005f24:	080023ad 	.word	0x080023ad
 8005f28:	08002475 	.word	0x08002475
 8005f2c:	20001184 	.word	0x20001184
 8005f30:	2000111c 	.word	0x2000111c
 8005f34:	200014f4 	.word	0x200014f4
 8005f38:	20001110 	.word	0x20001110
 8005f3c:	20000044 	.word	0x20000044
 8005f40:	200000d0 	.word	0x200000d0
 8005f44:	200010ec 	.word	0x200010ec
 8005f48:	20000054 	.word	0x20000054

08005f4c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	4603      	mov	r3, r0
 8005f54:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8005f5a:	79fb      	ldrb	r3, [r7, #7]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d903      	bls.n	8005f68 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005f60:	f06f 0301 	mvn.w	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e025      	b.n	8005fb4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	79fa      	ldrb	r2, [r7, #7]
 8005f6c:	4914      	ldr	r1, [pc, #80]	; (8005fc0 <BSP_COM_Init+0x74>)
 8005f6e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f72:	4814      	ldr	r0, [pc, #80]	; (8005fc4 <BSP_COM_Init+0x78>)
 8005f74:	4613      	mov	r3, r2
 8005f76:	015b      	lsls	r3, r3, #5
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4403      	add	r3, r0
 8005f7e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8005f80:	79fa      	ldrb	r2, [r7, #7]
 8005f82:	4613      	mov	r3, r2
 8005f84:	015b      	lsls	r3, r3, #5
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <BSP_COM_Init+0x78>)
 8005f8c:	4413      	add	r3, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 f86a 	bl	8006068 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005f94:	79fa      	ldrb	r2, [r7, #7]
 8005f96:	4613      	mov	r3, r2
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <BSP_COM_Init+0x78>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f810 	bl	8005fc8 <MX_USART2_UART_Init>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005fae:	f06f 0303 	mvn.w	r3, #3
 8005fb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200000e4 	.word	0x200000e4
 8005fc4:	20001548 	.word	0x20001548

08005fc8 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <MX_USART2_UART_Init+0x64>)
 8005fd8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005fe0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	220c      	movs	r2, #12
 8005ff8:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f004 f854 	bl	800a0c0 <HAL_UART_Init>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006022:	7bfb      	ldrb	r3, [r7, #15]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40004400 	.word	0x40004400

08006030 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <__io_putchar+0x30>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	4613      	mov	r3, r2
 8006040:	015b      	lsls	r3, r3, #5
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4a07      	ldr	r2, [pc, #28]	; (8006064 <__io_putchar+0x34>)
 8006048:	1898      	adds	r0, r3, r2
 800604a:	1d39      	adds	r1, r7, #4
 800604c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006050:	2201      	movs	r2, #1
 8006052:	f004 f88d 	bl	800a170 <HAL_UART_Transmit>
  return ch;
 8006056:	687b      	ldr	r3, [r7, #4]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	200011b0 	.word	0x200011b0
 8006064:	20001548 	.word	0x20001548

08006068 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <USART2_MspInit+0xcc>)
 8006072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006074:	4a2f      	ldr	r2, [pc, #188]	; (8006134 <USART2_MspInit+0xcc>)
 8006076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607a:	6593      	str	r3, [r2, #88]	; 0x58
 800607c:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <USART2_MspInit+0xcc>)
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006088:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <USART2_MspInit+0xcc>)
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	4a29      	ldr	r2, [pc, #164]	; (8006134 <USART2_MspInit+0xcc>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006094:	4b27      	ldr	r3, [pc, #156]	; (8006134 <USART2_MspInit+0xcc>)
 8006096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80060a0:	2304      	movs	r3, #4
 80060a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a4:	2302      	movs	r3, #2
 80060a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ac:	2303      	movs	r3, #3
 80060ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 80060b0:	2307      	movs	r3, #7
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	4619      	mov	r1, r3
 80060ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060be:	f000 fcaf 	bl	8006a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 80060c2:	2308      	movs	r3, #8
 80060c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c6:	2302      	movs	r3, #2
 80060c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ce:	2303      	movs	r3, #3
 80060d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80060d2:	2307      	movs	r3, #7
 80060d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	4619      	mov	r1, r3
 80060dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060e0:	f000 fc9e 	bl	8006a20 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 80060e4:	4b14      	ldr	r3, [pc, #80]	; (8006138 <USART2_MspInit+0xd0>)
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <USART2_MspInit+0xd4>)
 80060e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <USART2_MspInit+0xd0>)
 80060ec:	2202      	movs	r2, #2
 80060ee:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060f0:	4b11      	ldr	r3, [pc, #68]	; (8006138 <USART2_MspInit+0xd0>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <USART2_MspInit+0xd0>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <USART2_MspInit+0xd0>)
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006102:	4b0d      	ldr	r3, [pc, #52]	; (8006138 <USART2_MspInit+0xd0>)
 8006104:	2200      	movs	r2, #0
 8006106:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006108:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <USART2_MspInit+0xd0>)
 800610a:	2200      	movs	r2, #0
 800610c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <USART2_MspInit+0xd0>)
 8006110:	2220      	movs	r2, #32
 8006112:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <USART2_MspInit+0xd0>)
 8006116:	2200      	movs	r2, #0
 8006118:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800611a:	4807      	ldr	r0, [pc, #28]	; (8006138 <USART2_MspInit+0xd0>)
 800611c:	f000 fa88 	bl	8006630 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a05      	ldr	r2, [pc, #20]	; (8006138 <USART2_MspInit+0xd0>)
 8006124:	671a      	str	r2, [r3, #112]	; 0x70
 8006126:	4a04      	ldr	r2, [pc, #16]	; (8006138 <USART2_MspInit+0xd0>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800612c:	bf00      	nop
 800612e:	3728      	adds	r7, #40	; 0x28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000
 8006138:	20001500 	.word	0x20001500
 800613c:	4002006c 	.word	0x4002006c

08006140 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800614a:	4b0c      	ldr	r3, [pc, #48]	; (800617c <HAL_Init+0x3c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a0b      	ldr	r2, [pc, #44]	; (800617c <HAL_Init+0x3c>)
 8006150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006154:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006156:	2003      	movs	r0, #3
 8006158:	f000 f93e 	bl	80063d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800615c:	2000      	movs	r0, #0
 800615e:	f000 f80f 	bl	8006180 <HAL_InitTick>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	71fb      	strb	r3, [r7, #7]
 800616c:	e001      	b.n	8006172 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800616e:	f7fc f843 	bl	80021f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006172:	79fb      	ldrb	r3, [r7, #7]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40022000 	.word	0x40022000

08006180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800618c:	4b17      	ldr	r3, [pc, #92]	; (80061ec <HAL_InitTick+0x6c>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d023      	beq.n	80061dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006194:	4b16      	ldr	r3, [pc, #88]	; (80061f0 <HAL_InitTick+0x70>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <HAL_InitTick+0x6c>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f949 	bl	8006442 <HAL_SYSTICK_Config>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10f      	bne.n	80061d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b0f      	cmp	r3, #15
 80061ba:	d809      	bhi.n	80061d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061bc:	2200      	movs	r2, #0
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	f000 f913 	bl	80063ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80061c8:	4a0a      	ldr	r2, [pc, #40]	; (80061f4 <HAL_InitTick+0x74>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e007      	b.n	80061e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
 80061d4:	e004      	b.n	80061e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	73fb      	strb	r3, [r7, #15]
 80061da:	e001      	b.n	80061e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200000ec 	.word	0x200000ec
 80061f0:	2000000c 	.word	0x2000000c
 80061f4:	200000e8 	.word	0x200000e8

080061f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <HAL_IncTick+0x20>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <HAL_IncTick+0x24>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4413      	add	r3, r2
 8006208:	4a04      	ldr	r2, [pc, #16]	; (800621c <HAL_IncTick+0x24>)
 800620a:	6013      	str	r3, [r2, #0]
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	200000ec 	.word	0x200000ec
 800621c:	200015cc 	.word	0x200015cc

08006220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
  return uwTick;
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_GetTick+0x14>)
 8006226:	681b      	ldr	r3, [r3, #0]
}
 8006228:	4618      	mov	r0, r3
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200015cc 	.word	0x200015cc

08006238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <__NVIC_SetPriorityGrouping+0x44>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006254:	4013      	ands	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800626a:	4a04      	ldr	r2, [pc, #16]	; (800627c <__NVIC_SetPriorityGrouping+0x44>)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	60d3      	str	r3, [r2, #12]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	e000ed00 	.word	0xe000ed00

08006280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006284:	4b04      	ldr	r3, [pc, #16]	; (8006298 <__NVIC_GetPriorityGrouping+0x18>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	f003 0307 	and.w	r3, r3, #7
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	db0b      	blt.n	80062c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	f003 021f 	and.w	r2, r3, #31
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <__NVIC_EnableIRQ+0x38>)
 80062b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	2001      	movs	r0, #1
 80062be:	fa00 f202 	lsl.w	r2, r0, r2
 80062c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	e000e100 	.word	0xe000e100

080062d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	6039      	str	r1, [r7, #0]
 80062e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	db0a      	blt.n	8006302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	490c      	ldr	r1, [pc, #48]	; (8006324 <__NVIC_SetPriority+0x4c>)
 80062f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f6:	0112      	lsls	r2, r2, #4
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	440b      	add	r3, r1
 80062fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006300:	e00a      	b.n	8006318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	4908      	ldr	r1, [pc, #32]	; (8006328 <__NVIC_SetPriority+0x50>)
 8006308:	79fb      	ldrb	r3, [r7, #7]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	3b04      	subs	r3, #4
 8006310:	0112      	lsls	r2, r2, #4
 8006312:	b2d2      	uxtb	r2, r2
 8006314:	440b      	add	r3, r1
 8006316:	761a      	strb	r2, [r3, #24]
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000e100 	.word	0xe000e100
 8006328:	e000ed00 	.word	0xe000ed00

0800632c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800632c:	b480      	push	{r7}
 800632e:	b089      	sub	sp, #36	; 0x24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f1c3 0307 	rsb	r3, r3, #7
 8006346:	2b04      	cmp	r3, #4
 8006348:	bf28      	it	cs
 800634a:	2304      	movcs	r3, #4
 800634c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	3304      	adds	r3, #4
 8006352:	2b06      	cmp	r3, #6
 8006354:	d902      	bls.n	800635c <NVIC_EncodePriority+0x30>
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3b03      	subs	r3, #3
 800635a:	e000      	b.n	800635e <NVIC_EncodePriority+0x32>
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006360:	f04f 32ff 	mov.w	r2, #4294967295
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43da      	mvns	r2, r3
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	401a      	ands	r2, r3
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006374:	f04f 31ff 	mov.w	r1, #4294967295
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	fa01 f303 	lsl.w	r3, r1, r3
 800637e:	43d9      	mvns	r1, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006384:	4313      	orrs	r3, r2
         );
}
 8006386:	4618      	mov	r0, r3
 8006388:	3724      	adds	r7, #36	; 0x24
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
	...

08006394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3b01      	subs	r3, #1
 80063a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063a4:	d301      	bcc.n	80063aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063a6:	2301      	movs	r3, #1
 80063a8:	e00f      	b.n	80063ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063aa:	4a0a      	ldr	r2, [pc, #40]	; (80063d4 <SysTick_Config+0x40>)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063b2:	210f      	movs	r1, #15
 80063b4:	f04f 30ff 	mov.w	r0, #4294967295
 80063b8:	f7ff ff8e 	bl	80062d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063bc:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <SysTick_Config+0x40>)
 80063be:	2200      	movs	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063c2:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <SysTick_Config+0x40>)
 80063c4:	2207      	movs	r2, #7
 80063c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	e000e010 	.word	0xe000e010

080063d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff ff29 	bl	8006238 <__NVIC_SetPriorityGrouping>
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b086      	sub	sp, #24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	4603      	mov	r3, r0
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80063fc:	2300      	movs	r3, #0
 80063fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006400:	f7ff ff3e 	bl	8006280 <__NVIC_GetPriorityGrouping>
 8006404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	6978      	ldr	r0, [r7, #20]
 800640c:	f7ff ff8e 	bl	800632c <NVIC_EncodePriority>
 8006410:	4602      	mov	r2, r0
 8006412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff ff5d 	bl	80062d8 <__NVIC_SetPriority>
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	4603      	mov	r3, r0
 800642e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ff31 	bl	800629c <__NVIC_EnableIRQ>
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ffa2 	bl	8006394 <SysTick_Config>
 8006450:	4603      	mov	r3, r0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e054      	b.n	8006518 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	7f5b      	ldrb	r3, [r3, #29]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d105      	bne.n	8006484 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fb fa84 	bl	800198c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	791b      	ldrb	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10c      	bne.n	80064ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a22      	ldr	r2, [pc, #136]	; (8006520 <HAL_CRC_Init+0xc4>)
 8006498:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0218 	bic.w	r2, r2, #24
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	e00c      	b.n	80064c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6899      	ldr	r1, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f834 	bl	8006524 <HAL_CRCEx_Polynomial_Set>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e028      	b.n	8006518 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	795b      	ldrb	r3, [r3, #5]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f04f 32ff 	mov.w	r2, #4294967295
 80064d6:	611a      	str	r2, [r3, #16]
 80064d8:	e004      	b.n	80064e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6912      	ldr	r2, [r2, #16]
 80064e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	04c11db7 	.word	0x04c11db7

08006524 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006534:	231f      	movs	r3, #31
 8006536:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006538:	bf00      	nop
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	613a      	str	r2, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <HAL_CRCEx_Polynomial_Set+0x34>
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0f0      	beq.n	800653a <HAL_CRCEx_Polynomial_Set+0x16>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b18      	cmp	r3, #24
 800655c:	d846      	bhi.n	80065ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	080065f3 	.word	0x080065f3
 8006568:	080065ed 	.word	0x080065ed
 800656c:	080065ed 	.word	0x080065ed
 8006570:	080065ed 	.word	0x080065ed
 8006574:	080065ed 	.word	0x080065ed
 8006578:	080065ed 	.word	0x080065ed
 800657c:	080065ed 	.word	0x080065ed
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080065e1 	.word	0x080065e1
 8006588:	080065ed 	.word	0x080065ed
 800658c:	080065ed 	.word	0x080065ed
 8006590:	080065ed 	.word	0x080065ed
 8006594:	080065ed 	.word	0x080065ed
 8006598:	080065ed 	.word	0x080065ed
 800659c:	080065ed 	.word	0x080065ed
 80065a0:	080065ed 	.word	0x080065ed
 80065a4:	080065d5 	.word	0x080065d5
 80065a8:	080065ed 	.word	0x080065ed
 80065ac:	080065ed 	.word	0x080065ed
 80065b0:	080065ed 	.word	0x080065ed
 80065b4:	080065ed 	.word	0x080065ed
 80065b8:	080065ed 	.word	0x080065ed
 80065bc:	080065ed 	.word	0x080065ed
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	080065c9 	.word	0x080065c9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d913      	bls.n	80065f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065d2:	e010      	b.n	80065f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	d90f      	bls.n	80065fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065de:	e00c      	b.n	80065fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2b0f      	cmp	r3, #15
 80065e4:	d90b      	bls.n	80065fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80065ea:	e008      	b.n	80065fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]
      break;
 80065f0:	e006      	b.n	8006600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065f2:	bf00      	nop
 80065f4:	e004      	b.n	8006600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065f6:	bf00      	nop
 80065f8:	e002      	b.n	8006600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065fa:	bf00      	nop
 80065fc:	e000      	b.n	8006600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80065fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10d      	bne.n	8006622 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 0118 	bic.w	r1, r3, #24
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	430a      	orrs	r2, r1
 8006620:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e098      	b.n	8006774 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	4b4d      	ldr	r3, [pc, #308]	; (8006780 <HAL_DMA_Init+0x150>)
 800664a:	429a      	cmp	r2, r3
 800664c:	d80f      	bhi.n	800666e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <HAL_DMA_Init+0x154>)
 8006656:	4413      	add	r3, r2
 8006658:	4a4b      	ldr	r2, [pc, #300]	; (8006788 <HAL_DMA_Init+0x158>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	091b      	lsrs	r3, r3, #4
 8006660:	009a      	lsls	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a48      	ldr	r2, [pc, #288]	; (800678c <HAL_DMA_Init+0x15c>)
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
 800666c:	e00e      	b.n	800668c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	4b46      	ldr	r3, [pc, #280]	; (8006790 <HAL_DMA_Init+0x160>)
 8006676:	4413      	add	r3, r2
 8006678:	4a43      	ldr	r2, [pc, #268]	; (8006788 <HAL_DMA_Init+0x158>)
 800667a:	fba2 2303 	umull	r2, r3, r2, r3
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	009a      	lsls	r2, r3, #2
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a42      	ldr	r2, [pc, #264]	; (8006794 <HAL_DMA_Init+0x164>)
 800668a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80066b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e6:	d039      	beq.n	800675c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	4a27      	ldr	r2, [pc, #156]	; (800678c <HAL_DMA_Init+0x15c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d11a      	bne.n	8006728 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <HAL_DMA_Init+0x168>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	f003 031c 	and.w	r3, r3, #28
 80066fe:	210f      	movs	r1, #15
 8006700:	fa01 f303 	lsl.w	r3, r1, r3
 8006704:	43db      	mvns	r3, r3
 8006706:	4924      	ldr	r1, [pc, #144]	; (8006798 <HAL_DMA_Init+0x168>)
 8006708:	4013      	ands	r3, r2
 800670a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800670c:	4b22      	ldr	r3, [pc, #136]	; (8006798 <HAL_DMA_Init+0x168>)
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6859      	ldr	r1, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006718:	f003 031c 	and.w	r3, r3, #28
 800671c:	fa01 f303 	lsl.w	r3, r1, r3
 8006720:	491d      	ldr	r1, [pc, #116]	; (8006798 <HAL_DMA_Init+0x168>)
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]
 8006726:	e019      	b.n	800675c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006728:	4b1c      	ldr	r3, [pc, #112]	; (800679c <HAL_DMA_Init+0x16c>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006730:	f003 031c 	and.w	r3, r3, #28
 8006734:	210f      	movs	r1, #15
 8006736:	fa01 f303 	lsl.w	r3, r1, r3
 800673a:	43db      	mvns	r3, r3
 800673c:	4917      	ldr	r1, [pc, #92]	; (800679c <HAL_DMA_Init+0x16c>)
 800673e:	4013      	ands	r3, r2
 8006740:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006742:	4b16      	ldr	r3, [pc, #88]	; (800679c <HAL_DMA_Init+0x16c>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6859      	ldr	r1, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	f003 031c 	and.w	r3, r3, #28
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	4911      	ldr	r1, [pc, #68]	; (800679c <HAL_DMA_Init+0x16c>)
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	40020407 	.word	0x40020407
 8006784:	bffdfff8 	.word	0xbffdfff8
 8006788:	cccccccd 	.word	0xcccccccd
 800678c:	40020000 	.word	0x40020000
 8006790:	bffdfbf8 	.word	0xbffdfbf8
 8006794:	40020400 	.word	0x40020400
 8006798:	400200a8 	.word	0x400200a8
 800679c:	400204a8 	.word	0x400204a8

080067a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_DMA_Start_IT+0x20>
 80067bc:	2302      	movs	r3, #2
 80067be:	e04b      	b.n	8006858 <HAL_DMA_Start_IT+0xb8>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d13a      	bne.n	800684a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f8e0 	bl	80069be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 020e 	orr.w	r2, r2, #14
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e00f      	b.n	8006838 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0204 	bic.w	r2, r2, #4
 8006826:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 020a 	orr.w	r2, r2, #10
 8006836:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f042 0201 	orr.w	r2, r2, #1
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e005      	b.n	8006856 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006852:	2302      	movs	r3, #2
 8006854:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006856:	7dfb      	ldrb	r3, [r7, #23]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687c:	f003 031c 	and.w	r3, r3, #28
 8006880:	2204      	movs	r2, #4
 8006882:	409a      	lsls	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4013      	ands	r3, r2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d026      	beq.n	80068da <HAL_DMA_IRQHandler+0x7a>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d021      	beq.n	80068da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d107      	bne.n	80068b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b8:	f003 021c 	and.w	r2, r3, #28
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	2104      	movs	r1, #4
 80068c2:	fa01 f202 	lsl.w	r2, r1, r2
 80068c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d071      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80068d8:	e06c      	b.n	80069b4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068de:	f003 031c 	and.w	r3, r3, #28
 80068e2:	2202      	movs	r2, #2
 80068e4:	409a      	lsls	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4013      	ands	r3, r2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d02e      	beq.n	800694c <HAL_DMA_IRQHandler+0xec>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d029      	beq.n	800694c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10b      	bne.n	800691e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 020a 	bic.w	r2, r2, #10
 8006914:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	f003 021c 	and.w	r2, r3, #28
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2102      	movs	r1, #2
 800692c:	fa01 f202 	lsl.w	r2, r1, r2
 8006930:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d038      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800694a:	e033      	b.n	80069b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006950:	f003 031c 	and.w	r3, r3, #28
 8006954:	2208      	movs	r2, #8
 8006956:	409a      	lsls	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d02a      	beq.n	80069b6 <HAL_DMA_IRQHandler+0x156>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d025      	beq.n	80069b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 020e 	bic.w	r2, r2, #14
 8006978:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	f003 021c 	and.w	r2, r3, #28
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	2101      	movs	r1, #1
 8006988:	fa01 f202 	lsl.w	r2, r1, r2
 800698c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop
}
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	f003 021c 	and.w	r2, r3, #28
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f202 	lsl.w	r2, r1, r2
 80069de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d108      	bne.n	8006a02 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a00:	e007      	b.n	8006a12 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	60da      	str	r2, [r3, #12]
}
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a2e:	e17f      	b.n	8006d30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	2101      	movs	r1, #1
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8171 	beq.w	8006d2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f003 0303 	and.w	r3, r3, #3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d005      	beq.n	8006a60 <HAL_GPIO_Init+0x40>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d130      	bne.n	8006ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	43db      	mvns	r3, r3
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4013      	ands	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a96:	2201      	movs	r2, #1
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	091b      	lsrs	r3, r3, #4
 8006aac:	f003 0201 	and.w	r2, r3, #1
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d118      	bne.n	8006b00 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	08db      	lsrs	r3, r3, #3
 8006aea:	f003 0201 	and.w	r2, r3, #1
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f003 0303 	and.w	r3, r3, #3
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d017      	beq.n	8006b3c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	2203      	movs	r2, #3
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	4013      	ands	r3, r2
 8006b22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	005b      	lsls	r3, r3, #1
 8006b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d123      	bne.n	8006b90 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	08da      	lsrs	r2, r3, #3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	3208      	adds	r2, #8
 8006b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b54:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	220f      	movs	r2, #15
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	43db      	mvns	r3, r3
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	08da      	lsrs	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3208      	adds	r2, #8
 8006b8a:	6939      	ldr	r1, [r7, #16]
 8006b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	43db      	mvns	r3, r3
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 0203 	and.w	r2, r3, #3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80ac 	beq.w	8006d2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bd2:	4b5f      	ldr	r3, [pc, #380]	; (8006d50 <HAL_GPIO_Init+0x330>)
 8006bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd6:	4a5e      	ldr	r2, [pc, #376]	; (8006d50 <HAL_GPIO_Init+0x330>)
 8006bd8:	f043 0301 	orr.w	r3, r3, #1
 8006bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8006bde:	4b5c      	ldr	r3, [pc, #368]	; (8006d50 <HAL_GPIO_Init+0x330>)
 8006be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006bea:	4a5a      	ldr	r2, [pc, #360]	; (8006d54 <HAL_GPIO_Init+0x334>)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	220f      	movs	r2, #15
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	43db      	mvns	r3, r3
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c14:	d025      	beq.n	8006c62 <HAL_GPIO_Init+0x242>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a4f      	ldr	r2, [pc, #316]	; (8006d58 <HAL_GPIO_Init+0x338>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01f      	beq.n	8006c5e <HAL_GPIO_Init+0x23e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a4e      	ldr	r2, [pc, #312]	; (8006d5c <HAL_GPIO_Init+0x33c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d019      	beq.n	8006c5a <HAL_GPIO_Init+0x23a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a4d      	ldr	r2, [pc, #308]	; (8006d60 <HAL_GPIO_Init+0x340>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_GPIO_Init+0x236>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a4c      	ldr	r2, [pc, #304]	; (8006d64 <HAL_GPIO_Init+0x344>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00d      	beq.n	8006c52 <HAL_GPIO_Init+0x232>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a4b      	ldr	r2, [pc, #300]	; (8006d68 <HAL_GPIO_Init+0x348>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <HAL_GPIO_Init+0x22e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a4a      	ldr	r2, [pc, #296]	; (8006d6c <HAL_GPIO_Init+0x34c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d101      	bne.n	8006c4a <HAL_GPIO_Init+0x22a>
 8006c46:	2306      	movs	r3, #6
 8006c48:	e00c      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c4a:	2307      	movs	r3, #7
 8006c4c:	e00a      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c4e:	2305      	movs	r3, #5
 8006c50:	e008      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c52:	2304      	movs	r3, #4
 8006c54:	e006      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c56:	2303      	movs	r3, #3
 8006c58:	e004      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e002      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <HAL_GPIO_Init+0x244>
 8006c62:	2300      	movs	r3, #0
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	f002 0203 	and.w	r2, r2, #3
 8006c6a:	0092      	lsls	r2, r2, #2
 8006c6c:	4093      	lsls	r3, r2
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006c74:	4937      	ldr	r1, [pc, #220]	; (8006d54 <HAL_GPIO_Init+0x334>)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	089b      	lsrs	r3, r3, #2
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c82:	4b3b      	ldr	r3, [pc, #236]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ca6:	4a32      	ldr	r2, [pc, #200]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006cac:	4b30      	ldr	r3, [pc, #192]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006cd0:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006cd6:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d003      	beq.n	8006cfa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006cfa:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006d00:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d24:	4a12      	ldr	r2, [pc, #72]	; (8006d70 <HAL_GPIO_Init+0x350>)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f47f ae78 	bne.w	8006a30 <HAL_GPIO_Init+0x10>
  }
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	371c      	adds	r7, #28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40021000 	.word	0x40021000
 8006d54:	40010000 	.word	0x40010000
 8006d58:	48000400 	.word	0x48000400
 8006d5c:	48000800 	.word	0x48000800
 8006d60:	48000c00 	.word	0x48000c00
 8006d64:	48001000 	.word	0x48001000
 8006d68:	48001400 	.word	0x48001400
 8006d6c:	48001800 	.word	0x48001800
 8006d70:	40010400 	.word	0x40010400

08006d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006d82:	e0cd      	b.n	8006f20 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006d84:	2201      	movs	r2, #1
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8c:	683a      	ldr	r2, [r7, #0]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80c0 	beq.w	8006f1a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006d9a:	4a68      	ldr	r2, [pc, #416]	; (8006f3c <HAL_GPIO_DeInit+0x1c8>)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	3302      	adds	r3, #2
 8006da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f003 0303 	and.w	r3, r3, #3
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	220f      	movs	r2, #15
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4013      	ands	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006dc2:	d025      	beq.n	8006e10 <HAL_GPIO_DeInit+0x9c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a5e      	ldr	r2, [pc, #376]	; (8006f40 <HAL_GPIO_DeInit+0x1cc>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d01f      	beq.n	8006e0c <HAL_GPIO_DeInit+0x98>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a5d      	ldr	r2, [pc, #372]	; (8006f44 <HAL_GPIO_DeInit+0x1d0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d019      	beq.n	8006e08 <HAL_GPIO_DeInit+0x94>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a5c      	ldr	r2, [pc, #368]	; (8006f48 <HAL_GPIO_DeInit+0x1d4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d013      	beq.n	8006e04 <HAL_GPIO_DeInit+0x90>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a5b      	ldr	r2, [pc, #364]	; (8006f4c <HAL_GPIO_DeInit+0x1d8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00d      	beq.n	8006e00 <HAL_GPIO_DeInit+0x8c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a5a      	ldr	r2, [pc, #360]	; (8006f50 <HAL_GPIO_DeInit+0x1dc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d007      	beq.n	8006dfc <HAL_GPIO_DeInit+0x88>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a59      	ldr	r2, [pc, #356]	; (8006f54 <HAL_GPIO_DeInit+0x1e0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d101      	bne.n	8006df8 <HAL_GPIO_DeInit+0x84>
 8006df4:	2306      	movs	r3, #6
 8006df6:	e00c      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006df8:	2307      	movs	r3, #7
 8006dfa:	e00a      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006dfc:	2305      	movs	r3, #5
 8006dfe:	e008      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006e00:	2304      	movs	r3, #4
 8006e02:	e006      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006e04:	2303      	movs	r3, #3
 8006e06:	e004      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e002      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <HAL_GPIO_DeInit+0x9e>
 8006e10:	2300      	movs	r3, #0
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	f002 0203 	and.w	r2, r2, #3
 8006e18:	0092      	lsls	r2, r2, #2
 8006e1a:	4093      	lsls	r3, r2
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d132      	bne.n	8006e88 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006e22:	4b4d      	ldr	r3, [pc, #308]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	494b      	ldr	r1, [pc, #300]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006e30:	4b49      	ldr	r3, [pc, #292]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	43db      	mvns	r3, r3
 8006e38:	4947      	ldr	r1, [pc, #284]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006e3e:	4b46      	ldr	r3, [pc, #280]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	43db      	mvns	r3, r3
 8006e46:	4944      	ldr	r1, [pc, #272]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006e4c:	4b42      	ldr	r3, [pc, #264]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	43db      	mvns	r3, r3
 8006e54:	4940      	ldr	r1, [pc, #256]	; (8006f58 <HAL_GPIO_DeInit+0x1e4>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	220f      	movs	r2, #15
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006e6a:	4a34      	ldr	r2, [pc, #208]	; (8006f3c <HAL_GPIO_DeInit+0x1c8>)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	089b      	lsrs	r3, r3, #2
 8006e70:	3302      	adds	r3, #2
 8006e72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	43da      	mvns	r2, r3
 8006e7a:	4830      	ldr	r0, [pc, #192]	; (8006f3c <HAL_GPIO_DeInit+0x1c8>)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	089b      	lsrs	r3, r3, #2
 8006e80:	400a      	ands	r2, r1
 8006e82:	3302      	adds	r3, #2
 8006e84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	2103      	movs	r1, #3
 8006e92:	fa01 f303 	lsl.w	r3, r1, r3
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	08da      	lsrs	r2, r3, #3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	3208      	adds	r2, #8
 8006ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	220f      	movs	r2, #15
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	08d2      	lsrs	r2, r2, #3
 8006ebc:	4019      	ands	r1, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3208      	adds	r2, #8
 8006ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	005b      	lsls	r3, r3, #1
 8006ece:	2103      	movs	r1, #3
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	401a      	ands	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	2103      	movs	r1, #3
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	43db      	mvns	r3, r3
 8006f00:	401a      	ands	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f12:	43db      	mvns	r3, r3
 8006f14:	401a      	ands	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f af2b 	bne.w	8006d84 <HAL_GPIO_DeInit+0x10>
  }
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	40010000 	.word	0x40010000
 8006f40:	48000400 	.word	0x48000400
 8006f44:	48000800 	.word	0x48000800
 8006f48:	48000c00 	.word	0x48000c00
 8006f4c:	48001000 	.word	0x48001000
 8006f50:	48001400 	.word	0x48001400
 8006f54:	48001800 	.word	0x48001800
 8006f58:	40010400 	.word	0x40010400

08006f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	807b      	strh	r3, [r7, #2]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f6c:	787b      	ldrb	r3, [r7, #1]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f72:	887a      	ldrh	r2, [r7, #2]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f78:	e002      	b.n	8006f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f7a:	887a      	ldrh	r2, [r7, #2]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f96:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d006      	beq.n	8006fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fa2:	4a05      	ldr	r2, [pc, #20]	; (8006fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fa ffb8 	bl	8001f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40010400 	.word	0x40010400

08006fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e081      	b.n	80070d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fa fdbe 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	; 0x24
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800700c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800701c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d107      	bne.n	8007036 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	e006      	b.n	8007044 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007042:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d104      	bne.n	8007056 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e021      	b.n	8007130 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2224      	movs	r2, #36	; 0x24
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fa fd8b 	bl	8001c20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	4608      	mov	r0, r1
 8007142:	4611      	mov	r1, r2
 8007144:	461a      	mov	r2, r3
 8007146:	4603      	mov	r3, r0
 8007148:	817b      	strh	r3, [r7, #10]
 800714a:	460b      	mov	r3, r1
 800714c:	813b      	strh	r3, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b20      	cmp	r3, #32
 800715c:	f040 80f9 	bne.w	8007352 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_I2C_Mem_Write+0x34>
 8007166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007168:	2b00      	cmp	r3, #0
 800716a:	d105      	bne.n	8007178 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007172:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e0ed      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_I2C_Mem_Write+0x4e>
 8007182:	2302      	movs	r3, #2
 8007184:	e0e6      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800718e:	f7ff f847 	bl	8006220 <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	2319      	movs	r3, #25
 800719a:	2201      	movs	r2, #1
 800719c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fadd 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0d1      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2221      	movs	r2, #33	; 0x21
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2240      	movs	r2, #64	; 0x40
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071d8:	88f8      	ldrh	r0, [r7, #6]
 80071da:	893a      	ldrh	r2, [r7, #8]
 80071dc:	8979      	ldrh	r1, [r7, #10]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	4603      	mov	r3, r0
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 f9ed 	bl	80075c8 <I2C_RequestMemoryWrite>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e0a9      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007204:	b29b      	uxth	r3, r3
 8007206:	2bff      	cmp	r3, #255	; 0xff
 8007208:	d90e      	bls.n	8007228 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	22ff      	movs	r2, #255	; 0xff
 800720e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007214:	b2da      	uxtb	r2, r3
 8007216:	8979      	ldrh	r1, [r7, #10]
 8007218:	2300      	movs	r3, #0
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fc45 	bl	8007ab0 <I2C_TransferConfig>
 8007226:	e00f      	b.n	8007248 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800722c:	b29a      	uxth	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007236:	b2da      	uxtb	r2, r3
 8007238:	8979      	ldrh	r1, [r7, #10]
 800723a:	2300      	movs	r3, #0
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fc34 	bl	8007ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fac7 	bl	80077e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e07b      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	781a      	ldrb	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d034      	beq.n	8007300 <HAL_I2C_Mem_Write+0x1c8>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d130      	bne.n	8007300 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	2200      	movs	r2, #0
 80072a6:	2180      	movs	r1, #128	; 0x80
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fa59 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e04d      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2bff      	cmp	r3, #255	; 0xff
 80072c0:	d90e      	bls.n	80072e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	8979      	ldrh	r1, [r7, #10]
 80072d0:	2300      	movs	r3, #0
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 fbe9 	bl	8007ab0 <I2C_TransferConfig>
 80072de:	e00f      	b.n	8007300 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	8979      	ldrh	r1, [r7, #10]
 80072f2:	2300      	movs	r3, #0
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fbd8 	bl	8007ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d19e      	bne.n	8007248 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 faa6 	bl	8007860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d001      	beq.n	800731e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e01a      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2220      	movs	r2, #32
 8007324:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6859      	ldr	r1, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	4b0a      	ldr	r3, [pc, #40]	; (800735c <HAL_I2C_Mem_Write+0x224>)
 8007332:	400b      	ands	r3, r1
 8007334:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e000      	b.n	8007354 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007352:	2302      	movs	r3, #2
  }
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	fe00e800 	.word	0xfe00e800

08007360 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af02      	add	r7, sp, #8
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	4608      	mov	r0, r1
 800736a:	4611      	mov	r1, r2
 800736c:	461a      	mov	r2, r3
 800736e:	4603      	mov	r3, r0
 8007370:	817b      	strh	r3, [r7, #10]
 8007372:	460b      	mov	r3, r1
 8007374:	813b      	strh	r3, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b20      	cmp	r3, #32
 8007384:	f040 80fd 	bne.w	8007582 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <HAL_I2C_Mem_Read+0x34>
 800738e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800739a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0f1      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_I2C_Mem_Read+0x4e>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e0ea      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073b6:	f7fe ff33 	bl	8006220 <HAL_GetTick>
 80073ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	2319      	movs	r3, #25
 80073c2:	2201      	movs	r2, #1
 80073c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f9c9 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0d5      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2222      	movs	r2, #34	; 0x22
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2240      	movs	r2, #64	; 0x40
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6a3a      	ldr	r2, [r7, #32]
 80073f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80073f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007400:	88f8      	ldrh	r0, [r7, #6]
 8007402:	893a      	ldrh	r2, [r7, #8]
 8007404:	8979      	ldrh	r1, [r7, #10]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4603      	mov	r3, r0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f92d 	bl	8007670 <I2C_RequestMemoryRead>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e0ad      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742c:	b29b      	uxth	r3, r3
 800742e:	2bff      	cmp	r3, #255	; 0xff
 8007430:	d90e      	bls.n	8007450 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743c:	b2da      	uxtb	r2, r3
 800743e:	8979      	ldrh	r1, [r7, #10]
 8007440:	4b52      	ldr	r3, [pc, #328]	; (800758c <HAL_I2C_Mem_Read+0x22c>)
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 fb31 	bl	8007ab0 <I2C_TransferConfig>
 800744e:	e00f      	b.n	8007470 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745e:	b2da      	uxtb	r2, r3
 8007460:	8979      	ldrh	r1, [r7, #10]
 8007462:	4b4a      	ldr	r3, [pc, #296]	; (800758c <HAL_I2C_Mem_Read+0x22c>)
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 fb20 	bl	8007ab0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	2200      	movs	r2, #0
 8007478:	2104      	movs	r1, #4
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f970 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e07c      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d034      	beq.n	8007530 <HAL_I2C_Mem_Read+0x1d0>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d130      	bne.n	8007530 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	2200      	movs	r2, #0
 80074d6:	2180      	movs	r1, #128	; 0x80
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f941 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e04d      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2bff      	cmp	r3, #255	; 0xff
 80074f0:	d90e      	bls.n	8007510 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	22ff      	movs	r2, #255	; 0xff
 80074f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	8979      	ldrh	r1, [r7, #10]
 8007500:	2300      	movs	r3, #0
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fad1 	bl	8007ab0 <I2C_TransferConfig>
 800750e:	e00f      	b.n	8007530 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751e:	b2da      	uxtb	r2, r3
 8007520:	8979      	ldrh	r1, [r7, #10]
 8007522:	2300      	movs	r3, #0
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 fac0 	bl	8007ab0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d19a      	bne.n	8007470 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f98e 	bl	8007860 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e01a      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2220      	movs	r2, #32
 8007554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <HAL_I2C_Mem_Read+0x230>)
 8007562:	400b      	ands	r3, r1
 8007564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007582:	2302      	movs	r3, #2
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	80002400 	.word	0x80002400
 8007590:	fe00e800 	.word	0xfe00e800

08007594 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a2:	b2db      	uxtb	r3, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	817b      	strh	r3, [r7, #10]
 80075da:	460b      	mov	r3, r1
 80075dc:	813b      	strh	r3, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	8979      	ldrh	r1, [r7, #10]
 80075e8:	4b20      	ldr	r3, [pc, #128]	; (800766c <I2C_RequestMemoryWrite+0xa4>)
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fa5d 	bl	8007ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	69b9      	ldr	r1, [r7, #24]
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 f8f0 	bl	80077e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e02c      	b.n	8007664 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d105      	bne.n	800761c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007610:	893b      	ldrh	r3, [r7, #8]
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
 800761a:	e015      	b.n	8007648 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800761c:	893b      	ldrh	r3, [r7, #8]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	b29b      	uxth	r3, r3
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	69b9      	ldr	r1, [r7, #24]
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f8d6 	bl	80077e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e012      	b.n	8007664 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800763e:	893b      	ldrh	r3, [r7, #8]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	9300      	str	r3, [sp, #0]
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2200      	movs	r2, #0
 8007650:	2180      	movs	r1, #128	; 0x80
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f884 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e000      	b.n	8007664 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	80002000 	.word	0x80002000

08007670 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4603      	mov	r3, r0
 8007680:	817b      	strh	r3, [r7, #10]
 8007682:	460b      	mov	r3, r1
 8007684:	813b      	strh	r3, [r7, #8]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	b2da      	uxtb	r2, r3
 800768e:	8979      	ldrh	r1, [r7, #10]
 8007690:	4b20      	ldr	r3, [pc, #128]	; (8007714 <I2C_RequestMemoryRead+0xa4>)
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fa0a 	bl	8007ab0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	69b9      	ldr	r1, [r7, #24]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f89d 	bl	80077e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e02c      	b.n	800770a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d105      	bne.n	80076c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	629a      	str	r2, [r3, #40]	; 0x28
 80076c0:	e015      	b.n	80076ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076c2:	893b      	ldrh	r3, [r7, #8]
 80076c4:	0a1b      	lsrs	r3, r3, #8
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	69b9      	ldr	r1, [r7, #24]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f883 	bl	80077e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e012      	b.n	800770a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	2200      	movs	r2, #0
 80076f6:	2140      	movs	r1, #64	; 0x40
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f831 	bl	8007760 <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	80002000 	.word	0x80002000

08007718 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d103      	bne.n	8007736 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2200      	movs	r2, #0
 8007734:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b01      	cmp	r3, #1
 8007742:	d007      	beq.n	8007754 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0201 	orr.w	r2, r2, #1
 8007752:	619a      	str	r2, [r3, #24]
  }
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007770:	e022      	b.n	80077b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d01e      	beq.n	80077b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777a:	f7fe fd51 	bl	8006220 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d302      	bcc.n	8007790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d113      	bne.n	80077b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007794:	f043 0220 	orr.w	r2, r3, #32
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e00f      	b.n	80077d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4013      	ands	r3, r2
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	bf0c      	ite	eq
 80077c8:	2301      	moveq	r3, #1
 80077ca:	2300      	movne	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d0cd      	beq.n	8007772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077ec:	e02c      	b.n	8007848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f870 	bl	80078d8 <I2C_IsErrorOccurred>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e02a      	b.n	8007858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d01e      	beq.n	8007848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780a:	f7fe fd09 	bl	8006220 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	429a      	cmp	r2, r3
 8007818:	d302      	bcc.n	8007820 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d113      	bne.n	8007848 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	f043 0220 	orr.w	r2, r3, #32
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e007      	b.n	8007858 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b02      	cmp	r3, #2
 8007854:	d1cb      	bne.n	80077ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800786c:	e028      	b.n	80078c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f830 	bl	80078d8 <I2C_IsErrorOccurred>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e026      	b.n	80078d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007882:	f7fe fccd 	bl	8006220 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	d302      	bcc.n	8007898 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d113      	bne.n	80078c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	f043 0220 	orr.w	r2, r3, #32
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e007      	b.n	80078d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b20      	cmp	r3, #32
 80078cc:	d1cf      	bne.n	800786e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d075      	beq.n	80079f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2210      	movs	r2, #16
 800790a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800790c:	e056      	b.n	80079bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d052      	beq.n	80079bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007916:	f7fe fc83 	bl	8006220 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	d302      	bcc.n	800792c <I2C_IsErrorOccurred+0x54>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d147      	bne.n	80079bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007936:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800793e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800794a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794e:	d12e      	bne.n	80079ae <I2C_IsErrorOccurred+0xd6>
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007956:	d02a      	beq.n	80079ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007958:	7cfb      	ldrb	r3, [r7, #19]
 800795a:	2b20      	cmp	r3, #32
 800795c:	d027      	beq.n	80079ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800796c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800796e:	f7fe fc57 	bl	8006220 <HAL_GetTick>
 8007972:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007974:	e01b      	b.n	80079ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007976:	f7fe fc53 	bl	8006220 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b19      	cmp	r3, #25
 8007982:	d914      	bls.n	80079ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007988:	f043 0220 	orr.w	r2, r3, #32
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d1dc      	bne.n	8007976 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f003 0320 	and.w	r3, r3, #32
 80079c6:	2b20      	cmp	r3, #32
 80079c8:	d003      	beq.n	80079d2 <I2C_IsErrorOccurred+0xfa>
 80079ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d09d      	beq.n	800790e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80079d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d103      	bne.n	80079e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2220      	movs	r2, #32
 80079e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	f043 0304 	orr.w	r3, r3, #4
 80079e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00b      	beq.n	8007a3c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	f043 0308 	orr.w	r3, r3, #8
 8007a2a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	f043 0302 	orr.w	r3, r3, #2
 8007a4c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01c      	beq.n	8007aa0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fe56 	bl	8007718 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6859      	ldr	r1, [r3, #4]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <I2C_IsErrorOccurred+0x1d4>)
 8007a78:	400b      	ands	r3, r1
 8007a7a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3728      	adds	r7, #40	; 0x28
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	fe00e800 	.word	0xfe00e800

08007ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	607b      	str	r3, [r7, #4]
 8007aba:	460b      	mov	r3, r1
 8007abc:	817b      	strh	r3, [r7, #10]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ac2:	897b      	ldrh	r3, [r7, #10]
 8007ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ac8:	7a7b      	ldrb	r3, [r7, #9]
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ad0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ade:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	0d5b      	lsrs	r3, r3, #21
 8007aea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <I2C_TransferConfig+0x60>)
 8007af0:	430b      	orrs	r3, r1
 8007af2:	43db      	mvns	r3, r3
 8007af4:	ea02 0103 	and.w	r1, r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	03ff63ff 	.word	0x03ff63ff

08007b14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d138      	bne.n	8007b9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e032      	b.n	8007b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2224      	movs	r2, #36	; 0x24
 8007b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	683a      	ldr	r2, [r7, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e000      	b.n	8007b9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b9c:	2302      	movs	r3, #2
  }
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d139      	bne.n	8007c34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e033      	b.n	8007c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2224      	movs	r2, #36	; 0x24
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007bfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c34:	2302      	movs	r3, #2
  }
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007c48:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <HAL_PWREx_GetVoltageRange+0x18>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40007000 	.word	0x40007000

08007c60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6e:	d130      	bne.n	8007cd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c70:	4b23      	ldr	r3, [pc, #140]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c7c:	d038      	beq.n	8007cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c7e:	4b20      	ldr	r3, [pc, #128]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007c86:	4a1e      	ldr	r2, [pc, #120]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	; (8007d04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2232      	movs	r2, #50	; 0x32
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
 8007c98:	4a1b      	ldr	r2, [pc, #108]	; (8007d08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	0c9b      	lsrs	r3, r3, #18
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ca4:	e002      	b.n	8007cac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007cac:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb8:	d102      	bne.n	8007cc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1f2      	bne.n	8007ca6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ccc:	d110      	bne.n	8007cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e00f      	b.n	8007cf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cde:	d007      	beq.n	8007cf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007ce0:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ce8:	4a05      	ldr	r2, [pc, #20]	; (8007d00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	40007000 	.word	0x40007000
 8007d04:	2000000c 	.word	0x2000000c
 8007d08:	431bde83 	.word	0x431bde83

08007d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e3d4      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d1e:	4ba1      	ldr	r3, [pc, #644]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 030c 	and.w	r3, r3, #12
 8007d26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d28:	4b9e      	ldr	r3, [pc, #632]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 80e4 	beq.w	8007f08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <HAL_RCC_OscConfig+0x4a>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	f040 808b 	bne.w	8007e64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	f040 8087 	bne.w	8007e64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d56:	4b93      	ldr	r3, [pc, #588]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <HAL_RCC_OscConfig+0x62>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e3ac      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	4b8c      	ldr	r3, [pc, #560]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <HAL_RCC_OscConfig+0x7c>
 8007d7e:	4b89      	ldr	r3, [pc, #548]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d86:	e005      	b.n	8007d94 <HAL_RCC_OscConfig+0x88>
 8007d88:	4b86      	ldr	r3, [pc, #536]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d8e:	091b      	lsrs	r3, r3, #4
 8007d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d223      	bcs.n	8007de0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd41 	bl	8008824 <RCC_SetFlashLatencyFromMSIRange>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e38d      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dac:	4b7d      	ldr	r3, [pc, #500]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a7c      	ldr	r2, [pc, #496]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007db2:	f043 0308 	orr.w	r3, r3, #8
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	4b7a      	ldr	r3, [pc, #488]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	4977      	ldr	r1, [pc, #476]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007dca:	4b76      	ldr	r3, [pc, #472]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	4972      	ldr	r1, [pc, #456]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	604b      	str	r3, [r1, #4]
 8007dde:	e025      	b.n	8007e2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007de0:	4b70      	ldr	r3, [pc, #448]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6f      	ldr	r2, [pc, #444]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007de6:	f043 0308 	orr.w	r3, r3, #8
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	4b6d      	ldr	r3, [pc, #436]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a1b      	ldr	r3, [r3, #32]
 8007df8:	496a      	ldr	r1, [pc, #424]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007dfe:	4b69      	ldr	r3, [pc, #420]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	4965      	ldr	r1, [pc, #404]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d109      	bne.n	8007e2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fd01 	bl	8008824 <RCC_SetFlashLatencyFromMSIRange>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e34d      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e2c:	f000 fc36 	bl	800869c <HAL_RCC_GetSysClockFreq>
 8007e30:	4602      	mov	r2, r0
 8007e32:	4b5c      	ldr	r3, [pc, #368]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	091b      	lsrs	r3, r3, #4
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	495a      	ldr	r1, [pc, #360]	; (8007fa8 <HAL_RCC_OscConfig+0x29c>)
 8007e3e:	5ccb      	ldrb	r3, [r1, r3]
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	fa22 f303 	lsr.w	r3, r2, r3
 8007e48:	4a58      	ldr	r2, [pc, #352]	; (8007fac <HAL_RCC_OscConfig+0x2a0>)
 8007e4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007e4c:	4b58      	ldr	r3, [pc, #352]	; (8007fb0 <HAL_RCC_OscConfig+0x2a4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7fe f995 	bl	8006180 <HAL_InitTick>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007e5a:	7bfb      	ldrb	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d052      	beq.n	8007f06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	e331      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d032      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e6c:	4b4d      	ldr	r3, [pc, #308]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a4c      	ldr	r2, [pc, #304]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e78:	f7fe f9d2 	bl	8006220 <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e80:	f7fe f9ce 	bl	8006220 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e31a      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007e92:	4b44      	ldr	r3, [pc, #272]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e9e:	4b41      	ldr	r3, [pc, #260]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a40      	ldr	r2, [pc, #256]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007ea4:	f043 0308 	orr.w	r3, r3, #8
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	4b3e      	ldr	r3, [pc, #248]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	493b      	ldr	r1, [pc, #236]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ebc:	4b39      	ldr	r3, [pc, #228]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	4936      	ldr	r1, [pc, #216]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	604b      	str	r3, [r1, #4]
 8007ed0:	e01a      	b.n	8007f08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ed2:	4b34      	ldr	r3, [pc, #208]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a33      	ldr	r2, [pc, #204]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007ede:	f7fe f99f 	bl	8006220 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ee6:	f7fe f99b 	bl	8006220 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e2e7      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007ef8:	4b2a      	ldr	r3, [pc, #168]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f0      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x1da>
 8007f04:	e000      	b.n	8007f08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d074      	beq.n	8007ffe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d005      	beq.n	8007f26 <HAL_RCC_OscConfig+0x21a>
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	d10e      	bne.n	8007f3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d10b      	bne.n	8007f3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f26:	4b1f      	ldr	r3, [pc, #124]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d064      	beq.n	8007ffc <HAL_RCC_OscConfig+0x2f0>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d160      	bne.n	8007ffc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e2c4      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f46:	d106      	bne.n	8007f56 <HAL_RCC_OscConfig+0x24a>
 8007f48:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a15      	ldr	r2, [pc, #84]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e01d      	b.n	8007f92 <HAL_RCC_OscConfig+0x286>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f5e:	d10c      	bne.n	8007f7a <HAL_RCC_OscConfig+0x26e>
 8007f60:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a0f      	ldr	r2, [pc, #60]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a0c      	ldr	r2, [pc, #48]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e00b      	b.n	8007f92 <HAL_RCC_OscConfig+0x286>
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a09      	ldr	r2, [pc, #36]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a06      	ldr	r2, [pc, #24]	; (8007fa4 <HAL_RCC_OscConfig+0x298>)
 8007f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d01c      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9a:	f7fe f941 	bl	8006220 <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fa0:	e011      	b.n	8007fc6 <HAL_RCC_OscConfig+0x2ba>
 8007fa2:	bf00      	nop
 8007fa4:	40021000 	.word	0x40021000
 8007fa8:	0801a340 	.word	0x0801a340
 8007fac:	2000000c 	.word	0x2000000c
 8007fb0:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb4:	f7fe f934 	bl	8006220 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	; 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e280      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007fc6:	4baf      	ldr	r3, [pc, #700]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x2a8>
 8007fd2:	e014      	b.n	8007ffe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fd4:	f7fe f924 	bl	8006220 <HAL_GetTick>
 8007fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fdc:	f7fe f920 	bl	8006220 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b64      	cmp	r3, #100	; 0x64
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e26c      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fee:	4ba5      	ldr	r3, [pc, #660]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1f0      	bne.n	8007fdc <HAL_RCC_OscConfig+0x2d0>
 8007ffa:	e000      	b.n	8007ffe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	2b00      	cmp	r3, #0
 8008008:	d060      	beq.n	80080cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b04      	cmp	r3, #4
 800800e:	d005      	beq.n	800801c <HAL_RCC_OscConfig+0x310>
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b0c      	cmp	r3, #12
 8008014:	d119      	bne.n	800804a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b02      	cmp	r3, #2
 800801a:	d116      	bne.n	800804a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800801c:	4b99      	ldr	r3, [pc, #612]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008024:	2b00      	cmp	r3, #0
 8008026:	d005      	beq.n	8008034 <HAL_RCC_OscConfig+0x328>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e249      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008034:	4b93      	ldr	r3, [pc, #588]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	061b      	lsls	r3, r3, #24
 8008042:	4990      	ldr	r1, [pc, #576]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008044:	4313      	orrs	r3, r2
 8008046:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008048:	e040      	b.n	80080cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d023      	beq.n	800809a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008052:	4b8c      	ldr	r3, [pc, #560]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a8b      	ldr	r2, [pc, #556]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800805c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805e:	f7fe f8df 	bl	8006220 <HAL_GetTick>
 8008062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008064:	e008      	b.n	8008078 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008066:	f7fe f8db 	bl	8006220 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d901      	bls.n	8008078 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e227      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008078:	4b82      	ldr	r3, [pc, #520]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0f0      	beq.n	8008066 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008084:	4b7f      	ldr	r3, [pc, #508]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	061b      	lsls	r3, r3, #24
 8008092:	497c      	ldr	r1, [pc, #496]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008094:	4313      	orrs	r3, r2
 8008096:	604b      	str	r3, [r1, #4]
 8008098:	e018      	b.n	80080cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800809a:	4b7a      	ldr	r3, [pc, #488]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a79      	ldr	r2, [pc, #484]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80080a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a6:	f7fe f8bb 	bl	8006220 <HAL_GetTick>
 80080aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080ae:	f7fe f8b7 	bl	8006220 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e203      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080c0:	4b70      	ldr	r3, [pc, #448]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1f0      	bne.n	80080ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0308 	and.w	r3, r3, #8
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d03c      	beq.n	8008152 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01c      	beq.n	800811a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080e0:	4b68      	ldr	r3, [pc, #416]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80080e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080e6:	4a67      	ldr	r2, [pc, #412]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f0:	f7fe f896 	bl	8006220 <HAL_GetTick>
 80080f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080f6:	e008      	b.n	800810a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f8:	f7fe f892 	bl	8006220 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e1de      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800810a:	4b5e      	ldr	r3, [pc, #376]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 800810c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0ef      	beq.n	80080f8 <HAL_RCC_OscConfig+0x3ec>
 8008118:	e01b      	b.n	8008152 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800811a:	4b5a      	ldr	r3, [pc, #360]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 800811c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008120:	4a58      	ldr	r2, [pc, #352]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812a:	f7fe f879 	bl	8006220 <HAL_GetTick>
 800812e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008130:	e008      	b.n	8008144 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008132:	f7fe f875 	bl	8006220 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d901      	bls.n	8008144 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e1c1      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008144:	4b4f      	ldr	r3, [pc, #316]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1ef      	bne.n	8008132 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80a6 	beq.w	80082ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008160:	2300      	movs	r3, #0
 8008162:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008164:	4b47      	ldr	r3, [pc, #284]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10d      	bne.n	800818c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008170:	4b44      	ldr	r3, [pc, #272]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008174:	4a43      	ldr	r2, [pc, #268]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817a:	6593      	str	r3, [r2, #88]	; 0x58
 800817c:	4b41      	ldr	r3, [pc, #260]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 800817e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008188:	2301      	movs	r3, #1
 800818a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800818c:	4b3e      	ldr	r3, [pc, #248]	; (8008288 <HAL_RCC_OscConfig+0x57c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008194:	2b00      	cmp	r3, #0
 8008196:	d118      	bne.n	80081ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008198:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <HAL_RCC_OscConfig+0x57c>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a3a      	ldr	r2, [pc, #232]	; (8008288 <HAL_RCC_OscConfig+0x57c>)
 800819e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081a4:	f7fe f83c 	bl	8006220 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081aa:	e008      	b.n	80081be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ac:	f7fe f838 	bl	8006220 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e184      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081be:	4b32      	ldr	r3, [pc, #200]	; (8008288 <HAL_RCC_OscConfig+0x57c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f0      	beq.n	80081ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d108      	bne.n	80081e4 <HAL_RCC_OscConfig+0x4d8>
 80081d2:	4b2c      	ldr	r3, [pc, #176]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	4a2a      	ldr	r2, [pc, #168]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081e2:	e024      	b.n	800822e <HAL_RCC_OscConfig+0x522>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b05      	cmp	r3, #5
 80081ea:	d110      	bne.n	800820e <HAL_RCC_OscConfig+0x502>
 80081ec:	4b25      	ldr	r3, [pc, #148]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80081ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f2:	4a24      	ldr	r2, [pc, #144]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80081f4:	f043 0304 	orr.w	r3, r3, #4
 80081f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081fc:	4b21      	ldr	r3, [pc, #132]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 80081fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008202:	4a20      	ldr	r2, [pc, #128]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008204:	f043 0301 	orr.w	r3, r3, #1
 8008208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800820c:	e00f      	b.n	800822e <HAL_RCC_OscConfig+0x522>
 800820e:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008214:	4a1b      	ldr	r2, [pc, #108]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008216:	f023 0301 	bic.w	r3, r3, #1
 800821a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800821e:	4b19      	ldr	r3, [pc, #100]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008224:	4a17      	ldr	r2, [pc, #92]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008226:	f023 0304 	bic.w	r3, r3, #4
 800822a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d016      	beq.n	8008264 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008236:	f7fd fff3 	bl	8006220 <HAL_GetTick>
 800823a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800823c:	e00a      	b.n	8008254 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800823e:	f7fd ffef 	bl	8006220 <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	f241 3288 	movw	r2, #5000	; 0x1388
 800824c:	4293      	cmp	r3, r2
 800824e:	d901      	bls.n	8008254 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008250:	2303      	movs	r3, #3
 8008252:	e139      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <HAL_RCC_OscConfig+0x578>)
 8008256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0ed      	beq.n	800823e <HAL_RCC_OscConfig+0x532>
 8008262:	e01a      	b.n	800829a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008264:	f7fd ffdc 	bl	8006220 <HAL_GetTick>
 8008268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800826a:	e00f      	b.n	800828c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826c:	f7fd ffd8 	bl	8006220 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	f241 3288 	movw	r2, #5000	; 0x1388
 800827a:	4293      	cmp	r3, r2
 800827c:	d906      	bls.n	800828c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e122      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
 8008282:	bf00      	nop
 8008284:	40021000 	.word	0x40021000
 8008288:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800828c:	4b90      	ldr	r3, [pc, #576]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800828e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e8      	bne.n	800826c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800829a:	7ffb      	ldrb	r3, [r7, #31]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d105      	bne.n	80082ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082a0:	4b8b      	ldr	r3, [pc, #556]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80082a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a4:	4a8a      	ldr	r2, [pc, #552]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80082a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8108 	beq.w	80084c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	f040 80d0 	bne.w	8008460 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80082c0:	4b83      	ldr	r3, [pc, #524]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f003 0203 	and.w	r2, r3, #3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d130      	bne.n	8008336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	3b01      	subs	r3, #1
 80082e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d127      	bne.n	8008336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d11f      	bne.n	8008336 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008300:	2a07      	cmp	r2, #7
 8008302:	bf14      	ite	ne
 8008304:	2201      	movne	r2, #1
 8008306:	2200      	moveq	r2, #0
 8008308:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800830a:	4293      	cmp	r3, r2
 800830c:	d113      	bne.n	8008336 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	3b01      	subs	r3, #1
 800831c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800831e:	429a      	cmp	r2, r3
 8008320:	d109      	bne.n	8008336 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	085b      	lsrs	r3, r3, #1
 800832e:	3b01      	subs	r3, #1
 8008330:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008332:	429a      	cmp	r2, r3
 8008334:	d06e      	beq.n	8008414 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d069      	beq.n	8008410 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800833c:	4b64      	ldr	r3, [pc, #400]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008348:	4b61      	ldr	r3, [pc, #388]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e0b7      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008358:	4b5d      	ldr	r3, [pc, #372]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a5c      	ldr	r2, [pc, #368]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800835e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008362:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008364:	f7fd ff5c 	bl	8006220 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800836c:	f7fd ff58 	bl	8006220 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e0a4      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800837e:	4b54      	ldr	r3, [pc, #336]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1f0      	bne.n	800836c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800838a:	4b51      	ldr	r3, [pc, #324]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	4b51      	ldr	r3, [pc, #324]	; (80084d4 <HAL_RCC_OscConfig+0x7c8>)
 8008390:	4013      	ands	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800839a:	3a01      	subs	r2, #1
 800839c:	0112      	lsls	r2, r2, #4
 800839e:	4311      	orrs	r1, r2
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083a4:	0212      	lsls	r2, r2, #8
 80083a6:	4311      	orrs	r1, r2
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083ac:	0852      	lsrs	r2, r2, #1
 80083ae:	3a01      	subs	r2, #1
 80083b0:	0552      	lsls	r2, r2, #21
 80083b2:	4311      	orrs	r1, r2
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80083b8:	0852      	lsrs	r2, r2, #1
 80083ba:	3a01      	subs	r2, #1
 80083bc:	0652      	lsls	r2, r2, #25
 80083be:	4311      	orrs	r1, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80083c4:	0912      	lsrs	r2, r2, #4
 80083c6:	0452      	lsls	r2, r2, #17
 80083c8:	430a      	orrs	r2, r1
 80083ca:	4941      	ldr	r1, [pc, #260]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80083d0:	4b3f      	ldr	r3, [pc, #252]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a3e      	ldr	r2, [pc, #248]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80083d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083dc:	4b3c      	ldr	r3, [pc, #240]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	4a3b      	ldr	r2, [pc, #236]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80083e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083e8:	f7fd ff1a 	bl	8006220 <HAL_GetTick>
 80083ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ee:	e008      	b.n	8008402 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f0:	f7fd ff16 	bl	8006220 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e062      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008402:	4b33      	ldr	r3, [pc, #204]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0f0      	beq.n	80083f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800840e:	e05a      	b.n	80084c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e059      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008414:	4b2e      	ldr	r3, [pc, #184]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d152      	bne.n	80084c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008420:	4b2b      	ldr	r3, [pc, #172]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a2a      	ldr	r2, [pc, #168]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800842a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800842c:	4b28      	ldr	r3, [pc, #160]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	4a27      	ldr	r2, [pc, #156]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008436:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008438:	f7fd fef2 	bl	8006220 <HAL_GetTick>
 800843c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800843e:	e008      	b.n	8008452 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008440:	f7fd feee 	bl	8006220 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b02      	cmp	r3, #2
 800844c:	d901      	bls.n	8008452 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e03a      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008452:	4b1f      	ldr	r3, [pc, #124]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f0      	beq.n	8008440 <HAL_RCC_OscConfig+0x734>
 800845e:	e032      	b.n	80084c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b0c      	cmp	r3, #12
 8008464:	d02d      	beq.n	80084c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008466:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a19      	ldr	r2, [pc, #100]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800846c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008470:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008472:	4b17      	ldr	r3, [pc, #92]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800847e:	4b14      	ldr	r3, [pc, #80]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	4a13      	ldr	r2, [pc, #76]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008484:	f023 0303 	bic.w	r3, r3, #3
 8008488:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800848a:	4b11      	ldr	r3, [pc, #68]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	4a10      	ldr	r2, [pc, #64]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 8008490:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008498:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7fd fec1 	bl	8006220 <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a2:	f7fd febd 	bl	8006220 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e009      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084b4:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <HAL_RCC_OscConfig+0x7c4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f0      	bne.n	80084a2 <HAL_RCC_OscConfig+0x796>
 80084c0:	e001      	b.n	80084c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e000      	b.n	80084c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3720      	adds	r7, #32
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	40021000 	.word	0x40021000
 80084d4:	f99d808c 	.word	0xf99d808c

080084d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0c8      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084ec:	4b66      	ldr	r3, [pc, #408]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d910      	bls.n	800851c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fa:	4b63      	ldr	r3, [pc, #396]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f023 0207 	bic.w	r2, r3, #7
 8008502:	4961      	ldr	r1, [pc, #388]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	4313      	orrs	r3, r2
 8008508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b5f      	ldr	r3, [pc, #380]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0b0      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d04c      	beq.n	80085c2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	2b03      	cmp	r3, #3
 800852e:	d107      	bne.n	8008540 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008530:	4b56      	ldr	r3, [pc, #344]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d121      	bne.n	8008580 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e09e      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d107      	bne.n	8008558 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008548:	4b50      	ldr	r3, [pc, #320]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d115      	bne.n	8008580 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e092      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d107      	bne.n	8008570 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008560:	4b4a      	ldr	r3, [pc, #296]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0302 	and.w	r3, r3, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d109      	bne.n	8008580 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e086      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008570:	4b46      	ldr	r3, [pc, #280]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e07e      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008580:	4b42      	ldr	r3, [pc, #264]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f023 0203 	bic.w	r2, r3, #3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	493f      	ldr	r1, [pc, #252]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 800858e:	4313      	orrs	r3, r2
 8008590:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008592:	f7fd fe45 	bl	8006220 <HAL_GetTick>
 8008596:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008598:	e00a      	b.n	80085b0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800859a:	f7fd fe41 	bl	8006220 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e066      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b0:	4b36      	ldr	r3, [pc, #216]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 020c 	and.w	r2, r3, #12
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	429a      	cmp	r2, r3
 80085c0:	d1eb      	bne.n	800859a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085ce:	4b2f      	ldr	r3, [pc, #188]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	492c      	ldr	r1, [pc, #176]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085e0:	4b29      	ldr	r3, [pc, #164]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d210      	bcs.n	8008610 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ee:	4b26      	ldr	r3, [pc, #152]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f023 0207 	bic.w	r2, r3, #7
 80085f6:	4924      	ldr	r1, [pc, #144]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085fe:	4b22      	ldr	r3, [pc, #136]	; (8008688 <HAL_RCC_ClockConfig+0x1b0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	429a      	cmp	r2, r3
 800860a:	d001      	beq.n	8008610 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e036      	b.n	800867e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800861c:	4b1b      	ldr	r3, [pc, #108]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	4918      	ldr	r1, [pc, #96]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 800862a:	4313      	orrs	r3, r2
 800862c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800863a:	4b14      	ldr	r3, [pc, #80]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	00db      	lsls	r3, r3, #3
 8008648:	4910      	ldr	r1, [pc, #64]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800864e:	f000 f825 	bl	800869c <HAL_RCC_GetSysClockFreq>
 8008652:	4602      	mov	r2, r0
 8008654:	4b0d      	ldr	r3, [pc, #52]	; (800868c <HAL_RCC_ClockConfig+0x1b4>)
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	091b      	lsrs	r3, r3, #4
 800865a:	f003 030f 	and.w	r3, r3, #15
 800865e:	490c      	ldr	r1, [pc, #48]	; (8008690 <HAL_RCC_ClockConfig+0x1b8>)
 8008660:	5ccb      	ldrb	r3, [r1, r3]
 8008662:	f003 031f 	and.w	r3, r3, #31
 8008666:	fa22 f303 	lsr.w	r3, r2, r3
 800866a:	4a0a      	ldr	r2, [pc, #40]	; (8008694 <HAL_RCC_ClockConfig+0x1bc>)
 800866c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800866e:	4b0a      	ldr	r3, [pc, #40]	; (8008698 <HAL_RCC_ClockConfig+0x1c0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd fd84 	bl	8006180 <HAL_InitTick>
 8008678:	4603      	mov	r3, r0
 800867a:	72fb      	strb	r3, [r7, #11]

  return status;
 800867c:	7afb      	ldrb	r3, [r7, #11]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	40022000 	.word	0x40022000
 800868c:	40021000 	.word	0x40021000
 8008690:	0801a340 	.word	0x0801a340
 8008694:	2000000c 	.word	0x2000000c
 8008698:	200000e8 	.word	0x200000e8

0800869c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800869c:	b480      	push	{r7}
 800869e:	b089      	sub	sp, #36	; 0x24
 80086a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	61fb      	str	r3, [r7, #28]
 80086a6:	2300      	movs	r3, #0
 80086a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086aa:	4b3e      	ldr	r3, [pc, #248]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 030c 	and.w	r3, r3, #12
 80086b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086b4:	4b3b      	ldr	r3, [pc, #236]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_RCC_GetSysClockFreq+0x34>
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b0c      	cmp	r3, #12
 80086c8:	d121      	bne.n	800870e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d11e      	bne.n	800870e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80086d0:	4b34      	ldr	r3, [pc, #208]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d107      	bne.n	80086ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80086dc:	4b31      	ldr	r3, [pc, #196]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	e005      	b.n	80086f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80086ec:	4b2d      	ldr	r3, [pc, #180]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	091b      	lsrs	r3, r3, #4
 80086f2:	f003 030f 	and.w	r3, r3, #15
 80086f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80086f8:	4a2b      	ldr	r2, [pc, #172]	; (80087a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008700:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10d      	bne.n	8008724 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800870c:	e00a      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2b04      	cmp	r3, #4
 8008712:	d102      	bne.n	800871a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008714:	4b25      	ldr	r3, [pc, #148]	; (80087ac <HAL_RCC_GetSysClockFreq+0x110>)
 8008716:	61bb      	str	r3, [r7, #24]
 8008718:	e004      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b08      	cmp	r3, #8
 800871e:	d101      	bne.n	8008724 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008720:	4b23      	ldr	r3, [pc, #140]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008722:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b0c      	cmp	r3, #12
 8008728:	d134      	bne.n	8008794 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800872a:	4b1e      	ldr	r3, [pc, #120]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d003      	beq.n	8008742 <HAL_RCC_GetSysClockFreq+0xa6>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b03      	cmp	r3, #3
 800873e:	d003      	beq.n	8008748 <HAL_RCC_GetSysClockFreq+0xac>
 8008740:	e005      	b.n	800874e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008742:	4b1a      	ldr	r3, [pc, #104]	; (80087ac <HAL_RCC_GetSysClockFreq+0x110>)
 8008744:	617b      	str	r3, [r7, #20]
      break;
 8008746:	e005      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008748:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800874a:	617b      	str	r3, [r7, #20]
      break;
 800874c:	e002      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	617b      	str	r3, [r7, #20]
      break;
 8008752:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	091b      	lsrs	r3, r3, #4
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	3301      	adds	r3, #1
 8008760:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008762:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	0a1b      	lsrs	r3, r3, #8
 8008768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	fb02 f203 	mul.w	r2, r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	fbb2 f3f3 	udiv	r3, r2, r3
 8008778:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800877a:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	0e5b      	lsrs	r3, r3, #25
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	3301      	adds	r3, #1
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008792:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008794:	69bb      	ldr	r3, [r7, #24]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3724      	adds	r7, #36	; 0x24
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40021000 	.word	0x40021000
 80087a8:	0801a358 	.word	0x0801a358
 80087ac:	00f42400 	.word	0x00f42400
 80087b0:	007a1200 	.word	0x007a1200

080087b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087b8:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80087ba:	681b      	ldr	r3, [r3, #0]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	2000000c 	.word	0x2000000c

080087cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80087d0:	f7ff fff0 	bl	80087b4 <HAL_RCC_GetHCLKFreq>
 80087d4:	4602      	mov	r2, r0
 80087d6:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	4904      	ldr	r1, [pc, #16]	; (80087f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087e2:	5ccb      	ldrb	r3, [r1, r3]
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40021000 	.word	0x40021000
 80087f4:	0801a350 	.word	0x0801a350

080087f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80087fc:	f7ff ffda 	bl	80087b4 <HAL_RCC_GetHCLKFreq>
 8008800:	4602      	mov	r2, r0
 8008802:	4b06      	ldr	r3, [pc, #24]	; (800881c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	0adb      	lsrs	r3, r3, #11
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800880e:	5ccb      	ldrb	r3, [r1, r3]
 8008810:	f003 031f 	and.w	r3, r3, #31
 8008814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008818:	4618      	mov	r0, r3
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40021000 	.word	0x40021000
 8008820:	0801a350 	.word	0x0801a350

08008824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800882c:	2300      	movs	r3, #0
 800882e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008830:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800883c:	f7ff fa02 	bl	8007c44 <HAL_PWREx_GetVoltageRange>
 8008840:	6178      	str	r0, [r7, #20]
 8008842:	e014      	b.n	800886e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008844:	4b25      	ldr	r3, [pc, #148]	; (80088dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008848:	4a24      	ldr	r2, [pc, #144]	; (80088dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800884a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800884e:	6593      	str	r3, [r2, #88]	; 0x58
 8008850:	4b22      	ldr	r3, [pc, #136]	; (80088dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800885c:	f7ff f9f2 	bl	8007c44 <HAL_PWREx_GetVoltageRange>
 8008860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008862:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008866:	4a1d      	ldr	r2, [pc, #116]	; (80088dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800886c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008874:	d10b      	bne.n	800888e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d919      	bls.n	80088b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2ba0      	cmp	r3, #160	; 0xa0
 8008880:	d902      	bls.n	8008888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008882:	2302      	movs	r3, #2
 8008884:	613b      	str	r3, [r7, #16]
 8008886:	e013      	b.n	80088b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008888:	2301      	movs	r3, #1
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	e010      	b.n	80088b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b80      	cmp	r3, #128	; 0x80
 8008892:	d902      	bls.n	800889a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008894:	2303      	movs	r3, #3
 8008896:	613b      	str	r3, [r7, #16]
 8008898:	e00a      	b.n	80088b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d102      	bne.n	80088a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088a0:	2302      	movs	r3, #2
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	e004      	b.n	80088b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b70      	cmp	r3, #112	; 0x70
 80088aa:	d101      	bne.n	80088b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088ac:	2301      	movs	r3, #1
 80088ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088b0:	4b0b      	ldr	r3, [pc, #44]	; (80088e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f023 0207 	bic.w	r2, r3, #7
 80088b8:	4909      	ldr	r1, [pc, #36]	; (80088e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4313      	orrs	r3, r2
 80088be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80088c0:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d001      	beq.n	80088d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	40021000 	.word	0x40021000
 80088e0:	40022000 	.word	0x40022000

080088e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088ec:	2300      	movs	r3, #0
 80088ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088f0:	2300      	movs	r3, #0
 80088f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d041      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008904:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008908:	d02a      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800890a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800890e:	d824      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008914:	d008      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800891a:	d81e      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008924:	d010      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008926:	e018      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008928:	4b86      	ldr	r3, [pc, #536]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4a85      	ldr	r2, [pc, #532]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800892e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008932:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008934:	e015      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3304      	adds	r3, #4
 800893a:	2100      	movs	r1, #0
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fabb 	bl	8008eb8 <RCCEx_PLLSAI1_Config>
 8008942:	4603      	mov	r3, r0
 8008944:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008946:	e00c      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3320      	adds	r3, #32
 800894c:	2100      	movs	r1, #0
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fba6 	bl	80090a0 <RCCEx_PLLSAI2_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008958:	e003      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	74fb      	strb	r3, [r7, #19]
      break;
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008962:	7cfb      	ldrb	r3, [r7, #19]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10b      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008968:	4b76      	ldr	r3, [pc, #472]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800896a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008976:	4973      	ldr	r1, [pc, #460]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008978:	4313      	orrs	r3, r2
 800897a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800897e:	e001      	b.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	7cfb      	ldrb	r3, [r7, #19]
 8008982:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d041      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008994:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008998:	d02a      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800899a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800899e:	d824      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80089a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a4:	d008      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80089a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089aa:	d81e      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00a      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80089b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089b4:	d010      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80089b6:	e018      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80089b8:	4b62      	ldr	r3, [pc, #392]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	4a61      	ldr	r2, [pc, #388]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80089c4:	e015      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3304      	adds	r3, #4
 80089ca:	2100      	movs	r1, #0
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 fa73 	bl	8008eb8 <RCCEx_PLLSAI1_Config>
 80089d2:	4603      	mov	r3, r0
 80089d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80089d6:	e00c      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3320      	adds	r3, #32
 80089dc:	2100      	movs	r1, #0
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fb5e 	bl	80090a0 <RCCEx_PLLSAI2_Config>
 80089e4:	4603      	mov	r3, r0
 80089e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	74fb      	strb	r3, [r7, #19]
      break;
 80089ee:	e000      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80089f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f2:	7cfb      	ldrb	r3, [r7, #19]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80089f8:	4b52      	ldr	r3, [pc, #328]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a06:	494f      	ldr	r1, [pc, #316]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008a0e:	e001      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	7cfb      	ldrb	r3, [r7, #19]
 8008a12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80a0 	beq.w	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a22:	2300      	movs	r3, #0
 8008a24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008a26:	4b47      	ldr	r3, [pc, #284]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008a36:	2300      	movs	r3, #0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00d      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a3c:	4b41      	ldr	r3, [pc, #260]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a40:	4a40      	ldr	r2, [pc, #256]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a46:	6593      	str	r3, [r2, #88]	; 0x58
 8008a48:	4b3e      	ldr	r3, [pc, #248]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a50:	60bb      	str	r3, [r7, #8]
 8008a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a54:	2301      	movs	r3, #1
 8008a56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a58:	4b3b      	ldr	r3, [pc, #236]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a3a      	ldr	r2, [pc, #232]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a64:	f7fd fbdc 	bl	8006220 <HAL_GetTick>
 8008a68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008a6a:	e009      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a6c:	f7fd fbd8 	bl	8006220 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d902      	bls.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	74fb      	strb	r3, [r7, #19]
        break;
 8008a7e:	e005      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008a80:	4b31      	ldr	r3, [pc, #196]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0ef      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008a8c:	7cfb      	ldrb	r3, [r7, #19]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d15c      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a92:	4b2c      	ldr	r3, [pc, #176]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d01f      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d019      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ab0:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008abc:	4b21      	ldr	r3, [pc, #132]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac2:	4a20      	ldr	r2, [pc, #128]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008acc:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad2:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008adc:	4a19      	ldr	r2, [pc, #100]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d016      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aee:	f7fd fb97 	bl	8006220 <HAL_GetTick>
 8008af2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008af4:	e00b      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008af6:	f7fd fb93 	bl	8006220 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d902      	bls.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	74fb      	strb	r3, [r7, #19]
            break;
 8008b0c:	e006      	b.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0ec      	beq.n	8008af6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008b1c:	7cfb      	ldrb	r3, [r7, #19]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10c      	bne.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b32:	4904      	ldr	r1, [pc, #16]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008b3a:	e009      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b3c:	7cfb      	ldrb	r3, [r7, #19]
 8008b3e:	74bb      	strb	r3, [r7, #18]
 8008b40:	e006      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008b42:	bf00      	nop
 8008b44:	40021000 	.word	0x40021000
 8008b48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4c:	7cfb      	ldrb	r3, [r7, #19]
 8008b4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b50:	7c7b      	ldrb	r3, [r7, #17]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d105      	bne.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b56:	4b9e      	ldr	r3, [pc, #632]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5a:	4a9d      	ldr	r2, [pc, #628]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b6e:	4b98      	ldr	r3, [pc, #608]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b74:	f023 0203 	bic.w	r2, r3, #3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	4994      	ldr	r1, [pc, #592]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b90:	4b8f      	ldr	r3, [pc, #572]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b96:	f023 020c 	bic.w	r2, r3, #12
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9e:	498c      	ldr	r1, [pc, #560]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0304 	and.w	r3, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008bb2:	4b87      	ldr	r3, [pc, #540]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc0:	4983      	ldr	r1, [pc, #524]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0308 	and.w	r3, r3, #8
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008bd4:	4b7e      	ldr	r3, [pc, #504]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be2:	497b      	ldr	r1, [pc, #492]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0310 	and.w	r3, r3, #16
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008bf6:	4b76      	ldr	r3, [pc, #472]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c04:	4972      	ldr	r1, [pc, #456]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c18:	4b6d      	ldr	r3, [pc, #436]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c26:	496a      	ldr	r1, [pc, #424]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c3a:	4b65      	ldr	r3, [pc, #404]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c48:	4961      	ldr	r1, [pc, #388]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c5c:	4b5c      	ldr	r3, [pc, #368]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c6a:	4959      	ldr	r1, [pc, #356]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c7e:	4b54      	ldr	r3, [pc, #336]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8c:	4950      	ldr	r1, [pc, #320]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ca0:	4b4b      	ldr	r3, [pc, #300]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cae:	4948      	ldr	r1, [pc, #288]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008cc2:	4b43      	ldr	r3, [pc, #268]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd0:	493f      	ldr	r1, [pc, #252]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d028      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ce4:	4b3a      	ldr	r3, [pc, #232]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf2:	4937      	ldr	r1, [pc, #220]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d02:	d106      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d04:	4b32      	ldr	r3, [pc, #200]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	4a31      	ldr	r2, [pc, #196]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d0e:	60d3      	str	r3, [r2, #12]
 8008d10:	e011      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d1a:	d10c      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	2101      	movs	r1, #1
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f8c8 	bl	8008eb8 <RCCEx_PLLSAI1_Config>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008d2c:	7cfb      	ldrb	r3, [r7, #19]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008d32:	7cfb      	ldrb	r3, [r7, #19]
 8008d34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d028      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008d42:	4b23      	ldr	r3, [pc, #140]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d50:	491f      	ldr	r1, [pc, #124]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d60:	d106      	bne.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d62:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	4a1a      	ldr	r2, [pc, #104]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d6c:	60d3      	str	r3, [r2, #12]
 8008d6e:	e011      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d78:	d10c      	bne.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	3304      	adds	r3, #4
 8008d7e:	2101      	movs	r1, #1
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 f899 	bl	8008eb8 <RCCEx_PLLSAI1_Config>
 8008d86:	4603      	mov	r3, r0
 8008d88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d8a:	7cfb      	ldrb	r3, [r7, #19]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d02b      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008da0:	4b0b      	ldr	r3, [pc, #44]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dae:	4908      	ldr	r1, [pc, #32]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dbe:	d109      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dc0:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4a02      	ldr	r2, [pc, #8]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dca:	60d3      	str	r3, [r2, #12]
 8008dcc:	e014      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008dce:	bf00      	nop
 8008dd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ddc:	d10c      	bne.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3304      	adds	r3, #4
 8008de2:	2101      	movs	r1, #1
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 f867 	bl	8008eb8 <RCCEx_PLLSAI1_Config>
 8008dea:	4603      	mov	r3, r0
 8008dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008dee:	7cfb      	ldrb	r3, [r7, #19]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008df4:	7cfb      	ldrb	r3, [r7, #19]
 8008df6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d02f      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e04:	4b2b      	ldr	r3, [pc, #172]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e12:	4928      	ldr	r1, [pc, #160]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e22:	d10d      	bne.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3304      	adds	r3, #4
 8008e28:	2102      	movs	r1, #2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f844 	bl	8008eb8 <RCCEx_PLLSAI1_Config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e34:	7cfb      	ldrb	r3, [r7, #19]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d014      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008e3a:	7cfb      	ldrb	r3, [r7, #19]
 8008e3c:	74bb      	strb	r3, [r7, #18]
 8008e3e:	e011      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e48:	d10c      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	3320      	adds	r3, #32
 8008e4e:	2102      	movs	r1, #2
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f925 	bl	80090a0 <RCCEx_PLLSAI2_Config>
 8008e56:	4603      	mov	r3, r0
 8008e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e5a:	7cfb      	ldrb	r3, [r7, #19]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008e60:	7cfb      	ldrb	r3, [r7, #19]
 8008e62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e70:	4b10      	ldr	r3, [pc, #64]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e7e:	490d      	ldr	r1, [pc, #52]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e92:	4b08      	ldr	r3, [pc, #32]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea2:	4904      	ldr	r1, [pc, #16]	; (8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008eaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40021000 	.word	0x40021000

08008eb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008ec6:	4b75      	ldr	r3, [pc, #468]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f003 0303 	and.w	r3, r3, #3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d018      	beq.n	8008f04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008ed2:	4b72      	ldr	r3, [pc, #456]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f003 0203 	and.w	r2, r3, #3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d10d      	bne.n	8008efe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d009      	beq.n	8008efe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008eea:	4b6c      	ldr	r3, [pc, #432]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	091b      	lsrs	r3, r3, #4
 8008ef0:	f003 0307 	and.w	r3, r3, #7
 8008ef4:	1c5a      	adds	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d047      	beq.n	8008f8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]
 8008f02:	e044      	b.n	8008f8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d018      	beq.n	8008f3e <RCCEx_PLLSAI1_Config+0x86>
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d825      	bhi.n	8008f5c <RCCEx_PLLSAI1_Config+0xa4>
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d002      	beq.n	8008f1a <RCCEx_PLLSAI1_Config+0x62>
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d009      	beq.n	8008f2c <RCCEx_PLLSAI1_Config+0x74>
 8008f18:	e020      	b.n	8008f5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008f1a:	4b60      	ldr	r3, [pc, #384]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d11d      	bne.n	8008f62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f2a:	e01a      	b.n	8008f62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008f2c:	4b5b      	ldr	r3, [pc, #364]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d116      	bne.n	8008f66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f3c:	e013      	b.n	8008f66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008f3e:	4b57      	ldr	r3, [pc, #348]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10f      	bne.n	8008f6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008f4a:	4b54      	ldr	r3, [pc, #336]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d109      	bne.n	8008f6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f5a:	e006      	b.n	8008f6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f60:	e004      	b.n	8008f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008f62:	bf00      	nop
 8008f64:	e002      	b.n	8008f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008f66:	bf00      	nop
 8008f68:	e000      	b.n	8008f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10d      	bne.n	8008f8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008f72:	4b4a      	ldr	r3, [pc, #296]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6819      	ldr	r1, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	430b      	orrs	r3, r1
 8008f88:	4944      	ldr	r1, [pc, #272]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d17d      	bne.n	8009090 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008f94:	4b41      	ldr	r3, [pc, #260]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a40      	ldr	r2, [pc, #256]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa0:	f7fd f93e 	bl	8006220 <HAL_GetTick>
 8008fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008fa6:	e009      	b.n	8008fbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008fa8:	f7fd f93a 	bl	8006220 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d902      	bls.n	8008fbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008fb6:	2303      	movs	r3, #3
 8008fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8008fba:	e005      	b.n	8008fc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008fbc:	4b37      	ldr	r3, [pc, #220]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ef      	bne.n	8008fa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d160      	bne.n	8009090 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d111      	bne.n	8008ff8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008fd4:	4b31      	ldr	r3, [pc, #196]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6892      	ldr	r2, [r2, #8]
 8008fe4:	0211      	lsls	r1, r2, #8
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68d2      	ldr	r2, [r2, #12]
 8008fea:	0912      	lsrs	r2, r2, #4
 8008fec:	0452      	lsls	r2, r2, #17
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	492a      	ldr	r1, [pc, #168]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	610b      	str	r3, [r1, #16]
 8008ff6:	e027      	b.n	8009048 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d112      	bne.n	8009024 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ffe:	4b27      	ldr	r3, [pc, #156]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009006:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6892      	ldr	r2, [r2, #8]
 800900e:	0211      	lsls	r1, r2, #8
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6912      	ldr	r2, [r2, #16]
 8009014:	0852      	lsrs	r2, r2, #1
 8009016:	3a01      	subs	r2, #1
 8009018:	0552      	lsls	r2, r2, #21
 800901a:	430a      	orrs	r2, r1
 800901c:	491f      	ldr	r1, [pc, #124]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 800901e:	4313      	orrs	r3, r2
 8009020:	610b      	str	r3, [r1, #16]
 8009022:	e011      	b.n	8009048 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009024:	4b1d      	ldr	r3, [pc, #116]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800902c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	6892      	ldr	r2, [r2, #8]
 8009034:	0211      	lsls	r1, r2, #8
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6952      	ldr	r2, [r2, #20]
 800903a:	0852      	lsrs	r2, r2, #1
 800903c:	3a01      	subs	r2, #1
 800903e:	0652      	lsls	r2, r2, #25
 8009040:	430a      	orrs	r2, r1
 8009042:	4916      	ldr	r1, [pc, #88]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009044:	4313      	orrs	r3, r2
 8009046:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009048:	4b14      	ldr	r3, [pc, #80]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a13      	ldr	r2, [pc, #76]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 800904e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009052:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009054:	f7fd f8e4 	bl	8006220 <HAL_GetTick>
 8009058:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800905a:	e009      	b.n	8009070 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800905c:	f7fd f8e0 	bl	8006220 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d902      	bls.n	8009070 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	73fb      	strb	r3, [r7, #15]
          break;
 800906e:	e005      	b.n	800907c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009070:	4b0a      	ldr	r3, [pc, #40]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0ef      	beq.n	800905c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009082:	4b06      	ldr	r3, [pc, #24]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	4904      	ldr	r1, [pc, #16]	; (800909c <RCCEx_PLLSAI1_Config+0x1e4>)
 800908c:	4313      	orrs	r3, r2
 800908e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009090:	7bfb      	ldrb	r3, [r7, #15]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	40021000 	.word	0x40021000

080090a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80090ae:	4b6a      	ldr	r3, [pc, #424]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80090ba:	4b67      	ldr	r3, [pc, #412]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f003 0203 	and.w	r2, r3, #3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d10d      	bne.n	80090e6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
       ||
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80090d2:	4b61      	ldr	r3, [pc, #388]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	091b      	lsrs	r3, r3, #4
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
       ||
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d047      	beq.n	8009176 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	73fb      	strb	r3, [r7, #15]
 80090ea:	e044      	b.n	8009176 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d018      	beq.n	8009126 <RCCEx_PLLSAI2_Config+0x86>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d825      	bhi.n	8009144 <RCCEx_PLLSAI2_Config+0xa4>
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d002      	beq.n	8009102 <RCCEx_PLLSAI2_Config+0x62>
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d009      	beq.n	8009114 <RCCEx_PLLSAI2_Config+0x74>
 8009100:	e020      	b.n	8009144 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009102:	4b55      	ldr	r3, [pc, #340]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d11d      	bne.n	800914a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009112:	e01a      	b.n	800914a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009114:	4b50      	ldr	r3, [pc, #320]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800911c:	2b00      	cmp	r3, #0
 800911e:	d116      	bne.n	800914e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009124:	e013      	b.n	800914e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009126:	4b4c      	ldr	r3, [pc, #304]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10f      	bne.n	8009152 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009132:	4b49      	ldr	r3, [pc, #292]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d109      	bne.n	8009152 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009142:	e006      	b.n	8009152 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
      break;
 8009148:	e004      	b.n	8009154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009152:	bf00      	nop
    }

    if(status == HAL_OK)
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10d      	bne.n	8009176 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800915a:	4b3f      	ldr	r3, [pc, #252]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6819      	ldr	r1, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	3b01      	subs	r3, #1
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	430b      	orrs	r3, r1
 8009170:	4939      	ldr	r1, [pc, #228]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009172:	4313      	orrs	r3, r2
 8009174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d167      	bne.n	800924c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800917c:	4b36      	ldr	r3, [pc, #216]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a35      	ldr	r2, [pc, #212]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009188:	f7fd f84a 	bl	8006220 <HAL_GetTick>
 800918c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800918e:	e009      	b.n	80091a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009190:	f7fd f846 	bl	8006220 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d902      	bls.n	80091a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	73fb      	strb	r3, [r7, #15]
        break;
 80091a2:	e005      	b.n	80091b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80091a4:	4b2c      	ldr	r3, [pc, #176]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1ef      	bne.n	8009190 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d14a      	bne.n	800924c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d111      	bne.n	80091e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80091bc:	4b26      	ldr	r3, [pc, #152]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80091c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6892      	ldr	r2, [r2, #8]
 80091cc:	0211      	lsls	r1, r2, #8
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	68d2      	ldr	r2, [r2, #12]
 80091d2:	0912      	lsrs	r2, r2, #4
 80091d4:	0452      	lsls	r2, r2, #17
 80091d6:	430a      	orrs	r2, r1
 80091d8:	491f      	ldr	r1, [pc, #124]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	614b      	str	r3, [r1, #20]
 80091de:	e011      	b.n	8009204 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80091e0:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80091e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6892      	ldr	r2, [r2, #8]
 80091f0:	0211      	lsls	r1, r2, #8
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6912      	ldr	r2, [r2, #16]
 80091f6:	0852      	lsrs	r2, r2, #1
 80091f8:	3a01      	subs	r2, #1
 80091fa:	0652      	lsls	r2, r2, #25
 80091fc:	430a      	orrs	r2, r1
 80091fe:	4916      	ldr	r1, [pc, #88]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009200:	4313      	orrs	r3, r2
 8009202:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009204:	4b14      	ldr	r3, [pc, #80]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800920a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800920e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009210:	f7fd f806 	bl	8006220 <HAL_GetTick>
 8009214:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009216:	e009      	b.n	800922c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009218:	f7fd f802 	bl	8006220 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	2b02      	cmp	r3, #2
 8009224:	d902      	bls.n	800922c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	73fb      	strb	r3, [r7, #15]
          break;
 800922a:	e005      	b.n	8009238 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800922c:	4b0a      	ldr	r3, [pc, #40]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d0ef      	beq.n	8009218 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009238:	7bfb      	ldrb	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009240:	695a      	ldr	r2, [r3, #20]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	4904      	ldr	r1, [pc, #16]	; (8009258 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009248:	4313      	orrs	r3, r2
 800924a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800924c:	7bfb      	ldrb	r3, [r7, #15]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	40021000 	.word	0x40021000

0800925c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d06c      	beq.n	8009348 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d106      	bne.n	8009288 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f7f8 ff86 	bl	8002194 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	22ca      	movs	r2, #202	; 0xca
 8009296:	625a      	str	r2, [r3, #36]	; 0x24
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2253      	movs	r2, #83	; 0x53
 800929e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9a0 	bl	80095e6 <RTC_EnterInitMode>
 80092a6:	4603      	mov	r3, r0
 80092a8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d14b      	bne.n	8009348 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80092be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6899      	ldr	r1, [r3, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	68d2      	ldr	r2, [r2, #12]
 80092ea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6919      	ldr	r1, [r3, #16]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	041a      	lsls	r2, r3, #16
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f9a3 	bl	800964c <RTC_ExitInitMode>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d11b      	bne.n	8009348 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0203 	bic.w	r2, r2, #3
 800931e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69da      	ldr	r2, [r3, #28]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	22ff      	movs	r2, #255	; 0xff
 800933e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009348:	7bfb      	ldrb	r3, [r7, #15]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009352:	b590      	push	{r4, r7, lr}
 8009354:	b087      	sub	sp, #28
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <HAL_RTC_SetTime+0x1a>
 8009368:	2302      	movs	r3, #2
 800936a:	e08b      	b.n	8009484 <HAL_RTC_SetTime+0x132>
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	22ca      	movs	r2, #202	; 0xca
 8009382:	625a      	str	r2, [r3, #36]	; 0x24
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2253      	movs	r2, #83	; 0x53
 800938a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 f92a 	bl	80095e6 <RTC_EnterInitMode>
 8009392:	4603      	mov	r3, r0
 8009394:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009396:	7cfb      	ldrb	r3, [r7, #19]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d163      	bne.n	8009464 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d126      	bne.n	80093f0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d102      	bne.n	80093b6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f984 	bl	80096c8 <RTC_ByteToBcd2>
 80093c0:	4603      	mov	r3, r0
 80093c2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f97d 	bl	80096c8 <RTC_ByteToBcd2>
 80093ce:	4603      	mov	r3, r0
 80093d0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093d2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	789b      	ldrb	r3, [r3, #2]
 80093d8:	4618      	mov	r0, r3
 80093da:	f000 f975 	bl	80096c8 <RTC_ByteToBcd2>
 80093de:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093e0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	78db      	ldrb	r3, [r3, #3]
 80093e8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80093ea:	4313      	orrs	r3, r2
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	e018      	b.n	8009422 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2200      	movs	r2, #0
 8009402:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009410:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009416:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	78db      	ldrb	r3, [r3, #3]
 800941c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800942c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009430:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009440:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6899      	ldr	r1, [r3, #8]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	431a      	orrs	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f8f6 	bl	800964c <RTC_ExitInitMode>
 8009460:	4603      	mov	r3, r0
 8009462:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	22ff      	movs	r2, #255	; 0xff
 800946a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800946c:	7cfb      	ldrb	r3, [r7, #19]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d103      	bne.n	800947a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009482:	7cfb      	ldrb	r3, [r7, #19]
}
 8009484:	4618      	mov	r0, r3
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	bd90      	pop	{r4, r7, pc}

0800948c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_RTC_SetDate+0x1a>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e075      	b.n	8009592 <HAL_RTC_SetDate+0x106>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10e      	bne.n	80094da <HAL_RTC_SetDate+0x4e>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	f003 0310 	and.w	r3, r3, #16
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d008      	beq.n	80094da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	785b      	ldrb	r3, [r3, #1]
 80094cc:	f023 0310 	bic.w	r3, r3, #16
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	330a      	adds	r3, #10
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d11c      	bne.n	800951a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	78db      	ldrb	r3, [r3, #3]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 f8ef 	bl	80096c8 <RTC_ByteToBcd2>
 80094ea:	4603      	mov	r3, r0
 80094ec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f8e8 	bl	80096c8 <RTC_ByteToBcd2>
 80094f8:	4603      	mov	r3, r0
 80094fa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80094fc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	789b      	ldrb	r3, [r3, #2]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f8e0 	bl	80096c8 <RTC_ByteToBcd2>
 8009508:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800950a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e00e      	b.n	8009538 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	78db      	ldrb	r3, [r3, #3]
 800951e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009526:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800952c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	22ca      	movs	r2, #202	; 0xca
 800953e:	625a      	str	r2, [r3, #36]	; 0x24
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2253      	movs	r2, #83	; 0x53
 8009546:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f84c 	bl	80095e6 <RTC_EnterInitMode>
 800954e:	4603      	mov	r3, r0
 8009550:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009552:	7cfb      	ldrb	r3, [r7, #19]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10c      	bne.n	8009572 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009562:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009566:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 f86f 	bl	800964c <RTC_ExitInitMode>
 800956e:	4603      	mov	r3, r0
 8009570:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	22ff      	movs	r2, #255	; 0xff
 8009578:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800957a:	7cfb      	ldrb	r3, [r7, #19]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009590:	7cfb      	ldrb	r3, [r7, #19]
}
 8009592:	4618      	mov	r0, r3
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	bd90      	pop	{r4, r7, pc}

0800959a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095b0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80095b2:	f7fc fe35 	bl	8006220 <HAL_GetTick>
 80095b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095b8:	e009      	b.n	80095ce <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095ba:	f7fc fe31 	bl	8006220 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095c8:	d901      	bls.n	80095ce <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e007      	b.n	80095de <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0ee      	beq.n	80095ba <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d120      	bne.n	8009642 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f04f 32ff 	mov.w	r2, #4294967295
 8009608:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800960a:	f7fc fe09 	bl	8006220 <HAL_GetTick>
 800960e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009610:	e00d      	b.n	800962e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009612:	f7fc fe05 	bl	8006220 <HAL_GetTick>
 8009616:	4602      	mov	r2, r0
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	1ad3      	subs	r3, r2, r3
 800961c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009620:	d905      	bls.n	800962e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2203      	movs	r2, #3
 800962a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <RTC_EnterInitMode+0x5c>
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	2b03      	cmp	r3, #3
 8009640:	d1e7      	bne.n	8009612 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009658:	4b1a      	ldr	r3, [pc, #104]	; (80096c4 <RTC_ExitInitMode+0x78>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	4a19      	ldr	r2, [pc, #100]	; (80096c4 <RTC_ExitInitMode+0x78>)
 800965e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009662:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009664:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <RTC_ExitInitMode+0x78>)
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10c      	bne.n	800968a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff ff92 	bl	800959a <HAL_RTC_WaitForSynchro>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01e      	beq.n	80096ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2203      	movs	r2, #3
 8009680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	73fb      	strb	r3, [r7, #15]
 8009688:	e017      	b.n	80096ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800968a:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <RTC_ExitInitMode+0x78>)
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <RTC_ExitInitMode+0x78>)
 8009690:	f023 0320 	bic.w	r3, r3, #32
 8009694:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ff7f 	bl	800959a <HAL_RTC_WaitForSynchro>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d005      	beq.n	80096ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2203      	movs	r2, #3
 80096a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <RTC_ExitInitMode+0x78>)
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	4a04      	ldr	r2, [pc, #16]	; (80096c4 <RTC_ExitInitMode+0x78>)
 80096b4:	f043 0320 	orr.w	r3, r3, #32
 80096b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	40002800 	.word	0x40002800

080096c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80096da:	e005      	b.n	80096e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80096e2:	7afb      	ldrb	r3, [r7, #11]
 80096e4:	3b0a      	subs	r3, #10
 80096e6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	2b09      	cmp	r3, #9
 80096ec:	d8f6      	bhi.n	80096dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	b2db      	uxtb	r3, r3
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e049      	b.n	80097ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f9 f882 	bl	8002838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	4619      	mov	r1, r3
 8009746:	4610      	mov	r0, r2
 8009748:	f000 fae0 	bl	8009d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e047      	b.n	8009860 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a23      	ldr	r2, [pc, #140]	; (800986c <HAL_TIM_Base_Start+0xb4>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d01d      	beq.n	800981e <HAL_TIM_Base_Start+0x66>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ea:	d018      	beq.n	800981e <HAL_TIM_Base_Start+0x66>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a1f      	ldr	r2, [pc, #124]	; (8009870 <HAL_TIM_Base_Start+0xb8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d013      	beq.n	800981e <HAL_TIM_Base_Start+0x66>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a1e      	ldr	r2, [pc, #120]	; (8009874 <HAL_TIM_Base_Start+0xbc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00e      	beq.n	800981e <HAL_TIM_Base_Start+0x66>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1c      	ldr	r2, [pc, #112]	; (8009878 <HAL_TIM_Base_Start+0xc0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d009      	beq.n	800981e <HAL_TIM_Base_Start+0x66>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a1b      	ldr	r2, [pc, #108]	; (800987c <HAL_TIM_Base_Start+0xc4>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d004      	beq.n	800981e <HAL_TIM_Base_Start+0x66>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a19      	ldr	r2, [pc, #100]	; (8009880 <HAL_TIM_Base_Start+0xc8>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d115      	bne.n	800984a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	4b17      	ldr	r3, [pc, #92]	; (8009884 <HAL_TIM_Base_Start+0xcc>)
 8009826:	4013      	ands	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b06      	cmp	r3, #6
 800982e:	d015      	beq.n	800985c <HAL_TIM_Base_Start+0xa4>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009836:	d011      	beq.n	800985c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f042 0201 	orr.w	r2, r2, #1
 8009846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009848:	e008      	b.n	800985c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f042 0201 	orr.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e000      	b.n	800985e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	40012c00 	.word	0x40012c00
 8009870:	40000400 	.word	0x40000400
 8009874:	40000800 	.word	0x40000800
 8009878:	40000c00 	.word	0x40000c00
 800987c:	40013400 	.word	0x40013400
 8009880:	40014000 	.word	0x40014000
 8009884:	00010007 	.word	0x00010007

08009888 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	f241 1311 	movw	r3, #4369	; 0x1111
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10f      	bne.n	80098c0 <HAL_TIM_Base_Stop+0x38>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6a1a      	ldr	r2, [r3, #32]
 80098a6:	f240 4344 	movw	r3, #1092	; 0x444
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d107      	bne.n	80098c0 <HAL_TIM_Base_Stop+0x38>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b082      	sub	sp, #8
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f003 0302 	and.w	r3, r3, #2
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d122      	bne.n	8009932 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d11b      	bne.n	8009932 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f06f 0202 	mvn.w	r2, #2
 8009902:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699b      	ldr	r3, [r3, #24]
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d003      	beq.n	8009920 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f9d8 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 800991e:	e005      	b.n	800992c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f9ca 	bl	8009cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f9db 	bl	8009ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b04      	cmp	r3, #4
 800993e:	d122      	bne.n	8009986 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0304 	and.w	r3, r3, #4
 800994a:	2b04      	cmp	r3, #4
 800994c:	d11b      	bne.n	8009986 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f06f 0204 	mvn.w	r2, #4
 8009956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f9ae 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 8009972:	e005      	b.n	8009980 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f9a0 	bl	8009cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f9b1 	bl	8009ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 0308 	and.w	r3, r3, #8
 8009990:	2b08      	cmp	r3, #8
 8009992:	d122      	bne.n	80099da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d11b      	bne.n	80099da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f06f 0208 	mvn.w	r2, #8
 80099aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2204      	movs	r2, #4
 80099b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f984 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 80099c6:	e005      	b.n	80099d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f976 	bl	8009cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f987 	bl	8009ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b10      	cmp	r3, #16
 80099e6:	d122      	bne.n	8009a2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f003 0310 	and.w	r3, r3, #16
 80099f2:	2b10      	cmp	r3, #16
 80099f4:	d11b      	bne.n	8009a2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f06f 0210 	mvn.w	r2, #16
 80099fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2208      	movs	r2, #8
 8009a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f95a 	bl	8009cce <HAL_TIM_IC_CaptureCallback>
 8009a1a:	e005      	b.n	8009a28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f94c 	bl	8009cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 f95d 	bl	8009ce2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d10e      	bne.n	8009a5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d107      	bne.n	8009a5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f06f 0201 	mvn.w	r2, #1
 8009a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f926 	bl	8009ca6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a64:	2b80      	cmp	r3, #128	; 0x80
 8009a66:	d10e      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b80      	cmp	r3, #128	; 0x80
 8009a74:	d107      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fb09 	bl	800a098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a94:	d10e      	bne.n	8009ab4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa0:	2b80      	cmp	r3, #128	; 0x80
 8009aa2:	d107      	bne.n	8009ab4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fafc 	bl	800a0ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abe:	2b40      	cmp	r3, #64	; 0x40
 8009ac0:	d10e      	bne.n	8009ae0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009acc:	2b40      	cmp	r3, #64	; 0x40
 8009ace:	d107      	bne.n	8009ae0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f90b 	bl	8009cf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d10e      	bne.n	8009b0c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d107      	bne.n	8009b0c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f06f 0220 	mvn.w	r2, #32
 8009b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fabc 	bl	800a084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d101      	bne.n	8009b30 <HAL_TIM_ConfigClockSource+0x1c>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e0b6      	b.n	8009c9e <HAL_TIM_ConfigClockSource+0x18a>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6c:	d03e      	beq.n	8009bec <HAL_TIM_ConfigClockSource+0xd8>
 8009b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b72:	f200 8087 	bhi.w	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b7a:	f000 8086 	beq.w	8009c8a <HAL_TIM_ConfigClockSource+0x176>
 8009b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b82:	d87f      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009b84:	2b70      	cmp	r3, #112	; 0x70
 8009b86:	d01a      	beq.n	8009bbe <HAL_TIM_ConfigClockSource+0xaa>
 8009b88:	2b70      	cmp	r3, #112	; 0x70
 8009b8a:	d87b      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009b8c:	2b60      	cmp	r3, #96	; 0x60
 8009b8e:	d050      	beq.n	8009c32 <HAL_TIM_ConfigClockSource+0x11e>
 8009b90:	2b60      	cmp	r3, #96	; 0x60
 8009b92:	d877      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009b94:	2b50      	cmp	r3, #80	; 0x50
 8009b96:	d03c      	beq.n	8009c12 <HAL_TIM_ConfigClockSource+0xfe>
 8009b98:	2b50      	cmp	r3, #80	; 0x50
 8009b9a:	d873      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009b9c:	2b40      	cmp	r3, #64	; 0x40
 8009b9e:	d058      	beq.n	8009c52 <HAL_TIM_ConfigClockSource+0x13e>
 8009ba0:	2b40      	cmp	r3, #64	; 0x40
 8009ba2:	d86f      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009ba4:	2b30      	cmp	r3, #48	; 0x30
 8009ba6:	d064      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x15e>
 8009ba8:	2b30      	cmp	r3, #48	; 0x30
 8009baa:	d86b      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d060      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x15e>
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	d867      	bhi.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d05c      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x15e>
 8009bb8:	2b10      	cmp	r3, #16
 8009bba:	d05a      	beq.n	8009c72 <HAL_TIM_ConfigClockSource+0x15e>
 8009bbc:	e062      	b.n	8009c84 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	6899      	ldr	r1, [r3, #8]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	685a      	ldr	r2, [r3, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f000 f9b1 	bl	8009f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68ba      	ldr	r2, [r7, #8]
 8009be8:	609a      	str	r2, [r3, #8]
      break;
 8009bea:	e04f      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	6899      	ldr	r1, [r3, #8]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f000 f99a 	bl	8009f34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c0e:	609a      	str	r2, [r3, #8]
      break;
 8009c10:	e03c      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	6859      	ldr	r1, [r3, #4]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f000 f90e 	bl	8009e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2150      	movs	r1, #80	; 0x50
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f967 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 8009c30:	e02c      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6859      	ldr	r1, [r3, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f000 f92d 	bl	8009e9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2160      	movs	r1, #96	; 0x60
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 f957 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 8009c50:	e01c      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6859      	ldr	r1, [r3, #4]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	f000 f8ee 	bl	8009e40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2140      	movs	r1, #64	; 0x40
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f000 f947 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 8009c70:	e00c      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4610      	mov	r0, r2
 8009c7e:	f000 f93e 	bl	8009efe <TIM_ITRx_SetConfig>
      break;
 8009c82:	e003      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	73fb      	strb	r3, [r7, #15]
      break;
 8009c88:	e000      	b.n	8009c8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009cae:	bf00      	nop
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cc2:	bf00      	nop
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ce2:	b480      	push	{r7}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
	...

08009d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a40      	ldr	r2, [pc, #256]	; (8009e20 <TIM_Base_SetConfig+0x114>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d013      	beq.n	8009d4c <TIM_Base_SetConfig+0x40>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2a:	d00f      	beq.n	8009d4c <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a3d      	ldr	r2, [pc, #244]	; (8009e24 <TIM_Base_SetConfig+0x118>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00b      	beq.n	8009d4c <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a3c      	ldr	r2, [pc, #240]	; (8009e28 <TIM_Base_SetConfig+0x11c>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d007      	beq.n	8009d4c <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a3b      	ldr	r2, [pc, #236]	; (8009e2c <TIM_Base_SetConfig+0x120>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d003      	beq.n	8009d4c <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a3a      	ldr	r2, [pc, #232]	; (8009e30 <TIM_Base_SetConfig+0x124>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d108      	bne.n	8009d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2f      	ldr	r2, [pc, #188]	; (8009e20 <TIM_Base_SetConfig+0x114>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01f      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6c:	d01b      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a2c      	ldr	r2, [pc, #176]	; (8009e24 <TIM_Base_SetConfig+0x118>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d017      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a2b      	ldr	r2, [pc, #172]	; (8009e28 <TIM_Base_SetConfig+0x11c>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d013      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <TIM_Base_SetConfig+0x120>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00f      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a29      	ldr	r2, [pc, #164]	; (8009e30 <TIM_Base_SetConfig+0x124>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d00b      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a28      	ldr	r2, [pc, #160]	; (8009e34 <TIM_Base_SetConfig+0x128>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d007      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a27      	ldr	r2, [pc, #156]	; (8009e38 <TIM_Base_SetConfig+0x12c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d003      	beq.n	8009da6 <TIM_Base_SetConfig+0x9a>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a26      	ldr	r2, [pc, #152]	; (8009e3c <TIM_Base_SetConfig+0x130>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d108      	bne.n	8009db8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a10      	ldr	r2, [pc, #64]	; (8009e20 <TIM_Base_SetConfig+0x114>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d00f      	beq.n	8009e04 <TIM_Base_SetConfig+0xf8>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a12      	ldr	r2, [pc, #72]	; (8009e30 <TIM_Base_SetConfig+0x124>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d00b      	beq.n	8009e04 <TIM_Base_SetConfig+0xf8>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a11      	ldr	r2, [pc, #68]	; (8009e34 <TIM_Base_SetConfig+0x128>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d007      	beq.n	8009e04 <TIM_Base_SetConfig+0xf8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a10      	ldr	r2, [pc, #64]	; (8009e38 <TIM_Base_SetConfig+0x12c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_Base_SetConfig+0xf8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a0f      	ldr	r2, [pc, #60]	; (8009e3c <TIM_Base_SetConfig+0x130>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d103      	bne.n	8009e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	691a      	ldr	r2, [r3, #16]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	615a      	str	r2, [r3, #20]
}
 8009e12:	bf00      	nop
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40000400 	.word	0x40000400
 8009e28:	40000800 	.word	0x40000800
 8009e2c:	40000c00 	.word	0x40000c00
 8009e30:	40013400 	.word	0x40013400
 8009e34:	40014000 	.word	0x40014000
 8009e38:	40014400 	.word	0x40014400
 8009e3c:	40014800 	.word	0x40014800

08009e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f023 0201 	bic.w	r2, r3, #1
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	011b      	lsls	r3, r3, #4
 8009e70:	693a      	ldr	r2, [r7, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f023 030a 	bic.w	r3, r3, #10
 8009e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b087      	sub	sp, #28
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	f023 0210 	bic.w	r2, r3, #16
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	699b      	ldr	r3, [r3, #24]
 8009eba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ec8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	031b      	lsls	r3, r3, #12
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009eda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	621a      	str	r2, [r3, #32]
}
 8009ef2:	bf00      	nop
 8009ef4:	371c      	adds	r7, #28
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b085      	sub	sp, #20
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	f043 0307 	orr.w	r3, r3, #7
 8009f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	609a      	str	r2, [r3, #8]
}
 8009f28:	bf00      	nop
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	021a      	lsls	r2, r3, #8
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	697a      	ldr	r2, [r7, #20]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	609a      	str	r2, [r3, #8]
}
 8009f68:	bf00      	nop
 8009f6a:	371c      	adds	r7, #28
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e068      	b.n	800a05e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a2e      	ldr	r2, [pc, #184]	; (800a06c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d004      	beq.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a2d      	ldr	r2, [pc, #180]	; (800a070 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d108      	bne.n	8009fd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a1e      	ldr	r2, [pc, #120]	; (800a06c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d01d      	beq.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffe:	d018      	beq.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a1b      	ldr	r2, [pc, #108]	; (800a074 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d013      	beq.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a1a      	ldr	r2, [pc, #104]	; (800a078 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d00e      	beq.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a18      	ldr	r2, [pc, #96]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d009      	beq.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a13      	ldr	r2, [pc, #76]	; (800a070 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d004      	beq.n	800a032 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a14      	ldr	r2, [pc, #80]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d10c      	bne.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	4313      	orrs	r3, r2
 800a042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	40012c00 	.word	0x40012c00
 800a070:	40013400 	.word	0x40013400
 800a074:	40000400 	.word	0x40000400
 800a078:	40000800 	.word	0x40000800
 800a07c:	40000c00 	.word	0x40000c00
 800a080:	40014000 	.word	0x40014000

0800a084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e040      	b.n	800a154 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d106      	bne.n	800a0e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f83a 	bl	800a15c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2224      	movs	r2, #36	; 0x24
 800a0ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0201 	bic.w	r2, r2, #1
 800a0fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f94a 	bl	800a398 <UART_SetConfig>
 800a104:	4603      	mov	r3, r0
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e022      	b.n	800a154 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fbc8 	bl	800a8ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a12a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689a      	ldr	r2, [r3, #8]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a13a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f042 0201 	orr.w	r2, r2, #1
 800a14a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fc4f 	bl	800a9f0 <UART_CheckIdleState>
 800a152:	4603      	mov	r3, r0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	; 0x28
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	4613      	mov	r3, r2
 800a17e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a184:	2b20      	cmp	r3, #32
 800a186:	f040 8082 	bne.w	800a28e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <HAL_UART_Transmit+0x26>
 800a190:	88fb      	ldrh	r3, [r7, #6]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e07a      	b.n	800a290 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UART_Transmit+0x38>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e073      	b.n	800a290 <HAL_UART_Transmit+0x120>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2221      	movs	r2, #33	; 0x21
 800a1bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1be:	f7fc f82f 	bl	8006220 <HAL_GetTick>
 800a1c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	88fa      	ldrh	r2, [r7, #6]
 800a1c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	88fa      	ldrh	r2, [r7, #6]
 800a1d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1dc:	d108      	bne.n	800a1f0 <HAL_UART_Transmit+0x80>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d104      	bne.n	800a1f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	61bb      	str	r3, [r7, #24]
 800a1ee:	e003      	b.n	800a1f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a200:	e02d      	b.n	800a25e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2200      	movs	r2, #0
 800a20a:	2180      	movs	r1, #128	; 0x80
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 fc38 	bl	800aa82 <UART_WaitOnFlagUntilTimeout>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e039      	b.n	800a290 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10b      	bne.n	800a23a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	881a      	ldrh	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a22e:	b292      	uxth	r2, r2
 800a230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	3302      	adds	r3, #2
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	e008      	b.n	800a24c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	b292      	uxth	r2, r2
 800a244:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	3301      	adds	r3, #1
 800a24a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a252:	b29b      	uxth	r3, r3
 800a254:	3b01      	subs	r3, #1
 800a256:	b29a      	uxth	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a264:	b29b      	uxth	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1cb      	bne.n	800a202 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2200      	movs	r2, #0
 800a272:	2140      	movs	r1, #64	; 0x40
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 fc04 	bl	800aa82 <UART_WaitOnFlagUntilTimeout>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e005      	b.n	800a290 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2220      	movs	r2, #32
 800a288:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	e000      	b.n	800a290 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a28e:	2302      	movs	r3, #2
  }
}
 800a290:	4618      	mov	r0, r3
 800a292:	3720      	adds	r7, #32
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d142      	bne.n	800a334 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <HAL_UART_Receive_DMA+0x22>
 800a2b4:	88fb      	ldrh	r3, [r7, #6]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e03b      	b.n	800a336 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_UART_Receive_DMA+0x34>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e034      	b.n	800a336 <HAL_UART_Receive_DMA+0x9e>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a18      	ldr	r2, [pc, #96]	; (800a340 <HAL_UART_Receive_DMA+0xa8>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d01f      	beq.n	800a324 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d018      	beq.n	800a324 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	e853 3f00 	ldrex	r3, [r3]
 800a2fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a314:	69f9      	ldr	r1, [r7, #28]
 800a316:	6a3a      	ldr	r2, [r7, #32]
 800a318:	e841 2300 	strex	r3, r2, [r1]
 800a31c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d1e6      	bne.n	800a2f2 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	461a      	mov	r2, r3
 800a328:	68b9      	ldr	r1, [r7, #8]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 fc6e 	bl	800ac0c <UART_Start_Receive_DMA>
 800a330:	4603      	mov	r3, r0
 800a332:	e000      	b.n	800a336 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a334:	2302      	movs	r3, #2
  }
}
 800a336:	4618      	mov	r0, r3
 800a338:	3728      	adds	r7, #40	; 0x28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	40008000 	.word	0x40008000

0800a344 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a38c:	bf00      	nop
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a398:	b5b0      	push	{r4, r5, r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689a      	ldr	r2, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4bad      	ldr	r3, [pc, #692]	; (800a678 <UART_SetConfig+0x2e0>)
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6812      	ldr	r2, [r2, #0]
 800a3ca:	69f9      	ldr	r1, [r7, #28]
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4aa2      	ldr	r2, [pc, #648]	; (800a67c <UART_SetConfig+0x2e4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d004      	beq.n	800a400 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	430a      	orrs	r2, r1
 800a412:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a99      	ldr	r2, [pc, #612]	; (800a680 <UART_SetConfig+0x2e8>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d121      	bne.n	800a462 <UART_SetConfig+0xca>
 800a41e:	4b99      	ldr	r3, [pc, #612]	; (800a684 <UART_SetConfig+0x2ec>)
 800a420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a424:	f003 0303 	and.w	r3, r3, #3
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d817      	bhi.n	800a45c <UART_SetConfig+0xc4>
 800a42c:	a201      	add	r2, pc, #4	; (adr r2, 800a434 <UART_SetConfig+0x9c>)
 800a42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a432:	bf00      	nop
 800a434:	0800a445 	.word	0x0800a445
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a44b 	.word	0x0800a44b
 800a440:	0800a457 	.word	0x0800a457
 800a444:	2301      	movs	r3, #1
 800a446:	76fb      	strb	r3, [r7, #27]
 800a448:	e0e7      	b.n	800a61a <UART_SetConfig+0x282>
 800a44a:	2302      	movs	r3, #2
 800a44c:	76fb      	strb	r3, [r7, #27]
 800a44e:	e0e4      	b.n	800a61a <UART_SetConfig+0x282>
 800a450:	2304      	movs	r3, #4
 800a452:	76fb      	strb	r3, [r7, #27]
 800a454:	e0e1      	b.n	800a61a <UART_SetConfig+0x282>
 800a456:	2308      	movs	r3, #8
 800a458:	76fb      	strb	r3, [r7, #27]
 800a45a:	e0de      	b.n	800a61a <UART_SetConfig+0x282>
 800a45c:	2310      	movs	r3, #16
 800a45e:	76fb      	strb	r3, [r7, #27]
 800a460:	e0db      	b.n	800a61a <UART_SetConfig+0x282>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a88      	ldr	r2, [pc, #544]	; (800a688 <UART_SetConfig+0x2f0>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d132      	bne.n	800a4d2 <UART_SetConfig+0x13a>
 800a46c:	4b85      	ldr	r3, [pc, #532]	; (800a684 <UART_SetConfig+0x2ec>)
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a472:	f003 030c 	and.w	r3, r3, #12
 800a476:	2b0c      	cmp	r3, #12
 800a478:	d828      	bhi.n	800a4cc <UART_SetConfig+0x134>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <UART_SetConfig+0xe8>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a4b5 	.word	0x0800a4b5
 800a484:	0800a4cd 	.word	0x0800a4cd
 800a488:	0800a4cd 	.word	0x0800a4cd
 800a48c:	0800a4cd 	.word	0x0800a4cd
 800a490:	0800a4c1 	.word	0x0800a4c1
 800a494:	0800a4cd 	.word	0x0800a4cd
 800a498:	0800a4cd 	.word	0x0800a4cd
 800a49c:	0800a4cd 	.word	0x0800a4cd
 800a4a0:	0800a4bb 	.word	0x0800a4bb
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4cd 	.word	0x0800a4cd
 800a4ac:	0800a4cd 	.word	0x0800a4cd
 800a4b0:	0800a4c7 	.word	0x0800a4c7
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	76fb      	strb	r3, [r7, #27]
 800a4b8:	e0af      	b.n	800a61a <UART_SetConfig+0x282>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	76fb      	strb	r3, [r7, #27]
 800a4be:	e0ac      	b.n	800a61a <UART_SetConfig+0x282>
 800a4c0:	2304      	movs	r3, #4
 800a4c2:	76fb      	strb	r3, [r7, #27]
 800a4c4:	e0a9      	b.n	800a61a <UART_SetConfig+0x282>
 800a4c6:	2308      	movs	r3, #8
 800a4c8:	76fb      	strb	r3, [r7, #27]
 800a4ca:	e0a6      	b.n	800a61a <UART_SetConfig+0x282>
 800a4cc:	2310      	movs	r3, #16
 800a4ce:	76fb      	strb	r3, [r7, #27]
 800a4d0:	e0a3      	b.n	800a61a <UART_SetConfig+0x282>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a6d      	ldr	r2, [pc, #436]	; (800a68c <UART_SetConfig+0x2f4>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d120      	bne.n	800a51e <UART_SetConfig+0x186>
 800a4dc:	4b69      	ldr	r3, [pc, #420]	; (800a684 <UART_SetConfig+0x2ec>)
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4e6:	2b30      	cmp	r3, #48	; 0x30
 800a4e8:	d013      	beq.n	800a512 <UART_SetConfig+0x17a>
 800a4ea:	2b30      	cmp	r3, #48	; 0x30
 800a4ec:	d814      	bhi.n	800a518 <UART_SetConfig+0x180>
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d009      	beq.n	800a506 <UART_SetConfig+0x16e>
 800a4f2:	2b20      	cmp	r3, #32
 800a4f4:	d810      	bhi.n	800a518 <UART_SetConfig+0x180>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d002      	beq.n	800a500 <UART_SetConfig+0x168>
 800a4fa:	2b10      	cmp	r3, #16
 800a4fc:	d006      	beq.n	800a50c <UART_SetConfig+0x174>
 800a4fe:	e00b      	b.n	800a518 <UART_SetConfig+0x180>
 800a500:	2300      	movs	r3, #0
 800a502:	76fb      	strb	r3, [r7, #27]
 800a504:	e089      	b.n	800a61a <UART_SetConfig+0x282>
 800a506:	2302      	movs	r3, #2
 800a508:	76fb      	strb	r3, [r7, #27]
 800a50a:	e086      	b.n	800a61a <UART_SetConfig+0x282>
 800a50c:	2304      	movs	r3, #4
 800a50e:	76fb      	strb	r3, [r7, #27]
 800a510:	e083      	b.n	800a61a <UART_SetConfig+0x282>
 800a512:	2308      	movs	r3, #8
 800a514:	76fb      	strb	r3, [r7, #27]
 800a516:	e080      	b.n	800a61a <UART_SetConfig+0x282>
 800a518:	2310      	movs	r3, #16
 800a51a:	76fb      	strb	r3, [r7, #27]
 800a51c:	e07d      	b.n	800a61a <UART_SetConfig+0x282>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a5b      	ldr	r2, [pc, #364]	; (800a690 <UART_SetConfig+0x2f8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d120      	bne.n	800a56a <UART_SetConfig+0x1d2>
 800a528:	4b56      	ldr	r3, [pc, #344]	; (800a684 <UART_SetConfig+0x2ec>)
 800a52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a532:	2bc0      	cmp	r3, #192	; 0xc0
 800a534:	d013      	beq.n	800a55e <UART_SetConfig+0x1c6>
 800a536:	2bc0      	cmp	r3, #192	; 0xc0
 800a538:	d814      	bhi.n	800a564 <UART_SetConfig+0x1cc>
 800a53a:	2b80      	cmp	r3, #128	; 0x80
 800a53c:	d009      	beq.n	800a552 <UART_SetConfig+0x1ba>
 800a53e:	2b80      	cmp	r3, #128	; 0x80
 800a540:	d810      	bhi.n	800a564 <UART_SetConfig+0x1cc>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <UART_SetConfig+0x1b4>
 800a546:	2b40      	cmp	r3, #64	; 0x40
 800a548:	d006      	beq.n	800a558 <UART_SetConfig+0x1c0>
 800a54a:	e00b      	b.n	800a564 <UART_SetConfig+0x1cc>
 800a54c:	2300      	movs	r3, #0
 800a54e:	76fb      	strb	r3, [r7, #27]
 800a550:	e063      	b.n	800a61a <UART_SetConfig+0x282>
 800a552:	2302      	movs	r3, #2
 800a554:	76fb      	strb	r3, [r7, #27]
 800a556:	e060      	b.n	800a61a <UART_SetConfig+0x282>
 800a558:	2304      	movs	r3, #4
 800a55a:	76fb      	strb	r3, [r7, #27]
 800a55c:	e05d      	b.n	800a61a <UART_SetConfig+0x282>
 800a55e:	2308      	movs	r3, #8
 800a560:	76fb      	strb	r3, [r7, #27]
 800a562:	e05a      	b.n	800a61a <UART_SetConfig+0x282>
 800a564:	2310      	movs	r3, #16
 800a566:	76fb      	strb	r3, [r7, #27]
 800a568:	e057      	b.n	800a61a <UART_SetConfig+0x282>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a49      	ldr	r2, [pc, #292]	; (800a694 <UART_SetConfig+0x2fc>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d125      	bne.n	800a5c0 <UART_SetConfig+0x228>
 800a574:	4b43      	ldr	r3, [pc, #268]	; (800a684 <UART_SetConfig+0x2ec>)
 800a576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a57e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a582:	d017      	beq.n	800a5b4 <UART_SetConfig+0x21c>
 800a584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a588:	d817      	bhi.n	800a5ba <UART_SetConfig+0x222>
 800a58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58e:	d00b      	beq.n	800a5a8 <UART_SetConfig+0x210>
 800a590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a594:	d811      	bhi.n	800a5ba <UART_SetConfig+0x222>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <UART_SetConfig+0x20a>
 800a59a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a59e:	d006      	beq.n	800a5ae <UART_SetConfig+0x216>
 800a5a0:	e00b      	b.n	800a5ba <UART_SetConfig+0x222>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	76fb      	strb	r3, [r7, #27]
 800a5a6:	e038      	b.n	800a61a <UART_SetConfig+0x282>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	76fb      	strb	r3, [r7, #27]
 800a5ac:	e035      	b.n	800a61a <UART_SetConfig+0x282>
 800a5ae:	2304      	movs	r3, #4
 800a5b0:	76fb      	strb	r3, [r7, #27]
 800a5b2:	e032      	b.n	800a61a <UART_SetConfig+0x282>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	76fb      	strb	r3, [r7, #27]
 800a5b8:	e02f      	b.n	800a61a <UART_SetConfig+0x282>
 800a5ba:	2310      	movs	r3, #16
 800a5bc:	76fb      	strb	r3, [r7, #27]
 800a5be:	e02c      	b.n	800a61a <UART_SetConfig+0x282>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a2d      	ldr	r2, [pc, #180]	; (800a67c <UART_SetConfig+0x2e4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d125      	bne.n	800a616 <UART_SetConfig+0x27e>
 800a5ca:	4b2e      	ldr	r3, [pc, #184]	; (800a684 <UART_SetConfig+0x2ec>)
 800a5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5d8:	d017      	beq.n	800a60a <UART_SetConfig+0x272>
 800a5da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5de:	d817      	bhi.n	800a610 <UART_SetConfig+0x278>
 800a5e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e4:	d00b      	beq.n	800a5fe <UART_SetConfig+0x266>
 800a5e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5ea:	d811      	bhi.n	800a610 <UART_SetConfig+0x278>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d003      	beq.n	800a5f8 <UART_SetConfig+0x260>
 800a5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f4:	d006      	beq.n	800a604 <UART_SetConfig+0x26c>
 800a5f6:	e00b      	b.n	800a610 <UART_SetConfig+0x278>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	76fb      	strb	r3, [r7, #27]
 800a5fc:	e00d      	b.n	800a61a <UART_SetConfig+0x282>
 800a5fe:	2302      	movs	r3, #2
 800a600:	76fb      	strb	r3, [r7, #27]
 800a602:	e00a      	b.n	800a61a <UART_SetConfig+0x282>
 800a604:	2304      	movs	r3, #4
 800a606:	76fb      	strb	r3, [r7, #27]
 800a608:	e007      	b.n	800a61a <UART_SetConfig+0x282>
 800a60a:	2308      	movs	r3, #8
 800a60c:	76fb      	strb	r3, [r7, #27]
 800a60e:	e004      	b.n	800a61a <UART_SetConfig+0x282>
 800a610:	2310      	movs	r3, #16
 800a612:	76fb      	strb	r3, [r7, #27]
 800a614:	e001      	b.n	800a61a <UART_SetConfig+0x282>
 800a616:	2310      	movs	r3, #16
 800a618:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a17      	ldr	r2, [pc, #92]	; (800a67c <UART_SetConfig+0x2e4>)
 800a620:	4293      	cmp	r3, r2
 800a622:	f040 8087 	bne.w	800a734 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a626:	7efb      	ldrb	r3, [r7, #27]
 800a628:	2b08      	cmp	r3, #8
 800a62a:	d837      	bhi.n	800a69c <UART_SetConfig+0x304>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <UART_SetConfig+0x29c>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a661 	.word	0x0800a661
 800a640:	0800a69d 	.word	0x0800a69d
 800a644:	0800a667 	.word	0x0800a667
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a69d 	.word	0x0800a69d
 800a650:	0800a69d 	.word	0x0800a69d
 800a654:	0800a66f 	.word	0x0800a66f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a658:	f7fe f8b8 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 800a65c:	6178      	str	r0, [r7, #20]
        break;
 800a65e:	e022      	b.n	800a6a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a660:	4b0d      	ldr	r3, [pc, #52]	; (800a698 <UART_SetConfig+0x300>)
 800a662:	617b      	str	r3, [r7, #20]
        break;
 800a664:	e01f      	b.n	800a6a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a666:	f7fe f819 	bl	800869c <HAL_RCC_GetSysClockFreq>
 800a66a:	6178      	str	r0, [r7, #20]
        break;
 800a66c:	e01b      	b.n	800a6a6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a66e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a672:	617b      	str	r3, [r7, #20]
        break;
 800a674:	e017      	b.n	800a6a6 <UART_SetConfig+0x30e>
 800a676:	bf00      	nop
 800a678:	efff69f3 	.word	0xefff69f3
 800a67c:	40008000 	.word	0x40008000
 800a680:	40013800 	.word	0x40013800
 800a684:	40021000 	.word	0x40021000
 800a688:	40004400 	.word	0x40004400
 800a68c:	40004800 	.word	0x40004800
 800a690:	40004c00 	.word	0x40004c00
 800a694:	40005000 	.word	0x40005000
 800a698:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	76bb      	strb	r3, [r7, #26]
        break;
 800a6a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 80f1 	beq.w	800a890 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	005b      	lsls	r3, r3, #1
 800a6b6:	4413      	add	r3, r2
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d305      	bcc.n	800a6ca <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d902      	bls.n	800a6d0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	76bb      	strb	r3, [r7, #26]
 800a6ce:	e0df      	b.n	800a890 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f04f 0100 	mov.w	r1, #0
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	020b      	lsls	r3, r1, #8
 800a6e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a6e6:	0202      	lsls	r2, r0, #8
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	6849      	ldr	r1, [r1, #4]
 800a6ec:	0849      	lsrs	r1, r1, #1
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	f04f 0100 	mov.w	r1, #0
 800a6f4:	1814      	adds	r4, r2, r0
 800a6f6:	eb43 0501 	adc.w	r5, r3, r1
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f04f 0300 	mov.w	r3, #0
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f6 fa9e 	bl	8000c48 <__aeabi_uldivmod>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4613      	mov	r3, r2
 800a712:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a71a:	d308      	bcc.n	800a72e <UART_SetConfig+0x396>
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a722:	d204      	bcs.n	800a72e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	60da      	str	r2, [r3, #12]
 800a72c:	e0b0      	b.n	800a890 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	76bb      	strb	r3, [r7, #26]
 800a732:	e0ad      	b.n	800a890 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a73c:	d15b      	bne.n	800a7f6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a73e:	7efb      	ldrb	r3, [r7, #27]
 800a740:	2b08      	cmp	r3, #8
 800a742:	d828      	bhi.n	800a796 <UART_SetConfig+0x3fe>
 800a744:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <UART_SetConfig+0x3b4>)
 800a746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74a:	bf00      	nop
 800a74c:	0800a771 	.word	0x0800a771
 800a750:	0800a779 	.word	0x0800a779
 800a754:	0800a781 	.word	0x0800a781
 800a758:	0800a797 	.word	0x0800a797
 800a75c:	0800a787 	.word	0x0800a787
 800a760:	0800a797 	.word	0x0800a797
 800a764:	0800a797 	.word	0x0800a797
 800a768:	0800a797 	.word	0x0800a797
 800a76c:	0800a78f 	.word	0x0800a78f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a770:	f7fe f82c 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 800a774:	6178      	str	r0, [r7, #20]
        break;
 800a776:	e013      	b.n	800a7a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a778:	f7fe f83e 	bl	80087f8 <HAL_RCC_GetPCLK2Freq>
 800a77c:	6178      	str	r0, [r7, #20]
        break;
 800a77e:	e00f      	b.n	800a7a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a780:	4b49      	ldr	r3, [pc, #292]	; (800a8a8 <UART_SetConfig+0x510>)
 800a782:	617b      	str	r3, [r7, #20]
        break;
 800a784:	e00c      	b.n	800a7a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a786:	f7fd ff89 	bl	800869c <HAL_RCC_GetSysClockFreq>
 800a78a:	6178      	str	r0, [r7, #20]
        break;
 800a78c:	e008      	b.n	800a7a0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a78e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a792:	617b      	str	r3, [r7, #20]
        break;
 800a794:	e004      	b.n	800a7a0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	76bb      	strb	r3, [r7, #26]
        break;
 800a79e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d074      	beq.n	800a890 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	005a      	lsls	r2, r3, #1
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	085b      	lsrs	r3, r3, #1
 800a7b0:	441a      	add	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	2b0f      	cmp	r3, #15
 800a7c0:	d916      	bls.n	800a7f0 <UART_SetConfig+0x458>
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c8:	d212      	bcs.n	800a7f0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f023 030f 	bic.w	r3, r3, #15
 800a7d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	085b      	lsrs	r3, r3, #1
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	89fb      	ldrh	r3, [r7, #14]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	89fa      	ldrh	r2, [r7, #14]
 800a7ec:	60da      	str	r2, [r3, #12]
 800a7ee:	e04f      	b.n	800a890 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	76bb      	strb	r3, [r7, #26]
 800a7f4:	e04c      	b.n	800a890 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7f6:	7efb      	ldrb	r3, [r7, #27]
 800a7f8:	2b08      	cmp	r3, #8
 800a7fa:	d828      	bhi.n	800a84e <UART_SetConfig+0x4b6>
 800a7fc:	a201      	add	r2, pc, #4	; (adr r2, 800a804 <UART_SetConfig+0x46c>)
 800a7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a802:	bf00      	nop
 800a804:	0800a829 	.word	0x0800a829
 800a808:	0800a831 	.word	0x0800a831
 800a80c:	0800a839 	.word	0x0800a839
 800a810:	0800a84f 	.word	0x0800a84f
 800a814:	0800a83f 	.word	0x0800a83f
 800a818:	0800a84f 	.word	0x0800a84f
 800a81c:	0800a84f 	.word	0x0800a84f
 800a820:	0800a84f 	.word	0x0800a84f
 800a824:	0800a847 	.word	0x0800a847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a828:	f7fd ffd0 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 800a82c:	6178      	str	r0, [r7, #20]
        break;
 800a82e:	e013      	b.n	800a858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a830:	f7fd ffe2 	bl	80087f8 <HAL_RCC_GetPCLK2Freq>
 800a834:	6178      	str	r0, [r7, #20]
        break;
 800a836:	e00f      	b.n	800a858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a838:	4b1b      	ldr	r3, [pc, #108]	; (800a8a8 <UART_SetConfig+0x510>)
 800a83a:	617b      	str	r3, [r7, #20]
        break;
 800a83c:	e00c      	b.n	800a858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a83e:	f7fd ff2d 	bl	800869c <HAL_RCC_GetSysClockFreq>
 800a842:	6178      	str	r0, [r7, #20]
        break;
 800a844:	e008      	b.n	800a858 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a84a:	617b      	str	r3, [r7, #20]
        break;
 800a84c:	e004      	b.n	800a858 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a84e:	2300      	movs	r3, #0
 800a850:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	76bb      	strb	r3, [r7, #26]
        break;
 800a856:	bf00      	nop
    }

    if (pclk != 0U)
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d018      	beq.n	800a890 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	085a      	lsrs	r2, r3, #1
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	441a      	add	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a870:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b0f      	cmp	r3, #15
 800a876:	d909      	bls.n	800a88c <UART_SetConfig+0x4f4>
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a87e:	d205      	bcs.n	800a88c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	b29a      	uxth	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60da      	str	r2, [r3, #12]
 800a88a:	e001      	b.n	800a890 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a89c:	7ebb      	ldrb	r3, [r7, #26]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	00f42400 	.word	0x00f42400

0800a8ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00a      	beq.n	800a91a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	f003 0308 	and.w	r3, r3, #8
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00a      	beq.n	800a93c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00a      	beq.n	800a95e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01a      	beq.n	800a9c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9aa:	d10a      	bne.n	800a9c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa00:	f7fb fc0e 	bl	8006220 <HAL_GetTick>
 800aa04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0308 	and.w	r3, r3, #8
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d10e      	bne.n	800aa32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f82d 	bl	800aa82 <UART_WaitOnFlagUntilTimeout>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e023      	b.n	800aa7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d10e      	bne.n	800aa5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f817 	bl	800aa82 <UART_WaitOnFlagUntilTimeout>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e00d      	b.n	800aa7a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2220      	movs	r2, #32
 800aa68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b09c      	sub	sp, #112	; 0x70
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	603b      	str	r3, [r7, #0]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa92:	e0a5      	b.n	800abe0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	f000 80a1 	beq.w	800abe0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9e:	f7fb fbbf 	bl	8006220 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x32>
 800aaae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d13e      	bne.n	800ab32 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aabc:	e853 3f00 	ldrex	r3, [r3]
 800aac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aac8:	667b      	str	r3, [r7, #100]	; 0x64
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aad4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1e6      	bne.n	800aab4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3308      	adds	r3, #8
 800aaec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf0:	e853 3f00 	ldrex	r3, [r3]
 800aaf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	f023 0301 	bic.w	r3, r3, #1
 800aafc:	663b      	str	r3, [r7, #96]	; 0x60
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3308      	adds	r3, #8
 800ab04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab06:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab0e:	e841 2300 	strex	r3, r2, [r1]
 800ab12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1e5      	bne.n	800aae6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2220      	movs	r2, #32
 800ab24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e067      	b.n	800ac02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d04f      	beq.n	800abe0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab4e:	d147      	bne.n	800abe0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab58:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	e853 3f00 	ldrex	r3, [r3]
 800ab66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	461a      	mov	r2, r3
 800ab76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab78:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab80:	e841 2300 	strex	r3, r2, [r1]
 800ab84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e6      	bne.n	800ab5a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3308      	adds	r3, #8
 800ab92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	e853 3f00 	ldrex	r3, [r3]
 800ab9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f023 0301 	bic.w	r3, r3, #1
 800aba2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	3308      	adds	r3, #8
 800abaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abac:	623a      	str	r2, [r7, #32]
 800abae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb0:	69f9      	ldr	r1, [r7, #28]
 800abb2:	6a3a      	ldr	r2, [r7, #32]
 800abb4:	e841 2300 	strex	r3, r2, [r1]
 800abb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d1e5      	bne.n	800ab8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2220      	movs	r2, #32
 800abc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2220      	movs	r2, #32
 800abca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2220      	movs	r2, #32
 800abd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e010      	b.n	800ac02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	69da      	ldr	r2, [r3, #28]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	4013      	ands	r3, r2
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	429a      	cmp	r2, r3
 800abee:	bf0c      	ite	eq
 800abf0:	2301      	moveq	r3, #1
 800abf2:	2300      	movne	r3, #0
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	461a      	mov	r2, r3
 800abf8:	79fb      	ldrb	r3, [r7, #7]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	f43f af4a 	beq.w	800aa94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3770      	adds	r7, #112	; 0x70
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
	...

0800ac0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b096      	sub	sp, #88	; 0x58
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	4613      	mov	r3, r2
 800ac18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	88fa      	ldrh	r2, [r7, #6]
 800ac24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2222      	movs	r2, #34	; 0x22
 800ac34:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d02b      	beq.n	800ac96 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac42:	4a42      	ldr	r2, [pc, #264]	; (800ad4c <UART_Start_Receive_DMA+0x140>)
 800ac44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac4a:	4a41      	ldr	r2, [pc, #260]	; (800ad50 <UART_Start_Receive_DMA+0x144>)
 800ac4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac52:	4a40      	ldr	r2, [pc, #256]	; (800ad54 <UART_Start_Receive_DMA+0x148>)
 800ac54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3324      	adds	r3, #36	; 0x24
 800ac68:	4619      	mov	r1, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6e:	461a      	mov	r2, r3
 800ac70:	88fb      	ldrh	r3, [r7, #6]
 800ac72:	f7fb fd95 	bl	80067a0 <HAL_DMA_Start_IT>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00c      	beq.n	800ac96 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2210      	movs	r2, #16
 800ac80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2220      	movs	r2, #32
 800ac90:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e055      	b.n	800ad42 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d018      	beq.n	800acd8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acae:	e853 3f00 	ldrex	r3, [r3]
 800acb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acba:	657b      	str	r3, [r7, #84]	; 0x54
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	461a      	mov	r2, r3
 800acc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800acc6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800acca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800accc:	e841 2300 	strex	r3, r2, [r1]
 800acd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800acd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1e6      	bne.n	800aca6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	653b      	str	r3, [r7, #80]	; 0x50
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3308      	adds	r3, #8
 800acf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800acf8:	637a      	str	r2, [r7, #52]	; 0x34
 800acfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e5      	bne.n	800acd8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	3308      	adds	r3, #8
 800ad12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	e853 3f00 	ldrex	r3, [r3]
 800ad1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	3308      	adds	r3, #8
 800ad2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad2c:	623a      	str	r2, [r7, #32]
 800ad2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	69f9      	ldr	r1, [r7, #28]
 800ad32:	6a3a      	ldr	r2, [r7, #32]
 800ad34:	e841 2300 	strex	r3, r2, [r1]
 800ad38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1e5      	bne.n	800ad0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3758      	adds	r7, #88	; 0x58
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	0800ae6b 	.word	0x0800ae6b
 800ad50:	0800af8f 	.word	0x0800af8f
 800ad54:	0800afc7 	.word	0x0800afc7

0800ad58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b089      	sub	sp, #36	; 0x24
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad74:	61fb      	str	r3, [r7, #28]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	61bb      	str	r3, [r7, #24]
 800ad80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	6979      	ldr	r1, [r7, #20]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e6      	bne.n	800ad60 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2220      	movs	r2, #32
 800ad96:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ad98:	bf00      	nop
 800ad9a:	3724      	adds	r7, #36	; 0x24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b095      	sub	sp, #84	; 0x54
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb4:	e853 3f00 	ldrex	r3, [r3]
 800adb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adca:	643b      	str	r3, [r7, #64]	; 0x40
 800adcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800add0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800add2:	e841 2300 	strex	r3, r2, [r1]
 800add6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e6      	bne.n	800adac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3308      	adds	r3, #8
 800ade4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	61fb      	str	r3, [r7, #28]
   return(result);
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	f023 0301 	bic.w	r3, r3, #1
 800adf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3308      	adds	r3, #8
 800adfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e5      	bne.n	800adde <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d118      	bne.n	800ae4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	e853 3f00 	ldrex	r3, [r3]
 800ae26:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	f023 0310 	bic.w	r3, r3, #16
 800ae2e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	461a      	mov	r2, r3
 800ae36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae38:	61bb      	str	r3, [r7, #24]
 800ae3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6979      	ldr	r1, [r7, #20]
 800ae3e:	69ba      	ldr	r2, [r7, #24]
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	613b      	str	r3, [r7, #16]
   return(result);
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e6      	bne.n	800ae1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ae5e:	bf00      	nop
 800ae60:	3754      	adds	r7, #84	; 0x54
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b09c      	sub	sp, #112	; 0x70
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae76:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0320 	and.w	r3, r3, #32
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d170      	bne.n	800af68 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800ae86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae96:	e853 3f00 	ldrex	r3, [r3]
 800ae9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ae9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeac:	65bb      	str	r3, [r7, #88]	; 0x58
 800aeae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aeb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aeb4:	e841 2300 	strex	r3, r2, [r1]
 800aeb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aeba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1e6      	bne.n	800ae8e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3308      	adds	r3, #8
 800aec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aed2:	f023 0301 	bic.w	r3, r3, #1
 800aed6:	667b      	str	r3, [r7, #100]	; 0x64
 800aed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3308      	adds	r3, #8
 800aede:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aee0:	647a      	str	r2, [r7, #68]	; 0x44
 800aee2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aee8:	e841 2300 	strex	r3, r2, [r1]
 800aeec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aeee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1e5      	bne.n	800aec0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3308      	adds	r3, #8
 800aefa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	e853 3f00 	ldrex	r3, [r3]
 800af02:	623b      	str	r3, [r7, #32]
   return(result);
 800af04:	6a3b      	ldr	r3, [r7, #32]
 800af06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af0a:	663b      	str	r3, [r7, #96]	; 0x60
 800af0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3308      	adds	r3, #8
 800af12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af14:	633a      	str	r2, [r7, #48]	; 0x30
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af1c:	e841 2300 	strex	r3, r2, [r1]
 800af20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1e5      	bne.n	800aef4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2a:	2220      	movs	r2, #32
 800af2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af32:	2b01      	cmp	r3, #1
 800af34:	d118      	bne.n	800af68 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	e853 3f00 	ldrex	r3, [r3]
 800af42:	60fb      	str	r3, [r7, #12]
   return(result);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0310 	bic.w	r3, r3, #16
 800af4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	461a      	mov	r2, r3
 800af52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af54:	61fb      	str	r3, [r7, #28]
 800af56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af58:	69b9      	ldr	r1, [r7, #24]
 800af5a:	69fa      	ldr	r2, [r7, #28]
 800af5c:	e841 2300 	strex	r3, r2, [r1]
 800af60:	617b      	str	r3, [r7, #20]
   return(result);
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1e6      	bne.n	800af36 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d107      	bne.n	800af80 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800af70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af76:	4619      	mov	r1, r3
 800af78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af7a:	f7ff fa01 	bl	800a380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af7e:	e002      	b.n	800af86 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800af80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800af82:	f7ff f9df 	bl	800a344 <HAL_UART_RxCpltCallback>
}
 800af86:	bf00      	nop
 800af88:	3770      	adds	r7, #112	; 0x70
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d109      	bne.n	800afb8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800afaa:	085b      	lsrs	r3, r3, #1
 800afac:	b29b      	uxth	r3, r3
 800afae:	4619      	mov	r1, r3
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff f9e5 	bl	800a380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afb6:	e002      	b.n	800afbe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff f9cd 	bl	800a358 <HAL_UART_RxHalfCpltCallback>
}
 800afbe:	bf00      	nop
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b086      	sub	sp, #24
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afd8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afde:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afea:	2b80      	cmp	r3, #128	; 0x80
 800afec:	d109      	bne.n	800b002 <UART_DMAError+0x3c>
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2b21      	cmp	r3, #33	; 0x21
 800aff2:	d106      	bne.n	800b002 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800affc:	6978      	ldr	r0, [r7, #20]
 800affe:	f7ff feab 	bl	800ad58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b00c:	2b40      	cmp	r3, #64	; 0x40
 800b00e:	d109      	bne.n	800b024 <UART_DMAError+0x5e>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2b22      	cmp	r3, #34	; 0x22
 800b014:	d106      	bne.n	800b024 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b01e:	6978      	ldr	r0, [r7, #20]
 800b020:	f7ff fec0 	bl	800ada4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b02a:	f043 0210 	orr.w	r2, r3, #16
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b034:	6978      	ldr	r0, [r7, #20]
 800b036:	f7ff f999 	bl	800a36c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b03a:	bf00      	nop
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <DataHist_parameters>:
 800b044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b048:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b04a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b04c:	7020      	strb	r0, [r4, #0]
 800b04e:	6808      	ldr	r0, [r1, #0]
 800b050:	6060      	str	r0, [r4, #4]
 800b052:	6848      	ldr	r0, [r1, #4]
 800b054:	60a0      	str	r0, [r4, #8]
 800b056:	6888      	ldr	r0, [r1, #8]
 800b058:	60e0      	str	r0, [r4, #12]
 800b05a:	68c8      	ldr	r0, [r1, #12]
 800b05c:	6120      	str	r0, [r4, #16]
 800b05e:	6908      	ldr	r0, [r1, #16]
 800b060:	6160      	str	r0, [r4, #20]
 800b062:	6948      	ldr	r0, [r1, #20]
 800b064:	61a0      	str	r0, [r4, #24]
 800b066:	6988      	ldr	r0, [r1, #24]
 800b068:	61e0      	str	r0, [r4, #28]
 800b06a:	69c8      	ldr	r0, [r1, #28]
 800b06c:	6220      	str	r0, [r4, #32]
 800b06e:	6a09      	ldr	r1, [r1, #32]
 800b070:	6261      	str	r1, [r4, #36]	; 0x24
 800b072:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b076:	8811      	ldrh	r1, [r2, #0]
 800b078:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b07c:	8521      	strh	r1, [r4, #40]	; 0x28
 800b07e:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b082:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b086:	f04f 0e00 	mov.w	lr, #0
 800b08a:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b08e:	4641      	mov	r1, r8
 800b090:	f852 0b04 	ldr.w	r0, [r2], #4
 800b094:	f841 0b04 	str.w	r0, [r1], #4
 800b098:	4562      	cmp	r2, ip
 800b09a:	d1f9      	bne.n	800b090 <DataHist_parameters+0x4c>
 800b09c:	f10e 0e1e 	add.w	lr, lr, #30
 800b0a0:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b0a4:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b0a8:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b0ac:	d1ed      	bne.n	800b08a <DataHist_parameters+0x46>
 800b0ae:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b0b2:	881a      	ldrh	r2, [r3, #0]
 800b0b4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b0b8:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b0bc:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b0c0:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b0c4:	f04f 0c00 	mov.w	ip, #0
 800b0c8:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b0cc:	4672      	mov	r2, lr
 800b0ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800b0d2:	f842 1b04 	str.w	r1, [r2], #4
 800b0d6:	4283      	cmp	r3, r0
 800b0d8:	d1f9      	bne.n	800b0ce <DataHist_parameters+0x8a>
 800b0da:	f10c 0c1e 	add.w	ip, ip, #30
 800b0de:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b0e2:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b0e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b0ea:	d1ed      	bne.n	800b0c8 <DataHist_parameters+0x84>
 800b0ec:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b0f0:	883b      	ldrh	r3, [r7, #0]
 800b0f2:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b0f6:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b0fa:	3780      	adds	r7, #128	; 0x80
 800b0fc:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b100:	2000      	movs	r0, #0
 800b102:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b106:	4662      	mov	r2, ip
 800b108:	f853 1b04 	ldr.w	r1, [r3], #4
 800b10c:	f842 1b04 	str.w	r1, [r2], #4
 800b110:	42bb      	cmp	r3, r7
 800b112:	d1f9      	bne.n	800b108 <DataHist_parameters+0xc4>
 800b114:	301e      	adds	r0, #30
 800b116:	285a      	cmp	r0, #90	; 0x5a
 800b118:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b11c:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b120:	d1ef      	bne.n	800b102 <DataHist_parameters+0xbe>
 800b122:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b126:	8833      	ldrh	r3, [r6, #0]
 800b128:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b12c:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b130:	3680      	adds	r6, #128	; 0x80
 800b132:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b136:	2000      	movs	r0, #0
 800b138:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b13c:	463a      	mov	r2, r7
 800b13e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b142:	f842 1b04 	str.w	r1, [r2], #4
 800b146:	429e      	cmp	r6, r3
 800b148:	d1f9      	bne.n	800b13e <DataHist_parameters+0xfa>
 800b14a:	301e      	adds	r0, #30
 800b14c:	285a      	cmp	r0, #90	; 0x5a
 800b14e:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b152:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b156:	d1ef      	bne.n	800b138 <DataHist_parameters+0xf4>
 800b158:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b15c:	69aa      	ldr	r2, [r5, #24]
 800b15e:	f8c3 c004 	str.w	ip, [r3, #4]
 800b162:	782b      	ldrb	r3, [r5, #0]
 800b164:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b168:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b16c:	619a      	str	r2, [r3, #24]
 800b16e:	686a      	ldr	r2, [r5, #4]
 800b170:	605a      	str	r2, [r3, #4]
 800b172:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b176:	68a9      	ldr	r1, [r5, #8]
 800b178:	6011      	str	r1, [r2, #0]
 800b17a:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b17e:	68e9      	ldr	r1, [r5, #12]
 800b180:	6011      	str	r1, [r2, #0]
 800b182:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b186:	6929      	ldr	r1, [r5, #16]
 800b188:	6011      	str	r1, [r2, #0]
 800b18a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b18e:	6969      	ldr	r1, [r5, #20]
 800b190:	6011      	str	r1, [r2, #0]
 800b192:	69ea      	ldr	r2, [r5, #28]
 800b194:	61da      	str	r2, [r3, #28]
 800b196:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b19a:	6a2a      	ldr	r2, [r5, #32]
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b1a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b1aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b1b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ba:	bf00      	nop

0800b1bc <rotVect>:
 800b1bc:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b1c0:	ed92 5a01 	vldr	s10, [r2, #4]
 800b1c4:	edd2 5a00 	vldr	s11, [r2]
 800b1c8:	ed92 6a02 	vldr	s12, [r2, #8]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	f991 3000 	ldrsb.w	r3, [r1]
 800b1d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d8:	ee06 3a90 	vmov	s13, r3
 800b1dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b1e0:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b1e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b1e8:	ee07 3a10 	vmov	s14, r3
 800b1ec:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b1f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b1f4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b1f8:	edc0 7a00 	vstr	s15, [r0]
 800b1fc:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b200:	ed92 5a01 	vldr	s10, [r2, #4]
 800b204:	edd2 5a00 	vldr	s11, [r2]
 800b208:	ed92 6a02 	vldr	s12, [r2, #8]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b218:	ee06 3a90 	vmov	s13, r3
 800b21c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b220:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b224:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b228:	ee07 3a10 	vmov	s14, r3
 800b22c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b234:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b238:	edc0 7a01 	vstr	s15, [r0, #4]
 800b23c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b240:	ed92 5a01 	vldr	s10, [r2, #4]
 800b244:	edd2 5a00 	vldr	s11, [r2]
 800b248:	ed92 6a02 	vldr	s12, [r2, #8]
 800b24c:	ee07 3a90 	vmov	s15, r3
 800b250:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b258:	ee06 3a90 	vmov	s13, r3
 800b25c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b260:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b264:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b268:	ee07 3a10 	vmov	s14, r3
 800b26c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b270:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b274:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b278:	edc0 7a02 	vstr	s15, [r0, #8]
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop

0800b280 <findAxis>:
 800b280:	f990 3000 	ldrsb.w	r3, [r0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d027      	beq.n	800b2d8 <findAxis+0x58>
 800b288:	3301      	adds	r3, #1
 800b28a:	d00e      	beq.n	800b2aa <findAxis+0x2a>
 800b28c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d053      	beq.n	800b33c <findAxis+0xbc>
 800b294:	3301      	adds	r3, #1
 800b296:	d048      	beq.n	800b32a <findAxis+0xaa>
 800b298:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d053      	beq.n	800b348 <findAxis+0xc8>
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	d104      	bne.n	800b2ae <findAxis+0x2e>
 800b2a4:	2364      	movs	r3, #100	; 0x64
 800b2a6:	700b      	strb	r3, [r1, #0]
 800b2a8:	e001      	b.n	800b2ae <findAxis+0x2e>
 800b2aa:	2377      	movs	r3, #119	; 0x77
 800b2ac:	700b      	strb	r3, [r1, #0]
 800b2ae:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d016      	beq.n	800b2e4 <findAxis+0x64>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	d02e      	beq.n	800b318 <findAxis+0x98>
 800b2ba:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d039      	beq.n	800b336 <findAxis+0xb6>
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	d034      	beq.n	800b330 <findAxis+0xb0>
 800b2c6:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d03f      	beq.n	800b34e <findAxis+0xce>
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	d10a      	bne.n	800b2e8 <findAxis+0x68>
 800b2d2:	2364      	movs	r3, #100	; 0x64
 800b2d4:	704b      	strb	r3, [r1, #1]
 800b2d6:	e007      	b.n	800b2e8 <findAxis+0x68>
 800b2d8:	2365      	movs	r3, #101	; 0x65
 800b2da:	700b      	strb	r3, [r1, #0]
 800b2dc:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	d1e8      	bne.n	800b2b6 <findAxis+0x36>
 800b2e4:	2365      	movs	r3, #101	; 0x65
 800b2e6:	704b      	strb	r3, [r1, #1]
 800b2e8:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d010      	beq.n	800b312 <findAxis+0x92>
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	d014      	beq.n	800b31e <findAxis+0x9e>
 800b2f4:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d022      	beq.n	800b342 <findAxis+0xc2>
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	d011      	beq.n	800b324 <findAxis+0xa4>
 800b300:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b304:	2b01      	cmp	r3, #1
 800b306:	d025      	beq.n	800b354 <findAxis+0xd4>
 800b308:	3301      	adds	r3, #1
 800b30a:	bf04      	itt	eq
 800b30c:	2364      	moveq	r3, #100	; 0x64
 800b30e:	708b      	strbeq	r3, [r1, #2]
 800b310:	4770      	bx	lr
 800b312:	2365      	movs	r3, #101	; 0x65
 800b314:	708b      	strb	r3, [r1, #2]
 800b316:	4770      	bx	lr
 800b318:	2377      	movs	r3, #119	; 0x77
 800b31a:	704b      	strb	r3, [r1, #1]
 800b31c:	e7e4      	b.n	800b2e8 <findAxis+0x68>
 800b31e:	2377      	movs	r3, #119	; 0x77
 800b320:	708b      	strb	r3, [r1, #2]
 800b322:	4770      	bx	lr
 800b324:	2373      	movs	r3, #115	; 0x73
 800b326:	708b      	strb	r3, [r1, #2]
 800b328:	4770      	bx	lr
 800b32a:	2373      	movs	r3, #115	; 0x73
 800b32c:	700b      	strb	r3, [r1, #0]
 800b32e:	e7be      	b.n	800b2ae <findAxis+0x2e>
 800b330:	2373      	movs	r3, #115	; 0x73
 800b332:	704b      	strb	r3, [r1, #1]
 800b334:	e7d8      	b.n	800b2e8 <findAxis+0x68>
 800b336:	236e      	movs	r3, #110	; 0x6e
 800b338:	704b      	strb	r3, [r1, #1]
 800b33a:	e7d5      	b.n	800b2e8 <findAxis+0x68>
 800b33c:	236e      	movs	r3, #110	; 0x6e
 800b33e:	700b      	strb	r3, [r1, #0]
 800b340:	e7b5      	b.n	800b2ae <findAxis+0x2e>
 800b342:	236e      	movs	r3, #110	; 0x6e
 800b344:	708b      	strb	r3, [r1, #2]
 800b346:	4770      	bx	lr
 800b348:	2375      	movs	r3, #117	; 0x75
 800b34a:	700b      	strb	r3, [r1, #0]
 800b34c:	e7af      	b.n	800b2ae <findAxis+0x2e>
 800b34e:	2375      	movs	r3, #117	; 0x75
 800b350:	704b      	strb	r3, [r1, #1]
 800b352:	e7c9      	b.n	800b2e8 <findAxis+0x68>
 800b354:	2375      	movs	r3, #117	; 0x75
 800b356:	708b      	strb	r3, [r1, #2]
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	0000      	movs	r0, r0
	...

0800b360 <findDirection>:
 800b360:	b5d0      	push	{r4, r6, r7, lr}
 800b362:	ed2d 8b04 	vpush	{d8-d9}
 800b366:	eef0 8ac0 	vabs.f32	s17, s0
 800b36a:	eeb0 8ae0 	vabs.f32	s16, s1
 800b36e:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b376:	4604      	mov	r4, r0
 800b378:	eeb0 9ac1 	vabs.f32	s18, s2
 800b37c:	dd36      	ble.n	800b3ec <findDirection+0x8c>
 800b37e:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b386:	dd31      	ble.n	800b3ec <findDirection+0x8c>
 800b388:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b390:	ee18 0a90 	vmov	r0, s17
 800b394:	f340 8094 	ble.w	800b4c0 <findDirection+0x160>
 800b398:	f7f5 f8d6 	bl	8000548 <__aeabi_f2d>
 800b39c:	4606      	mov	r6, r0
 800b39e:	ee18 0a10 	vmov	r0, s16
 800b3a2:	460f      	mov	r7, r1
 800b3a4:	f7f5 f8d0 	bl	8000548 <__aeabi_f2d>
 800b3a8:	a387      	add	r3, pc, #540	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	f7f5 f923 	bl	80005f8 <__aeabi_dmul>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	4639      	mov	r1, r7
 800b3ba:	f7f5 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 800b3be:	b188      	cbz	r0, 800b3e4 <findDirection+0x84>
 800b3c0:	ee19 0a10 	vmov	r0, s18
 800b3c4:	f7f5 f8c0 	bl	8000548 <__aeabi_f2d>
 800b3c8:	a37f      	add	r3, pc, #508	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f5 f913 	bl	80005f8 <__aeabi_dmul>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	4639      	mov	r1, r7
 800b3da:	f7f5 fb9d 	bl	8000b18 <__aeabi_dcmpgt>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	bf18      	it	ne
 800b3e2:	2404      	movne	r4, #4
 800b3e4:	ecbd 8b04 	vpop	{d8-d9}
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	bdd0      	pop	{r4, r6, r7, pc}
 800b3ec:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f4:	dd32      	ble.n	800b45c <findDirection+0xfc>
 800b3f6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fe:	ee18 0a10 	vmov	r0, s16
 800b402:	f340 8086 	ble.w	800b512 <findDirection+0x1b2>
 800b406:	f7f5 f89f 	bl	8000548 <__aeabi_f2d>
 800b40a:	4606      	mov	r6, r0
 800b40c:	ee18 0a90 	vmov	r0, s17
 800b410:	460f      	mov	r7, r1
 800b412:	f7f5 f899 	bl	8000548 <__aeabi_f2d>
 800b416:	a36c      	add	r3, pc, #432	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7f5 f8ec 	bl	80005f8 <__aeabi_dmul>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4630      	mov	r0, r6
 800b426:	4639      	mov	r1, r7
 800b428:	f7f5 fb76 	bl	8000b18 <__aeabi_dcmpgt>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d0d9      	beq.n	800b3e4 <findDirection+0x84>
 800b430:	ee19 0a10 	vmov	r0, s18
 800b434:	f7f5 f888 	bl	8000548 <__aeabi_f2d>
 800b438:	a363      	add	r3, pc, #396	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f7f5 f8db 	bl	80005f8 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f5 fb65 	bl	8000b18 <__aeabi_dcmpgt>
 800b44e:	ecbd 8b04 	vpop	{d8-d9}
 800b452:	2800      	cmp	r0, #0
 800b454:	bf18      	it	ne
 800b456:	2401      	movne	r4, #1
 800b458:	4620      	mov	r0, r4
 800b45a:	bdd0      	pop	{r4, r6, r7, pc}
 800b45c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b464:	ee19 0a10 	vmov	r0, s18
 800b468:	dd7f      	ble.n	800b56a <findDirection+0x20a>
 800b46a:	f7f5 f86d 	bl	8000548 <__aeabi_f2d>
 800b46e:	4606      	mov	r6, r0
 800b470:	ee18 0a10 	vmov	r0, s16
 800b474:	460f      	mov	r7, r1
 800b476:	f7f5 f867 	bl	8000548 <__aeabi_f2d>
 800b47a:	a353      	add	r3, pc, #332	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f5 f8ba 	bl	80005f8 <__aeabi_dmul>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f5 fb44 	bl	8000b18 <__aeabi_dcmpgt>
 800b490:	2800      	cmp	r0, #0
 800b492:	d0a7      	beq.n	800b3e4 <findDirection+0x84>
 800b494:	ee18 0a90 	vmov	r0, s17
 800b498:	f7f5 f856 	bl	8000548 <__aeabi_f2d>
 800b49c:	a34a      	add	r3, pc, #296	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	f7f5 fb33 	bl	8000b18 <__aeabi_dcmpgt>
 800b4b2:	ecbd 8b04 	vpop	{d8-d9}
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	bf18      	it	ne
 800b4ba:	2400      	movne	r4, #0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	bdd0      	pop	{r4, r6, r7, pc}
 800b4c0:	f7f5 f842 	bl	8000548 <__aeabi_f2d>
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	ee18 0a10 	vmov	r0, s16
 800b4ca:	460f      	mov	r7, r1
 800b4cc:	f7f5 f83c 	bl	8000548 <__aeabi_f2d>
 800b4d0:	a33d      	add	r3, pc, #244	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f5 f88f 	bl	80005f8 <__aeabi_dmul>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 fb19 	bl	8000b18 <__aeabi_dcmpgt>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f af7c 	beq.w	800b3e4 <findDirection+0x84>
 800b4ec:	ee19 0a10 	vmov	r0, s18
 800b4f0:	f7f5 f82a 	bl	8000548 <__aeabi_f2d>
 800b4f4:	a334      	add	r3, pc, #208	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f5 f87d 	bl	80005f8 <__aeabi_dmul>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4630      	mov	r0, r6
 800b504:	4639      	mov	r1, r7
 800b506:	f7f5 fb07 	bl	8000b18 <__aeabi_dcmpgt>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	bf18      	it	ne
 800b50e:	2405      	movne	r4, #5
 800b510:	e768      	b.n	800b3e4 <findDirection+0x84>
 800b512:	f7f5 f819 	bl	8000548 <__aeabi_f2d>
 800b516:	4606      	mov	r6, r0
 800b518:	ee18 0a90 	vmov	r0, s17
 800b51c:	460f      	mov	r7, r1
 800b51e:	f7f5 f813 	bl	8000548 <__aeabi_f2d>
 800b522:	a329      	add	r3, pc, #164	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 faf0 	bl	8000b18 <__aeabi_dcmpgt>
 800b538:	2800      	cmp	r0, #0
 800b53a:	f43f af53 	beq.w	800b3e4 <findDirection+0x84>
 800b53e:	ee19 0a10 	vmov	r0, s18
 800b542:	f7f5 f801 	bl	8000548 <__aeabi_f2d>
 800b546:	a320      	add	r3, pc, #128	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54c:	f7f5 f854 	bl	80005f8 <__aeabi_dmul>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4630      	mov	r0, r6
 800b556:	4639      	mov	r1, r7
 800b558:	f7f5 fade 	bl	8000b18 <__aeabi_dcmpgt>
 800b55c:	ecbd 8b04 	vpop	{d8-d9}
 800b560:	2800      	cmp	r0, #0
 800b562:	bf18      	it	ne
 800b564:	2403      	movne	r4, #3
 800b566:	4620      	mov	r0, r4
 800b568:	bdd0      	pop	{r4, r6, r7, pc}
 800b56a:	f7f4 ffed 	bl	8000548 <__aeabi_f2d>
 800b56e:	4606      	mov	r6, r0
 800b570:	ee18 0a10 	vmov	r0, s16
 800b574:	460f      	mov	r7, r1
 800b576:	f7f4 ffe7 	bl	8000548 <__aeabi_f2d>
 800b57a:	a313      	add	r3, pc, #76	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f5 f83a 	bl	80005f8 <__aeabi_dmul>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f5 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 800b590:	2800      	cmp	r0, #0
 800b592:	f43f af27 	beq.w	800b3e4 <findDirection+0x84>
 800b596:	ee18 0a90 	vmov	r0, s17
 800b59a:	f7f4 ffd5 	bl	8000548 <__aeabi_f2d>
 800b59e:	a30a      	add	r3, pc, #40	; (adr r3, 800b5c8 <findDirection+0x268>)
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f7f5 f828 	bl	80005f8 <__aeabi_dmul>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	4639      	mov	r1, r7
 800b5b0:	f7f5 fab2 	bl	8000b18 <__aeabi_dcmpgt>
 800b5b4:	ecbd 8b04 	vpop	{d8-d9}
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	bf18      	it	ne
 800b5bc:	2402      	movne	r4, #2
 800b5be:	4620      	mov	r0, r4
 800b5c0:	bdd0      	pop	{r4, r6, r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	f3af 8000 	nop.w
 800b5c8:	e0000000 	.word	0xe0000000
 800b5cc:	3ff6b851 	.word	0x3ff6b851

0800b5d0 <updateOrientation>:
 800b5d0:	b410      	push	{r4}
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	6003      	str	r3, [r0, #0]
 800b5d6:	6043      	str	r3, [r0, #4]
 800b5d8:	7203      	strb	r3, [r0, #8]
 800b5da:	780c      	ldrb	r4, [r1, #0]
 800b5dc:	784a      	ldrb	r2, [r1, #1]
 800b5de:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b5e2:	2b17      	cmp	r3, #23
 800b5e4:	bf98      	it	ls
 800b5e6:	3420      	addls	r4, #32
 800b5e8:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b5ec:	bf98      	it	ls
 800b5ee:	b2e4      	uxtbls	r4, r4
 800b5f0:	2b17      	cmp	r3, #23
 800b5f2:	788b      	ldrb	r3, [r1, #2]
 800b5f4:	bf98      	it	ls
 800b5f6:	3220      	addls	r2, #32
 800b5f8:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b5fc:	bf98      	it	ls
 800b5fe:	b2d2      	uxtbls	r2, r2
 800b600:	2917      	cmp	r1, #23
 800b602:	bf98      	it	ls
 800b604:	3320      	addls	r3, #32
 800b606:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b60a:	bf98      	it	ls
 800b60c:	b2db      	uxtbls	r3, r3
 800b60e:	2c13      	cmp	r4, #19
 800b610:	d80d      	bhi.n	800b62e <updateOrientation+0x5e>
 800b612:	e8df f004 	tbb	[pc, r4]
 800b616:	0a36      	.short	0x0a36
 800b618:	0c0c0c0c 	.word	0x0c0c0c0c
 800b61c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b620:	0c0c0c39 	.word	0x0c0c0c39
 800b624:	3f0c3c0c 	.word	0x3f0c3c0c
 800b628:	420c      	.short	0x420c
 800b62a:	2101      	movs	r1, #1
 800b62c:	7001      	strb	r1, [r0, #0]
 800b62e:	3a64      	subs	r2, #100	; 0x64
 800b630:	2a13      	cmp	r2, #19
 800b632:	d80d      	bhi.n	800b650 <updateOrientation+0x80>
 800b634:	e8df f002 	tbb	[pc, r2]
 800b638:	0c0c0a34 	.word	0x0c0c0a34
 800b63c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b640:	0c370c0c 	.word	0x0c370c0c
 800b644:	3a0c0c0c 	.word	0x3a0c0c0c
 800b648:	400c3d0c 	.word	0x400c3d0c
 800b64c:	2201      	movs	r2, #1
 800b64e:	7042      	strb	r2, [r0, #1]
 800b650:	3b64      	subs	r3, #100	; 0x64
 800b652:	2b13      	cmp	r3, #19
 800b654:	d80d      	bhi.n	800b672 <updateOrientation+0xa2>
 800b656:	e8df f003 	tbb	[pc, r3]
 800b65a:	320a      	.short	0x320a
 800b65c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b660:	0c0c0c0c 	.word	0x0c0c0c0c
 800b664:	0c0c0c37 	.word	0x0c0c0c37
 800b668:	410c3c0c 	.word	0x410c3c0c
 800b66c:	0f0c      	.short	0x0f0c
 800b66e:	23ff      	movs	r3, #255	; 0xff
 800b670:	7203      	strb	r3, [r0, #8]
 800b672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	23ff      	movs	r3, #255	; 0xff
 800b67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b67e:	7083      	strb	r3, [r0, #2]
 800b680:	4770      	bx	lr
 800b682:	21ff      	movs	r1, #255	; 0xff
 800b684:	7181      	strb	r1, [r0, #6]
 800b686:	e7d2      	b.n	800b62e <updateOrientation+0x5e>
 800b688:	2101      	movs	r1, #1
 800b68a:	70c1      	strb	r1, [r0, #3]
 800b68c:	e7cf      	b.n	800b62e <updateOrientation+0x5e>
 800b68e:	21ff      	movs	r1, #255	; 0xff
 800b690:	70c1      	strb	r1, [r0, #3]
 800b692:	e7cc      	b.n	800b62e <updateOrientation+0x5e>
 800b694:	2101      	movs	r1, #1
 800b696:	7181      	strb	r1, [r0, #6]
 800b698:	e7c9      	b.n	800b62e <updateOrientation+0x5e>
 800b69a:	21ff      	movs	r1, #255	; 0xff
 800b69c:	7001      	strb	r1, [r0, #0]
 800b69e:	e7c6      	b.n	800b62e <updateOrientation+0x5e>
 800b6a0:	22ff      	movs	r2, #255	; 0xff
 800b6a2:	71c2      	strb	r2, [r0, #7]
 800b6a4:	e7d4      	b.n	800b650 <updateOrientation+0x80>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	7102      	strb	r2, [r0, #4]
 800b6aa:	e7d1      	b.n	800b650 <updateOrientation+0x80>
 800b6ac:	22ff      	movs	r2, #255	; 0xff
 800b6ae:	7102      	strb	r2, [r0, #4]
 800b6b0:	e7ce      	b.n	800b650 <updateOrientation+0x80>
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	71c2      	strb	r2, [r0, #7]
 800b6b6:	e7cb      	b.n	800b650 <updateOrientation+0x80>
 800b6b8:	22ff      	movs	r2, #255	; 0xff
 800b6ba:	7042      	strb	r2, [r0, #1]
 800b6bc:	e7c8      	b.n	800b650 <updateOrientation+0x80>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6c4:	7083      	strb	r3, [r0, #2]
 800b6c6:	4770      	bx	lr
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ce:	7143      	strb	r3, [r0, #5]
 800b6d0:	4770      	bx	lr
 800b6d2:	23ff      	movs	r3, #255	; 0xff
 800b6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6d8:	7143      	strb	r3, [r0, #5]
 800b6da:	4770      	bx	lr
 800b6dc:	2301      	movs	r3, #1
 800b6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e2:	7203      	strb	r3, [r0, #8]
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop

0800b6e8 <qmult>:
 800b6e8:	ed91 2a03 	vldr	s4, [r1, #12]
 800b6ec:	ed90 3a01 	vldr	s6, [r0, #4]
 800b6f0:	edd0 5a02 	vldr	s11, [r0, #8]
 800b6f4:	edd1 4a01 	vldr	s9, [r1, #4]
 800b6f8:	ed90 4a00 	vldr	s8, [r0]
 800b6fc:	edd1 3a00 	vldr	s7, [r1]
 800b700:	ed91 5a02 	vldr	s10, [r1, #8]
 800b704:	edd0 2a03 	vldr	s5, [r0, #12]
 800b708:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b70c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b710:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b714:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b718:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b71c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b720:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b724:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b728:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b72c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b730:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b734:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b738:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b73c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b740:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b744:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b748:	ed82 6a00 	vstr	s12, [r2]
 800b74c:	edc2 6a01 	vstr	s13, [r2, #4]
 800b750:	ed82 7a02 	vstr	s14, [r2, #8]
 800b754:	edc2 7a03 	vstr	s15, [r2, #12]
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop

0800b75c <MEMS_setMagIndexToOne>:
 800b75c:	291f      	cmp	r1, #31
 800b75e:	b430      	push	{r4, r5}
 800b760:	d920      	bls.n	800b7a4 <MEMS_setMagIndexToOne+0x48>
 800b762:	6885      	ldr	r5, [r0, #8]
 800b764:	3920      	subs	r1, #32
 800b766:	2401      	movs	r4, #1
 800b768:	fa04 f101 	lsl.w	r1, r4, r1
 800b76c:	ea21 0105 	bic.w	r1, r1, r5
 800b770:	4069      	eors	r1, r5
 800b772:	2a1f      	cmp	r2, #31
 800b774:	6081      	str	r1, [r0, #8]
 800b776:	d91f      	bls.n	800b7b8 <MEMS_setMagIndexToOne+0x5c>
 800b778:	6901      	ldr	r1, [r0, #16]
 800b77a:	f1a2 0420 	sub.w	r4, r2, #32
 800b77e:	2201      	movs	r2, #1
 800b780:	40a2      	lsls	r2, r4
 800b782:	ea22 0201 	bic.w	r2, r2, r1
 800b786:	404a      	eors	r2, r1
 800b788:	2b1f      	cmp	r3, #31
 800b78a:	6102      	str	r2, [r0, #16]
 800b78c:	d91e      	bls.n	800b7cc <MEMS_setMagIndexToOne+0x70>
 800b78e:	69c2      	ldr	r2, [r0, #28]
 800b790:	f1a3 0120 	sub.w	r1, r3, #32
 800b794:	2301      	movs	r3, #1
 800b796:	408b      	lsls	r3, r1
 800b798:	ea23 0302 	bic.w	r3, r3, r2
 800b79c:	4053      	eors	r3, r2
 800b79e:	bc30      	pop	{r4, r5}
 800b7a0:	61c3      	str	r3, [r0, #28]
 800b7a2:	4770      	bx	lr
 800b7a4:	68c5      	ldr	r5, [r0, #12]
 800b7a6:	2401      	movs	r4, #1
 800b7a8:	fa04 f101 	lsl.w	r1, r4, r1
 800b7ac:	ea21 0105 	bic.w	r1, r1, r5
 800b7b0:	4069      	eors	r1, r5
 800b7b2:	2a1f      	cmp	r2, #31
 800b7b4:	60c1      	str	r1, [r0, #12]
 800b7b6:	d8df      	bhi.n	800b778 <MEMS_setMagIndexToOne+0x1c>
 800b7b8:	6944      	ldr	r4, [r0, #20]
 800b7ba:	2101      	movs	r1, #1
 800b7bc:	fa01 f202 	lsl.w	r2, r1, r2
 800b7c0:	ea22 0204 	bic.w	r2, r2, r4
 800b7c4:	4062      	eors	r2, r4
 800b7c6:	2b1f      	cmp	r3, #31
 800b7c8:	6142      	str	r2, [r0, #20]
 800b7ca:	d8e0      	bhi.n	800b78e <MEMS_setMagIndexToOne+0x32>
 800b7cc:	6981      	ldr	r1, [r0, #24]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7d4:	ea23 0301 	bic.w	r3, r3, r1
 800b7d8:	404b      	eors	r3, r1
 800b7da:	bc30      	pop	{r4, r5}
 800b7dc:	6183      	str	r3, [r0, #24]
 800b7de:	4770      	bx	lr

0800b7e0 <getRotationMatrix>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	2224      	movs	r2, #36	; 0x24
 800b7ec:	f00b fdf4 	bl	80173d8 <memset>
 800b7f0:	edd5 5a00 	vldr	s11, [r5]
 800b7f4:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800b91c <getRotationMatrix+0x13c>
 800b7f8:	edc0 5a02 	vstr	s11, [r0, #8]
 800b7fc:	ed95 7a01 	vldr	s14, [r5, #4]
 800b800:	ed80 7a05 	vstr	s14, [r0, #20]
 800b804:	ed95 5a02 	vldr	s10, [r5, #8]
 800b808:	ed80 5a08 	vstr	s10, [r0, #32]
 800b80c:	ed94 4a02 	vldr	s8, [r4, #8]
 800b810:	edd4 3a01 	vldr	s7, [r4, #4]
 800b814:	edd4 4a00 	vldr	s9, [r4]
 800b818:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800b81c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800b820:	eee3 7a85 	vfma.f32	s15, s7, s10
 800b824:	4603      	mov	r3, r0
 800b826:	eee4 6a87 	vfma.f32	s13, s9, s14
 800b82a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b82e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800b832:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800b836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b83a:	eea4 6a25 	vfma.f32	s12, s8, s11
 800b83e:	bfdc      	itt	le
 800b840:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800b844:	eeb0 7a43 	vmovle.f32	s14, s6
 800b848:	eeb0 5ac6 	vabs.f32	s10, s12
 800b84c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b850:	edc0 6a06 	vstr	s13, [r0, #24]
 800b854:	bfd4      	ite	le
 800b856:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800b85a:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800b85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b862:	ed80 6a03 	vstr	s12, [r0, #12]
 800b866:	edc0 7a00 	vstr	s15, [r0]
 800b86a:	d447      	bmi.n	800b8fc <getRotationMatrix+0x11c>
 800b86c:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800b870:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800b874:	eef0 5a66 	vmov.f32	s11, s13
 800b878:	edd3 6a06 	vldr	s13, [r3, #24]
 800b87c:	eeb0 5ae6 	vabs.f32	s10, s13
 800b880:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b888:	d543      	bpl.n	800b912 <getRotationMatrix+0x132>
 800b88a:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b88e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800b892:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b896:	eeb0 7a45 	vmov.f32	s14, s10
 800b89a:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800b89e:	eef0 5a44 	vmov.f32	s11, s8
 800b8a2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800b8a6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800b8aa:	ee65 5a07 	vmul.f32	s11, s10, s14
 800b8ae:	edd3 3a08 	vldr	s7, [r3, #32]
 800b8b2:	edd3 4a02 	vldr	s9, [r3, #8]
 800b8b6:	ed93 4a05 	vldr	s8, [r3, #20]
 800b8ba:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800b8be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8c2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b8c6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b8ca:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800b8ce:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800b8d2:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800b8d6:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800b8da:	eee4 5a07 	vfma.f32	s11, s8, s14
 800b8de:	eee6 6a24 	vfma.f32	s13, s12, s9
 800b8e2:	edc3 7a00 	vstr	s15, [r3]
 800b8e6:	ed83 6a03 	vstr	s12, [r3, #12]
 800b8ea:	ed83 7a06 	vstr	s14, [r3, #24]
 800b8ee:	ed83 5a04 	vstr	s10, [r3, #16]
 800b8f2:	edc3 5a01 	vstr	s11, [r3, #4]
 800b8f6:	edc3 6a07 	vstr	s13, [r3, #28]
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b900:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b904:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b908:	eeb0 7a45 	vmov.f32	s14, s10
 800b90c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800b910:	e7b2      	b.n	800b878 <getRotationMatrix+0x98>
 800b912:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800b916:	eee5 5a05 	vfma.f32	s11, s10, s10
 800b91a:	e7c2      	b.n	800b8a2 <getRotationMatrix+0xc2>
 800b91c:	00000000 	.word	0x00000000

0800b920 <b_dcm2q>:
 800b920:	ed90 5a08 	vldr	s10, [r0, #32]
 800b924:	edd0 7a00 	vldr	s15, [r0]
 800b928:	edd0 6a04 	vldr	s13, [r0, #16]
 800b92c:	ee37 7a85 	vadd.f32	s14, s15, s10
 800b930:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800b934:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b938:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b93c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b944:	bfc5      	ittet	gt
 800b946:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800b94a:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800b94e:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800ba5c <b_dcm2q+0x13c>
 800b952:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800b956:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800b95a:	ee35 6a47 	vsub.f32	s12, s10, s14
 800b95e:	ee35 7a07 	vadd.f32	s14, s10, s14
 800b962:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800b966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96a:	bfc5      	ittet	gt
 800b96c:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800b970:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800b974:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800ba5c <b_dcm2q+0x13c>
 800b978:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800b97c:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b980:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800b984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b988:	dd5b      	ble.n	800ba42 <b_dcm2q+0x122>
 800b98a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800b98e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b992:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b996:	eef1 4ac7 	vsqrt.f32	s9, s14
 800b99a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800b99e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b9a2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b9a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9aa:	edd0 6a07 	vldr	s13, [r0, #28]
 800b9ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9b6:	bf85      	ittet	hi
 800b9b8:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800b9bc:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800b9c0:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800ba5c <b_dcm2q+0x13c>
 800b9c4:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800b9c8:	edd0 7a05 	vldr	s15, [r0, #20]
 800b9cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d8:	d43c      	bmi.n	800ba54 <b_dcm2q+0x134>
 800b9da:	bfd8      	it	le
 800b9dc:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800b9e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b9e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9e8:	ed81 7a00 	vstr	s14, [r1]
 800b9ec:	edd0 7a06 	vldr	s15, [r0, #24]
 800b9f0:	ed90 7a02 	vldr	s14, [r0, #8]
 800b9f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba00:	d425      	bmi.n	800ba4e <b_dcm2q+0x12e>
 800ba02:	bfd8      	it	le
 800ba04:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800ba08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba0c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ba10:	edc1 5a01 	vstr	s11, [r1, #4]
 800ba14:	edd0 7a01 	vldr	s15, [r0, #4]
 800ba18:	ed90 7a03 	vldr	s14, [r0, #12]
 800ba1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba28:	d40e      	bmi.n	800ba48 <b_dcm2q+0x128>
 800ba2a:	bfd8      	it	le
 800ba2c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800ba30:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba34:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ba38:	edc1 4a03 	vstr	s9, [r1, #12]
 800ba3c:	ed81 6a02 	vstr	s12, [r1, #8]
 800ba40:	4770      	bx	lr
 800ba42:	eddf 4a06 	vldr	s9, [pc, #24]	; 800ba5c <b_dcm2q+0x13c>
 800ba46:	e7aa      	b.n	800b99e <b_dcm2q+0x7e>
 800ba48:	eeb1 6a46 	vneg.f32	s12, s12
 800ba4c:	e7f0      	b.n	800ba30 <b_dcm2q+0x110>
 800ba4e:	eef1 5a65 	vneg.f32	s11, s11
 800ba52:	e7d9      	b.n	800ba08 <b_dcm2q+0xe8>
 800ba54:	eeb1 7a47 	vneg.f32	s14, s14
 800ba58:	e7c2      	b.n	800b9e0 <b_dcm2q+0xc0>
 800ba5a:	bf00      	nop
 800ba5c:	00000000 	.word	0x00000000

0800ba60 <q2hpr>:
 800ba60:	b510      	push	{r4, lr}
 800ba62:	ed90 7a00 	vldr	s14, [r0]
 800ba66:	edd0 6a01 	vldr	s13, [r0, #4]
 800ba6a:	edd0 7a02 	vldr	s15, [r0, #8]
 800ba6e:	ed90 5a03 	vldr	s10, [r0, #12]
 800ba72:	ed2d 8b0a 	vpush	{d8-d12}
 800ba76:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ba7a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800ba7e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800ba82:	ee67 0a07 	vmul.f32	s1, s14, s14
 800ba86:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800ba8a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ba8e:	ee27 7a05 	vmul.f32	s14, s14, s10
 800ba92:	ee66 6a85 	vmul.f32	s13, s13, s10
 800ba96:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ba9a:	ee78 aa08 	vadd.f32	s21, s16, s16
 800ba9e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800baa2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800baa6:	ee30 ca00 	vadd.f32	s24, s0, s0
 800baaa:	ee36 ba06 	vadd.f32	s22, s12, s12
 800baae:	ee77 8a07 	vadd.f32	s17, s14, s14
 800bab2:	ee75 baa5 	vadd.f32	s23, s11, s11
 800bab6:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800baba:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800babe:	460c      	mov	r4, r1
 800bac0:	bb8a      	cbnz	r2, 800bb26 <q2hpr+0xc6>
 800bac2:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800bac6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800baca:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bace:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800bad2:	f009 ffa3 	bl	8015a1c <atan2f>
 800bad6:	eeb0 8a40 	vmov.f32	s16, s0
 800bada:	ed84 8a00 	vstr	s16, [r4]
 800bade:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bae2:	f009 ff69 	bl	80159b8 <asinf>
 800bae6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800baea:	eef0 8a40 	vmov.f32	s17, s0
 800baee:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800baf2:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800baf6:	f009 ff91 	bl	8015a1c <atan2f>
 800bafa:	eef1 8a68 	vneg.f32	s17, s17
 800bafe:	eeb0 9a40 	vmov.f32	s18, s0
 800bb02:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0a:	ed84 9a02 	vstr	s18, [r4, #8]
 800bb0e:	edc4 8a01 	vstr	s17, [r4, #4]
 800bb12:	d505      	bpl.n	800bb20 <q2hpr+0xc0>
 800bb14:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bb6c <q2hpr+0x10c>
 800bb18:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bb1c:	ed84 8a00 	vstr	s16, [r4]
 800bb20:	ecbd 8b0a 	vpop	{d8-d12}
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bb2a:	f009 ff45 	bl	80159b8 <asinf>
 800bb2e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bb32:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800bb36:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bb3a:	eeb0 9a40 	vmov.f32	s18, s0
 800bb3e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bb42:	f009 ff6b 	bl	8015a1c <atan2f>
 800bb46:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bb4a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bb4e:	eef0 8a40 	vmov.f32	s17, s0
 800bb52:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bb56:	eeb1 0a48 	vneg.f32	s0, s16
 800bb5a:	f009 ff5f 	bl	8015a1c <atan2f>
 800bb5e:	eef1 8a68 	vneg.f32	s17, s17
 800bb62:	eeb0 8a40 	vmov.f32	s16, s0
 800bb66:	ed84 0a00 	vstr	s0, [r4]
 800bb6a:	e7ca      	b.n	800bb02 <q2hpr+0xa2>
 800bb6c:	40c90fdb 	.word	0x40c90fdb

0800bb70 <llEvaluate.constprop.0>:
 800bb70:	edd2 0a00 	vldr	s1, [r2]
 800bb74:	ed90 1a00 	vldr	s2, [r0]
 800bb78:	edd0 1a04 	vldr	s3, [r0, #16]
 800bb7c:	edd2 5a01 	vldr	s11, [r2, #4]
 800bb80:	ed90 6a08 	vldr	s12, [r0, #32]
 800bb84:	ed90 2a05 	vldr	s4, [r0, #20]
 800bb88:	ed92 7a02 	vldr	s14, [r2, #8]
 800bb8c:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bb90:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bb94:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bb98:	edd2 7a03 	vldr	s15, [r2, #12]
 800bb9c:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bba0:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bba4:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bba8:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	b084      	sub	sp, #16
 800bbb2:	f10d 0810 	add.w	r8, sp, #16
 800bbb6:	2704      	movs	r7, #4
 800bbb8:	f101 0510 	add.w	r5, r1, #16
 800bbbc:	2f04      	cmp	r7, #4
 800bbbe:	4686      	mov	lr, r0
 800bbc0:	f04f 0c03 	mov.w	ip, #3
 800bbc4:	b27b      	sxtb	r3, r7
 800bbc6:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800bbca:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800bbce:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800bbd2:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800bbd6:	eea6 7a43 	vfms.f32	s14, s12, s6
 800bbda:	edcd 6a00 	vstr	s13, [sp]
 800bbde:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800bbe2:	eee6 7a63 	vfms.f32	s15, s12, s7
 800bbe6:	ed8d 6a01 	vstr	s12, [sp, #4]
 800bbea:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800bbee:	edcd 6a02 	vstr	s13, [sp, #8]
 800bbf2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bbf6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bbfa:	ed78 7a01 	vldmdb	r8!, {s15}
 800bbfe:	ed65 7a01 	vstmdb	r5!, {s15}
 800bc02:	d029      	beq.n	800bc58 <llEvaluate.constprop.0+0xe8>
 800bc04:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800bc08:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800bc0c:	4432      	add	r2, r6
 800bc0e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800bc12:	edd2 6a00 	vldr	s13, [r2]
 800bc16:	ed94 7a00 	vldr	s14, [r4]
 800bc1a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bc1e:	3301      	adds	r3, #1
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	2a04      	cmp	r2, #4
 800bc24:	b25b      	sxtb	r3, r3
 800bc26:	edc5 7a00 	vstr	s15, [r5]
 800bc2a:	d1ed      	bne.n	800bc08 <llEvaluate.constprop.0+0x98>
 800bc2c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bc30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc34:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800bc38:	ed85 7a00 	vstr	s14, [r5]
 800bc3c:	d013      	beq.n	800bc66 <llEvaluate.constprop.0+0xf6>
 800bc3e:	3f01      	subs	r7, #1
 800bc40:	b2ff      	uxtb	r7, r7
 800bc42:	ed78 7a01 	vldmdb	r8!, {s15}
 800bc46:	2f04      	cmp	r7, #4
 800bc48:	f1ae 0e14 	sub.w	lr, lr, #20
 800bc4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc50:	b27b      	sxtb	r3, r7
 800bc52:	ed65 7a01 	vstmdb	r5!, {s15}
 800bc56:	d1d5      	bne.n	800bc04 <llEvaluate.constprop.0+0x94>
 800bc58:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bc5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bc60:	ed85 7a00 	vstr	s14, [r5]
 800bc64:	e7eb      	b.n	800bc3e <llEvaluate.constprop.0+0xce>
 800bc66:	b004      	add	sp, #16
 800bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bc6c <MEMS_updateMagBufferIndex>:
 800bc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc70:	ed2d 8b02 	vpush	{d8}
 800bc74:	7804      	ldrb	r4, [r0, #0]
 800bc76:	7842      	ldrb	r2, [r0, #1]
 800bc78:	4606      	mov	r6, r0
 800bc7a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4294      	cmp	r4, r2
 800bc82:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800bc86:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800bc8a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800bc8e:	b083      	sub	sp, #12
 800bc90:	460d      	mov	r5, r1
 800bc92:	f100 0001 	add.w	r0, r0, #1
 800bc96:	f000 8083 	beq.w	800bda0 <MEMS_updateMagBufferIndex+0x134>
 800bc9a:	1b00      	subs	r0, r0, r4
 800bc9c:	fb90 f8f2 	sdiv	r8, r0, r2
 800bca0:	fb02 0018 	mls	r0, r2, r8, r0
 800bca4:	2800      	cmp	r0, #0
 800bca6:	bfb6      	itet	lt
 800bca8:	eb02 0800 	addlt.w	r8, r2, r0
 800bcac:	fa0f f880 	sxthge.w	r8, r0
 800bcb0:	fa0f f888 	sxthlt.w	r8, r8
 800bcb4:	b934      	cbnz	r4, 800bcc4 <MEMS_updateMagBufferIndex+0x58>
 800bcb6:	23ff      	movs	r3, #255	; 0xff
 800bcb8:	70b3      	strb	r3, [r6, #2]
 800bcba:	b003      	add	sp, #12
 800bcbc:	ecbd 8b02 	vpop	{d8}
 800bcc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bcc8:	2700      	movs	r7, #0
 800bcca:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800bcce:	463b      	mov	r3, r7
 800bcd0:	e000      	b.n	800bcd4 <MEMS_updateMagBufferIndex+0x68>
 800bcd2:	7872      	ldrb	r2, [r6, #1]
 800bcd4:	4443      	add	r3, r8
 800bcd6:	fb93 f4f2 	sdiv	r4, r3, r2
 800bcda:	fb02 3314 	mls	r3, r2, r4, r3
 800bcde:	b2dc      	uxtb	r4, r3
 800bce0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800bce4:	3701      	adds	r7, #1
 800bce6:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800bcea:	fb92 f3f5 	sdiv	r3, r2, r5
 800bcee:	fb05 2313 	mls	r3, r5, r3, r2
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfb8      	it	lt
 800bcf6:	195b      	addlt	r3, r3, r5
 800bcf8:	b21b      	sxth	r3, r3
 800bcfa:	ee00 3a10 	vmov	s0, r3
 800bcfe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bd02:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bd06:	f009 fd5f 	bl	80157c8 <roundf>
 800bd0a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800bd0e:	fb92 f3f5 	sdiv	r3, r2, r5
 800bd12:	fb05 2313 	mls	r3, r5, r3, r2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	bfb8      	it	lt
 800bd1a:	195b      	addlt	r3, r3, r5
 800bd1c:	b21b      	sxth	r3, r3
 800bd1e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bd22:	ee00 3a10 	vmov	s0, r3
 800bd26:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bd2a:	edcd 7a01 	vstr	s15, [sp, #4]
 800bd2e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bd32:	f009 fd49 	bl	80157c8 <roundf>
 800bd36:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800bd3a:	fb92 f3f5 	sdiv	r3, r2, r5
 800bd3e:	fb05 2313 	mls	r3, r5, r3, r2
 800bd42:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bd46:	18ea      	adds	r2, r5, r3
 800bd48:	b219      	sxth	r1, r3
 800bd4a:	b212      	sxth	r2, r2
 800bd4c:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800bd50:	edcd 7a01 	vstr	s15, [sp, #4]
 800bd54:	ee00 1a10 	vmov	s0, r1
 800bd58:	ee07 2a90 	vmov	s15, r2
 800bd5c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bd60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bd6a:	bfb8      	it	lt
 800bd6c:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800bd70:	f009 fd2a 	bl	80157c8 <roundf>
 800bd74:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bd78:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800bd7c:	edcd 7a01 	vstr	s15, [sp, #4]
 800bd80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bd84:	4622      	mov	r2, r4
 800bd86:	4649      	mov	r1, r9
 800bd88:	4630      	mov	r0, r6
 800bd8a:	f7ff fce7 	bl	800b75c <MEMS_setMagIndexToOne>
 800bd8e:	7832      	ldrb	r2, [r6, #0]
 800bd90:	b2fb      	uxtb	r3, r7
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d89d      	bhi.n	800bcd2 <MEMS_updateMagBufferIndex+0x66>
 800bd96:	b003      	add	sp, #12
 800bd98:	ecbd 8b02 	vpop	{d8}
 800bd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bda0:	fb90 f8f4 	sdiv	r8, r0, r4
 800bda4:	fb04 0018 	mls	r0, r4, r8, r0
 800bda8:	fa0f f880 	sxth.w	r8, r0
 800bdac:	e782      	b.n	800bcb4 <MEMS_updateMagBufferIndex+0x48>
 800bdae:	bf00      	nop

0800bdb0 <getMagStats.constprop.0>:
 800bdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bdb6:	2400      	movs	r4, #0
 800bdb8:	4607      	mov	r7, r0
 800bdba:	6034      	str	r4, [r6, #0]
 800bdbc:	601c      	str	r4, [r3, #0]
 800bdbe:	7800      	ldrb	r0, [r0, #0]
 800bdc0:	787d      	ldrb	r5, [r7, #1]
 800bdc2:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800bdc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bdca:	42a8      	cmp	r0, r5
 800bdcc:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800bdd0:	f000 80c0 	beq.w	800bf54 <getMagStats.constprop.0+0x1a4>
 800bdd4:	3401      	adds	r4, #1
 800bdd6:	eba4 0c00 	sub.w	ip, r4, r0
 800bdda:	fb9c f4f5 	sdiv	r4, ip, r5
 800bdde:	fb05 c414 	mls	r4, r5, r4, ip
 800bde2:	2c00      	cmp	r4, #0
 800bde4:	bfb8      	it	lt
 800bde6:	1964      	addlt	r4, r4, r5
 800bde8:	b224      	sxth	r4, r4
 800bdea:	ee04 0a90 	vmov	s9, r0
 800bdee:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800bf70 <getMagStats.constprop.0+0x1c0>
 800bdf2:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800bdf6:	ee25 5a85 	vmul.f32	s10, s11, s10
 800bdfa:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bdfe:	2800      	cmp	r0, #0
 800be00:	f000 80b2 	beq.w	800bf68 <getMagStats.constprop.0+0x1b8>
 800be04:	3801      	subs	r0, #1
 800be06:	fa54 fc80 	uxtab	ip, r4, r0
 800be0a:	f8b1 9000 	ldrh.w	r9, [r1]
 800be0e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800be12:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800be16:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800bf74 <getMagStats.constprop.0+0x1c4>
 800be1a:	2000      	movs	r0, #0
 800be1c:	e002      	b.n	800be24 <getMagStats.constprop.0+0x74>
 800be1e:	ed93 3a00 	vldr	s6, [r3]
 800be22:	3401      	adds	r4, #1
 800be24:	fb94 f1f5 	sdiv	r1, r4, r5
 800be28:	fb05 4111 	mls	r1, r5, r1, r4
 800be2c:	b2c9      	uxtb	r1, r1
 800be2e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800be32:	edd2 3a00 	vldr	s7, [r2]
 800be36:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800be3a:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800be3e:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800be40:	ed92 4a04 	vldr	s8, [r2, #16]
 800be44:	ed92 6a08 	vldr	s12, [r2, #32]
 800be48:	ebaa 0a09 	sub.w	sl, sl, r9
 800be4c:	ebab 0b08 	sub.w	fp, fp, r8
 800be50:	fa0f fa8a 	sxth.w	sl, sl
 800be54:	ee07 aa10 	vmov	s14, sl
 800be58:	fa0f fa8b 	sxth.w	sl, fp
 800be5c:	ee06 aa90 	vmov	s13, sl
 800be60:	eba1 010e 	sub.w	r1, r1, lr
 800be64:	b209      	sxth	r1, r1
 800be66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800be6a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800be6e:	ee07 1a90 	vmov	s15, r1
 800be72:	ee27 7a23 	vmul.f32	s14, s14, s7
 800be76:	ee66 6a84 	vmul.f32	s13, s13, s8
 800be7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be7e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800be82:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800be86:	ee67 7a86 	vmul.f32	s15, s15, s12
 800be8a:	ee16 1a90 	vmov	r1, s13
 800be8e:	ee17 aa10 	vmov	sl, s14
 800be92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be96:	fb11 f101 	smulbb	r1, r1, r1
 800be9a:	fa0f fa8a 	sxth.w	sl, sl
 800be9e:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800bea2:	ee17 1a90 	vmov	r1, s15
 800bea6:	b209      	sxth	r1, r1
 800bea8:	fb01 a101 	mla	r1, r1, r1, sl
 800beac:	ee07 1a90 	vmov	s15, r1
 800beb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beb4:	f100 0a01 	add.w	sl, r0, #1
 800beb8:	eef1 6ae7 	vsqrt.f32	s13, s15
 800bebc:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bec0:	ee17 1a90 	vmov	r1, s15
 800bec4:	b209      	sxth	r1, r1
 800bec6:	ee07 1a10 	vmov	s14, r1
 800beca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bece:	ee77 7a45 	vsub.f32	s15, s14, s10
 800bed2:	ee37 7a03 	vadd.f32	s14, s14, s6
 800bed6:	eef0 7ae7 	vabs.f32	s15, s15
 800beda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bede:	ed83 7a00 	vstr	s14, [r3]
 800bee2:	ee17 1a90 	vmov	r1, s15
 800bee6:	b209      	sxth	r1, r1
 800bee8:	fb01 fb01 	mul.w	fp, r1, r1
 800beec:	ee07 ba90 	vmov	s15, fp
 800bef0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bef4:	ee07 1a90 	vmov	s15, r1
 800bef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800befc:	eef4 5ae7 	vcmpe.f32	s11, s15
 800bf00:	edd6 7a00 	vldr	s15, [r6]
 800bf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf0c:	bf48      	it	mi
 800bf0e:	fa5f f08a 	uxtbmi.w	r0, sl
 800bf12:	45a4      	cmp	ip, r4
 800bf14:	edc6 7a00 	vstr	s15, [r6]
 800bf18:	d181      	bne.n	800be1e <getMagStats.constprop.0+0x6e>
 800bf1a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800bf1e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800bf78 <getMagStats.constprop.0+0x1c8>
 800bf22:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800bf26:	eef1 7ae6 	vsqrt.f32	s15, s13
 800bf2a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bf2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf36:	bfb8      	it	lt
 800bf38:	eef0 7a47 	vmovlt.f32	s15, s14
 800bf3c:	edc6 7a00 	vstr	s15, [r6]
 800bf40:	edd3 7a00 	vldr	s15, [r3]
 800bf44:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bf48:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800bf4c:	edc3 7a00 	vstr	s15, [r3]
 800bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf54:	1c65      	adds	r5, r4, #1
 800bf56:	fb95 f4f0 	sdiv	r4, r5, r0
 800bf5a:	fb00 5414 	mls	r4, r0, r4, r5
 800bf5e:	ee04 0a90 	vmov	s9, r0
 800bf62:	b224      	sxth	r4, r4
 800bf64:	4605      	mov	r5, r0
 800bf66:	e742      	b.n	800bdee <getMagStats.constprop.0+0x3e>
 800bf68:	edd6 7a00 	vldr	s15, [r6]
 800bf6c:	e7d5      	b.n	800bf1a <getMagStats.constprop.0+0x16a>
 800bf6e:	bf00      	nop
 800bf70:	423c0000 	.word	0x423c0000
 800bf74:	00000000 	.word	0x00000000
 800bf78:	3f59999a 	.word	0x3f59999a

0800bf7c <MFX_emptyAttitude>:
 800bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf80:	ed2d 8b10 	vpush	{d8-d15}
 800bf84:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800bf88:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800bf8c:	f04f 0a00 	mov.w	sl, #0
 800bf90:	4fef      	ldr	r7, [pc, #956]	; (800c350 <MFX_emptyAttitude+0x3d4>)
 800bf92:	f8c4 a008 	str.w	sl, [r4, #8]
 800bf96:	e9c4 aa00 	strd	sl, sl, [r4]
 800bf9a:	f837 3b04 	ldrh.w	r3, [r7], #4
 800bf9e:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800bfa2:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800bfa6:	4680      	mov	r8, r0
 800bfa8:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800bfac:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800bfb0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bfb4:	0c1b      	lsrs	r3, r3, #16
 800bfb6:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800bfba:	ab27      	add	r3, sp, #156	; 0x9c
 800bfbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bfc0:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800bfc4:	ab2d      	add	r3, sp, #180	; 0xb4
 800bfc6:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800bfca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bfce:	ab30      	add	r3, sp, #192	; 0xc0
 800bfd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bfd4:	ab33      	add	r3, sp, #204	; 0xcc
 800bfd6:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800bfda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bfde:	f04f 0c00 	mov.w	ip, #0
 800bfe2:	ab36      	add	r3, sp, #216	; 0xd8
 800bfe4:	f04f 0b00 	mov.w	fp, #0
 800bfe8:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800bfec:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800bff0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bff4:	4628      	mov	r0, r5
 800bff6:	2224      	movs	r2, #36	; 0x24
 800bff8:	f00b f9ee 	bl	80173d8 <memset>
 800bffc:	4651      	mov	r1, sl
 800bffe:	4620      	mov	r0, r4
 800c000:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c004:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c354 <MFX_emptyAttitude+0x3d8>
 800c008:	eddf ead3 	vldr	s29, [pc, #844]	; 800c358 <MFX_emptyAttitude+0x3dc>
 800c00c:	f00b f9e4 	bl	80173d8 <memset>
 800c010:	edd5 4a00 	vldr	s9, [r5]
 800c014:	ed95 5a01 	vldr	s10, [r5, #4]
 800c018:	edd5 5a02 	vldr	s11, [r5, #8]
 800c01c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c020:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c024:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c028:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c02c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c030:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c034:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c038:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c03c:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c040:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c044:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c048:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c04c:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c050:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c054:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c058:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c05c:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c060:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c064:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c068:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c06c:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c070:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c074:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c078:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c07c:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c080:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c084:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c088:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c08c:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c090:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c094:	ed95 6a03 	vldr	s12, [r5, #12]
 800c098:	edd5 6a04 	vldr	s13, [r5, #16]
 800c09c:	ed95 7a05 	vldr	s14, [r5, #20]
 800c0a0:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c0a4:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c0a8:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c0ac:	edcd 6a07 	vstr	s13, [sp, #28]
 800c0b0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c0b4:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c0b8:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c0bc:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c0c0:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c0c4:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c0c8:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c0cc:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c0d0:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c0d4:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c0d8:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c0dc:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c0e0:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c0e4:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c0e8:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c0ec:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c0f0:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c0f4:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c0f8:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c0fc:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c100:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c104:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c108:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c10c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c110:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c114:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c118:	edd5 7a06 	vldr	s15, [r5, #24]
 800c11c:	edd5 fa07 	vldr	s31, [r5, #28]
 800c120:	ed95 fa08 	vldr	s30, [r5, #32]
 800c124:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c128:	edcd 7a05 	vstr	s15, [sp, #20]
 800c12c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c130:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c134:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c138:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c13c:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c140:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c144:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c148:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c14c:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c150:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c154:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c158:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c15c:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c160:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c164:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c168:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c16c:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c170:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c174:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c178:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c17c:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c180:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c184:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c188:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c18c:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c190:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c194:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c198:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c19c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c19e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c1a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c1a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	f8cc 3000 	str.w	r3, [ip]
 800c1b2:	4651      	mov	r1, sl
 800c1b4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c1be:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c1c2:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c1c6:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c1ca:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c1ce:	f00b f903 	bl	80173d8 <memset>
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c1d8:	a898      	add	r0, sp, #608	; 0x260
 800c1da:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c1de:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c1e2:	f00b f8eb 	bl	80173bc <memcpy>
 800c1e6:	4651      	mov	r1, sl
 800c1e8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c1f2:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c1f6:	f00b f8ef 	bl	80173d8 <memset>
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c200:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c202:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c206:	f00b f8d9 	bl	80173bc <memcpy>
 800c20a:	4651      	mov	r1, sl
 800c20c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c210:	4620      	mov	r0, r4
 800c212:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c216:	f00b f8df 	bl	80173d8 <memset>
 800c21a:	4621      	mov	r1, r4
 800c21c:	8037      	strh	r7, [r6, #0]
 800c21e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c222:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c226:	f00b f8c9 	bl	80173bc <memcpy>
 800c22a:	4651      	mov	r1, sl
 800c22c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c230:	4620      	mov	r0, r4
 800c232:	ed86 8a01 	vstr	s16, [r6, #4]
 800c236:	f00b f8cf 	bl	80173d8 <memset>
 800c23a:	4621      	mov	r1, r4
 800c23c:	802f      	strh	r7, [r5, #0]
 800c23e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c242:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c246:	f00b f8b9 	bl	80173bc <memcpy>
 800c24a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c24e:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c252:	2701      	movs	r7, #1
 800c254:	9600      	str	r6, [sp, #0]
 800c256:	9403      	str	r4, [sp, #12]
 800c258:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c35c <MFX_emptyAttitude+0x3e0>
 800c25c:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c360 <MFX_emptyAttitude+0x3e4>
 800c260:	ed85 8a01 	vstr	s16, [r5, #4]
 800c264:	483f      	ldr	r0, [pc, #252]	; (800c364 <MFX_emptyAttitude+0x3e8>)
 800c266:	4d40      	ldr	r5, [pc, #256]	; (800c368 <MFX_emptyAttitude+0x3ec>)
 800c268:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c38c <MFX_emptyAttitude+0x410>
 800c26c:	951c      	str	r5, [sp, #112]	; 0x70
 800c26e:	abf2      	add	r3, sp, #968	; 0x3c8
 800c270:	aa96      	add	r2, sp, #600	; 0x258
 800c272:	a90d      	add	r1, sp, #52	; 0x34
 800c274:	9017      	str	r0, [sp, #92]	; 0x5c
 800c276:	4d3d      	ldr	r5, [pc, #244]	; (800c36c <MFX_emptyAttitude+0x3f0>)
 800c278:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c27c:	4638      	mov	r0, r7
 800c27e:	ae27      	add	r6, sp, #156	; 0x9c
 800c280:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c284:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c288:	951b      	str	r5, [sp, #108]	; 0x6c
 800c28a:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c28e:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c292:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c296:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c29a:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c29e:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c2a2:	f7fe fecf 	bl	800b044 <DataHist_parameters>
 800c2a6:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c2a8:	4b31      	ldr	r3, [pc, #196]	; (800c370 <MFX_emptyAttitude+0x3f4>)
 800c2aa:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c2ae:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c2b2:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c2b6:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c2ba:	f8c8 300c 	str.w	r3, [r8, #12]
 800c2be:	4b2d      	ldr	r3, [pc, #180]	; (800c374 <MFX_emptyAttitude+0x3f8>)
 800c2c0:	f8c8 3014 	str.w	r3, [r8, #20]
 800c2c4:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c2c8:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c378 <MFX_emptyAttitude+0x3fc>
 800c2cc:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c37c <MFX_emptyAttitude+0x400>
 800c2d0:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c380 <MFX_emptyAttitude+0x404>
 800c2d4:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c384 <MFX_emptyAttitude+0x408>
 800c2d8:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c388 <MFX_emptyAttitude+0x40c>
 800c2dc:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c2e0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c390 <MFX_emptyAttitude+0x414>
 800c2e4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c394 <MFX_emptyAttitude+0x418>
 800c2e8:	edc8 2a06 	vstr	s5, [r8, #24]
 800c2ec:	f04f 0b00 	mov.w	fp, #0
 800c2f0:	f04f 0c00 	mov.w	ip, #0
 800c2f4:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c2f8:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c2fc:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c300:	ad2d      	add	r5, sp, #180	; 0xb4
 800c302:	469b      	mov	fp, r3
 800c304:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c398 <MFX_emptyAttitude+0x41c>
 800c308:	ed88 3a07 	vstr	s6, [r8, #28]
 800c30c:	f240 1301 	movw	r3, #257	; 0x101
 800c310:	edc8 3a08 	vstr	s7, [r8, #32]
 800c314:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c318:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c31c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c320:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c324:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c328:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c32c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c330:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c334:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c338:	f8c8 3000 	str.w	r3, [r8]
 800c33c:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c340:	ed88 8a02 	vstr	s16, [r8, #8]
 800c344:	ed88 8a04 	vstr	s16, [r8, #16]
 800c348:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c34c:	e028      	b.n	800c3a0 <MFX_emptyAttitude+0x424>
 800c34e:	bf00      	nop
 800c350:	0801a2f4 	.word	0x0801a2f4
 800c354:	00000000 	.word	0x00000000
 800c358:	447a0000 	.word	0x447a0000
 800c35c:	3e93ffa3 	.word	0x3e93ffa3
 800c360:	3e5cec8f 	.word	0x3e5cec8f
 800c364:	3ea25c13 	.word	0x3ea25c13
 800c368:	40a00000 	.word	0x40a00000
 800c36c:	3d57bb3d 	.word	0x3d57bb3d
 800c370:	01010100 	.word	0x01010100
 800c374:	41200000 	.word	0x41200000
 800c378:	3a9d4952 	.word	0x3a9d4952
 800c37c:	3ac49ba6 	.word	0x3ac49ba6
 800c380:	3b03126f 	.word	0x3b03126f
 800c384:	402ab021 	.word	0x402ab021
 800c388:	3a83126f 	.word	0x3a83126f
 800c38c:	3e006d36 	.word	0x3e006d36
 800c390:	3f639581 	.word	0x3f639581
 800c394:	3f13f7cf 	.word	0x3f13f7cf
 800c398:	3f2ac083 	.word	0x3f2ac083
 800c39c:	3f4ccccd 	.word	0x3f4ccccd
 800c3a0:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c3a2:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c3a6:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c3aa:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c3ae:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c3b2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c3b6:	ab33      	add	r3, sp, #204	; 0xcc
 800c3b8:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c3bc:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c3c0:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c3c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3c6:	ab36      	add	r3, sp, #216	; 0xd8
 800c3c8:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c3cc:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c3d0:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c3d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3d6:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c39c <MFX_emptyAttitude+0x420>
 800c3da:	4bd6      	ldr	r3, [pc, #856]	; (800c734 <MFX_emptyAttitude+0x7b8>)
 800c3dc:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c3e0:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c3e4:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c3e8:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c3ec:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c3f0:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c3f4:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c3f8:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c3fc:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c400:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c404:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c408:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c40c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c410:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c414:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c418:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c41c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c420:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c424:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c428:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c42c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c430:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c434:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c438:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c43c:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c440:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c444:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c448:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c44c:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c450:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c454:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c458:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c45c:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c460:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c464:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c468:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c46c:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c470:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c474:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c478:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c47c:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c480:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c484:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c488:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c48c:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c490:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c494:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c498:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c49c:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c4a0:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c4a4:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c4a8:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c4ac:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c4b0:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c4b4:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c4b8:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c4bc:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c4c0:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c4c4:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c4c8:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c4cc:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c4d0:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c4d4:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c4d8:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c4dc:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c4e0:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c4e4:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c4e8:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c4ec:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c4f0:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c4f4:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c4f8:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c4fc:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c500:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c504:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c508:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c50c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c510:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c514:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c518:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c51c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c520:	eddd 6a07 	vldr	s13, [sp, #28]
 800c524:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c528:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c52c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c530:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c534:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c538:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c53c:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c540:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c544:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c548:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c54c:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c550:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c554:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c558:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c55c:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c560:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c564:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c568:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c56c:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c570:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c574:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c578:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c57c:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c580:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c584:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c588:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c58c:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c590:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c594:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c598:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c59c:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c5a0:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c5a4:	eddd 7a05 	vldr	s15, [sp, #20]
 800c5a8:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c5ac:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c5b0:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c5b4:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c5b8:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c5bc:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c5c0:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c5c4:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c5c8:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c5cc:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c5d0:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c5d4:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c5d8:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c5dc:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c5e0:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c5e4:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c5e8:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c5ec:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c5f0:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c5f4:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c5f8:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c5fc:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c600:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c604:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c608:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c60c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c610:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c614:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c618:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c61c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c620:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c624:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c628:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c62c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c630:	7820      	ldrb	r0, [r4, #0]
 800c632:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c636:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c63a:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c63e:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c642:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c646:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c64a:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c64e:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c652:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c656:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c65a:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c65e:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c662:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c666:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c66a:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c66e:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c672:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c676:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c67a:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c67e:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c682:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c686:	f8cd e00c 	str.w	lr, [sp, #12]
 800c68a:	9500      	str	r5, [sp, #0]
 800c68c:	f7fe fcda 	bl	800b044 <DataHist_parameters>
 800c690:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c694:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c698:	9205      	str	r2, [sp, #20]
 800c69a:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c69e:	ed8b ba00 	vstr	s22, [fp]
 800c6a2:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c6a6:	ed83 ba00 	vstr	s22, [r3]
 800c6aa:	9b05      	ldr	r3, [sp, #20]
 800c6ac:	9106      	str	r1, [sp, #24]
 800c6ae:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c6b2:	ed89 ba00 	vstr	s22, [r9]
 800c6b6:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c6ba:	ed83 8a00 	vstr	s16, [r3]
 800c6be:	9b06      	ldr	r3, [sp, #24]
 800c6c0:	9207      	str	r2, [sp, #28]
 800c6c2:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c6c6:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c6ca:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c6ce:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c6d2:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c6d6:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c6da:	ed8e ba00 	vstr	s22, [lr]
 800c6de:	ed8c ba00 	vstr	s22, [ip]
 800c6e2:	ed87 ba00 	vstr	s22, [r7]
 800c6e6:	ed86 ba00 	vstr	s22, [r6]
 800c6ea:	ed85 ba00 	vstr	s22, [r5]
 800c6ee:	ed84 ba00 	vstr	s22, [r4]
 800c6f2:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c6f6:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c6fa:	ed83 ba00 	vstr	s22, [r3]
 800c6fe:	9b07      	ldr	r3, [sp, #28]
 800c700:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c704:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c708:	ed80 8a00 	vstr	s16, [r0]
 800c70c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c710:	ed81 ba00 	vstr	s22, [r1]
 800c714:	ed83 ba00 	vstr	s22, [r3]
 800c718:	230a      	movs	r3, #10
 800c71a:	ed82 ba00 	vstr	s22, [r2]
 800c71e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c722:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c726:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c72a:	ecbd 8b10 	vpop	{d8-d15}
 800c72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c732:	bf00      	nop
 800c734:	3f333333 	.word	0x3f333333

0800c738 <output_update>:
 800c738:	ed90 7a00 	vldr	s14, [r0]
 800c73c:	edd0 7a01 	vldr	s15, [r0, #4]
 800c740:	ed90 5a03 	vldr	s10, [r0, #12]
 800c744:	edd0 5a02 	vldr	s11, [r0, #8]
 800c748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c74c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c750:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c754:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c758:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c75c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c760:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c764:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c768:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c76c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c770:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c774:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c778:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c77c:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c780:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c784:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c788:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c78c:	460f      	mov	r7, r1
 800c78e:	4615      	mov	r5, r2
 800c790:	461e      	mov	r6, r3
 800c792:	f1bc 0f00 	cmp.w	ip, #0
 800c796:	d146      	bne.n	800c826 <output_update+0xee>
 800c798:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c79c:	eef1 6a66 	vneg.f32	s13, s13
 800c7a0:	edc3 7a01 	vstr	s15, [r3, #4]
 800c7a4:	edc3 6a00 	vstr	s13, [r3]
 800c7a8:	ed83 5a02 	vstr	s10, [r3, #8]
 800c7ac:	4662      	mov	r2, ip
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	f7ff f955 	bl	800ba60 <q2hpr>
 800c7b6:	edd5 6a01 	vldr	s13, [r5, #4]
 800c7ba:	ed95 7a00 	vldr	s14, [r5]
 800c7be:	edd5 7a02 	vldr	s15, [r5, #8]
 800c7c2:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800c8d4 <output_update+0x19c>
 800c7c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c7ca:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c7ce:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800c7d2:	ed85 7a00 	vstr	s14, [r5]
 800c7d6:	edc5 6a01 	vstr	s13, [r5, #4]
 800c7da:	edc5 7a02 	vstr	s15, [r5, #8]
 800c7de:	ed97 7a01 	vldr	s14, [r7, #4]
 800c7e2:	edd6 7a00 	vldr	s15, [r6]
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7ec:	edc8 7a00 	vstr	s15, [r8]
 800c7f0:	ed97 7a00 	vldr	s14, [r7]
 800c7f4:	edd6 7a01 	vldr	s15, [r6, #4]
 800c7f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7fc:	edc8 7a01 	vstr	s15, [r8, #4]
 800c800:	edd6 7a02 	vldr	s15, [r6, #8]
 800c804:	ed97 7a02 	vldr	s14, [r7, #8]
 800c808:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c80c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c810:	edd4 7a02 	vldr	s15, [r4, #8]
 800c814:	6863      	ldr	r3, [r4, #4]
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	eef1 7a67 	vneg.f32	s15, s15
 800c81c:	6062      	str	r2, [r4, #4]
 800c81e:	edc4 7a02 	vstr	s15, [r4, #8]
 800c822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c826:	f1bc 0f01 	cmp.w	ip, #1
 800c82a:	d015      	beq.n	800c858 <output_update+0x120>
 800c82c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c8d4 <output_update+0x19c>
 800c830:	edd2 6a00 	vldr	s13, [r2]
 800c834:	ed92 7a01 	vldr	s14, [r2, #4]
 800c838:	edd2 7a02 	vldr	s15, [r2, #8]
 800c83c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c840:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c844:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c848:	edc2 6a00 	vstr	s13, [r2]
 800c84c:	ed82 7a01 	vstr	s14, [r2, #4]
 800c850:	edc2 7a02 	vstr	s15, [r2, #8]
 800c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c85c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c860:	eef1 6a66 	vneg.f32	s13, s13
 800c864:	edc3 7a00 	vstr	s15, [r3]
 800c868:	ed83 6a02 	vstr	s12, [r3, #8]
 800c86c:	edc3 6a01 	vstr	s13, [r3, #4]
 800c870:	4662      	mov	r2, ip
 800c872:	4629      	mov	r1, r5
 800c874:	f7ff f8f4 	bl	800ba60 <q2hpr>
 800c878:	edd5 6a00 	vldr	s13, [r5]
 800c87c:	ed95 7a01 	vldr	s14, [r5, #4]
 800c880:	edd5 7a02 	vldr	s15, [r5, #8]
 800c884:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c8d4 <output_update+0x19c>
 800c888:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c88c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c890:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c894:	ed85 7a01 	vstr	s14, [r5, #4]
 800c898:	edc5 6a00 	vstr	s13, [r5]
 800c89c:	edc5 7a02 	vstr	s15, [r5, #8]
 800c8a0:	ed97 7a00 	vldr	s14, [r7]
 800c8a4:	edd6 7a00 	vldr	s15, [r6]
 800c8a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8ac:	edc8 7a00 	vstr	s15, [r8]
 800c8b0:	ed97 7a01 	vldr	s14, [r7, #4]
 800c8b4:	edd6 7a01 	vldr	s15, [r6, #4]
 800c8b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8bc:	edc8 7a01 	vstr	s15, [r8, #4]
 800c8c0:	edd6 7a02 	vldr	s15, [r6, #8]
 800c8c4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c8c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8cc:	edc8 7a02 	vstr	s15, [r8, #8]
 800c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d4:	42652ee1 	.word	0x42652ee1

0800c8d8 <kalman_3gyro.constprop.0>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	ed2d 8b10 	vpush	{d8-d15}
 800c8e0:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800c8e4:	edd2 9a02 	vldr	s19, [r2, #8]
 800c8e8:	edd2 8a03 	vldr	s17, [r2, #12]
 800c8ec:	edd2 6a04 	vldr	s13, [r2, #16]
 800c8f0:	ed92 6a05 	vldr	s12, [r2, #20]
 800c8f4:	6854      	ldr	r4, [r2, #4]
 800c8f6:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800c8fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c8fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c902:	4683      	mov	fp, r0
 800c904:	edd2 7a00 	vldr	s15, [r2]
 800c908:	48e3      	ldr	r0, [pc, #908]	; (800cc98 <kalman_3gyro.constprop.0+0x3c0>)
 800c90a:	9108      	str	r1, [sp, #32]
 800c90c:	904a      	str	r0, [sp, #296]	; 0x128
 800c90e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c912:	460d      	mov	r5, r1
 800c914:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800c918:	2100      	movs	r1, #0
 800c91a:	9328      	str	r3, [sp, #160]	; 0xa0
 800c91c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800c920:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800c924:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800c928:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800c92c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800c930:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c934:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800c938:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800c93c:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800c940:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800c944:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800c948:	946f      	str	r4, [sp, #444]	; 0x1bc
 800c94a:	9470      	str	r4, [sp, #448]	; 0x1c0
 800c94c:	9471      	str	r4, [sp, #452]	; 0x1c4
 800c94e:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800c952:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800c956:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800c95a:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800c95e:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800c962:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800c966:	eeb0 8a60 	vmov.f32	s16, s1
 800c96a:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800c96e:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800c972:	ed8d 1a07 	vstr	s2, [sp, #28]
 800c976:	f00a fd2f 	bl	80173d8 <memset>
 800c97a:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800c97e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c982:	600b      	str	r3, [r1, #0]
 800c984:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800c988:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800c98c:	600b      	str	r3, [r1, #0]
 800c98e:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800c992:	600b      	str	r3, [r1, #0]
 800c994:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800c998:	600b      	str	r3, [r1, #0]
 800c99a:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800c99e:	600b      	str	r3, [r1, #0]
 800c9a0:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800c9a4:	600b      	str	r3, [r1, #0]
 800c9a6:	2a00      	cmp	r2, #0
 800c9a8:	f001 82c2 	beq.w	800df30 <kalman_3gyro.constprop.0+0x1658>
 800c9ac:	ed95 5a02 	vldr	s10, [r5, #8]
 800c9b0:	edd5 5a01 	vldr	s11, [r5, #4]
 800c9b4:	ed95 3a00 	vldr	s6, [r5]
 800c9b8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800c9bc:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800c9c0:	ee35 4a05 	vadd.f32	s8, s10, s10
 800c9c4:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800c9c8:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c9cc:	ee63 7a27 	vmul.f32	s15, s6, s15
 800c9d0:	ee33 3a03 	vadd.f32	s6, s6, s6
 800c9d4:	9b08      	ldr	r3, [sp, #32]
 800c9d6:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800c9da:	ed82 4a00 	vstr	s8, [r2]
 800c9de:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800c9e2:	edc2 4a00 	vstr	s9, [r2]
 800c9e6:	ed93 6a05 	vldr	s12, [r3, #20]
 800c9ea:	edd3 6a04 	vldr	s13, [r3, #16]
 800c9ee:	ed93 7a03 	vldr	s14, [r3, #12]
 800c9f2:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800c9f6:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800c9fa:	ed82 5a00 	vstr	s10, [r2]
 800c9fe:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800ca02:	ed82 3a00 	vstr	s6, [r2]
 800ca06:	eef1 3a46 	vneg.f32	s7, s12
 800ca0a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800ca0e:	edc2 5a00 	vstr	s11, [r2]
 800ca12:	eeb1 4a66 	vneg.f32	s8, s13
 800ca16:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800ca1a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800ca1e:	edc2 7a00 	vstr	s15, [r2]
 800ca22:	ee34 3a04 	vadd.f32	s6, s8, s8
 800ca26:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800ca2a:	eef1 4a47 	vneg.f32	s9, s14
 800ca2e:	ed82 5a00 	vstr	s10, [r2]
 800ca32:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800ca36:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800ca3a:	ed81 3a00 	vstr	s6, [r1]
 800ca3e:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800ca42:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800ca46:	ed81 5a00 	vstr	s10, [r1]
 800ca4a:	ee77 7a07 	vadd.f32	s15, s14, s14
 800ca4e:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800ca52:	edc1 5a00 	vstr	s11, [r1]
 800ca56:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800ca5a:	edc1 7a00 	vstr	s15, [r1]
 800ca5e:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800ca62:	2300      	movs	r3, #0
 800ca64:	600b      	str	r3, [r1, #0]
 800ca66:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800ca6a:	ee76 2a06 	vadd.f32	s5, s12, s12
 800ca6e:	600b      	str	r3, [r1, #0]
 800ca70:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800ca74:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800ca78:	600b      	str	r3, [r1, #0]
 800ca7a:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800ca7e:	edc2 2a00 	vstr	s5, [r2]
 800ca82:	600b      	str	r3, [r1, #0]
 800ca84:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800ca88:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800ca8c:	600b      	str	r3, [r1, #0]
 800ca8e:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800ca92:	a87b      	add	r0, sp, #492	; 0x1ec
 800ca94:	600b      	str	r3, [r1, #0]
 800ca96:	2230      	movs	r2, #48	; 0x30
 800ca98:	2100      	movs	r1, #0
 800ca9a:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ca9e:	934b      	str	r3, [sp, #300]	; 0x12c
 800caa0:	934f      	str	r3, [sp, #316]	; 0x13c
 800caa2:	9353      	str	r3, [sp, #332]	; 0x14c
 800caa4:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800caa8:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800caac:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800cab0:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800cab4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800cab8:	942c      	str	r4, [sp, #176]	; 0xb0
 800caba:	f00a fc8d 	bl	80173d8 <memset>
 800cabe:	eddb 6a06 	vldr	s13, [fp, #24]
 800cac2:	ed9b 7a07 	vldr	s14, [fp, #28]
 800cac6:	eddb 7a08 	vldr	s15, [fp, #32]
 800caca:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800cace:	ee68 6a26 	vmul.f32	s13, s16, s13
 800cad2:	ee28 7a07 	vmul.f32	s14, s16, s14
 800cad6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cada:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800cade:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800cae2:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f043 84a8 	bne.w	801043c <kalman_3gyro.constprop.0+0x3b64>
 800caec:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	f043 81e7 	bne.w	800fec4 <kalman_3gyro.constprop.0+0x35ec>
 800caf6:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800cb00:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800cb04:	9310      	str	r3, [sp, #64]	; 0x40
 800cb06:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800cb0a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800cb0e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800cb12:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb14:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800cb18:	edd0 7a00 	vldr	s15, [r0]
 800cb1c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cb20:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cb24:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cb28:	ed93 6a00 	vldr	s12, [r3]
 800cb2c:	ed91 7a00 	vldr	s14, [r1]
 800cb30:	edd2 6a00 	vldr	s13, [r2]
 800cb34:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cb38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb42:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cb46:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cb4a:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cb4e:	933a      	str	r3, [sp, #232]	; 0xe8
 800cb50:	933b      	str	r3, [sp, #236]	; 0xec
 800cb52:	933c      	str	r3, [sp, #240]	; 0xf0
 800cb54:	933d      	str	r3, [sp, #244]	; 0xf4
 800cb56:	d14e      	bne.n	800cbf6 <kalman_3gyro.constprop.0+0x31e>
 800cb58:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb60:	d149      	bne.n	800cbf6 <kalman_3gyro.constprop.0+0x31e>
 800cb62:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6a:	d144      	bne.n	800cbf6 <kalman_3gyro.constprop.0+0x31e>
 800cb6c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb74:	d13f      	bne.n	800cbf6 <kalman_3gyro.constprop.0+0x31e>
 800cb76:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cb78:	9336      	str	r3, [sp, #216]	; 0xd8
 800cb7a:	7802      	ldrb	r2, [r0, #0]
 800cb7c:	9337      	str	r3, [sp, #220]	; 0xdc
 800cb7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb82:	9338      	str	r3, [sp, #224]	; 0xe0
 800cb84:	2300      	movs	r3, #0
 800cb86:	ed90 7a03 	vldr	s14, [r0, #12]
 800cb8a:	edd0 6a01 	vldr	s13, [r0, #4]
 800cb8e:	edd0 7a02 	vldr	s15, [r0, #8]
 800cb92:	9139      	str	r1, [sp, #228]	; 0xe4
 800cb94:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cb98:	2a00      	cmp	r2, #0
 800cb9a:	f003 8568 	beq.w	801066e <kalman_3gyro.constprop.0+0x3d96>
 800cb9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cba2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cba6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cbaa:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cbae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cbb6:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cbba:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cbbe:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800cbc8:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800cbcc:	f00a fc04 	bl	80173d8 <memset>
 800cbd0:	4b32      	ldr	r3, [pc, #200]	; (800cc9c <kalman_3gyro.constprop.0+0x3c4>)
 800cbd2:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800cbd6:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800cbda:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800cbde:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800cbe2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800cbe6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800cbea:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800cbee:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800cbf2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800cbf6:	9b08      	ldr	r3, [sp, #32]
 800cbf8:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cca0 <kalman_3gyro.constprop.0+0x3c8>
 800cbfc:	ed93 7a01 	vldr	s14, [r3, #4]
 800cc00:	edd3 5a00 	vldr	s11, [r3]
 800cc04:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc08:	ee67 6a07 	vmul.f32	s13, s14, s14
 800cc0c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cc10:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800cc14:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc1c:	f101 8127 	bmi.w	800de6e <kalman_3gyro.constprop.0+0x1596>
 800cc20:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800cc24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc28:	ee79 6a66 	vsub.f32	s13, s18, s13
 800cc2c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800cc30:	eef0 6ae6 	vabs.f32	s13, s13
 800cc34:	ee76 aaea 	vsub.f32	s21, s13, s21
 800cc38:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800cc3c:	ed93 5a04 	vldr	s10, [r3, #16]
 800cc40:	ed93 3a03 	vldr	s6, [r3, #12]
 800cc44:	edd3 1a05 	vldr	s3, [r3, #20]
 800cc48:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cca0 <kalman_3gyro.constprop.0+0x3c8>
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	ed95 ca00 	vldr	s24, [r5]
 800cc52:	ed93 ba00 	vldr	s22, [r3]
 800cc56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc5a:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800cc5e:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800cc62:	461e      	mov	r6, r3
 800cc64:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800cc68:	9502      	str	r5, [sp, #8]
 800cc6a:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800cc6e:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800cc72:	9327      	str	r3, [sp, #156]	; 0x9c
 800cc74:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800cc78:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800cc7c:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800cc80:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800cc84:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800cc88:	9501      	str	r5, [sp, #4]
 800cc8a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800cc8e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800cc92:	eee3 6a03 	vfma.f32	s13, s6, s6
 800cc96:	e009      	b.n	800ccac <kalman_3gyro.constprop.0+0x3d4>
 800cc98:	3a9d4952 	.word	0x3a9d4952
 800cc9c:	40a00000 	.word	0x40a00000
 800cca0:	3c23d70a 	.word	0x3c23d70a
 800cca4:	3dcccccd 	.word	0x3dcccccd
 800cca8:	4b000000 	.word	0x4b000000
 800ccac:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800ccb0:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800ccb4:	ee25 8a82 	vmul.f32	s16, s11, s4
 800ccb8:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800ccbc:	950c      	str	r5, [sp, #48]	; 0x30
 800ccbe:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800ccc2:	ee67 fa02 	vmul.f32	s31, s14, s4
 800ccc6:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ccca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccce:	bf58      	it	pl
 800ccd0:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800ccd4:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800ccd8:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800ccdc:	bf48      	it	mi
 800ccde:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800cca4 <kalman_3gyro.constprop.0+0x3cc>
 800cce2:	ed96 6a00 	vldr	s12, [r6]
 800cce6:	edda 4a00 	vldr	s9, [sl]
 800ccea:	ed93 fa00 	vldr	s30, [r3]
 800ccee:	ed90 ea00 	vldr	s28, [r0]
 800ccf2:	edd4 3a00 	vldr	s7, [r4]
 800ccf6:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800ccfa:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800ccfe:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800cd02:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd04:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800cd08:	961a      	str	r6, [sp, #104]	; 0x68
 800cd0a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800cd0e:	9611      	str	r6, [sp, #68]	; 0x44
 800cd10:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800cd14:	9618      	str	r6, [sp, #96]	; 0x60
 800cd16:	9e02      	ldr	r6, [sp, #8]
 800cd18:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800cd1c:	9303      	str	r3, [sp, #12]
 800cd1e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800cd22:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cd26:	ee23 3a26 	vmul.f32	s6, s6, s13
 800cd2a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800cd2e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800cd32:	edd1 6a00 	vldr	s13, [r1]
 800cd36:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800cd3a:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800cd3e:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800cd42:	edcd 6a05 	vstr	s13, [sp, #20]
 800cd46:	ed8d 6a06 	vstr	s12, [sp, #24]
 800cd4a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800cd4e:	ed92 6a00 	vldr	s12, [r2]
 800cd52:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800cd56:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800cd5a:	edd6 2a00 	vldr	s5, [r6]
 800cd5e:	eddc 4a00 	vldr	s9, [ip]
 800cd62:	9e01      	ldr	r6, [sp, #4]
 800cd64:	edd0 ca00 	vldr	s25, [r0]
 800cd68:	ed96 1a00 	vldr	s2, [r6]
 800cd6c:	9803      	ldr	r0, [sp, #12]
 800cd6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cd70:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800cd74:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800cd78:	eddc 0a00 	vldr	s1, [ip]
 800cd7c:	ed96 da00 	vldr	s26, [r6]
 800cd80:	edd0 4a00 	vldr	s9, [r0]
 800cd84:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cd86:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800cd8a:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800cd8e:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800cd92:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800cd96:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800cd9a:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800cd9e:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800cda2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800cda6:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800cdaa:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800cdae:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800cdb2:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800cdb6:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800cdba:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800cdbe:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800cdc2:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800cdc6:	edd6 4a00 	vldr	s9, [r6]
 800cdca:	edd9 6a00 	vldr	s13, [r9]
 800cdce:	edde ba00 	vldr	s23, [lr]
 800cdd2:	ed95 4a00 	vldr	s8, [r5]
 800cdd6:	ed94 0a00 	vldr	s0, [r4]
 800cdda:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800cdde:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800cde2:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800cde6:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800cdea:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800cdee:	edd9 ea00 	vldr	s29, [r9]
 800cdf2:	edd1 2a00 	vldr	s5, [r1]
 800cdf6:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800cdfa:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800cdfe:	ed92 1a00 	vldr	s2, [r2]
 800ce02:	edd3 ca00 	vldr	s25, [r3]
 800ce06:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800ce0a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800ce0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce10:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ce12:	edd3 4a00 	vldr	s9, [r3]
 800ce16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce18:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800ce1c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800ce20:	edd3 fa00 	vldr	s31, [r3]
 800ce24:	eef0 4a6f 	vmov.f32	s9, s31
 800ce28:	edd6 fa00 	vldr	s31, [r6]
 800ce2c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ce2e:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800ce32:	eea3 5a08 	vfma.f32	s10, s6, s16
 800ce36:	ed96 3a00 	vldr	s6, [r6]
 800ce3a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ce3c:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800ce40:	ee25 8aad 	vmul.f32	s16, s11, s27
 800ce44:	eddd 5a06 	vldr	s11, [sp, #24]
 800ce48:	edd6 fa00 	vldr	s31, [r6]
 800ce4c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ce4e:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800ce52:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800ce56:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800ce5a:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800ce5e:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800ce62:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800ce66:	edd8 5a00 	vldr	s11, [r8]
 800ce6a:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800ce6e:	eef0 5a44 	vmov.f32	s11, s8
 800ce72:	ed97 4a00 	vldr	s8, [r7]
 800ce76:	ee76 6aae 	vadd.f32	s13, s13, s29
 800ce7a:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800ce7e:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800ce82:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800ce86:	eede 2a83 	vfnms.f32	s5, s29, s6
 800ce8a:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800ce8e:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800ce92:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800ce96:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800ce9a:	eede 4a03 	vfnms.f32	s9, s28, s6
 800ce9e:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800cea2:	ee72 2aac 	vadd.f32	s5, s5, s25
 800cea6:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800ceaa:	edd6 ca00 	vldr	s25, [r6]
 800ceae:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800ceb2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ceb4:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800ceb8:	ed96 ea00 	vldr	s28, [r6]
 800cebc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cebe:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800cec2:	ed96 da00 	vldr	s26, [r6]
 800cec6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800cec8:	ee7f faac 	vadd.f32	s31, s31, s25
 800cecc:	edd6 ca00 	vldr	s25, [r6]
 800ced0:	eedd ca03 	vfnms.f32	s25, s26, s6
 800ced4:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800ced8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ceda:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800cede:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800cee2:	eee0 5a03 	vfma.f32	s11, s0, s6
 800cee6:	eddd ba05 	vldr	s23, [sp, #20]
 800ceea:	ed96 0a00 	vldr	s0, [r6]
 800ceee:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800cef0:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800cef4:	eeee fa03 	vfma.f32	s31, s28, s6
 800cef8:	eead 6a03 	vfma.f32	s12, s26, s6
 800cefc:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800cf00:	eea0 4a03 	vfma.f32	s8, s0, s6
 800cf04:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800cf08:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800cca4 <kalman_3gyro.constprop.0+0x3cc>
 800cf0c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800cf10:	ee2c ca00 	vmul.f32	s24, s24, s0
 800cf14:	ee6b ba80 	vmul.f32	s23, s23, s0
 800cf18:	ed96 1a00 	vldr	s2, [r6]
 800cf1c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800cf20:	eee0 4a83 	vfma.f32	s9, s1, s6
 800cf24:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800cf28:	ee6f faab 	vmul.f32	s31, s31, s23
 800cf2c:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800cf30:	ee60 6a26 	vmul.f32	s13, s0, s13
 800cf34:	eddc 0a00 	vldr	s1, [ip]
 800cf38:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800cf3c:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800cf40:	ee60 5a25 	vmul.f32	s11, s0, s11
 800cf44:	eea0 1a83 	vfma.f32	s2, s1, s6
 800cf48:	ee26 6a06 	vmul.f32	s12, s12, s12
 800cf4c:	ee6f faaf 	vmul.f32	s31, s31, s31
 800cf50:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800cf54:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800cf58:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cf5c:	eee4 fa04 	vfma.f32	s31, s8, s8
 800cf60:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800cf64:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800cf68:	ee60 2a22 	vmul.f32	s5, s0, s5
 800cf6c:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800cf70:	eee1 fa01 	vfma.f32	s31, s2, s2
 800cf74:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800cf78:	eea1 5a82 	vfma.f32	s10, s3, s4
 800cf7c:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800cca8 <kalman_3gyro.constprop.0+0x3d0>
 800cf80:	eef0 4ac8 	vabs.f32	s9, s16
 800cf84:	eef4 4ae5 	vcmpe.f32	s9, s11
 800cf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8c:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800cf90:	eeb1 dac6 	vsqrt.f32	s26, s12
 800cf94:	eef1 caef 	vsqrt.f32	s25, s31
 800cf98:	eef1 bae6 	vsqrt.f32	s23, s13
 800cf9c:	ee67 daad 	vmul.f32	s27, s15, s27
 800cfa0:	eeb0 ca45 	vmov.f32	s24, s10
 800cfa4:	d517      	bpl.n	800cfd6 <kalman_3gyro.constprop.0+0x6fe>
 800cfa6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cfaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb2:	f2c1 806f 	blt.w	800e094 <kalman_3gyro.constprop.0+0x17bc>
 800cfb6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cfba:	ee17 0a90 	vmov	r0, s15
 800cfbe:	f7f3 fac3 	bl	8000548 <__aeabi_f2d>
 800cfc2:	ec41 0b10 	vmov	d0, r0, r1
 800cfc6:	f008 fb3f 	bl	8015648 <floor>
 800cfca:	ec51 0b10 	vmov	r0, r1, d0
 800cfce:	f7f3 fdeb 	bl	8000ba8 <__aeabi_d2f>
 800cfd2:	ee08 0a10 	vmov	s16, r0
 800cfd6:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800cca8 <kalman_3gyro.constprop.0+0x3d0>
 800cfda:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800cfde:	eef0 6ace 	vabs.f32	s13, s28
 800cfe2:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfea:	d517      	bpl.n	800d01c <kalman_3gyro.constprop.0+0x744>
 800cfec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cff0:	eeb4 eae7 	vcmpe.f32	s28, s15
 800cff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff8:	f2c1 8040 	blt.w	800e07c <kalman_3gyro.constprop.0+0x17a4>
 800cffc:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d000:	ee17 0a90 	vmov	r0, s15
 800d004:	f7f3 faa0 	bl	8000548 <__aeabi_f2d>
 800d008:	ec41 0b10 	vmov	d0, r0, r1
 800d00c:	f008 fb1c 	bl	8015648 <floor>
 800d010:	ec51 0b10 	vmov	r0, r1, d0
 800d014:	f7f3 fdc8 	bl	8000ba8 <__aeabi_d2f>
 800d018:	ee0e 0a10 	vmov	s28, r0
 800d01c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800cca8 <kalman_3gyro.constprop.0+0x3d0>
 800d020:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d024:	eeb0 7aed 	vabs.f32	s14, s27
 800d028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d030:	d517      	bpl.n	800d062 <kalman_3gyro.constprop.0+0x78a>
 800d032:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d036:	eef4 dae7 	vcmpe.f32	s27, s15
 800d03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03e:	f2c1 8011 	blt.w	800e064 <kalman_3gyro.constprop.0+0x178c>
 800d042:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d046:	ee17 0a90 	vmov	r0, s15
 800d04a:	f7f3 fa7d 	bl	8000548 <__aeabi_f2d>
 800d04e:	ec41 0b10 	vmov	d0, r0, r1
 800d052:	f008 faf9 	bl	8015648 <floor>
 800d056:	ec51 0b10 	vmov	r0, r1, d0
 800d05a:	f7f3 fda5 	bl	8000ba8 <__aeabi_d2f>
 800d05e:	ee0d 0a90 	vmov	s27, r0
 800d062:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d066:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d06a:	1e61      	subs	r1, r4, #1
 800d06c:	b249      	sxtb	r1, r1
 800d06e:	2900      	cmp	r1, #0
 800d070:	dd1a      	ble.n	800d0a8 <kalman_3gyro.constprop.0+0x7d0>
 800d072:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d076:	1ea0      	subs	r0, r4, #2
 800d078:	0089      	lsls	r1, r1, #2
 800d07a:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d07e:	b2c0      	uxtb	r0, r0
 800d080:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d084:	440a      	add	r2, r1
 800d086:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d08a:	445b      	add	r3, fp
 800d08c:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d090:	6819      	ldr	r1, [r3, #0]
 800d092:	6858      	ldr	r0, [r3, #4]
 800d094:	60d9      	str	r1, [r3, #12]
 800d096:	6899      	ldr	r1, [r3, #8]
 800d098:	6118      	str	r0, [r3, #16]
 800d09a:	6159      	str	r1, [r3, #20]
 800d09c:	3b0c      	subs	r3, #12
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d1f6      	bne.n	800d090 <kalman_3gyro.constprop.0+0x7b8>
 800d0a2:	9b04      	ldr	r3, [sp, #16]
 800d0a4:	ed93 ba00 	vldr	s22, [r3]
 800d0a8:	ed88 8a00 	vstr	s16, [r8]
 800d0ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0b0:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d0b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d0b6:	ed83 ea00 	vstr	s28, [r3]
 800d0ba:	9b01      	ldr	r3, [sp, #4]
 800d0bc:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d354 <kalman_3gyro.constprop.0+0xa7c>
 800d0c0:	edc3 da00 	vstr	s27, [r3]
 800d0c4:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	429c      	cmp	r4, r3
 800d0ce:	bf28      	it	cs
 800d0d0:	461c      	movcs	r4, r3
 800d0d2:	9b08      	ldr	r3, [sp, #32]
 800d0d4:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d0d8:	edd3 da03 	vldr	s27, [r3, #12]
 800d0dc:	ed93 ba04 	vldr	s22, [r3, #16]
 800d0e0:	edd3 6a05 	vldr	s13, [r3, #20]
 800d0e4:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d0e8:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d0ec:	eeb0 7aed 	vabs.f32	s14, s27
 800d0f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f8:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d0fc:	d517      	bpl.n	800d12e <kalman_3gyro.constprop.0+0x856>
 800d0fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d102:	eef4 dae7 	vcmpe.f32	s27, s15
 800d106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10a:	f2c0 879f 	blt.w	800e04c <kalman_3gyro.constprop.0+0x1774>
 800d10e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d112:	ee17 0a90 	vmov	r0, s15
 800d116:	f7f3 fa17 	bl	8000548 <__aeabi_f2d>
 800d11a:	ec41 0b10 	vmov	d0, r0, r1
 800d11e:	f008 fa93 	bl	8015648 <floor>
 800d122:	ec51 0b10 	vmov	r0, r1, d0
 800d126:	f7f3 fd3f 	bl	8000ba8 <__aeabi_d2f>
 800d12a:	ee0d 0a90 	vmov	s27, r0
 800d12e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d354 <kalman_3gyro.constprop.0+0xa7c>
 800d132:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d136:	eeb0 7acb 	vabs.f32	s14, s22
 800d13a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d142:	d517      	bpl.n	800d174 <kalman_3gyro.constprop.0+0x89c>
 800d144:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d148:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d150:	f2c0 8770 	blt.w	800e034 <kalman_3gyro.constprop.0+0x175c>
 800d154:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d158:	ee17 0a90 	vmov	r0, s15
 800d15c:	f7f3 f9f4 	bl	8000548 <__aeabi_f2d>
 800d160:	ec41 0b10 	vmov	d0, r0, r1
 800d164:	f008 fa70 	bl	8015648 <floor>
 800d168:	ec51 0b10 	vmov	r0, r1, d0
 800d16c:	f7f3 fd1c 	bl	8000ba8 <__aeabi_d2f>
 800d170:	ee0b 0a10 	vmov	s22, r0
 800d174:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d354 <kalman_3gyro.constprop.0+0xa7c>
 800d178:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d17c:	eeb0 7ac8 	vabs.f32	s14, s16
 800d180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d188:	d517      	bpl.n	800d1ba <kalman_3gyro.constprop.0+0x8e2>
 800d18a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d18e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d196:	f2c0 8741 	blt.w	800e01c <kalman_3gyro.constprop.0+0x1744>
 800d19a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d19e:	ee17 0a90 	vmov	r0, s15
 800d1a2:	f7f3 f9d1 	bl	8000548 <__aeabi_f2d>
 800d1a6:	ec41 0b10 	vmov	d0, r0, r1
 800d1aa:	f008 fa4d 	bl	8015648 <floor>
 800d1ae:	ec51 0b10 	vmov	r0, r1, d0
 800d1b2:	f7f3 fcf9 	bl	8000ba8 <__aeabi_d2f>
 800d1b6:	ee08 0a10 	vmov	s16, r0
 800d1ba:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d1be:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d1c2:	1e61      	subs	r1, r4, #1
 800d1c4:	b249      	sxtb	r1, r1
 800d1c6:	2900      	cmp	r1, #0
 800d1c8:	dd17      	ble.n	800d1fa <kalman_3gyro.constprop.0+0x922>
 800d1ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d1ce:	1ea2      	subs	r2, r4, #2
 800d1d0:	0089      	lsls	r1, r1, #2
 800d1d2:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d1d6:	b2d2      	uxtb	r2, r2
 800d1d8:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d1dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d1e0:	4401      	add	r1, r0
 800d1e2:	445b      	add	r3, fp
 800d1e4:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	6858      	ldr	r0, [r3, #4]
 800d1ec:	60da      	str	r2, [r3, #12]
 800d1ee:	689a      	ldr	r2, [r3, #8]
 800d1f0:	6118      	str	r0, [r3, #16]
 800d1f2:	615a      	str	r2, [r3, #20]
 800d1f4:	3b0c      	subs	r3, #12
 800d1f6:	4299      	cmp	r1, r3
 800d1f8:	d1f6      	bne.n	800d1e8 <kalman_3gyro.constprop.0+0x910>
 800d1fa:	9b02      	ldr	r3, [sp, #8]
 800d1fc:	edc7 da00 	vstr	s27, [r7]
 800d200:	ed83 ba00 	vstr	s22, [r3]
 800d204:	9b03      	ldr	r3, [sp, #12]
 800d206:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d354 <kalman_3gyro.constprop.0+0xa7c>
 800d20a:	ed83 8a00 	vstr	s16, [r3]
 800d20e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d212:	3301      	adds	r3, #1
 800d214:	b2db      	uxtb	r3, r3
 800d216:	429c      	cmp	r4, r3
 800d218:	bf28      	it	cs
 800d21a:	461c      	movcs	r4, r3
 800d21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d21e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d222:	ed93 7a00 	vldr	s14, [r3]
 800d226:	9b08      	ldr	r3, [sp, #32]
 800d228:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d22c:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d230:	edd3 da06 	vldr	s27, [r3, #24]
 800d234:	ed93 ba07 	vldr	s22, [r3, #28]
 800d238:	edd3 6a08 	vldr	s13, [r3, #32]
 800d23c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d240:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d244:	eeb0 7aed 	vabs.f32	s14, s27
 800d248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d250:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d254:	d517      	bpl.n	800d286 <kalman_3gyro.constprop.0+0x9ae>
 800d256:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d25a:	eef4 dae7 	vcmpe.f32	s27, s15
 800d25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d262:	f2c0 86cf 	blt.w	800e004 <kalman_3gyro.constprop.0+0x172c>
 800d266:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d26a:	ee17 0a90 	vmov	r0, s15
 800d26e:	f7f3 f96b 	bl	8000548 <__aeabi_f2d>
 800d272:	ec41 0b10 	vmov	d0, r0, r1
 800d276:	f008 f9e7 	bl	8015648 <floor>
 800d27a:	ec51 0b10 	vmov	r0, r1, d0
 800d27e:	f7f3 fc93 	bl	8000ba8 <__aeabi_d2f>
 800d282:	ee0d 0a90 	vmov	s27, r0
 800d286:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d354 <kalman_3gyro.constprop.0+0xa7c>
 800d28a:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d28e:	eeb0 7acb 	vabs.f32	s14, s22
 800d292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d29a:	d517      	bpl.n	800d2cc <kalman_3gyro.constprop.0+0x9f4>
 800d29c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2a0:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a8:	f2c0 86a0 	blt.w	800dfec <kalman_3gyro.constprop.0+0x1714>
 800d2ac:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d2b0:	ee17 0a90 	vmov	r0, s15
 800d2b4:	f7f3 f948 	bl	8000548 <__aeabi_f2d>
 800d2b8:	ec41 0b10 	vmov	d0, r0, r1
 800d2bc:	f008 f9c4 	bl	8015648 <floor>
 800d2c0:	ec51 0b10 	vmov	r0, r1, d0
 800d2c4:	f7f3 fc70 	bl	8000ba8 <__aeabi_d2f>
 800d2c8:	ee0b 0a10 	vmov	s22, r0
 800d2cc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d354 <kalman_3gyro.constprop.0+0xa7c>
 800d2d0:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d2d4:	eeb0 7ac8 	vabs.f32	s14, s16
 800d2d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e0:	d517      	bpl.n	800d312 <kalman_3gyro.constprop.0+0xa3a>
 800d2e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ee:	f2c0 8671 	blt.w	800dfd4 <kalman_3gyro.constprop.0+0x16fc>
 800d2f2:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d2f6:	ee17 0a90 	vmov	r0, s15
 800d2fa:	f7f3 f925 	bl	8000548 <__aeabi_f2d>
 800d2fe:	ec41 0b10 	vmov	d0, r0, r1
 800d302:	f008 f9a1 	bl	8015648 <floor>
 800d306:	ec51 0b10 	vmov	r0, r1, d0
 800d30a:	f7f3 fc4d 	bl	8000ba8 <__aeabi_d2f>
 800d30e:	ee08 0a10 	vmov	s16, r0
 800d312:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d316:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d31a:	1e63      	subs	r3, r4, #1
 800d31c:	b25b      	sxtb	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	dd1c      	ble.n	800d35c <kalman_3gyro.constprop.0+0xa84>
 800d322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d326:	1ea2      	subs	r2, r4, #2
 800d328:	0099      	lsls	r1, r3, #2
 800d32a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d32e:	b2d2      	uxtb	r2, r2
 800d330:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d334:	4408      	add	r0, r1
 800d336:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d33a:	445b      	add	r3, fp
 800d33c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	6859      	ldr	r1, [r3, #4]
 800d344:	60da      	str	r2, [r3, #12]
 800d346:	689a      	ldr	r2, [r3, #8]
 800d348:	6119      	str	r1, [r3, #16]
 800d34a:	615a      	str	r2, [r3, #20]
 800d34c:	3b0c      	subs	r3, #12
 800d34e:	4283      	cmp	r3, r0
 800d350:	d1f6      	bne.n	800d340 <kalman_3gyro.constprop.0+0xa68>
 800d352:	e003      	b.n	800d35c <kalman_3gyro.constprop.0+0xa84>
 800d354:	4b000000 	.word	0x4b000000
 800d358:	00000000 	.word	0x00000000
 800d35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d35e:	edc3 da00 	vstr	s27, [r3]
 800d362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d364:	ed83 ba00 	vstr	s22, [r3]
 800d368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d36a:	ed83 8a00 	vstr	s16, [r3]
 800d36e:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d372:	3301      	adds	r3, #1
 800d374:	b2db      	uxtb	r3, r3
 800d376:	429c      	cmp	r4, r3
 800d378:	bf28      	it	cs
 800d37a:	461c      	movcs	r4, r3
 800d37c:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d380:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d384:	aa54      	add	r2, sp, #336	; 0x150
 800d386:	a92d      	add	r1, sp, #180	; 0xb4
 800d388:	a830      	add	r0, sp, #192	; 0xc0
 800d38a:	461c      	mov	r4, r3
 800d38c:	9314      	str	r3, [sp, #80]	; 0x50
 800d38e:	f7fe fa27 	bl	800b7e0 <getRotationMatrix>
 800d392:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d396:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d39a:	6820      	ldr	r0, [r4, #0]
 800d39c:	6861      	ldr	r1, [r4, #4]
 800d39e:	68a2      	ldr	r2, [r4, #8]
 800d3a0:	68e3      	ldr	r3, [r4, #12]
 800d3a2:	4635      	mov	r5, r6
 800d3a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d3a6:	3410      	adds	r4, #16
 800d3a8:	42bc      	cmp	r4, r7
 800d3aa:	462e      	mov	r6, r5
 800d3ac:	d1f5      	bne.n	800d39a <kalman_3gyro.constprop.0+0xac2>
 800d3ae:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d3b2:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d3b6:	6820      	ldr	r0, [r4, #0]
 800d3b8:	6028      	str	r0, [r5, #0]
 800d3ba:	eef0 7ae7 	vabs.f32	s15, s15
 800d3be:	eeb0 7ac7 	vabs.f32	s14, s14
 800d3c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ca:	f140 85a4 	bpl.w	800df16 <kalman_3gyro.constprop.0+0x163e>
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	2706      	movs	r7, #6
 800d3d2:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d3d6:	2604      	movs	r6, #4
 800d3d8:	2400      	movs	r4, #0
 800d3da:	eef0 7a47 	vmov.f32	s15, s14
 800d3de:	4632      	mov	r2, r6
 800d3e0:	46a2      	mov	sl, r4
 800d3e2:	2107      	movs	r1, #7
 800d3e4:	f04f 0c01 	mov.w	ip, #1
 800d3e8:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d3ec:	eeb0 7ac7 	vabs.f32	s14, s14
 800d3f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f8:	f340 85ae 	ble.w	800df58 <kalman_3gyro.constprop.0+0x1680>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	2007      	movs	r0, #7
 800d400:	2108      	movs	r1, #8
 800d402:	9301      	str	r3, [sp, #4]
 800d404:	461c      	mov	r4, r3
 800d406:	9002      	str	r0, [sp, #8]
 800d408:	460a      	mov	r2, r1
 800d40a:	2306      	movs	r3, #6
 800d40c:	2003      	movs	r0, #3
 800d40e:	2605      	movs	r6, #5
 800d410:	f04f 0800 	mov.w	r8, #0
 800d414:	f04f 0a01 	mov.w	sl, #1
 800d418:	f04f 0c02 	mov.w	ip, #2
 800d41c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d41e:	442c      	add	r4, r5
 800d420:	442a      	add	r2, r5
 800d422:	edd4 6a00 	vldr	s13, [r4]
 800d426:	ed92 7a00 	vldr	s14, [r2]
 800d42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d42e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d432:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d436:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d43a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d43e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d442:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d446:	970c      	str	r7, [sp, #48]	; 0x30
 800d448:	9f01      	ldr	r7, [sp, #4]
 800d44a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d44e:	00b6      	lsls	r6, r6, #2
 800d450:	960a      	str	r6, [sp, #40]	; 0x28
 800d452:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d456:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d45a:	edc4 7a00 	vstr	s15, [r4]
 800d45e:	edd2 7a00 	vldr	s15, [r2]
 800d462:	ed99 7a00 	vldr	s14, [r9]
 800d466:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d46a:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d46e:	9204      	str	r2, [sp, #16]
 800d470:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d474:	9205      	str	r2, [sp, #20]
 800d476:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d47a:	9209      	str	r2, [sp, #36]	; 0x24
 800d47c:	00ba      	lsls	r2, r7, #2
 800d47e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d480:	9206      	str	r2, [sp, #24]
 800d482:	0080      	lsls	r0, r0, #2
 800d484:	9003      	str	r0, [sp, #12]
 800d486:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d48a:	0089      	lsls	r1, r1, #2
 800d48c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d48e:	edc9 6a00 	vstr	s13, [r9]
 800d492:	ed94 6a00 	vldr	s12, [r4]
 800d496:	ed97 7a00 	vldr	s14, [r7]
 800d49a:	edd5 7a00 	vldr	s15, [r5]
 800d49e:	9902      	ldr	r1, [sp, #8]
 800d4a0:	9a02      	ldr	r2, [sp, #8]
 800d4a2:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d4a6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d4aa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d4ae:	0092      	lsls	r2, r2, #2
 800d4b0:	edc5 7a00 	vstr	s15, [r5]
 800d4b4:	ed97 7a00 	vldr	s14, [r7]
 800d4b8:	edde 7a00 	vldr	s15, [lr]
 800d4bc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	edce 7a00 	vstr	s15, [lr]
 800d4c6:	edd0 5a00 	vldr	s11, [r0]
 800d4ca:	ed91 7a00 	vldr	s14, [r1]
 800d4ce:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d4d2:	eef0 7ae7 	vabs.f32	s15, s15
 800d4d6:	ed81 7a00 	vstr	s14, [r1]
 800d4da:	ed90 6a00 	vldr	s12, [r0]
 800d4de:	ed96 7a00 	vldr	s14, [r6]
 800d4e2:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d4e6:	ed86 7a00 	vstr	s14, [r6]
 800d4ea:	ed95 7a00 	vldr	s14, [r5]
 800d4ee:	eeb0 7ac7 	vabs.f32	s14, s14
 800d4f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fa:	dd10      	ble.n	800d51e <kalman_3gyro.constprop.0+0xc46>
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	46c2      	mov	sl, r8
 800d500:	4690      	mov	r8, r2
 800d502:	461a      	mov	r2, r3
 800d504:	9b01      	ldr	r3, [sp, #4]
 800d506:	9902      	ldr	r1, [sp, #8]
 800d508:	9803      	ldr	r0, [sp, #12]
 800d50a:	9006      	str	r0, [sp, #24]
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	9303      	str	r3, [sp, #12]
 800d510:	008b      	lsls	r3, r1, #2
 800d512:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d516:	9105      	str	r1, [sp, #20]
 800d518:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d51c:	9104      	str	r1, [sp, #16]
 800d51e:	9903      	ldr	r1, [sp, #12]
 800d520:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d524:	4401      	add	r1, r0
 800d526:	460c      	mov	r4, r1
 800d528:	9906      	ldr	r1, [sp, #24]
 800d52a:	ed94 7a00 	vldr	s14, [r4]
 800d52e:	4401      	add	r1, r0
 800d530:	edd1 7a00 	vldr	s15, [r1]
 800d534:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d538:	4608      	mov	r0, r1
 800d53a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d53e:	440a      	add	r2, r1
 800d540:	440b      	add	r3, r1
 800d542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d544:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d548:	4429      	add	r1, r5
 800d54a:	460d      	mov	r5, r1
 800d54c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d54e:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d552:	4431      	add	r1, r6
 800d554:	468e      	mov	lr, r1
 800d556:	ed84 3a00 	vstr	s6, [r4]
 800d55a:	ed92 7a00 	vldr	s14, [r2]
 800d55e:	edd3 7a00 	vldr	s15, [r3]
 800d562:	9904      	ldr	r1, [sp, #16]
 800d564:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d568:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d56c:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d570:	440e      	add	r6, r1
 800d572:	1879      	adds	r1, r7, r1
 800d574:	edc3 7a00 	vstr	s15, [r3]
 800d578:	9101      	str	r1, [sp, #4]
 800d57a:	9b05      	ldr	r3, [sp, #20]
 800d57c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d57e:	edd2 0a00 	vldr	s1, [r2]
 800d582:	ed95 1a00 	vldr	s2, [r5]
 800d586:	ed9e 2a00 	vldr	s4, [lr]
 800d58a:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d58e:	edd6 6a00 	vldr	s13, [r6]
 800d592:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d596:	1874      	adds	r4, r6, r1
 800d598:	18f7      	adds	r7, r6, r3
 800d59a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d59e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d5a2:	eb06 0903 	add.w	r9, r6, r3
 800d5a6:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d5aa:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d5ae:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d5b2:	4633      	mov	r3, r6
 800d5b4:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d5b8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d5bc:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d5c0:	448c      	add	ip, r1
 800d5c2:	9901      	ldr	r1, [sp, #4]
 800d5c4:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d5c8:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d5cc:	ed94 7a00 	vldr	s14, [r4]
 800d5d0:	ed93 6a00 	vldr	s12, [r3]
 800d5d4:	edd0 7a00 	vldr	s15, [r0]
 800d5d8:	ed99 8a00 	vldr	s16, [r9]
 800d5dc:	ed91 ba00 	vldr	s22, [r1]
 800d5e0:	ed97 4a00 	vldr	s8, [r7]
 800d5e4:	edd6 4a00 	vldr	s9, [r6]
 800d5e8:	eddc da00 	vldr	s27, [ip]
 800d5ec:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d5f0:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d5f4:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d5f8:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d5fc:	46a2      	mov	sl, r4
 800d5fe:	4613      	mov	r3, r2
 800d600:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d604:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d608:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d60c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d610:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d614:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d618:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d61c:	ed94 5a00 	vldr	s10, [r4]
 800d620:	edda 3a00 	vldr	s7, [sl]
 800d624:	edd2 5a00 	vldr	s11, [r2]
 800d628:	edd3 7a00 	vldr	s15, [r3]
 800d62c:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d630:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d634:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d638:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d63c:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d640:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d644:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d648:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d64c:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d650:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d654:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d658:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d65c:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d660:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d664:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d668:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d66c:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d670:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d674:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d678:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d67c:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d680:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d684:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d688:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d68c:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d690:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d694:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d698:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d69c:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d6a0:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a8:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d6ac:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d6b0:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d6b4:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d6b8:	bfc8      	it	gt
 800d6ba:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d6be:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d6c2:	bfcc      	ite	gt
 800d6c4:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d6c8:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d358 <kalman_3gyro.constprop.0+0xa80>
 800d6cc:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d4:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d6d8:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d6dc:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d6e0:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d6e4:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d6e8:	f100 84e4 	bmi.w	800e0b4 <kalman_3gyro.constprop.0+0x17dc>
 800d6ec:	bfd8      	it	le
 800d6ee:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d6f2:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d6f6:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d6fa:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d6fe:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d702:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d70e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d712:	bf84      	itt	hi
 800d714:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d718:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d71c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d720:	bf8c      	ite	hi
 800d722:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d726:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800daa8 <kalman_3gyro.constprop.0+0x11d0>
 800d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72e:	f100 84bd 	bmi.w	800e0ac <kalman_3gyro.constprop.0+0x17d4>
 800d732:	bfd8      	it	le
 800d734:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d738:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d73c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d744:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d750:	bf84      	itt	hi
 800d752:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d756:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d75a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d75e:	bf8c      	ite	hi
 800d760:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d764:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800daa8 <kalman_3gyro.constprop.0+0x11d0>
 800d768:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d770:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d774:	f102 8399 	bmi.w	800feaa <kalman_3gyro.constprop.0+0x35d2>
 800d778:	bfd8      	it	le
 800d77a:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d77e:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d782:	1e53      	subs	r3, r2, #1
 800d784:	b25b      	sxtb	r3, r3
 800d786:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d790:	dd1c      	ble.n	800d7cc <kalman_3gyro.constprop.0+0xef4>
 800d792:	3a02      	subs	r2, #2
 800d794:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	f1ab 000c 	sub.w	r0, fp, #12
 800d79e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d7a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d7a6:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d7aa:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d7ae:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d7b2:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d7b6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d7ba:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d7be:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800d7c2:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d7c6:	3b0c      	subs	r3, #12
 800d7c8:	4283      	cmp	r3, r0
 800d7ca:	d1f0      	bne.n	800d7ae <kalman_3gyro.constprop.0+0xed6>
 800d7cc:	eddd 6a07 	vldr	s13, [sp, #28]
 800d7d0:	4ab6      	ldr	r2, [pc, #728]	; (800daac <kalman_3gyro.constprop.0+0x11d4>)
 800d7d2:	4bb7      	ldr	r3, [pc, #732]	; (800dab0 <kalman_3gyro.constprop.0+0x11d8>)
 800d7d4:	ed92 8a00 	vldr	s16, [r2]
 800d7d8:	ed93 ba00 	vldr	s22, [r3]
 800d7dc:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800d7e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d7e4:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d7e8:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800d7ec:	f1c1 0101 	rsb	r1, r1, #1
 800d7f0:	910c      	str	r1, [sp, #48]	; 0x30
 800d7f2:	a92d      	add	r1, sp, #180	; 0xb4
 800d7f4:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800d7f8:	9123      	str	r1, [sp, #140]	; 0x8c
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	9109      	str	r1, [sp, #36]	; 0x24
 800d7fe:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800d802:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800d806:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800d80a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800d80e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d812:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800d816:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d81a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d81e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800d822:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800d826:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800d82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d82e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d830:	3301      	adds	r3, #1
 800d832:	9309      	str	r3, [sp, #36]	; 0x24
 800d834:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d838:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800d83c:	18e0      	adds	r0, r4, r3
 800d83e:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d842:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800d846:	f841 0b04 	str.w	r0, [r1], #4
 800d84a:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800d84e:	4298      	cmp	r0, r3
 800d850:	f102 020c 	add.w	r2, r2, #12
 800d854:	d1f2      	bne.n	800d83c <kalman_3gyro.constprop.0+0xf64>
 800d856:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d85a:	ed93 7a00 	vldr	s14, [r3]
 800d85e:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800d862:	edd3 7a00 	vldr	s15, [r3]
 800d866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d86e:	bf84      	itt	hi
 800d870:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800d874:	f8a9 3000 	strhhi.w	r3, [r9]
 800d878:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800d87c:	ed93 7a00 	vldr	s14, [r3]
 800d880:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800d884:	edd3 7a00 	vldr	s15, [r3]
 800d888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	bf84      	itt	hi
 800d892:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800d896:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800d89a:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800d89e:	ed93 7a00 	vldr	s14, [r3]
 800d8a2:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800d8a6:	edd3 7a00 	vldr	s15, [r3]
 800d8aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b2:	bf84      	itt	hi
 800d8b4:	f240 5306 	movwhi	r3, #1286	; 0x506
 800d8b8:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800d8bc:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800d8c0:	ed93 7a00 	vldr	s14, [r3]
 800d8c4:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800d8c8:	edd3 7a00 	vldr	s15, [r3]
 800d8cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d4:	bf84      	itt	hi
 800d8d6:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800d8da:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800d8de:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800d8e2:	ed93 7a00 	vldr	s14, [r3]
 800d8e6:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800d8ea:	edd3 7a00 	vldr	s15, [r3]
 800d8ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	bf84      	itt	hi
 800d8f8:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800d8fc:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800d900:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800d904:	ed93 7a00 	vldr	s14, [r3]
 800d908:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800d90c:	edd3 7a00 	vldr	s15, [r3]
 800d910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d918:	bf84      	itt	hi
 800d91a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800d91e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800d922:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800d926:	ed93 7a00 	vldr	s14, [r3]
 800d92a:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800d92e:	edd3 7a00 	vldr	s15, [r3]
 800d932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	bf84      	itt	hi
 800d93c:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800d940:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800d944:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800d948:	ed93 7a00 	vldr	s14, [r3]
 800d94c:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800d950:	edd3 7a00 	vldr	s15, [r3]
 800d954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95c:	bf84      	itt	hi
 800d95e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800d962:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800d966:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800d96a:	ed93 7a00 	vldr	s14, [r3]
 800d96e:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800d972:	edd3 7a00 	vldr	s15, [r3]
 800d976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97e:	bf84      	itt	hi
 800d980:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800d984:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800d988:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800d98c:	ed93 7a00 	vldr	s14, [r3]
 800d990:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800d994:	edd3 7a00 	vldr	s15, [r3]
 800d998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a0:	bf84      	itt	hi
 800d9a2:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800d9a6:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800d9aa:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800d9ae:	ed93 7a00 	vldr	s14, [r3]
 800d9b2:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800d9b6:	edd3 7a00 	vldr	s15, [r3]
 800d9ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c2:	bf84      	itt	hi
 800d9c4:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800d9c8:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800d9cc:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800d9d0:	ed93 7a00 	vldr	s14, [r3]
 800d9d4:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800d9d8:	edd3 7a00 	vldr	s15, [r3]
 800d9dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	bf84      	itt	hi
 800d9e6:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800d9ea:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800d9ee:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800d9f2:	ed93 7a00 	vldr	s14, [r3]
 800d9f6:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800d9fa:	edd3 7a00 	vldr	s15, [r3]
 800d9fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da06:	bf84      	itt	hi
 800da08:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800da0c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800da10:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800da14:	ed93 7a00 	vldr	s14, [r3]
 800da18:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800da1c:	edd3 7a00 	vldr	s15, [r3]
 800da20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	bf84      	itt	hi
 800da2a:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800da2e:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800da32:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800da36:	ed93 7a00 	vldr	s14, [r3]
 800da3a:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800da3e:	edd3 7a00 	vldr	s15, [r3]
 800da42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4a:	bf84      	itt	hi
 800da4c:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800da50:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800da54:	221e      	movs	r2, #30
 800da56:	2101      	movs	r1, #1
 800da58:	4650      	mov	r0, sl
 800da5a:	f009 fcbd 	bl	80173d8 <memset>
 800da5e:	2304      	movs	r3, #4
 800da60:	9307      	str	r3, [sp, #28]
 800da62:	2302      	movs	r3, #2
 800da64:	9305      	str	r3, [sp, #20]
 800da66:	9b05      	ldr	r3, [sp, #20]
 800da68:	9306      	str	r3, [sp, #24]
 800da6a:	1c5f      	adds	r7, r3, #1
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	9305      	str	r3, [sp, #20]
 800da70:	f04f 0b01 	mov.w	fp, #1
 800da74:	9b05      	ldr	r3, [sp, #20]
 800da76:	f8cd b004 	str.w	fp, [sp, #4]
 800da7a:	445b      	add	r3, fp
 800da7c:	2b1f      	cmp	r3, #31
 800da7e:	bfa8      	it	ge
 800da80:	231f      	movge	r3, #31
 800da82:	465a      	mov	r2, fp
 800da84:	eba3 0802 	sub.w	r8, r3, r2
 800da88:	f1b8 0f00 	cmp.w	r8, #0
 800da8c:	469b      	mov	fp, r3
 800da8e:	f107 35ff 	add.w	r5, r7, #4294967295
 800da92:	dd44      	ble.n	800db1e <kalman_3gyro.constprop.0+0x1246>
 800da94:	f10b 33ff 	add.w	r3, fp, #4294967295
 800da98:	9302      	str	r3, [sp, #8]
 800da9a:	f1ab 0302 	sub.w	r3, fp, #2
 800da9e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800daa2:	4616      	mov	r6, r2
 800daa4:	2400      	movs	r4, #0
 800daa6:	e00f      	b.n	800dac8 <kalman_3gyro.constprop.0+0x11f0>
 800daa8:	00000000 	.word	0x00000000
 800daac:	200019e4 	.word	0x200019e4
 800dab0:	200019f4 	.word	0x200019f4
 800dab4:	3f333333 	.word	0x3f333333
 800dab8:	3f4ccccd 	.word	0x3f4ccccd
 800dabc:	3f666666 	.word	0x3f666666
 800dac0:	3ecccccc 	.word	0x3ecccccc
 800dac4:	3dcccccd 	.word	0x3dcccccd
 800dac8:	1e71      	subs	r1, r6, #1
 800daca:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800dace:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800dad2:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dad6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dada:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800dade:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800dae2:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800dae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800daea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daee:	f105 0c02 	add.w	ip, r5, #2
 800daf2:	f105 0801 	add.w	r8, r5, #1
 800daf6:	f240 81d3 	bls.w	800dea0 <kalman_3gyro.constprop.0+0x15c8>
 800dafa:	45e3      	cmp	fp, ip
 800dafc:	f80a 0004 	strb.w	r0, [sl, r4]
 800db00:	f000 81bf 	beq.w	800de82 <kalman_3gyro.constprop.0+0x15aa>
 800db04:	4645      	mov	r5, r8
 800db06:	9b03      	ldr	r3, [sp, #12]
 800db08:	3401      	adds	r4, #1
 800db0a:	42a3      	cmp	r3, r4
 800db0c:	dcdc      	bgt.n	800dac8 <kalman_3gyro.constprop.0+0x11f0>
 800db0e:	4698      	mov	r8, r3
 800db10:	9b01      	ldr	r3, [sp, #4]
 800db12:	1e58      	subs	r0, r3, #1
 800db14:	4448      	add	r0, r9
 800db16:	4642      	mov	r2, r8
 800db18:	4651      	mov	r1, sl
 800db1a:	f009 fc4f 	bl	80173bc <memcpy>
 800db1e:	9b06      	ldr	r3, [sp, #24]
 800db20:	eb0b 0703 	add.w	r7, fp, r3
 800db24:	2f1e      	cmp	r7, #30
 800db26:	dda5      	ble.n	800da74 <kalman_3gyro.constprop.0+0x119c>
 800db28:	9b07      	ldr	r3, [sp, #28]
 800db2a:	3b01      	subs	r3, #1
 800db2c:	9307      	str	r3, [sp, #28]
 800db2e:	d19a      	bne.n	800da66 <kalman_3gyro.constprop.0+0x118e>
 800db30:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800db34:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800db38:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800db3c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800db40:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800db44:	ed52 7a01 	vldr	s15, [r2, #-4]
 800db48:	ed13 7a01 	vldr	s14, [r3, #-4]
 800db4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db54:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800db58:	460a      	mov	r2, r1
 800db5a:	bf4c      	ite	mi
 800db5c:	2201      	movmi	r2, #1
 800db5e:	2200      	movpl	r2, #0
 800db60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db64:	bf4c      	ite	mi
 800db66:	2301      	movmi	r3, #1
 800db68:	2300      	movpl	r3, #0
 800db6a:	429a      	cmp	r2, r3
 800db6c:	f000 81b4 	beq.w	800ded8 <kalman_3gyro.constprop.0+0x1600>
 800db70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800db78:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db7e:	ece3 7a01 	vstmia	r3!, {s15}
 800db82:	930b      	str	r3, [sp, #44]	; 0x2c
 800db84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db86:	3304      	adds	r3, #4
 800db88:	930a      	str	r3, [sp, #40]	; 0x28
 800db8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db8c:	2b03      	cmp	r3, #3
 800db8e:	f47f ae4c 	bne.w	800d82a <kalman_3gyro.constprop.0+0xf52>
 800db92:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800db96:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800db9a:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800db9e:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800dab4 <kalman_3gyro.constprop.0+0x11dc>
 800dba2:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800dba6:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800dab8 <kalman_3gyro.constprop.0+0x11e0>
 800dbaa:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800dbae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dbb2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800dbb6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800dbba:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800dbbe:	eee6 7a06 	vfma.f32	s15, s12, s12
 800dbc2:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800dbc6:	eeb0 6a67 	vmov.f32	s12, s15
 800dbca:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbce:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800dbd2:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800dbd6:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800dbda:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800dbde:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800dbe2:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800dbe6:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dbea:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800dbee:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800dbf2:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800dbf6:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800dbfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dbfe:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800dc02:	ee64 7a27 	vmul.f32	s15, s8, s15
 800dc06:	ee25 7a07 	vmul.f32	s14, s10, s14
 800dc0a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800dc0e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800dc12:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f040 81a4 	bne.w	800df64 <kalman_3gyro.constprop.0+0x168c>
 800dc1c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dc20:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800dc24:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dc28:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800dc2c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800dc30:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800dc34:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dc38:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800dc3c:	f8c8 3020 	str.w	r3, [r8, #32]
 800dc40:	ed88 7a07 	vstr	s14, [r8, #28]
 800dc44:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800dc48:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800dc4c:	ed93 7a00 	vldr	s14, [r3]
 800dc50:	ed92 8a00 	vldr	s16, [r2]
 800dc54:	eddb ea02 	vldr	s29, [fp, #8]
 800dc58:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800dc5c:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800dc60:	ed92 5a00 	vldr	s10, [r2]
 800dc64:	ee28 8a07 	vmul.f32	s16, s16, s14
 800dc68:	ed93 7a00 	vldr	s14, [r3]
 800dc6c:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dc70:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800dc74:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800dc78:	ed92 5a00 	vldr	s10, [r2]
 800dc7c:	ed93 7a00 	vldr	s14, [r3]
 800dc80:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dc84:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800dc88:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800dc8c:	ed92 5a00 	vldr	s10, [r2]
 800dc90:	ed93 7a00 	vldr	s14, [r3]
 800dc94:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dc98:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800dc9c:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800dca0:	ed92 5a00 	vldr	s10, [r2]
 800dca4:	ed93 7a00 	vldr	s14, [r3]
 800dca8:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800dcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dcb4:	f340 8232 	ble.w	800e11c <kalman_3gyro.constprop.0+0x1844>
 800dcb8:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800dcbc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc4:	f100 815e 	bmi.w	800df84 <kalman_3gyro.constprop.0+0x16ac>
 800dcc8:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800dccc:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800dcd0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd8:	f142 84bd 	bpl.w	8010656 <kalman_3gyro.constprop.0+0x3d7e>
 800dcdc:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800dce0:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800dce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce8:	f342 850a 	ble.w	8010700 <kalman_3gyro.constprop.0+0x3e28>
 800dcec:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800dcf0:	eef4 2ac8 	vcmpe.f32	s5, s16
 800dcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf8:	f342 86c5 	ble.w	8010a86 <kalman_3gyro.constprop.0+0x41ae>
 800dcfc:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800dd00:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800dd04:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800dd08:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dd0c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dd10:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800dd14:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dd18:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dd1c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800dd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd24:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dd28:	f202 86c5 	bhi.w	8010ab6 <kalman_3gyro.constprop.0+0x41de>
 800dd2c:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800dd30:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd38:	f342 86c5 	ble.w	8010ac6 <kalman_3gyro.constprop.0+0x41ee>
 800dd3c:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800dd40:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800dd44:	ee38 3a64 	vsub.f32	s6, s16, s9
 800dd48:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dd4c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800dd50:	ee64 4a03 	vmul.f32	s9, s8, s6
 800dd54:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800dd58:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dd5c:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800dd60:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd68:	f202 86c5 	bhi.w	8010af6 <kalman_3gyro.constprop.0+0x421e>
 800dd6c:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800dd70:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	f343 8371 	ble.w	801145e <kalman_3gyro.constprop.0+0x4b86>
 800dd7c:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800dd80:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800dd84:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dd88:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dd8c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800dd90:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dd94:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800dd98:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dd9c:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800dda0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda8:	f202 86c5 	bhi.w	8010b36 <kalman_3gyro.constprop.0+0x425e>
 800ddac:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800ddb0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb8:	f343 8359 	ble.w	801146e <kalman_3gyro.constprop.0+0x4b96>
 800ddbc:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800ddc0:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800ddc4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800ddc8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ddcc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800ddd0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800ddd4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800ddd8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dddc:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800dde0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde8:	f2c2 86c5 	blt.w	8010b76 <kalman_3gyro.constprop.0+0x429e>
 800ddec:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800ddf0:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800ddf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf8:	f143 832d 	bpl.w	8011456 <kalman_3gyro.constprop.0+0x4b7e>
 800ddfc:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800de00:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800de04:	ee38 3a47 	vsub.f32	s6, s16, s14
 800de08:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de0c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800de10:	ee24 4a03 	vmul.f32	s8, s8, s6
 800de14:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800de18:	ee3e ea23 	vadd.f32	s28, s28, s7
 800de1c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800de20:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800de24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de28:	f2c2 86c5 	blt.w	8010bb6 <kalman_3gyro.constprop.0+0x42de>
 800de2c:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800de30:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800de34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de38:	f142 86c5 	bpl.w	8010bc6 <kalman_3gyro.constprop.0+0x42ee>
 800de3c:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800de40:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800de44:	ee78 3a64 	vsub.f32	s7, s16, s9
 800de48:	ee35 5a44 	vsub.f32	s10, s10, s8
 800de4c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800de50:	ee25 5a23 	vmul.f32	s10, s10, s7
 800de54:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800de58:	ee3e ea04 	vadd.f32	s28, s28, s8
 800de5c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800de60:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800de64:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800de68:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800de6c:	e15a      	b.n	800e124 <kalman_3gyro.constprop.0+0x184c>
 800de6e:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800dabc <kalman_3gyro.constprop.0+0x11e4>
 800de72:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800dac0 <kalman_3gyro.constprop.0+0x11e8>
 800de76:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800dac4 <kalman_3gyro.constprop.0+0x11ec>
 800de7a:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800de7e:	f7fe bedd 	b.w	800cc3c <kalman_3gyro.constprop.0+0x364>
 800de82:	1c60      	adds	r0, r4, #1
 800de84:	42be      	cmp	r6, r7
 800de86:	eba7 0206 	sub.w	r2, r7, r6
 800de8a:	4449      	add	r1, r9
 800de8c:	4450      	add	r0, sl
 800de8e:	f6bf ae39 	bge.w	800db04 <kalman_3gyro.constprop.0+0x122c>
 800de92:	443c      	add	r4, r7
 800de94:	1ba4      	subs	r4, r4, r6
 800de96:	f009 fa91 	bl	80173bc <memcpy>
 800de9a:	463e      	mov	r6, r7
 800de9c:	4645      	mov	r5, r8
 800de9e:	e632      	b.n	800db06 <kalman_3gyro.constprop.0+0x122e>
 800dea0:	3601      	adds	r6, #1
 800dea2:	42be      	cmp	r6, r7
 800dea4:	f80a 2004 	strb.w	r2, [sl, r4]
 800dea8:	f47f ae2d 	bne.w	800db06 <kalman_3gyro.constprop.0+0x122e>
 800deac:	9b02      	ldr	r3, [sp, #8]
 800deae:	f105 0801 	add.w	r8, r5, #1
 800deb2:	1c60      	adds	r0, r4, #1
 800deb4:	45c3      	cmp	fp, r8
 800deb6:	eba3 0205 	sub.w	r2, r3, r5
 800deba:	eb09 0105 	add.w	r1, r9, r5
 800debe:	4450      	add	r0, sl
 800dec0:	f77f ae21 	ble.w	800db06 <kalman_3gyro.constprop.0+0x122e>
 800dec4:	f009 fa7a 	bl	80173bc <memcpy>
 800dec8:	9b02      	ldr	r3, [sp, #8]
 800deca:	441c      	add	r4, r3
 800decc:	9b04      	ldr	r3, [sp, #16]
 800dece:	1b5a      	subs	r2, r3, r5
 800ded0:	1b64      	subs	r4, r4, r5
 800ded2:	eb02 0508 	add.w	r5, r2, r8
 800ded6:	e616      	b.n	800db06 <kalman_3gyro.constprop.0+0x122e>
 800ded8:	eef4 7a48 	vcmp.f32	s15, s16
 800dedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee0:	f43f ae46 	beq.w	800db70 <kalman_3gyro.constprop.0+0x1298>
 800dee4:	eef4 7a4b 	vcmp.f32	s15, s22
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	f43f ae40 	beq.w	800db70 <kalman_3gyro.constprop.0+0x1298>
 800def0:	eeb4 7a48 	vcmp.f32	s14, s16
 800def4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def8:	f43f ae3a 	beq.w	800db70 <kalman_3gyro.constprop.0+0x1298>
 800defc:	eeb4 7a4b 	vcmp.f32	s14, s22
 800df00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df04:	f43f ae34 	beq.w	800db70 <kalman_3gyro.constprop.0+0x1298>
 800df08:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df0c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800df10:	eee7 7a26 	vfma.f32	s15, s14, s13
 800df14:	e632      	b.n	800db7c <kalman_3gyro.constprop.0+0x12a4>
 800df16:	2304      	movs	r3, #4
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	461c      	mov	r4, r3
 800df1e:	2307      	movs	r3, #7
 800df20:	4694      	mov	ip, r2
 800df22:	2106      	movs	r1, #6
 800df24:	9302      	str	r3, [sp, #8]
 800df26:	2603      	movs	r6, #3
 800df28:	f04f 0a01 	mov.w	sl, #1
 800df2c:	f7ff ba5c 	b.w	800d3e8 <kalman_3gyro.constprop.0+0xb10>
 800df30:	9a08      	ldr	r2, [sp, #32]
 800df32:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e0bc <kalman_3gyro.constprop.0+0x17e4>
 800df36:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e0c0 <kalman_3gyro.constprop.0+0x17e8>
 800df3a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e0c4 <kalman_3gyro.constprop.0+0x17ec>
 800df3e:	4b62      	ldr	r3, [pc, #392]	; (800e0c8 <kalman_3gyro.constprop.0+0x17f0>)
 800df40:	edc2 7a00 	vstr	s15, [r2]
 800df44:	eeb0 4a65 	vmov.f32	s8, s11
 800df48:	eeb0 3a67 	vmov.f32	s6, s15
 800df4c:	eef0 4a45 	vmov.f32	s9, s10
 800df50:	6053      	str	r3, [r2, #4]
 800df52:	6093      	str	r3, [r2, #8]
 800df54:	f7fe bd3e 	b.w	800c9d4 <kalman_3gyro.constprop.0+0xfc>
 800df58:	2308      	movs	r3, #8
 800df5a:	2005      	movs	r0, #5
 800df5c:	f04f 0802 	mov.w	r8, #2
 800df60:	f7ff ba5c 	b.w	800d41c <kalman_3gyro.constprop.0+0xb44>
 800df64:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800df68:	2300      	movs	r3, #0
 800df6a:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800df6e:	ed88 7a07 	vstr	s14, [r8, #28]
 800df72:	ed88 7a08 	vstr	s14, [r8, #32]
 800df76:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800df7a:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800df7e:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800df82:	e65f      	b.n	800dc44 <kalman_3gyro.constprop.0+0x136c>
 800df84:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800df88:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800df8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df90:	f342 83b2 	ble.w	80106f8 <kalman_3gyro.constprop.0+0x3e20>
 800df94:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800df98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9c:	f2c2 86e9 	blt.w	8010d72 <kalman_3gyro.constprop.0+0x449a>
 800dfa0:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800dfa4:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dfa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfac:	f342 8712 	ble.w	8010dd4 <kalman_3gyro.constprop.0+0x44fc>
 800dfb0:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800dfb4:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800dfb8:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dfbc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dfc0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800dfc4:	ee64 4a03 	vmul.f32	s9, s8, s6
 800dfc8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800dfcc:	ee3b ba23 	vadd.f32	s22, s22, s7
 800dfd0:	f002 bed8 	b.w	8010d84 <kalman_3gyro.constprop.0+0x44ac>
 800dfd4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dfd8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe0:	f342 84bd 	ble.w	801095e <kalman_3gyro.constprop.0+0x4086>
 800dfe4:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800dfe8:	f7ff b993 	b.w	800d312 <kalman_3gyro.constprop.0+0xa3a>
 800dfec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dff0:	eeb4 bac7 	vcmpe.f32	s22, s14
 800dff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff8:	f342 849f 	ble.w	801093a <kalman_3gyro.constprop.0+0x4062>
 800dffc:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e000:	f7ff b964 	b.w	800d2cc <kalman_3gyro.constprop.0+0x9f4>
 800e004:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e008:	eef4 dac7 	vcmpe.f32	s27, s14
 800e00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e010:	f342 84b7 	ble.w	8010982 <kalman_3gyro.constprop.0+0x40aa>
 800e014:	eddf da2d 	vldr	s27, [pc, #180]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e018:	f7ff b935 	b.w	800d286 <kalman_3gyro.constprop.0+0x9ae>
 800e01c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e020:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e028:	f342 8475 	ble.w	8010916 <kalman_3gyro.constprop.0+0x403e>
 800e02c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e030:	f7ff b8c3 	b.w	800d1ba <kalman_3gyro.constprop.0+0x8e2>
 800e034:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e038:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e040:	f342 83a0 	ble.w	8010784 <kalman_3gyro.constprop.0+0x3eac>
 800e044:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e048:	f7ff b894 	b.w	800d174 <kalman_3gyro.constprop.0+0x89c>
 800e04c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e050:	eef4 dac7 	vcmpe.f32	s27, s14
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	f342 8382 	ble.w	8010760 <kalman_3gyro.constprop.0+0x3e88>
 800e05c:	eddf da1b 	vldr	s27, [pc, #108]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e060:	f7ff b865 	b.w	800d12e <kalman_3gyro.constprop.0+0x856>
 800e064:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e068:	eef4 dac7 	vcmpe.f32	s27, s14
 800e06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e070:	f342 8364 	ble.w	801073c <kalman_3gyro.constprop.0+0x3e64>
 800e074:	eddf da15 	vldr	s27, [pc, #84]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e078:	f7fe bff3 	b.w	800d062 <kalman_3gyro.constprop.0+0x78a>
 800e07c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e080:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e088:	f342 8346 	ble.w	8010718 <kalman_3gyro.constprop.0+0x3e40>
 800e08c:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e090:	f7fe bfc4 	b.w	800d01c <kalman_3gyro.constprop.0+0x744>
 800e094:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e098:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a0:	f342 839e 	ble.w	80107e0 <kalman_3gyro.constprop.0+0x3f08>
 800e0a4:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e0cc <kalman_3gyro.constprop.0+0x17f4>
 800e0a8:	f7fe bf95 	b.w	800cfd6 <kalman_3gyro.constprop.0+0x6fe>
 800e0ac:	eef1 3a63 	vneg.f32	s7, s7
 800e0b0:	f7ff bb42 	b.w	800d738 <kalman_3gyro.constprop.0+0xe60>
 800e0b4:	eef1 3a63 	vneg.f32	s7, s7
 800e0b8:	f7ff bb1b 	b.w	800d6f2 <kalman_3gyro.constprop.0+0xe1a>
 800e0bc:	00000000 	.word	0x00000000
 800e0c0:	3fb33333 	.word	0x3fb33333
 800e0c4:	bfb33333 	.word	0xbfb33333
 800e0c8:	3f333333 	.word	0x3f333333
 800e0cc:	80000000 	.word	0x80000000
 800e0d0:	3fb77778 	.word	0x3fb77778
 800e0d4:	3f99999a 	.word	0x3f99999a
 800e0d8:	3f4ccccd 	.word	0x3f4ccccd
 800e0dc:	42d40000 	.word	0x42d40000
 800e0e0:	46979000 	.word	0x46979000
 800e0e4:	4415c000 	.word	0x4415c000
 800e0e8:	3ba3d70a 	.word	0x3ba3d70a
 800e0ec:	3b449ba6 	.word	0x3b449ba6
 800e0f0:	3c75c28f 	.word	0x3c75c28f
 800e0f4:	3c23d70a 	.word	0x3c23d70a
 800e0f8:	3d4cccc0 	.word	0x3d4cccc0
 800e0fc:	43480000 	.word	0x43480000
 800e100:	3d4ccccd 	.word	0x3d4ccccd
 800e104:	3cf5c28f 	.word	0x3cf5c28f
 800e108:	3eb33334 	.word	0x3eb33334
 800e10c:	3f933333 	.word	0x3f933333
 800e110:	4247ffff 	.word	0x4247ffff
 800e114:	3dcccccd 	.word	0x3dcccccd
 800e118:	3e4ccccd 	.word	0x3e4ccccd
 800e11c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e120:	eeb0 ba4e 	vmov.f32	s22, s28
 800e124:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e128:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e12c:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e114 <kalman_3gyro.constprop.0+0x183c>
 800e130:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e134:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e138:	eef0 daed 	vabs.f32	s27, s27
 800e13c:	eeb0 5ac5 	vabs.f32	s10, s10
 800e140:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e144:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14c:	f340 821c 	ble.w	800e588 <kalman_3gyro.constprop.0+0x1cb0>
 800e150:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e0d0 <kalman_3gyro.constprop.0+0x17f8>
 800e154:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15c:	f302 828b 	bgt.w	8010676 <kalman_3gyro.constprop.0+0x3d9e>
 800e160:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e164:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e168:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e16c:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e170:	eeb0 5a64 	vmov.f32	s10, s9
 800e174:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e17c:	f89b 3000 	ldrb.w	r3, [fp]
 800e180:	bfb8      	it	lt
 800e182:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e186:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 81f9 	beq.w	800e582 <kalman_3gyro.constprop.0+0x1caa>
 800e190:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 81de 	beq.w	800e556 <kalman_3gyro.constprop.0+0x1c7e>
 800e19a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e19e:	2300      	movs	r3, #0
 800e1a0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e1a4:	eeb0 6a61 	vmov.f32	s12, s3
 800e1a8:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e1ac:	9908      	ldr	r1, [sp, #32]
 800e1ae:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e1b2:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e1b6:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e1ba:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e1be:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e1c2:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e1cc:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e1d0:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e1d4:	9233      	str	r2, [sp, #204]	; 0xcc
 800e1d6:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e1da:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e1de:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e1e2:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e1e6:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e1ea:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e1ee:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e1f2:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e1f6:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e1fa:	eeb0 3a42 	vmov.f32	s6, s4
 800e1fe:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e202:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e206:	eef0 aa46 	vmov.f32	s21, s12
 800e20a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e20e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e212:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e216:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e21a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e21e:	eef0 2a44 	vmov.f32	s5, s8
 800e222:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e226:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e22a:	eeb0 fa64 	vmov.f32	s30, s9
 800e22e:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e232:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e236:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e23a:	eeb0 1a6a 	vmov.f32	s2, s21
 800e23e:	eef0 aa66 	vmov.f32	s21, s13
 800e242:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e246:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e24a:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e24e:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e252:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e256:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e25a:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e25e:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e262:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e266:	eef0 3a64 	vmov.f32	s7, s9
 800e26a:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e26e:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e272:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e276:	edd1 5a02 	vldr	s11, [r1, #8]
 800e27a:	ed91 5a05 	vldr	s10, [r1, #20]
 800e27e:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e282:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e286:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e28a:	edd1 1a01 	vldr	s3, [r1, #4]
 800e28e:	edd1 fa00 	vldr	s31, [r1]
 800e292:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e296:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e29a:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e29e:	edd1 5a03 	vldr	s11, [r1, #12]
 800e2a2:	edd1 1a04 	vldr	s3, [r1, #16]
 800e2a6:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e0d4 <kalman_3gyro.constprop.0+0x17fc>
 800e2aa:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e2ae:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e2b2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e2b6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e2ba:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e2be:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c6:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e2ca:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e2ce:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e2d2:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e2d6:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e2da:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e2de:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e2e2:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e2e6:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e2ea:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e2ee:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e2f2:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e2f6:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e2fa:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e2fe:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e302:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e306:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e30a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e30e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e312:	d506      	bpl.n	800e322 <kalman_3gyro.constprop.0+0x1a4a>
 800e314:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e0d8 <kalman_3gyro.constprop.0+0x1800>
 800e318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e320:	dc01      	bgt.n	800e326 <kalman_3gyro.constprop.0+0x1a4e>
 800e322:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e326:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e32a:	eef0 7ae7 	vabs.f32	s15, s15
 800e32e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33a:	f340 8141 	ble.w	800e5c0 <kalman_3gyro.constprop.0+0x1ce8>
 800e33e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e342:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34a:	f142 8198 	bpl.w	801067e <kalman_3gyro.constprop.0+0x3da6>
 800e34e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e0e8 <kalman_3gyro.constprop.0+0x1810>
 800e352:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e356:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e0f4 <kalman_3gyro.constprop.0+0x181c>
 800e35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e362:	f102 8221 	bmi.w	80107a8 <kalman_3gyro.constprop.0+0x3ed0>
 800e366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36a:	f142 8221 	bpl.w	80107b0 <kalman_3gyro.constprop.0+0x3ed8>
 800e36e:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e0f0 <kalman_3gyro.constprop.0+0x1818>
 800e372:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37a:	f282 84a4 	bge.w	8010cc6 <kalman_3gyro.constprop.0+0x43ee>
 800e37e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e382:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e104 <kalman_3gyro.constprop.0+0x182c>
 800e386:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38e:	f2c2 84b0 	blt.w	8010cf2 <kalman_3gyro.constprop.0+0x441a>
 800e392:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e100 <kalman_3gyro.constprop.0+0x1828>
 800e396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39e:	f142 84b0 	bpl.w	8010d02 <kalman_3gyro.constprop.0+0x442a>
 800e3a2:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e104 <kalman_3gyro.constprop.0+0x182c>
 800e3a6:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e110 <kalman_3gyro.constprop.0+0x1838>
 800e3aa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e3ae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e3b2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e3b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e3ba:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e3be:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e114 <kalman_3gyro.constprop.0+0x183c>
 800e3c2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ca:	f2c2 84b0 	blt.w	8010d2e <kalman_3gyro.constprop.0+0x4456>
 800e3ce:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e118 <kalman_3gyro.constprop.0+0x1840>
 800e3d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3da:	f142 84b0 	bpl.w	8010d3e <kalman_3gyro.constprop.0+0x4466>
 800e3de:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e114 <kalman_3gyro.constprop.0+0x183c>
 800e3e2:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e0dc <kalman_3gyro.constprop.0+0x1804>
 800e3e6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e3ea:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e3ee:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e3f2:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e3f6:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e3fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e3fe:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e406:	db0d      	blt.n	800e424 <kalman_3gyro.constprop.0+0x1b4c>
 800e408:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e40c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e0e0 <kalman_3gyro.constprop.0+0x1808>
 800e410:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e0e4 <kalman_3gyro.constprop.0+0x180c>
 800e414:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e418:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e41c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e420:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e428:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e42c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e430:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e434:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e0f0 <kalman_3gyro.constprop.0+0x1818>
 800e438:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e0e8 <kalman_3gyro.constprop.0+0x1810>
 800e43c:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e0f4 <kalman_3gyro.constprop.0+0x181c>
 800e440:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e0ec <kalman_3gyro.constprop.0+0x1814>
 800e444:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e450:	bfb8      	it	lt
 800e452:	eef0 4a46 	vmovlt.f32	s9, s12
 800e456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45a:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e45e:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e462:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e466:	f142 841f 	bpl.w	8010ca8 <kalman_3gyro.constprop.0+0x43d0>
 800e46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46e:	f2c2 841f 	blt.w	8010cb0 <kalman_3gyro.constprop.0+0x43d8>
 800e472:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e0f0 <kalman_3gyro.constprop.0+0x1818>
 800e476:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	f142 83ba 	bpl.w	8010bf6 <kalman_3gyro.constprop.0+0x431e>
 800e482:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e0f4 <kalman_3gyro.constprop.0+0x181c>
 800e486:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e0f8 <kalman_3gyro.constprop.0+0x1820>
 800e48a:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e0fc <kalman_3gyro.constprop.0+0x1824>
 800e48e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e496:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e49a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e49e:	eeb0 ca66 	vmov.f32	s24, s13
 800e4a2:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e104 <kalman_3gyro.constprop.0+0x182c>
 800e4a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ae:	f2c2 83ba 	blt.w	8010c26 <kalman_3gyro.constprop.0+0x434e>
 800e4b2:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e100 <kalman_3gyro.constprop.0+0x1828>
 800e4b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4be:	f142 83ba 	bpl.w	8010c36 <kalman_3gyro.constprop.0+0x435e>
 800e4c2:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e104 <kalman_3gyro.constprop.0+0x182c>
 800e4c6:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e108 <kalman_3gyro.constprop.0+0x1830>
 800e4ca:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e110 <kalman_3gyro.constprop.0+0x1838>
 800e4ce:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e10c <kalman_3gyro.constprop.0+0x1834>
 800e4d2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e4d6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e4da:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e4de:	eeb0 ca66 	vmov.f32	s24, s13
 800e4e2:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e114 <kalman_3gyro.constprop.0+0x183c>
 800e4e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	f2c2 83ba 	blt.w	8010c66 <kalman_3gyro.constprop.0+0x438e>
 800e4f2:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e118 <kalman_3gyro.constprop.0+0x1840>
 800e4f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fe:	f142 83ba 	bpl.w	8010c76 <kalman_3gyro.constprop.0+0x439e>
 800e502:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e590 <kalman_3gyro.constprop.0+0x1cb8>
 800e506:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e594 <kalman_3gyro.constprop.0+0x1cbc>
 800e50a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e50e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e512:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e516:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e51a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e51e:	eeb0 ca66 	vmov.f32	s24, s13
 800e522:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e526:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52e:	f2c2 80b0 	blt.w	8010692 <kalman_3gyro.constprop.0+0x3dba>
 800e532:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e536:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e53a:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e598 <kalman_3gyro.constprop.0+0x1cc0>
 800e53e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e59c <kalman_3gyro.constprop.0+0x1cc4>
 800e542:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e546:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e54a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e54e:	eeb0 ca66 	vmov.f32	s24, s13
 800e552:	f002 b89e 	b.w	8010692 <kalman_3gyro.constprop.0+0x3dba>
 800e556:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e55a:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e55e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e562:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e566:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e56a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e56e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e572:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e576:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57e:	f102 8246 	bmi.w	8010a0e <kalman_3gyro.constprop.0+0x4136>
 800e582:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e586:	e60b      	b.n	800e1a0 <kalman_3gyro.constprop.0+0x18c8>
 800e588:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e58c:	e5f2      	b.n	800e174 <kalman_3gyro.constprop.0+0x189c>
 800e58e:	bf00      	nop
 800e590:	3dcccccd 	.word	0x3dcccccd
 800e594:	410c0000 	.word	0x410c0000
 800e598:	42c80000 	.word	0x42c80000
 800e59c:	424a0000 	.word	0x424a0000
 800e5a0:	3c23d70a 	.word	0x3c23d70a
 800e5a4:	3b449ba6 	.word	0x3b449ba6
 800e5a8:	3fb33333 	.word	0x3fb33333
 800e5ac:	3ecccccd 	.word	0x3ecccccd
 800e5b0:	3f8f5c29 	.word	0x3f8f5c29
 800e5b4:	3f59999a 	.word	0x3f59999a
 800e5b8:	3e4ccccd 	.word	0x3e4ccccd
 800e5bc:	3f99999a 	.word	0x3f99999a
 800e5c0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e5c4:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e5a0 <kalman_3gyro.constprop.0+0x1cc8>
 800e5c8:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e5a4 <kalman_3gyro.constprop.0+0x1ccc>
 800e5cc:	eeb0 7a4c 	vmov.f32	s14, s24
 800e5d0:	eef0 4a4c 	vmov.f32	s9, s24
 800e5d4:	eddd 6a01 	vldr	s13, [sp, #4]
 800e5d8:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e5dc:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e5e0:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e5e4:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e5e8:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e5ec:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e5f0:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e5f4:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e5f8:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e5fc:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e600:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e604:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e608:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e60c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e610:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e614:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e618:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e61c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e620:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e624:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e628:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e62c:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e630:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e634:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e638:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e63c:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e640:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e644:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e648:	2a00      	cmp	r2, #0
 800e64a:	f001 8411 	beq.w	800fe70 <kalman_3gyro.constprop.0+0x3598>
 800e64e:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e652:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e656:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e65a:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e65e:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e662:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e666:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e66a:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e66e:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e672:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e676:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e67a:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e67e:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e682:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e686:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e68a:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e68e:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e692:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e696:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e69a:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e69e:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e6a2:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e6a6:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e6aa:	b159      	cbz	r1, 800e6c4 <kalman_3gyro.constprop.0+0x1dec>
 800e6ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b8:	dd04      	ble.n	800e6c4 <kalman_3gyro.constprop.0+0x1dec>
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e6c0:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e6c4:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	dd09      	ble.n	800e6e2 <kalman_3gyro.constprop.0+0x1e0a>
 800e6ce:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e6d2:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6da:	db02      	blt.n	800e6e2 <kalman_3gyro.constprop.0+0x1e0a>
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f002 8001 	beq.w	80106e4 <kalman_3gyro.constprop.0+0x3e0c>
 800e6e2:	b132      	cbz	r2, 800e6f2 <kalman_3gyro.constprop.0+0x1e1a>
 800e6e4:	f240 1001 	movw	r0, #257	; 0x101
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e6ee:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e6f8:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e6fc:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e5a8 <kalman_3gyro.constprop.0+0x1cd0>
 800e700:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e708:	dc09      	bgt.n	800e71e <kalman_3gyro.constprop.0+0x1e46>
 800e70a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e5ac <kalman_3gyro.constprop.0+0x1cd4>
 800e70e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e716:	d402      	bmi.n	800e71e <kalman_3gyro.constprop.0+0x1e46>
 800e718:	2a00      	cmp	r2, #0
 800e71a:	f042 80e4 	bne.w	80108e6 <kalman_3gyro.constprop.0+0x400e>
 800e71e:	2300      	movs	r3, #0
 800e720:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e724:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e728:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e72c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e730:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e5b0 <kalman_3gyro.constprop.0+0x1cd8>
 800e734:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73c:	dc09      	bgt.n	800e752 <kalman_3gyro.constprop.0+0x1e7a>
 800e73e:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e5b4 <kalman_3gyro.constprop.0+0x1cdc>
 800e742:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74a:	d402      	bmi.n	800e752 <kalman_3gyro.constprop.0+0x1e7a>
 800e74c:	2900      	cmp	r1, #0
 800e74e:	f042 8097 	bne.w	8010880 <kalman_3gyro.constprop.0+0x3fa8>
 800e752:	2300      	movs	r3, #0
 800e754:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e758:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e75c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e760:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e764:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e768:	eef4 dae7 	vcmpe.f32	s27, s15
 800e76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e770:	f341 836b 	ble.w	800fe4a <kalman_3gyro.constprop.0+0x3572>
 800e774:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e778:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e77c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e780:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e784:	2300      	movs	r3, #0
 800e786:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e78a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e78e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e792:	eef4 dac7 	vcmpe.f32	s27, s14
 800e796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79a:	bfc4      	itt	gt
 800e79c:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e7a0:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e7a4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e7a8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e7ac:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e7b0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e7b4:	2b0e      	cmp	r3, #14
 800e7b6:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e7ba:	dc02      	bgt.n	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 800e7bc:	3305      	adds	r3, #5
 800e7be:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800e7c2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e7c6:	eef4 7acd 	vcmpe.f32	s15, s26
 800e7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ce:	f340 82e9 	ble.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e7d2:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e7d6:	eef4 7aeb 	vcmpe.f32	s15, s23
 800e7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7de:	f340 82e1 	ble.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e7e2:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e7e6:	eef4 7aec 	vcmpe.f32	s15, s25
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	f340 82d9 	ble.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e7f2:	9b08      	ldr	r3, [sp, #32]
 800e7f4:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e5b8 <kalman_3gyro.constprop.0+0x1ce0>
 800e7f8:	ed93 7a06 	vldr	s14, [r3, #24]
 800e7fc:	eef0 6ac7 	vabs.f32	s13, s14
 800e800:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e808:	f140 82cc 	bpl.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e80c:	edd3 6a07 	vldr	s13, [r3, #28]
 800e810:	eeb0 6ae6 	vabs.f32	s12, s13
 800e814:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e81c:	f140 82c2 	bpl.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e820:	ed93 6a08 	vldr	s12, [r3, #32]
 800e824:	eef0 4ac6 	vabs.f32	s9, s12
 800e828:	eef4 4ae7 	vcmpe.f32	s9, s15
 800e82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e830:	f140 82b8 	bpl.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e834:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e5bc <kalman_3gyro.constprop.0+0x1ce4>
 800e838:	eef0 5ae5 	vabs.f32	s11, s11
 800e83c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e844:	f140 82ae 	bpl.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e848:	eef0 1ae1 	vabs.f32	s3, s3
 800e84c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800e850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e854:	f140 82a6 	bpl.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e858:	eeb0 5ac5 	vabs.f32	s10, s10
 800e85c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e864:	f140 829e 	bpl.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800e868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e86a:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800e86e:	edd3 5a00 	vldr	s11, [r3]
 800e872:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e874:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e876:	ed93 5a00 	vldr	s10, [r3]
 800e87a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e87c:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e880:	2a09      	cmp	r2, #9
 800e882:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800e886:	ed93 4a00 	vldr	s8, [r3]
 800e88a:	edd4 3a00 	vldr	s7, [r4]
 800e88e:	bf8c      	ite	hi
 800e890:	230a      	movhi	r3, #10
 800e892:	2305      	movls	r3, #5
 800e894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e898:	bfb4      	ite	lt
 800e89a:	eef0 7a45 	vmovlt.f32	s15, s10
 800e89e:	eef0 7a65 	vmovge.f32	s15, s11
 800e8a2:	bf8c      	ite	hi
 800e8a4:	eef0 4a45 	vmovhi.f32	s9, s10
 800e8a8:	eef0 4a65 	vmovls.f32	s9, s11
 800e8ac:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b4:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e8b8:	bfb8      	it	lt
 800e8ba:	eef0 7a63 	vmovlt.f32	s15, s7
 800e8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c2:	bf88      	it	hi
 800e8c4:	eef0 4a63 	vmovhi.f32	s9, s7
 800e8c8:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d0:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e8d4:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e8d8:	edd1 5a00 	vldr	s11, [r1]
 800e8dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e8de:	bfb8      	it	lt
 800e8e0:	eef0 7a44 	vmovlt.f32	s15, s8
 800e8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8e8:	bf88      	it	hi
 800e8ea:	eef0 4a44 	vmovhi.f32	s9, s8
 800e8ee:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e8f2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fa:	eef4 4ae5 	vcmpe.f32	s9, s11
 800e8fe:	bfb8      	it	lt
 800e900:	eef0 7a65 	vmovlt.f32	s15, s11
 800e904:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90c:	bf88      	it	hi
 800e90e:	eef0 4a65 	vmovhi.f32	s9, s11
 800e912:	2b05      	cmp	r3, #5
 800e914:	ee35 5a25 	vadd.f32	s10, s10, s11
 800e918:	edd1 5a00 	vldr	s11, [r1]
 800e91c:	d065      	beq.n	800e9ea <kalman_3gyro.constprop.0+0x2112>
 800e91e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800e922:	edd1 3a00 	vldr	s7, [r1]
 800e926:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800e92a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e92e:	ed91 4a00 	vldr	s8, [r1]
 800e932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e936:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e93a:	bfb8      	it	lt
 800e93c:	eef0 7a63 	vmovlt.f32	s15, s7
 800e940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e944:	bf88      	it	hi
 800e946:	eef0 4a63 	vmovhi.f32	s9, s7
 800e94a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e94e:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800e952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e956:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e95a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e95e:	edd1 3a00 	vldr	s7, [r1]
 800e962:	bfb8      	it	lt
 800e964:	eef0 7a44 	vmovlt.f32	s15, s8
 800e968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96c:	bf88      	it	hi
 800e96e:	eef0 4a44 	vmovhi.f32	s9, s8
 800e972:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e976:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800e97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97e:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e982:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e986:	ed91 4a00 	vldr	s8, [r1]
 800e98a:	bfb8      	it	lt
 800e98c:	eef0 7a63 	vmovlt.f32	s15, s7
 800e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e994:	bf88      	it	hi
 800e996:	eef0 4a63 	vmovhi.f32	s9, s7
 800e99a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e9a6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e9aa:	bfb8      	it	lt
 800e9ac:	eef0 7a44 	vmovlt.f32	s15, s8
 800e9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b4:	bf88      	it	hi
 800e9b6:	eef0 4a44 	vmovhi.f32	s9, s8
 800e9ba:	2b0a      	cmp	r3, #10
 800e9bc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e9c0:	d113      	bne.n	800e9ea <kalman_3gyro.constprop.0+0x2112>
 800e9c2:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800e9c6:	ed91 4a00 	vldr	s8, [r1]
 800e9ca:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e9d6:	bfb8      	it	lt
 800e9d8:	eef0 7a44 	vmovlt.f32	s15, s8
 800e9dc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e4:	bf88      	it	hi
 800e9e6:	eef0 4a44 	vmovhi.f32	s9, s8
 800e9ea:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e9ee:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800ed8c <kalman_3gyro.constprop.0+0x24b4>
 800e9f2:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800ed90 <kalman_3gyro.constprop.0+0x24b8>
 800e9f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e9fa:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e9fe:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ea02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea06:	f300 81cd 	bgt.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800ea0a:	eef0 7ac5 	vabs.f32	s15, s10
 800ea0e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea12:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800ed94 <kalman_3gyro.constprop.0+0x24bc>
 800ea16:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ea1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1e:	f300 81c1 	bgt.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800ea22:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ea24:	ed91 5a00 	vldr	s10, [r1]
 800ea28:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ea2a:	ed91 4a00 	vldr	s8, [r1]
 800ea2e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ea30:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ea34:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800ea38:	ed90 3a00 	vldr	s6, [r0]
 800ea3c:	edd1 3a00 	vldr	s7, [r1]
 800ea40:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ea42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea46:	bfb4      	ite	lt
 800ea48:	eef0 7a44 	vmovlt.f32	s15, s8
 800ea4c:	eef0 7a45 	vmovge.f32	s15, s10
 800ea50:	bf8c      	ite	hi
 800ea52:	eef0 4a44 	vmovhi.f32	s9, s8
 800ea56:	eef0 4a45 	vmovls.f32	s9, s10
 800ea5a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ea5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea62:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ea66:	bfb8      	it	lt
 800ea68:	eef0 7a43 	vmovlt.f32	s15, s6
 800ea6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea70:	bf88      	it	hi
 800ea72:	eef0 4a43 	vmovhi.f32	s9, s6
 800ea76:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ea7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea7e:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ea82:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ea86:	ed91 4a00 	vldr	s8, [r1]
 800ea8a:	bfb8      	it	lt
 800ea8c:	eef0 7a63 	vmovlt.f32	s15, s7
 800ea90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea94:	bf88      	it	hi
 800ea96:	eef0 4a63 	vmovhi.f32	s9, s7
 800ea9a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ea9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800eaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa6:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eaaa:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eaae:	bfb8      	it	lt
 800eab0:	eef0 7a44 	vmovlt.f32	s15, s8
 800eab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab8:	bf88      	it	hi
 800eaba:	eef0 4a44 	vmovhi.f32	s9, s8
 800eabe:	2b05      	cmp	r3, #5
 800eac0:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eac4:	d065      	beq.n	800eb92 <kalman_3gyro.constprop.0+0x22ba>
 800eac6:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800eaca:	edd1 3a00 	vldr	s7, [r1]
 800eace:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800ead2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ead6:	ed91 4a00 	vldr	s8, [r1]
 800eada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eade:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eae2:	bfb8      	it	lt
 800eae4:	eef0 7a63 	vmovlt.f32	s15, s7
 800eae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaec:	bf88      	it	hi
 800eaee:	eef0 4a63 	vmovhi.f32	s9, s7
 800eaf2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eaf6:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800eafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafe:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb02:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb06:	edd1 3a00 	vldr	s7, [r1]
 800eb0a:	bfb8      	it	lt
 800eb0c:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	bf88      	it	hi
 800eb16:	eef0 4a44 	vmovhi.f32	s9, s8
 800eb1a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eb1e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800eb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb26:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb2a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eb2e:	ed91 4a00 	vldr	s8, [r1]
 800eb32:	bfb8      	it	lt
 800eb34:	eef0 7a63 	vmovlt.f32	s15, s7
 800eb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb3c:	bf88      	it	hi
 800eb3e:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb42:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb4e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb52:	bfb8      	it	lt
 800eb54:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5c:	bf88      	it	hi
 800eb5e:	eef0 4a44 	vmovhi.f32	s9, s8
 800eb62:	2b0a      	cmp	r3, #10
 800eb64:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb68:	d113      	bne.n	800eb92 <kalman_3gyro.constprop.0+0x22ba>
 800eb6a:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800eb6e:	ed91 4a00 	vldr	s8, [r1]
 800eb72:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb7e:	bfb8      	it	lt
 800eb80:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb84:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8c:	bf88      	it	hi
 800eb8e:	eef0 4a44 	vmovhi.f32	s9, s8
 800eb92:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800eb96:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800ed8c <kalman_3gyro.constprop.0+0x24b4>
 800eb9a:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800ed90 <kalman_3gyro.constprop.0+0x24b8>
 800eb9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eba2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800eba6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ebaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebae:	f300 80f9 	bgt.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800ebb2:	eef0 7ac5 	vabs.f32	s15, s10
 800ebb6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ebba:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800ed94 <kalman_3gyro.constprop.0+0x24bc>
 800ebbe:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ebc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc6:	f300 80ed 	bgt.w	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800ebca:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ebcc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800ebce:	edd1 4a00 	vldr	s9, [r1]
 800ebd2:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ebd4:	ed91 3a00 	vldr	s6, [r1]
 800ebd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ebda:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ebde:	ed91 4a00 	vldr	s8, [r1]
 800ebe2:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800ebe6:	edd1 3a00 	vldr	s7, [r1]
 800ebea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebee:	bfb4      	ite	lt
 800ebf0:	eef0 7a43 	vmovlt.f32	s15, s6
 800ebf4:	eef0 7a64 	vmovge.f32	s15, s9
 800ebf8:	bf8c      	ite	hi
 800ebfa:	eeb0 5a43 	vmovhi.f32	s10, s6
 800ebfe:	eeb0 5a64 	vmovls.f32	s10, s9
 800ec02:	eef4 3ae7 	vcmpe.f32	s7, s15
 800ec06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800ec0e:	bfa8      	it	ge
 800ec10:	eef0 7a63 	vmovge.f32	s15, s7
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	bf98      	it	ls
 800ec1a:	eeb0 5a63 	vmovls.f32	s10, s7
 800ec1e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	ee34 3a83 	vadd.f32	s6, s9, s6
 800ec2a:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800ec2e:	edd5 4a00 	vldr	s9, [r5]
 800ec32:	bfa8      	it	ge
 800ec34:	eef0 7a44 	vmovge.f32	s15, s8
 800ec38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3c:	bf98      	it	ls
 800ec3e:	eeb0 5a44 	vmovls.f32	s10, s8
 800ec42:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ec46:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ec4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4e:	eef4 4ac5 	vcmpe.f32	s9, s10
 800ec52:	bfb8      	it	lt
 800ec54:	eef0 7a64 	vmovlt.f32	s15, s9
 800ec58:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ec5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec60:	bf98      	it	ls
 800ec62:	eeb0 5a64 	vmovls.f32	s10, s9
 800ec66:	2b05      	cmp	r3, #5
 800ec68:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ec6c:	d065      	beq.n	800ed3a <kalman_3gyro.constprop.0+0x2462>
 800ec6e:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800ec72:	ed95 4a00 	vldr	s8, [r5]
 800ec76:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800ec7a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ec7e:	ed95 3a00 	vldr	s6, [r5]
 800ec82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec86:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ec8a:	bfb8      	it	lt
 800ec8c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec94:	bf88      	it	hi
 800ec96:	eeb0 5a44 	vmovhi.f32	s10, s8
 800ec9a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ec9e:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800eca2:	edd5 3a00 	vldr	s7, [r5]
 800eca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecaa:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800ecae:	bfb8      	it	lt
 800ecb0:	eef0 7a43 	vmovlt.f32	s15, s6
 800ecb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb8:	bf88      	it	hi
 800ecba:	eeb0 5a43 	vmovhi.f32	s10, s6
 800ecbe:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ecc2:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800ecc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecca:	ee34 4a24 	vadd.f32	s8, s8, s9
 800ecce:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800ecd2:	edd5 4a00 	vldr	s9, [r5]
 800ecd6:	bfb8      	it	lt
 800ecd8:	eef0 7a63 	vmovlt.f32	s15, s7
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	bf88      	it	hi
 800ece2:	eeb0 5a63 	vmovhi.f32	s10, s7
 800ece6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ecea:	ee34 4a03 	vadd.f32	s8, s8, s6
 800ecee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf2:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800ecf6:	bfb8      	it	lt
 800ecf8:	eef0 7a64 	vmovlt.f32	s15, s9
 800ecfc:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ed00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed04:	bf88      	it	hi
 800ed06:	eeb0 5a64 	vmovhi.f32	s10, s9
 800ed0a:	2b0a      	cmp	r3, #10
 800ed0c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ed10:	d113      	bne.n	800ed3a <kalman_3gyro.constprop.0+0x2462>
 800ed12:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800ed16:	ed93 4a00 	vldr	s8, [r3]
 800ed1a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed22:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ed26:	bfb8      	it	lt
 800ed28:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed2c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ed30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed34:	bf88      	it	hi
 800ed36:	eeb0 5a44 	vmovhi.f32	s10, s8
 800ed3a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ed3e:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800ed8c <kalman_3gyro.constprop.0+0x24b4>
 800ed42:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800ed90 <kalman_3gyro.constprop.0+0x24b8>
 800ed46:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed4a:	ee64 4a85 	vmul.f32	s9, s9, s10
 800ed4e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed56:	dc25      	bgt.n	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800ed58:	eef0 7ae4 	vabs.f32	s15, s9
 800ed5c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ed60:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800ed94 <kalman_3gyro.constprop.0+0x24bc>
 800ed64:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	dc1a      	bgt.n	800eda4 <kalman_3gyro.constprop.0+0x24cc>
 800ed6e:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800ed72:	2d00      	cmp	r5, #0
 800ed74:	f000 80e0 	beq.w	800ef38 <kalman_3gyro.constprop.0+0x2660>
 800ed78:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	f002 8439 	beq.w	80115f4 <kalman_3gyro.constprop.0+0x4d1c>
 800ed82:	2201      	movs	r2, #1
 800ed84:	462b      	mov	r3, r5
 800ed86:	9201      	str	r2, [sp, #4]
 800ed88:	e01c      	b.n	800edc4 <kalman_3gyro.constprop.0+0x24ec>
 800ed8a:	bf00      	nop
 800ed8c:	3be56041 	.word	0x3be56041
 800ed90:	3dcccccd 	.word	0x3dcccccd
 800ed94:	3e333333 	.word	0x3e333333
 800ed98:	3d088889 	.word	0x3d088889
 800ed9c:	42480000 	.word	0x42480000
 800eda0:	00000000 	.word	0x00000000
 800eda4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800eda8:	2100      	movs	r1, #0
 800edaa:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800edae:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f000 80c1 	beq.w	800ef3a <kalman_3gyro.constprop.0+0x2662>
 800edb8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800edbc:	2a01      	cmp	r2, #1
 800edbe:	f001 8615 	beq.w	80109ec <kalman_3gyro.constprop.0+0x4114>
 800edc2:	9101      	str	r1, [sp, #4]
 800edc4:	2b02      	cmp	r3, #2
 800edc6:	f041 87d2 	bne.w	8010d6e <kalman_3gyro.constprop.0+0x4496>
 800edca:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800edce:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800edd2:	f240 1301 	movw	r3, #257	; 0x101
 800edd6:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800edda:	2301      	movs	r3, #1
 800eddc:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800ede0:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800ede4:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800ede8:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800edec:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800edf0:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800edf4:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800edf8:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800edfc:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800ee00:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800ee04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ee08:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ee0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee10:	f2c2 809a 	blt.w	8010f48 <kalman_3gyro.constprop.0+0x4670>
 800ee14:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800ee18:	2a00      	cmp	r2, #0
 800ee1a:	f002 83db 	beq.w	80115d4 <kalman_3gyro.constprop.0+0x4cfc>
 800ee1e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800ee22:	3301      	adds	r3, #1
 800ee24:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800ee28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ee2c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800ee30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee34:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800ee38:	f002 84da 	beq.w	80117f0 <kalman_3gyro.constprop.0+0x4f18>
 800ee3c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800ee40:	f002 80d0 	beq.w	8010fe4 <kalman_3gyro.constprop.0+0x470c>
 800ee44:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	f042 80d0 	bne.w	8010fee <kalman_3gyro.constprop.0+0x4716>
 800ee4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee50:	a830      	add	r0, sp, #192	; 0xc0
 800ee52:	f04f 31ff 	mov.w	r1, #4294967295
 800ee56:	4613      	mov	r3, r2
 800ee58:	edd2 7a00 	vldr	s15, [r2]
 800ee5c:	3101      	adds	r1, #1
 800ee5e:	330c      	adds	r3, #12
 800ee60:	3204      	adds	r2, #4
 800ee62:	461c      	mov	r4, r3
 800ee64:	ed94 7a00 	vldr	s14, [r4]
 800ee68:	330c      	adds	r3, #12
 800ee6a:	4598      	cmp	r8, r3
 800ee6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee70:	d1f7      	bne.n	800ee62 <kalman_3gyro.constprop.0+0x258a>
 800ee72:	2902      	cmp	r1, #2
 800ee74:	ece0 7a01 	vstmia	r0!, {s15}
 800ee78:	f108 0804 	add.w	r8, r8, #4
 800ee7c:	d1eb      	bne.n	800ee56 <kalman_3gyro.constprop.0+0x257e>
 800ee7e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ed98 <kalman_3gyro.constprop.0+0x24c0>
 800ee82:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800ee86:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800ee8a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800ee8e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800ee90:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800ee94:	ee24 4a27 	vmul.f32	s8, s8, s15
 800ee98:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800ee9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800eea0:	460a      	mov	r2, r1
 800eea2:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800eea6:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800eeaa:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800eeae:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800eeb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeba:	f103 030c 	add.w	r3, r3, #12
 800eebe:	bf88      	it	hi
 800eec0:	eef0 7a47 	vmovhi.f32	s15, s14
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d1f2      	bne.n	800eeae <kalman_3gyro.constprop.0+0x25d6>
 800eec8:	1d1a      	adds	r2, r3, #4
 800eeca:	4290      	cmp	r0, r2
 800eecc:	ece4 7a01 	vstmia	r4!, {s15}
 800eed0:	d1e9      	bne.n	800eea6 <kalman_3gyro.constprop.0+0x25ce>
 800eed2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eed4:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800eed8:	edd3 7a00 	vldr	s15, [r3]
 800eedc:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800eee0:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800eee4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800eee8:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800eeec:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800eef0:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800eef4:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800eef8:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800eefc:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800ef00:	b14b      	cbz	r3, 800ef16 <kalman_3gyro.constprop.0+0x263e>
 800ef02:	ed9d 7a03 	vldr	s14, [sp, #12]
 800ef06:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800ef0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef12:	f102 8553 	bmi.w	80119bc <kalman_3gyro.constprop.0+0x50e4>
 800ef16:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800ef1a:	2a1e      	cmp	r2, #30
 800ef1c:	f002 84dd 	beq.w	80118da <kalman_3gyro.constprop.0+0x5002>
 800ef20:	1c53      	adds	r3, r2, #1
 800ef22:	2aff      	cmp	r2, #255	; 0xff
 800ef24:	bf14      	ite	ne
 800ef26:	b2db      	uxtbne	r3, r3
 800ef28:	23ff      	moveq	r3, #255	; 0xff
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800ef30:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800ef34:	9b01      	ldr	r3, [sp, #4]
 800ef36:	e012      	b.n	800ef5e <kalman_3gyro.constprop.0+0x2686>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800ef3e:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800ef42:	9181      	str	r1, [sp, #516]	; 0x204
 800ef44:	9282      	str	r2, [sp, #520]	; 0x208
 800ef46:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800ef4a:	9183      	str	r1, [sp, #524]	; 0x20c
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800ef52:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800ef56:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800ef5a:	f88b 2001 	strb.w	r2, [fp, #1]
 800ef5e:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800ed9c <kalman_3gyro.constprop.0+0x24c4>
 800ef62:	eeb4 cae7 	vcmpe.f32	s24, s15
 800ef66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6a:	f2c0 875f 	blt.w	800fe2c <kalman_3gyro.constprop.0+0x3554>
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800ef74:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800ef78:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800ef7c:	2b01      	cmp	r3, #1
 800ef7e:	d125      	bne.n	800efcc <kalman_3gyro.constprop.0+0x26f4>
 800ef80:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800ef84:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800ef88:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800ef8c:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800ef90:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ef94:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800ef98:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800ef9c:	ee25 5a24 	vmul.f32	s10, s10, s9
 800efa0:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800efa4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800efa8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800efac:	ee37 7a07 	vadd.f32	s14, s14, s14
 800efb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800efb4:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800efb8:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800efbc:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800efc0:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800efc4:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800efc8:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800efcc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800efd0:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800efd4:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800efd8:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800efdc:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800efe0:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800efe4:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800efe8:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800efec:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800eff0:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800eff4:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800eff8:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800effc:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f000:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f004:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f008:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f00c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f010:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f014:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f018:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f022:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f026:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f02a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f02e:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f032:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f036:	2500      	movs	r5, #0
 800f038:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f03c:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f040:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f044:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f048:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f04c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f050:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f054:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f058:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f05c:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f060:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f064:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f068:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f06c:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f070:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f074:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f078:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f07c:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f080:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f084:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f088:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f08c:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f090:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f094:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f098:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f09c:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f0a0:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f0a4:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800eda0 <kalman_3gyro.constprop.0+0x24c8>
 800f0a8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f0ac:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f0b0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f0b4:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f0b8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f0bc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f0c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f0c4:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f0c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f0cc:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f0d0:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f0d4:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f0d8:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f0dc:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f0e0:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f0e4:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f0e8:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f0ec:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f0f0:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f0f4:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f0f8:	e005      	b.n	800f106 <kalman_3gyro.constprop.0+0x282e>
 800f0fa:	3501      	adds	r5, #1
 800f0fc:	2d0c      	cmp	r5, #12
 800f0fe:	f104 0404 	add.w	r4, r4, #4
 800f102:	f000 84fe 	beq.w	800fb02 <kalman_3gyro.constprop.0+0x322a>
 800f106:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0f5      	beq.n	800f0fa <kalman_3gyro.constprop.0+0x2822>
 800f10e:	edd4 da00 	vldr	s27, [r4]
 800f112:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f116:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f11a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f11e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f122:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f126:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f12a:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f12e:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f132:	9b01      	ldr	r3, [sp, #4]
 800f134:	ed89 8a00 	vstr	s16, [r9]
 800f138:	ed89 8a01 	vstr	s16, [r9, #4]
 800f13c:	ed89 8a02 	vstr	s16, [r9, #8]
 800f140:	ed89 8a03 	vstr	s16, [r9, #12]
 800f144:	ed89 8a04 	vstr	s16, [r9, #16]
 800f148:	ed89 8a05 	vstr	s16, [r9, #20]
 800f14c:	ed89 8a06 	vstr	s16, [r9, #24]
 800f150:	ed89 8a07 	vstr	s16, [r9, #28]
 800f154:	ed89 8a08 	vstr	s16, [r9, #32]
 800f158:	464e      	mov	r6, r9
 800f15a:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f15e:	464a      	mov	r2, r9
 800f160:	ecb3 7a01 	vldmia	r3!, {s14}
 800f164:	ecf2 7a01 	vldmia	r2!, {s15}
 800f168:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f170:	d006      	beq.n	800f180 <kalman_3gyro.constprop.0+0x28a8>
 800f172:	eef5 da40 	vcmp.f32	s27, #0.0
 800f176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17a:	bf18      	it	ne
 800f17c:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f180:	ed93 7a08 	vldr	s14, [r3, #32]
 800f184:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18c:	d006      	beq.n	800f19c <kalman_3gyro.constprop.0+0x28c4>
 800f18e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	bf18      	it	ne
 800f198:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f19c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f1a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a8:	d006      	beq.n	800f1b8 <kalman_3gyro.constprop.0+0x28e0>
 800f1aa:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b2:	bf18      	it	ne
 800f1b4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f1b8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f1bc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c4:	d006      	beq.n	800f1d4 <kalman_3gyro.constprop.0+0x28fc>
 800f1c6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ce:	bf18      	it	ne
 800f1d0:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f1d4:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f1d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e0:	d006      	beq.n	800f1f0 <kalman_3gyro.constprop.0+0x2918>
 800f1e2:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ea:	bf18      	it	ne
 800f1ec:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f1f0:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f1f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fc:	d006      	beq.n	800f20c <kalman_3gyro.constprop.0+0x2934>
 800f1fe:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f206:	bf18      	it	ne
 800f208:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f20c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f210:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f218:	d006      	beq.n	800f228 <kalman_3gyro.constprop.0+0x2950>
 800f21a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f222:	bf18      	it	ne
 800f224:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f228:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f22c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f234:	d006      	beq.n	800f244 <kalman_3gyro.constprop.0+0x296c>
 800f236:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23e:	bf18      	it	ne
 800f240:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f244:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f248:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f24c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f250:	d006      	beq.n	800f260 <kalman_3gyro.constprop.0+0x2988>
 800f252:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f25a:	bf18      	it	ne
 800f25c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f260:	428b      	cmp	r3, r1
 800f262:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f266:	f47f af7b 	bne.w	800f160 <kalman_3gyro.constprop.0+0x2888>
 800f26a:	eef5 da40 	vcmp.f32	s27, #0.0
 800f26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f272:	edd9 8a00 	vldr	s17, [r9]
 800f276:	f040 8543 	bne.w	800fd00 <kalman_3gyro.constprop.0+0x3428>
 800f27a:	eef0 7a6d 	vmov.f32	s15, s27
 800f27e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f286:	ed99 9a01 	vldr	s18, [r9, #4]
 800f28a:	d006      	beq.n	800f29a <kalman_3gyro.constprop.0+0x29c2>
 800f28c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f294:	bf18      	it	ne
 800f296:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f29a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a2:	edd9 aa02 	vldr	s21, [r9, #8]
 800f2a6:	d006      	beq.n	800f2b6 <kalman_3gyro.constprop.0+0x29de>
 800f2a8:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2b0:	bf18      	it	ne
 800f2b2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f2b6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2be:	edd9 ba03 	vldr	s23, [r9, #12]
 800f2c2:	d006      	beq.n	800f2d2 <kalman_3gyro.constprop.0+0x29fa>
 800f2c4:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2cc:	bf18      	it	ne
 800f2ce:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f2d2:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2da:	edd9 ca04 	vldr	s25, [r9, #16]
 800f2de:	d006      	beq.n	800f2ee <kalman_3gyro.constprop.0+0x2a16>
 800f2e0:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e8:	bf18      	it	ne
 800f2ea:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f2ee:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f6:	ed99 ca05 	vldr	s24, [r9, #20]
 800f2fa:	d006      	beq.n	800f30a <kalman_3gyro.constprop.0+0x2a32>
 800f2fc:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f304:	bf18      	it	ne
 800f306:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f30a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f312:	ed99 da06 	vldr	s26, [r9, #24]
 800f316:	d006      	beq.n	800f326 <kalman_3gyro.constprop.0+0x2a4e>
 800f318:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f320:	bf18      	it	ne
 800f322:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f326:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32e:	ed99 aa07 	vldr	s20, [r9, #28]
 800f332:	d006      	beq.n	800f342 <kalman_3gyro.constprop.0+0x2a6a>
 800f334:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33c:	bf18      	it	ne
 800f33e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f342:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34a:	ed99 ba08 	vldr	s22, [r9, #32]
 800f34e:	d006      	beq.n	800f35e <kalman_3gyro.constprop.0+0x2a86>
 800f350:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	bf18      	it	ne
 800f35a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f35e:	ab87      	add	r3, sp, #540	; 0x21c
 800f360:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f364:	ed92 7a00 	vldr	s14, [r2]
 800f368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f36c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f370:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f374:	2d05      	cmp	r5, #5
 800f376:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f37a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f37e:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f382:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f386:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f38a:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f38e:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f392:	ee2d da27 	vmul.f32	s26, s26, s15
 800f396:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f39a:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f39e:	edc9 8a00 	vstr	s17, [r9]
 800f3a2:	ed89 9a01 	vstr	s18, [r9, #4]
 800f3a6:	edc9 aa02 	vstr	s21, [r9, #8]
 800f3aa:	edc9 ba03 	vstr	s23, [r9, #12]
 800f3ae:	edc9 ca04 	vstr	s25, [r9, #16]
 800f3b2:	ed89 ca05 	vstr	s24, [r9, #20]
 800f3b6:	ed89 da06 	vstr	s26, [r9, #24]
 800f3ba:	ed89 aa07 	vstr	s20, [r9, #28]
 800f3be:	ed89 ba08 	vstr	s22, [r9, #32]
 800f3c2:	f340 8497 	ble.w	800fcf4 <kalman_3gyro.constprop.0+0x341c>
 800f3c6:	eef5 da40 	vcmp.f32	s27, #0.0
 800f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ce:	f000 8510 	beq.w	800fdf2 <kalman_3gyro.constprop.0+0x351a>
 800f3d2:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f3d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3de:	d001      	beq.n	800f3e4 <kalman_3gyro.constprop.0+0x2b0c>
 800f3e0:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f3e4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ec:	d008      	beq.n	800f400 <kalman_3gyro.constprop.0+0x2b28>
 800f3ee:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f3f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fa:	bf18      	it	ne
 800f3fc:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f400:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f408:	d008      	beq.n	800f41c <kalman_3gyro.constprop.0+0x2b44>
 800f40a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f40e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f416:	bf18      	it	ne
 800f418:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f41c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f424:	d008      	beq.n	800f438 <kalman_3gyro.constprop.0+0x2b60>
 800f426:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f42a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f432:	bf18      	it	ne
 800f434:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f438:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f440:	d008      	beq.n	800f454 <kalman_3gyro.constprop.0+0x2b7c>
 800f442:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f446:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44e:	bf18      	it	ne
 800f450:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f454:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45c:	d008      	beq.n	800f470 <kalman_3gyro.constprop.0+0x2b98>
 800f45e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f462:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f46a:	bf18      	it	ne
 800f46c:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f470:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f478:	d008      	beq.n	800f48c <kalman_3gyro.constprop.0+0x2bb4>
 800f47a:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f47e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f486:	bf18      	it	ne
 800f488:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f48c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f494:	d008      	beq.n	800f4a8 <kalman_3gyro.constprop.0+0x2bd0>
 800f496:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f49a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a2:	bf18      	it	ne
 800f4a4:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f4a8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b0:	d008      	beq.n	800f4c4 <kalman_3gyro.constprop.0+0x2bec>
 800f4b2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f4b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4be:	bf18      	it	ne
 800f4c0:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f4c4:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f4c6:	4413      	add	r3, r2
 800f4c8:	edd3 9a00 	vldr	s19, [r3]
 800f4cc:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f4d0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f4dc:	edcd 5a04 	vstr	s11, [sp, #16]
 800f4e0:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f4e4:	edcd 6a02 	vstr	s13, [sp, #8]
 800f4e8:	f007 ff76 	bl	80173d8 <memset>
 800f4ec:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f4f0:	eddd 5a04 	vldr	s11, [sp, #16]
 800f4f4:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f4f8:	eddd 6a02 	vldr	s13, [sp, #8]
 800f4fc:	4651      	mov	r1, sl
 800f4fe:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f502:	4653      	mov	r3, sl
 800f504:	ecf6 7a01 	vldmia	r6!, {s15}
 800f508:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f510:	d062      	beq.n	800f5d8 <kalman_3gyro.constprop.0+0x2d00>
 800f512:	eef5 da40 	vcmp.f32	s27, #0.0
 800f516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51a:	d005      	beq.n	800f528 <kalman_3gyro.constprop.0+0x2c50>
 800f51c:	ed93 7a00 	vldr	s14, [r3]
 800f520:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f524:	ed83 7a00 	vstr	s14, [r3]
 800f528:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f530:	d005      	beq.n	800f53e <kalman_3gyro.constprop.0+0x2c66>
 800f532:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f536:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f53a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f53e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f546:	d005      	beq.n	800f554 <kalman_3gyro.constprop.0+0x2c7c>
 800f548:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f54c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f550:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f554:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55c:	d005      	beq.n	800f56a <kalman_3gyro.constprop.0+0x2c92>
 800f55e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f562:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f566:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f56a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f572:	d005      	beq.n	800f580 <kalman_3gyro.constprop.0+0x2ca8>
 800f574:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f578:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f57c:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f580:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f588:	d005      	beq.n	800f596 <kalman_3gyro.constprop.0+0x2cbe>
 800f58a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f58e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f592:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f596:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59e:	d005      	beq.n	800f5ac <kalman_3gyro.constprop.0+0x2cd4>
 800f5a0:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f5a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f5a8:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f5ac:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b4:	d005      	beq.n	800f5c2 <kalman_3gyro.constprop.0+0x2cea>
 800f5b6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f5ba:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f5be:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f5c2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ca:	d005      	beq.n	800f5d8 <kalman_3gyro.constprop.0+0x2d00>
 800f5cc:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f5d0:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f5d4:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f5d8:	4296      	cmp	r6, r2
 800f5da:	f103 0304 	add.w	r3, r3, #4
 800f5de:	d191      	bne.n	800f504 <kalman_3gyro.constprop.0+0x2c2c>
 800f5e0:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f5e4:	4656      	mov	r6, sl
 800f5e6:	463b      	mov	r3, r7
 800f5e8:	2208      	movs	r2, #8
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f5f0:	e074      	b.n	800f6dc <kalman_3gyro.constprop.0+0x2e04>
 800f5f2:	edd6 7a00 	vldr	s15, [r6]
 800f5f6:	ed83 8a01 	vstr	s16, [r3, #4]
 800f5fa:	eef1 7a67 	vneg.f32	s15, s15
 800f5fe:	2801      	cmp	r0, #1
 800f600:	edc6 7a00 	vstr	s15, [r6]
 800f604:	f1a2 0c07 	sub.w	ip, r2, #7
 800f608:	f000 831e 	beq.w	800fc48 <kalman_3gyro.constprop.0+0x3370>
 800f60c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f610:	eddc 7a00 	vldr	s15, [ip]
 800f614:	ed83 8a02 	vstr	s16, [r3, #8]
 800f618:	eef1 7a67 	vneg.f32	s15, s15
 800f61c:	2802      	cmp	r0, #2
 800f61e:	edcc 7a00 	vstr	s15, [ip]
 800f622:	f1a2 0c06 	sub.w	ip, r2, #6
 800f626:	f000 82f8 	beq.w	800fc1a <kalman_3gyro.constprop.0+0x3342>
 800f62a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f62e:	eddc 7a00 	vldr	s15, [ip]
 800f632:	ed83 8a03 	vstr	s16, [r3, #12]
 800f636:	eef1 7a67 	vneg.f32	s15, s15
 800f63a:	2803      	cmp	r0, #3
 800f63c:	edcc 7a00 	vstr	s15, [ip]
 800f640:	f1a2 0c05 	sub.w	ip, r2, #5
 800f644:	d170      	bne.n	800f728 <kalman_3gyro.constprop.0+0x2e50>
 800f646:	edd6 7a03 	vldr	s15, [r6, #12]
 800f64a:	ed83 8a04 	vstr	s16, [r3, #16]
 800f64e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f652:	f1a2 0e04 	sub.w	lr, r2, #4
 800f656:	edc6 7a03 	vstr	s15, [r6, #12]
 800f65a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f65e:	edde 7a00 	vldr	s15, [lr]
 800f662:	ed83 8a05 	vstr	s16, [r3, #20]
 800f666:	eef1 7a67 	vneg.f32	s15, s15
 800f66a:	f1a2 0c03 	sub.w	ip, r2, #3
 800f66e:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f672:	edce 7a00 	vstr	s15, [lr]
 800f676:	eddc 7a00 	vldr	s15, [ip]
 800f67a:	ed83 8a06 	vstr	s16, [r3, #24]
 800f67e:	eef1 7a67 	vneg.f32	s15, s15
 800f682:	edcc 7a00 	vstr	s15, [ip]
 800f686:	f1a2 0c02 	sub.w	ip, r2, #2
 800f68a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f68e:	eddc 7a00 	vldr	s15, [ip]
 800f692:	ed83 8a07 	vstr	s16, [r3, #28]
 800f696:	eef1 7a67 	vneg.f32	s15, s15
 800f69a:	2807      	cmp	r0, #7
 800f69c:	edcc 7a00 	vstr	s15, [ip]
 800f6a0:	f102 3cff 	add.w	ip, r2, #4294967295
 800f6a4:	f040 80a2 	bne.w	800f7ec <kalman_3gyro.constprop.0+0x2f14>
 800f6a8:	edd6 7a07 	vldr	s15, [r6, #28]
 800f6ac:	ed83 8a08 	vstr	s16, [r3, #32]
 800f6b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6b4:	edc6 7a07 	vstr	s15, [r6, #28]
 800f6b8:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f6bc:	eddc 7a00 	vldr	s15, [ip]
 800f6c0:	3001      	adds	r0, #1
 800f6c2:	eef1 7a67 	vneg.f32	s15, s15
 800f6c6:	2809      	cmp	r0, #9
 800f6c8:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f6cc:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f6d0:	f102 0209 	add.w	r2, r2, #9
 800f6d4:	edcc 7a00 	vstr	s15, [ip]
 800f6d8:	f000 809f 	beq.w	800f81a <kalman_3gyro.constprop.0+0x2f42>
 800f6dc:	ed83 8a00 	vstr	s16, [r3]
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d186      	bne.n	800f5f2 <kalman_3gyro.constprop.0+0x2d1a>
 800f6e4:	edda 7a00 	vldr	s15, [sl]
 800f6e8:	ed83 8a01 	vstr	s16, [r3, #4]
 800f6ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6f0:	f1a2 0e07 	sub.w	lr, r2, #7
 800f6f4:	edc6 7a00 	vstr	s15, [r6]
 800f6f8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f6fc:	edde 7a00 	vldr	s15, [lr]
 800f700:	ed83 8a02 	vstr	s16, [r3, #8]
 800f704:	eef1 7a67 	vneg.f32	s15, s15
 800f708:	f1a2 0c06 	sub.w	ip, r2, #6
 800f70c:	edce 7a00 	vstr	s15, [lr]
 800f710:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f714:	eddc 7a00 	vldr	s15, [ip]
 800f718:	ed83 8a03 	vstr	s16, [r3, #12]
 800f71c:	eef1 7a67 	vneg.f32	s15, s15
 800f720:	edcc 7a00 	vstr	s15, [ip]
 800f724:	f1a2 0c05 	sub.w	ip, r2, #5
 800f728:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f72c:	eddc 7a00 	vldr	s15, [ip]
 800f730:	ed83 8a04 	vstr	s16, [r3, #16]
 800f734:	eef1 7a67 	vneg.f32	s15, s15
 800f738:	2804      	cmp	r0, #4
 800f73a:	edcc 7a00 	vstr	s15, [ip]
 800f73e:	f1a2 0c04 	sub.w	ip, r2, #4
 800f742:	d031      	beq.n	800f7a8 <kalman_3gyro.constprop.0+0x2ed0>
 800f744:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f748:	eddc 7a00 	vldr	s15, [ip]
 800f74c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f750:	eef1 7a67 	vneg.f32	s15, s15
 800f754:	2805      	cmp	r0, #5
 800f756:	edcc 7a00 	vstr	s15, [ip]
 800f75a:	f1a2 0c03 	sub.w	ip, r2, #3
 800f75e:	f000 8245 	beq.w	800fbec <kalman_3gyro.constprop.0+0x3314>
 800f762:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f766:	eddc 7a00 	vldr	s15, [ip]
 800f76a:	ed83 8a06 	vstr	s16, [r3, #24]
 800f76e:	eef1 7a67 	vneg.f32	s15, s15
 800f772:	2806      	cmp	r0, #6
 800f774:	edcc 7a00 	vstr	s15, [ip]
 800f778:	f1a2 0c02 	sub.w	ip, r2, #2
 800f77c:	d185      	bne.n	800f68a <kalman_3gyro.constprop.0+0x2db2>
 800f77e:	edd6 7a06 	vldr	s15, [r6, #24]
 800f782:	ed83 8a07 	vstr	s16, [r3, #28]
 800f786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f78a:	f102 3cff 	add.w	ip, r2, #4294967295
 800f78e:	edc6 7a06 	vstr	s15, [r6, #24]
 800f792:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f796:	eddc 7a00 	vldr	s15, [ip]
 800f79a:	ed83 8a08 	vstr	s16, [r3, #32]
 800f79e:	eef1 7a67 	vneg.f32	s15, s15
 800f7a2:	edcc 7a00 	vstr	s15, [ip]
 800f7a6:	e787      	b.n	800f6b8 <kalman_3gyro.constprop.0+0x2de0>
 800f7a8:	edd6 7a04 	vldr	s15, [r6, #16]
 800f7ac:	ed83 8a05 	vstr	s16, [r3, #20]
 800f7b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7b4:	f1a2 0e03 	sub.w	lr, r2, #3
 800f7b8:	edc6 7a04 	vstr	s15, [r6, #16]
 800f7bc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f7c0:	edde 7a00 	vldr	s15, [lr]
 800f7c4:	ed83 8a06 	vstr	s16, [r3, #24]
 800f7c8:	eef1 7a67 	vneg.f32	s15, s15
 800f7cc:	f1a2 0c02 	sub.w	ip, r2, #2
 800f7d0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f7d4:	edce 7a00 	vstr	s15, [lr]
 800f7d8:	eddc 7a00 	vldr	s15, [ip]
 800f7dc:	ed83 8a07 	vstr	s16, [r3, #28]
 800f7e0:	eef1 7a67 	vneg.f32	s15, s15
 800f7e4:	edcc 7a00 	vstr	s15, [ip]
 800f7e8:	f102 3cff 	add.w	ip, r2, #4294967295
 800f7ec:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f7f0:	eddc 7a00 	vldr	s15, [ip]
 800f7f4:	ed83 8a08 	vstr	s16, [r3, #32]
 800f7f8:	eef1 7a67 	vneg.f32	s15, s15
 800f7fc:	2808      	cmp	r0, #8
 800f7fe:	edcc 7a00 	vstr	s15, [ip]
 800f802:	f47f af59 	bne.w	800f6b8 <kalman_3gyro.constprop.0+0x2de0>
 800f806:	ed96 7a08 	vldr	s14, [r6, #32]
 800f80a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f80e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f812:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f816:	edc2 7a00 	vstr	s15, [r2]
 800f81a:	2000      	movs	r0, #0
 800f81c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800f820:	ecb1 3a01 	vldmia	r1!, {s6}
 800f824:	edd1 3a08 	vldr	s7, [r1, #32]
 800f828:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800f82c:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800f830:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800f834:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800f838:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800f83c:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800f840:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800f844:	465a      	mov	r2, fp
 800f846:	463b      	mov	r3, r7
 800f848:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f850:	d00c      	beq.n	800f86c <kalman_3gyro.constprop.0+0x2f94>
 800f852:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800f856:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85e:	d005      	beq.n	800f86c <kalman_3gyro.constprop.0+0x2f94>
 800f860:	edd3 7a00 	vldr	s15, [r3]
 800f864:	eee3 7a22 	vfma.f32	s15, s6, s5
 800f868:	edc3 7a00 	vstr	s15, [r3]
 800f86c:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f874:	d00c      	beq.n	800f890 <kalman_3gyro.constprop.0+0x2fb8>
 800f876:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800f87a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f882:	d005      	beq.n	800f890 <kalman_3gyro.constprop.0+0x2fb8>
 800f884:	edd3 7a00 	vldr	s15, [r3]
 800f888:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800f88c:	edc3 7a00 	vstr	s15, [r3]
 800f890:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f898:	d00c      	beq.n	800f8b4 <kalman_3gyro.constprop.0+0x2fdc>
 800f89a:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800f89e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a6:	d005      	beq.n	800f8b4 <kalman_3gyro.constprop.0+0x2fdc>
 800f8a8:	edd3 7a00 	vldr	s15, [r3]
 800f8ac:	eee4 7a22 	vfma.f32	s15, s8, s5
 800f8b0:	edc3 7a00 	vstr	s15, [r3]
 800f8b4:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8bc:	d00c      	beq.n	800f8d8 <kalman_3gyro.constprop.0+0x3000>
 800f8be:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800f8c2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ca:	d005      	beq.n	800f8d8 <kalman_3gyro.constprop.0+0x3000>
 800f8cc:	edd3 7a00 	vldr	s15, [r3]
 800f8d0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f8d4:	edc3 7a00 	vstr	s15, [r3]
 800f8d8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e0:	d00c      	beq.n	800f8fc <kalman_3gyro.constprop.0+0x3024>
 800f8e2:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800f8e6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ee:	d005      	beq.n	800f8fc <kalman_3gyro.constprop.0+0x3024>
 800f8f0:	edd3 7a00 	vldr	s15, [r3]
 800f8f4:	eee5 7a22 	vfma.f32	s15, s10, s5
 800f8f8:	edc3 7a00 	vstr	s15, [r3]
 800f8fc:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f904:	d00c      	beq.n	800f920 <kalman_3gyro.constprop.0+0x3048>
 800f906:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800f90a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f912:	d005      	beq.n	800f920 <kalman_3gyro.constprop.0+0x3048>
 800f914:	edd3 7a00 	vldr	s15, [r3]
 800f918:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800f91c:	edc3 7a00 	vstr	s15, [r3]
 800f920:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f928:	d00c      	beq.n	800f944 <kalman_3gyro.constprop.0+0x306c>
 800f92a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800f92e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f936:	d005      	beq.n	800f944 <kalman_3gyro.constprop.0+0x306c>
 800f938:	edd3 7a00 	vldr	s15, [r3]
 800f93c:	eee6 7a22 	vfma.f32	s15, s12, s5
 800f940:	edc3 7a00 	vstr	s15, [r3]
 800f944:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94c:	d00c      	beq.n	800f968 <kalman_3gyro.constprop.0+0x3090>
 800f94e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800f952:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95a:	d005      	beq.n	800f968 <kalman_3gyro.constprop.0+0x3090>
 800f95c:	edd3 7a00 	vldr	s15, [r3]
 800f960:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800f964:	edc3 7a00 	vstr	s15, [r3]
 800f968:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f970:	d00c      	beq.n	800f98c <kalman_3gyro.constprop.0+0x30b4>
 800f972:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800f976:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97e:	d005      	beq.n	800f98c <kalman_3gyro.constprop.0+0x30b4>
 800f980:	edd3 7a00 	vldr	s15, [r3]
 800f984:	eee7 7a22 	vfma.f32	s15, s14, s5
 800f988:	edc3 7a00 	vstr	s15, [r3]
 800f98c:	3224      	adds	r2, #36	; 0x24
 800f98e:	4296      	cmp	r6, r2
 800f990:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f994:	f47f af58 	bne.w	800f848 <kalman_3gyro.constprop.0+0x2f70>
 800f998:	3001      	adds	r0, #1
 800f99a:	2809      	cmp	r0, #9
 800f99c:	f107 0704 	add.w	r7, r7, #4
 800f9a0:	f47f af3e 	bne.w	800f820 <kalman_3gyro.constprop.0+0x2f48>
 800f9a4:	9801      	ldr	r0, [sp, #4]
 800f9a6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f9aa:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800f9ae:	f007 fd05 	bl	80173bc <memcpy>
 800f9b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ba:	f000 817c 	beq.w	800fcb6 <kalman_3gyro.constprop.0+0x33de>
 800f9be:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c6:	f000 8176 	beq.w	800fcb6 <kalman_3gyro.constprop.0+0x33de>
 800f9ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d2:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f9d6:	f040 8212 	bne.w	800fdfe <kalman_3gyro.constprop.0+0x3526>
 800f9da:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e2:	f000 8177 	beq.w	800fcd4 <kalman_3gyro.constprop.0+0x33fc>
 800f9e6:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ee:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f9f2:	f040 81cb 	bne.w	800fd8c <kalman_3gyro.constprop.0+0x34b4>
 800f9f6:	eef0 ba47 	vmov.f32	s23, s14
 800f9fa:	eef0 aa49 	vmov.f32	s21, s18
 800f9fe:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa06:	f000 8138 	beq.w	800fc7a <kalman_3gyro.constprop.0+0x33a2>
 800fa0a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	f000 824e 	beq.w	800feb2 <kalman_3gyro.constprop.0+0x35da>
 800fa16:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fa1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fa22:	eef0 7a48 	vmov.f32	s15, s16
 800fa26:	f040 81c5 	bne.w	800fdb4 <kalman_3gyro.constprop.0+0x34dc>
 800fa2a:	eeb0 ca47 	vmov.f32	s24, s14
 800fa2e:	eef0 ca67 	vmov.f32	s25, s15
 800fa32:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3a:	f000 8179 	beq.w	800fd30 <kalman_3gyro.constprop.0+0x3458>
 800fa3e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa46:	f000 8125 	beq.w	800fc94 <kalman_3gyro.constprop.0+0x33bc>
 800fa4a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fa4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa52:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fa56:	eef0 7a48 	vmov.f32	s15, s16
 800fa5a:	f040 81be 	bne.w	800fdda <kalman_3gyro.constprop.0+0x3502>
 800fa5e:	eeb0 aa47 	vmov.f32	s20, s14
 800fa62:	eeb0 da67 	vmov.f32	s26, s15
 800fa66:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6e:	f000 811f 	beq.w	800fcb0 <kalman_3gyro.constprop.0+0x33d8>
 800fa72:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fa76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7a:	f000 821d 	beq.w	800feb8 <kalman_3gyro.constprop.0+0x35e0>
 800fa7e:	eef0 7a48 	vmov.f32	s15, s16
 800fa82:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fa86:	eef0 9a67 	vmov.f32	s19, s15
 800fa8a:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fa8e:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fa92:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fa96:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fa9a:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fa9e:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800faa2:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800faa6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800faaa:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800faae:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fab2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fab6:	ee74 baab 	vadd.f32	s23, s9, s23
 800faba:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fabe:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fac2:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fac6:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800faca:	ee77 9a29 	vadd.f32	s19, s14, s19
 800face:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800fad2:	3501      	adds	r5, #1
 800fad4:	2d0c      	cmp	r5, #12
 800fad6:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800fada:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800fade:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800fae2:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800fae6:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800faea:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800faee:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800faf2:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800faf6:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800fafa:	f104 0404 	add.w	r4, r4, #4
 800fafe:	f47f ab02 	bne.w	800f106 <kalman_3gyro.constprop.0+0x282e>
 800fb02:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800fb06:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fb0a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fb0e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800fb12:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fb16:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fb1a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fb1e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb26:	f100 81b5 	bmi.w	800fe94 <kalman_3gyro.constprop.0+0x35bc>
 800fb2a:	eef1 4ae7 	vsqrt.f32	s9, s15
 800fb2e:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 800fec0 <kalman_3gyro.constprop.0+0x35e8>
 800fb32:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800fb36:	ee67 4a86 	vmul.f32	s9, s15, s12
 800fb3a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800fb3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb42:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800fb46:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800fb4a:	aa36      	add	r2, sp, #216	; 0xd8
 800fb4c:	edc3 4a00 	vstr	s9, [r3]
 800fb50:	edc3 5a01 	vstr	s11, [r3, #4]
 800fb54:	edc3 7a02 	vstr	s15, [r3, #8]
 800fb58:	ed83 5a03 	vstr	s10, [r3, #12]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	4611      	mov	r1, r2
 800fb60:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800fb64:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800fb68:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800fb6c:	f7fb fdbc 	bl	800b6e8 <qmult>
 800fb70:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800fb74:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800fb78:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800fb7c:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800fb80:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800fb84:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fb86:	ee66 7a06 	vmul.f32	s15, s12, s12
 800fb8a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800fb8e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fb92:	ae54      	add	r6, sp, #336	; 0x150
 800fb94:	af5c      	add	r7, sp, #368	; 0x170
 800fb96:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fb9a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fb9e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800fba2:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800fba6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800fbaa:	ee26 6a27 	vmul.f32	s12, s12, s15
 800fbae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fbb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fbb6:	edc3 5a00 	vstr	s11, [r3]
 800fbba:	ed83 6a01 	vstr	s12, [r3, #4]
 800fbbe:	edc3 6a02 	vstr	s13, [r3, #8]
 800fbc2:	ed83 7a03 	vstr	s14, [r3, #12]
 800fbc6:	4634      	mov	r4, r6
 800fbc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fbca:	42bc      	cmp	r4, r7
 800fbcc:	6028      	str	r0, [r5, #0]
 800fbce:	6069      	str	r1, [r5, #4]
 800fbd0:	60aa      	str	r2, [r5, #8]
 800fbd2:	60eb      	str	r3, [r5, #12]
 800fbd4:	4626      	mov	r6, r4
 800fbd6:	f105 0510 	add.w	r5, r5, #16
 800fbda:	d1f4      	bne.n	800fbc6 <kalman_3gyro.constprop.0+0x32ee>
 800fbdc:	6820      	ldr	r0, [r4, #0]
 800fbde:	6028      	str	r0, [r5, #0]
 800fbe0:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800fbe4:	ecbd 8b10 	vpop	{d8-d15}
 800fbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbec:	edd6 7a05 	vldr	s15, [r6, #20]
 800fbf0:	ed83 8a06 	vstr	s16, [r3, #24]
 800fbf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbf8:	f1a2 0e02 	sub.w	lr, r2, #2
 800fbfc:	edc6 7a05 	vstr	s15, [r6, #20]
 800fc00:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fc04:	edde 7a00 	vldr	s15, [lr]
 800fc08:	ed83 8a07 	vstr	s16, [r3, #28]
 800fc0c:	eef1 7a67 	vneg.f32	s15, s15
 800fc10:	f102 3cff 	add.w	ip, r2, #4294967295
 800fc14:	edce 7a00 	vstr	s15, [lr]
 800fc18:	e5bb      	b.n	800f792 <kalman_3gyro.constprop.0+0x2eba>
 800fc1a:	edd6 7a02 	vldr	s15, [r6, #8]
 800fc1e:	ed83 8a03 	vstr	s16, [r3, #12]
 800fc22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc26:	f1a2 0c05 	sub.w	ip, r2, #5
 800fc2a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fc2e:	edc6 7a02 	vstr	s15, [r6, #8]
 800fc32:	eddc 7a00 	vldr	s15, [ip]
 800fc36:	ed83 8a04 	vstr	s16, [r3, #16]
 800fc3a:	eef1 7a67 	vneg.f32	s15, s15
 800fc3e:	edcc 7a00 	vstr	s15, [ip]
 800fc42:	f1a2 0c04 	sub.w	ip, r2, #4
 800fc46:	e57d      	b.n	800f744 <kalman_3gyro.constprop.0+0x2e6c>
 800fc48:	edd6 7a01 	vldr	s15, [r6, #4]
 800fc4c:	ed83 8a02 	vstr	s16, [r3, #8]
 800fc50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc54:	f1a2 0c06 	sub.w	ip, r2, #6
 800fc58:	edc6 7a01 	vstr	s15, [r6, #4]
 800fc5c:	e558      	b.n	800f710 <kalman_3gyro.constprop.0+0x2e38>
 800fc5e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc66:	ee69 7aab 	vmul.f32	s15, s19, s23
 800fc6a:	eeb0 7a48 	vmov.f32	s14, s16
 800fc6e:	f040 8097 	bne.w	800fda0 <kalman_3gyro.constprop.0+0x34c8>
 800fc72:	eef0 ca67 	vmov.f32	s25, s15
 800fc76:	eef0 ba47 	vmov.f32	s23, s14
 800fc7a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	f43f aed6 	beq.w	800fa32 <kalman_3gyro.constprop.0+0x315a>
 800fc86:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8e:	d142      	bne.n	800fd16 <kalman_3gyro.constprop.0+0x343e>
 800fc90:	eeb0 ca69 	vmov.f32	s24, s19
 800fc94:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9c:	f040 80ba 	bne.w	800fe14 <kalman_3gyro.constprop.0+0x353c>
 800fca0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca8:	eeb0 da4a 	vmov.f32	s26, s20
 800fcac:	f47f aee1 	bne.w	800fa72 <kalman_3gyro.constprop.0+0x319a>
 800fcb0:	eef0 9a4b 	vmov.f32	s19, s22
 800fcb4:	e6e9      	b.n	800fa8a <kalman_3gyro.constprop.0+0x31b2>
 800fcb6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fcba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcbe:	d051      	beq.n	800fd64 <kalman_3gyro.constprop.0+0x348c>
 800fcc0:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc8:	f040 8097 	bne.w	800fdfa <kalman_3gyro.constprop.0+0x3522>
 800fccc:	eef0 aa69 	vmov.f32	s21, s19
 800fcd0:	eef0 8a69 	vmov.f32	s17, s19
 800fcd4:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcdc:	f43f ae8f 	beq.w	800f9fe <kalman_3gyro.constprop.0+0x3126>
 800fce0:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce8:	d1b9      	bne.n	800fc5e <kalman_3gyro.constprop.0+0x3386>
 800fcea:	eef0 ca69 	vmov.f32	s25, s19
 800fcee:	eef0 ba69 	vmov.f32	s23, s19
 800fcf2:	e7c2      	b.n	800fc7a <kalman_3gyro.constprop.0+0x33a2>
 800fcf4:	aa7b      	add	r2, sp, #492	; 0x1ec
 800fcf6:	4413      	add	r3, r2
 800fcf8:	edd3 9a00 	vldr	s19, [r3]
 800fcfc:	f7ff bbe8 	b.w	800f4d0 <kalman_3gyro.constprop.0+0x2bf8>
 800fd00:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd08:	bf14      	ite	ne
 800fd0a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800fd0e:	eef0 7a68 	vmoveq.f32	s15, s17
 800fd12:	f7ff bab4 	b.w	800f27e <kalman_3gyro.constprop.0+0x29a6>
 800fd16:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800fd22:	eeb0 7a48 	vmov.f32	s14, s16
 800fd26:	d14e      	bne.n	800fdc6 <kalman_3gyro.constprop.0+0x34ee>
 800fd28:	eeb0 da67 	vmov.f32	s26, s15
 800fd2c:	eeb0 ca47 	vmov.f32	s24, s14
 800fd30:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	f43f ae95 	beq.w	800fa66 <kalman_3gyro.constprop.0+0x318e>
 800fd3c:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd44:	f000 84bd 	beq.w	80106c2 <kalman_3gyro.constprop.0+0x3dea>
 800fd48:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd50:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800fd54:	eeb0 7a48 	vmov.f32	s14, s16
 800fd58:	d148      	bne.n	800fdec <kalman_3gyro.constprop.0+0x3514>
 800fd5a:	eef0 9a67 	vmov.f32	s19, s15
 800fd5e:	eeb0 aa47 	vmov.f32	s20, s14
 800fd62:	e692      	b.n	800fa8a <kalman_3gyro.constprop.0+0x31b2>
 800fd64:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6c:	d05b      	beq.n	800fe26 <kalman_3gyro.constprop.0+0x354e>
 800fd6e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd76:	d0a9      	beq.n	800fccc <kalman_3gyro.constprop.0+0x33f4>
 800fd78:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd80:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fd84:	eef0 8a49 	vmov.f32	s17, s18
 800fd88:	f43f ae35 	beq.w	800f9f6 <kalman_3gyro.constprop.0+0x311e>
 800fd8c:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fd90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd94:	ee69 7aab 	vmul.f32	s15, s19, s23
 800fd98:	eef0 aa49 	vmov.f32	s21, s18
 800fd9c:	f43f af69 	beq.w	800fc72 <kalman_3gyro.constprop.0+0x339a>
 800fda0:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda8:	eef0 ba47 	vmov.f32	s23, s14
 800fdac:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fdb0:	f43f ae3b 	beq.w	800fa2a <kalman_3gyro.constprop.0+0x3152>
 800fdb4:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbc:	eef0 ca67 	vmov.f32	s25, s15
 800fdc0:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800fdc4:	d0b0      	beq.n	800fd28 <kalman_3gyro.constprop.0+0x3450>
 800fdc6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdce:	eeb0 ca47 	vmov.f32	s24, s14
 800fdd2:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fdd6:	f43f ae42 	beq.w	800fa5e <kalman_3gyro.constprop.0+0x3186>
 800fdda:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde2:	eeb0 da67 	vmov.f32	s26, s15
 800fde6:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800fdea:	d0b6      	beq.n	800fd5a <kalman_3gyro.constprop.0+0x3482>
 800fdec:	eeb0 aa47 	vmov.f32	s20, s14
 800fdf0:	e647      	b.n	800fa82 <kalman_3gyro.constprop.0+0x31aa>
 800fdf2:	eef0 7a6d 	vmov.f32	s15, s27
 800fdf6:	f7ff baf5 	b.w	800f3e4 <kalman_3gyro.constprop.0+0x2b0c>
 800fdfa:	eef0 8a48 	vmov.f32	s17, s16
 800fdfe:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fe02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe06:	ee29 9a29 	vmul.f32	s18, s18, s19
 800fe0a:	f47f adec 	bne.w	800f9e6 <kalman_3gyro.constprop.0+0x310e>
 800fe0e:	eef0 aa49 	vmov.f32	s21, s18
 800fe12:	e75f      	b.n	800fcd4 <kalman_3gyro.constprop.0+0x33fc>
 800fe14:	ed9f ba2a 	vldr	s22, [pc, #168]	; 800fec0 <kalman_3gyro.constprop.0+0x35e8>
 800fe18:	eef0 9a48 	vmov.f32	s19, s16
 800fe1c:	eeb0 aa48 	vmov.f32	s20, s16
 800fe20:	eeb0 da48 	vmov.f32	s26, s16
 800fe24:	e631      	b.n	800fa8a <kalman_3gyro.constprop.0+0x31b2>
 800fe26:	eef0 8a6a 	vmov.f32	s17, s21
 800fe2a:	e753      	b.n	800fcd4 <kalman_3gyro.constprop.0+0x33fc>
 800fe2c:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 800fe30:	2a31      	cmp	r2, #49	; 0x31
 800fe32:	f63f a8a3 	bhi.w	800ef7c <kalman_3gyro.constprop.0+0x26a4>
 800fe36:	2100      	movs	r1, #0
 800fe38:	3201      	adds	r2, #1
 800fe3a:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800fe3e:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800fe42:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800fe46:	f7ff b899 	b.w	800ef7c <kalman_3gyro.constprop.0+0x26a4>
 800fe4a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	f340 8423 	ble.w	801069a <kalman_3gyro.constprop.0+0x3dc2>
 800fe54:	3b01      	subs	r3, #1
 800fe56:	2200      	movs	r2, #0
 800fe58:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800fe5c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 800fe60:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800fe64:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 800fe68:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 800fe6c:	f7fe bca9 	b.w	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 800fe70:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800fe74:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800fe78:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800fe7c:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800fe80:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800fe84:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800fe88:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800fe8c:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800fe90:	f7fe bc18 	b.w	800e6c4 <kalman_3gyro.constprop.0+0x1dec>
 800fe94:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fe98:	eef0 4a46 	vmov.f32	s9, s12
 800fe9c:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800fea0:	eef0 7a47 	vmov.f32	s15, s14
 800fea4:	eef0 5a66 	vmov.f32	s11, s13
 800fea8:	e64b      	b.n	800fb42 <kalman_3gyro.constprop.0+0x326a>
 800feaa:	eeb1 7a47 	vneg.f32	s14, s14
 800feae:	f7fd bc66 	b.w	800d77e <kalman_3gyro.constprop.0+0xea6>
 800feb2:	eef0 ca69 	vmov.f32	s25, s19
 800feb6:	e6e0      	b.n	800fc7a <kalman_3gyro.constprop.0+0x33a2>
 800feb8:	eeb0 ba69 	vmov.f32	s22, s19
 800febc:	e5e5      	b.n	800fa8a <kalman_3gyro.constprop.0+0x31b2>
 800febe:	bf00      	nop
 800fec0:	00000000 	.word	0x00000000
 800fec4:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800fec8:	49dc      	ldr	r1, [pc, #880]	; (801023c <kalman_3gyro.constprop.0+0x3964>)
 800feca:	4bdd      	ldr	r3, [pc, #884]	; (8010240 <kalman_3gyro.constprop.0+0x3968>)
 800fecc:	4add      	ldr	r2, [pc, #884]	; (8010244 <kalman_3gyro.constprop.0+0x396c>)
 800fece:	2000      	movs	r0, #0
 800fed0:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 800fed4:	6029      	str	r1, [r5, #0]
 800fed6:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 800feda:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 800fede:	6002      	str	r2, [r0, #0]
 800fee0:	600b      	str	r3, [r1, #0]
 800fee2:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 800fee6:	9004      	str	r0, [sp, #16]
 800fee8:	9110      	str	r1, [sp, #64]	; 0x40
 800feea:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 80b4 	beq.w	801005c <kalman_3gyro.constprop.0+0x3784>
 800fef4:	240c      	movs	r4, #12
 800fef6:	eddf bad4 	vldr	s23, [pc, #848]	; 8010248 <kalman_3gyro.constprop.0+0x3970>
 800fefa:	ed9f bad4 	vldr	s22, [pc, #848]	; 801024c <kalman_3gyro.constprop.0+0x3974>
 800fefe:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8010250 <kalman_3gyro.constprop.0+0x3978>
 800ff02:	ed9f aad4 	vldr	s20, [pc, #848]	; 8010254 <kalman_3gyro.constprop.0+0x397c>
 800ff06:	eddf aad4 	vldr	s21, [pc, #848]	; 8010258 <kalman_3gyro.constprop.0+0x3980>
 800ff0a:	9f08      	ldr	r7, [sp, #32]
 800ff0c:	fb14 8403 	smlabb	r4, r4, r3, r8
 800ff10:	4646      	mov	r6, r8
 800ff12:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800ff16:	e06b      	b.n	800fff0 <kalman_3gyro.constprop.0+0x3718>
 800ff18:	eeb4 7aca 	vcmpe.f32	s14, s20
 800ff1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff20:	f300 815a 	bgt.w	80101d8 <kalman_3gyro.constprop.0+0x3900>
 800ff24:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ff28:	ee17 0a90 	vmov	r0, s15
 800ff2c:	f7f0 fb0c 	bl	8000548 <__aeabi_f2d>
 800ff30:	ec41 0b10 	vmov	d0, r0, r1
 800ff34:	f005 fb04 	bl	8015540 <ceil>
 800ff38:	ec51 0b10 	vmov	r0, r1, d0
 800ff3c:	f7f0 fe34 	bl	8000ba8 <__aeabi_d2f>
 800ff40:	ee07 0a90 	vmov	s15, r0
 800ff44:	edc6 7a00 	vstr	s15, [r6]
 800ff48:	ed97 7a01 	vldr	s14, [r7, #4]
 800ff4c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800ff50:	eef0 6ae7 	vabs.f32	s13, s15
 800ff54:	eef4 6acb 	vcmpe.f32	s13, s22
 800ff58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5c:	d51b      	bpl.n	800ff96 <kalman_3gyro.constprop.0+0x36be>
 800ff5e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ff62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff66:	f280 8120 	bge.w	80101aa <kalman_3gyro.constprop.0+0x38d2>
 800ff6a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800ff6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff72:	f300 812e 	bgt.w	80101d2 <kalman_3gyro.constprop.0+0x38fa>
 800ff76:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ff7a:	ee17 0a90 	vmov	r0, s15
 800ff7e:	f7f0 fae3 	bl	8000548 <__aeabi_f2d>
 800ff82:	ec41 0b10 	vmov	d0, r0, r1
 800ff86:	f005 fadb 	bl	8015540 <ceil>
 800ff8a:	ec51 0b10 	vmov	r0, r1, d0
 800ff8e:	f7f0 fe0b 	bl	8000ba8 <__aeabi_d2f>
 800ff92:	ee07 0a90 	vmov	s15, r0
 800ff96:	edc6 7a01 	vstr	s15, [r6, #4]
 800ff9a:	ed97 7a02 	vldr	s14, [r7, #8]
 800ff9e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800ffa2:	eef0 6ae7 	vabs.f32	s13, s15
 800ffa6:	eef4 6acb 	vcmpe.f32	s13, s22
 800ffaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffae:	d51a      	bpl.n	800ffe6 <kalman_3gyro.constprop.0+0x370e>
 800ffb0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ffb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb8:	da3b      	bge.n	8010032 <kalman_3gyro.constprop.0+0x375a>
 800ffba:	eeb4 7aca 	vcmpe.f32	s14, s20
 800ffbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc2:	f300 8103 	bgt.w	80101cc <kalman_3gyro.constprop.0+0x38f4>
 800ffc6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ffca:	ee17 0a90 	vmov	r0, s15
 800ffce:	f7f0 fabb 	bl	8000548 <__aeabi_f2d>
 800ffd2:	ec41 0b10 	vmov	d0, r0, r1
 800ffd6:	f005 fab3 	bl	8015540 <ceil>
 800ffda:	ec51 0b10 	vmov	r0, r1, d0
 800ffde:	f7f0 fde3 	bl	8000ba8 <__aeabi_d2f>
 800ffe2:	ee07 0a90 	vmov	s15, r0
 800ffe6:	edc6 7a02 	vstr	s15, [r6, #8]
 800ffea:	360c      	adds	r6, #12
 800ffec:	42b4      	cmp	r4, r6
 800ffee:	d035      	beq.n	801005c <kalman_3gyro.constprop.0+0x3784>
 800fff0:	ed97 7a00 	vldr	s14, [r7]
 800fff4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fff8:	eef0 6ae7 	vabs.f32	s13, s15
 800fffc:	eef4 6acb 	vcmpe.f32	s13, s22
 8010000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010004:	d59e      	bpl.n	800ff44 <kalman_3gyro.constprop.0+0x366c>
 8010006:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801000e:	db83      	blt.n	800ff18 <kalman_3gyro.constprop.0+0x3640>
 8010010:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010014:	ee17 0a90 	vmov	r0, s15
 8010018:	f7f0 fa96 	bl	8000548 <__aeabi_f2d>
 801001c:	ec41 0b10 	vmov	d0, r0, r1
 8010020:	f005 fb12 	bl	8015648 <floor>
 8010024:	ec51 0b10 	vmov	r0, r1, d0
 8010028:	f7f0 fdbe 	bl	8000ba8 <__aeabi_d2f>
 801002c:	ee07 0a90 	vmov	s15, r0
 8010030:	e788      	b.n	800ff44 <kalman_3gyro.constprop.0+0x366c>
 8010032:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010036:	360c      	adds	r6, #12
 8010038:	ee17 0a90 	vmov	r0, s15
 801003c:	f7f0 fa84 	bl	8000548 <__aeabi_f2d>
 8010040:	ec41 0b10 	vmov	d0, r0, r1
 8010044:	f005 fb00 	bl	8015648 <floor>
 8010048:	ec51 0b10 	vmov	r0, r1, d0
 801004c:	f7f0 fdac 	bl	8000ba8 <__aeabi_d2f>
 8010050:	ee07 0a90 	vmov	s15, r0
 8010054:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010058:	42b4      	cmp	r4, r6
 801005a:	d1c9      	bne.n	800fff0 <kalman_3gyro.constprop.0+0x3718>
 801005c:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8010060:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 8010064:	2b00      	cmp	r3, #0
 8010066:	f000 80cf 	beq.w	8010208 <kalman_3gyro.constprop.0+0x3930>
 801006a:	240c      	movs	r4, #12
 801006c:	eddf ba7b 	vldr	s23, [pc, #492]	; 801025c <kalman_3gyro.constprop.0+0x3984>
 8010070:	ed9f ba76 	vldr	s22, [pc, #472]	; 801024c <kalman_3gyro.constprop.0+0x3974>
 8010074:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8010260 <kalman_3gyro.constprop.0+0x3988>
 8010078:	ed9f aa7a 	vldr	s20, [pc, #488]	; 8010264 <kalman_3gyro.constprop.0+0x398c>
 801007c:	eddf aa76 	vldr	s21, [pc, #472]	; 8010258 <kalman_3gyro.constprop.0+0x3980>
 8010080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010084:	fb14 7403 	smlabb	r4, r4, r3, r7
 8010088:	463e      	mov	r6, r7
 801008a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801008e:	e06b      	b.n	8010168 <kalman_3gyro.constprop.0+0x3890>
 8010090:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010098:	f300 81a2 	bgt.w	80103e0 <kalman_3gyro.constprop.0+0x3b08>
 801009c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80100a0:	ee17 0a90 	vmov	r0, s15
 80100a4:	f7f0 fa50 	bl	8000548 <__aeabi_f2d>
 80100a8:	ec41 0b10 	vmov	d0, r0, r1
 80100ac:	f005 fa48 	bl	8015540 <ceil>
 80100b0:	ec51 0b10 	vmov	r0, r1, d0
 80100b4:	f7f0 fd78 	bl	8000ba8 <__aeabi_d2f>
 80100b8:	ee07 0a90 	vmov	s15, r0
 80100bc:	edc6 7a00 	vstr	s15, [r6]
 80100c0:	ed99 7a04 	vldr	s14, [r9, #16]
 80100c4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80100c8:	eef0 6ae7 	vabs.f32	s13, s15
 80100cc:	eef4 6acb 	vcmpe.f32	s13, s22
 80100d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d4:	d51b      	bpl.n	801010e <kalman_3gyro.constprop.0+0x3836>
 80100d6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80100da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100de:	f280 8168 	bge.w	80103b2 <kalman_3gyro.constprop.0+0x3ada>
 80100e2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80100e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ea:	f300 8176 	bgt.w	80103da <kalman_3gyro.constprop.0+0x3b02>
 80100ee:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80100f2:	ee17 0a90 	vmov	r0, s15
 80100f6:	f7f0 fa27 	bl	8000548 <__aeabi_f2d>
 80100fa:	ec41 0b10 	vmov	d0, r0, r1
 80100fe:	f005 fa1f 	bl	8015540 <ceil>
 8010102:	ec51 0b10 	vmov	r0, r1, d0
 8010106:	f7f0 fd4f 	bl	8000ba8 <__aeabi_d2f>
 801010a:	ee07 0a90 	vmov	s15, r0
 801010e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010112:	ed99 7a05 	vldr	s14, [r9, #20]
 8010116:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801011a:	eef0 6ae7 	vabs.f32	s13, s15
 801011e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010126:	d51a      	bpl.n	801015e <kalman_3gyro.constprop.0+0x3886>
 8010128:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801012c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010130:	da55      	bge.n	80101de <kalman_3gyro.constprop.0+0x3906>
 8010132:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013a:	f300 814b 	bgt.w	80103d4 <kalman_3gyro.constprop.0+0x3afc>
 801013e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010142:	ee17 0a90 	vmov	r0, s15
 8010146:	f7f0 f9ff 	bl	8000548 <__aeabi_f2d>
 801014a:	ec41 0b10 	vmov	d0, r0, r1
 801014e:	f005 f9f7 	bl	8015540 <ceil>
 8010152:	ec51 0b10 	vmov	r0, r1, d0
 8010156:	f7f0 fd27 	bl	8000ba8 <__aeabi_d2f>
 801015a:	ee07 0a90 	vmov	s15, r0
 801015e:	edc6 7a02 	vstr	s15, [r6, #8]
 8010162:	360c      	adds	r6, #12
 8010164:	42b4      	cmp	r4, r6
 8010166:	d04f      	beq.n	8010208 <kalman_3gyro.constprop.0+0x3930>
 8010168:	ed99 7a03 	vldr	s14, [r9, #12]
 801016c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010170:	eef0 6ae7 	vabs.f32	s13, s15
 8010174:	eef4 6acb 	vcmpe.f32	s13, s22
 8010178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017c:	d59e      	bpl.n	80100bc <kalman_3gyro.constprop.0+0x37e4>
 801017e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010186:	db83      	blt.n	8010090 <kalman_3gyro.constprop.0+0x37b8>
 8010188:	ee77 7a89 	vadd.f32	s15, s15, s18
 801018c:	ee17 0a90 	vmov	r0, s15
 8010190:	f7f0 f9da 	bl	8000548 <__aeabi_f2d>
 8010194:	ec41 0b10 	vmov	d0, r0, r1
 8010198:	f005 fa56 	bl	8015648 <floor>
 801019c:	ec51 0b10 	vmov	r0, r1, d0
 80101a0:	f7f0 fd02 	bl	8000ba8 <__aeabi_d2f>
 80101a4:	ee07 0a90 	vmov	s15, r0
 80101a8:	e788      	b.n	80100bc <kalman_3gyro.constprop.0+0x37e4>
 80101aa:	ee77 7a89 	vadd.f32	s15, s15, s18
 80101ae:	ee17 0a90 	vmov	r0, s15
 80101b2:	f7f0 f9c9 	bl	8000548 <__aeabi_f2d>
 80101b6:	ec41 0b10 	vmov	d0, r0, r1
 80101ba:	f005 fa45 	bl	8015648 <floor>
 80101be:	ec51 0b10 	vmov	r0, r1, d0
 80101c2:	f7f0 fcf1 	bl	8000ba8 <__aeabi_d2f>
 80101c6:	ee07 0a90 	vmov	s15, r0
 80101ca:	e6e4      	b.n	800ff96 <kalman_3gyro.constprop.0+0x36be>
 80101cc:	eef0 7a6a 	vmov.f32	s15, s21
 80101d0:	e709      	b.n	800ffe6 <kalman_3gyro.constprop.0+0x370e>
 80101d2:	eef0 7a6a 	vmov.f32	s15, s21
 80101d6:	e6de      	b.n	800ff96 <kalman_3gyro.constprop.0+0x36be>
 80101d8:	eef0 7a6a 	vmov.f32	s15, s21
 80101dc:	e6b2      	b.n	800ff44 <kalman_3gyro.constprop.0+0x366c>
 80101de:	ee77 7a89 	vadd.f32	s15, s15, s18
 80101e2:	360c      	adds	r6, #12
 80101e4:	ee17 0a90 	vmov	r0, s15
 80101e8:	f7f0 f9ae 	bl	8000548 <__aeabi_f2d>
 80101ec:	ec41 0b10 	vmov	d0, r0, r1
 80101f0:	f005 fa2a 	bl	8015648 <floor>
 80101f4:	ec51 0b10 	vmov	r0, r1, d0
 80101f8:	f7f0 fcd6 	bl	8000ba8 <__aeabi_d2f>
 80101fc:	ee07 0a90 	vmov	s15, r0
 8010200:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010204:	42b4      	cmp	r4, r6
 8010206:	d1af      	bne.n	8010168 <kalman_3gyro.constprop.0+0x3890>
 8010208:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 801020c:	2b00      	cmp	r3, #0
 801020e:	f43c ac7e 	beq.w	800cb0e <kalman_3gyro.constprop.0+0x236>
 8010212:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 8010216:	240c      	movs	r4, #12
 8010218:	eddf ba13 	vldr	s23, [pc, #76]	; 8010268 <kalman_3gyro.constprop.0+0x3990>
 801021c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 801024c <kalman_3gyro.constprop.0+0x3974>
 8010220:	ed9f 8a12 	vldr	s16, [pc, #72]	; 801026c <kalman_3gyro.constprop.0+0x3994>
 8010224:	ed9f aa12 	vldr	s20, [pc, #72]	; 8010270 <kalman_3gyro.constprop.0+0x3998>
 8010228:	eddf aa0b 	vldr	s21, [pc, #44]	; 8010258 <kalman_3gyro.constprop.0+0x3980>
 801022c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010230:	960f      	str	r6, [sp, #60]	; 0x3c
 8010232:	fb14 6403 	smlabb	r4, r4, r3, r6
 8010236:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801023a:	e099      	b.n	8010370 <kalman_3gyro.constprop.0+0x3a98>
 801023c:	3a7001e0 	.word	0x3a7001e0
 8010240:	3a8c0118 	.word	0x3a8c0118
 8010244:	3a000100 	.word	0x3a000100
 8010248:	44888777 	.word	0x44888777
 801024c:	4b000000 	.word	0x4b000000
 8010250:	39f001e1 	.word	0x39f001e1
 8010254:	b9f001e1 	.word	0xb9f001e1
 8010258:	80000000 	.word	0x80000000
 801025c:	44fffe00 	.word	0x44fffe00
 8010260:	39800100 	.word	0x39800100
 8010264:	b9800100 	.word	0xb9800100
 8010268:	446a0ccd 	.word	0x446a0ccd
 801026c:	3a0c0118 	.word	0x3a0c0118
 8010270:	ba0c0118 	.word	0xba0c0118
 8010274:	bf666666 	.word	0xbf666666
 8010278:	3d072b02 	.word	0x3d072b02
 801027c:	3cb43958 	.word	0x3cb43958
 8010280:	3cf5c28f 	.word	0x3cf5c28f
 8010284:	3d75c28f 	.word	0x3d75c28f
 8010288:	3d23d70a 	.word	0x3d23d70a
 801028c:	3ca3d70a 	.word	0x3ca3d70a
 8010290:	3d4ccccd 	.word	0x3d4ccccd
 8010294:	3d8f5c29 	.word	0x3d8f5c29
 8010298:	eeb4 7aca 	vcmpe.f32	s14, s20
 801029c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a0:	f300 80c6 	bgt.w	8010430 <kalman_3gyro.constprop.0+0x3b58>
 80102a4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102a8:	ee17 0a90 	vmov	r0, s15
 80102ac:	f7f0 f94c 	bl	8000548 <__aeabi_f2d>
 80102b0:	ec41 0b10 	vmov	d0, r0, r1
 80102b4:	f005 f944 	bl	8015540 <ceil>
 80102b8:	ec51 0b10 	vmov	r0, r1, d0
 80102bc:	f7f0 fc74 	bl	8000ba8 <__aeabi_d2f>
 80102c0:	ee07 0a90 	vmov	s15, r0
 80102c4:	edc6 7a00 	vstr	s15, [r6]
 80102c8:	ed99 7a07 	vldr	s14, [r9, #28]
 80102cc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80102d0:	eef0 6ae7 	vabs.f32	s13, s15
 80102d4:	eef4 6acb 	vcmpe.f32	s13, s22
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	d51b      	bpl.n	8010316 <kalman_3gyro.constprop.0+0x3a3e>
 80102de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80102e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e6:	f280 808f 	bge.w	8010408 <kalman_3gyro.constprop.0+0x3b30>
 80102ea:	eeb4 7aca 	vcmpe.f32	s14, s20
 80102ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f2:	f300 809a 	bgt.w	801042a <kalman_3gyro.constprop.0+0x3b52>
 80102f6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102fa:	ee17 0a90 	vmov	r0, s15
 80102fe:	f7f0 f923 	bl	8000548 <__aeabi_f2d>
 8010302:	ec41 0b10 	vmov	d0, r0, r1
 8010306:	f005 f91b 	bl	8015540 <ceil>
 801030a:	ec51 0b10 	vmov	r0, r1, d0
 801030e:	f7f0 fc4b 	bl	8000ba8 <__aeabi_d2f>
 8010312:	ee07 0a90 	vmov	s15, r0
 8010316:	edc6 7a01 	vstr	s15, [r6, #4]
 801031a:	ed99 7a08 	vldr	s14, [r9, #32]
 801031e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010322:	eef0 6ae7 	vabs.f32	s13, s15
 8010326:	eef4 6acb 	vcmpe.f32	s13, s22
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	d519      	bpl.n	8010364 <kalman_3gyro.constprop.0+0x3a8c>
 8010330:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010338:	da55      	bge.n	80103e6 <kalman_3gyro.constprop.0+0x3b0e>
 801033a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	dc78      	bgt.n	8010436 <kalman_3gyro.constprop.0+0x3b5e>
 8010344:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010348:	ee17 0a90 	vmov	r0, s15
 801034c:	f7f0 f8fc 	bl	8000548 <__aeabi_f2d>
 8010350:	ec41 0b10 	vmov	d0, r0, r1
 8010354:	f005 f8f4 	bl	8015540 <ceil>
 8010358:	ec51 0b10 	vmov	r0, r1, d0
 801035c:	f7f0 fc24 	bl	8000ba8 <__aeabi_d2f>
 8010360:	ee07 0a90 	vmov	s15, r0
 8010364:	edc6 7a02 	vstr	s15, [r6, #8]
 8010368:	360c      	adds	r6, #12
 801036a:	42b4      	cmp	r4, r6
 801036c:	f43c abd2 	beq.w	800cb14 <kalman_3gyro.constprop.0+0x23c>
 8010370:	ed99 7a06 	vldr	s14, [r9, #24]
 8010374:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010378:	eef0 6ae7 	vabs.f32	s13, s15
 801037c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	d59e      	bpl.n	80102c4 <kalman_3gyro.constprop.0+0x39ec>
 8010386:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801038a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038e:	db83      	blt.n	8010298 <kalman_3gyro.constprop.0+0x39c0>
 8010390:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010394:	ee17 0a90 	vmov	r0, s15
 8010398:	f7f0 f8d6 	bl	8000548 <__aeabi_f2d>
 801039c:	ec41 0b10 	vmov	d0, r0, r1
 80103a0:	f005 f952 	bl	8015648 <floor>
 80103a4:	ec51 0b10 	vmov	r0, r1, d0
 80103a8:	f7f0 fbfe 	bl	8000ba8 <__aeabi_d2f>
 80103ac:	ee07 0a90 	vmov	s15, r0
 80103b0:	e788      	b.n	80102c4 <kalman_3gyro.constprop.0+0x39ec>
 80103b2:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103b6:	ee17 0a90 	vmov	r0, s15
 80103ba:	f7f0 f8c5 	bl	8000548 <__aeabi_f2d>
 80103be:	ec41 0b10 	vmov	d0, r0, r1
 80103c2:	f005 f941 	bl	8015648 <floor>
 80103c6:	ec51 0b10 	vmov	r0, r1, d0
 80103ca:	f7f0 fbed 	bl	8000ba8 <__aeabi_d2f>
 80103ce:	ee07 0a90 	vmov	s15, r0
 80103d2:	e69c      	b.n	801010e <kalman_3gyro.constprop.0+0x3836>
 80103d4:	eef0 7a6a 	vmov.f32	s15, s21
 80103d8:	e6c1      	b.n	801015e <kalman_3gyro.constprop.0+0x3886>
 80103da:	eef0 7a6a 	vmov.f32	s15, s21
 80103de:	e696      	b.n	801010e <kalman_3gyro.constprop.0+0x3836>
 80103e0:	eef0 7a6a 	vmov.f32	s15, s21
 80103e4:	e66a      	b.n	80100bc <kalman_3gyro.constprop.0+0x37e4>
 80103e6:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103ea:	ee17 0a90 	vmov	r0, s15
 80103ee:	f7f0 f8ab 	bl	8000548 <__aeabi_f2d>
 80103f2:	ec41 0b10 	vmov	d0, r0, r1
 80103f6:	f005 f927 	bl	8015648 <floor>
 80103fa:	ec51 0b10 	vmov	r0, r1, d0
 80103fe:	f7f0 fbd3 	bl	8000ba8 <__aeabi_d2f>
 8010402:	ee07 0a90 	vmov	s15, r0
 8010406:	e7ad      	b.n	8010364 <kalman_3gyro.constprop.0+0x3a8c>
 8010408:	ee77 7a89 	vadd.f32	s15, s15, s18
 801040c:	ee17 0a90 	vmov	r0, s15
 8010410:	f7f0 f89a 	bl	8000548 <__aeabi_f2d>
 8010414:	ec41 0b10 	vmov	d0, r0, r1
 8010418:	f005 f916 	bl	8015648 <floor>
 801041c:	ec51 0b10 	vmov	r0, r1, d0
 8010420:	f7f0 fbc2 	bl	8000ba8 <__aeabi_d2f>
 8010424:	ee07 0a90 	vmov	s15, r0
 8010428:	e775      	b.n	8010316 <kalman_3gyro.constprop.0+0x3a3e>
 801042a:	eef0 7a6a 	vmov.f32	s15, s21
 801042e:	e772      	b.n	8010316 <kalman_3gyro.constprop.0+0x3a3e>
 8010430:	eef0 7a6a 	vmov.f32	s15, s21
 8010434:	e746      	b.n	80102c4 <kalman_3gyro.constprop.0+0x39ec>
 8010436:	eef0 7a6a 	vmov.f32	s15, s21
 801043a:	e793      	b.n	8010364 <kalman_3gyro.constprop.0+0x3a8c>
 801043c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801043e:	7813      	ldrb	r3, [r2, #0]
 8010440:	ed92 7a03 	vldr	s14, [r2, #12]
 8010444:	edd2 6a01 	vldr	s13, [r2, #4]
 8010448:	edd2 7a02 	vldr	s15, [r2, #8]
 801044c:	2200      	movs	r2, #0
 801044e:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 8010452:	2b00      	cmp	r3, #0
 8010454:	f040 813b 	bne.w	80106ce <kalman_3gyro.constprop.0+0x3df6>
 8010458:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 8010274 <kalman_3gyro.constprop.0+0x399c>
 801045c:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8010460:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8010464:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8010468:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 801046c:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010470:	2100      	movs	r1, #0
 8010472:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010476:	f006 ffaf 	bl	80173d8 <memset>
 801047a:	eddb 7a02 	vldr	s15, [fp, #8]
 801047e:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 8010278 <kalman_3gyro.constprop.0+0x39a0>
 8010482:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 801027c <kalman_3gyro.constprop.0+0x39a4>
 8010486:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8010280 <kalman_3gyro.constprop.0+0x39a8>
 801048a:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 8010284 <kalman_3gyro.constprop.0+0x39ac>
 801048e:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8010288 <kalman_3gyro.constprop.0+0x39b0>
 8010492:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 801028c <kalman_3gyro.constprop.0+0x39b4>
 8010496:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8010290 <kalman_3gyro.constprop.0+0x39b8>
 801049a:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 8010294 <kalman_3gyro.constprop.0+0x39bc>
 801049e:	4bd9      	ldr	r3, [pc, #868]	; (8010804 <kalman_3gyro.constprop.0+0x3f2c>)
 80104a0:	49d9      	ldr	r1, [pc, #868]	; (8010808 <kalman_3gyro.constprop.0+0x3f30>)
 80104a2:	4dda      	ldr	r5, [pc, #872]	; (801080c <kalman_3gyro.constprop.0+0x3f34>)
 80104a4:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010810 <kalman_3gyro.constprop.0+0x3f38>
 80104a8:	48da      	ldr	r0, [pc, #872]	; (8010814 <kalman_3gyro.constprop.0+0x3f3c>)
 80104aa:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 80104ae:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80104b2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80104b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80104ba:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 80104be:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010818 <kalman_3gyro.constprop.0+0x3f40>
 80104c2:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 80104c6:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80104ca:	ee67 3aa3 	vmul.f32	s7, s15, s7
 80104ce:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 80104d2:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 801081c <kalman_3gyro.constprop.0+0x3f44>
 80104d6:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010820 <kalman_3gyro.constprop.0+0x3f48>
 80104da:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 80104de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80104e2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80104e6:	ee27 5a85 	vmul.f32	s10, s15, s10
 80104ea:	ee27 4a84 	vmul.f32	s8, s15, s8
 80104ee:	ee27 6a86 	vmul.f32	s12, s15, s12
 80104f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 80104fc:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8010500:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 8010504:	4cc7      	ldr	r4, [pc, #796]	; (8010824 <kalman_3gyro.constprop.0+0x3f4c>)
 8010506:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 801050a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 801050e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010828 <kalman_3gyro.constprop.0+0x3f50>
 8010512:	49c6      	ldr	r1, [pc, #792]	; (801082c <kalman_3gyro.constprop.0+0x3f54>)
 8010514:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8010518:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 801051c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010830 <kalman_3gyro.constprop.0+0x3f58>
 8010520:	4bc4      	ldr	r3, [pc, #784]	; (8010834 <kalman_3gyro.constprop.0+0x3f5c>)
 8010522:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8010526:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 801052a:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 801052e:	4ac2      	ldr	r2, [pc, #776]	; (8010838 <kalman_3gyro.constprop.0+0x3f60>)
 8010530:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 8010534:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8010538:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 801053c:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010540:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010544:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010548:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801054c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010550:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010554:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010558:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 801055c:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010560:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 8010564:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8010568:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 801056c:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8010570:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 8010574:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8010578:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 801057c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010580:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010584:	4cad      	ldr	r4, [pc, #692]	; (801083c <kalman_3gyro.constprop.0+0x3f64>)
 8010586:	48ae      	ldr	r0, [pc, #696]	; (8010840 <kalman_3gyro.constprop.0+0x3f68>)
 8010588:	49ae      	ldr	r1, [pc, #696]	; (8010844 <kalman_3gyro.constprop.0+0x3f6c>)
 801058a:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 801058e:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8010592:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8010596:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 801059a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 801059e:	ee27 6a83 	vmul.f32	s12, s15, s6
 80105a2:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 80105a6:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 80105aa:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80105ae:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 80105b2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80105b6:	4aa4      	ldr	r2, [pc, #656]	; (8010848 <kalman_3gyro.constprop.0+0x3f70>)
 80105b8:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 80105bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80105c0:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 80105c4:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 80105c8:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 80105cc:	4e9f      	ldr	r6, [pc, #636]	; (801084c <kalman_3gyro.constprop.0+0x3f74>)
 80105ce:	4da0      	ldr	r5, [pc, #640]	; (8010850 <kalman_3gyro.constprop.0+0x3f78>)
 80105d0:	49a0      	ldr	r1, [pc, #640]	; (8010854 <kalman_3gyro.constprop.0+0x3f7c>)
 80105d2:	4aa1      	ldr	r2, [pc, #644]	; (8010858 <kalman_3gyro.constprop.0+0x3f80>)
 80105d4:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 80105d8:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 80105dc:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80105e0:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 80105e4:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 80105e8:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 80105ec:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 80105f0:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 80105f4:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 80105f8:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 80105fc:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010600:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010604:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010608:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 801060c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010610:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010614:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010618:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 801061c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8010620:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8010624:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010628:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801062c:	b973      	cbnz	r3, 801064c <kalman_3gyro.constprop.0+0x3d74>
 801062e:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8010632:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8010636:	6811      	ldr	r1, [r2, #0]
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 801063e:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010648:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 801064c:	2300      	movs	r3, #0
 801064e:	f88b 3001 	strb.w	r3, [fp, #1]
 8010652:	f7fc ba4b 	b.w	800caec <kalman_3gyro.constprop.0+0x214>
 8010656:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801065a:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 801065e:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010662:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010666:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801066a:	f7fd bd5b 	b.w	800e124 <kalman_3gyro.constprop.0+0x184c>
 801066e:	eddf 7a7b 	vldr	s15, [pc, #492]	; 801085c <kalman_3gyro.constprop.0+0x3f84>
 8010672:	f7fc ba9e 	b.w	800cbb2 <kalman_3gyro.constprop.0+0x2da>
 8010676:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 801067a:	f7fd bd7b 	b.w	800e174 <kalman_3gyro.constprop.0+0x189c>
 801067e:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010860 <kalman_3gyro.constprop.0+0x3f88>
 8010682:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010864 <kalman_3gyro.constprop.0+0x3f8c>
 8010686:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010868 <kalman_3gyro.constprop.0+0x3f90>
 801068a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 801086c <kalman_3gyro.constprop.0+0x3f94>
 801068e:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010870 <kalman_3gyro.constprop.0+0x3f98>
 8010692:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010696:	f7fd bf9d 	b.w	800e5d4 <kalman_3gyro.constprop.0+0x1cfc>
 801069a:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 801069e:	2a00      	cmp	r2, #0
 80106a0:	f340 8181 	ble.w	80109a6 <kalman_3gyro.constprop.0+0x40ce>
 80106a4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80106a8:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 80106ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b4:	f340 8177 	ble.w	80109a6 <kalman_3gyro.constprop.0+0x40ce>
 80106b8:	3a01      	subs	r2, #1
 80106ba:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 80106be:	f7fe b880 	b.w	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 80106c2:	eeb0 aa69 	vmov.f32	s20, s19
 80106c6:	eeb0 ba69 	vmov.f32	s22, s19
 80106ca:	f7ff b9de 	b.w	800fa8a <kalman_3gyro.constprop.0+0x31b2>
 80106ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80106d2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80106d6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80106da:	eef1 6ae7 	vsqrt.f32	s13, s15
 80106de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80106e2:	e6bb      	b.n	801045c <kalman_3gyro.constprop.0+0x3b84>
 80106e4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 80106e8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80106ec:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80106f0:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80106f4:	f7fe b802 	b.w	800e6fc <kalman_3gyro.constprop.0+0x1e24>
 80106f8:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 80106fc:	f7fd bae6 	b.w	800dccc <kalman_3gyro.constprop.0+0x13f4>
 8010700:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010704:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010708:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801070c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010710:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010714:	f7fd bd06 	b.w	800e124 <kalman_3gyro.constprop.0+0x184c>
 8010718:	ee7e 7a67 	vsub.f32	s15, s28, s15
 801071c:	ee17 0a90 	vmov	r0, s15
 8010720:	f7ef ff12 	bl	8000548 <__aeabi_f2d>
 8010724:	ec41 0b10 	vmov	d0, r0, r1
 8010728:	f004 ff0a 	bl	8015540 <ceil>
 801072c:	ec51 0b10 	vmov	r0, r1, d0
 8010730:	f7f0 fa3a 	bl	8000ba8 <__aeabi_d2f>
 8010734:	ee0e 0a10 	vmov	s28, r0
 8010738:	f7fc bc70 	b.w	800d01c <kalman_3gyro.constprop.0+0x744>
 801073c:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010740:	ee17 0a90 	vmov	r0, s15
 8010744:	f7ef ff00 	bl	8000548 <__aeabi_f2d>
 8010748:	ec41 0b10 	vmov	d0, r0, r1
 801074c:	f004 fef8 	bl	8015540 <ceil>
 8010750:	ec51 0b10 	vmov	r0, r1, d0
 8010754:	f7f0 fa28 	bl	8000ba8 <__aeabi_d2f>
 8010758:	ee0d 0a90 	vmov	s27, r0
 801075c:	f7fc bc81 	b.w	800d062 <kalman_3gyro.constprop.0+0x78a>
 8010760:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010764:	ee17 0a90 	vmov	r0, s15
 8010768:	f7ef feee 	bl	8000548 <__aeabi_f2d>
 801076c:	ec41 0b10 	vmov	d0, r0, r1
 8010770:	f004 fee6 	bl	8015540 <ceil>
 8010774:	ec51 0b10 	vmov	r0, r1, d0
 8010778:	f7f0 fa16 	bl	8000ba8 <__aeabi_d2f>
 801077c:	ee0d 0a90 	vmov	s27, r0
 8010780:	f7fc bcd5 	b.w	800d12e <kalman_3gyro.constprop.0+0x856>
 8010784:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010788:	ee17 0a90 	vmov	r0, s15
 801078c:	f7ef fedc 	bl	8000548 <__aeabi_f2d>
 8010790:	ec41 0b10 	vmov	d0, r0, r1
 8010794:	f004 fed4 	bl	8015540 <ceil>
 8010798:	ec51 0b10 	vmov	r0, r1, d0
 801079c:	f7f0 fa04 	bl	8000ba8 <__aeabi_d2f>
 80107a0:	ee0b 0a10 	vmov	s22, r0
 80107a4:	f7fc bce6 	b.w	800d174 <kalman_3gyro.constprop.0+0x89c>
 80107a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ac:	f6fd addf 	blt.w	800e36e <kalman_3gyro.constprop.0+0x1a96>
 80107b0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010868 <kalman_3gyro.constprop.0+0x3f90>
 80107b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107bc:	f140 8283 	bpl.w	8010cc6 <kalman_3gyro.constprop.0+0x43ee>
 80107c0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010874 <kalman_3gyro.constprop.0+0x3f9c>
 80107c4:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010878 <kalman_3gyro.constprop.0+0x3fa0>
 80107c8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801087c <kalman_3gyro.constprop.0+0x3fa4>
 80107cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80107d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80107d4:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80107d8:	eea6 7a86 	vfma.f32	s14, s13, s12
 80107dc:	f7fd bdd1 	b.w	800e382 <kalman_3gyro.constprop.0+0x1aaa>
 80107e0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80107e4:	ee17 0a90 	vmov	r0, s15
 80107e8:	f7ef feae 	bl	8000548 <__aeabi_f2d>
 80107ec:	ec41 0b10 	vmov	d0, r0, r1
 80107f0:	f004 fea6 	bl	8015540 <ceil>
 80107f4:	ec51 0b10 	vmov	r0, r1, d0
 80107f8:	f7f0 f9d6 	bl	8000ba8 <__aeabi_d2f>
 80107fc:	ee08 0a10 	vmov	s16, r0
 8010800:	f7fc bbe9 	b.w	800cfd6 <kalman_3gyro.constprop.0+0x6fe>
 8010804:	3eb33333 	.word	0x3eb33333
 8010808:	3ee66666 	.word	0x3ee66666
 801080c:	3f866666 	.word	0x3f866666
 8010810:	3ecccccd 	.word	0x3ecccccd
 8010814:	3f933333 	.word	0x3f933333
 8010818:	3dcccccd 	.word	0x3dcccccd
 801081c:	3e4ccccd 	.word	0x3e4ccccd
 8010820:	3e99999a 	.word	0x3e99999a
 8010824:	3f8ccccd 	.word	0x3f8ccccd
 8010828:	3f4ccccd 	.word	0x3f4ccccd
 801082c:	3ebd70a4 	.word	0x3ebd70a4
 8010830:	3f666666 	.word	0x3f666666
 8010834:	40a00000 	.word	0x40a00000
 8010838:	3f99999a 	.word	0x3f99999a
 801083c:	3f19999a 	.word	0x3f19999a
 8010840:	3fb9999a 	.word	0x3fb9999a
 8010844:	3fe66666 	.word	0x3fe66666
 8010848:	3f333333 	.word	0x3f333333
 801084c:	3fa66666 	.word	0x3fa66666
 8010850:	3fcccccd 	.word	0x3fcccccd
 8010854:	40200000 	.word	0x40200000
 8010858:	40400000 	.word	0x40400000
 801085c:	bf666666 	.word	0xbf666666
 8010860:	391d4951 	.word	0x391d4951
 8010864:	383cbe62 	.word	0x383cbe62
 8010868:	3c75c28f 	.word	0x3c75c28f
 801086c:	469c3e00 	.word	0x469c3e00
 8010870:	43168000 	.word	0x43168000
 8010874:	3c23d70a 	.word	0x3c23d70a
 8010878:	3f19999a 	.word	0x3f19999a
 801087c:	43480000 	.word	0x43480000
 8010880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010884:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010888:	eef0 7aca 	vabs.f32	s15, s20
 801088c:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010890:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010898:	eeb4 aac7 	vcmpe.f32	s20, s14
 801089c:	bfb8      	it	lt
 801089e:	eef0 7a66 	vmovlt.f32	s15, s13
 80108a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a6:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 80108aa:	f77d af5b 	ble.w	800e764 <kalman_3gyro.constprop.0+0x1e8c>
 80108ae:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 80108b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80108b6:	eeb4 aac7 	vcmpe.f32	s20, s14
 80108ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108be:	f77d af51 	ble.w	800e764 <kalman_3gyro.constprop.0+0x1e8c>
 80108c2:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 80108c6:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 80108ca:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80108ce:	ee66 6a8a 	vmul.f32	s13, s13, s20
 80108d2:	ee27 aa0a 	vmul.f32	s20, s14, s20
 80108d6:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 80108da:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 80108de:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 80108e2:	f7fd bf3f 	b.w	800e764 <kalman_3gyro.constprop.0+0x1e8c>
 80108e6:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 80108ea:	2a01      	cmp	r2, #1
 80108ec:	d002      	beq.n	80108f4 <kalman_3gyro.constprop.0+0x401c>
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	f47d af1e 	bne.w	800e730 <kalman_3gyro.constprop.0+0x1e58>
 80108f4:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 80108f8:	eef4 7ac3 	vcmpe.f32	s15, s6
 80108fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010900:	bfa8      	it	ge
 8010902:	eeb0 3a67 	vmovge.f32	s6, s15
 8010906:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 801090a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 801090e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010912:	f7fd bf0d 	b.w	800e730 <kalman_3gyro.constprop.0+0x1e58>
 8010916:	ee78 7a67 	vsub.f32	s15, s16, s15
 801091a:	ee17 0a90 	vmov	r0, s15
 801091e:	f7ef fe13 	bl	8000548 <__aeabi_f2d>
 8010922:	ec41 0b10 	vmov	d0, r0, r1
 8010926:	f004 fe0b 	bl	8015540 <ceil>
 801092a:	ec51 0b10 	vmov	r0, r1, d0
 801092e:	f7f0 f93b 	bl	8000ba8 <__aeabi_d2f>
 8010932:	ee08 0a10 	vmov	s16, r0
 8010936:	f7fc bc40 	b.w	800d1ba <kalman_3gyro.constprop.0+0x8e2>
 801093a:	ee7b 7a67 	vsub.f32	s15, s22, s15
 801093e:	ee17 0a90 	vmov	r0, s15
 8010942:	f7ef fe01 	bl	8000548 <__aeabi_f2d>
 8010946:	ec41 0b10 	vmov	d0, r0, r1
 801094a:	f004 fdf9 	bl	8015540 <ceil>
 801094e:	ec51 0b10 	vmov	r0, r1, d0
 8010952:	f7f0 f929 	bl	8000ba8 <__aeabi_d2f>
 8010956:	ee0b 0a10 	vmov	s22, r0
 801095a:	f7fc bcb7 	b.w	800d2cc <kalman_3gyro.constprop.0+0x9f4>
 801095e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010962:	ee17 0a90 	vmov	r0, s15
 8010966:	f7ef fdef 	bl	8000548 <__aeabi_f2d>
 801096a:	ec41 0b10 	vmov	d0, r0, r1
 801096e:	f004 fde7 	bl	8015540 <ceil>
 8010972:	ec51 0b10 	vmov	r0, r1, d0
 8010976:	f7f0 f917 	bl	8000ba8 <__aeabi_d2f>
 801097a:	ee08 0a10 	vmov	s16, r0
 801097e:	f7fc bcc8 	b.w	800d312 <kalman_3gyro.constprop.0+0xa3a>
 8010982:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010986:	ee17 0a90 	vmov	r0, s15
 801098a:	f7ef fddd 	bl	8000548 <__aeabi_f2d>
 801098e:	ec41 0b10 	vmov	d0, r0, r1
 8010992:	f004 fdd5 	bl	8015540 <ceil>
 8010996:	ec51 0b10 	vmov	r0, r1, d0
 801099a:	f7f0 f905 	bl	8000ba8 <__aeabi_d2f>
 801099e:	ee0d 0a90 	vmov	s27, r0
 80109a2:	f7fc bc70 	b.w	800d286 <kalman_3gyro.constprop.0+0x9ae>
 80109a6:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80109aa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80109ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109b2:	eeb4 7aeb 	vcmpe.f32	s14, s23
 80109b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ba:	f77d af02 	ble.w	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 80109be:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 80109c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109c6:	eef4 7aec 	vcmpe.f32	s15, s25
 80109ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ce:	f77d aef8 	ble.w	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 80109d2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80109d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80109da:	eef4 7acd 	vcmpe.f32	s15, s26
 80109de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e2:	f140 8711 	bpl.w	8011808 <kalman_3gyro.constprop.0+0x4f30>
 80109e6:	3303      	adds	r3, #3
 80109e8:	f7ff ba35 	b.w	800fe56 <kalman_3gyro.constprop.0+0x357e>
 80109ec:	460b      	mov	r3, r1
 80109ee:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 80109f2:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 80109f6:	9181      	str	r1, [sp, #516]	; 0x204
 80109f8:	9282      	str	r2, [sp, #520]	; 0x208
 80109fa:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 80109fe:	9183      	str	r1, [sp, #524]	; 0x20c
 8010a00:	2200      	movs	r2, #0
 8010a02:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010a06:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010a0a:	f7fe baa8 	b.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 8010a0e:	a936      	add	r1, sp, #216	; 0xd8
 8010a10:	a854      	add	r0, sp, #336	; 0x150
 8010a12:	f7fa ff85 	bl	800b920 <b_dcm2q>
 8010a16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010a20:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010a24:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010a28:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010a2c:	f006 fcd4 	bl	80173d8 <memset>
 8010a30:	4bd8      	ldr	r3, [pc, #864]	; (8010d94 <kalman_3gyro.constprop.0+0x44bc>)
 8010a32:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010a36:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010a3a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010a3e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010a42:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010a46:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010a4a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010a4e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010a52:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010a56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010a58:	781a      	ldrb	r2, [r3, #0]
 8010a5a:	ee07 2a90 	vmov	s15, r2
 8010a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6a:	f040 84dc 	bne.w	8011426 <kalman_3gyro.constprop.0+0x4b4e>
 8010a6e:	eeb0 7a4c 	vmov.f32	s14, s24
 8010a72:	2300      	movs	r3, #0
 8010a74:	f88b 3000 	strb.w	r3, [fp]
 8010a78:	eddb ea02 	vldr	s29, [fp, #8]
 8010a7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a80:	2301      	movs	r3, #1
 8010a82:	f7fd bb8d 	b.w	800e1a0 <kalman_3gyro.constprop.0+0x18c8>
 8010a86:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010a8a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a92:	f340 85da 	ble.w	801164a <kalman_3gyro.constprop.0+0x4d72>
 8010a96:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010a9a:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010a9e:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010aa2:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010aa6:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010aaa:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010aae:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010ab2:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010ab6:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010aba:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac2:	f63d a94b 	bhi.w	800dd5c <kalman_3gyro.constprop.0+0x1484>
 8010ac6:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010aca:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad2:	f340 84bc 	ble.w	801144e <kalman_3gyro.constprop.0+0x4b76>
 8010ad6:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010ada:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010ade:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ae2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ae6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010aea:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010aee:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010af2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010af6:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010afa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b02:	f63d a94b 	bhi.w	800dd9c <kalman_3gyro.constprop.0+0x14c4>
 8010b06:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010b0a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b12:	f340 84a8 	ble.w	8011466 <kalman_3gyro.constprop.0+0x4b8e>
 8010b16:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010b1a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010b1e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010b22:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010b26:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010b2a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010b2e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010b32:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010b36:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010b3a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b42:	f63d a94b 	bhi.w	800dddc <kalman_3gyro.constprop.0+0x1504>
 8010b46:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010b4a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b52:	f340 8490 	ble.w	8011476 <kalman_3gyro.constprop.0+0x4b9e>
 8010b56:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010b5a:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010b5e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010b62:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010b66:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010b6a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010b6e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010b72:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010b76:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010b7a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b82:	f6fd a94b 	blt.w	800de1c <kalman_3gyro.constprop.0+0x1544>
 8010b86:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010b8a:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b92:	f57d a94b 	bpl.w	800de2c <kalman_3gyro.constprop.0+0x1554>
 8010b96:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010b9a:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010b9e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ba2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ba6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010baa:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010bae:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010bb2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010bb6:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010bba:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc2:	f6fd a94b 	blt.w	800de5c <kalman_3gyro.constprop.0+0x1584>
 8010bc6:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	f57d a945 	bpl.w	800de5c <kalman_3gyro.constprop.0+0x1584>
 8010bd2:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010bd6:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010bda:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010bde:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010be2:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010be6:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010bea:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010bee:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010bf2:	f7fd b933 	b.w	800de5c <kalman_3gyro.constprop.0+0x1584>
 8010bf6:	eddf 6a68 	vldr	s13, [pc, #416]	; 8010d98 <kalman_3gyro.constprop.0+0x44c0>
 8010bfa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c02:	f57d ac56 	bpl.w	800e4b2 <kalman_3gyro.constprop.0+0x1bda>
 8010c06:	eddf 3a65 	vldr	s7, [pc, #404]	; 8010d9c <kalman_3gyro.constprop.0+0x44c4>
 8010c0a:	eddf 2a65 	vldr	s5, [pc, #404]	; 8010da0 <kalman_3gyro.constprop.0+0x44c8>
 8010c0e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8010da4 <kalman_3gyro.constprop.0+0x44cc>
 8010c12:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010da8 <kalman_3gyro.constprop.0+0x44d0>
 8010c16:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010c1a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010c1e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010c22:	eeb0 ca66 	vmov.f32	s24, s13
 8010c26:	eddf 6a61 	vldr	s13, [pc, #388]	; 8010dac <kalman_3gyro.constprop.0+0x44d4>
 8010c2a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c32:	f6fd ac56 	blt.w	800e4e2 <kalman_3gyro.constprop.0+0x1c0a>
 8010c36:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010db0 <kalman_3gyro.constprop.0+0x44d8>
 8010c3a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c42:	f57d ac56 	bpl.w	800e4f2 <kalman_3gyro.constprop.0+0x1c1a>
 8010c46:	eddf 3a59 	vldr	s7, [pc, #356]	; 8010dac <kalman_3gyro.constprop.0+0x44d4>
 8010c4a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010c4e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010c52:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8010c56:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8010c5a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010c5e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010c62:	eeb0 ca66 	vmov.f32	s24, s13
 8010c66:	eddf 6a53 	vldr	s13, [pc, #332]	; 8010db4 <kalman_3gyro.constprop.0+0x44dc>
 8010c6a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c72:	f6fd ac56 	blt.w	800e522 <kalman_3gyro.constprop.0+0x1c4a>
 8010c76:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010c7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	f57d ac56 	bpl.w	800e532 <kalman_3gyro.constprop.0+0x1c5a>
 8010c86:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8010db4 <kalman_3gyro.constprop.0+0x44dc>
 8010c8a:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8010db8 <kalman_3gyro.constprop.0+0x44e0>
 8010c8e:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8010dbc <kalman_3gyro.constprop.0+0x44e4>
 8010c92:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010c96:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8010c9a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010c9e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010ca2:	eeb0 ca66 	vmov.f32	s24, s13
 8010ca6:	e4f4      	b.n	8010692 <kalman_3gyro.constprop.0+0x3dba>
 8010ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cac:	f57d abe1 	bpl.w	800e472 <kalman_3gyro.constprop.0+0x1b9a>
 8010cb0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8010d9c <kalman_3gyro.constprop.0+0x44c4>
 8010cb4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cbc:	da9b      	bge.n	8010bf6 <kalman_3gyro.constprop.0+0x431e>
 8010cbe:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010cc2:	f7fd bbee 	b.w	800e4a2 <kalman_3gyro.constprop.0+0x1bca>
 8010cc6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010d98 <kalman_3gyro.constprop.0+0x44c0>
 8010cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd2:	f57d ab5e 	bpl.w	800e392 <kalman_3gyro.constprop.0+0x1aba>
 8010cd6:	eddf 6a31 	vldr	s13, [pc, #196]	; 8010d9c <kalman_3gyro.constprop.0+0x44c4>
 8010cda:	eddf 4a39 	vldr	s9, [pc, #228]	; 8010dc0 <kalman_3gyro.constprop.0+0x44e8>
 8010cde:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010da4 <kalman_3gyro.constprop.0+0x44cc>
 8010ce2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010dc4 <kalman_3gyro.constprop.0+0x44ec>
 8010ce6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010cea:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010cee:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010cf2:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8010dac <kalman_3gyro.constprop.0+0x44d4>
 8010cf6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfe:	f6fd ab5e 	blt.w	800e3be <kalman_3gyro.constprop.0+0x1ae6>
 8010d02:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010db0 <kalman_3gyro.constprop.0+0x44d8>
 8010d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0e:	f57d ab5e 	bpl.w	800e3ce <kalman_3gyro.constprop.0+0x1af6>
 8010d12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010dac <kalman_3gyro.constprop.0+0x44d4>
 8010d16:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010d1a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8010d1e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010d22:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8010d26:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010d2a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010d2e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8010db4 <kalman_3gyro.constprop.0+0x44dc>
 8010d32:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3a:	f6fd ab5e 	blt.w	800e3fa <kalman_3gyro.constprop.0+0x1b22>
 8010d3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4a:	f57d ab5d 	bpl.w	800e408 <kalman_3gyro.constprop.0+0x1b30>
 8010d4e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010db4 <kalman_3gyro.constprop.0+0x44dc>
 8010d52:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010dc8 <kalman_3gyro.constprop.0+0x44f0>
 8010d56:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8010dbc <kalman_3gyro.constprop.0+0x44e4>
 8010d5a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010dcc <kalman_3gyro.constprop.0+0x44f4>
 8010d5e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010d62:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010d66:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010d6a:	f7fd bb5b 	b.w	800e424 <kalman_3gyro.constprop.0+0x1b4c>
 8010d6e:	9b01      	ldr	r3, [sp, #4]
 8010d70:	e63d      	b.n	80109ee <kalman_3gyro.constprop.0+0x4116>
 8010d72:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8010d76:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7e:	da2b      	bge.n	8010dd8 <kalman_3gyro.constprop.0+0x4500>
 8010d80:	ed9f ba13 	vldr	s22, [pc, #76]	; 8010dd0 <kalman_3gyro.constprop.0+0x44f8>
 8010d84:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8010d88:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d90:	db3a      	blt.n	8010e08 <kalman_3gyro.constprop.0+0x4530>
 8010d92:	e386      	b.n	80114a2 <kalman_3gyro.constprop.0+0x4bca>
 8010d94:	40a00000 	.word	0x40a00000
 8010d98:	3cf5c28f 	.word	0x3cf5c28f
 8010d9c:	3c75c28f 	.word	0x3c75c28f
 8010da0:	3dccccd0 	.word	0x3dccccd0
 8010da4:	42855556 	.word	0x42855556
 8010da8:	3f866666 	.word	0x3f866666
 8010dac:	3d4ccccd 	.word	0x3d4ccccd
 8010db0:	3dcccccd 	.word	0x3dcccccd
 8010db4:	3e4ccccd 	.word	0x3e4ccccd
 8010db8:	42200000 	.word	0x42200000
 8010dbc:	40555555 	.word	0x40555555
 8010dc0:	3ecccccc 	.word	0x3ecccccc
 8010dc4:	3fcccccd 	.word	0x3fcccccd
 8010dc8:	43f00000 	.word	0x43f00000
 8010dcc:	42ee0000 	.word	0x42ee0000
 8010dd0:	00000000 	.word	0x00000000
 8010dd4:	eeb0 7a64 	vmov.f32	s14, s9
 8010dd8:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8010ddc:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de4:	f140 8359 	bpl.w	801149a <kalman_3gyro.constprop.0+0x4bc2>
 8010de8:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8010dec:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8010df0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010df4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010df8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010dfc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010e00:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010e04:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010e08:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8010e0c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e14:	f2c0 835d 	blt.w	80114d2 <kalman_3gyro.constprop.0+0x4bfa>
 8010e18:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8010e1c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e24:	f140 8402 	bpl.w	801162c <kalman_3gyro.constprop.0+0x4d54>
 8010e28:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8010e2c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8010e30:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010e34:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e38:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010e3c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010e40:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010e44:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010e48:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8010e4c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e54:	f200 835d 	bhi.w	8011512 <kalman_3gyro.constprop.0+0x4c3a>
 8010e58:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8010e5c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e64:	f340 83e8 	ble.w	8011638 <kalman_3gyro.constprop.0+0x4d60>
 8010e68:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8010e6c:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8010e70:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010e74:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e78:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010e7c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010e80:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010e84:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010e88:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8010e8c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e94:	f200 835d 	bhi.w	8011552 <kalman_3gyro.constprop.0+0x4c7a>
 8010e98:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8010e9c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea4:	f340 83b4 	ble.w	8011610 <kalman_3gyro.constprop.0+0x4d38>
 8010ea8:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8010eac:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8010eb0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010eb4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010eb8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010ebc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010ec0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010ec4:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010ec8:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8010ecc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed4:	f2c0 835c 	blt.w	8011590 <kalman_3gyro.constprop.0+0x4cb8>
 8010ed8:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8010edc:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee4:	f140 835c 	bpl.w	80115a0 <kalman_3gyro.constprop.0+0x4cc8>
 8010ee8:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8010eec:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8010ef0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ef4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ef8:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010efc:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010f00:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8010f04:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f08:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8010f0c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f14:	f6fc aeda 	blt.w	800dccc <kalman_3gyro.constprop.0+0x13f4>
 8010f18:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f20:	f57c aed4 	bpl.w	800dccc <kalman_3gyro.constprop.0+0x13f4>
 8010f24:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8010f28:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8010f2c:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010f30:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010f34:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010f38:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010f3c:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8010f40:	ee3b ba04 	vadd.f32	s22, s22, s8
 8010f44:	f7fc bec2 	b.w	800dccc <kalman_3gyro.constprop.0+0x13f4>
 8010f48:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010f4c:	eef4 7acd 	vcmpe.f32	s15, s26
 8010f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f54:	dd2c      	ble.n	8010fb0 <kalman_3gyro.constprop.0+0x46d8>
 8010f56:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8010f5a:	eef4 7aeb 	vcmpe.f32	s15, s23
 8010f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f62:	dd25      	ble.n	8010fb0 <kalman_3gyro.constprop.0+0x46d8>
 8010f64:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010f68:	eef4 7aec 	vcmpe.f32	s15, s25
 8010f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f70:	dd1e      	ble.n	8010fb0 <kalman_3gyro.constprop.0+0x46d8>
 8010f72:	eddd 5a03 	vldr	s11, [sp, #12]
 8010f76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010f7a:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f82:	d515      	bpl.n	8010fb0 <kalman_3gyro.constprop.0+0x46d8>
 8010f84:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f88:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010f8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f98:	d50a      	bpl.n	8010fb0 <kalman_3gyro.constprop.0+0x46d8>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010fa0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010fa4:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010fa8:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010fac:	f7fd bf4c 	b.w	800ee48 <kalman_3gyro.constprop.0+0x2570>
 8010fb0:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8010fb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbc:	dd0b      	ble.n	8010fd6 <kalman_3gyro.constprop.0+0x46fe>
 8010fbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fca:	f100 843f 	bmi.w	801184c <kalman_3gyro.constprop.0+0x4f74>
 8010fce:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010fd2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010fdc:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010fe0:	f7fd bf32 	b.w	800ee48 <kalman_3gyro.constprop.0+0x2570>
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010fea:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8010fee:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8010ff2:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8010ff6:	edd2 5a00 	vldr	s11, [r2]
 8010ffa:	ed93 7a00 	vldr	s14, [r3]
 8010ffe:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8011002:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8011006:	ed92 5a00 	vldr	s10, [r2]
 801100a:	edd3 6a00 	vldr	s13, [r3]
 801100e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8011012:	ee67 4a07 	vmul.f32	s9, s14, s14
 8011016:	eea5 4a05 	vfma.f32	s8, s10, s10
 801101a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 801101e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8011022:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8011026:	aa5d      	add	r2, sp, #372	; 0x174
 8011028:	a833      	add	r0, sp, #204	; 0xcc
 801102a:	ed91 6a00 	vldr	s12, [r1]
 801102e:	edd3 7a00 	vldr	s15, [r3]
 8011032:	eea6 4a06 	vfma.f32	s8, s12, s12
 8011036:	a92d      	add	r1, sp, #180	; 0xb4
 8011038:	ad5d      	add	r5, sp, #372	; 0x174
 801103a:	eee7 4aa7 	vfma.f32	s9, s15, s15
 801103e:	ac66      	add	r4, sp, #408	; 0x198
 8011040:	eef1 2ac4 	vsqrt.f32	s5, s8
 8011044:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8011048:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 801104c:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8011050:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8011054:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011058:	ee27 7a24 	vmul.f32	s14, s14, s9
 801105c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011060:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011064:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011068:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801106c:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8011070:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8011074:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8011078:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 801107c:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011080:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8011084:	f7fa fbac 	bl	800b7e0 <getRotationMatrix>
 8011088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801108a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011090:	682e      	ldr	r6, [r5, #0]
 8011092:	6026      	str	r6, [r4, #0]
 8011094:	ad66      	add	r5, sp, #408	; 0x198
 8011096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011098:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 801109c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801109e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110a2:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 80110a6:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 80110aa:	6026      	str	r6, [r4, #0]
 80110ac:	eef0 7ae7 	vabs.f32	s15, s15
 80110b0:	eeb0 7ac7 	vabs.f32	s14, s14
 80110b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110bc:	f100 81df 	bmi.w	801147e <kalman_3gyro.constprop.0+0x4ba6>
 80110c0:	2307      	movs	r3, #7
 80110c2:	f04f 0c04 	mov.w	ip, #4
 80110c6:	9305      	str	r3, [sp, #20]
 80110c8:	2300      	movs	r3, #0
 80110ca:	4662      	mov	r2, ip
 80110cc:	2003      	movs	r0, #3
 80110ce:	2706      	movs	r7, #6
 80110d0:	f04f 0e01 	mov.w	lr, #1
 80110d4:	9304      	str	r3, [sp, #16]
 80110d6:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 80110da:	eeb0 7ac7 	vabs.f32	s14, s14
 80110de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e6:	f340 8296 	ble.w	8011616 <kalman_3gyro.constprop.0+0x4d3e>
 80110ea:	2306      	movs	r3, #6
 80110ec:	930a      	str	r3, [sp, #40]	; 0x28
 80110ee:	2307      	movs	r3, #7
 80110f0:	9305      	str	r3, [sp, #20]
 80110f2:	2300      	movs	r3, #0
 80110f4:	2708      	movs	r7, #8
 80110f6:	f04f 0c04 	mov.w	ip, #4
 80110fa:	9302      	str	r3, [sp, #8]
 80110fc:	2302      	movs	r3, #2
 80110fe:	9707      	str	r7, [sp, #28]
 8011100:	4662      	mov	r2, ip
 8011102:	2005      	movs	r0, #5
 8011104:	f04f 0e01 	mov.w	lr, #1
 8011108:	9304      	str	r3, [sp, #16]
 801110a:	ab66      	add	r3, sp, #408	; 0x198
 801110c:	441a      	add	r2, r3
 801110e:	9b07      	ldr	r3, [sp, #28]
 8011110:	edd2 6a00 	vldr	s13, [r2]
 8011114:	9a02      	ldr	r2, [sp, #8]
 8011116:	a966      	add	r1, sp, #408	; 0x198
 8011118:	440b      	add	r3, r1
 801111a:	ed93 7a00 	vldr	s14, [r3]
 801111e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011122:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011126:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801112a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801112e:	9a04      	ldr	r2, [sp, #16]
 8011130:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8011134:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801113c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011140:	0080      	lsls	r0, r0, #2
 8011142:	900e      	str	r0, [sp, #56]	; 0x38
 8011144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011146:	940d      	str	r4, [sp, #52]	; 0x34
 8011148:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801114c:	edc3 7a00 	vstr	s15, [r3]
 8011150:	ed96 7a00 	vldr	s14, [r6]
 8011154:	edd1 7a00 	vldr	s15, [r1]
 8011158:	930c      	str	r3, [sp, #48]	; 0x30
 801115a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801115e:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8011162:	0080      	lsls	r0, r0, #2
 8011164:	9006      	str	r0, [sp, #24]
 8011166:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 801116a:	00bf      	lsls	r7, r7, #2
 801116c:	9711      	str	r7, [sp, #68]	; 0x44
 801116e:	9f05      	ldr	r7, [sp, #20]
 8011170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011172:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8011176:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801117a:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	9307      	str	r3, [sp, #28]
 8011182:	9b02      	ldr	r3, [sp, #8]
 8011184:	edc6 6a00 	vstr	s13, [r6]
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	930b      	str	r3, [sp, #44]	; 0x2c
 801118c:	9b04      	ldr	r3, [sp, #16]
 801118e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	9312      	str	r3, [sp, #72]	; 0x48
 8011194:	9b05      	ldr	r3, [sp, #20]
 8011196:	ed96 7a00 	vldr	s14, [r6]
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	9309      	str	r3, [sp, #36]	; 0x24
 801119e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80111a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80111a4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80111a8:	ed93 6a00 	vldr	s12, [r3]
 80111ac:	edd2 7a00 	vldr	s15, [r2]
 80111b0:	eee6 7a47 	vfms.f32	s15, s12, s14
 80111b4:	ea4f 058e 	mov.w	r5, lr, lsl #2
 80111b8:	950a      	str	r5, [sp, #40]	; 0x28
 80111ba:	ea4f 058c 	mov.w	r5, ip, lsl #2
 80111be:	edc2 7a00 	vstr	s15, [r2]
 80111c2:	ed96 7a00 	vldr	s14, [r6]
 80111c6:	edd4 7a00 	vldr	s15, [r4]
 80111ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80111ce:	edc4 7a00 	vstr	s15, [r4]
 80111d2:	edd0 5a00 	vldr	s11, [r0]
 80111d6:	ed97 7a00 	vldr	s14, [r7]
 80111da:	eea6 7a65 	vfms.f32	s14, s12, s11
 80111de:	eef0 7ae7 	vabs.f32	s15, s15
 80111e2:	ed87 7a00 	vstr	s14, [r7]
 80111e6:	ed90 6a00 	vldr	s12, [r0]
 80111ea:	ed91 7a00 	vldr	s14, [r1]
 80111ee:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80111f2:	ed81 7a00 	vstr	s14, [r1]
 80111f6:	ed92 7a00 	vldr	s14, [r2]
 80111fa:	eeb0 7ac7 	vabs.f32	s14, s14
 80111fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011206:	dd12      	ble.n	801122e <kalman_3gyro.constprop.0+0x4956>
 8011208:	9a07      	ldr	r2, [sp, #28]
 801120a:	9f05      	ldr	r7, [sp, #20]
 801120c:	9806      	ldr	r0, [sp, #24]
 801120e:	9209      	str	r2, [sp, #36]	; 0x24
 8011210:	4673      	mov	r3, lr
 8011212:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011216:	9302      	str	r3, [sp, #8]
 8011218:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801121c:	009b      	lsls	r3, r3, #2
 801121e:	9206      	str	r2, [sp, #24]
 8011220:	930b      	str	r3, [sp, #44]	; 0x2c
 8011222:	00ba      	lsls	r2, r7, #2
 8011224:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8011228:	4605      	mov	r5, r0
 801122a:	9207      	str	r2, [sp, #28]
 801122c:	930a      	str	r3, [sp, #40]	; 0x28
 801122e:	9b06      	ldr	r3, [sp, #24]
 8011230:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011232:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8011236:	4413      	add	r3, r2
 8011238:	461c      	mov	r4, r3
 801123a:	462b      	mov	r3, r5
 801123c:	4413      	add	r3, r2
 801123e:	ed94 7a00 	vldr	s14, [r4]
 8011242:	edd3 7a00 	vldr	s15, [r3]
 8011246:	ee87 2a27 	vdiv.f32	s4, s14, s15
 801124a:	4618      	mov	r0, r3
 801124c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801124e:	4413      	add	r3, r2
 8011250:	461a      	mov	r2, r3
 8011252:	9b07      	ldr	r3, [sp, #28]
 8011254:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011258:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 801125c:	440b      	add	r3, r1
 801125e:	4619      	mov	r1, r3
 8011260:	442e      	add	r6, r5
 8011262:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011264:	9607      	str	r6, [sp, #28]
 8011266:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011268:	ed84 2a00 	vstr	s4, [r4]
 801126c:	442b      	add	r3, r5
 801126e:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 8011272:	9306      	str	r3, [sp, #24]
 8011274:	19bb      	adds	r3, r7, r6
 8011276:	ed92 7a00 	vldr	s14, [r2]
 801127a:	edd1 7a00 	vldr	s15, [r1]
 801127e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011280:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8011284:	edd3 3a00 	vldr	s7, [r3]
 8011288:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 801128c:	eee2 7a47 	vfms.f32	s15, s4, s14
 8011290:	4423      	add	r3, r4
 8011292:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8011296:	ed93 5a00 	vldr	s10, [r3]
 801129a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801129c:	edc1 7a00 	vstr	s15, [r1]
 80112a0:	462f      	mov	r7, r5
 80112a2:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 80112a6:	4629      	mov	r1, r5
 80112a8:	eb05 0c03 	add.w	ip, r5, r3
 80112ac:	9d04      	ldr	r5, [sp, #16]
 80112ae:	ed92 1a00 	vldr	s2, [r2]
 80112b2:	4437      	add	r7, r6
 80112b4:	9705      	str	r7, [sp, #20]
 80112b6:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 80112ba:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 80112be:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80112c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80112c6:	4419      	add	r1, r3
 80112c8:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80112cc:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 80112d0:	191c      	adds	r4, r3, r4
 80112d2:	9b02      	ldr	r3, [sp, #8]
 80112d4:	9104      	str	r1, [sp, #16]
 80112d6:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 80112da:	9409      	str	r4, [sp, #36]	; 0x24
 80112dc:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80112e0:	463d      	mov	r5, r7
 80112e2:	9904      	ldr	r1, [sp, #16]
 80112e4:	46b6      	mov	lr, r6
 80112e6:	4623      	mov	r3, r4
 80112e8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80112ec:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 80112f0:	edd0 7a00 	vldr	s15, [r0]
 80112f4:	9805      	ldr	r0, [sp, #20]
 80112f6:	ed91 0a00 	vldr	s0, [r1]
 80112fa:	ed90 8a00 	vldr	s16, [r0]
 80112fe:	eddc 4a00 	vldr	s9, [ip]
 8011302:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8011306:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 801130a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 801130e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8011312:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8011316:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 801131a:	a85d      	add	r0, sp, #372	; 0x174
 801131c:	a93e      	add	r1, sp, #248	; 0xf8
 801131e:	edd7 5a00 	vldr	s11, [r7]
 8011322:	ed96 6a00 	vldr	s12, [r6]
 8011326:	9a06      	ldr	r2, [sp, #24]
 8011328:	ed95 7a00 	vldr	s14, [r5]
 801132c:	edd4 6a00 	vldr	s13, [r4]
 8011330:	ed93 3a00 	vldr	s6, [r3]
 8011334:	edde 7a00 	vldr	s15, [lr]
 8011338:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801133a:	edd2 1a00 	vldr	s3, [r2]
 801133e:	9e07      	ldr	r6, [sp, #28]
 8011340:	eee8 3a45 	vfms.f32	s7, s16, s10
 8011344:	eee0 4a45 	vfms.f32	s9, s0, s10
 8011348:	eea8 6a65 	vfms.f32	s12, s16, s11
 801134c:	eee7 7a48 	vfms.f32	s15, s14, s16
 8011350:	eee0 6a65 	vfms.f32	s13, s0, s11
 8011354:	eea7 3a40 	vfms.f32	s6, s14, s0
 8011358:	ed94 0a00 	vldr	s0, [r4]
 801135c:	eea2 3a67 	vfms.f32	s6, s4, s15
 8011360:	eee3 4ac2 	vfms.f32	s9, s7, s4
 8011364:	eee2 6a46 	vfms.f32	s13, s4, s12
 8011368:	ee80 2a80 	vdiv.f32	s4, s1, s0
 801136c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8011370:	ee64 4a24 	vmul.f32	s9, s8, s9
 8011374:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011378:	eea1 6a66 	vfms.f32	s12, s2, s13
 801137c:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8011380:	eee4 7a41 	vfms.f32	s15, s8, s2
 8011384:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8011388:	eea4 5ae1 	vfms.f32	s10, s9, s3
 801138c:	eea4 7a61 	vfms.f32	s14, s8, s3
 8011390:	ed96 3a00 	vldr	s6, [r6]
 8011394:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8011398:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801139c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80113a0:	ee22 6a86 	vmul.f32	s12, s5, s12
 80113a4:	eea7 7ac3 	vfms.f32	s14, s15, s6
 80113a8:	eea3 5ac3 	vfms.f32	s10, s7, s6
 80113ac:	eee3 5a46 	vfms.f32	s11, s6, s12
 80113b0:	ee27 7a02 	vmul.f32	s14, s14, s4
 80113b4:	ee22 5a05 	vmul.f32	s10, s4, s10
 80113b8:	ee62 5a25 	vmul.f32	s11, s4, s11
 80113bc:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 80113c0:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 80113c4:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 80113c8:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 80113cc:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 80113d0:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 80113d4:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 80113d8:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 80113dc:	f7fa faa0 	bl	800b920 <b_dcm2q>
 80113e0:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 80113e4:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80113e8:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80113ec:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 80113f0:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80113f4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80113f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80113fc:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011400:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011404:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8011408:	2b00      	cmp	r3, #0
 801140a:	f43d ad20 	beq.w	800ee4e <kalman_3gyro.constprop.0+0x2576>
 801140e:	2200      	movs	r2, #0
 8011410:	9b01      	ldr	r3, [sp, #4]
 8011412:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011416:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801141a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801141e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011422:	f7fd bd9c 	b.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 8011426:	edd3 7a02 	vldr	s15, [r3, #8]
 801142a:	ed93 7a01 	vldr	s14, [r3, #4]
 801142e:	edd3 6a03 	vldr	s13, [r3, #12]
 8011432:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011436:	eee7 7a07 	vfma.f32	s15, s14, s14
 801143a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801143e:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8011442:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8011446:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 801144a:	f7ff bb12 	b.w	8010a72 <kalman_3gyro.constprop.0+0x419a>
 801144e:	eeb0 7a64 	vmov.f32	s14, s9
 8011452:	f7fc bc8b 	b.w	800dd6c <kalman_3gyro.constprop.0+0x1494>
 8011456:	eeb0 7a64 	vmov.f32	s14, s9
 801145a:	f7ff bb94 	b.w	8010b86 <kalman_3gyro.constprop.0+0x42ae>
 801145e:	eeb0 7a64 	vmov.f32	s14, s9
 8011462:	f7ff bb50 	b.w	8010b06 <kalman_3gyro.constprop.0+0x422e>
 8011466:	eeb0 7a64 	vmov.f32	s14, s9
 801146a:	f7fc bc9f 	b.w	800ddac <kalman_3gyro.constprop.0+0x14d4>
 801146e:	eeb0 7a64 	vmov.f32	s14, s9
 8011472:	f7ff bb68 	b.w	8010b46 <kalman_3gyro.constprop.0+0x426e>
 8011476:	eeb0 7a64 	vmov.f32	s14, s9
 801147a:	f7fc bcb7 	b.w	800ddec <kalman_3gyro.constprop.0+0x1514>
 801147e:	2200      	movs	r2, #0
 8011480:	2004      	movs	r0, #4
 8011482:	2301      	movs	r3, #1
 8011484:	2406      	movs	r4, #6
 8011486:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801148a:	9007      	str	r0, [sp, #28]
 801148c:	eef0 7a47 	vmov.f32	s15, s14
 8011490:	4696      	mov	lr, r2
 8011492:	f04f 0c03 	mov.w	ip, #3
 8011496:	2707      	movs	r7, #7
 8011498:	e61d      	b.n	80110d6 <kalman_3gyro.constprop.0+0x47fe>
 801149a:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011824 <kalman_3gyro.constprop.0+0x4f4c>
 801149e:	eeb0 7a64 	vmov.f32	s14, s9
 80114a2:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80114a6:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80114aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ae:	f140 80b9 	bpl.w	8011624 <kalman_3gyro.constprop.0+0x4d4c>
 80114b2:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80114b6:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80114ba:	ee38 3a47 	vsub.f32	s6, s16, s14
 80114be:	ee34 4a63 	vsub.f32	s8, s8, s7
 80114c2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80114c6:	ee64 4a03 	vmul.f32	s9, s8, s6
 80114ca:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80114ce:	ee3b ba23 	vadd.f32	s22, s22, s7
 80114d2:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 80114d6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80114da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114de:	f6ff acb3 	blt.w	8010e48 <kalman_3gyro.constprop.0+0x4570>
 80114e2:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 80114e6:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ee:	f140 80a0 	bpl.w	8011632 <kalman_3gyro.constprop.0+0x4d5a>
 80114f2:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 80114f6:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 80114fa:	ee38 3a47 	vsub.f32	s6, s16, s14
 80114fe:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011502:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011506:	ee64 4a03 	vmul.f32	s9, s8, s6
 801150a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801150e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011512:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8011516:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801151e:	f63f acb3 	bhi.w	8010e88 <kalman_3gyro.constprop.0+0x45b0>
 8011522:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8011526:	eef4 4ac8 	vcmpe.f32	s9, s16
 801152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801152e:	f340 8086 	ble.w	801163e <kalman_3gyro.constprop.0+0x4d66>
 8011532:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8011536:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 801153a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801153e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011542:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011546:	ee64 4a03 	vmul.f32	s9, s8, s6
 801154a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801154e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011552:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8011556:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155e:	f63f acb3 	bhi.w	8010ec8 <kalman_3gyro.constprop.0+0x45f0>
 8011562:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8011566:	eef4 4ac8 	vcmpe.f32	s9, s16
 801156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156e:	dd69      	ble.n	8011644 <kalman_3gyro.constprop.0+0x4d6c>
 8011570:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8011574:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8011578:	ee38 3a47 	vsub.f32	s6, s16, s14
 801157c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011580:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011584:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011588:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801158c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011590:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8011594:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159c:	f63f acb4 	bhi.w	8010f08 <kalman_3gyro.constprop.0+0x4630>
 80115a0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80115a4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80115a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ac:	f77f acb4 	ble.w	8010f18 <kalman_3gyro.constprop.0+0x4640>
 80115b0:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80115b4:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 80115b8:	ee78 3a64 	vsub.f32	s7, s16, s9
 80115bc:	ee35 5a44 	vsub.f32	s10, s10, s8
 80115c0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80115c4:	ee25 5a23 	vmul.f32	s10, s10, s7
 80115c8:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80115cc:	ee3b ba04 	vadd.f32	s22, s22, s8
 80115d0:	f7fc bb7c 	b.w	800dccc <kalman_3gyro.constprop.0+0x13f4>
 80115d4:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 80115d8:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011828 <kalman_3gyro.constprop.0+0x4f50>
 80115dc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801182c <kalman_3gyro.constprop.0+0x4f54>
 80115e0:	3301      	adds	r3, #1
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	2b31      	cmp	r3, #49	; 0x31
 80115e6:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80115ea:	bf98      	it	ls
 80115ec:	eef0 7a47 	vmovls.f32	s15, s14
 80115f0:	f7fd bc1c 	b.w	800ee2c <kalman_3gyro.constprop.0+0x2554>
 80115f4:	2a0a      	cmp	r2, #10
 80115f6:	d02c      	beq.n	8011652 <kalman_3gyro.constprop.0+0x4d7a>
 80115f8:	2100      	movs	r1, #0
 80115fa:	3201      	adds	r2, #1
 80115fc:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011600:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011604:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011608:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 801160c:	f7fd bca7 	b.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 8011610:	eeb0 7a64 	vmov.f32	s14, s9
 8011614:	e7a5      	b.n	8011562 <kalman_3gyro.constprop.0+0x4c8a>
 8011616:	2305      	movs	r3, #5
 8011618:	2108      	movs	r1, #8
 801161a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 801161e:	2302      	movs	r3, #2
 8011620:	9302      	str	r3, [sp, #8]
 8011622:	e572      	b.n	801110a <kalman_3gyro.constprop.0+0x4832>
 8011624:	eeb0 7a64 	vmov.f32	s14, s9
 8011628:	f7ff bbf6 	b.w	8010e18 <kalman_3gyro.constprop.0+0x4540>
 801162c:	eeb0 7a64 	vmov.f32	s14, s9
 8011630:	e757      	b.n	80114e2 <kalman_3gyro.constprop.0+0x4c0a>
 8011632:	eeb0 7a64 	vmov.f32	s14, s9
 8011636:	e40f      	b.n	8010e58 <kalman_3gyro.constprop.0+0x4580>
 8011638:	eeb0 7a64 	vmov.f32	s14, s9
 801163c:	e771      	b.n	8011522 <kalman_3gyro.constprop.0+0x4c4a>
 801163e:	eeb0 7a64 	vmov.f32	s14, s9
 8011642:	e429      	b.n	8010e98 <kalman_3gyro.constprop.0+0x45c0>
 8011644:	eeb0 7a64 	vmov.f32	s14, s9
 8011648:	e446      	b.n	8010ed8 <kalman_3gyro.constprop.0+0x4600>
 801164a:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011824 <kalman_3gyro.constprop.0+0x4f4c>
 801164e:	f7fc bb6d 	b.w	800dd2c <kalman_3gyro.constprop.0+0x1454>
 8011652:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011654:	ed94 3a00 	vldr	s6, [r4]
 8011658:	edd2 5a00 	vldr	s11, [r2]
 801165c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801165e:	edd0 3a00 	vldr	s7, [r0]
 8011662:	ed92 1a00 	vldr	s2, [r2]
 8011666:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011668:	ed91 4a00 	vldr	s8, [r1]
 801166c:	edd2 4a00 	vldr	s9, [r2]
 8011670:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011672:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8011676:	ed92 2a00 	vldr	s4, [r2]
 801167a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801167c:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011680:	edd2 7a00 	vldr	s15, [r2]
 8011684:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011686:	edd2 2a00 	vldr	s5, [r2]
 801168a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801168c:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011690:	edd2 1a00 	vldr	s3, [r2]
 8011694:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011696:	ee74 4a82 	vadd.f32	s9, s9, s4
 801169a:	ee75 5a83 	vadd.f32	s11, s11, s6
 801169e:	ed92 3a00 	vldr	s6, [r2]
 80116a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116a4:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80116a8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80116ac:	edd2 3a00 	vldr	s7, [r2]
 80116b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80116b2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80116b6:	ed92 4a00 	vldr	s8, [r2]
 80116ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80116bc:	ee74 4a83 	vadd.f32	s9, s9, s6
 80116c0:	ed92 2a00 	vldr	s4, [r2]
 80116c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80116c6:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 80116ca:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80116ce:	edd2 2a00 	vldr	s5, [r2]
 80116d2:	ed91 3a00 	vldr	s6, [r1]
 80116d6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80116da:	ee74 4a82 	vadd.f32	s9, s9, s4
 80116de:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 80116e2:	ee75 5a84 	vadd.f32	s11, s11, s8
 80116e6:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 80116ea:	ed90 4a00 	vldr	s8, [r0]
 80116ee:	edd2 3a00 	vldr	s7, [r2]
 80116f2:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 80116f6:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 80116fa:	ed91 2a00 	vldr	s4, [r1]
 80116fe:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011702:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011706:	ee74 4a83 	vadd.f32	s9, s9, s6
 801170a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 801170e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011712:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011716:	ed90 4a00 	vldr	s8, [r0]
 801171a:	edd2 2a00 	vldr	s5, [r2]
 801171e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011722:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011726:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 801172a:	edd1 3a00 	vldr	s7, [r1]
 801172e:	ed90 3a00 	vldr	s6, [r0]
 8011732:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011736:	ee75 5a84 	vadd.f32	s11, s11, s8
 801173a:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 801173e:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011742:	ed92 4a00 	vldr	s8, [r2]
 8011746:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801174a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801174e:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011752:	edd0 3a00 	vldr	s7, [r0]
 8011756:	edd4 2a00 	vldr	s5, [r4]
 801175a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801175e:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011762:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011766:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 801176a:	ed91 3a00 	vldr	s6, [r1]
 801176e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011772:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011776:	ed92 4a00 	vldr	s8, [r2]
 801177a:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 801177e:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011782:	edd4 3a00 	vldr	s7, [r4]
 8011786:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 801178a:	ee75 5aa2 	vadd.f32	s11, s11, s5
 801178e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011792:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011796:	ed91 4a00 	vldr	s8, [r1]
 801179a:	ee75 5aa3 	vadd.f32	s11, s11, s7
 801179e:	ee77 7a84 	vadd.f32	s15, s15, s8
 80117a2:	ee64 4a85 	vmul.f32	s9, s9, s10
 80117a6:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 80117aa:	ee65 5a85 	vmul.f32	s11, s11, s10
 80117ae:	edc1 4a00 	vstr	s9, [r1]
 80117b2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80117b6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80117ba:	edc1 5a00 	vstr	s11, [r1]
 80117be:	f240 1501 	movw	r5, #257	; 0x101
 80117c2:	3201      	adds	r2, #1
 80117c4:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 80117c8:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 80117cc:	edc1 7a00 	vstr	s15, [r1]
 80117d0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80117d4:	2800      	cmp	r0, #0
 80117d6:	f43d abc2 	beq.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 80117da:	2200      	movs	r2, #0
 80117dc:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 80117e0:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 80117e4:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 80117e8:	f88b 2001 	strb.w	r2, [fp, #1]
 80117ec:	f7fd bbb7 	b.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 80117f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80117f4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80117f8:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80117fc:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011800:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011804:	f7fd bb20 	b.w	800ee48 <kalman_3gyro.constprop.0+0x2570>
 8011808:	2a00      	cmp	r2, #0
 801180a:	f340 80c1 	ble.w	8011990 <kalman_3gyro.constprop.0+0x50b8>
 801180e:	2300      	movs	r3, #0
 8011810:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011814:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011818:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 801181c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011820:	f7fc bfcf 	b.w	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 8011824:	00000000 	.word	0x00000000
 8011828:	3e4cccce 	.word	0x3e4cccce
 801182c:	3eaaaaab 	.word	0x3eaaaaab
 8011830:	3e999998 	.word	0x3e999998
 8011834:	3f99999a 	.word	0x3f99999a
 8011838:	3dccccd0 	.word	0x3dccccd0
 801183c:	3f8ccccd 	.word	0x3f8ccccd
 8011840:	3e4ccccd 	.word	0x3e4ccccd
 8011844:	3d088889 	.word	0x3d088889
 8011848:	3d0d3dcb 	.word	0x3d0d3dcb
 801184c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011858:	d55b      	bpl.n	8011912 <kalman_3gyro.constprop.0+0x503a>
 801185a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011838 <kalman_3gyro.constprop.0+0x4f60>
 801185e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011866:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801186a:	eef0 5a66 	vmov.f32	s11, s13
 801186e:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011872:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187a:	eeb0 7a65 	vmov.f32	s14, s11
 801187e:	db5b      	blt.n	8011938 <kalman_3gyro.constprop.0+0x5060>
 8011880:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801188c:	d55b      	bpl.n	8011946 <kalman_3gyro.constprop.0+0x506e>
 801188e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011892:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011896:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011830 <kalman_3gyro.constprop.0+0x4f58>
 801189a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011834 <kalman_3gyro.constprop.0+0x4f5c>
 801189e:	eea6 7a86 	vfma.f32	s14, s13, s12
 80118a2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80118a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	db5b      	blt.n	8011968 <kalman_3gyro.constprop.0+0x5090>
 80118b0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80118b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118bc:	d55b      	bpl.n	8011976 <kalman_3gyro.constprop.0+0x509e>
 80118be:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80118c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80118ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80118ce:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80118d2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80118d6:	f7ff bb7e 	b.w	8010fd6 <kalman_3gyro.constprop.0+0x46fe>
 80118da:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 80118de:	2b27      	cmp	r3, #39	; 0x27
 80118e0:	f200 80c3 	bhi.w	8011a6a <kalman_3gyro.constprop.0+0x5192>
 80118e4:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 80118e8:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 80118ec:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80118f0:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 80118f4:	2201      	movs	r2, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80118fc:	bf14      	ite	ne
 80118fe:	b29b      	uxthne	r3, r3
 8011900:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011904:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011908:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	f7fd bb26 	b.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 8011912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011916:	eef4 7ae6 	vcmpe.f32	s15, s13
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	d5af      	bpl.n	8011880 <kalman_3gyro.constprop.0+0x4fa8>
 8011920:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011924:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011838 <kalman_3gyro.constprop.0+0x4f60>
 8011928:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 801183c <kalman_3gyro.constprop.0+0x4f64>
 801192c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011930:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011934:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011938:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801193c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011944:	dbad      	blt.n	80118a2 <kalman_3gyro.constprop.0+0x4fca>
 8011946:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801194a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011952:	d5ad      	bpl.n	80118b0 <kalman_3gyro.constprop.0+0x4fd8>
 8011954:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011958:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801195c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011960:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011964:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011968:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801196c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011974:	dbad      	blt.n	80118d2 <kalman_3gyro.constprop.0+0x4ffa>
 8011976:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801197a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801197e:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011840 <kalman_3gyro.constprop.0+0x4f68>
 8011982:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011986:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801198a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801198e:	e7a0      	b.n	80118d2 <kalman_3gyro.constprop.0+0x4ffa>
 8011990:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011994:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011998:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 801199c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80119a0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80119a4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80119a8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80119ac:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 80119b0:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 80119b4:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 80119b8:	f7fc bf03 	b.w	800e7c2 <kalman_3gyro.constprop.0+0x1eea>
 80119bc:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011844 <kalman_3gyro.constprop.0+0x4f6c>
 80119c0:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011848 <kalman_3gyro.constprop.0+0x4f70>
 80119c4:	ac33      	add	r4, sp, #204	; 0xcc
 80119c6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ca:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 80119ce:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 80119d2:	eef0 7a66 	vmov.f32	s15, s13
 80119d6:	3001      	adds	r0, #1
 80119d8:	461a      	mov	r2, r3
 80119da:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 80119de:	320c      	adds	r2, #12
 80119e0:	428a      	cmp	r2, r1
 80119e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80119e6:	d1f8      	bne.n	80119da <kalman_3gyro.constprop.0+0x5102>
 80119e8:	ee27 7a84 	vmul.f32	s14, s15, s8
 80119ec:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80119f0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80119f4:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 80119f8:	330c      	adds	r3, #12
 80119fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119fe:	428b      	cmp	r3, r1
 8011a00:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011a04:	d1f6      	bne.n	80119f4 <kalman_3gyro.constprop.0+0x511c>
 8011a06:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011a0a:	2802      	cmp	r0, #2
 8011a0c:	f103 0104 	add.w	r1, r3, #4
 8011a10:	ece4 6a01 	vstmia	r4!, {s13}
 8011a14:	d1d9      	bne.n	80119ca <kalman_3gyro.constprop.0+0x50f2>
 8011a16:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011a1a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011a1e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011a22:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011a26:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011a2a:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a32:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011a36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a3a:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011a3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a46:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011a4a:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011a4e:	f57d aa62 	bpl.w	800ef16 <kalman_3gyro.constprop.0+0x263e>
 8011a52:	2200      	movs	r2, #0
 8011a54:	9b01      	ldr	r3, [sp, #4]
 8011a56:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011a5a:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011a5e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011a62:	f88b 2001 	strb.w	r2, [fp, #1]
 8011a66:	f7fd ba7a 	b.w	800ef5e <kalman_3gyro.constprop.0+0x2686>
 8011a6a:	9b08      	ldr	r3, [sp, #32]
 8011a6c:	6999      	ldr	r1, [r3, #24]
 8011a6e:	69da      	ldr	r2, [r3, #28]
 8011a70:	6a1b      	ldr	r3, [r3, #32]
 8011a72:	9181      	str	r1, [sp, #516]	; 0x204
 8011a74:	9282      	str	r2, [sp, #520]	; 0x208
 8011a76:	9383      	str	r3, [sp, #524]	; 0x20c
 8011a78:	e73a      	b.n	80118f0 <kalman_3gyro.constprop.0+0x5018>
 8011a7a:	bf00      	nop
 8011a7c:	0000      	movs	r0, r0
	...

08011a80 <iNemoEngine_API_Update>:
 8011a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a84:	ed2d 8b0c 	vpush	{d8-d13}
 8011a88:	4604      	mov	r4, r0
 8011a8a:	b0c1      	sub	sp, #260	; 0x104
 8011a8c:	460d      	mov	r5, r1
 8011a8e:	4617      	mov	r7, r2
 8011a90:	eeb0 8a40 	vmov.f32	s16, s0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 8253 	beq.w	8011f40 <iNemoEngine_API_Update+0x4c0>
 8011a9a:	461e      	mov	r6, r3
 8011a9c:	463b      	mov	r3, r7
 8011a9e:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011aa2:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011aa6:	6859      	ldr	r1, [r3, #4]
 8011aa8:	689a      	ldr	r2, [r3, #8]
 8011aaa:	ab33      	add	r3, sp, #204	; 0xcc
 8011aac:	c307      	stmia	r3!, {r0, r1, r2}
 8011aae:	6879      	ldr	r1, [r7, #4]
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	6838      	ldr	r0, [r7, #0]
 8011ab4:	ab30      	add	r3, sp, #192	; 0xc0
 8011ab6:	c307      	stmia	r3!, {r0, r1, r2}
 8011ab8:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011abc:	6879      	ldr	r1, [r7, #4]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	ab36      	add	r3, sp, #216	; 0xd8
 8011ac2:	c307      	stmia	r3!, {r0, r1, r2}
 8011ac4:	f1bc 0f00 	cmp.w	ip, #0
 8011ac8:	d005      	beq.n	8011ad6 <iNemoEngine_API_Update+0x56>
 8011aca:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011ace:	7923      	ldrb	r3, [r4, #4]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	f080 829b 	bcs.w	801200c <iNemoEngine_API_Update+0x58c>
 8011ad6:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011ada:	f10d 0a14 	add.w	sl, sp, #20
 8011ade:	2300      	movs	r3, #0
 8011ae0:	4649      	mov	r1, r9
 8011ae2:	4650      	mov	r0, sl
 8011ae4:	aa33      	add	r2, sp, #204	; 0xcc
 8011ae6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011aea:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011aee:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011af2:	f7f9 fb63 	bl	800b1bc <rotVect>
 8011af6:	aa36      	add	r2, sp, #216	; 0xd8
 8011af8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011afc:	a808      	add	r0, sp, #32
 8011afe:	f7f9 fb5d 	bl	800b1bc <rotVect>
 8011b02:	aa30      	add	r2, sp, #192	; 0xc0
 8011b04:	4640      	mov	r0, r8
 8011b06:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011b0a:	f7f9 fb57 	bl	800b1bc <rotVect>
 8011b0e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011b12:	b923      	cbnz	r3, 8011b1e <iNemoEngine_API_Update+0x9e>
 8011b14:	4b8c      	ldr	r3, [pc, #560]	; (8011d48 <iNemoEngine_API_Update+0x2c8>)
 8011b16:	930c      	str	r3, [sp, #48]	; 0x30
 8011b18:	2200      	movs	r2, #0
 8011b1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011b1c:	930d      	str	r3, [sp, #52]	; 0x34
 8011b1e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011b22:	2f09      	cmp	r7, #9
 8011b24:	d851      	bhi.n	8011bca <iNemoEngine_API_Update+0x14a>
 8011b26:	ed9d ba06 	vldr	s22, [sp, #24]
 8011b2a:	eddd ba05 	vldr	s23, [sp, #20]
 8011b2e:	eddd aa07 	vldr	s21, [sp, #28]
 8011b32:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011b36:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011b3a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011b3e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011b42:	ee17 0a90 	vmov	r0, s15
 8011b46:	f7ee fcff 	bl	8000548 <__aeabi_f2d>
 8011b4a:	ec41 0b10 	vmov	d0, r0, r1
 8011b4e:	f003 fecd 	bl	80158ec <sqrt>
 8011b52:	ec51 0b10 	vmov	r0, r1, d0
 8011b56:	f7ef f827 	bl	8000ba8 <__aeabi_d2f>
 8011b5a:	ee07 0a90 	vmov	s15, r0
 8011b5e:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011b62:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011b66:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011b6a:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011b6e:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011b72:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011b76:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011b7a:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011b7e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011b82:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011b86:	ee17 0a90 	vmov	r0, s15
 8011b8a:	edcd ba05 	vstr	s23, [sp, #20]
 8011b8e:	ed8d ba06 	vstr	s22, [sp, #24]
 8011b92:	edcd aa07 	vstr	s21, [sp, #28]
 8011b96:	f7ee fcd7 	bl	8000548 <__aeabi_f2d>
 8011b9a:	ec41 0b10 	vmov	d0, r0, r1
 8011b9e:	f003 fea5 	bl	80158ec <sqrt>
 8011ba2:	ec51 0b10 	vmov	r0, r1, d0
 8011ba6:	f7ee ffff 	bl	8000ba8 <__aeabi_d2f>
 8011baa:	ee07 0a90 	vmov	s15, r0
 8011bae:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011bb2:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011bb6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011bba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011bbe:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011bc2:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011bc6:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011bca:	7923      	ldrb	r3, [r4, #4]
 8011bcc:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	f080 80dd 	bcs.w	8011d90 <iNemoEngine_API_Update+0x310>
 8011bd6:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011bda:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011bde:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011be2:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011be6:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011bea:	3701      	adds	r7, #1
 8011bec:	aa33      	add	r2, sp, #204	; 0xcc
 8011bee:	4649      	mov	r1, r9
 8011bf0:	4640      	mov	r0, r8
 8011bf2:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011bf6:	9303      	str	r3, [sp, #12]
 8011bf8:	f7f9 fae0 	bl	800b1bc <rotVect>
 8011bfc:	9b03      	ldr	r3, [sp, #12]
 8011bfe:	f8db 1000 	ldr.w	r1, [fp]
 8011c02:	6818      	ldr	r0, [r3, #0]
 8011c04:	f8da 2000 	ldr.w	r2, [sl]
 8011c08:	6833      	ldr	r3, [r6, #0]
 8011c0a:	61ab      	str	r3, [r5, #24]
 8011c0c:	60e8      	str	r0, [r5, #12]
 8011c0e:	6129      	str	r1, [r5, #16]
 8011c10:	616a      	str	r2, [r5, #20]
 8011c12:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011c16:	9301      	str	r3, [sp, #4]
 8011c18:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011c1c:	4641      	mov	r1, r8
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	462a      	mov	r2, r5
 8011c22:	f105 031c 	add.w	r3, r5, #28
 8011c26:	f105 000c 	add.w	r0, r5, #12
 8011c2a:	f7fa fd85 	bl	800c738 <output_update>
 8011c2e:	ed95 8a00 	vldr	s16, [r5]
 8011c32:	edd5 9a01 	vldr	s19, [r5, #4]
 8011c36:	eeb0 0a48 	vmov.f32	s0, s16
 8011c3a:	f003 fdeb 	bl	8015814 <sinf>
 8011c3e:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011d4c <iNemoEngine_API_Update+0x2cc>
 8011c42:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011d50 <iNemoEngine_API_Update+0x2d0>
 8011c46:	ee60 8a00 	vmul.f32	s17, s0, s0
 8011c4a:	eef0 6ae9 	vabs.f32	s13, s19
 8011c4e:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8011c52:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5a:	eef0 8a67 	vmov.f32	s17, s15
 8011c5e:	d56e      	bpl.n	8011d3e <iNemoEngine_API_Update+0x2be>
 8011c60:	eeb0 0a69 	vmov.f32	s0, s19
 8011c64:	f003 fe18 	bl	8015898 <tanf>
 8011c68:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011c6c:	eea0 9a28 	vfma.f32	s18, s0, s17
 8011c70:	eef1 7ac9 	vsqrt.f32	s15, s18
 8011c74:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011d54 <iNemoEngine_API_Update+0x2d4>
 8011c78:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011d68 <iNemoEngine_API_Update+0x2e8>
 8011c7c:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8011c80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011c84:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c8c:	bf88      	it	hi
 8011c8e:	eef0 7a66 	vmovhi.f32	s15, s13
 8011c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9a:	bfb8      	it	lt
 8011c9c:	eef0 7a47 	vmovlt.f32	s15, s14
 8011ca0:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8011ca4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011ca8:	4c2b      	ldr	r4, [pc, #172]	; (8011d58 <iNemoEngine_API_Update+0x2d8>)
 8011caa:	bba3      	cbnz	r3, 8011d16 <iNemoEngine_API_Update+0x296>
 8011cac:	6820      	ldr	r0, [r4, #0]
 8011cae:	edd5 0a08 	vldr	s1, [r5, #32]
 8011cb2:	ed95 0a07 	vldr	s0, [r5, #28]
 8011cb6:	edd5 9a03 	vldr	s19, [r5, #12]
 8011cba:	ed95 aa04 	vldr	s20, [r5, #16]
 8011cbe:	ed95 9a05 	vldr	s18, [r5, #20]
 8011cc2:	edd5 8a06 	vldr	s17, [r5, #24]
 8011cc6:	f7f9 fb4b 	bl	800b360 <findDirection>
 8011cca:	6020      	str	r0, [r4, #0]
 8011ccc:	2805      	cmp	r0, #5
 8011cce:	f200 833d 	bhi.w	801234c <iNemoEngine_API_Update+0x8cc>
 8011cd2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011cd6:	000a      	.short	0x000a
 8011cd8:	00060137 	.word	0x00060137
 8011cdc:	00060169 	.word	0x00060169
 8011ce0:	000a      	.short	0x000a
 8011ce2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011d5c <iNemoEngine_API_Update+0x2dc>
 8011ce6:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011cea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011d8c <iNemoEngine_API_Update+0x30c>
 8011cee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf6:	bfa8      	it	ge
 8011cf8:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8011cfc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d04:	f100 8111 	bmi.w	8011f2a <iNemoEngine_API_Update+0x4aa>
 8011d08:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011d0c:	b041      	add	sp, #260	; 0x104
 8011d0e:	ecbd 8b0c 	vpop	{d8-d13}
 8011d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d16:	ed95 9a05 	vldr	s18, [r5, #20]
 8011d1a:	6820      	ldr	r0, [r4, #0]
 8011d1c:	edd5 0a07 	vldr	s1, [r5, #28]
 8011d20:	ed95 0a08 	vldr	s0, [r5, #32]
 8011d24:	edd5 9a04 	vldr	s19, [r5, #16]
 8011d28:	ed95 aa03 	vldr	s20, [r5, #12]
 8011d2c:	edd5 8a06 	vldr	s17, [r5, #24]
 8011d30:	eeb1 1a41 	vneg.f32	s2, s2
 8011d34:	eeb1 9a49 	vneg.f32	s18, s18
 8011d38:	f7f9 fb12 	bl	800b360 <findDirection>
 8011d3c:	e7c5      	b.n	8011cca <iNemoEngine_API_Update+0x24a>
 8011d3e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011d60 <iNemoEngine_API_Update+0x2e0>
 8011d42:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8011d46:	e793      	b.n	8011c70 <iNemoEngine_API_Update+0x1f0>
 8011d48:	3f333333 	.word	0x3f333333
 8011d4c:	00000000 	.word	0x00000000
 8011d50:	3fbc430e 	.word	0x3fbc430e
 8011d54:	40490fdb 	.word	0x40490fdb
 8011d58:	200002e0 	.word	0x200002e0
 8011d5c:	43340000 	.word	0x43340000
 8011d60:	42c6ab07 	.word	0x42c6ab07
 8011d64:	3c03126f 	.word	0x3c03126f
 8011d68:	3c8efa35 	.word	0x3c8efa35
 8011d6c:	3e4ccccd 	.word	0x3e4ccccd
 8011d70:	3fb50481 	.word	0x3fb50481
 8011d74:	3ed93dd9 	.word	0x3ed93dd9
 8011d78:	3b656042 	.word	0x3b656042
 8011d7c:	42c80000 	.word	0x42c80000
 8011d80:	3a83126f 	.word	0x3a83126f
 8011d84:	3d4ccccd 	.word	0x3d4ccccd
 8011d88:	3f333333 	.word	0x3f333333
 8011d8c:	43b40000 	.word	0x43b40000
 8011d90:	ee07 3a90 	vmov	s15, r3
 8011d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d98:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8011d64 <iNemoEngine_API_Update+0x2e4>
 8011d9c:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8011d68 <iNemoEngine_API_Update+0x2e8>
 8011da0:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8011d78 <iNemoEngine_API_Update+0x2f8>
 8011da4:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8011d74 <iNemoEngine_API_Update+0x2f4>
 8011da8:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8011d70 <iNemoEngine_API_Update+0x2f0>
 8011dac:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8011d6c <iNemoEngine_API_Update+0x2ec>
 8011db0:	ee27 1a88 	vmul.f32	s2, s15, s16
 8011db4:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8011db8:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8011dbc:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8011dc0:	2700      	movs	r7, #0
 8011dc2:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8011dc6:	f04f 0c00 	mov.w	ip, #0
 8011dca:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8011dce:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8011dd2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8011dd6:	edd3 5a00 	vldr	s11, [r3]
 8011dda:	f8c3 c000 	str.w	ip, [r3]
 8011dde:	eef1 7ac5 	vsqrt.f32	s15, s10
 8011de2:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011de6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8011dea:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011dee:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011df2:	edd7 4a00 	vldr	s9, [r7]
 8011df6:	f8c7 c000 	str.w	ip, [r7]
 8011dfa:	ed93 5a00 	vldr	s10, [r3]
 8011dfe:	f8c3 c000 	str.w	ip, [r3]
 8011e02:	7963      	ldrb	r3, [r4, #5]
 8011e04:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011e08:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011e0c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8011e16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011e1a:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011e1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011e22:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8011e26:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8011e2a:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8011e2e:	f000 812e 	beq.w	801208e <iNemoEngine_API_Update+0x60e>
 8011e32:	2b02      	cmp	r3, #2
 8011e34:	f000 8122 	beq.w	801207c <iNemoEngine_API_Update+0x5fc>
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f000 80ef 	beq.w	801201c <iNemoEngine_API_Update+0x59c>
 8011e3e:	edd4 0a05 	vldr	s1, [r4, #20]
 8011e42:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8011d7c <iNemoEngine_API_Update+0x2fc>
 8011e46:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8011d80 <iNemoEngine_API_Update+0x300>
 8011e4a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011e4e:	ee60 0a85 	vmul.f32	s1, s1, s10
 8011e52:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011e56:	8863      	ldrh	r3, [r4, #2]
 8011e58:	1e5a      	subs	r2, r3, #1
 8011e5a:	2a12      	cmp	r2, #18
 8011e5c:	f200 80e7 	bhi.w	801202e <iNemoEngine_API_Update+0x5ae>
 8011e60:	3301      	adds	r3, #1
 8011e62:	b21a      	sxth	r2, r3
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	2b03      	cmp	r3, #3
 8011e68:	8062      	strh	r2, [r4, #2]
 8011e6a:	f240 8115 	bls.w	8012098 <iNemoEngine_API_Update+0x618>
 8011e6e:	ee05 2a90 	vmov	s11, r2
 8011e72:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8011d84 <iNemoEngine_API_Update+0x304>
 8011e76:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011e7a:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011e7e:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011e82:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8011e86:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8011e8a:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8011d88 <iNemoEngine_API_Update+0x308>
 8011e8e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011e92:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011e96:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011e9a:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011e9e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011ea2:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8011ea6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8011eaa:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8011eae:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011eb2:	aa1a      	add	r2, sp, #104	; 0x68
 8011eb4:	af16      	add	r7, sp, #88	; 0x58
 8011eb6:	e9cd 7200 	strd	r7, r2, [sp]
 8011eba:	ab12      	add	r3, sp, #72	; 0x48
 8011ebc:	aa1e      	add	r2, sp, #120	; 0x78
 8011ebe:	4641      	mov	r1, r8
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f7fa fd09 	bl	800c8d8 <kalman_3gyro.constprop.0>
 8011ec6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011ec8:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8011ecc:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8011ed0:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8011ed4:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8011ed8:	f8c7 a000 	str.w	sl, [r7]
 8011edc:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8011ee0:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011ee4:	f8c7 e000 	str.w	lr, [r7]
 8011ee8:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8011eec:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011ef0:	f8c7 c000 	str.w	ip, [r7]
 8011ef4:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011ef8:	6030      	str	r0, [r6, #0]
 8011efa:	60f3      	str	r3, [r6, #12]
 8011efc:	6071      	str	r1, [r6, #4]
 8011efe:	60b2      	str	r2, [r6, #8]
 8011f00:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011f04:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8011f08:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011f0c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011f0e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8011f12:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011f16:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011f1a:	edc3 7a00 	vstr	s15, [r3]
 8011f1e:	f8cb e000 	str.w	lr, [fp]
 8011f22:	f8ca c000 	str.w	ip, [sl]
 8011f26:	6030      	str	r0, [r6, #0]
 8011f28:	e65f      	b.n	8011bea <iNemoEngine_API_Update+0x16a>
 8011f2a:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8011d8c <iNemoEngine_API_Update+0x30c>
 8011f2e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011f32:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011f36:	b041      	add	sp, #260	; 0x104
 8011f38:	ecbd 8b0c 	vpop	{d8-d13}
 8011f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f40:	ae0e      	add	r6, sp, #56	; 0x38
 8011f42:	e5ab      	b.n	8011a9c <iNemoEngine_API_Update+0x1c>
 8011f44:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011f48:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011f4c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011f50:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011f54:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011f58:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011f5c:	ee17 0a90 	vmov	r0, s15
 8011f60:	f7ee faf2 	bl	8000548 <__aeabi_f2d>
 8011f64:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	ee17 0a90 	vmov	r0, s15
 8011f70:	ec43 2b18 	vmov	d8, r2, r3
 8011f74:	f7ee fae8 	bl	8000548 <__aeabi_f2d>
 8011f78:	eeb0 1a48 	vmov.f32	s2, s16
 8011f7c:	eef0 1a68 	vmov.f32	s3, s17
 8011f80:	ec41 0b10 	vmov	d0, r0, r1
 8011f84:	f003 fcb0 	bl	80158e8 <atan2>
 8011f88:	a3f3      	add	r3, pc, #972	; (adr r3, 8012358 <iNemoEngine_API_Update+0x8d8>)
 8011f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8e:	ec51 0b10 	vmov	r0, r1, d0
 8011f92:	f7ee fb31 	bl	80005f8 <__aeabi_dmul>
 8011f96:	4bf2      	ldr	r3, [pc, #968]	; (8012360 <iNemoEngine_API_Update+0x8e0>)
 8011f98:	2200      	movs	r2, #0
 8011f9a:	f7ee f975 	bl	8000288 <__aeabi_dsub>
 8011f9e:	f7ee fe03 	bl	8000ba8 <__aeabi_d2f>
 8011fa2:	ee08 0a10 	vmov	s16, r0
 8011fa6:	e6a0      	b.n	8011cea <iNemoEngine_API_Update+0x26a>
 8011fa8:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011fac:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011fb0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011fb4:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011fb8:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011fbc:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011fc0:	ee17 0a90 	vmov	r0, s15
 8011fc4:	f7ee fac0 	bl	8000548 <__aeabi_f2d>
 8011fc8:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011fcc:	4602      	mov	r2, r0
 8011fce:	460b      	mov	r3, r1
 8011fd0:	ee17 0a90 	vmov	r0, s15
 8011fd4:	ec43 2b18 	vmov	d8, r2, r3
 8011fd8:	f7ee fab6 	bl	8000548 <__aeabi_f2d>
 8011fdc:	eeb0 1a48 	vmov.f32	s2, s16
 8011fe0:	eef0 1a68 	vmov.f32	s3, s17
 8011fe4:	ec41 0b10 	vmov	d0, r0, r1
 8011fe8:	f003 fc7e 	bl	80158e8 <atan2>
 8011fec:	a3da      	add	r3, pc, #872	; (adr r3, 8012358 <iNemoEngine_API_Update+0x8d8>)
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	ec51 0b10 	vmov	r0, r1, d0
 8011ff6:	f7ee faff 	bl	80005f8 <__aeabi_dmul>
 8011ffa:	4bd9      	ldr	r3, [pc, #868]	; (8012360 <iNemoEngine_API_Update+0x8e0>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	f7ee f945 	bl	800028c <__adddf3>
 8012002:	f7ee fdd1 	bl	8000ba8 <__aeabi_d2f>
 8012006:	ee08 0a10 	vmov	s16, r0
 801200a:	e66e      	b.n	8011cea <iNemoEngine_API_Update+0x26a>
 801200c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8012010:	2b00      	cmp	r3, #0
 8012012:	dd44      	ble.n	801209e <iNemoEngine_API_Update+0x61e>
 8012014:	3b01      	subs	r3, #1
 8012016:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 801201a:	e55c      	b.n	8011ad6 <iNemoEngine_API_Update+0x56>
 801201c:	8863      	ldrh	r3, [r4, #2]
 801201e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8012364 <iNemoEngine_API_Update+0x8e4>
 8012022:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8012368 <iNemoEngine_API_Update+0x8e8>
 8012026:	1e5a      	subs	r2, r3, #1
 8012028:	2a12      	cmp	r2, #18
 801202a:	f67f af19 	bls.w	8011e60 <iNemoEngine_API_Update+0x3e0>
 801202e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8012032:	eddf 2ace 	vldr	s5, [pc, #824]	; 801236c <iNemoEngine_API_Update+0x8ec>
 8012036:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 801203a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801203e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8012042:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8012046:	eec3 4a84 	vdiv.f32	s9, s7, s8
 801204a:	2300      	movs	r3, #0
 801204c:	8063      	strh	r3, [r4, #2]
 801204e:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8012052:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8012056:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8012370 <iNemoEngine_API_Update+0x8f0>
 801205a:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 801205e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8012062:	ee25 6a86 	vmul.f32	s12, s11, s12
 8012066:	ee27 7a03 	vmul.f32	s14, s14, s6
 801206a:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 801206e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8012072:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8012076:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801207a:	e71a      	b.n	8011eb2 <iNemoEngine_API_Update+0x432>
 801207c:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8012080:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012084:	edd4 0a05 	vldr	s1, [r4, #20]
 8012088:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8012374 <iNemoEngine_API_Update+0x8f4>
 801208c:	e6e3      	b.n	8011e56 <iNemoEngine_API_Update+0x3d6>
 801208e:	edd4 0a05 	vldr	s1, [r4, #20]
 8012092:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8012378 <iNemoEngine_API_Update+0x8f8>
 8012096:	e6de      	b.n	8011e56 <iNemoEngine_API_Update+0x3d6>
 8012098:	eddf 5ab8 	vldr	s11, [pc, #736]	; 801237c <iNemoEngine_API_Update+0x8fc>
 801209c:	e6ef      	b.n	8011e7e <iNemoEngine_API_Update+0x3fe>
 801209e:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 80120a2:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80120a6:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 80120aa:	ed97 5a00 	vldr	s10, [r7]
 80120ae:	ed92 da00 	vldr	s26, [r2]
 80120b2:	ed93 6a00 	vldr	s12, [r3]
 80120b6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8012364 <iNemoEngine_API_Update+0x8e4>
 80120ba:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 80120be:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 80120c2:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 80120c6:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 80120ca:	ed91 3a00 	vldr	s6, [r1]
 80120ce:	ed92 1a00 	vldr	s2, [r2]
 80120d2:	ed97 7a00 	vldr	s14, [r7]
 80120d6:	edd3 3a00 	vldr	s7, [r3]
 80120da:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 80120de:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 80120e2:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 80120e6:	ed91 ba00 	vldr	s22, [r1]
 80120ea:	edd0 6a00 	vldr	s13, [r0]
 80120ee:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 80120f2:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 80120f6:	edd1 aa00 	vldr	s21, [r1]
 80120fa:	ed92 2a00 	vldr	s4, [r2]
 80120fe:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8012102:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8012106:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 801210a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 801210e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8012112:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8012116:	edd0 7a00 	vldr	s15, [r0]
 801211a:	edd2 1a00 	vldr	s3, [r2]
 801211e:	ed93 ca00 	vldr	s24, [r3]
 8012122:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8012126:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 801212a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 801212e:	ed91 5a00 	vldr	s10, [r1]
 8012132:	edd0 5a00 	vldr	s11, [r0]
 8012136:	edd7 9a00 	vldr	s19, [r7]
 801213a:	f204 6024 	addw	r0, r4, #1572	; 0x624
 801213e:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8012142:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8012146:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 801214a:	edd0 2a00 	vldr	s5, [r0]
 801214e:	edd3 0a00 	vldr	s1, [r3]
 8012152:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8012156:	ee37 7a27 	vadd.f32	s14, s14, s15
 801215a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 801215e:	edd7 7a00 	vldr	s15, [r7]
 8012162:	edd0 5a00 	vldr	s11, [r0]
 8012166:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 801216a:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 801216e:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 8012172:	ed93 6a00 	vldr	s12, [r3]
 8012176:	edda ba00 	vldr	s23, [sl]
 801217a:	ed99 5a00 	vldr	s10, [r9]
 801217e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8012182:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 8012186:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 801218a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 801218e:	eed7 5a84 	vfnms.f32	s11, s15, s8
 8012192:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 8012196:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 801219a:	eddc 4a00 	vldr	s9, [ip]
 801219e:	edd3 7a00 	vldr	s15, [r3]
 80121a2:	ed98 1a00 	vldr	s2, [r8]
 80121a6:	edde 8a00 	vldr	s17, [lr]
 80121aa:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 80121ae:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 80121b2:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 80121b6:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 80121ba:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 80121be:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 80121c2:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 80121c6:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 80121ca:	ed9c aa00 	vldr	s20, [ip]
 80121ce:	eeed 6a03 	vfma.f32	s13, s26, s6
 80121d2:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 80121d6:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 80121da:	ed92 da00 	vldr	s26, [r2]
 80121de:	eeab 7a03 	vfma.f32	s14, s22, s6
 80121e2:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 80121e6:	ed91 ba00 	vldr	s22, [r1]
 80121ea:	eef0 ca61 	vmov.f32	s25, s3
 80121ee:	eddb 1a00 	vldr	s3, [fp]
 80121f2:	edd3 ba00 	vldr	s23, [r3]
 80121f6:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 80121fa:	eedb 7a84 	vfnms.f32	s15, s23, s8
 80121fe:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8012202:	1c53      	adds	r3, r2, #1
 8012204:	eeea 3a83 	vfma.f32	s7, s21, s6
 8012208:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 801220c:	edd8 aa00 	vldr	s21, [r8]
 8012210:	eee6 1a03 	vfma.f32	s3, s12, s6
 8012214:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8012218:	ed9e 6a00 	vldr	s12, [lr]
 801221c:	edd7 aa00 	vldr	s21, [r7]
 8012220:	eee6 7a03 	vfma.f32	s15, s12, s6
 8012224:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8012228:	ed9c 6a00 	vldr	s12, [ip]
 801222c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8012230:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8012234:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8012238:	ee2a 4a00 	vmul.f32	s8, s20, s0
 801223c:	ee22 2a00 	vmul.f32	s4, s4, s0
 8012240:	ee62 2a80 	vmul.f32	s5, s5, s0
 8012244:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8012248:	ed90 0a00 	vldr	s0, [r0]
 801224c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012250:	ee36 6a00 	vadd.f32	s12, s12, s0
 8012254:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8012258:	ed91 0a00 	vldr	s0, [r1]
 801225c:	ee35 5a28 	vadd.f32	s10, s10, s17
 8012260:	ee66 6a82 	vmul.f32	s13, s13, s4
 8012264:	ee22 7a87 	vmul.f32	s14, s5, s14
 8012268:	ee64 5a25 	vmul.f32	s11, s8, s11
 801226c:	eee0 4a83 	vfma.f32	s9, s1, s6
 8012270:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8012274:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8012278:	eea1 5a03 	vfma.f32	s10, s2, s6
 801227c:	eea0 6a03 	vfma.f32	s12, s0, s6
 8012280:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012284:	ee63 3a82 	vmul.f32	s7, s7, s4
 8012288:	ee27 7a07 	vmul.f32	s14, s14, s14
 801228c:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8012290:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012294:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8012298:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801229c:	eea1 7aa1 	vfma.f32	s14, s3, s3
 80122a0:	ee24 6a06 	vmul.f32	s12, s8, s12
 80122a4:	ee62 4a24 	vmul.f32	s9, s4, s9
 80122a8:	ee22 5a85 	vmul.f32	s10, s5, s10
 80122ac:	eee4 6aa4 	vfma.f32	s13, s9, s9
 80122b0:	eea5 7a05 	vfma.f32	s14, s10, s10
 80122b4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80122b8:	eeb1 6ae6 	vsqrt.f32	s12, s13
 80122bc:	eef1 6ac7 	vsqrt.f32	s13, s14
 80122c0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80122c4:	ee07 3a90 	vmov	s15, r3
 80122c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80122d0:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 80122d4:	b21b      	sxth	r3, r3
 80122d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80122da:	ee07 2a90 	vmov	s15, r2
 80122de:	ed90 4a00 	vldr	s8, [r0]
 80122e2:	edd1 4a00 	vldr	s9, [r1]
 80122e6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80122ea:	edd7 7a00 	vldr	s15, [r7]
 80122ee:	eee5 6a84 	vfma.f32	s13, s11, s8
 80122f2:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80122f6:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80122fa:	ee66 7a05 	vmul.f32	s15, s12, s10
 80122fe:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012302:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012306:	edc7 7a00 	vstr	s15, [r7]
 801230a:	edc0 6a00 	vstr	s13, [r0]
 801230e:	ed81 7a00 	vstr	s14, [r1]
 8012312:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8012316:	f47f abde 	bne.w	8011ad6 <iNemoEngine_API_Update+0x56>
 801231a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801231e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012322:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012326:	ee67 7a86 	vmul.f32	s15, s15, s12
 801232a:	2300      	movs	r3, #0
 801232c:	2200      	movs	r2, #0
 801232e:	edc4 6a07 	vstr	s13, [r4, #28]
 8012332:	ed84 7a08 	vstr	s14, [r4, #32]
 8012336:	edc4 7a06 	vstr	s15, [r4, #24]
 801233a:	603b      	str	r3, [r7, #0]
 801233c:	6003      	str	r3, [r0, #0]
 801233e:	600b      	str	r3, [r1, #0]
 8012340:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8012344:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8012348:	f7ff bbc5 	b.w	8011ad6 <iNemoEngine_API_Update+0x56>
 801234c:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012380 <iNemoEngine_API_Update+0x900>
 8012350:	e4da      	b.n	8011d08 <iNemoEngine_API_Update+0x288>
 8012352:	bf00      	nop
 8012354:	f3af 8000 	nop.w
 8012358:	20000000 	.word	0x20000000
 801235c:	404ca5dc 	.word	0x404ca5dc
 8012360:	40568000 	.word	0x40568000
 8012364:	3dcccccd 	.word	0x3dcccccd
 8012368:	3a83126f 	.word	0x3a83126f
 801236c:	358637bd 	.word	0x358637bd
 8012370:	3f333333 	.word	0x3f333333
 8012374:	3727c5ac 	.word	0x3727c5ac
 8012378:	3ac49ba6 	.word	0x3ac49ba6
 801237c:	3e4ccccd 	.word	0x3e4ccccd
 8012380:	00000000 	.word	0x00000000

08012384 <MEMS_getSensorData_I16>:
 8012384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012388:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 801238c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012390:	68c5      	ldr	r5, [r0, #12]
 8012392:	4596      	cmp	lr, r2
 8012394:	fa1f f882 	uxth.w	r8, r2
 8012398:	d94d      	bls.n	8012436 <MEMS_getSensorData_I16+0xb2>
 801239a:	f10e 33ff 	add.w	r3, lr, #4294967295
 801239e:	fb04 5313 	mls	r3, r4, r3, r5
 80123a2:	ebae 0c02 	sub.w	ip, lr, r2
 80123a6:	f8a1 8004 	strh.w	r8, [r1, #4]
 80123aa:	600b      	str	r3, [r1, #0]
 80123ac:	fa5f fc8c 	uxtb.w	ip, ip
 80123b0:	4647      	mov	r7, r8
 80123b2:	f1b8 0f00 	cmp.w	r8, #0
 80123b6:	d017      	beq.n	80123e8 <MEMS_getSensorData_I16+0x64>
 80123b8:	688e      	ldr	r6, [r1, #8]
 80123ba:	6905      	ldr	r5, [r0, #16]
 80123bc:	2300      	movs	r3, #0
 80123be:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 80123c2:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 80123c6:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80123ca:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 80123ce:	f8d4 9002 	ldr.w	r9, [r4, #2]
 80123d2:	f8c1 9002 	str.w	r9, [r1, #2]
 80123d6:	3301      	adds	r3, #1
 80123d8:	88e4      	ldrh	r4, [r4, #6]
 80123da:	80cc      	strh	r4, [r1, #6]
 80123dc:	b2d9      	uxtb	r1, r3
 80123de:	42b9      	cmp	r1, r7
 80123e0:	460b      	mov	r3, r1
 80123e2:	d3ec      	bcc.n	80123be <MEMS_getSensorData_I16+0x3a>
 80123e4:	45c6      	cmp	lr, r8
 80123e6:	d934      	bls.n	8012452 <MEMS_getSensorData_I16+0xce>
 80123e8:	ebae 0308 	sub.w	r3, lr, r8
 80123ec:	b29b      	uxth	r3, r3
 80123ee:	8103      	strh	r3, [r0, #8]
 80123f0:	f1bc 0f00 	cmp.w	ip, #0
 80123f4:	d01d      	beq.n	8012432 <MEMS_getSensorData_I16+0xae>
 80123f6:	6903      	ldr	r3, [r0, #16]
 80123f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80123fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012400:	f103 000a 	add.w	r0, r3, #10
 8012404:	fa5f fc8c 	uxtb.w	ip, ip
 8012408:	3202      	adds	r2, #2
 801240a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 801240e:	3302      	adds	r3, #2
 8012410:	2400      	movs	r4, #0
 8012412:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012416:	f803 1c02 	strb.w	r1, [r3, #-2]
 801241a:	6811      	ldr	r1, [r2, #0]
 801241c:	6019      	str	r1, [r3, #0]
 801241e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012422:	8099      	strh	r1, [r3, #4]
 8012424:	3308      	adds	r3, #8
 8012426:	4283      	cmp	r3, r0
 8012428:	f802 4c02 	strb.w	r4, [r2, #-2]
 801242c:	f102 0208 	add.w	r2, r2, #8
 8012430:	d1ef      	bne.n	8012412 <MEMS_getSensorData_I16+0x8e>
 8012432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012436:	f10e 33ff 	add.w	r3, lr, #4294967295
 801243a:	fb04 5313 	mls	r3, r4, r3, r5
 801243e:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012442:	600b      	str	r3, [r1, #0]
 8012444:	f1be 0f00 	cmp.w	lr, #0
 8012448:	d005      	beq.n	8012456 <MEMS_getSensorData_I16+0xd2>
 801244a:	4677      	mov	r7, lr
 801244c:	f04f 0c00 	mov.w	ip, #0
 8012450:	e7b2      	b.n	80123b8 <MEMS_getSensorData_I16+0x34>
 8012452:	2300      	movs	r3, #0
 8012454:	e7cb      	b.n	80123ee <MEMS_getSensorData_I16+0x6a>
 8012456:	f8a0 e008 	strh.w	lr, [r0, #8]
 801245a:	e7ea      	b.n	8012432 <MEMS_getSensorData_I16+0xae>

0801245c <MEMS_SolveLinearEq>:
 801245c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012460:	ed2d 8b0c 	vpush	{d8-d13}
 8012464:	4617      	mov	r7, r2
 8012466:	2400      	movs	r4, #0
 8012468:	b0a9      	sub	sp, #164	; 0xa4
 801246a:	2200      	movs	r2, #0
 801246c:	601a      	str	r2, [r3, #0]
 801246e:	460d      	mov	r5, r1
 8012470:	2240      	movs	r2, #64	; 0x40
 8012472:	4621      	mov	r1, r4
 8012474:	4680      	mov	r8, r0
 8012476:	603c      	str	r4, [r7, #0]
 8012478:	607c      	str	r4, [r7, #4]
 801247a:	60bc      	str	r4, [r7, #8]
 801247c:	60fc      	str	r4, [r7, #12]
 801247e:	a808      	add	r0, sp, #32
 8012480:	461e      	mov	r6, r3
 8012482:	eeb0 8a40 	vmov.f32	s16, s0
 8012486:	e9cd 4400 	strd	r4, r4, [sp]
 801248a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801248e:	f004 ffa3 	bl	80173d8 <memset>
 8012492:	4621      	mov	r1, r4
 8012494:	a818      	add	r0, sp, #96	; 0x60
 8012496:	2240      	movs	r2, #64	; 0x40
 8012498:	f004 ff9e 	bl	80173d8 <memset>
 801249c:	edd5 2a03 	vldr	s5, [r5, #12]
 80124a0:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012834 <MEMS_SolveLinearEq+0x3d8>
 80124a4:	eef4 2ae7 	vcmpe.f32	s5, s15
 80124a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ac:	d47e      	bmi.n	80125ac <MEMS_SolveLinearEq+0x150>
 80124ae:	f898 1000 	ldrb.w	r1, [r8]
 80124b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80124b6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80124ba:	4291      	cmp	r1, r2
 80124bc:	d07c      	beq.n	80125b8 <MEMS_SolveLinearEq+0x15c>
 80124be:	3301      	adds	r3, #1
 80124c0:	1a58      	subs	r0, r3, r1
 80124c2:	fb90 f3f2 	sdiv	r3, r0, r2
 80124c6:	fb02 0313 	mls	r3, r2, r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	bfb8      	it	lt
 80124ce:	189b      	addlt	r3, r3, r2
 80124d0:	b21b      	sxth	r3, r3
 80124d2:	2900      	cmp	r1, #0
 80124d4:	f000 81d6 	beq.w	8012884 <MEMS_SolveLinearEq+0x428>
 80124d8:	3901      	subs	r1, #1
 80124da:	b2c9      	uxtb	r1, r1
 80124dc:	3101      	adds	r1, #1
 80124de:	edd5 3a00 	vldr	s7, [r5]
 80124e2:	ed95 4a01 	vldr	s8, [r5, #4]
 80124e6:	edd5 4a02 	vldr	s9, [r5, #8]
 80124ea:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80124ee:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012838 <MEMS_SolveLinearEq+0x3dc>
 80124f2:	4419      	add	r1, r3
 80124f4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80124f8:	fb93 f4f2 	sdiv	r4, r3, r2
 80124fc:	fb02 3414 	mls	r4, r2, r4, r3
 8012500:	b2e4      	uxtb	r4, r4
 8012502:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8012506:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 801250a:	ee07 0a90 	vmov	s15, r0
 801250e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012516:	ee06 0a10 	vmov	s12, r0
 801251a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801251e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8012522:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012526:	ee77 6ac4 	vsub.f32	s13, s15, s8
 801252a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801252e:	ee07 0a10 	vmov	s14, r0
 8012532:	ee36 5a63 	vsub.f32	s10, s12, s7
 8012536:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801253a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801253e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8012542:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012546:	ee33 6ac6 	vsub.f32	s12, s7, s12
 801254a:	ee74 aac7 	vsub.f32	s21, s9, s14
 801254e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012552:	ee74 7a67 	vsub.f32	s15, s8, s15
 8012556:	eee7 6a07 	vfma.f32	s13, s14, s14
 801255a:	eef4 6ac2 	vcmpe.f32	s13, s4
 801255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012562:	d531      	bpl.n	80125c8 <MEMS_SolveLinearEq+0x16c>
 8012564:	3301      	adds	r3, #1
 8012566:	4299      	cmp	r1, r3
 8012568:	d1c6      	bne.n	80124f8 <MEMS_SolveLinearEq+0x9c>
 801256a:	eef0 7a65 	vmov.f32	s15, s11
 801256e:	2101      	movs	r1, #1
 8012570:	4608      	mov	r0, r1
 8012572:	2200      	movs	r2, #0
 8012574:	e006      	b.n	8012584 <MEMS_SolveLinearEq+0x128>
 8012576:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801257a:	ac28      	add	r4, sp, #160	; 0xa0
 801257c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012580:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8012584:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012588:	3001      	adds	r0, #1
 801258a:	ac28      	add	r4, sp, #160	; 0xa0
 801258c:	b2c0      	uxtb	r0, r0
 801258e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012592:	2804      	cmp	r0, #4
 8012594:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012598:	4613      	mov	r3, r2
 801259a:	d1ec      	bne.n	8012576 <MEMS_SolveLinearEq+0x11a>
 801259c:	1c48      	adds	r0, r1, #1
 801259e:	b2c0      	uxtb	r0, r0
 80125a0:	2804      	cmp	r0, #4
 80125a2:	d076      	beq.n	8012692 <MEMS_SolveLinearEq+0x236>
 80125a4:	460b      	mov	r3, r1
 80125a6:	460a      	mov	r2, r1
 80125a8:	4601      	mov	r1, r0
 80125aa:	e7e4      	b.n	8012576 <MEMS_SolveLinearEq+0x11a>
 80125ac:	2000      	movs	r0, #0
 80125ae:	b029      	add	sp, #164	; 0xa4
 80125b0:	ecbd 8b0c 	vpop	{d8-d13}
 80125b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125b8:	1c5a      	adds	r2, r3, #1
 80125ba:	fb92 f3f1 	sdiv	r3, r2, r1
 80125be:	fb01 2313 	mls	r3, r1, r3, r2
 80125c2:	b21b      	sxth	r3, r3
 80125c4:	460a      	mov	r2, r1
 80125c6:	e784      	b.n	80124d2 <MEMS_SolveLinearEq+0x76>
 80125c8:	eef1 cae6 	vsqrt.f32	s25, s13
 80125cc:	3301      	adds	r3, #1
 80125ce:	428b      	cmp	r3, r1
 80125d0:	ed9d ca00 	vldr	s24, [sp]
 80125d4:	eddd ba08 	vldr	s23, [sp, #32]
 80125d8:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 80125dc:	ed9d aa01 	vldr	s20, [sp, #4]
 80125e0:	eddd 9a02 	vldr	s19, [sp, #8]
 80125e4:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 80125e8:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 80125ec:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 80125f0:	ed9d 0a03 	vldr	s0, [sp, #12]
 80125f4:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 80125f8:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 80125fc:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012600:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012604:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012608:	ee3d da21 	vadd.f32	s26, s26, s3
 801260c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012614:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012618:	ee72 aaec 	vsub.f32	s21, s5, s25
 801261c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012620:	eea7 ba26 	vfma.f32	s22, s14, s13
 8012624:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012628:	eeaa ca87 	vfma.f32	s24, s21, s14
 801262c:	eee7 ba07 	vfma.f32	s23, s14, s14
 8012630:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8012634:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8012638:	eea7 9aa7 	vfma.f32	s18, s15, s15
 801263c:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8012640:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8012644:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012648:	ee30 6a06 	vadd.f32	s12, s0, s12
 801264c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012650:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012654:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012658:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801265c:	ed8d ca00 	vstr	s24, [sp]
 8012660:	edcd ba08 	vstr	s23, [sp, #32]
 8012664:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8012668:	ed8d aa01 	vstr	s20, [sp, #4]
 801266c:	edcd 9a02 	vstr	s19, [sp, #8]
 8012670:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8012674:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012678:	ed8d 6a03 	vstr	s12, [sp, #12]
 801267c:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012680:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012684:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012688:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 801268c:	f47f af34 	bne.w	80124f8 <MEMS_SolveLinearEq+0x9c>
 8012690:	e76b      	b.n	801256a <MEMS_SolveLinearEq+0x10e>
 8012692:	2240      	movs	r2, #64	; 0x40
 8012694:	2100      	movs	r1, #0
 8012696:	a818      	add	r0, sp, #96	; 0x60
 8012698:	f004 fe9e 	bl	80173d8 <memset>
 801269c:	ab08      	add	r3, sp, #32
 801269e:	ed9f 5a67 	vldr	s10, [pc, #412]	; 801283c <MEMS_SolveLinearEq+0x3e0>
 80126a2:	4618      	mov	r0, r3
 80126a4:	aa18      	add	r2, sp, #96	; 0x60
 80126a6:	2100      	movs	r1, #0
 80126a8:	b24c      	sxtb	r4, r1
 80126aa:	2900      	cmp	r1, #0
 80126ac:	f000 80b5 	beq.w	801281a <MEMS_SolveLinearEq+0x3be>
 80126b0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80126b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80126b8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80126bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c0:	f53f af74 	bmi.w	80125ac <MEMS_SolveLinearEq+0x150>
 80126c4:	ed93 7a00 	vldr	s14, [r3]
 80126c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80126cc:	2c01      	cmp	r4, #1
 80126ce:	edc2 6a00 	vstr	s13, [r2]
 80126d2:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80126d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80126da:	f000 80b5 	beq.w	8012848 <MEMS_SolveLinearEq+0x3ec>
 80126de:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 80126e2:	eeb0 7ac6 	vabs.f32	s14, s12
 80126e6:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80126ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ee:	f53f af5d 	bmi.w	80125ac <MEMS_SolveLinearEq+0x150>
 80126f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80126f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80126fa:	2c02      	cmp	r4, #2
 80126fc:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012700:	edc2 7a01 	vstr	s15, [r2, #4]
 8012704:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012708:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801270c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012710:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012714:	f000 80a7 	beq.w	8012866 <MEMS_SolveLinearEq+0x40a>
 8012718:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 801271c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012720:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012728:	f53f af40 	bmi.w	80125ac <MEMS_SolveLinearEq+0x150>
 801272c:	edd3 5a02 	vldr	s11, [r3, #8]
 8012730:	ed90 6a00 	vldr	s12, [r0]
 8012734:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012738:	eec7 5a24 	vdiv.f32	s11, s14, s9
 801273c:	edc2 5a02 	vstr	s11, [r2, #8]
 8012740:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012744:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012748:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801274c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012750:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012754:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012758:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801275c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012760:	f77f af24 	ble.w	80125ac <MEMS_SolveLinearEq+0x150>
 8012764:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012768:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801276c:	ed82 7a03 	vstr	s14, [r2, #12]
 8012770:	3101      	adds	r1, #1
 8012772:	2904      	cmp	r1, #4
 8012774:	f103 0310 	add.w	r3, r3, #16
 8012778:	f102 0210 	add.w	r2, r2, #16
 801277c:	f100 0014 	add.w	r0, r0, #20
 8012780:	d192      	bne.n	80126a8 <MEMS_SolveLinearEq+0x24c>
 8012782:	466a      	mov	r2, sp
 8012784:	4639      	mov	r1, r7
 8012786:	a818      	add	r0, sp, #96	; 0x60
 8012788:	f7f9 f9f2 	bl	800bb70 <llEvaluate.constprop.0>
 801278c:	4b2c      	ldr	r3, [pc, #176]	; (8012840 <MEMS_SolveLinearEq+0x3e4>)
 801278e:	6033      	str	r3, [r6, #0]
 8012790:	f10d 0910 	add.w	r9, sp, #16
 8012794:	46e8      	mov	r8, sp
 8012796:	f10d 0b0c 	add.w	fp, sp, #12
 801279a:	2400      	movs	r4, #0
 801279c:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80127a0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80127a4:	e9cd 4400 	strd	r4, r4, [sp]
 80127a8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80127ac:	466a      	mov	r2, sp
 80127ae:	f848 ab04 	str.w	sl, [r8], #4
 80127b2:	a904      	add	r1, sp, #16
 80127b4:	a818      	add	r0, sp, #96	; 0x60
 80127b6:	f7f9 f9db 	bl	800bb70 <llEvaluate.constprop.0>
 80127ba:	ecf9 7a01 	vldmia	r9!, {s15}
 80127be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c6:	dd23      	ble.n	8012810 <MEMS_SolveLinearEq+0x3b4>
 80127c8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80127cc:	edd6 7a00 	vldr	s15, [r6]
 80127d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127d8:	bfb8      	it	lt
 80127da:	eef0 7a47 	vmovlt.f32	s15, s14
 80127de:	45c3      	cmp	fp, r8
 80127e0:	edc6 7a00 	vstr	s15, [r6]
 80127e4:	d1de      	bne.n	80127a4 <MEMS_SolveLinearEq+0x348>
 80127e6:	edd5 7a03 	vldr	s15, [r5, #12]
 80127ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80127ee:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80127f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80127f6:	2001      	movs	r0, #1
 80127f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80127fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012800:	bf48      	it	mi
 8012802:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012806:	b029      	add	sp, #164	; 0xa4
 8012808:	ecbd 8b0c 	vpop	{d8-d13}
 801280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012810:	45c3      	cmp	fp, r8
 8012812:	ed86 0a00 	vstr	s0, [r6]
 8012816:	d1c5      	bne.n	80127a4 <MEMS_SolveLinearEq+0x348>
 8012818:	e7e5      	b.n	80127e6 <MEMS_SolveLinearEq+0x38a>
 801281a:	edd0 7a00 	vldr	s15, [r0]
 801281e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012826:	f77f aec1 	ble.w	80125ac <MEMS_SolveLinearEq+0x150>
 801282a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801282e:	ed82 7a00 	vstr	s14, [r2]
 8012832:	e79d      	b.n	8012770 <MEMS_SolveLinearEq+0x314>
 8012834:	3dcccccd 	.word	0x3dcccccd
 8012838:	2b8cbccb 	.word	0x2b8cbccb
 801283c:	358637bd 	.word	0x358637bd
 8012840:	3dcccccd 	.word	0x3dcccccd
 8012844:	00000000 	.word	0x00000000
 8012848:	ed90 7a00 	vldr	s14, [r0]
 801284c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012854:	f77f aeaa 	ble.w	80125ac <MEMS_SolveLinearEq+0x150>
 8012858:	ee77 7a67 	vsub.f32	s15, s14, s15
 801285c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012860:	ed82 7a01 	vstr	s14, [r2, #4]
 8012864:	e784      	b.n	8012770 <MEMS_SolveLinearEq+0x314>
 8012866:	edd0 7a00 	vldr	s15, [r0]
 801286a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012872:	f77f ae9b 	ble.w	80125ac <MEMS_SolveLinearEq+0x150>
 8012876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801287a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801287e:	ed82 7a02 	vstr	s14, [r2, #8]
 8012882:	e775      	b.n	8012770 <MEMS_SolveLinearEq+0x314>
 8012884:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012844 <MEMS_SolveLinearEq+0x3e8>
 8012888:	e671      	b.n	801256e <MEMS_SolveLinearEq+0x112>
 801288a:	bf00      	nop

0801288c <MEMS_EIG3>:
 801288c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012890:	ed90 7a01 	vldr	s14, [r0, #4]
 8012894:	edd0 4a04 	vldr	s9, [r0, #16]
 8012898:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80129e8 <MEMS_EIG3+0x15c>
 801289c:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80128a0:	b510      	push	{r4, lr}
 80128a2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80128a6:	460c      	mov	r4, r1
 80128a8:	ed2d 8b04 	vpush	{d8-d9}
 80128ac:	eee4 7aa4 	vfma.f32	s15, s9, s9
 80128b0:	b08a      	sub	sp, #40	; 0x28
 80128b2:	eef4 7ac6 	vcmpe.f32	s15, s12
 80128b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ba:	d509      	bpl.n	80128d0 <MEMS_EIG3+0x44>
 80128bc:	6803      	ldr	r3, [r0, #0]
 80128be:	600b      	str	r3, [r1, #0]
 80128c0:	68c3      	ldr	r3, [r0, #12]
 80128c2:	604b      	str	r3, [r1, #4]
 80128c4:	6943      	ldr	r3, [r0, #20]
 80128c6:	608b      	str	r3, [r1, #8]
 80128c8:	b00a      	add	sp, #40	; 0x28
 80128ca:	ecbd 8b04 	vpop	{d8-d9}
 80128ce:	bd10      	pop	{r4, pc}
 80128d0:	ed90 4a00 	vldr	s8, [r0]
 80128d4:	edd0 5a03 	vldr	s11, [r0, #12]
 80128d8:	edd0 2a05 	vldr	s5, [r0, #20]
 80128dc:	eddf 9a43 	vldr	s19, [pc, #268]	; 80129ec <MEMS_EIG3+0x160>
 80128e0:	ed9f 6a43 	vldr	s12, [pc, #268]	; 80129f0 <MEMS_EIG3+0x164>
 80128e4:	ee34 8a25 	vadd.f32	s16, s8, s11
 80128e8:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 80128ec:	ee38 8a22 	vadd.f32	s16, s16, s5
 80128f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128f4:	ee28 8a29 	vmul.f32	s16, s16, s19
 80128f8:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 80128fc:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012900:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012904:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012908:	ee72 2ac8 	vsub.f32	s5, s5, s16
 801290c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012910:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012914:	eef0 7a45 	vmov.f32	s15, s10
 8012918:	eee2 7aa2 	vfma.f32	s15, s5, s5
 801291c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012920:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012924:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012928:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 801292c:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012930:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012934:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012938:	ee26 7a07 	vmul.f32	s14, s12, s14
 801293c:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012940:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012944:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012948:	ee66 4a46 	vnmul.f32	s9, s12, s12
 801294c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012950:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012954:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012958:	eee4 7aa2 	vfma.f32	s15, s9, s5
 801295c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012960:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012964:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296c:	d909      	bls.n	8012982 <MEMS_EIG3+0xf6>
 801296e:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012976:	db22      	blt.n	80129be <MEMS_EIG3+0x132>
 8012978:	eeb0 9a40 	vmov.f32	s18, s0
 801297c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80129f4 <MEMS_EIG3+0x168>
 8012980:	e003      	b.n	801298a <MEMS_EIG3+0xfe>
 8012982:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 80129f8 <MEMS_EIG3+0x16c>
 8012986:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801298a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 801298e:	eef0 7a48 	vmov.f32	s15, s16
 8012992:	eeb0 7a48 	vmov.f32	s14, s16
 8012996:	eee8 7a89 	vfma.f32	s15, s17, s18
 801299a:	eea8 7a80 	vfma.f32	s14, s17, s0
 801299e:	edc4 7a00 	vstr	s15, [r4]
 80129a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80129a6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80129aa:	eed8 7a26 	vfnms.f32	s15, s16, s13
 80129ae:	ed84 7a02 	vstr	s14, [r4, #8]
 80129b2:	edc4 7a01 	vstr	s15, [r4, #4]
 80129b6:	b00a      	add	sp, #40	; 0x28
 80129b8:	ecbd 8b04 	vpop	{d8-d9}
 80129bc:	bd10      	pop	{r4, pc}
 80129be:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80129c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80129c6:	f002 ffc5 	bl	8015954 <acosf>
 80129ca:	ee60 9a29 	vmul.f32	s19, s0, s19
 80129ce:	eeb0 0a69 	vmov.f32	s0, s19
 80129d2:	f002 feb9 	bl	8015748 <cosf>
 80129d6:	eeb0 9a40 	vmov.f32	s18, s0
 80129da:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80129fc <MEMS_EIG3+0x170>
 80129de:	ee39 0a80 	vadd.f32	s0, s19, s0
 80129e2:	f002 feb1 	bl	8015748 <cosf>
 80129e6:	e7d0      	b.n	801298a <MEMS_EIG3+0xfe>
 80129e8:	358637bd 	.word	0x358637bd
 80129ec:	3eaaaaab 	.word	0x3eaaaaab
 80129f0:	3e2aaaab 	.word	0x3e2aaaab
 80129f4:	bf000001 	.word	0xbf000001
 80129f8:	3effffff 	.word	0x3effffff
 80129fc:	40060a92 	.word	0x40060a92

08012a00 <MEMS_runMagCal>:
 8012a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a04:	ed2d 8b0a 	vpush	{d8-d12}
 8012a08:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012a0c:	2282      	movs	r2, #130	; 0x82
 8012a0e:	ab36      	add	r3, sp, #216	; 0xd8
 8012a10:	460c      	mov	r4, r1
 8012a12:	9105      	str	r1, [sp, #20]
 8012a14:	4683      	mov	fp, r0
 8012a16:	4608      	mov	r0, r1
 8012a18:	a917      	add	r1, sp, #92	; 0x5c
 8012a1a:	9319      	str	r3, [sp, #100]	; 0x64
 8012a1c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012a20:	f7ff fcb0 	bl	8012384 <MEMS_getSensorData_I16>
 8012a24:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012a28:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012a2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8012a30:	f108 31ff 	add.w	r1, r8, #4294967295
 8012a34:	9106      	str	r1, [sp, #24]
 8012a36:	fb01 2103 	mla	r1, r1, r3, r2
 8012a3a:	9108      	str	r1, [sp, #32]
 8012a3c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012a40:	f1b8 0f00 	cmp.w	r8, #0
 8012a44:	f000 8417 	beq.w	8013276 <MEMS_runMagCal+0x876>
 8012a48:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012a50:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012a54:	fb02 f203 	mul.w	r2, r2, r3
 8012a58:	31a0      	adds	r1, #160	; 0xa0
 8012a5a:	4291      	cmp	r1, r2
 8012a5c:	f080 8411 	bcs.w	8013282 <MEMS_runMagCal+0x882>
 8012a60:	3b00      	subs	r3, #0
 8012a62:	bf18      	it	ne
 8012a64:	2301      	movne	r3, #1
 8012a66:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012a70:	f8cb 200c 	str.w	r2, [fp, #12]
 8012a74:	2300      	movs	r3, #0
 8012a76:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012a7a:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012a7e:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012a82:	22ff      	movs	r2, #255	; 0xff
 8012a84:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012a88:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012a8c:	4cd5      	ldr	r4, [pc, #852]	; (8012de4 <MEMS_runMagCal+0x3e4>)
 8012a8e:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8012df0 <MEMS_runMagCal+0x3f0>
 8012a92:	9b05      	ldr	r3, [sp, #20]
 8012a94:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012a98:	edd3 5a01 	vldr	s11, [r3, #4]
 8012a9c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012aa0:	4652      	mov	r2, sl
 8012aa2:	2a03      	cmp	r2, #3
 8012aa4:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012aa8:	bf28      	it	cs
 8012aaa:	2203      	movcs	r2, #3
 8012aac:	2100      	movs	r1, #0
 8012aae:	9207      	str	r2, [sp, #28]
 8012ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8012ab4:	464b      	mov	r3, r9
 8012ab6:	9402      	str	r4, [sp, #8]
 8012ab8:	4627      	mov	r7, r4
 8012aba:	9503      	str	r5, [sp, #12]
 8012abc:	462e      	mov	r6, r5
 8012abe:	460a      	mov	r2, r1
 8012ac0:	9404      	str	r4, [sp, #16]
 8012ac2:	7818      	ldrb	r0, [r3, #0]
 8012ac4:	3201      	adds	r2, #1
 8012ac6:	b292      	uxth	r2, r2
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	d04b      	beq.n	8012b64 <MEMS_runMagCal+0x164>
 8012acc:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012ad0:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012ad4:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012ad8:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012adc:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012ae0:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012ae4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012ae8:	9c02      	ldr	r4, [sp, #8]
 8012aea:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012aee:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012af2:	ee07 ea90 	vmov	s15, lr
 8012af6:	ee07 ca10 	vmov	s14, ip
 8012afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012afe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b02:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012b06:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012b0a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012b0e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012b12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012b16:	4574      	cmp	r4, lr
 8012b18:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012b1c:	bfb8      	it	lt
 8012b1e:	4674      	movlt	r4, lr
 8012b20:	9402      	str	r4, [sp, #8]
 8012b22:	ee07 0a10 	vmov	s14, r0
 8012b26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b2a:	9c03      	ldr	r4, [sp, #12]
 8012b2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012b30:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012b34:	4574      	cmp	r4, lr
 8012b36:	bfa8      	it	ge
 8012b38:	4674      	movge	r4, lr
 8012b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b3e:	4567      	cmp	r7, ip
 8012b40:	9403      	str	r4, [sp, #12]
 8012b42:	9c04      	ldr	r4, [sp, #16]
 8012b44:	bfb8      	it	lt
 8012b46:	4667      	movlt	r7, ip
 8012b48:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012b4c:	4566      	cmp	r6, ip
 8012b4e:	bfa8      	it	ge
 8012b50:	4666      	movge	r6, ip
 8012b52:	4284      	cmp	r4, r0
 8012b54:	bfb8      	it	lt
 8012b56:	4604      	movlt	r4, r0
 8012b58:	3101      	adds	r1, #1
 8012b5a:	4285      	cmp	r5, r0
 8012b5c:	b249      	sxtb	r1, r1
 8012b5e:	9404      	str	r4, [sp, #16]
 8012b60:	bfa8      	it	ge
 8012b62:	4605      	movge	r5, r0
 8012b64:	9807      	ldr	r0, [sp, #28]
 8012b66:	4282      	cmp	r2, r0
 8012b68:	f103 0308 	add.w	r3, r3, #8
 8012b6c:	d9a9      	bls.n	8012ac2 <MEMS_runMagCal+0xc2>
 8012b6e:	4590      	cmp	r8, r2
 8012b70:	9c04      	ldr	r4, [sp, #16]
 8012b72:	f240 8767 	bls.w	8013a44 <MEMS_runMagCal+0x1044>
 8012b76:	ebaa 0a02 	sub.w	sl, sl, r2
 8012b7a:	fa12 fa8a 	uxtah	sl, r2, sl
 8012b7e:	f109 0308 	add.w	r3, r9, #8
 8012b82:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012b86:	9307      	str	r3, [sp, #28]
 8012b88:	2300      	movs	r3, #0
 8012b8a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012b8e:	9304      	str	r3, [sp, #16]
 8012b90:	7813      	ldrb	r3, [r2, #0]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f000 8096 	beq.w	8012cc4 <MEMS_runMagCal+0x2c4>
 8012b98:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012b9c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012ba0:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012ba4:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012ba8:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012bac:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012bb0:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012bb4:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012bb8:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012bbc:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012bc0:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012bc4:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012bc8:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012bcc:	ebae 0808 	sub.w	r8, lr, r8
 8012bd0:	eba0 000a 	sub.w	r0, r0, sl
 8012bd4:	ee07 ca10 	vmov	s14, ip
 8012bd8:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012bdc:	ee07 0a90 	vmov	s15, r0
 8012be0:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012be4:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012be8:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012bec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bf0:	eba3 030a 	sub.w	r3, r3, sl
 8012bf4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bfc:	ee06 ea90 	vmov	s13, lr
 8012c00:	ebac 0909 	sub.w	r9, ip, r9
 8012c04:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012c08:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012c0c:	eef0 7ae7 	vabs.f32	s15, s15
 8012c10:	ee06 9a90 	vmov	s13, r9
 8012c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c18:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c20:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012c24:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012c28:	eef0 6ae6 	vabs.f32	s13, s13
 8012c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c30:	eba0 0808 	sub.w	r8, r0, r8
 8012c34:	ee06 0a90 	vmov	s13, r0
 8012c38:	eba3 0309 	sub.w	r3, r3, r9
 8012c3c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012c40:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012c44:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012c48:	9b02      	ldr	r3, [sp, #8]
 8012c4a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8012c4e:	4577      	cmp	r7, lr
 8012c50:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012c54:	ee06 8a90 	vmov	s13, r8
 8012c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c5c:	bfb8      	it	lt
 8012c5e:	4677      	movlt	r7, lr
 8012c60:	4576      	cmp	r6, lr
 8012c62:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012c66:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012c6a:	bfa8      	it	ge
 8012c6c:	4676      	movge	r6, lr
 8012c6e:	4563      	cmp	r3, ip
 8012c70:	bfb8      	it	lt
 8012c72:	4663      	movlt	r3, ip
 8012c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c78:	eea5 7a05 	vfma.f32	s14, s10, s10
 8012c7c:	9302      	str	r3, [sp, #8]
 8012c7e:	9b03      	ldr	r3, [sp, #12]
 8012c80:	eef0 6ae6 	vabs.f32	s13, s13
 8012c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c88:	4563      	cmp	r3, ip
 8012c8a:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012c8e:	bfa8      	it	ge
 8012c90:	4663      	movge	r3, ip
 8012c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c96:	4284      	cmp	r4, r0
 8012c98:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012c9c:	bfb8      	it	lt
 8012c9e:	4604      	movlt	r4, r0
 8012ca0:	ee26 7a24 	vmul.f32	s14, s12, s9
 8012ca4:	4285      	cmp	r5, r0
 8012ca6:	bfa8      	it	ge
 8012ca8:	4605      	movge	r5, r0
 8012caa:	9303      	str	r3, [sp, #12]
 8012cac:	ee17 0a90 	vmov	r0, s15
 8012cb0:	9b04      	ldr	r3, [sp, #16]
 8012cb2:	eea7 0a07 	vfma.f32	s0, s14, s14
 8012cb6:	4283      	cmp	r3, r0
 8012cb8:	f101 0101 	add.w	r1, r1, #1
 8012cbc:	bf38      	it	cc
 8012cbe:	4603      	movcc	r3, r0
 8012cc0:	b249      	sxtb	r1, r1
 8012cc2:	9304      	str	r3, [sp, #16]
 8012cc4:	9b07      	ldr	r3, [sp, #28]
 8012cc6:	3208      	adds	r2, #8
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	f47f af61 	bne.w	8012b90 <MEMS_runMagCal+0x190>
 8012cce:	2900      	cmp	r1, #0
 8012cd0:	f000 86b6 	beq.w	8013a40 <MEMS_runMagCal+0x1040>
 8012cd4:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012cd8:	f280 82df 	bge.w	801329a <MEMS_runMagCal+0x89a>
 8012cdc:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012ce0:	f2c0 82db 	blt.w	801329a <MEMS_runMagCal+0x89a>
 8012ce4:	9b02      	ldr	r3, [sp, #8]
 8012ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012cea:	f280 82d6 	bge.w	801329a <MEMS_runMagCal+0x89a>
 8012cee:	9a03      	ldr	r2, [sp, #12]
 8012cf0:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012cf4:	f2c0 82d1 	blt.w	801329a <MEMS_runMagCal+0x89a>
 8012cf8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8012cfc:	f280 82cd 	bge.w	801329a <MEMS_runMagCal+0x89a>
 8012d00:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012d04:	f2c0 82c9 	blt.w	801329a <MEMS_runMagCal+0x89a>
 8012d08:	ee07 1a90 	vmov	s15, r1
 8012d0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012d10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d14:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8012d18:	1bbe      	subs	r6, r7, r6
 8012d1a:	1a9f      	subs	r7, r3, r2
 8012d1c:	42be      	cmp	r6, r7
 8012d1e:	4633      	mov	r3, r6
 8012d20:	eba4 0405 	sub.w	r4, r4, r5
 8012d24:	bfb8      	it	lt
 8012d26:	463b      	movlt	r3, r7
 8012d28:	42a3      	cmp	r3, r4
 8012d2a:	bfb8      	it	lt
 8012d2c:	4623      	movlt	r3, r4
 8012d2e:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8012d32:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012d36:	ee07 3a10 	vmov	s14, r3
 8012d3a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012de8 <MEMS_runMagCal+0x3e8>
 8012d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d46:	ee25 0a80 	vmul.f32	s0, s11, s0
 8012d4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	f100 82a2 	bmi.w	801329a <MEMS_runMagCal+0x89a>
 8012d56:	eddd 7a04 	vldr	s15, [sp, #16]
 8012d5a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8012dec <MEMS_runMagCal+0x3ec>
 8012d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d62:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012d66:	eef4 5ac6 	vcmpe.f32	s11, s12
 8012d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d6e:	f300 8294 	bgt.w	801329a <MEMS_runMagCal+0x89a>
 8012d72:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012d76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012d7a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d82:	f301 81f8 	bgt.w	8014176 <MEMS_runMagCal+0x1776>
 8012d86:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012d8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d96:	f340 8552 	ble.w	801383e <MEMS_runMagCal+0xe3e>
 8012d9a:	ee07 6a90 	vmov	s15, r6
 8012d9e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012da6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dae:	f340 8546 	ble.w	801383e <MEMS_runMagCal+0xe3e>
 8012db2:	ee07 7a90 	vmov	s15, r7
 8012db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dba:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc2:	f140 853c 	bpl.w	801383e <MEMS_runMagCal+0xe3e>
 8012dc6:	ee07 4a90 	vmov	s15, r4
 8012dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dce:	2300      	movs	r3, #0
 8012dd0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dd8:	9303      	str	r3, [sp, #12]
 8012dda:	bf48      	it	mi
 8012ddc:	2301      	movmi	r3, #1
 8012dde:	9307      	str	r3, [sp, #28]
 8012de0:	f000 bd30 	b.w	8013844 <MEMS_runMagCal+0xe44>
 8012de4:	ffff8000 	.word	0xffff8000
 8012de8:	43020000 	.word	0x43020000
 8012dec:	447a0000 	.word	0x447a0000
 8012df0:	00000000 	.word	0x00000000
 8012df4:	41f00001 	.word	0x41f00001
 8012df8:	400ccccd 	.word	0x400ccccd
 8012dfc:	3dcccccd 	.word	0x3dcccccd
 8012e00:	423c0000 	.word	0x423c0000
 8012e04:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012df0 <MEMS_runMagCal+0x3f0>
 8012e08:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8012df4 <MEMS_runMagCal+0x3f4>
 8012e0c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012e10:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e18:	dc10      	bgt.n	8012e3c <MEMS_runMagCal+0x43c>
 8012e1a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8012df8 <MEMS_runMagCal+0x3f8>
 8012e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e26:	dc09      	bgt.n	8012e3c <MEMS_runMagCal+0x43c>
 8012e28:	ed94 9a03 	vldr	s18, [r4, #12]
 8012e2c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8012dfc <MEMS_runMagCal+0x3fc>
 8012e30:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e38:	f201 8527 	bhi.w	801488a <MEMS_runMagCal+0x1e8a>
 8012e3c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8012e00 <MEMS_runMagCal+0x400>
 8012e40:	edd4 6a03 	vldr	s13, [r4, #12]
 8012e44:	ed94 5a00 	vldr	s10, [r4]
 8012e48:	edd4 5a01 	vldr	s11, [r4, #4]
 8012e4c:	ed94 6a02 	vldr	s12, [r4, #8]
 8012e50:	edc4 7a06 	vstr	s15, [r4, #24]
 8012e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012e58:	ad2e      	add	r5, sp, #184	; 0xb8
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	e9c5 3300 	strd	r3, r3, [r5]
 8012e60:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8012e64:	60ab      	str	r3, [r5, #8]
 8012e66:	61ab      	str	r3, [r5, #24]
 8012e68:	4be7      	ldr	r3, [pc, #924]	; (8013208 <MEMS_runMagCal+0x808>)
 8012e6a:	9311      	str	r3, [sp, #68]	; 0x44
 8012e6c:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8012e70:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8012e74:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8012e78:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8012e7c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8012e80:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8012e84:	eef0 6a67 	vmov.f32	s13, s15
 8012e88:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8012e8c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012e90:	ee39 9a46 	vsub.f32	s18, s18, s12
 8012e94:	eddf 6add 	vldr	s13, [pc, #884]	; 801320c <MEMS_runMagCal+0x80c>
 8012e98:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013210 <MEMS_runMagCal+0x810>
 8012e9c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012ea0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ea4:	eef0 6ae6 	vabs.f32	s13, s13
 8012ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012eac:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb4:	eef0 7ae7 	vabs.f32	s15, s15
 8012eb8:	f101 84dd 	bmi.w	8014876 <MEMS_runMagCal+0x1e76>
 8012ebc:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8013214 <MEMS_runMagCal+0x814>
 8012ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec8:	f281 8438 	bge.w	801473c <MEMS_runMagCal+0x1d3c>
 8012ecc:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8013218 <MEMS_runMagCal+0x818>
 8012ed0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ed8:	f101 8430 	bmi.w	801473c <MEMS_runMagCal+0x1d3c>
 8012edc:	f002 fc74 	bl	80157c8 <roundf>
 8012ee0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012ee4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8012ee8:	ee17 3a90 	vmov	r3, s15
 8012eec:	eeb0 0a69 	vmov.f32	s0, s19
 8012ef0:	f8a9 3000 	strh.w	r3, [r9]
 8012ef4:	f002 fc68 	bl	80157c8 <roundf>
 8012ef8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012efc:	eeb0 0a4a 	vmov.f32	s0, s20
 8012f00:	ee17 3a90 	vmov	r3, s15
 8012f04:	f8a9 3002 	strh.w	r3, [r9, #2]
 8012f08:	f002 fc5e 	bl	80157c8 <roundf>
 8012f0c:	eddd 7a08 	vldr	s15, [sp, #32]
 8012f10:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8012f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012f18:	ee16 3a90 	vmov	r3, s13
 8012f1c:	eddf 7abf 	vldr	s15, [pc, #764]	; 801321c <MEMS_runMagCal+0x81c>
 8012f20:	f8a9 3004 	strh.w	r3, [r9, #4]
 8012f24:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012f28:	f002 fc4e 	bl	80157c8 <roundf>
 8012f2c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012f30:	ae0f      	add	r6, sp, #60	; 0x3c
 8012f32:	ed8b 0a01 	vstr	s0, [fp, #4]
 8012f36:	ab10      	add	r3, sp, #64	; 0x40
 8012f38:	ee1c 0a10 	vmov	r0, s24
 8012f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8012f40:	4649      	mov	r1, r9
 8012f42:	9600      	str	r6, [sp, #0]
 8012f44:	aa2d      	add	r2, sp, #180	; 0xb4
 8012f46:	f7f8 ff33 	bl	800bdb0 <getMagStats.constprop.0>
 8012f4a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012f4e:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8013220 <MEMS_runMagCal+0x820>
 8012f52:	461f      	mov	r7, r3
 8012f54:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8012f58:	005b      	lsls	r3, r3, #1
 8012f5a:	ee07 3a90 	vmov	s15, r3
 8012f5e:	ee07 0a10 	vmov	s14, r0
 8012f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f76:	dc0f      	bgt.n	8012f98 <MEMS_runMagCal+0x598>
 8012f78:	ed96 7a00 	vldr	s14, [r6]
 8012f7c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f88:	bfc3      	ittte	gt
 8012f8a:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8012f8e:	fab3 f383 	clzgt	r3, r3
 8012f92:	095b      	lsrgt	r3, r3, #5
 8012f94:	2301      	movle	r3, #1
 8012f96:	9303      	str	r3, [sp, #12]
 8012f98:	ed96 0a00 	vldr	s0, [r6]
 8012f9c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8012fa0:	9620      	str	r6, [sp, #128]	; 0x80
 8012fa2:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012fa6:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8012faa:	f002 fc0d 	bl	80157c8 <roundf>
 8012fae:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8012fb2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8012fb6:	ee17 3a10 	vmov	r3, s14
 8012fba:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8012fbe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8012fc2:	f002 fc01 	bl	80157c8 <roundf>
 8012fc6:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8013224 <MEMS_runMagCal+0x824>
 8012fca:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8012fce:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012fd2:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8012fd6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8012fda:	f8d9 0000 	ldr.w	r0, [r9]
 8012fde:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8012fe2:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012fe6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012fea:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012fee:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8012ff2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012ff6:	ee16 2a90 	vmov	r2, s13
 8012ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ffe:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8013002:	f1b8 0f01 	cmp.w	r8, #1
 8013006:	fa1f fc82 	uxth.w	ip, r2
 801300a:	bf08      	it	eq
 801300c:	23ff      	moveq	r3, #255	; 0xff
 801300e:	ee17 2a10 	vmov	r2, s14
 8013012:	ee17 1a90 	vmov	r1, s15
 8013016:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 801301a:	ee16 0a10 	vmov	r0, s12
 801301e:	bf08      	it	eq
 8013020:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8013024:	9b03      	ldr	r3, [sp, #12]
 8013026:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 801302a:	b292      	uxth	r2, r2
 801302c:	b289      	uxth	r1, r1
 801302e:	2000      	movs	r0, #0
 8013030:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8013034:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013038:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 801303c:	f88b 0000 	strb.w	r0, [fp]
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 8118 	beq.w	8013276 <MEMS_runMagCal+0x876>
 8013046:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801304a:	f88b 0001 	strb.w	r0, [fp, #1]
 801304e:	2b00      	cmp	r3, #0
 8013050:	f041 80fd 	bne.w	801424e <MEMS_runMagCal+0x184e>
 8013054:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013058:	ad0e      	add	r5, sp, #56	; 0x38
 801305a:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 801305e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013062:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8013066:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 801306a:	f8cb 6008 	str.w	r6, [fp, #8]
 801306e:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8013072:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8013076:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013228 <MEMS_runMagCal+0x828>
 801307a:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 801307e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013082:	fb00 f404 	mul.w	r4, r0, r4
 8013086:	ee05 4a90 	vmov	s11, r4
 801308a:	fb00 f406 	mul.w	r4, r0, r6
 801308e:	fb00 f00e 	mul.w	r0, r0, lr
 8013092:	ee06 0a10 	vmov	s12, r0
 8013096:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 801309a:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 801309e:	ee03 0a90 	vmov	s7, r0
 80130a2:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 80130a6:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 80130aa:	ee05 4a10 	vmov	s10, r4
 80130ae:	ee04 0a10 	vmov	s8, r0
 80130b2:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 80130b6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80130ba:	ee04 0a90 	vmov	s9, r0
 80130be:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80130c2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80130c6:	f8dc 0000 	ldr.w	r0, [ip]
 80130ca:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 80130ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80130d2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80130d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80130da:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80130de:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80130e2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80130e6:	2001      	movs	r0, #1
 80130e8:	24ff      	movs	r4, #255	; 0xff
 80130ea:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 80130ee:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 80130f2:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 80130f6:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 80130fa:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 80130fe:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8013102:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8013106:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 801310a:	f88b 4012 	strb.w	r4, [fp, #18]
 801310e:	2f00      	cmp	r7, #0
 8013110:	f001 82c8 	beq.w	80146a4 <MEMS_runMagCal+0x1ca4>
 8013114:	9b05      	ldr	r3, [sp, #20]
 8013116:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8013234 <MEMS_runMagCal+0x834>
 801311a:	ed93 0a01 	vldr	s0, [r3, #4]
 801311e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8013122:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013126:	2200      	movs	r2, #0
 8013128:	ee20 3a03 	vmul.f32	s6, s0, s6
 801312c:	f04f 34ff 	mov.w	r4, #4294967295
 8013130:	4616      	mov	r6, r2
 8013132:	fb96 f3f0 	sdiv	r3, r6, r0
 8013136:	fb00 6313 	mls	r3, r0, r3, r6
 801313a:	b2db      	uxtb	r3, r3
 801313c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013140:	1c66      	adds	r6, r4, #1
 8013142:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013146:	ee07 4a90 	vmov	s15, r4
 801314a:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801314e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013152:	ee06 4a90 	vmov	s13, r4
 8013156:	fb96 f4f1 	sdiv	r4, r6, r1
 801315a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801315e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013162:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8013166:	ee07 3a10 	vmov	s14, r3
 801316a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801316e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013172:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8013176:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801317a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801317e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013182:	fb01 6414 	mls	r4, r1, r4, r6
 8013186:	b264      	sxtb	r4, r4
 8013188:	ee37 7a64 	vsub.f32	s14, s14, s9
 801318c:	3201      	adds	r2, #1
 801318e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013192:	b212      	sxth	r2, r2
 8013194:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013198:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 801319c:	42ba      	cmp	r2, r7
 801319e:	4616      	mov	r6, r2
 80131a0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80131a4:	ee67 7a03 	vmul.f32	s15, s14, s6
 80131a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131ac:	ee17 ca90 	vmov	ip, s15
 80131b0:	f8a3 c014 	strh.w	ip, [r3, #20]
 80131b4:	dbbd      	blt.n	8013132 <MEMS_runMagCal+0x732>
 80131b6:	f88b 4012 	strb.w	r4, [fp, #18]
 80131ba:	428f      	cmp	r7, r1
 80131bc:	bf28      	it	cs
 80131be:	460f      	movcs	r7, r1
 80131c0:	f88b 7010 	strb.w	r7, [fp, #16]
 80131c4:	ee1c 0a10 	vmov	r0, s24
 80131c8:	9500      	str	r5, [sp, #0]
 80131ca:	4642      	mov	r2, r8
 80131cc:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80131d0:	ab0d      	add	r3, sp, #52	; 0x34
 80131d2:	f7f8 fded 	bl	800bdb0 <getMagStats.constprop.0>
 80131d6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 801322c <MEMS_runMagCal+0x82c>
 80131da:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80131de:	edd5 6a00 	vldr	s13, [r5]
 80131e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80131e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80131ea:	eef0 7ae7 	vabs.f32	s15, s15
 80131ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f6:	d525      	bpl.n	8013244 <MEMS_runMagCal+0x844>
 80131f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80131fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013200:	f101 8257 	bmi.w	80146b2 <MEMS_runMagCal+0x1cb2>
 8013204:	e01e      	b.n	8013244 <MEMS_runMagCal+0x844>
 8013206:	bf00      	nop
 8013208:	41f00001 	.word	0x41f00001
 801320c:	3f8ccccd 	.word	0x3f8ccccd
 8013210:	3f266666 	.word	0x3f266666
 8013214:	3eb33333 	.word	0x3eb33333
 8013218:	3f19999a 	.word	0x3f19999a
 801321c:	3a83126f 	.word	0x3a83126f
 8013220:	3c23d70a 	.word	0x3c23d70a
 8013224:	447a0000 	.word	0x447a0000
 8013228:	358637bd 	.word	0x358637bd
 801322c:	423c0000 	.word	0x423c0000
 8013230:	4423d666 	.word	0x4423d666
 8013234:	42c80000 	.word	0x42c80000
 8013238:	427c0000 	.word	0x427c0000
 801323c:	3f666666 	.word	0x3f666666
 8013240:	3eaaaaab 	.word	0x3eaaaaab
 8013244:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013248:	eef4 7ac7 	vcmpe.f32	s15, s14
 801324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013250:	d507      	bpl.n	8013262 <MEMS_runMagCal+0x862>
 8013252:	eef4 6a47 	vcmp.f32	s13, s14
 8013256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325a:	9b03      	ldr	r3, [sp, #12]
 801325c:	bf48      	it	mi
 801325e:	2302      	movmi	r3, #2
 8013260:	9303      	str	r3, [sp, #12]
 8013262:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013266:	9a03      	ldr	r2, [sp, #12]
 8013268:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 801326c:	2bc8      	cmp	r3, #200	; 0xc8
 801326e:	d902      	bls.n	8013276 <MEMS_runMagCal+0x876>
 8013270:	2302      	movs	r3, #2
 8013272:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8013276:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 801327a:	ecbd 8b0a 	vpop	{d8-d12}
 801327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013282:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8013286:	4291      	cmp	r1, r2
 8013288:	f4ff abea 	bcc.w	8012a60 <MEMS_runMagCal+0x60>
 801328c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013290:	2b00      	cmp	r3, #0
 8013292:	f47f abf9 	bne.w	8012a88 <MEMS_runMagCal+0x88>
 8013296:	f7ff bbed 	b.w	8012a74 <MEMS_runMagCal+0x74>
 801329a:	2702      	movs	r7, #2
 801329c:	2300      	movs	r3, #0
 801329e:	9307      	str	r3, [sp, #28]
 80132a0:	9303      	str	r3, [sp, #12]
 80132a2:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8013230 <MEMS_runMagCal+0x830>
 80132a6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80132aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ae:	f140 8260 	bpl.w	8013772 <MEMS_runMagCal+0xd72>
 80132b2:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8013234 <MEMS_runMagCal+0x834>
 80132b6:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80132ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80132be:	2b01      	cmp	r3, #1
 80132c0:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80132c4:	d911      	bls.n	80132ea <MEMS_runMagCal+0x8ea>
 80132c6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80132ca:	ee17 3a90 	vmov	r3, s15
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	2bc7      	cmp	r3, #199	; 0xc7
 80132d2:	f201 8359 	bhi.w	8014988 <MEMS_runMagCal+0x1f88>
 80132d6:	2300      	movs	r3, #0
 80132d8:	22ff      	movs	r2, #255	; 0xff
 80132da:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80132de:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80132e2:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 80132e6:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80132ea:	2f00      	cmp	r7, #0
 80132ec:	f040 824d 	bne.w	801378a <MEMS_runMagCal+0xd8a>
 80132f0:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	f2c0 839e 	blt.w	8013a36 <MEMS_runMagCal+0x1036>
 80132fa:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80132fe:	1c5a      	adds	r2, r3, #1
 8013300:	fbb2 f3f6 	udiv	r3, r2, r6
 8013304:	fb06 2313 	mls	r3, r6, r3, r2
 8013308:	b25b      	sxtb	r3, r3
 801330a:	461d      	mov	r5, r3
 801330c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8013310:	f88b 3012 	strb.w	r3, [fp, #18]
 8013314:	3401      	adds	r4, #1
 8013316:	42b4      	cmp	r4, r6
 8013318:	bfa8      	it	ge
 801331a:	4634      	movge	r4, r6
 801331c:	fa5f f884 	uxtb.w	r8, r4
 8013320:	f88b 8010 	strb.w	r8, [fp, #16]
 8013324:	f002 fa50 	bl	80157c8 <roundf>
 8013328:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801332c:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8013330:	ee10 2a10 	vmov	r2, s0
 8013334:	829a      	strh	r2, [r3, #20]
 8013336:	2f00      	cmp	r7, #0
 8013338:	f040 8227 	bne.w	801378a <MEMS_runMagCal+0xd8a>
 801333c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013340:	b122      	cbz	r2, 801334c <MEMS_runMagCal+0x94c>
 8013342:	9908      	ldr	r1, [sp, #32]
 8013344:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8013348:	4299      	cmp	r1, r3
 801334a:	d394      	bcc.n	8013276 <MEMS_runMagCal+0x876>
 801334c:	9b03      	ldr	r3, [sp, #12]
 801334e:	2b01      	cmp	r3, #1
 8013350:	d091      	beq.n	8013276 <MEMS_runMagCal+0x876>
 8013352:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8013356:	1ebb      	subs	r3, r7, #2
 8013358:	2b01      	cmp	r3, #1
 801335a:	f240 8232 	bls.w	80137c2 <MEMS_runMagCal+0xdc2>
 801335e:	9b05      	ldr	r3, [sp, #20]
 8013360:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8013238 <MEMS_runMagCal+0x838>
 8013364:	ed93 8a01 	vldr	s16, [r3, #4]
 8013368:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 801336c:	9a06      	ldr	r2, [sp, #24]
 801336e:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 8013372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013378:	eec7 8a08 	vdiv.f32	s17, s14, s16
 801337c:	fb02 1404 	mla	r4, r2, r4, r1
 8013380:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8013384:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8013388:	3310      	adds	r3, #16
 801338a:	42a3      	cmp	r3, r4
 801338c:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013390:	ee28 9a89 	vmul.f32	s18, s17, s18
 8013394:	ee0c 2a10 	vmov	s24, r2
 8013398:	ee69 7a27 	vmul.f32	s15, s18, s15
 801339c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133a0:	ee17 2a90 	vmov	r2, s15
 80133a4:	fa1f f982 	uxth.w	r9, r2
 80133a8:	f080 81fe 	bcs.w	80137a8 <MEMS_runMagCal+0xda8>
 80133ac:	f242 3328 	movw	r3, #9000	; 0x2328
 80133b0:	429c      	cmp	r4, r3
 80133b2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80133b6:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 80133ba:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 80133be:	bf1a      	itte	ne
 80133c0:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 80133c4:	3c28      	subne	r4, #40	; 0x28
 80133c6:	2400      	moveq	r4, #0
 80133c8:	42a8      	cmp	r0, r5
 80133ca:	f102 0201 	add.w	r2, r2, #1
 80133ce:	f000 8727 	beq.w	8014220 <MEMS_runMagCal+0x1820>
 80133d2:	1a12      	subs	r2, r2, r0
 80133d4:	fb92 f1f5 	sdiv	r1, r2, r5
 80133d8:	fb05 2211 	mls	r2, r5, r1, r2
 80133dc:	2a00      	cmp	r2, #0
 80133de:	bfb8      	it	lt
 80133e0:	1952      	addlt	r2, r2, r5
 80133e2:	b211      	sxth	r1, r2
 80133e4:	b358      	cbz	r0, 801343e <MEMS_runMagCal+0xa3e>
 80133e6:	3801      	subs	r0, #1
 80133e8:	b280      	uxth	r0, r0
 80133ea:	3001      	adds	r0, #1
 80133ec:	1b36      	subs	r6, r6, r4
 80133ee:	9f03      	ldr	r7, [sp, #12]
 80133f0:	b2b6      	uxth	r6, r6
 80133f2:	4408      	add	r0, r1
 80133f4:	e002      	b.n	80133fc <MEMS_runMagCal+0x9fc>
 80133f6:	3101      	adds	r1, #1
 80133f8:	4281      	cmp	r1, r0
 80133fa:	d01b      	beq.n	8013434 <MEMS_runMagCal+0xa34>
 80133fc:	fb91 f3f5 	sdiv	r3, r1, r5
 8013400:	fb05 1313 	mls	r3, r5, r3, r1
 8013404:	b2db      	uxtb	r3, r3
 8013406:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801340a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801340e:	4432      	add	r2, r6
 8013410:	b212      	sxth	r2, r2
 8013412:	2a00      	cmp	r2, #0
 8013414:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013418:	daed      	bge.n	80133f6 <MEMS_runMagCal+0x9f6>
 801341a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801341e:	1e5a      	subs	r2, r3, #1
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 8306 	beq.w	8013a32 <MEMS_runMagCal+0x1032>
 8013426:	3101      	adds	r1, #1
 8013428:	4281      	cmp	r1, r0
 801342a:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801342e:	f04f 0701 	mov.w	r7, #1
 8013432:	d1e3      	bne.n	80133fc <MEMS_runMagCal+0x9fc>
 8013434:	2f01      	cmp	r7, #1
 8013436:	f001 80ea 	beq.w	801460e <MEMS_runMagCal+0x1c0e>
 801343a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801343e:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8013442:	2800      	cmp	r0, #0
 8013444:	f000 81b6 	beq.w	80137b4 <MEMS_runMagCal+0xdb4>
 8013448:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801344c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801344e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013452:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8013456:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801345a:	3308      	adds	r3, #8
 801345c:	441c      	add	r4, r3
 801345e:	42a2      	cmp	r2, r4
 8013460:	f200 86e6 	bhi.w	8014230 <MEMS_runMagCal+0x1830>
 8013464:	9b07      	ldr	r3, [sp, #28]
 8013466:	b923      	cbnz	r3, 8013472 <MEMS_runMagCal+0xa72>
 8013468:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801346c:	2b0a      	cmp	r3, #10
 801346e:	f240 81a5 	bls.w	80137bc <MEMS_runMagCal+0xdbc>
 8013472:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013476:	9302      	str	r3, [sp, #8]
 8013478:	2b00      	cmp	r3, #0
 801347a:	f000 819f 	beq.w	80137bc <MEMS_runMagCal+0xdbc>
 801347e:	ee29 aa09 	vmul.f32	s20, s18, s18
 8013482:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 801323c <MEMS_runMagCal+0x83c>
 8013486:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8013240 <MEMS_runMagCal+0x840>
 801348a:	9b03      	ldr	r3, [sp, #12]
 801348c:	9309      	str	r3, [sp, #36]	; 0x24
 801348e:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8013492:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013496:	2100      	movs	r1, #0
 8013498:	ee2a aa26 	vmul.f32	s20, s20, s13
 801349c:	ee28 8a07 	vmul.f32	s16, s16, s14
 80134a0:	ee69 9a29 	vmul.f32	s19, s18, s19
 80134a4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80134a8:	468a      	mov	sl, r1
 80134aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80134ac:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 80134b0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f000 80e2 	beq.w	801367e <MEMS_runMagCal+0xc7e>
 80134ba:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80134be:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 80134c2:	ee07 4a90 	vmov	s15, r4
 80134c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134ca:	eef0 7ae7 	vabs.f32	s15, s15
 80134ce:	eef4 7ae8 	vcmpe.f32	s15, s17
 80134d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d6:	f100 820b 	bmi.w	80138f0 <MEMS_runMagCal+0xef0>
 80134da:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80134de:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80134e2:	2f00      	cmp	r7, #0
 80134e4:	f000 8223 	beq.w	801392e <MEMS_runMagCal+0xf2e>
 80134e8:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 80134ec:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 80134f0:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 80134f4:	1b52      	subs	r2, r2, r5
 80134f6:	fb02 f102 	mul.w	r1, r2, r2
 80134fa:	1b02      	subs	r2, r0, r4
 80134fc:	fb02 1202 	mla	r2, r2, r2, r1
 8013500:	1b9b      	subs	r3, r3, r6
 8013502:	fb03 2303 	mla	r3, r3, r3, r2
 8013506:	ee07 3a90 	vmov	s15, r3
 801350a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801350e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013516:	f300 80b2 	bgt.w	801367e <MEMS_runMagCal+0xc7e>
 801351a:	fb94 f3f9 	sdiv	r3, r4, r9
 801351e:	fb09 4313 	mls	r3, r9, r3, r4
 8013522:	2b00      	cmp	r3, #0
 8013524:	bfb8      	it	lt
 8013526:	444b      	addlt	r3, r9
 8013528:	b21b      	sxth	r3, r3
 801352a:	ee00 3a10 	vmov	s0, r3
 801352e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013532:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013536:	f002 f947 	bl	80157c8 <roundf>
 801353a:	fb95 f3f9 	sdiv	r3, r5, r9
 801353e:	fb09 5313 	mls	r3, r9, r3, r5
 8013542:	2b00      	cmp	r3, #0
 8013544:	bfb8      	it	lt
 8013546:	444b      	addlt	r3, r9
 8013548:	b21b      	sxth	r3, r3
 801354a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801354e:	ee00 3a10 	vmov	s0, r3
 8013552:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013556:	edcd 7a04 	vstr	s15, [sp, #16]
 801355a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801355e:	f002 f933 	bl	80157c8 <roundf>
 8013562:	fb96 f3f9 	sdiv	r3, r6, r9
 8013566:	fb09 6313 	mls	r3, r9, r3, r6
 801356a:	2b00      	cmp	r3, #0
 801356c:	bfb8      	it	lt
 801356e:	444b      	addlt	r3, r9
 8013570:	b21b      	sxth	r3, r3
 8013572:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013576:	ee00 3a10 	vmov	s0, r3
 801357a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801357e:	f89d 8010 	ldrb.w	r8, [sp, #16]
 8013582:	edcd 7a04 	vstr	s15, [sp, #16]
 8013586:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801358a:	9204      	str	r2, [sp, #16]
 801358c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013590:	f002 f91a 	bl	80157c8 <roundf>
 8013594:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013598:	f1b8 0f1f 	cmp.w	r8, #31
 801359c:	edcd 7a06 	vstr	s15, [sp, #24]
 80135a0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80135a4:	9106      	str	r1, [sp, #24]
 80135a6:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 80135aa:	f240 823d 	bls.w	8013a28 <MEMS_runMagCal+0x1028>
 80135ae:	f1a8 0220 	sub.w	r2, r8, #32
 80135b2:	2101      	movs	r1, #1
 80135b4:	fa01 f202 	lsl.w	r2, r1, r2
 80135b8:	401a      	ands	r2, r3
 80135ba:	9804      	ldr	r0, [sp, #16]
 80135bc:	281f      	cmp	r0, #31
 80135be:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 80135c2:	f240 821f 	bls.w	8013a04 <MEMS_runMagCal+0x1004>
 80135c6:	f1a0 0120 	sub.w	r1, r0, #32
 80135ca:	2001      	movs	r0, #1
 80135cc:	fa00 f101 	lsl.w	r1, r0, r1
 80135d0:	ea01 0c03 	and.w	ip, r1, r3
 80135d4:	9906      	ldr	r1, [sp, #24]
 80135d6:	291f      	cmp	r1, #31
 80135d8:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 80135dc:	f240 821e 	bls.w	8013a1c <MEMS_runMagCal+0x101c>
 80135e0:	f1a1 0020 	sub.w	r0, r1, #32
 80135e4:	2101      	movs	r1, #1
 80135e6:	fa01 f000 	lsl.w	r0, r1, r0
 80135ea:	4003      	ands	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f040 812b 	bne.w	8013848 <MEMS_runMagCal+0xe48>
 80135f2:	ea52 030c 	orrs.w	r3, r2, ip
 80135f6:	f040 812c 	bne.w	8013852 <MEMS_runMagCal+0xe52>
 80135fa:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80135fe:	930a      	str	r3, [sp, #40]	; 0x28
 8013600:	461a      	mov	r2, r3
 8013602:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013606:	3301      	adds	r3, #1
 8013608:	4694      	mov	ip, r2
 801360a:	930b      	str	r3, [sp, #44]	; 0x2c
 801360c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801360e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013612:	3701      	adds	r7, #1
 8013614:	4567      	cmp	r7, ip
 8013616:	bfa8      	it	ge
 8013618:	4667      	movge	r7, ip
 801361a:	fb0c 2c13 	mls	ip, ip, r3, r2
 801361e:	b2ff      	uxtb	r7, r7
 8013620:	fa4f fc8c 	sxtb.w	ip, ip
 8013624:	9905      	ldr	r1, [sp, #20]
 8013626:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 801362a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801362e:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 8013632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013634:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013638:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 801363c:	1a9b      	subs	r3, r3, r2
 801363e:	fb01 330a 	mla	r3, r1, sl, r3
 8013642:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8013646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013648:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 801364c:	429f      	cmp	r7, r3
 801364e:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013652:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013656:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801365a:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 801365e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013662:	f000 8758 	beq.w	8014516 <MEMS_runMagCal+0x1b16>
 8013666:	9b06      	ldr	r3, [sp, #24]
 8013668:	9a04      	ldr	r2, [sp, #16]
 801366a:	ee1c 0a10 	vmov	r0, s24
 801366e:	4641      	mov	r1, r8
 8013670:	f7f8 f874 	bl	800b75c <MEMS_setMagIndexToOne>
 8013674:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013678:	9302      	str	r3, [sp, #8]
 801367a:	2301      	movs	r3, #1
 801367c:	9309      	str	r3, [sp, #36]	; 0x24
 801367e:	9b02      	ldr	r3, [sp, #8]
 8013680:	f10a 0a01 	add.w	sl, sl, #1
 8013684:	fa0f fa8a 	sxth.w	sl, sl
 8013688:	459a      	cmp	sl, r3
 801368a:	4651      	mov	r1, sl
 801368c:	f6ff af0d 	blt.w	80134aa <MEMS_runMagCal+0xaaa>
 8013690:	f89b 3000 	ldrb.w	r3, [fp]
 8013694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013696:	431a      	orrs	r2, r3
 8013698:	b2d3      	uxtb	r3, r2
 801369a:	f88b 3000 	strb.w	r3, [fp]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	f43f ade9 	beq.w	8013276 <MEMS_runMagCal+0x876>
 80136a4:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80136a8:	9306      	str	r3, [sp, #24]
 80136aa:	2b19      	cmp	r3, #25
 80136ac:	f67f ade3 	bls.w	8013276 <MEMS_runMagCal+0x876>
 80136b0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80136b4:	9309      	str	r3, [sp, #36]	; 0x24
 80136b6:	b123      	cbz	r3, 80136c2 <MEMS_runMagCal+0xcc2>
 80136b8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	f040 8583 	bne.w	80141c8 <MEMS_runMagCal+0x17c8>
 80136c2:	9b07      	ldr	r3, [sp, #28]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f040 872f 	bne.w	8014528 <MEMS_runMagCal+0x1b28>
 80136ca:	9b05      	ldr	r3, [sp, #20]
 80136cc:	9903      	ldr	r1, [sp, #12]
 80136ce:	ed93 8a01 	vldr	s16, [r3, #4]
 80136d2:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 80136d6:	9302      	str	r3, [sp, #8]
 80136d8:	2600      	movs	r6, #0
 80136da:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 80136de:	9304      	str	r3, [sp, #16]
 80136e0:	f04f 0a01 	mov.w	sl, #1
 80136e4:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 80136e8:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 80136ec:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 80136f0:	9624      	str	r6, [sp, #144]	; 0x90
 80136f2:	4657      	mov	r7, sl
 80136f4:	460b      	mov	r3, r1
 80136f6:	460c      	mov	r4, r1
 80136f8:	e013      	b.n	8013722 <MEMS_runMagCal+0xd22>
 80136fa:	f1b9 0f00 	cmp.w	r9, #0
 80136fe:	bf18      	it	ne
 8013700:	3101      	addne	r1, #1
 8013702:	2d00      	cmp	r5, #0
 8013704:	bf18      	it	ne
 8013706:	3401      	addne	r4, #1
 8013708:	2a00      	cmp	r2, #0
 801370a:	bf18      	it	ne
 801370c:	3301      	addne	r3, #1
 801370e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013712:	b2c9      	uxtb	r1, r1
 8013714:	b2e4      	uxtb	r4, r4
 8013716:	b2db      	uxtb	r3, r3
 8013718:	f000 81a2 	beq.w	8013a60 <MEMS_runMagCal+0x1060>
 801371c:	3601      	adds	r6, #1
 801371e:	fa5f fa8c 	uxtb.w	sl, ip
 8013722:	9804      	ldr	r0, [sp, #16]
 8013724:	f1a6 0220 	sub.w	r2, r6, #32
 8013728:	fa07 f202 	lsl.w	r2, r7, r2
 801372c:	ea02 0500 	and.w	r5, r2, r0
 8013730:	9802      	ldr	r0, [sp, #8]
 8013732:	2e1f      	cmp	r6, #31
 8013734:	ea08 0902 	and.w	r9, r8, r2
 8013738:	f10a 0c01 	add.w	ip, sl, #1
 801373c:	ea02 0200 	and.w	r2, r2, r0
 8013740:	fa07 f006 	lsl.w	r0, r7, r6
 8013744:	d8d9      	bhi.n	80136fa <MEMS_runMagCal+0xcfa>
 8013746:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 801374a:	ea00 0902 	and.w	r9, r0, r2
 801374e:	4005      	ands	r5, r0
 8013750:	ea0e 0000 	and.w	r0, lr, r0
 8013754:	f1b9 0f00 	cmp.w	r9, #0
 8013758:	bf18      	it	ne
 801375a:	3401      	addne	r4, #1
 801375c:	2d00      	cmp	r5, #0
 801375e:	bf0c      	ite	eq
 8013760:	461d      	moveq	r5, r3
 8013762:	1c5d      	addne	r5, r3, #1
 8013764:	2800      	cmp	r0, #0
 8013766:	bf18      	it	ne
 8013768:	3101      	addne	r1, #1
 801376a:	b2e4      	uxtb	r4, r4
 801376c:	b2eb      	uxtb	r3, r5
 801376e:	b2c9      	uxtb	r1, r1
 8013770:	e7d4      	b.n	801371c <MEMS_runMagCal+0xd1c>
 8013772:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013776:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013a4c <MEMS_runMagCal+0x104c>
 801377a:	2b01      	cmp	r3, #1
 801377c:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013780:	f63f ada9 	bhi.w	80132d6 <MEMS_runMagCal+0x8d6>
 8013784:	2f00      	cmp	r7, #0
 8013786:	f43f adb3 	beq.w	80132f0 <MEMS_runMagCal+0x8f0>
 801378a:	9908      	ldr	r1, [sp, #32]
 801378c:	f8cb 100c 	str.w	r1, [fp, #12]
 8013790:	2200      	movs	r2, #0
 8013792:	23ff      	movs	r3, #255	; 0xff
 8013794:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013798:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 801379c:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80137a0:	ecbd 8b0a 	vpop	{d8-d12}
 80137a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a8:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80137ac:	4634      	mov	r4, r6
 80137ae:	2800      	cmp	r0, #0
 80137b0:	f47f ae4a 	bne.w	8013448 <MEMS_runMagCal+0xa48>
 80137b4:	9b07      	ldr	r3, [sp, #28]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f47f ae5b 	bne.w	8013472 <MEMS_runMagCal+0xa72>
 80137bc:	9b03      	ldr	r3, [sp, #12]
 80137be:	9309      	str	r3, [sp, #36]	; 0x24
 80137c0:	e766      	b.n	8013690 <MEMS_runMagCal+0xc90>
 80137c2:	45b0      	cmp	r8, r6
 80137c4:	f000 86b9 	beq.w	801453a <MEMS_runMagCal+0x1b3a>
 80137c8:	2f03      	cmp	r7, #3
 80137ca:	f47f adc8 	bne.w	801335e <MEMS_runMagCal+0x95e>
 80137ce:	ee07 2a90 	vmov	s15, r2
 80137d2:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013a50 <MEMS_runMagCal+0x1050>
 80137d6:	ed9b 7a01 	vldr	s14, [fp, #4]
 80137da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80137de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80137e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80137ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ee:	f77f adb6 	ble.w	801335e <MEMS_runMagCal+0x95e>
 80137f2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f43f adb1 	beq.w	801335e <MEMS_runMagCal+0x95e>
 80137fc:	eddd 7a08 	vldr	s15, [sp, #32]
 8013800:	330a      	adds	r3, #10
 8013802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013806:	ee07 3a90 	vmov	s15, r3
 801380a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013812:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801381a:	f77f ada0 	ble.w	801335e <MEMS_runMagCal+0x95e>
 801381e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013822:	2b00      	cmp	r3, #0
 8013824:	f47f ad9b 	bne.w	801335e <MEMS_runMagCal+0x95e>
 8013828:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801382c:	2b00      	cmp	r3, #0
 801382e:	f43f ad22 	beq.w	8013276 <MEMS_runMagCal+0x876>
 8013832:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013836:	2bff      	cmp	r3, #255	; 0xff
 8013838:	f47f ad1d 	bne.w	8013276 <MEMS_runMagCal+0x876>
 801383c:	e58f      	b.n	801335e <MEMS_runMagCal+0x95e>
 801383e:	2300      	movs	r3, #0
 8013840:	9307      	str	r3, [sp, #28]
 8013842:	9303      	str	r3, [sp, #12]
 8013844:	2700      	movs	r7, #0
 8013846:	e52c      	b.n	80132a2 <MEMS_runMagCal+0x8a2>
 8013848:	b11a      	cbz	r2, 8013852 <MEMS_runMagCal+0xe52>
 801384a:	f1bc 0f00 	cmp.w	ip, #0
 801384e:	f47f af16 	bne.w	801367e <MEMS_runMagCal+0xc7e>
 8013852:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013856:	930a      	str	r3, [sp, #40]	; 0x28
 8013858:	461a      	mov	r2, r3
 801385a:	4297      	cmp	r7, r2
 801385c:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013860:	f000 848f 	beq.w	8014182 <MEMS_runMagCal+0x1782>
 8013864:	3301      	adds	r3, #1
 8013866:	4611      	mov	r1, r2
 8013868:	930b      	str	r3, [sp, #44]	; 0x2c
 801386a:	1bdb      	subs	r3, r3, r7
 801386c:	fb93 f2f2 	sdiv	r2, r3, r2
 8013870:	fb01 3212 	mls	r2, r1, r2, r3
 8013874:	2a00      	cmp	r2, #0
 8013876:	bfbc      	itt	lt
 8013878:	460b      	movlt	r3, r1
 801387a:	18d2      	addlt	r2, r2, r3
 801387c:	468c      	mov	ip, r1
 801387e:	b212      	sxth	r2, r2
 8013880:	f107 3eff 	add.w	lr, r7, #4294967295
 8013884:	fa5f fe8e 	uxtb.w	lr, lr
 8013888:	f10e 0e01 	add.w	lr, lr, #1
 801388c:	4496      	add	lr, r2
 801388e:	e002      	b.n	8013896 <MEMS_runMagCal+0xe96>
 8013890:	4572      	cmp	r2, lr
 8013892:	f43f aebb 	beq.w	801360c <MEMS_runMagCal+0xc0c>
 8013896:	fb92 f3fc 	sdiv	r3, r2, ip
 801389a:	fb0c 2313 	mls	r3, ip, r3, r2
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80138a4:	3201      	adds	r2, #1
 80138a6:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80138aa:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 80138ae:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80138b2:	1a20      	subs	r0, r4, r0
 80138b4:	1a69      	subs	r1, r5, r1
 80138b6:	ee07 0a90 	vmov	s15, r0
 80138ba:	ee06 1a90 	vmov	s13, r1
 80138be:	1af3      	subs	r3, r6, r3
 80138c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80138c8:	ee07 3a10 	vmov	s14, r3
 80138cc:	eef0 7ae7 	vabs.f32	s15, s15
 80138d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138d4:	eef0 6ae6 	vabs.f32	s13, s13
 80138d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80138dc:	eeb0 7ac7 	vabs.f32	s14, s14
 80138e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80138e4:	eef4 9ae7 	vcmpe.f32	s19, s15
 80138e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ec:	ddd0      	ble.n	8013890 <MEMS_runMagCal+0xe90>
 80138ee:	e6c6      	b.n	801367e <MEMS_runMagCal+0xc7e>
 80138f0:	ee07 5a90 	vmov	s15, r5
 80138f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138f8:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80138fc:	eef0 7ae7 	vabs.f32	s15, s15
 8013900:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013908:	f77f ade9 	ble.w	80134de <MEMS_runMagCal+0xade>
 801390c:	ee07 6a90 	vmov	s15, r6
 8013910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013914:	eef0 7ae7 	vabs.f32	s15, s15
 8013918:	eef4 8ae7 	vcmpe.f32	s17, s15
 801391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013920:	f73f aead 	bgt.w	801367e <MEMS_runMagCal+0xc7e>
 8013924:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013928:	2f00      	cmp	r7, #0
 801392a:	f47f addd 	bne.w	80134e8 <MEMS_runMagCal+0xae8>
 801392e:	fb94 f2f9 	sdiv	r2, r4, r9
 8013932:	f04f 0301 	mov.w	r3, #1
 8013936:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801393a:	9b05      	ldr	r3, [sp, #20]
 801393c:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013940:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013946:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 801394a:	fb09 4212 	mls	r2, r9, r2, r4
 801394e:	2a00      	cmp	r2, #0
 8013950:	fb01 3300 	mla	r3, r1, r0, r3
 8013954:	bfb8      	it	lt
 8013956:	444a      	addlt	r2, r9
 8013958:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 801395c:	b213      	sxth	r3, r2
 801395e:	ee00 3a10 	vmov	s0, r3
 8013962:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013966:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801396a:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 801396e:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013972:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013976:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 801397a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801397e:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013982:	f001 ff21 	bl	80157c8 <roundf>
 8013986:	fb95 f3f9 	sdiv	r3, r5, r9
 801398a:	fb09 5513 	mls	r5, r9, r3, r5
 801398e:	2d00      	cmp	r5, #0
 8013990:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013994:	bfb8      	it	lt
 8013996:	444d      	addlt	r5, r9
 8013998:	b22d      	sxth	r5, r5
 801399a:	edcd 7a02 	vstr	s15, [sp, #8]
 801399e:	ee07 5a90 	vmov	s15, r5
 80139a2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80139a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80139aa:	ee20 0a08 	vmul.f32	s0, s0, s16
 80139ae:	f001 ff0b 	bl	80157c8 <roundf>
 80139b2:	fb96 f3f9 	sdiv	r3, r6, r9
 80139b6:	fb09 6613 	mls	r6, r9, r3, r6
 80139ba:	2e00      	cmp	r6, #0
 80139bc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80139c0:	bfb8      	it	lt
 80139c2:	444e      	addlt	r6, r9
 80139c4:	b236      	sxth	r6, r6
 80139c6:	edcd 7a02 	vstr	s15, [sp, #8]
 80139ca:	ee07 6a90 	vmov	s15, r6
 80139ce:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80139d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80139d6:	9204      	str	r2, [sp, #16]
 80139d8:	2301      	movs	r3, #1
 80139da:	ee20 0a08 	vmul.f32	s0, s0, s16
 80139de:	9309      	str	r3, [sp, #36]	; 0x24
 80139e0:	f001 fef2 	bl	80157c8 <roundf>
 80139e4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80139e8:	9a04      	ldr	r2, [sp, #16]
 80139ea:	edcd 7a02 	vstr	s15, [sp, #8]
 80139ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80139f2:	ee1c 0a10 	vmov	r0, s24
 80139f6:	4621      	mov	r1, r4
 80139f8:	f7f7 feb0 	bl	800b75c <MEMS_setMagIndexToOne>
 80139fc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013a00:	9302      	str	r3, [sp, #8]
 8013a02:	e63c      	b.n	801367e <MEMS_runMagCal+0xc7e>
 8013a04:	4603      	mov	r3, r0
 8013a06:	2001      	movs	r0, #1
 8013a08:	fa00 f303 	lsl.w	r3, r0, r3
 8013a0c:	ea01 0c03 	and.w	ip, r1, r3
 8013a10:	9906      	ldr	r1, [sp, #24]
 8013a12:	291f      	cmp	r1, #31
 8013a14:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013a18:	f63f ade2 	bhi.w	80135e0 <MEMS_runMagCal+0xbe0>
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	2101      	movs	r1, #1
 8013a20:	fa01 f303 	lsl.w	r3, r1, r3
 8013a24:	4003      	ands	r3, r0
 8013a26:	e5e1      	b.n	80135ec <MEMS_runMagCal+0xbec>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	fa03 f308 	lsl.w	r3, r3, r8
 8013a2e:	401a      	ands	r2, r3
 8013a30:	e5c3      	b.n	80135ba <MEMS_runMagCal+0xbba>
 8013a32:	2701      	movs	r7, #1
 8013a34:	e4df      	b.n	80133f6 <MEMS_runMagCal+0x9f6>
 8013a36:	2500      	movs	r5, #0
 8013a38:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013a3c:	462b      	mov	r3, r5
 8013a3e:	e465      	b.n	801330c <MEMS_runMagCal+0x90c>
 8013a40:	460f      	mov	r7, r1
 8013a42:	e42b      	b.n	801329c <MEMS_runMagCal+0x89c>
 8013a44:	2300      	movs	r3, #0
 8013a46:	9304      	str	r3, [sp, #16]
 8013a48:	f7ff b941 	b.w	8012cce <MEMS_runMagCal+0x2ce>
 8013a4c:	477fff00 	.word	0x477fff00
 8013a50:	3a83126f 	.word	0x3a83126f
 8013a54:	42340000 	.word	0x42340000
 8013a58:	3faccccd 	.word	0x3faccccd
 8013a5c:	00000000 	.word	0x00000000
 8013a60:	2905      	cmp	r1, #5
 8013a62:	f240 8383 	bls.w	801416c <MEMS_runMagCal+0x176c>
 8013a66:	2c05      	cmp	r4, #5
 8013a68:	f240 8380 	bls.w	801416c <MEMS_runMagCal+0x176c>
 8013a6c:	2b05      	cmp	r3, #5
 8013a6e:	f240 837d 	bls.w	801416c <MEMS_runMagCal+0x176c>
 8013a72:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013a76:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013a7a:	9302      	str	r3, [sp, #8]
 8013a7c:	9b06      	ldr	r3, [sp, #24]
 8013a7e:	4553      	cmp	r3, sl
 8013a80:	f000 85f1 	beq.w	8014666 <MEMS_runMagCal+0x1c66>
 8013a84:	461a      	mov	r2, r3
 8013a86:	9b02      	ldr	r3, [sp, #8]
 8013a88:	3301      	adds	r3, #1
 8013a8a:	9304      	str	r3, [sp, #16]
 8013a8c:	1a9b      	subs	r3, r3, r2
 8013a8e:	fb93 f2fa 	sdiv	r2, r3, sl
 8013a92:	fb0a 3212 	mls	r2, sl, r2, r3
 8013a96:	2a00      	cmp	r2, #0
 8013a98:	bfb8      	it	lt
 8013a9a:	4452      	addlt	r2, sl
 8013a9c:	46d1      	mov	r9, sl
 8013a9e:	b212      	sxth	r2, r2
 8013aa0:	9906      	ldr	r1, [sp, #24]
 8013aa2:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013aa6:	f101 38ff 	add.w	r8, r1, #4294967295
 8013aaa:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013aae:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013ab2:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013ab6:	fa5f f888 	uxtb.w	r8, r8
 8013aba:	f108 0801 	add.w	r8, r8, #1
 8013abe:	468e      	mov	lr, r1
 8013ac0:	463e      	mov	r6, r7
 8013ac2:	46ac      	mov	ip, r5
 8013ac4:	4490      	add	r8, r2
 8013ac6:	fb92 f3f9 	sdiv	r3, r2, r9
 8013aca:	fb09 2313 	mls	r3, r9, r3, r2
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013ad4:	3201      	adds	r2, #1
 8013ad6:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013ada:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013ade:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013ae2:	42a1      	cmp	r1, r4
 8013ae4:	bfb8      	it	lt
 8013ae6:	4621      	movlt	r1, r4
 8013ae8:	45a6      	cmp	lr, r4
 8013aea:	bfa8      	it	ge
 8013aec:	46a6      	movge	lr, r4
 8013aee:	4285      	cmp	r5, r0
 8013af0:	bfb8      	it	lt
 8013af2:	4605      	movlt	r5, r0
 8013af4:	4584      	cmp	ip, r0
 8013af6:	bfa8      	it	ge
 8013af8:	4684      	movge	ip, r0
 8013afa:	429f      	cmp	r7, r3
 8013afc:	bfb8      	it	lt
 8013afe:	461f      	movlt	r7, r3
 8013b00:	429e      	cmp	r6, r3
 8013b02:	bfa8      	it	ge
 8013b04:	461e      	movge	r6, r3
 8013b06:	4542      	cmp	r2, r8
 8013b08:	d1dd      	bne.n	8013ac6 <MEMS_runMagCal+0x10c6>
 8013b0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b0e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013b12:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013b16:	eba1 010e 	sub.w	r1, r1, lr
 8013b1a:	eba5 050c 	sub.w	r5, r5, ip
 8013b1e:	1bbe      	subs	r6, r7, r6
 8013b20:	b209      	sxth	r1, r1
 8013b22:	b22d      	sxth	r5, r5
 8013b24:	b236      	sxth	r6, r6
 8013b26:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013a54 <MEMS_runMagCal+0x1054>
 8013b2a:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f040 8593 	bne.w	801465a <MEMS_runMagCal+0x1c5a>
 8013b34:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013b38:	fab3 f883 	clz	r8, r3
 8013b3c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013b40:	ee06 1a90 	vmov	s13, r1
 8013b44:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013b4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b50:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b58:	f300 8562 	bgt.w	8014620 <MEMS_runMagCal+0x1c20>
 8013b5c:	ee06 5a10 	vmov	s12, r5
 8013b60:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013b64:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6c:	f100 8558 	bmi.w	8014620 <MEMS_runMagCal+0x1c20>
 8013b70:	ee05 6a90 	vmov	s11, r6
 8013b74:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013b78:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b80:	f100 854e 	bmi.w	8014620 <MEMS_runMagCal+0x1c20>
 8013b84:	428d      	cmp	r5, r1
 8013b86:	462b      	mov	r3, r5
 8013b88:	bfb8      	it	lt
 8013b8a:	460b      	movlt	r3, r1
 8013b8c:	42b3      	cmp	r3, r6
 8013b8e:	461a      	mov	r2, r3
 8013b90:	bfb8      	it	lt
 8013b92:	4632      	movlt	r2, r6
 8013b94:	428e      	cmp	r6, r1
 8013b96:	4633      	mov	r3, r6
 8013b98:	bfa8      	it	ge
 8013b9a:	460b      	movge	r3, r1
 8013b9c:	42ab      	cmp	r3, r5
 8013b9e:	bfa8      	it	ge
 8013ba0:	462b      	movge	r3, r5
 8013ba2:	428a      	cmp	r2, r1
 8013ba4:	9202      	str	r2, [sp, #8]
 8013ba6:	f340 8588 	ble.w	80146ba <MEMS_runMagCal+0x1cba>
 8013baa:	4299      	cmp	r1, r3
 8013bac:	bfb8      	it	lt
 8013bae:	4619      	movlt	r1, r3
 8013bb0:	42aa      	cmp	r2, r5
 8013bb2:	dd02      	ble.n	8013bba <MEMS_runMagCal+0x11ba>
 8013bb4:	42ab      	cmp	r3, r5
 8013bb6:	bfb8      	it	lt
 8013bb8:	4629      	movlt	r1, r5
 8013bba:	9a02      	ldr	r2, [sp, #8]
 8013bbc:	4296      	cmp	r6, r2
 8013bbe:	da02      	bge.n	8013bc6 <MEMS_runMagCal+0x11c6>
 8013bc0:	429e      	cmp	r6, r3
 8013bc2:	bfc8      	it	gt
 8013bc4:	4631      	movgt	r1, r6
 8013bc6:	f1b8 0f00 	cmp.w	r8, #0
 8013bca:	f000 8299 	beq.w	8014100 <MEMS_runMagCal+0x1700>
 8013bce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd6:	dc0d      	bgt.n	8013bf4 <MEMS_runMagCal+0x11f4>
 8013bd8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be0:	dc08      	bgt.n	8013bf4 <MEMS_runMagCal+0x11f4>
 8013be2:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bea:	bfcc      	ite	gt
 8013bec:	f04f 0801 	movgt.w	r8, #1
 8013bf0:	f04f 0800 	movle.w	r8, #0
 8013bf4:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013a58 <MEMS_runMagCal+0x1058>
 8013bf8:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c00:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013c04:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c0c:	f2c0 8558 	blt.w	80146c0 <MEMS_runMagCal+0x1cc0>
 8013c10:	ee07 1a90 	vmov	s15, r1
 8013c14:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013c18:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c20:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c28:	f2c0 854a 	blt.w	80146c0 <MEMS_runMagCal+0x1cc0>
 8013c2c:	9a02      	ldr	r2, [sp, #8]
 8013c2e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013c32:	f280 8545 	bge.w	80146c0 <MEMS_runMagCal+0x1cc0>
 8013c36:	ee07 3a90 	vmov	s15, r3
 8013c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c3e:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013c42:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4e:	f140 8537 	bpl.w	80146c0 <MEMS_runMagCal+0x1cc0>
 8013c52:	9b06      	ldr	r3, [sp, #24]
 8013c54:	4553      	cmp	r3, sl
 8013c56:	f000 8569 	beq.w	801472c <MEMS_runMagCal+0x1d2c>
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	9b04      	ldr	r3, [sp, #16]
 8013c5e:	1a9b      	subs	r3, r3, r2
 8013c60:	fb93 f7f9 	sdiv	r7, r3, r9
 8013c64:	fb09 3717 	mls	r7, r9, r7, r3
 8013c68:	2f00      	cmp	r7, #0
 8013c6a:	bfb8      	it	lt
 8013c6c:	4457      	addlt	r7, sl
 8013c6e:	b23f      	sxth	r7, r7
 8013c70:	9b03      	ldr	r3, [sp, #12]
 8013c72:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013c76:	b27f      	sxtb	r7, r7
 8013c78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013c7c:	9304      	str	r3, [sp, #16]
 8013c7e:	f1c7 0e01 	rsb	lr, r7, #1
 8013c82:	469c      	mov	ip, r3
 8013c84:	463b      	mov	r3, r7
 8013c86:	fb93 f1f9 	sdiv	r1, r3, r9
 8013c8a:	fb09 3111 	mls	r1, r9, r1, r3
 8013c8e:	b24a      	sxtb	r2, r1
 8013c90:	2a00      	cmp	r2, #0
 8013c92:	f107 0701 	add.w	r7, r7, #1
 8013c96:	bfb8      	it	lt
 8013c98:	eb0a 0201 	addlt.w	r2, sl, r1
 8013c9c:	fb97 f3f9 	sdiv	r3, r7, r9
 8013ca0:	fb09 7313 	mls	r3, r9, r3, r7
 8013ca4:	bfb8      	it	lt
 8013ca6:	b252      	sxtblt	r2, r2
 8013ca8:	b25b      	sxtb	r3, r3
 8013caa:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013cae:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013cb2:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013cb6:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8013cba:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013cbe:	1a45      	subs	r5, r0, r1
 8013cc0:	bf48      	it	mi
 8013cc2:	1a09      	submi	r1, r1, r0
 8013cc4:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013cc8:	bf4c      	ite	mi
 8013cca:	b20d      	sxthmi	r5, r1
 8013ccc:	b22d      	sxthpl	r5, r5
 8013cce:	1a21      	subs	r1, r4, r0
 8013cd0:	bf48      	it	mi
 8013cd2:	1b01      	submi	r1, r0, r4
 8013cd4:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013cd8:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8013cdc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013ce0:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013ce4:	1a9b      	subs	r3, r3, r2
 8013ce6:	1a26      	subs	r6, r4, r0
 8013ce8:	b21b      	sxth	r3, r3
 8013cea:	bf48      	it	mi
 8013cec:	1b06      	submi	r6, r0, r4
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	b209      	sxth	r1, r1
 8013cf2:	b236      	sxth	r6, r6
 8013cf4:	dd20      	ble.n	8013d38 <MEMS_runMagCal+0x1338>
 8013cf6:	4429      	add	r1, r5
 8013cf8:	440e      	add	r6, r1
 8013cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013cfe:	fb02 f606 	mul.w	r6, r2, r6
 8013d02:	ee07 6a90 	vmov	s15, r6
 8013d06:	ee07 3a10 	vmov	s14, r3
 8013d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d12:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013d16:	f10c 0c01 	add.w	ip, ip, #1
 8013d1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013d1e:	fa5f fc8c 	uxtb.w	ip, ip
 8013d22:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013d26:	ee17 3a90 	vmov	r3, s15
 8013d2a:	b21b      	sxth	r3, r3
 8013d2c:	2b96      	cmp	r3, #150	; 0x96
 8013d2e:	dd03      	ble.n	8013d38 <MEMS_runMagCal+0x1338>
 8013d30:	9b04      	ldr	r3, [sp, #16]
 8013d32:	3301      	adds	r3, #1
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	9304      	str	r3, [sp, #16]
 8013d38:	eb0e 0307 	add.w	r3, lr, r7
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	4598      	cmp	r8, r3
 8013d40:	d8a0      	bhi.n	8013c84 <MEMS_runMagCal+0x1284>
 8013d42:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8013d46:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013d4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013d4e:	4563      	cmp	r3, ip
 8013d50:	f340 820c 	ble.w	801416c <MEMS_runMagCal+0x176c>
 8013d54:	9b07      	ldr	r3, [sp, #28]
 8013d56:	b92b      	cbnz	r3, 8013d64 <MEMS_runMagCal+0x1364>
 8013d58:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013d5c:	3b02      	subs	r3, #2
 8013d5e:	2b01      	cmp	r3, #1
 8013d60:	f240 851e 	bls.w	80147a0 <MEMS_runMagCal+0x1da0>
 8013d64:	ac25      	add	r4, sp, #148	; 0x94
 8013d66:	2220      	movs	r2, #32
 8013d68:	4620      	mov	r0, r4
 8013d6a:	2100      	movs	r1, #0
 8013d6c:	f003 fb34 	bl	80173d8 <memset>
 8013d70:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8013d74:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013d78:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	4286      	cmp	r6, r0
 8013d80:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8013d84:	921f      	str	r2, [sp, #124]	; 0x7c
 8013d86:	f103 0301 	add.w	r3, r3, #1
 8013d8a:	f000 8501 	beq.w	8014790 <MEMS_runMagCal+0x1d90>
 8013d8e:	1b9b      	subs	r3, r3, r6
 8013d90:	fb93 f2f0 	sdiv	r2, r3, r0
 8013d94:	fb00 3312 	mls	r3, r0, r2, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	bfb8      	it	lt
 8013d9c:	181b      	addlt	r3, r3, r0
 8013d9e:	b21a      	sxth	r2, r3
 8013da0:	2e00      	cmp	r6, #0
 8013da2:	f000 854c 	beq.w	801483e <MEMS_runMagCal+0x1e3e>
 8013da6:	1e77      	subs	r7, r6, #1
 8013da8:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013a5c <MEMS_runMagCal+0x105c>
 8013dac:	b2fd      	uxtb	r5, r7
 8013dae:	3501      	adds	r5, #1
 8013db0:	eeb0 5a65 	vmov.f32	s10, s11
 8013db4:	eef0 4a65 	vmov.f32	s9, s11
 8013db8:	4415      	add	r5, r2
 8013dba:	4611      	mov	r1, r2
 8013dbc:	fb91 f3f0 	sdiv	r3, r1, r0
 8013dc0:	fb00 1313 	mls	r3, r0, r3, r1
 8013dc4:	b2db      	uxtb	r3, r3
 8013dc6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013dca:	3101      	adds	r1, #1
 8013dcc:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8013dd0:	ee06 ca90 	vmov	s13, ip
 8013dd4:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8013dd8:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013ddc:	ee07 ca10 	vmov	s14, ip
 8013de0:	ee07 3a90 	vmov	s15, r3
 8013de4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013de8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013df0:	42a9      	cmp	r1, r5
 8013df2:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8013df6:	ee35 5a07 	vadd.f32	s10, s10, s14
 8013dfa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013dfe:	d1dd      	bne.n	8013dbc <MEMS_runMagCal+0x13bc>
 8013e00:	ee07 6a90 	vmov	s15, r6
 8013e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e0c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8013e10:	b2f9      	uxtb	r1, r7
 8013e12:	3101      	adds	r1, #1
 8013e14:	4411      	add	r1, r2
 8013e16:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 80141c4 <MEMS_runMagCal+0x17c4>
 8013e1a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 8013e1e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8013e22:	ee29 aa85 	vmul.f32	s20, s19, s10
 8013e26:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8013e2a:	eef0 4a46 	vmov.f32	s9, s12
 8013e2e:	eeb0 4a46 	vmov.f32	s8, s12
 8013e32:	eef0 3a46 	vmov.f32	s7, s12
 8013e36:	eeb0 3a46 	vmov.f32	s6, s12
 8013e3a:	eef0 2a46 	vmov.f32	s5, s12
 8013e3e:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8013e42:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8013e46:	fb92 f3f0 	sdiv	r3, r2, r0
 8013e4a:	fb00 2313 	mls	r3, r0, r3, r2
 8013e4e:	b2db      	uxtb	r3, r3
 8013e50:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013e54:	3201      	adds	r2, #1
 8013e56:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8013e5a:	ee06 5a90 	vmov	s13, r5
 8013e5e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013e62:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013e66:	ee07 5a10 	vmov	s14, r5
 8013e6a:	ee07 3a90 	vmov	s15, r3
 8013e6e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013e72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e7a:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8013e7e:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8013e82:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8013e86:	4291      	cmp	r1, r2
 8013e88:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8013e8c:	eea6 3a87 	vfma.f32	s6, s13, s14
 8013e90:	eea7 4a07 	vfma.f32	s8, s14, s14
 8013e94:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8013e98:	eee7 4a27 	vfma.f32	s9, s14, s15
 8013e9c:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013ea0:	d1d1      	bne.n	8013e46 <MEMS_runMagCal+0x1446>
 8013ea2:	edc4 2a00 	vstr	s5, [r4]
 8013ea6:	ed84 3a01 	vstr	s6, [r4, #4]
 8013eaa:	edc4 3a02 	vstr	s7, [r4, #8]
 8013eae:	ed84 4a03 	vstr	s8, [r4, #12]
 8013eb2:	edc4 4a04 	vstr	s9, [r4, #16]
 8013eb6:	ed84 6a05 	vstr	s12, [r4, #20]
 8013eba:	a91a      	add	r1, sp, #104	; 0x68
 8013ebc:	4620      	mov	r0, r4
 8013ebe:	f7fe fce5 	bl	801288c <MEMS_EIG3>
 8013ec2:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8013ec6:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8013eca:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8013ece:	eef0 5ae4 	vabs.f32	s11, s9
 8013ed2:	eef0 6ac6 	vabs.f32	s13, s12
 8013ed6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ede:	bf8c      	ite	hi
 8013ee0:	eef0 7a65 	vmovhi.f32	s15, s11
 8013ee4:	eef0 7a66 	vmovls.f32	s15, s13
 8013ee8:	eeb0 7ac5 	vabs.f32	s14, s10
 8013eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef4:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013ef8:	bf88      	it	hi
 8013efa:	eef0 7a47 	vmovhi.f32	s15, s14
 8013efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f02:	bfb8      	it	lt
 8013f04:	eef0 6a65 	vmovlt.f32	s13, s11
 8013f08:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f0c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8013f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f14:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013f18:	bfb8      	it	lt
 8013f1a:	eeb0 7a66 	vmovlt.f32	s14, s13
 8013f1e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f26:	f300 8420 	bgt.w	801476a <MEMS_runMagCal+0x1d6a>
 8013f2a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8013f2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f32:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3e:	dd02      	ble.n	8013f46 <MEMS_runMagCal+0x1546>
 8013f40:	2b22      	cmp	r3, #34	; 0x22
 8013f42:	f240 8412 	bls.w	801476a <MEMS_runMagCal+0x1d6a>
 8013f46:	ee76 7a24 	vadd.f32	s15, s12, s9
 8013f4a:	ee07 3a10 	vmov	s14, r3
 8013f4e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013f52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013f56:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014198 <MEMS_runMagCal+0x1798>
 8013f5a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8013f5e:	eef1 7ac6 	vsqrt.f32	s15, s12
 8013f62:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013f66:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6e:	f300 83fc 	bgt.w	801476a <MEMS_runMagCal+0x1d6a>
 8013f72:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f7e:	f100 83f4 	bmi.w	801476a <MEMS_runMagCal+0x1d6a>
 8013f82:	eddf 7a86 	vldr	s15, [pc, #536]	; 801419c <MEMS_runMagCal+0x179c>
 8013f86:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8013f90:	932c      	str	r3, [sp, #176]	; 0xb0
 8013f92:	eddd 7a02 	vldr	s15, [sp, #8]
 8013f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa2:	d408      	bmi.n	8013fb6 <MEMS_runMagCal+0x15b6>
 8013fa4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013fa8:	ee17 3a10 	vmov	r3, s14
 8013fac:	b21b      	sxth	r3, r3
 8013fae:	ee07 3a90 	vmov	s15, r3
 8013fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fb6:	eddf 6a81 	vldr	s13, [pc, #516]	; 80141bc <MEMS_runMagCal+0x17bc>
 8013fba:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8013fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc6:	dc08      	bgt.n	8013fda <MEMS_runMagCal+0x15da>
 8013fc8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013fcc:	ee17 3a10 	vmov	r3, s14
 8013fd0:	b21b      	sxth	r3, r3
 8013fd2:	ee07 3a90 	vmov	s15, r3
 8013fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fda:	ee27 7a88 	vmul.f32	s14, s15, s16
 8013fde:	eddf 7a70 	vldr	s15, [pc, #448]	; 80141a0 <MEMS_runMagCal+0x17a0>
 8013fe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fea:	f340 8424 	ble.w	8014836 <MEMS_runMagCal+0x1e36>
 8013fee:	eddf 7a6d 	vldr	s15, [pc, #436]	; 80141a4 <MEMS_runMagCal+0x17a4>
 8013ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ffa:	f140 841c 	bpl.w	8014836 <MEMS_runMagCal+0x1e36>
 8013ffe:	eddf 6a6a 	vldr	s13, [pc, #424]	; 80141a8 <MEMS_runMagCal+0x17a8>
 8014002:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014006:	eee7 7a26 	vfma.f32	s15, s14, s13
 801400a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801400e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014012:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80141bc <MEMS_runMagCal+0x17bc>
 8014016:	eddf ba6b 	vldr	s23, [pc, #428]	; 80141c4 <MEMS_runMagCal+0x17c4>
 801401a:	ed9f ba64 	vldr	s22, [pc, #400]	; 80141ac <MEMS_runMagCal+0x17ac>
 801401e:	eddf aa64 	vldr	s21, [pc, #400]	; 80141b0 <MEMS_runMagCal+0x17b0>
 8014022:	9d03      	ldr	r5, [sp, #12]
 8014024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014028:	ee68 4a09 	vmul.f32	s9, s16, s18
 801402c:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8014030:	ee68 9a29 	vmul.f32	s19, s16, s19
 8014034:	edc4 4a00 	vstr	s9, [r4]
 8014038:	ed84 aa01 	vstr	s20, [r4, #4]
 801403c:	edc4 9a02 	vstr	s19, [r4, #8]
 8014040:	edc4 7a03 	vstr	s15, [r4, #12]
 8014044:	edc4 7a06 	vstr	s15, [r4, #24]
 8014048:	ab11      	add	r3, sp, #68	; 0x44
 801404a:	ee1c 0a10 	vmov	r0, s24
 801404e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014050:	eeb0 0a48 	vmov.f32	s0, s16
 8014054:	4621      	mov	r1, r4
 8014056:	f7fe fa01 	bl	801245c <MEMS_SolveLinearEq>
 801405a:	1c6b      	adds	r3, r5, #1
 801405c:	2800      	cmp	r0, #0
 801405e:	f43e aed1 	beq.w	8012e04 <MEMS_runMagCal+0x404>
 8014062:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8014066:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 801406a:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 801406e:	edd4 4a00 	vldr	s9, [r4]
 8014072:	ed94 5a01 	vldr	s10, [r4, #4]
 8014076:	edd4 5a02 	vldr	s11, [r4, #8]
 801407a:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 801407e:	ed94 6a03 	vldr	s12, [r4, #12]
 8014082:	eef0 6ae3 	vabs.f32	s13, s7
 8014086:	eef0 7ac3 	vabs.f32	s15, s6
 801408a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014092:	bfb8      	it	lt
 8014094:	eef0 7a66 	vmovlt.f32	s15, s13
 8014098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a0:	bfb8      	it	lt
 80140a2:	eef0 7a6b 	vmovlt.f32	s15, s23
 80140a6:	eef0 6ac4 	vabs.f32	s13, s8
 80140aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80140ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140b2:	bfb8      	it	lt
 80140b4:	eef0 6a67 	vmovlt.f32	s13, s15
 80140b8:	ee74 4a83 	vadd.f32	s9, s9, s6
 80140bc:	ee35 5a23 	vadd.f32	s10, s10, s7
 80140c0:	ee75 5a84 	vadd.f32	s11, s11, s8
 80140c4:	ee36 6a07 	vadd.f32	s12, s12, s14
 80140c8:	eef4 6acb 	vcmpe.f32	s13, s22
 80140cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140d0:	edc4 4a00 	vstr	s9, [r4]
 80140d4:	ed84 5a01 	vstr	s10, [r4, #4]
 80140d8:	edc4 5a02 	vstr	s11, [r4, #8]
 80140dc:	ed84 6a03 	vstr	s12, [r4, #12]
 80140e0:	eef0 7ac7 	vabs.f32	s15, s14
 80140e4:	d507      	bpl.n	80140f6 <MEMS_runMagCal+0x16f6>
 80140e6:	eef4 7aea 	vcmpe.f32	s15, s21
 80140ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ee:	d502      	bpl.n	80140f6 <MEMS_runMagCal+0x16f6>
 80140f0:	2d01      	cmp	r5, #1
 80140f2:	f63e ae8b 	bhi.w	8012e0c <MEMS_runMagCal+0x40c>
 80140f6:	b2dd      	uxtb	r5, r3
 80140f8:	2d05      	cmp	r5, #5
 80140fa:	d1a5      	bne.n	8014048 <MEMS_runMagCal+0x1648>
 80140fc:	f7fe be86 	b.w	8012e0c <MEMS_runMagCal+0x40c>
 8014100:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8014104:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8014108:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 801410c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 80141b4 <MEMS_runMagCal+0x17b4>
 8014110:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014114:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8014118:	ee77 7a85 	vadd.f32	s15, s15, s10
 801411c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014120:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014124:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801412c:	bf88      	it	hi
 801412e:	eef0 7a64 	vmovhi.f32	s15, s9
 8014132:	eef4 7ac5 	vcmpe.f32	s15, s10
 8014136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413a:	bfb8      	it	lt
 801413c:	eef0 7a45 	vmovlt.f32	s15, s10
 8014140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014144:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414c:	dc0e      	bgt.n	801416c <MEMS_runMagCal+0x176c>
 801414e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014152:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801415a:	dc07      	bgt.n	801416c <MEMS_runMagCal+0x176c>
 801415c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014168:	f77f ad73 	ble.w	8013c52 <MEMS_runMagCal+0x1252>
 801416c:	2300      	movs	r3, #0
 801416e:	f88b 3000 	strb.w	r3, [fp]
 8014172:	f7ff b880 	b.w	8013276 <MEMS_runMagCal+0x876>
 8014176:	2300      	movs	r3, #0
 8014178:	9307      	str	r3, [sp, #28]
 801417a:	2301      	movs	r3, #1
 801417c:	9303      	str	r3, [sp, #12]
 801417e:	f7ff bb61 	b.w	8013844 <MEMS_runMagCal+0xe44>
 8014182:	3301      	adds	r3, #1
 8014184:	fb93 f2f7 	sdiv	r2, r3, r7
 8014188:	fb07 3212 	mls	r2, r7, r2, r3
 801418c:	930b      	str	r3, [sp, #44]	; 0x2c
 801418e:	b212      	sxth	r2, r2
 8014190:	46bc      	mov	ip, r7
 8014192:	f7ff bb75 	b.w	8013880 <MEMS_runMagCal+0xe80>
 8014196:	bf00      	nop
 8014198:	42960000 	.word	0x42960000
 801419c:	430d0000 	.word	0x430d0000
 80141a0:	41966667 	.word	0x41966667
 80141a4:	433c0000 	.word	0x433c0000
 80141a8:	3c2e4c41 	.word	0x3c2e4c41
 80141ac:	3e99999a 	.word	0x3e99999a
 80141b0:	3f666666 	.word	0x3f666666
 80141b4:	3eaaaaab 	.word	0x3eaaaaab
 80141b8:	358637bd 	.word	0x358637bd
 80141bc:	423c0000 	.word	0x423c0000
 80141c0:	3a83126f 	.word	0x3a83126f
 80141c4:	00000000 	.word	0x00000000
 80141c8:	eddd 7a08 	vldr	s15, [sp, #32]
 80141cc:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 80141c0 <MEMS_runMagCal+0x17c0>
 80141d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80141d4:	ee07 3a10 	vmov	s14, r3
 80141d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80141dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80141e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80141e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80141e8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80141ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f0:	f63f aa67 	bhi.w	80136c2 <MEMS_runMagCal+0xcc2>
 80141f4:	9b07      	ldr	r3, [sp, #28]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f43f a83d 	beq.w	8013276 <MEMS_runMagCal+0x876>
 80141fc:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8014200:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014204:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801420c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014214:	bf4c      	ite	mi
 8014216:	2301      	movmi	r3, #1
 8014218:	2300      	movpl	r3, #0
 801421a:	9307      	str	r3, [sp, #28]
 801421c:	f7ff ba55 	b.w	80136ca <MEMS_runMagCal+0xcca>
 8014220:	fb92 f1f0 	sdiv	r1, r2, r0
 8014224:	fb00 2211 	mls	r2, r0, r1, r2
 8014228:	b211      	sxth	r1, r2
 801422a:	4605      	mov	r5, r0
 801422c:	f7ff b8da 	b.w	80133e4 <MEMS_runMagCal+0x9e4>
 8014230:	2200      	movs	r2, #0
 8014232:	23ff      	movs	r3, #255	; 0xff
 8014234:	ee1c 0a10 	vmov	r0, s24
 8014238:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801423c:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8014240:	eeb0 0a49 	vmov.f32	s0, s18
 8014244:	4649      	mov	r1, r9
 8014246:	f7f7 fd11 	bl	800bc6c <MEMS_updateMagBufferIndex>
 801424a:	f7ff b90b 	b.w	8013464 <MEMS_runMagCal+0xa64>
 801424e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014252:	fb03 f60c 	mul.w	r6, r3, ip
 8014256:	fb03 f202 	mul.w	r2, r3, r2
 801425a:	fb03 f301 	mul.w	r3, r3, r1
 801425e:	ee06 6a90 	vmov	s13, r6
 8014262:	ee07 2a10 	vmov	s14, r2
 8014266:	ee07 3a90 	vmov	s15, r3
 801426a:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 80141b8 <MEMS_runMagCal+0x17b8>
 801426e:	9e05      	ldr	r6, [sp, #20]
 8014270:	9400      	str	r4, [sp, #0]
 8014272:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014276:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801427a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801427e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014282:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014286:	ee67 7a86 	vmul.f32	s15, s15, s12
 801428a:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 801428e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8014292:	e9c5 0003 	strd	r0, r0, [r5, #12]
 8014296:	e9c5 0005 	strd	r0, r0, [r5, #20]
 801429a:	6028      	str	r0, [r5, #0]
 801429c:	ed96 0a01 	vldr	s0, [r6, #4]
 80142a0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 80142a4:	4642      	mov	r2, r8
 80142a6:	ab0d      	add	r3, sp, #52	; 0x34
 80142a8:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 80142ac:	ad0e      	add	r5, sp, #56	; 0x38
 80142ae:	ee1c 0a10 	vmov	r0, s24
 80142b2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80142b6:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80142ba:	f7f7 fd79 	bl	800bdb0 <getMagStats.constprop.0>
 80142be:	9500      	str	r5, [sp, #0]
 80142c0:	ed96 0a01 	vldr	s0, [r6, #4]
 80142c4:	ee1c 0a10 	vmov	r0, s24
 80142c8:	aa2d      	add	r2, sp, #180	; 0xb4
 80142ca:	ab0d      	add	r3, sp, #52	; 0x34
 80142cc:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80142d0:	f7f7 fd6e 	bl	800bdb0 <getMagStats.constprop.0>
 80142d4:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 80141bc <MEMS_runMagCal+0x17bc>
 80142d8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80142dc:	ed95 7a00 	vldr	s14, [r5]
 80142e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80142e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80142e8:	eef0 7ae7 	vabs.f32	s15, s15
 80142ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80142f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f4:	d505      	bpl.n	8014302 <MEMS_runMagCal+0x1902>
 80142f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80142fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fe:	f100 81fa 	bmi.w	80146f6 <MEMS_runMagCal+0x1cf6>
 8014302:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8014306:	eef4 7ae6 	vcmpe.f32	s15, s13
 801430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430e:	f140 81a8 	bpl.w	8014662 <MEMS_runMagCal+0x1c62>
 8014312:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801431a:	9b03      	ldr	r3, [sp, #12]
 801431c:	bfb8      	it	lt
 801431e:	2302      	movlt	r3, #2
 8014320:	edd4 6a00 	vldr	s13, [r4]
 8014324:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801432c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014334:	f57e af9f 	bpl.w	8013276 <MEMS_runMagCal+0x876>
 8014338:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 801433c:	429a      	cmp	r2, r3
 801433e:	f63e af9a 	bhi.w	8013276 <MEMS_runMagCal+0x876>
 8014342:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8014346:	ee67 7a27 	vmul.f32	s15, s14, s15
 801434a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014352:	d40e      	bmi.n	8014372 <MEMS_runMagCal+0x1972>
 8014354:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014358:	eef4 6ae7 	vcmpe.f32	s13, s15
 801435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014360:	f140 80d4 	bpl.w	801450c <MEMS_runMagCal+0x1b0c>
 8014364:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8014368:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801436c:	429a      	cmp	r2, r3
 801436e:	f080 80cd 	bcs.w	801450c <MEMS_runMagCal+0x1b0c>
 8014372:	9b05      	ldr	r3, [sp, #20]
 8014374:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8014378:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 801437c:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8014380:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 8014384:	edd3 5a01 	vldr	s11, [r3, #4]
 8014388:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 801438c:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8014390:	1b8b      	subs	r3, r1, r6
 8014392:	eba0 0c07 	sub.w	ip, r0, r7
 8014396:	2b00      	cmp	r3, #0
 8014398:	bfb8      	it	lt
 801439a:	425b      	neglt	r3, r3
 801439c:	f1bc 0f00 	cmp.w	ip, #0
 80143a0:	bfb8      	it	lt
 80143a2:	f1cc 0c00 	rsblt	ip, ip, #0
 80143a6:	4563      	cmp	r3, ip
 80143a8:	bfb8      	it	lt
 80143aa:	4663      	movlt	r3, ip
 80143ac:	eba2 0c04 	sub.w	ip, r2, r4
 80143b0:	f1bc 0f00 	cmp.w	ip, #0
 80143b4:	b21b      	sxth	r3, r3
 80143b6:	bfb8      	it	lt
 80143b8:	f1cc 0c00 	rsblt	ip, ip, #0
 80143bc:	4563      	cmp	r3, ip
 80143be:	bfb8      	it	lt
 80143c0:	4663      	movlt	r3, ip
 80143c2:	b21b      	sxth	r3, r3
 80143c4:	ee07 3a90 	vmov	s15, r3
 80143c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143cc:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80143d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80143d4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80143d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143dc:	f140 8096 	bpl.w	801450c <MEMS_runMagCal+0x1b0c>
 80143e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80143e4:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 80143e8:	ee86 2a87 	vdiv.f32	s4, s13, s14
 80143ec:	ee04 3a90 	vmov	s9, r3
 80143f0:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 80143f4:	ee05 3a10 	vmov	s10, r3
 80143f8:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 80143fc:	ee07 0a90 	vmov	s15, r0
 8014400:	ee05 3a90 	vmov	s11, r3
 8014404:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8014408:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801440c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014410:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014414:	ee06 3a10 	vmov	s12, r3
 8014418:	ee03 7a90 	vmov	s7, r7
 801441c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8014420:	ee07 1a90 	vmov	s15, r1
 8014424:	ee00 3a90 	vmov	s1, r3
 8014428:	ee66 6a84 	vmul.f32	s13, s13, s8
 801442c:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8014430:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014434:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8014438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801443c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014440:	ee03 6a90 	vmov	s7, r6
 8014444:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014448:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801444c:	ee07 2a90 	vmov	s15, r2
 8014450:	ee01 3a10 	vmov	s2, r3
 8014454:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014458:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801445c:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8014460:	eee2 4a20 	vfma.f32	s9, s4, s1
 8014464:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014468:	ee01 3a90 	vmov	s3, r3
 801446c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014470:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8014474:	eea2 7a03 	vfma.f32	s14, s4, s6
 8014478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801447c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014480:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014484:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014488:	ee03 4a90 	vmov	s7, r4
 801448c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014490:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014494:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014498:	ee26 6a04 	vmul.f32	s12, s12, s8
 801449c:	ee16 2a90 	vmov	r2, s13
 80144a0:	ee04 3a10 	vmov	s8, r3
 80144a4:	eea2 5a01 	vfma.f32	s10, s4, s2
 80144a8:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 80144ac:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80144b0:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80144b4:	eee2 7a23 	vfma.f32	s15, s4, s7
 80144b8:	ee14 2a90 	vmov	r2, s9
 80144bc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80144c0:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80144c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80144c8:	eee2 5a21 	vfma.f32	s11, s4, s3
 80144cc:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 80144d0:	eea2 6a04 	vfma.f32	s12, s4, s8
 80144d4:	ee17 2a10 	vmov	r2, s14
 80144d8:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80144dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144e0:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 80144e4:	ee15 2a10 	vmov	r2, s10
 80144e8:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80144ec:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80144f0:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80144f4:	ee17 2a90 	vmov	r2, s15
 80144f8:	ee16 3a10 	vmov	r3, s12
 80144fc:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8014500:	ee15 2a90 	vmov	r2, s11
 8014504:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8014508:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 801450c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801450e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8014512:	f7fe bda2 	b.w	801305a <MEMS_runMagCal+0x65a>
 8014516:	ee1c 0a10 	vmov	r0, s24
 801451a:	eeb0 0a49 	vmov.f32	s0, s18
 801451e:	4649      	mov	r1, r9
 8014520:	f7f7 fba4 	bl	800bc6c <MEMS_updateMagBufferIndex>
 8014524:	f7ff b89f 	b.w	8013666 <MEMS_runMagCal+0xc66>
 8014528:	eddd 7a08 	vldr	s15, [sp, #32]
 801452c:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 80141c0 <MEMS_runMagCal+0x17c0>
 8014530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014538:	e660      	b.n	80141fc <MEMS_runMagCal+0x17fc>
 801453a:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 80141c4 <MEMS_runMagCal+0x17c4>
 801453e:	1c6b      	adds	r3, r5, #1
 8014540:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014544:	ad0e      	add	r5, sp, #56	; 0x38
 8014546:	fb93 f1f6 	sdiv	r1, r3, r6
 801454a:	fa1f fc86 	uxth.w	ip, r6
 801454e:	fb06 3311 	mls	r3, r6, r1, r3
 8014552:	edc5 6a00 	vstr	s13, [r5]
 8014556:	2e00      	cmp	r6, #0
 8014558:	f000 80e1 	beq.w	801471e <MEMS_runMagCal+0x1d1e>
 801455c:	b29b      	uxth	r3, r3
 801455e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014562:	1c58      	adds	r0, r3, #1
 8014564:	eeb0 6a66 	vmov.f32	s12, s13
 8014568:	fa10 fc8c 	uxtah	ip, r0, ip
 801456c:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8014570:	4619      	mov	r1, r3
 8014572:	e000      	b.n	8014576 <MEMS_runMagCal+0x1b76>
 8014574:	3001      	adds	r0, #1
 8014576:	fbb1 f3f6 	udiv	r3, r1, r6
 801457a:	fb06 1313 	mls	r3, r6, r3, r1
 801457e:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8014582:	8a99      	ldrh	r1, [r3, #20]
 8014584:	4571      	cmp	r1, lr
 8014586:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 801458a:	f1a3 031c 	sub.w	r3, r3, #28
 801458e:	bf98      	it	ls
 8014590:	ebae 0301 	subls.w	r3, lr, r1
 8014594:	b29b      	uxth	r3, r3
 8014596:	fb03 f303 	mul.w	r3, r3, r3
 801459a:	ee07 1a10 	vmov	s14, r1
 801459e:	ee07 3a90 	vmov	s15, r3
 80145a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80145a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145aa:	4584      	cmp	ip, r0
 80145ac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80145b0:	ee36 6a07 	vadd.f32	s12, s12, s14
 80145b4:	4601      	mov	r1, r0
 80145b6:	d1dd      	bne.n	8014574 <MEMS_runMagCal+0x1b74>
 80145b8:	ee07 4a90 	vmov	s15, r4
 80145bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145c0:	eddf 5ae6 	vldr	s11, [pc, #920]	; 801495c <MEMS_runMagCal+0x1f5c>
 80145c4:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014960 <MEMS_runMagCal+0x1f60>
 80145c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80145cc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80145d0:	eef1 7ac7 	vsqrt.f32	s15, s14
 80145d4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80145d8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80145dc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80145e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e4:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80145e8:	edc5 7a00 	vstr	s15, [r5]
 80145ec:	dd47      	ble.n	801467e <MEMS_runMagCal+0x1c7e>
 80145ee:	eddf 7add 	vldr	s15, [pc, #884]	; 8014964 <MEMS_runMagCal+0x1f64>
 80145f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80145f6:	2302      	movs	r3, #2
 80145f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145fc:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014600:	f77e aead 	ble.w	801335e <MEMS_runMagCal+0x95e>
 8014604:	2301      	movs	r3, #1
 8014606:	f88b 3001 	strb.w	r3, [fp, #1]
 801460a:	f7fe bea8 	b.w	801335e <MEMS_runMagCal+0x95e>
 801460e:	ee1c 0a10 	vmov	r0, s24
 8014612:	eeb0 0a49 	vmov.f32	s0, s18
 8014616:	4649      	mov	r1, r9
 8014618:	f7f7 fb28 	bl	800bc6c <MEMS_updateMagBufferIndex>
 801461c:	f7fe bf0d 	b.w	801343a <MEMS_runMagCal+0xa3a>
 8014620:	9b02      	ldr	r3, [sp, #8]
 8014622:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8014626:	f8db 100c 	ldr.w	r1, [fp, #12]
 801462a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801462e:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8014632:	4413      	add	r3, r2
 8014634:	4299      	cmp	r1, r3
 8014636:	f4bf ad99 	bcs.w	801416c <MEMS_runMagCal+0x176c>
 801463a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801463c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014640:	fb03 f301 	mul.w	r3, r3, r1
 8014644:	3364      	adds	r3, #100	; 0x64
 8014646:	4293      	cmp	r3, r2
 8014648:	bf38      	it	cc
 801464a:	4613      	movcc	r3, r2
 801464c:	2200      	movs	r2, #0
 801464e:	f8cb 300c 	str.w	r3, [fp, #12]
 8014652:	f88b 2000 	strb.w	r2, [fp]
 8014656:	f7fe be0e 	b.w	8013276 <MEMS_runMagCal+0x876>
 801465a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801465e:	f7ff ba6f 	b.w	8013b40 <MEMS_runMagCal+0x1140>
 8014662:	9b03      	ldr	r3, [sp, #12]
 8014664:	e65c      	b.n	8014320 <MEMS_runMagCal+0x1920>
 8014666:	4619      	mov	r1, r3
 8014668:	9b02      	ldr	r3, [sp, #8]
 801466a:	3301      	adds	r3, #1
 801466c:	fb93 f2f1 	sdiv	r2, r3, r1
 8014670:	fb01 3212 	mls	r2, r1, r2, r3
 8014674:	9304      	str	r3, [sp, #16]
 8014676:	b212      	sxth	r2, r2
 8014678:	4689      	mov	r9, r1
 801467a:	f7ff ba11 	b.w	8013aa0 <MEMS_runMagCal+0x10a0>
 801467e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014968 <MEMS_runMagCal+0x1f68>
 8014682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468a:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014964 <MEMS_runMagCal+0x1f64>
 801468e:	d434      	bmi.n	80146fa <MEMS_runMagCal+0x1cfa>
 8014690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014698:	bfc4      	itt	gt
 801469a:	2301      	movgt	r3, #1
 801469c:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80146a0:	f7ff b892 	b.w	80137c8 <MEMS_runMagCal+0xdc8>
 80146a4:	9b05      	ldr	r3, [sp, #20]
 80146a6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80146aa:	ed93 0a01 	vldr	s0, [r3, #4]
 80146ae:	f7fe bd84 	b.w	80131ba <MEMS_runMagCal+0x7ba>
 80146b2:	2303      	movs	r3, #3
 80146b4:	9303      	str	r3, [sp, #12]
 80146b6:	f7fe bdd4 	b.w	8013262 <MEMS_runMagCal+0x862>
 80146ba:	4619      	mov	r1, r3
 80146bc:	f7ff ba78 	b.w	8013bb0 <MEMS_runMagCal+0x11b0>
 80146c0:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 80146c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80146c8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d0:	f73f ad4c 	bgt.w	801416c <MEMS_runMagCal+0x176c>
 80146d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80146d8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80146dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e0:	f73f ad44 	bgt.w	801416c <MEMS_runMagCal+0x176c>
 80146e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80146e8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f0:	f77f aaaf 	ble.w	8013c52 <MEMS_runMagCal+0x1252>
 80146f4:	e53a      	b.n	801416c <MEMS_runMagCal+0x176c>
 80146f6:	2303      	movs	r3, #3
 80146f8:	e612      	b.n	8014320 <MEMS_runMagCal+0x1920>
 80146fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146fe:	2300      	movs	r3, #0
 8014700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014704:	f88b 3001 	strb.w	r3, [fp, #1]
 8014708:	f04f 0103 	mov.w	r1, #3
 801470c:	bfc8      	it	gt
 801470e:	2301      	movgt	r3, #1
 8014710:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014714:	bfc8      	it	gt
 8014716:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801471a:	f7ff b858 	b.w	80137ce <MEMS_runMagCal+0xdce>
 801471e:	2303      	movs	r3, #3
 8014720:	f88b c001 	strb.w	ip, [fp, #1]
 8014724:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014728:	f7ff b851 	b.w	80137ce <MEMS_runMagCal+0xdce>
 801472c:	9b04      	ldr	r3, [sp, #16]
 801472e:	fb93 f7f9 	sdiv	r7, r3, r9
 8014732:	fb09 3717 	mls	r7, r9, r7, r3
 8014736:	b23f      	sxth	r7, r7
 8014738:	f7ff ba9a 	b.w	8013c70 <MEMS_runMagCal+0x1270>
 801473c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 801496c <MEMS_runMagCal+0x1f6c>
 8014740:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014744:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014748:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801474c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014750:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014754:	ee17 2a90 	vmov	r2, s15
 8014758:	b291      	uxth	r1, r2
 801475a:	b113      	cbz	r3, 8014762 <MEMS_runMagCal+0x1d62>
 801475c:	3b01      	subs	r3, #1
 801475e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8014762:	ee1c 0a10 	vmov	r0, s24
 8014766:	f7f7 fa81 	bl	800bc6c <MEMS_updateMagBufferIndex>
 801476a:	eddd 7a08 	vldr	s15, [sp, #32]
 801476e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014772:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014970 <MEMS_runMagCal+0x1f70>
 8014776:	ee20 0a27 	vmul.f32	s0, s0, s15
 801477a:	f001 f825 	bl	80157c8 <roundf>
 801477e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014782:	2300      	movs	r3, #0
 8014784:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014788:	f88b 3000 	strb.w	r3, [fp]
 801478c:	f7fe bd73 	b.w	8013276 <MEMS_runMagCal+0x876>
 8014790:	fb93 f2f6 	sdiv	r2, r3, r6
 8014794:	fb06 3312 	mls	r3, r6, r2, r3
 8014798:	b21a      	sxth	r2, r3
 801479a:	4630      	mov	r0, r6
 801479c:	f7ff bb00 	b.w	8013da0 <MEMS_runMagCal+0x13a0>
 80147a0:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 80147a4:	f001 f810 	bl	80157c8 <roundf>
 80147a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80147ac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80147b0:	ee17 3a90 	vmov	r3, s15
 80147b4:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 80147b8:	f8a9 3000 	strh.w	r3, [r9]
 80147bc:	f001 f804 	bl	80157c8 <roundf>
 80147c0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80147c4:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 80147c8:	ee17 3a90 	vmov	r3, s15
 80147cc:	f8a9 3002 	strh.w	r3, [r9, #2]
 80147d0:	f000 fffa 	bl	80157c8 <roundf>
 80147d4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80147d8:	ac0f      	add	r4, sp, #60	; 0x3c
 80147da:	ee17 5a90 	vmov	r5, s15
 80147de:	9400      	str	r4, [sp, #0]
 80147e0:	ee1c 0a10 	vmov	r0, s24
 80147e4:	4649      	mov	r1, r9
 80147e6:	ab10      	add	r3, sp, #64	; 0x40
 80147e8:	eeb0 0a48 	vmov.f32	s0, s16
 80147ec:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 80147f0:	f8a9 5004 	strh.w	r5, [r9, #4]
 80147f4:	f7f7 fadc 	bl	800bdb0 <getMagStats.constprop.0>
 80147f8:	ed94 7a00 	vldr	s14, [r4]
 80147fc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014974 <MEMS_runMagCal+0x1f74>
 8014800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014808:	d50e      	bpl.n	8014828 <MEMS_runMagCal+0x1e28>
 801480a:	b968      	cbnz	r0, 8014828 <MEMS_runMagCal+0x1e28>
 801480c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014810:	b32b      	cbz	r3, 801485e <MEMS_runMagCal+0x1e5e>
 8014812:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014816:	ee07 3a90 	vmov	s15, r3
 801481a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801481e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014826:	dc1a      	bgt.n	801485e <MEMS_runMagCal+0x1e5e>
 8014828:	2300      	movs	r3, #0
 801482a:	f8c9 3000 	str.w	r3, [r9]
 801482e:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014832:	f7ff ba97 	b.w	8013d64 <MEMS_runMagCal+0x1364>
 8014836:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801483a:	f7ff bbea 	b.w	8014012 <MEMS_runMagCal+0x1612>
 801483e:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014978 <MEMS_runMagCal+0x1f78>
 8014842:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014846:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 801484a:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 801484e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014852:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014856:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801485a:	f7ff bb2e 	b.w	8013eba <MEMS_runMagCal+0x14ba>
 801485e:	eddd 7a08 	vldr	s15, [sp, #32]
 8014862:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014866:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014970 <MEMS_runMagCal+0x1f70>
 801486a:	2303      	movs	r3, #3
 801486c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014870:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014874:	e781      	b.n	801477a <MEMS_runMagCal+0x1d7a>
 8014876:	eddf 6a41 	vldr	s13, [pc, #260]	; 801497c <MEMS_runMagCal+0x1f7c>
 801487a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014882:	f77e ab1b 	ble.w	8012ebc <MEMS_runMagCal+0x4bc>
 8014886:	f7fe bb21 	b.w	8012ecc <MEMS_runMagCal+0x4cc>
 801488a:	2224      	movs	r2, #36	; 0x24
 801488c:	2100      	movs	r1, #0
 801488e:	a82d      	add	r0, sp, #180	; 0xb4
 8014890:	f002 fda2 	bl	80173d8 <memset>
 8014894:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014980 <MEMS_runMagCal+0x1f80>
 8014898:	eec7 9a89 	vdiv.f32	s19, s15, s18
 801489c:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 80148a0:	4627      	mov	r7, r4
 80148a2:	ae2d      	add	r6, sp, #180	; 0xb4
 80148a4:	2500      	movs	r5, #0
 80148a6:	3501      	adds	r5, #1
 80148a8:	ecb7 0a01 	vldmia	r7!, {s0}
 80148ac:	ee28 0a80 	vmul.f32	s0, s17, s0
 80148b0:	f000 ff8a 	bl	80157c8 <roundf>
 80148b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80148b8:	4633      	mov	r3, r6
 80148ba:	edc3 9a00 	vstr	s19, [r3]
 80148be:	ee10 3a10 	vmov	r3, s0
 80148c2:	2d03      	cmp	r5, #3
 80148c4:	f829 3b02 	strh.w	r3, [r9], #2
 80148c8:	f106 0610 	add.w	r6, r6, #16
 80148cc:	d1eb      	bne.n	80148a6 <MEMS_runMagCal+0x1ea6>
 80148ce:	ad12      	add	r5, sp, #72	; 0x48
 80148d0:	9500      	str	r5, [sp, #0]
 80148d2:	ab2b      	add	r3, sp, #172	; 0xac
 80148d4:	eeb0 0a48 	vmov.f32	s0, s16
 80148d8:	ee1c 0a10 	vmov	r0, s24
 80148dc:	a915      	add	r1, sp, #84	; 0x54
 80148de:	aa2d      	add	r2, sp, #180	; 0xb4
 80148e0:	f7f7 fa66 	bl	800bdb0 <getMagStats.constprop.0>
 80148e4:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014980 <MEMS_runMagCal+0x1f80>
 80148e8:	ed94 4a03 	vldr	s8, [r4, #12]
 80148ec:	edd5 7a00 	vldr	s15, [r5]
 80148f0:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 80148f4:	edd4 6a06 	vldr	s13, [r4, #24]
 80148f8:	edd4 4a00 	vldr	s9, [r4]
 80148fc:	ed94 5a01 	vldr	s10, [r4, #4]
 8014900:	edd4 5a02 	vldr	s11, [r4, #8]
 8014904:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014908:	ad2e      	add	r5, sp, #184	; 0xb8
 801490a:	2300      	movs	r3, #0
 801490c:	e9c5 3300 	strd	r3, r3, [r5]
 8014910:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014914:	60ab      	str	r3, [r5, #8]
 8014916:	61ab      	str	r3, [r5, #24]
 8014918:	ee26 6a27 	vmul.f32	s12, s12, s15
 801491c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014924:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014928:	eec5 9a08 	vdiv.f32	s19, s10, s16
 801492c:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014930:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014934:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014938:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801493c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014940:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014944:	d405      	bmi.n	8014952 <MEMS_runMagCal+0x1f52>
 8014946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494e:	f57e aa9b 	bpl.w	8012e88 <MEMS_runMagCal+0x488>
 8014952:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014984 <MEMS_runMagCal+0x1f84>
 8014956:	f7fe ba9d 	b.w	8012e94 <MEMS_runMagCal+0x494>
 801495a:	bf00      	nop
 801495c:	3c23d70a 	.word	0x3c23d70a
 8014960:	4b095440 	.word	0x4b095440
 8014964:	481c4000 	.word	0x481c4000
 8014968:	471c4000 	.word	0x471c4000
 801496c:	433d0000 	.word	0x433d0000
 8014970:	3a83126f 	.word	0x3a83126f
 8014974:	3ff4cccd 	.word	0x3ff4cccd
 8014978:	7f800000 	.word	0x7f800000
 801497c:	3ee66666 	.word	0x3ee66666
 8014980:	423c0000 	.word	0x423c0000
 8014984:	00000000 	.word	0x00000000
 8014988:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 801498c:	4293      	cmp	r3, r2
 801498e:	f67e acac 	bls.w	80132ea <MEMS_runMagCal+0x8ea>
 8014992:	f7fe bca0 	b.w	80132d6 <MEMS_runMagCal+0x8d6>
 8014996:	bf00      	nop

08014998 <MotionFX_GetStateSize>:
 8014998:	f44f 6018 	mov.w	r0, #2432	; 0x980
 801499c:	4770      	bx	lr
 801499e:	bf00      	nop

080149a0 <MotionFX_initialize>:
 80149a0:	4a3b      	ldr	r2, [pc, #236]	; (8014a90 <MotionFX_initialize+0xf0>)
 80149a2:	493c      	ldr	r1, [pc, #240]	; (8014a94 <MotionFX_initialize+0xf4>)
 80149a4:	6813      	ldr	r3, [r2, #0]
 80149a6:	f023 0301 	bic.w	r3, r3, #1
 80149aa:	b530      	push	{r4, r5, lr}
 80149ac:	6013      	str	r3, [r2, #0]
 80149ae:	680b      	ldr	r3, [r1, #0]
 80149b0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80149b4:	4013      	ands	r3, r2
 80149b6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80149ba:	42ab      	cmp	r3, r5
 80149bc:	b085      	sub	sp, #20
 80149be:	4604      	mov	r4, r0
 80149c0:	d013      	beq.n	80149ea <MotionFX_initialize+0x4a>
 80149c2:	680b      	ldr	r3, [r1, #0]
 80149c4:	f24c 2170 	movw	r1, #49776	; 0xc270
 80149c8:	4013      	ands	r3, r2
 80149ca:	428b      	cmp	r3, r1
 80149cc:	d00d      	beq.n	80149ea <MotionFX_initialize+0x4a>
 80149ce:	4b32      	ldr	r3, [pc, #200]	; (8014a98 <MotionFX_initialize+0xf8>)
 80149d0:	2201      	movs	r2, #1
 80149d2:	601a      	str	r2, [r3, #0]
 80149d4:	681a      	ldr	r2, [r3, #0]
 80149d6:	2a00      	cmp	r2, #0
 80149d8:	d1fc      	bne.n	80149d4 <MotionFX_initialize+0x34>
 80149da:	4b30      	ldr	r3, [pc, #192]	; (8014a9c <MotionFX_initialize+0xfc>)
 80149dc:	4a30      	ldr	r2, [pc, #192]	; (8014aa0 <MotionFX_initialize+0x100>)
 80149de:	601a      	str	r2, [r3, #0]
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	4b30      	ldr	r3, [pc, #192]	; (8014aa4 <MotionFX_initialize+0x104>)
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d01f      	beq.n	8014a28 <MotionFX_initialize+0x88>
 80149e8:	e7fe      	b.n	80149e8 <MotionFX_initialize+0x48>
 80149ea:	4b2f      	ldr	r3, [pc, #188]	; (8014aa8 <MotionFX_initialize+0x108>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d1ed      	bne.n	80149ce <MotionFX_initialize+0x2e>
 80149f2:	4a2e      	ldr	r2, [pc, #184]	; (8014aac <MotionFX_initialize+0x10c>)
 80149f4:	6813      	ldr	r3, [r2, #0]
 80149f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80149fa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80149fe:	d006      	beq.n	8014a0e <MotionFX_initialize+0x6e>
 8014a00:	6813      	ldr	r3, [r2, #0]
 8014a02:	f240 4283 	movw	r2, #1155	; 0x483
 8014a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d1df      	bne.n	80149ce <MotionFX_initialize+0x2e>
 8014a0e:	4b28      	ldr	r3, [pc, #160]	; (8014ab0 <MotionFX_initialize+0x110>)
 8014a10:	2201      	movs	r2, #1
 8014a12:	601a      	str	r2, [r3, #0]
 8014a14:	681a      	ldr	r2, [r3, #0]
 8014a16:	2a00      	cmp	r2, #0
 8014a18:	d1fc      	bne.n	8014a14 <MotionFX_initialize+0x74>
 8014a1a:	4b26      	ldr	r3, [pc, #152]	; (8014ab4 <MotionFX_initialize+0x114>)
 8014a1c:	4a20      	ldr	r2, [pc, #128]	; (8014aa0 <MotionFX_initialize+0x100>)
 8014a1e:	601a      	str	r2, [r3, #0]
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	4b20      	ldr	r3, [pc, #128]	; (8014aa4 <MotionFX_initialize+0x104>)
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d1df      	bne.n	80149e8 <MotionFX_initialize+0x48>
 8014a28:	4b23      	ldr	r3, [pc, #140]	; (8014ab8 <MotionFX_initialize+0x118>)
 8014a2a:	4a24      	ldr	r2, [pc, #144]	; (8014abc <MotionFX_initialize+0x11c>)
 8014a2c:	9301      	str	r3, [sp, #4]
 8014a2e:	2501      	movs	r5, #1
 8014a30:	4620      	mov	r0, r4
 8014a32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014a36:	7115      	strb	r5, [r2, #4]
 8014a38:	f7f7 faa0 	bl	800bf7c <MFX_emptyAttitude>
 8014a3c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014a40:	a901      	add	r1, sp, #4
 8014a42:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014a46:	f7f6 fdc3 	bl	800b5d0 <updateOrientation>
 8014a4a:	a903      	add	r1, sp, #12
 8014a4c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014a50:	f7f6 fdbe 	bl	800b5d0 <updateOrientation>
 8014a54:	a902      	add	r1, sp, #8
 8014a56:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014a5a:	f7f6 fdb9 	bl	800b5d0 <updateOrientation>
 8014a5e:	4818      	ldr	r0, [pc, #96]	; (8014ac0 <MotionFX_initialize+0x120>)
 8014a60:	4918      	ldr	r1, [pc, #96]	; (8014ac4 <MotionFX_initialize+0x124>)
 8014a62:	4a19      	ldr	r2, [pc, #100]	; (8014ac8 <MotionFX_initialize+0x128>)
 8014a64:	4b19      	ldr	r3, [pc, #100]	; (8014acc <MotionFX_initialize+0x12c>)
 8014a66:	7365      	strb	r5, [r4, #13]
 8014a68:	4d19      	ldr	r5, [pc, #100]	; (8014ad0 <MotionFX_initialize+0x130>)
 8014a6a:	62a0      	str	r0, [r4, #40]	; 0x28
 8014a6c:	6361      	str	r1, [r4, #52]	; 0x34
 8014a6e:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014a72:	2100      	movs	r1, #0
 8014a74:	61a2      	str	r2, [r4, #24]
 8014a76:	61e3      	str	r3, [r4, #28]
 8014a78:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014a7c:	f240 1301 	movw	r3, #257	; 0x101
 8014a80:	6225      	str	r5, [r4, #32]
 8014a82:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014a84:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014a88:	80a2      	strh	r2, [r4, #4]
 8014a8a:	81e3      	strh	r3, [r4, #14]
 8014a8c:	b005      	add	sp, #20
 8014a8e:	bd30      	pop	{r4, r5, pc}
 8014a90:	e0002000 	.word	0xe0002000
 8014a94:	e000ed00 	.word	0xe000ed00
 8014a98:	40023008 	.word	0x40023008
 8014a9c:	40023000 	.word	0x40023000
 8014aa0:	f407a5c2 	.word	0xf407a5c2
 8014aa4:	b5e8b5cd 	.word	0xb5e8b5cd
 8014aa8:	e0042000 	.word	0xe0042000
 8014aac:	5c001000 	.word	0x5c001000
 8014ab0:	58024c08 	.word	0x58024c08
 8014ab4:	58024c00 	.word	0x58024c00
 8014ab8:	00756e65 	.word	0x00756e65
 8014abc:	200002e0 	.word	0x200002e0
 8014ac0:	3f666666 	.word	0x3f666666
 8014ac4:	3f2ac083 	.word	0x3f2ac083
 8014ac8:	3a51b717 	.word	0x3a51b717
 8014acc:	3a378034 	.word	0x3a378034
 8014ad0:	3b378034 	.word	0x3b378034

08014ad4 <MotionFX_setKnobs>:
 8014ad4:	4b23      	ldr	r3, [pc, #140]	; (8014b64 <MotionFX_setKnobs+0x90>)
 8014ad6:	791b      	ldrb	r3, [r3, #4]
 8014ad8:	b903      	cbnz	r3, 8014adc <MotionFX_setKnobs+0x8>
 8014ada:	4770      	bx	lr
 8014adc:	2900      	cmp	r1, #0
 8014ade:	d0fc      	beq.n	8014ada <MotionFX_setKnobs+0x6>
 8014ae0:	b570      	push	{r4, r5, r6, lr}
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	684a      	ldr	r2, [r1, #4]
 8014ae6:	6808      	ldr	r0, [r1, #0]
 8014ae8:	688b      	ldr	r3, [r1, #8]
 8014aea:	6363      	str	r3, [r4, #52]	; 0x34
 8014aec:	62a0      	str	r0, [r4, #40]	; 0x28
 8014aee:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014af0:	7b0b      	ldrb	r3, [r1, #12]
 8014af2:	7163      	strb	r3, [r4, #5]
 8014af4:	6908      	ldr	r0, [r1, #16]
 8014af6:	694a      	ldr	r2, [r1, #20]
 8014af8:	698b      	ldr	r3, [r1, #24]
 8014afa:	6223      	str	r3, [r4, #32]
 8014afc:	61e2      	str	r2, [r4, #28]
 8014afe:	61a0      	str	r0, [r4, #24]
 8014b00:	7f0b      	ldrb	r3, [r1, #28]
 8014b02:	7123      	strb	r3, [r4, #4]
 8014b04:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014b08:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014b0c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014b0e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014b12:	460a      	mov	r2, r1
 8014b14:	460b      	mov	r3, r1
 8014b16:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014b1a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014b1e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014b22:	7889      	ldrb	r1, [r1, #2]
 8014b24:	7892      	ldrb	r2, [r2, #2]
 8014b26:	789b      	ldrb	r3, [r3, #2]
 8014b28:	b084      	sub	sp, #16
 8014b2a:	f88d 1006 	strb.w	r1, [sp, #6]
 8014b2e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014b32:	a901      	add	r1, sp, #4
 8014b34:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014b38:	f88d 200a 	strb.w	r2, [sp, #10]
 8014b3c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014b40:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014b44:	f88d 300e 	strb.w	r3, [sp, #14]
 8014b48:	f7f6 fd42 	bl	800b5d0 <updateOrientation>
 8014b4c:	a903      	add	r1, sp, #12
 8014b4e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014b52:	f7f6 fd3d 	bl	800b5d0 <updateOrientation>
 8014b56:	a902      	add	r1, sp, #8
 8014b58:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014b5c:	f7f6 fd38 	bl	800b5d0 <updateOrientation>
 8014b60:	b004      	add	sp, #16
 8014b62:	bd70      	pop	{r4, r5, r6, pc}
 8014b64:	200002e0 	.word	0x200002e0

08014b68 <MotionFX_getKnobs>:
 8014b68:	4b1c      	ldr	r3, [pc, #112]	; (8014bdc <MotionFX_getKnobs+0x74>)
 8014b6a:	791b      	ldrb	r3, [r3, #4]
 8014b6c:	b903      	cbnz	r3, 8014b70 <MotionFX_getKnobs+0x8>
 8014b6e:	4770      	bx	lr
 8014b70:	460a      	mov	r2, r1
 8014b72:	2900      	cmp	r1, #0
 8014b74:	d0fb      	beq.n	8014b6e <MotionFX_getKnobs+0x6>
 8014b76:	b510      	push	{r4, lr}
 8014b78:	4604      	mov	r4, r0
 8014b7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014b7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b80:	6093      	str	r3, [r2, #8]
 8014b82:	6010      	str	r0, [r2, #0]
 8014b84:	6051      	str	r1, [r2, #4]
 8014b86:	7963      	ldrb	r3, [r4, #5]
 8014b88:	7313      	strb	r3, [r2, #12]
 8014b8a:	69a0      	ldr	r0, [r4, #24]
 8014b8c:	69e1      	ldr	r1, [r4, #28]
 8014b8e:	6a23      	ldr	r3, [r4, #32]
 8014b90:	6193      	str	r3, [r2, #24]
 8014b92:	6110      	str	r0, [r2, #16]
 8014b94:	6151      	str	r1, [r2, #20]
 8014b96:	7923      	ldrb	r3, [r4, #4]
 8014b98:	7713      	strb	r3, [r2, #28]
 8014b9a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014b9e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014ba2:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014ba8:	f102 011d 	add.w	r1, r2, #29
 8014bac:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014bb0:	f7f6 fb66 	bl	800b280 <findAxis>
 8014bb4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014bb8:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014bbc:	f7f6 fb60 	bl	800b280 <findAxis>
 8014bc0:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014bc4:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014bc8:	f7f6 fb5a 	bl	800b280 <findAxis>
 8014bcc:	2300      	movs	r3, #0
 8014bce:	f882 3020 	strb.w	r3, [r2, #32]
 8014bd2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014bd6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014bda:	bd10      	pop	{r4, pc}
 8014bdc:	200002e0 	.word	0x200002e0

08014be0 <MotionFX_enable_6X>:
 8014be0:	4b0e      	ldr	r3, [pc, #56]	; (8014c1c <MotionFX_enable_6X+0x3c>)
 8014be2:	791b      	ldrb	r3, [r3, #4]
 8014be4:	b903      	cbnz	r3, 8014be8 <MotionFX_enable_6X+0x8>
 8014be6:	4770      	bx	lr
 8014be8:	2900      	cmp	r1, #0
 8014bea:	d0fc      	beq.n	8014be6 <MotionFX_enable_6X+0x6>
 8014bec:	b530      	push	{r4, r5, lr}
 8014bee:	1d05      	adds	r5, r0, #4
 8014bf0:	b099      	sub	sp, #100	; 0x64
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	4629      	mov	r1, r5
 8014bf6:	225c      	movs	r2, #92	; 0x5c
 8014bf8:	a801      	add	r0, sp, #4
 8014bfa:	f002 fbdf 	bl	80173bc <memcpy>
 8014bfe:	4620      	mov	r0, r4
 8014c00:	f7f7 f9bc 	bl	800bf7c <MFX_emptyAttitude>
 8014c04:	a901      	add	r1, sp, #4
 8014c06:	4628      	mov	r0, r5
 8014c08:	225c      	movs	r2, #92	; 0x5c
 8014c0a:	f002 fbd7 	bl	80173bc <memcpy>
 8014c0e:	2300      	movs	r3, #0
 8014c10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014c14:	7363      	strb	r3, [r4, #13]
 8014c16:	b019      	add	sp, #100	; 0x64
 8014c18:	bd30      	pop	{r4, r5, pc}
 8014c1a:	bf00      	nop
 8014c1c:	200002e0 	.word	0x200002e0

08014c20 <MotionFX_enable_9X>:
 8014c20:	4b0e      	ldr	r3, [pc, #56]	; (8014c5c <MotionFX_enable_9X+0x3c>)
 8014c22:	791b      	ldrb	r3, [r3, #4]
 8014c24:	b903      	cbnz	r3, 8014c28 <MotionFX_enable_9X+0x8>
 8014c26:	4770      	bx	lr
 8014c28:	2900      	cmp	r1, #0
 8014c2a:	d0fc      	beq.n	8014c26 <MotionFX_enable_9X+0x6>
 8014c2c:	b530      	push	{r4, r5, lr}
 8014c2e:	1d05      	adds	r5, r0, #4
 8014c30:	b099      	sub	sp, #100	; 0x64
 8014c32:	4604      	mov	r4, r0
 8014c34:	4629      	mov	r1, r5
 8014c36:	225c      	movs	r2, #92	; 0x5c
 8014c38:	a801      	add	r0, sp, #4
 8014c3a:	f002 fbbf 	bl	80173bc <memcpy>
 8014c3e:	4620      	mov	r0, r4
 8014c40:	f7f7 f99c 	bl	800bf7c <MFX_emptyAttitude>
 8014c44:	a901      	add	r1, sp, #4
 8014c46:	4628      	mov	r0, r5
 8014c48:	225c      	movs	r2, #92	; 0x5c
 8014c4a:	f002 fbb7 	bl	80173bc <memcpy>
 8014c4e:	2301      	movs	r3, #1
 8014c50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014c54:	7363      	strb	r3, [r4, #13]
 8014c56:	b019      	add	sp, #100	; 0x64
 8014c58:	bd30      	pop	{r4, r5, pc}
 8014c5a:	bf00      	nop
 8014c5c:	200002e0 	.word	0x200002e0

08014c60 <MotionFX_update>:
 8014c60:	b470      	push	{r4, r5, r6}
 8014c62:	4c06      	ldr	r4, [pc, #24]	; (8014c7c <MotionFX_update+0x1c>)
 8014c64:	9e03      	ldr	r6, [sp, #12]
 8014c66:	7925      	ldrb	r5, [r4, #4]
 8014c68:	b90d      	cbnz	r5, 8014c6e <MotionFX_update+0xe>
 8014c6a:	bc70      	pop	{r4, r5, r6}
 8014c6c:	4770      	bx	lr
 8014c6e:	461c      	mov	r4, r3
 8014c70:	ed94 0a00 	vldr	s0, [r4]
 8014c74:	4633      	mov	r3, r6
 8014c76:	bc70      	pop	{r4, r5, r6}
 8014c78:	f7fc bf02 	b.w	8011a80 <iNemoEngine_API_Update>
 8014c7c:	200002e0 	.word	0x200002e0

08014c80 <MotionFX_propagate>:
 8014c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c84:	ed2d 8b06 	vpush	{d8-d10}
 8014c88:	4ca3      	ldr	r4, [pc, #652]	; (8014f18 <MotionFX_propagate+0x298>)
 8014c8a:	7927      	ldrb	r7, [r4, #4]
 8014c8c:	b0a0      	sub	sp, #128	; 0x80
 8014c8e:	b927      	cbnz	r7, 8014c9a <MotionFX_propagate+0x1a>
 8014c90:	b020      	add	sp, #128	; 0x80
 8014c92:	ecbd 8b06 	vpop	{d8-d10}
 8014c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c9a:	4616      	mov	r6, r2
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014ca2:	edd3 9a00 	vldr	s19, [r3]
 8014ca6:	460d      	mov	r5, r1
 8014ca8:	6851      	ldr	r1, [r2, #4]
 8014caa:	6892      	ldr	r2, [r2, #8]
 8014cac:	ab13      	add	r3, sp, #76	; 0x4c
 8014cae:	c307      	stmia	r3!, {r0, r1, r2}
 8014cb0:	6830      	ldr	r0, [r6, #0]
 8014cb2:	6871      	ldr	r1, [r6, #4]
 8014cb4:	68b2      	ldr	r2, [r6, #8]
 8014cb6:	ab10      	add	r3, sp, #64	; 0x40
 8014cb8:	c307      	stmia	r3!, {r0, r1, r2}
 8014cba:	4637      	mov	r7, r6
 8014cbc:	ab16      	add	r3, sp, #88	; 0x58
 8014cbe:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014cc2:	6879      	ldr	r1, [r7, #4]
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8014cca:	c307      	stmia	r3!, {r0, r1, r2}
 8014ccc:	aa13      	add	r2, sp, #76	; 0x4c
 8014cce:	4651      	mov	r1, sl
 8014cd0:	a803      	add	r0, sp, #12
 8014cd2:	f7f6 fa73 	bl	800b1bc <rotVect>
 8014cd6:	aa16      	add	r2, sp, #88	; 0x58
 8014cd8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014cdc:	a806      	add	r0, sp, #24
 8014cde:	f7f6 fa6d 	bl	800b1bc <rotVect>
 8014ce2:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014ce6:	2b09      	cmp	r3, #9
 8014ce8:	d829      	bhi.n	8014d3e <MotionFX_propagate+0xbe>
 8014cea:	eddd 8a04 	vldr	s17, [sp, #16]
 8014cee:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014cf2:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014cf6:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014cfa:	eee9 7a09 	vfma.f32	s15, s18, s18
 8014cfe:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014d02:	ee17 0a90 	vmov	r0, s15
 8014d06:	f7eb fc1f 	bl	8000548 <__aeabi_f2d>
 8014d0a:	ec41 0b10 	vmov	d0, r0, r1
 8014d0e:	f000 fded 	bl	80158ec <sqrt>
 8014d12:	ec51 0b10 	vmov	r0, r1, d0
 8014d16:	f7eb ff47 	bl	8000ba8 <__aeabi_d2f>
 8014d1a:	ee07 0a90 	vmov	s15, r0
 8014d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d22:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014d26:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014d2a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014d2e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014d32:	ed8d 9a03 	vstr	s18, [sp, #12]
 8014d36:	edcd 8a04 	vstr	s17, [sp, #16]
 8014d3a:	ed8d 8a05 	vstr	s16, [sp, #20]
 8014d3e:	7923      	ldrb	r3, [r4, #4]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	f000 80d3 	beq.w	8014eec <MotionFX_propagate+0x26c>
 8014d46:	ee07 3a90 	vmov	s15, r3
 8014d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014d52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014d56:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8014d5a:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8014d5e:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8014d62:	edd2 7a00 	vldr	s15, [r2]
 8014d66:	eddd 8a06 	vldr	s17, [sp, #24]
 8014d6a:	ed9d 6a07 	vldr	s12, [sp, #28]
 8014d6e:	ed9d 8a08 	vldr	s16, [sp, #32]
 8014d72:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8014f1c <MotionFX_propagate+0x29c>
 8014d76:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8014f20 <MotionFX_propagate+0x2a0>
 8014d7a:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8014d7e:	ee26 9a07 	vmul.f32	s18, s12, s14
 8014d82:	edc2 7a00 	vstr	s15, [r2]
 8014d86:	edd3 7a00 	vldr	s15, [r3]
 8014d8a:	ed8d 9a07 	vstr	s18, [sp, #28]
 8014d8e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014d92:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8014d96:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014d9a:	edc3 7a00 	vstr	s15, [r3]
 8014d9e:	edd2 7a00 	vldr	s15, [r2]
 8014da2:	edcd 8a06 	vstr	s17, [sp, #24]
 8014da6:	eee6 7a88 	vfma.f32	s15, s13, s16
 8014daa:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8014dae:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014db2:	edc2 7a00 	vstr	s15, [r2]
 8014db6:	edd3 7a00 	vldr	s15, [r3]
 8014dba:	ed8d 8a08 	vstr	s16, [sp, #32]
 8014dbe:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8014dc2:	ed93 7a00 	vldr	s14, [r3]
 8014dc6:	ee39 9a67 	vsub.f32	s18, s18, s15
 8014dca:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8014dce:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014dd2:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8014dd6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014dda:	ed93 7a00 	vldr	s14, [r3]
 8014dde:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014de2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014de6:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014dea:	ee29 0a80 	vmul.f32	s0, s19, s0
 8014dee:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df6:	dd7e      	ble.n	8014ef6 <MotionFX_propagate+0x276>
 8014df8:	eeb1 aae7 	vsqrt.f32	s20, s15
 8014dfc:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014e00:	eeb0 0a69 	vmov.f32	s0, s19
 8014e04:	f000 fd06 	bl	8015814 <sinf>
 8014e08:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8014e0c:	eeb0 0a69 	vmov.f32	s0, s19
 8014e10:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014e14:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014e18:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014e1c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014e20:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014e24:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014e28:	f000 fc8e 	bl	8015748 <cosf>
 8014e2c:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8014e30:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8014e34:	a809      	add	r0, sp, #36	; 0x24
 8014e36:	4632      	mov	r2, r6
 8014e38:	4631      	mov	r1, r6
 8014e3a:	f7f6 fc55 	bl	800b6e8 <qmult>
 8014e3e:	edd8 7a00 	vldr	s15, [r8]
 8014e42:	ed96 7a00 	vldr	s14, [r6]
 8014e46:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8014e4a:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8014e4e:	edd9 6a00 	vldr	s13, [r9]
 8014e52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014e56:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8014e5a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014e5e:	3301      	adds	r3, #1
 8014e60:	aa13      	add	r2, sp, #76	; 0x4c
 8014e62:	edd7 6a00 	vldr	s13, [r7]
 8014e66:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014e6a:	4651      	mov	r1, sl
 8014e6c:	a809      	add	r0, sp, #36	; 0x24
 8014e6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014e72:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014e76:	eef1 6ae7 	vsqrt.f32	s13, s15
 8014e7a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e82:	ed86 7a00 	vstr	s14, [r6]
 8014e86:	ed99 7a00 	vldr	s14, [r9]
 8014e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e8e:	ed89 7a00 	vstr	s14, [r9]
 8014e92:	ed98 7a00 	vldr	s14, [r8]
 8014e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014e9a:	ed88 7a00 	vstr	s14, [r8]
 8014e9e:	ed97 7a00 	vldr	s14, [r7]
 8014ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ea6:	edc7 7a00 	vstr	s15, [r7]
 8014eaa:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8014eae:	f7f6 f985 	bl	800b1bc <rotVect>
 8014eb2:	f8d9 0000 	ldr.w	r0, [r9]
 8014eb6:	f8d8 1000 	ldr.w	r1, [r8]
 8014eba:	683a      	ldr	r2, [r7, #0]
 8014ebc:	6833      	ldr	r3, [r6, #0]
 8014ebe:	60eb      	str	r3, [r5, #12]
 8014ec0:	6128      	str	r0, [r5, #16]
 8014ec2:	6169      	str	r1, [r5, #20]
 8014ec4:	61aa      	str	r2, [r5, #24]
 8014ec6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014eca:	9301      	str	r3, [sp, #4]
 8014ecc:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014ed0:	9300      	str	r3, [sp, #0]
 8014ed2:	a909      	add	r1, sp, #36	; 0x24
 8014ed4:	f105 031c 	add.w	r3, r5, #28
 8014ed8:	462a      	mov	r2, r5
 8014eda:	f105 000c 	add.w	r0, r5, #12
 8014ede:	f7f7 fc2b 	bl	800c738 <output_update>
 8014ee2:	b020      	add	sp, #128	; 0x80
 8014ee4:	ecbd 8b06 	vpop	{d8-d10}
 8014ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eec:	2301      	movs	r3, #1
 8014eee:	7123      	strb	r3, [r4, #4]
 8014ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014ef4:	e72f      	b.n	8014d56 <MotionFX_propagate+0xd6>
 8014ef6:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014efa:	ee29 9a00 	vmul.f32	s18, s18, s0
 8014efe:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014f02:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014f06:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014f0a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014f0e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014f12:	930c      	str	r3, [sp, #48]	; 0x30
 8014f14:	e78c      	b.n	8014e30 <MotionFX_propagate+0x1b0>
 8014f16:	bf00      	nop
 8014f18:	200002e0 	.word	0x200002e0
 8014f1c:	3c8efa35 	.word	0x3c8efa35
 8014f20:	38d1b718 	.word	0x38d1b718

08014f24 <MotionFX_MagCal_init>:
 8014f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f26:	4c44      	ldr	r4, [pc, #272]	; (8015038 <MotionFX_MagCal_init+0x114>)
 8014f28:	7923      	ldrb	r3, [r4, #4]
 8014f2a:	b903      	cbnz	r3, 8014f2e <MotionFX_MagCal_init+0xa>
 8014f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f2e:	1e43      	subs	r3, r0, #1
 8014f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014f34:	4605      	mov	r5, r0
 8014f36:	d2f9      	bcs.n	8014f2c <MotionFX_MagCal_init+0x8>
 8014f38:	2900      	cmp	r1, #0
 8014f3a:	d139      	bne.n	8014fb0 <MotionFX_MagCal_init+0x8c>
 8014f3c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8014f40:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014f44:	4a3d      	ldr	r2, [pc, #244]	; (801503c <MotionFX_MagCal_init+0x118>)
 8014f46:	1b5b      	subs	r3, r3, r5
 8014f48:	ee07 3a90 	vmov	s15, r3
 8014f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f50:	23c8      	movs	r3, #200	; 0xc8
 8014f52:	eef0 7ae7 	vabs.f32	s15, s15
 8014f56:	fb93 f3f5 	sdiv	r3, r3, r5
 8014f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	2b0f      	cmp	r3, #15
 8014f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f66:	bf28      	it	cs
 8014f68:	230f      	movcs	r3, #15
 8014f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6e:	6015      	str	r5, [r2, #0]
 8014f70:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8014f74:	b22d      	sxth	r5, r5
 8014f76:	dc0e      	bgt.n	8014f96 <MotionFX_MagCal_init+0x72>
 8014f78:	edd4 7a03 	vldr	s15, [r4, #12]
 8014f7c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015040 <MotionFX_MagCal_init+0x11c>
 8014f80:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8015044 <MotionFX_MagCal_init+0x120>
 8014f84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014f88:	eef0 7ae7 	vabs.f32	s15, s15
 8014f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	dd08      	ble.n	8014fa8 <MotionFX_MagCal_init+0x84>
 8014f96:	2300      	movs	r3, #0
 8014f98:	492b      	ldr	r1, [pc, #172]	; (8015048 <MotionFX_MagCal_init+0x124>)
 8014f9a:	8165      	strh	r5, [r4, #10]
 8014f9c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8014fa0:	60e1      	str	r1, [r4, #12]
 8014fa2:	8223      	strh	r3, [r4, #16]
 8014fa4:	6163      	str	r3, [r4, #20]
 8014fa6:	8122      	strh	r2, [r4, #8]
 8014fa8:	2300      	movs	r3, #0
 8014faa:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8014fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fb0:	2600      	movs	r6, #0
 8014fb2:	4826      	ldr	r0, [pc, #152]	; (801504c <MotionFX_MagCal_init+0x128>)
 8014fb4:	61a0      	str	r0, [r4, #24]
 8014fb6:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8014fba:	4631      	mov	r1, r6
 8014fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014fc0:	6122      	str	r2, [r4, #16]
 8014fc2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8014fc6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014fca:	6166      	str	r6, [r4, #20]
 8014fcc:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8014fd0:	6566      	str	r6, [r4, #84]	; 0x54
 8014fd2:	83a6      	strh	r6, [r4, #28]
 8014fd4:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8014fd8:	f002 f9fe 	bl	80173d8 <memset>
 8014fdc:	23ff      	movs	r3, #255	; 0xff
 8014fde:	225f      	movs	r2, #95	; 0x5f
 8014fe0:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8014fe4:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8014fe8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014fec:	2200      	movs	r2, #0
 8014fee:	2300      	movs	r3, #0
 8014ff0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014ff4:	f44f 7780 	mov.w	r7, #256	; 0x100
 8014ff8:	4631      	mov	r1, r6
 8014ffa:	62a6      	str	r6, [r4, #40]	; 0x28
 8014ffc:	2230      	movs	r2, #48	; 0x30
 8014ffe:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8015002:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8015006:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 801500a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801500c:	f002 f9e4 	bl	80173d8 <memset>
 8015010:	f1a5 030a 	sub.w	r3, r5, #10
 8015014:	b29b      	uxth	r3, r3
 8015016:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801501a:	2b32      	cmp	r3, #50	; 0x32
 801501c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8015020:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8015024:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8015028:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 801502c:	d888      	bhi.n	8014f40 <MotionFX_MagCal_init+0x1c>
 801502e:	2301      	movs	r3, #1
 8015030:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8015034:	e784      	b.n	8014f40 <MotionFX_MagCal_init+0x1c>
 8015036:	bf00      	nop
 8015038:	200002e0 	.word	0x200002e0
 801503c:	20000000 	.word	0x20000000
 8015040:	3dcccccd 	.word	0x3dcccccd
 8015044:	3c23d70a 	.word	0x3c23d70a
 8015048:	3dcccccd 	.word	0x3dcccccd
 801504c:	200015d4 	.word	0x200015d4

08015050 <MotionFX_MagCal_run>:
 8015050:	4a3e      	ldr	r2, [pc, #248]	; (801514c <MotionFX_MagCal_run+0xfc>)
 8015052:	7913      	ldrb	r3, [r2, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d077      	beq.n	8015148 <MotionFX_MagCal_run+0xf8>
 8015058:	ed90 7a00 	vldr	s14, [r0]
 801505c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015150 <MotionFX_MagCal_run+0x100>
 8015060:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015068:	bfb4      	ite	lt
 801506a:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801506e:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015072:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015078:	ed90 7a01 	vldr	s14, [r0, #4]
 801507c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015150 <MotionFX_MagCal_run+0x100>
 8015080:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8015084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015088:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801508c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015090:	ee17 1a90 	vmov	r1, s15
 8015094:	bfb4      	ite	lt
 8015096:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801509a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801509e:	eee7 7a26 	vfma.f32	s15, s14, s13
 80150a2:	ed90 7a02 	vldr	s14, [r0, #8]
 80150a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015150 <MotionFX_MagCal_run+0x100>
 80150aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150ae:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80150b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b6:	ee17 4a90 	vmov	r4, s15
 80150ba:	bfac      	ite	ge
 80150bc:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80150c0:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80150c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80150c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80150cc:	ee17 7a90 	vmov	r7, s15
 80150d0:	b383      	cbz	r3, 8015134 <MotionFX_MagCal_run+0xe4>
 80150d2:	4820      	ldr	r0, [pc, #128]	; (8015154 <MotionFX_MagCal_run+0x104>)
 80150d4:	6805      	ldr	r5, [r0, #0]
 80150d6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 80150da:	fb15 f503 	smulbb	r5, r5, r3
 80150de:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 80150e2:	00dd      	lsls	r5, r3, #3
 80150e4:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 80150e8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8015158 <MotionFX_MagCal_run+0x108>
 80150ec:	42b1      	cmp	r1, r6
 80150ee:	bfa8      	it	ge
 80150f0:	4631      	movge	r1, r6
 80150f2:	42b7      	cmp	r7, r6
 80150f4:	bfa8      	it	ge
 80150f6:	4637      	movge	r7, r6
 80150f8:	4561      	cmp	r1, ip
 80150fa:	4608      	mov	r0, r1
 80150fc:	bfb8      	it	lt
 80150fe:	4660      	movlt	r0, ip
 8015100:	4564      	cmp	r4, ip
 8015102:	db1f      	blt.n	8015144 <MotionFX_MagCal_run+0xf4>
 8015104:	42b4      	cmp	r4, r6
 8015106:	bfa8      	it	ge
 8015108:	4634      	movge	r4, r6
 801510a:	b224      	sxth	r4, r4
 801510c:	4e12      	ldr	r6, [pc, #72]	; (8015158 <MotionFX_MagCal_run+0x108>)
 801510e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8015112:	3301      	adds	r3, #1
 8015114:	4415      	add	r5, r2
 8015116:	b2db      	uxtb	r3, r3
 8015118:	42b7      	cmp	r7, r6
 801511a:	bfb8      	it	lt
 801511c:	4637      	movlt	r7, r6
 801511e:	428b      	cmp	r3, r1
 8015120:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8015124:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8015128:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 801512c:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8015130:	d014      	beq.n	801515c <MotionFX_MagCal_run+0x10c>
 8015132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015134:	68c0      	ldr	r0, [r0, #12]
 8015136:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 801513a:	2001      	movs	r0, #1
 801513c:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8015140:	461d      	mov	r5, r3
 8015142:	e7cf      	b.n	80150e4 <MotionFX_MagCal_run+0x94>
 8015144:	4634      	mov	r4, r6
 8015146:	e7e1      	b.n	801510c <MotionFX_MagCal_run+0xbc>
 8015148:	4770      	bx	lr
 801514a:	bf00      	nop
 801514c:	200002e0 	.word	0x200002e0
 8015150:	43fa0000 	.word	0x43fa0000
 8015154:	20000000 	.word	0x20000000
 8015158:	ffff8002 	.word	0xffff8002
 801515c:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8015160:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8015164:	2000      	movs	r0, #0
 8015166:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 801516a:	2b00      	cmp	r3, #0
 801516c:	f000 8159 	beq.w	8015422 <MotionFX_MagCal_run+0x3d2>
 8015170:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 8015174:	8a57      	ldrh	r7, [r2, #18]
 8015176:	8a13      	ldrh	r3, [r2, #16]
 8015178:	2900      	cmp	r1, #0
 801517a:	f000 8150 	beq.w	801541e <MotionFX_MagCal_run+0x3ce>
 801517e:	2f00      	cmp	r7, #0
 8015180:	f000 814d 	beq.w	801541e <MotionFX_MagCal_run+0x3ce>
 8015184:	42bb      	cmp	r3, r7
 8015186:	bf28      	it	cs
 8015188:	463b      	movcs	r3, r7
 801518a:	3301      	adds	r3, #1
 801518c:	b29b      	uxth	r3, r3
 801518e:	42bb      	cmp	r3, r7
 8015190:	bf28      	it	cs
 8015192:	463b      	movcs	r3, r7
 8015194:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015198:	191d      	adds	r5, r3, r4
 801519a:	f04f 0c01 	mov.w	ip, #1
 801519e:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 80151a2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80151a6:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 80151aa:	f8c5 e002 	str.w	lr, [r5, #2]
 80151ae:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 80151b2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80151b6:	4561      	cmp	r1, ip
 80151b8:	f000 812a 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 80151bc:	4463      	add	r3, ip
 80151be:	b29b      	uxth	r3, r3
 80151c0:	42bb      	cmp	r3, r7
 80151c2:	bf28      	it	cs
 80151c4:	463b      	movcs	r3, r7
 80151c6:	eb03 0e04 	add.w	lr, r3, r4
 80151ca:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80151ce:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80151d2:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 80151d6:	f8c5 e002 	str.w	lr, [r5, #2]
 80151da:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 80151de:	f8a5 e006 	strh.w	lr, [r5, #6]
 80151e2:	2902      	cmp	r1, #2
 80151e4:	f000 8114 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 80151e8:	4463      	add	r3, ip
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	42bb      	cmp	r3, r7
 80151ee:	bf28      	it	cs
 80151f0:	463b      	movcs	r3, r7
 80151f2:	eb03 0e04 	add.w	lr, r3, r4
 80151f6:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80151fa:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80151fe:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8015202:	f8c5 e002 	str.w	lr, [r5, #2]
 8015206:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 801520a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801520e:	2903      	cmp	r1, #3
 8015210:	f000 80fe 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 8015214:	4463      	add	r3, ip
 8015216:	b29b      	uxth	r3, r3
 8015218:	42bb      	cmp	r3, r7
 801521a:	bf28      	it	cs
 801521c:	463b      	movcs	r3, r7
 801521e:	eb03 0e04 	add.w	lr, r3, r4
 8015222:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015226:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801522a:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 801522e:	f8c5 e002 	str.w	lr, [r5, #2]
 8015232:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8015236:	f8a5 e006 	strh.w	lr, [r5, #6]
 801523a:	2904      	cmp	r1, #4
 801523c:	f000 80e8 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 8015240:	4463      	add	r3, ip
 8015242:	b29b      	uxth	r3, r3
 8015244:	42bb      	cmp	r3, r7
 8015246:	bf28      	it	cs
 8015248:	463b      	movcs	r3, r7
 801524a:	eb03 0e04 	add.w	lr, r3, r4
 801524e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015252:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015256:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 801525a:	f8c5 e002 	str.w	lr, [r5, #2]
 801525e:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 8015262:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015266:	2905      	cmp	r1, #5
 8015268:	f000 80d2 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 801526c:	4463      	add	r3, ip
 801526e:	b29b      	uxth	r3, r3
 8015270:	42bb      	cmp	r3, r7
 8015272:	bf28      	it	cs
 8015274:	463b      	movcs	r3, r7
 8015276:	441c      	add	r4, r3
 8015278:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 801527c:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8015280:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 8015284:	f8c5 4002 	str.w	r4, [r5, #2]
 8015288:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 801528c:	80ec      	strh	r4, [r5, #6]
 801528e:	2906      	cmp	r1, #6
 8015290:	f000 80be 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 8015294:	4463      	add	r3, ip
 8015296:	b29b      	uxth	r3, r3
 8015298:	42bb      	cmp	r3, r7
 801529a:	bf28      	it	cs
 801529c:	463b      	movcs	r3, r7
 801529e:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 80152a2:	eb03 0c04 	add.w	ip, r3, r4
 80152a6:	2501      	movs	r5, #1
 80152a8:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 80152ac:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80152b0:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 80152b4:	f8cc e002 	str.w	lr, [ip, #2]
 80152b8:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 80152bc:	f8ac e006 	strh.w	lr, [ip, #6]
 80152c0:	2907      	cmp	r1, #7
 80152c2:	f000 80a5 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 80152c6:	442b      	add	r3, r5
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	42bb      	cmp	r3, r7
 80152cc:	bf28      	it	cs
 80152ce:	463b      	movcs	r3, r7
 80152d0:	eb03 0e04 	add.w	lr, r3, r4
 80152d4:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80152d8:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80152dc:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 80152e0:	f8cc e002 	str.w	lr, [ip, #2]
 80152e4:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 80152e8:	f8ac e006 	strh.w	lr, [ip, #6]
 80152ec:	2908      	cmp	r1, #8
 80152ee:	f000 808f 	beq.w	8015410 <MotionFX_MagCal_run+0x3c0>
 80152f2:	442b      	add	r3, r5
 80152f4:	b29b      	uxth	r3, r3
 80152f6:	42bb      	cmp	r3, r7
 80152f8:	bf28      	it	cs
 80152fa:	463b      	movcs	r3, r7
 80152fc:	eb03 0e04 	add.w	lr, r3, r4
 8015300:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015304:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015308:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 801530c:	f8cc e002 	str.w	lr, [ip, #2]
 8015310:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8015314:	f8ac e006 	strh.w	lr, [ip, #6]
 8015318:	2909      	cmp	r1, #9
 801531a:	d079      	beq.n	8015410 <MotionFX_MagCal_run+0x3c0>
 801531c:	442b      	add	r3, r5
 801531e:	b29b      	uxth	r3, r3
 8015320:	42bb      	cmp	r3, r7
 8015322:	bf28      	it	cs
 8015324:	463b      	movcs	r3, r7
 8015326:	eb03 0e04 	add.w	lr, r3, r4
 801532a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801532e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015332:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8015336:	f8cc e002 	str.w	lr, [ip, #2]
 801533a:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 801533e:	f8ac e006 	strh.w	lr, [ip, #6]
 8015342:	290a      	cmp	r1, #10
 8015344:	d064      	beq.n	8015410 <MotionFX_MagCal_run+0x3c0>
 8015346:	442b      	add	r3, r5
 8015348:	b29b      	uxth	r3, r3
 801534a:	42bb      	cmp	r3, r7
 801534c:	bf28      	it	cs
 801534e:	463b      	movcs	r3, r7
 8015350:	eb03 0e04 	add.w	lr, r3, r4
 8015354:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015358:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801535c:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8015360:	f8cc e002 	str.w	lr, [ip, #2]
 8015364:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8015368:	f8ac e006 	strh.w	lr, [ip, #6]
 801536c:	290b      	cmp	r1, #11
 801536e:	d04f      	beq.n	8015410 <MotionFX_MagCal_run+0x3c0>
 8015370:	442b      	add	r3, r5
 8015372:	b29b      	uxth	r3, r3
 8015374:	42bb      	cmp	r3, r7
 8015376:	bf28      	it	cs
 8015378:	463b      	movcs	r3, r7
 801537a:	eb03 0e04 	add.w	lr, r3, r4
 801537e:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015382:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015386:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 801538a:	f8cc e002 	str.w	lr, [ip, #2]
 801538e:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8015392:	f8ac e006 	strh.w	lr, [ip, #6]
 8015396:	290c      	cmp	r1, #12
 8015398:	d03a      	beq.n	8015410 <MotionFX_MagCal_run+0x3c0>
 801539a:	442b      	add	r3, r5
 801539c:	b29b      	uxth	r3, r3
 801539e:	42bb      	cmp	r3, r7
 80153a0:	bf28      	it	cs
 80153a2:	463b      	movcs	r3, r7
 80153a4:	eb03 0e04 	add.w	lr, r3, r4
 80153a8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80153ac:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80153b0:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 80153b4:	f8cc e002 	str.w	lr, [ip, #2]
 80153b8:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 80153bc:	f8ac e006 	strh.w	lr, [ip, #6]
 80153c0:	290d      	cmp	r1, #13
 80153c2:	d025      	beq.n	8015410 <MotionFX_MagCal_run+0x3c0>
 80153c4:	442b      	add	r3, r5
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	42bb      	cmp	r3, r7
 80153ca:	bf28      	it	cs
 80153cc:	463b      	movcs	r3, r7
 80153ce:	eb03 0e04 	add.w	lr, r3, r4
 80153d2:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80153d6:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80153da:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 80153de:	f8cc e002 	str.w	lr, [ip, #2]
 80153e2:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 80153e6:	f8ac e006 	strh.w	lr, [ip, #6]
 80153ea:	290e      	cmp	r1, #14
 80153ec:	d010      	beq.n	8015410 <MotionFX_MagCal_run+0x3c0>
 80153ee:	442b      	add	r3, r5
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	42bb      	cmp	r3, r7
 80153f4:	bf28      	it	cs
 80153f6:	463b      	movcs	r3, r7
 80153f8:	441c      	add	r4, r3
 80153fa:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 80153fe:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8015402:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8015406:	f8c7 0002 	str.w	r0, [r7, #2]
 801540a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 801540e:	80f8      	strh	r0, [r7, #6]
 8015410:	3901      	subs	r1, #1
 8015412:	b2c9      	uxtb	r1, r1
 8015414:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8015418:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801541c:	4434      	add	r4, r6
 801541e:	8213      	strh	r3, [r2, #16]
 8015420:	6154      	str	r4, [r2, #20]
 8015422:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8015426:	2b00      	cmp	r3, #0
 8015428:	f43f ae83 	beq.w	8015132 <MotionFX_MagCal_run+0xe2>
 801542c:	8a11      	ldrh	r1, [r2, #16]
 801542e:	8a53      	ldrh	r3, [r2, #18]
 8015430:	428b      	cmp	r3, r1
 8015432:	d022      	beq.n	801547a <MotionFX_MagCal_run+0x42a>
 8015434:	b341      	cbz	r1, 8015488 <MotionFX_MagCal_run+0x438>
 8015436:	6953      	ldr	r3, [r2, #20]
 8015438:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801543c:	3301      	adds	r3, #1
 801543e:	4403      	add	r3, r0
 8015440:	1c58      	adds	r0, r3, #1
 8015442:	d021      	beq.n	8015488 <MotionFX_MagCal_run+0x438>
 8015444:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015448:	3410      	adds	r4, #16
 801544a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 801544c:	42a0      	cmp	r0, r4
 801544e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8015452:	bf84      	itt	hi
 8015454:	6553      	strhi	r3, [r2, #84]	; 0x54
 8015456:	4618      	movhi	r0, r3
 8015458:	4420      	add	r0, r4
 801545a:	4283      	cmp	r3, r0
 801545c:	f4ff ae69 	bcc.w	8015132 <MotionFX_MagCal_run+0xe2>
 8015460:	b131      	cbz	r1, 8015470 <MotionFX_MagCal_run+0x420>
 8015462:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8015466:	6952      	ldr	r2, [r2, #20]
 8015468:	3901      	subs	r1, #1
 801546a:	fb00 2111 	mls	r1, r0, r1, r2
 801546e:	b289      	uxth	r1, r1
 8015470:	1a5b      	subs	r3, r3, r1
 8015472:	b21b      	sxth	r3, r3
 8015474:	42a3      	cmp	r3, r4
 8015476:	f6ff ae5c 	blt.w	8015132 <MotionFX_MagCal_run+0xe2>
 801547a:	4905      	ldr	r1, [pc, #20]	; (8015490 <MotionFX_MagCal_run+0x440>)
 801547c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015480:	f101 0014 	add.w	r0, r1, #20
 8015484:	f7fd babc 	b.w	8012a00 <MEMS_runMagCal>
 8015488:	f242 7410 	movw	r4, #10000	; 0x2710
 801548c:	2300      	movs	r3, #0
 801548e:	e7dc      	b.n	801544a <MotionFX_MagCal_run+0x3fa>
 8015490:	200002e8 	.word	0x200002e8

08015494 <MotionFX_MagCal_getParams>:
 8015494:	b4f0      	push	{r4, r5, r6, r7}
 8015496:	4f1b      	ldr	r7, [pc, #108]	; (8015504 <MotionFX_MagCal_getParams+0x70>)
 8015498:	793b      	ldrb	r3, [r7, #4]
 801549a:	b08e      	sub	sp, #56	; 0x38
 801549c:	b373      	cbz	r3, 80154fc <MotionFX_MagCal_getParams+0x68>
 801549e:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80154a2:	4606      	mov	r6, r0
 80154a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154a6:	ac01      	add	r4, sp, #4
 80154a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154b0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80154b4:	eddd 6a02 	vldr	s13, [sp, #8]
 80154b8:	eddd 7a04 	vldr	s15, [sp, #16]
 80154bc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015508 <MotionFX_MagCal_getParams+0x74>
 80154c0:	682d      	ldr	r5, [r5, #0]
 80154c2:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 80154c6:	7337      	strb	r7, [r6, #12]
 80154c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80154cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80154d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80154de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154e2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80154e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80154ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80154ee:	6025      	str	r5, [r4, #0]
 80154f0:	edc6 6a00 	vstr	s13, [r6]
 80154f4:	ed86 7a01 	vstr	s14, [r6, #4]
 80154f8:	edc6 7a02 	vstr	s15, [r6, #8]
 80154fc:	b00e      	add	sp, #56	; 0x38
 80154fe:	bcf0      	pop	{r4, r5, r6, r7}
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	200002e0 	.word	0x200002e0
 8015508:	3b03126f 	.word	0x3b03126f

0801550c <_Znwj>:
 801550c:	2801      	cmp	r0, #1
 801550e:	bf38      	it	cc
 8015510:	2001      	movcc	r0, #1
 8015512:	b510      	push	{r4, lr}
 8015514:	4604      	mov	r4, r0
 8015516:	4620      	mov	r0, r4
 8015518:	f001 ff48 	bl	80173ac <malloc>
 801551c:	b930      	cbnz	r0, 801552c <_Znwj+0x20>
 801551e:	f000 f807 	bl	8015530 <_ZSt15get_new_handlerv>
 8015522:	b908      	cbnz	r0, 8015528 <_Znwj+0x1c>
 8015524:	f001 ff10 	bl	8017348 <abort>
 8015528:	4780      	blx	r0
 801552a:	e7f4      	b.n	8015516 <_Znwj+0xa>
 801552c:	bd10      	pop	{r4, pc}
	...

08015530 <_ZSt15get_new_handlerv>:
 8015530:	4b02      	ldr	r3, [pc, #8]	; (801553c <_ZSt15get_new_handlerv+0xc>)
 8015532:	6818      	ldr	r0, [r3, #0]
 8015534:	f3bf 8f5b 	dmb	ish
 8015538:	4770      	bx	lr
 801553a:	bf00      	nop
 801553c:	200011b4 	.word	0x200011b4

08015540 <ceil>:
 8015540:	ec51 0b10 	vmov	r0, r1, d0
 8015544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801554c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015550:	2e13      	cmp	r6, #19
 8015552:	ee10 5a10 	vmov	r5, s0
 8015556:	ee10 8a10 	vmov	r8, s0
 801555a:	460c      	mov	r4, r1
 801555c:	dc30      	bgt.n	80155c0 <ceil+0x80>
 801555e:	2e00      	cmp	r6, #0
 8015560:	da12      	bge.n	8015588 <ceil+0x48>
 8015562:	a335      	add	r3, pc, #212	; (adr r3, 8015638 <ceil+0xf8>)
 8015564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015568:	f7ea fe90 	bl	800028c <__adddf3>
 801556c:	2200      	movs	r2, #0
 801556e:	2300      	movs	r3, #0
 8015570:	f7eb fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8015574:	b128      	cbz	r0, 8015582 <ceil+0x42>
 8015576:	2c00      	cmp	r4, #0
 8015578:	db55      	blt.n	8015626 <ceil+0xe6>
 801557a:	432c      	orrs	r4, r5
 801557c:	d057      	beq.n	801562e <ceil+0xee>
 801557e:	4c30      	ldr	r4, [pc, #192]	; (8015640 <ceil+0x100>)
 8015580:	2500      	movs	r5, #0
 8015582:	4621      	mov	r1, r4
 8015584:	4628      	mov	r0, r5
 8015586:	e025      	b.n	80155d4 <ceil+0x94>
 8015588:	4f2e      	ldr	r7, [pc, #184]	; (8015644 <ceil+0x104>)
 801558a:	4137      	asrs	r7, r6
 801558c:	ea01 0307 	and.w	r3, r1, r7
 8015590:	4303      	orrs	r3, r0
 8015592:	d01f      	beq.n	80155d4 <ceil+0x94>
 8015594:	a328      	add	r3, pc, #160	; (adr r3, 8015638 <ceil+0xf8>)
 8015596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559a:	f7ea fe77 	bl	800028c <__adddf3>
 801559e:	2200      	movs	r2, #0
 80155a0:	2300      	movs	r3, #0
 80155a2:	f7eb fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80155a6:	2800      	cmp	r0, #0
 80155a8:	d0eb      	beq.n	8015582 <ceil+0x42>
 80155aa:	2c00      	cmp	r4, #0
 80155ac:	bfc2      	ittt	gt
 80155ae:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80155b2:	fa43 f606 	asrgt.w	r6, r3, r6
 80155b6:	19a4      	addgt	r4, r4, r6
 80155b8:	ea24 0407 	bic.w	r4, r4, r7
 80155bc:	2500      	movs	r5, #0
 80155be:	e7e0      	b.n	8015582 <ceil+0x42>
 80155c0:	2e33      	cmp	r6, #51	; 0x33
 80155c2:	dd0b      	ble.n	80155dc <ceil+0x9c>
 80155c4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80155c8:	d104      	bne.n	80155d4 <ceil+0x94>
 80155ca:	ee10 2a10 	vmov	r2, s0
 80155ce:	460b      	mov	r3, r1
 80155d0:	f7ea fe5c 	bl	800028c <__adddf3>
 80155d4:	ec41 0b10 	vmov	d0, r0, r1
 80155d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155dc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80155e0:	f04f 33ff 	mov.w	r3, #4294967295
 80155e4:	fa23 f707 	lsr.w	r7, r3, r7
 80155e8:	4207      	tst	r7, r0
 80155ea:	d0f3      	beq.n	80155d4 <ceil+0x94>
 80155ec:	a312      	add	r3, pc, #72	; (adr r3, 8015638 <ceil+0xf8>)
 80155ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f2:	f7ea fe4b 	bl	800028c <__adddf3>
 80155f6:	2200      	movs	r2, #0
 80155f8:	2300      	movs	r3, #0
 80155fa:	f7eb fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 80155fe:	2800      	cmp	r0, #0
 8015600:	d0bf      	beq.n	8015582 <ceil+0x42>
 8015602:	2c00      	cmp	r4, #0
 8015604:	dd02      	ble.n	801560c <ceil+0xcc>
 8015606:	2e14      	cmp	r6, #20
 8015608:	d103      	bne.n	8015612 <ceil+0xd2>
 801560a:	3401      	adds	r4, #1
 801560c:	ea25 0507 	bic.w	r5, r5, r7
 8015610:	e7b7      	b.n	8015582 <ceil+0x42>
 8015612:	2301      	movs	r3, #1
 8015614:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015618:	fa03 f606 	lsl.w	r6, r3, r6
 801561c:	4435      	add	r5, r6
 801561e:	4545      	cmp	r5, r8
 8015620:	bf38      	it	cc
 8015622:	18e4      	addcc	r4, r4, r3
 8015624:	e7f2      	b.n	801560c <ceil+0xcc>
 8015626:	2500      	movs	r5, #0
 8015628:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801562c:	e7a9      	b.n	8015582 <ceil+0x42>
 801562e:	4625      	mov	r5, r4
 8015630:	e7a7      	b.n	8015582 <ceil+0x42>
 8015632:	bf00      	nop
 8015634:	f3af 8000 	nop.w
 8015638:	8800759c 	.word	0x8800759c
 801563c:	7e37e43c 	.word	0x7e37e43c
 8015640:	3ff00000 	.word	0x3ff00000
 8015644:	000fffff 	.word	0x000fffff

08015648 <floor>:
 8015648:	ec51 0b10 	vmov	r0, r1, d0
 801564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015650:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015654:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015658:	2e13      	cmp	r6, #19
 801565a:	ee10 5a10 	vmov	r5, s0
 801565e:	ee10 8a10 	vmov	r8, s0
 8015662:	460c      	mov	r4, r1
 8015664:	dc32      	bgt.n	80156cc <floor+0x84>
 8015666:	2e00      	cmp	r6, #0
 8015668:	da14      	bge.n	8015694 <floor+0x4c>
 801566a:	a333      	add	r3, pc, #204	; (adr r3, 8015738 <floor+0xf0>)
 801566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015670:	f7ea fe0c 	bl	800028c <__adddf3>
 8015674:	2200      	movs	r2, #0
 8015676:	2300      	movs	r3, #0
 8015678:	f7eb fa4e 	bl	8000b18 <__aeabi_dcmpgt>
 801567c:	b138      	cbz	r0, 801568e <floor+0x46>
 801567e:	2c00      	cmp	r4, #0
 8015680:	da57      	bge.n	8015732 <floor+0xea>
 8015682:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015686:	431d      	orrs	r5, r3
 8015688:	d001      	beq.n	801568e <floor+0x46>
 801568a:	4c2d      	ldr	r4, [pc, #180]	; (8015740 <floor+0xf8>)
 801568c:	2500      	movs	r5, #0
 801568e:	4621      	mov	r1, r4
 8015690:	4628      	mov	r0, r5
 8015692:	e025      	b.n	80156e0 <floor+0x98>
 8015694:	4f2b      	ldr	r7, [pc, #172]	; (8015744 <floor+0xfc>)
 8015696:	4137      	asrs	r7, r6
 8015698:	ea01 0307 	and.w	r3, r1, r7
 801569c:	4303      	orrs	r3, r0
 801569e:	d01f      	beq.n	80156e0 <floor+0x98>
 80156a0:	a325      	add	r3, pc, #148	; (adr r3, 8015738 <floor+0xf0>)
 80156a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a6:	f7ea fdf1 	bl	800028c <__adddf3>
 80156aa:	2200      	movs	r2, #0
 80156ac:	2300      	movs	r3, #0
 80156ae:	f7eb fa33 	bl	8000b18 <__aeabi_dcmpgt>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	d0eb      	beq.n	801568e <floor+0x46>
 80156b6:	2c00      	cmp	r4, #0
 80156b8:	bfbe      	ittt	lt
 80156ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80156be:	fa43 f606 	asrlt.w	r6, r3, r6
 80156c2:	19a4      	addlt	r4, r4, r6
 80156c4:	ea24 0407 	bic.w	r4, r4, r7
 80156c8:	2500      	movs	r5, #0
 80156ca:	e7e0      	b.n	801568e <floor+0x46>
 80156cc:	2e33      	cmp	r6, #51	; 0x33
 80156ce:	dd0b      	ble.n	80156e8 <floor+0xa0>
 80156d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80156d4:	d104      	bne.n	80156e0 <floor+0x98>
 80156d6:	ee10 2a10 	vmov	r2, s0
 80156da:	460b      	mov	r3, r1
 80156dc:	f7ea fdd6 	bl	800028c <__adddf3>
 80156e0:	ec41 0b10 	vmov	d0, r0, r1
 80156e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80156ec:	f04f 33ff 	mov.w	r3, #4294967295
 80156f0:	fa23 f707 	lsr.w	r7, r3, r7
 80156f4:	4207      	tst	r7, r0
 80156f6:	d0f3      	beq.n	80156e0 <floor+0x98>
 80156f8:	a30f      	add	r3, pc, #60	; (adr r3, 8015738 <floor+0xf0>)
 80156fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fe:	f7ea fdc5 	bl	800028c <__adddf3>
 8015702:	2200      	movs	r2, #0
 8015704:	2300      	movs	r3, #0
 8015706:	f7eb fa07 	bl	8000b18 <__aeabi_dcmpgt>
 801570a:	2800      	cmp	r0, #0
 801570c:	d0bf      	beq.n	801568e <floor+0x46>
 801570e:	2c00      	cmp	r4, #0
 8015710:	da02      	bge.n	8015718 <floor+0xd0>
 8015712:	2e14      	cmp	r6, #20
 8015714:	d103      	bne.n	801571e <floor+0xd6>
 8015716:	3401      	adds	r4, #1
 8015718:	ea25 0507 	bic.w	r5, r5, r7
 801571c:	e7b7      	b.n	801568e <floor+0x46>
 801571e:	2301      	movs	r3, #1
 8015720:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015724:	fa03 f606 	lsl.w	r6, r3, r6
 8015728:	4435      	add	r5, r6
 801572a:	4545      	cmp	r5, r8
 801572c:	bf38      	it	cc
 801572e:	18e4      	addcc	r4, r4, r3
 8015730:	e7f2      	b.n	8015718 <floor+0xd0>
 8015732:	2500      	movs	r5, #0
 8015734:	462c      	mov	r4, r5
 8015736:	e7aa      	b.n	801568e <floor+0x46>
 8015738:	8800759c 	.word	0x8800759c
 801573c:	7e37e43c 	.word	0x7e37e43c
 8015740:	bff00000 	.word	0xbff00000
 8015744:	000fffff 	.word	0x000fffff

08015748 <cosf>:
 8015748:	ee10 3a10 	vmov	r3, s0
 801574c:	b507      	push	{r0, r1, r2, lr}
 801574e:	4a1c      	ldr	r2, [pc, #112]	; (80157c0 <cosf+0x78>)
 8015750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015754:	4293      	cmp	r3, r2
 8015756:	dc04      	bgt.n	8015762 <cosf+0x1a>
 8015758:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80157c4 <cosf+0x7c>
 801575c:	f000 fe9e 	bl	801649c <__kernel_cosf>
 8015760:	e004      	b.n	801576c <cosf+0x24>
 8015762:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015766:	db04      	blt.n	8015772 <cosf+0x2a>
 8015768:	ee30 0a40 	vsub.f32	s0, s0, s0
 801576c:	b003      	add	sp, #12
 801576e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015772:	4668      	mov	r0, sp
 8015774:	f000 fd52 	bl	801621c <__ieee754_rem_pio2f>
 8015778:	f000 0003 	and.w	r0, r0, #3
 801577c:	2801      	cmp	r0, #1
 801577e:	d007      	beq.n	8015790 <cosf+0x48>
 8015780:	2802      	cmp	r0, #2
 8015782:	d00e      	beq.n	80157a2 <cosf+0x5a>
 8015784:	b9a0      	cbnz	r0, 80157b0 <cosf+0x68>
 8015786:	eddd 0a01 	vldr	s1, [sp, #4]
 801578a:	ed9d 0a00 	vldr	s0, [sp]
 801578e:	e7e5      	b.n	801575c <cosf+0x14>
 8015790:	eddd 0a01 	vldr	s1, [sp, #4]
 8015794:	ed9d 0a00 	vldr	s0, [sp]
 8015798:	f001 f96a 	bl	8016a70 <__kernel_sinf>
 801579c:	eeb1 0a40 	vneg.f32	s0, s0
 80157a0:	e7e4      	b.n	801576c <cosf+0x24>
 80157a2:	eddd 0a01 	vldr	s1, [sp, #4]
 80157a6:	ed9d 0a00 	vldr	s0, [sp]
 80157aa:	f000 fe77 	bl	801649c <__kernel_cosf>
 80157ae:	e7f5      	b.n	801579c <cosf+0x54>
 80157b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80157b4:	ed9d 0a00 	vldr	s0, [sp]
 80157b8:	2001      	movs	r0, #1
 80157ba:	f001 f959 	bl	8016a70 <__kernel_sinf>
 80157be:	e7d5      	b.n	801576c <cosf+0x24>
 80157c0:	3f490fd8 	.word	0x3f490fd8
 80157c4:	00000000 	.word	0x00000000

080157c8 <roundf>:
 80157c8:	ee10 0a10 	vmov	r0, s0
 80157cc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80157d0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80157d4:	2a16      	cmp	r2, #22
 80157d6:	dc15      	bgt.n	8015804 <roundf+0x3c>
 80157d8:	2a00      	cmp	r2, #0
 80157da:	da08      	bge.n	80157ee <roundf+0x26>
 80157dc:	3201      	adds	r2, #1
 80157de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80157e2:	d101      	bne.n	80157e8 <roundf+0x20>
 80157e4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80157e8:	ee00 3a10 	vmov	s0, r3
 80157ec:	4770      	bx	lr
 80157ee:	4908      	ldr	r1, [pc, #32]	; (8015810 <roundf+0x48>)
 80157f0:	4111      	asrs	r1, r2
 80157f2:	4208      	tst	r0, r1
 80157f4:	d0fa      	beq.n	80157ec <roundf+0x24>
 80157f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80157fa:	4113      	asrs	r3, r2
 80157fc:	4403      	add	r3, r0
 80157fe:	ea23 0301 	bic.w	r3, r3, r1
 8015802:	e7f1      	b.n	80157e8 <roundf+0x20>
 8015804:	2a80      	cmp	r2, #128	; 0x80
 8015806:	d1f1      	bne.n	80157ec <roundf+0x24>
 8015808:	ee30 0a00 	vadd.f32	s0, s0, s0
 801580c:	4770      	bx	lr
 801580e:	bf00      	nop
 8015810:	007fffff 	.word	0x007fffff

08015814 <sinf>:
 8015814:	ee10 3a10 	vmov	r3, s0
 8015818:	b507      	push	{r0, r1, r2, lr}
 801581a:	4a1d      	ldr	r2, [pc, #116]	; (8015890 <sinf+0x7c>)
 801581c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015820:	4293      	cmp	r3, r2
 8015822:	dc05      	bgt.n	8015830 <sinf+0x1c>
 8015824:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015894 <sinf+0x80>
 8015828:	2000      	movs	r0, #0
 801582a:	f001 f921 	bl	8016a70 <__kernel_sinf>
 801582e:	e004      	b.n	801583a <sinf+0x26>
 8015830:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015834:	db04      	blt.n	8015840 <sinf+0x2c>
 8015836:	ee30 0a40 	vsub.f32	s0, s0, s0
 801583a:	b003      	add	sp, #12
 801583c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015840:	4668      	mov	r0, sp
 8015842:	f000 fceb 	bl	801621c <__ieee754_rem_pio2f>
 8015846:	f000 0003 	and.w	r0, r0, #3
 801584a:	2801      	cmp	r0, #1
 801584c:	d008      	beq.n	8015860 <sinf+0x4c>
 801584e:	2802      	cmp	r0, #2
 8015850:	d00d      	beq.n	801586e <sinf+0x5a>
 8015852:	b9b0      	cbnz	r0, 8015882 <sinf+0x6e>
 8015854:	eddd 0a01 	vldr	s1, [sp, #4]
 8015858:	ed9d 0a00 	vldr	s0, [sp]
 801585c:	2001      	movs	r0, #1
 801585e:	e7e4      	b.n	801582a <sinf+0x16>
 8015860:	eddd 0a01 	vldr	s1, [sp, #4]
 8015864:	ed9d 0a00 	vldr	s0, [sp]
 8015868:	f000 fe18 	bl	801649c <__kernel_cosf>
 801586c:	e7e5      	b.n	801583a <sinf+0x26>
 801586e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015872:	ed9d 0a00 	vldr	s0, [sp]
 8015876:	2001      	movs	r0, #1
 8015878:	f001 f8fa 	bl	8016a70 <__kernel_sinf>
 801587c:	eeb1 0a40 	vneg.f32	s0, s0
 8015880:	e7db      	b.n	801583a <sinf+0x26>
 8015882:	eddd 0a01 	vldr	s1, [sp, #4]
 8015886:	ed9d 0a00 	vldr	s0, [sp]
 801588a:	f000 fe07 	bl	801649c <__kernel_cosf>
 801588e:	e7f5      	b.n	801587c <sinf+0x68>
 8015890:	3f490fd8 	.word	0x3f490fd8
 8015894:	00000000 	.word	0x00000000

08015898 <tanf>:
 8015898:	ee10 3a10 	vmov	r3, s0
 801589c:	b507      	push	{r0, r1, r2, lr}
 801589e:	4a10      	ldr	r2, [pc, #64]	; (80158e0 <tanf+0x48>)
 80158a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158a4:	4293      	cmp	r3, r2
 80158a6:	dc05      	bgt.n	80158b4 <tanf+0x1c>
 80158a8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80158e4 <tanf+0x4c>
 80158ac:	2001      	movs	r0, #1
 80158ae:	f001 f927 	bl	8016b00 <__kernel_tanf>
 80158b2:	e004      	b.n	80158be <tanf+0x26>
 80158b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158b8:	db04      	blt.n	80158c4 <tanf+0x2c>
 80158ba:	ee30 0a40 	vsub.f32	s0, s0, s0
 80158be:	b003      	add	sp, #12
 80158c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80158c4:	4668      	mov	r0, sp
 80158c6:	f000 fca9 	bl	801621c <__ieee754_rem_pio2f>
 80158ca:	0040      	lsls	r0, r0, #1
 80158cc:	f000 0002 	and.w	r0, r0, #2
 80158d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80158d4:	ed9d 0a00 	vldr	s0, [sp]
 80158d8:	f1c0 0001 	rsb	r0, r0, #1
 80158dc:	e7e7      	b.n	80158ae <tanf+0x16>
 80158de:	bf00      	nop
 80158e0:	3f490fda 	.word	0x3f490fda
 80158e4:	00000000 	.word	0x00000000

080158e8 <atan2>:
 80158e8:	f000 b89a 	b.w	8015a20 <__ieee754_atan2>

080158ec <sqrt>:
 80158ec:	b538      	push	{r3, r4, r5, lr}
 80158ee:	ed2d 8b02 	vpush	{d8}
 80158f2:	ec55 4b10 	vmov	r4, r5, d0
 80158f6:	f000 f95d 	bl	8015bb4 <__ieee754_sqrt>
 80158fa:	4b15      	ldr	r3, [pc, #84]	; (8015950 <sqrt+0x64>)
 80158fc:	eeb0 8a40 	vmov.f32	s16, s0
 8015900:	eef0 8a60 	vmov.f32	s17, s1
 8015904:	f993 3000 	ldrsb.w	r3, [r3]
 8015908:	3301      	adds	r3, #1
 801590a:	d019      	beq.n	8015940 <sqrt+0x54>
 801590c:	4622      	mov	r2, r4
 801590e:	462b      	mov	r3, r5
 8015910:	4620      	mov	r0, r4
 8015912:	4629      	mov	r1, r5
 8015914:	f7eb f90a 	bl	8000b2c <__aeabi_dcmpun>
 8015918:	b990      	cbnz	r0, 8015940 <sqrt+0x54>
 801591a:	2200      	movs	r2, #0
 801591c:	2300      	movs	r3, #0
 801591e:	4620      	mov	r0, r4
 8015920:	4629      	mov	r1, r5
 8015922:	f7eb f8db 	bl	8000adc <__aeabi_dcmplt>
 8015926:	b158      	cbz	r0, 8015940 <sqrt+0x54>
 8015928:	f001 fd16 	bl	8017358 <__errno>
 801592c:	2321      	movs	r3, #33	; 0x21
 801592e:	6003      	str	r3, [r0, #0]
 8015930:	2200      	movs	r2, #0
 8015932:	2300      	movs	r3, #0
 8015934:	4610      	mov	r0, r2
 8015936:	4619      	mov	r1, r3
 8015938:	f7ea ff88 	bl	800084c <__aeabi_ddiv>
 801593c:	ec41 0b18 	vmov	d8, r0, r1
 8015940:	eeb0 0a48 	vmov.f32	s0, s16
 8015944:	eef0 0a68 	vmov.f32	s1, s17
 8015948:	ecbd 8b02 	vpop	{d8}
 801594c:	bd38      	pop	{r3, r4, r5, pc}
 801594e:	bf00      	nop
 8015950:	200000ed 	.word	0x200000ed

08015954 <acosf>:
 8015954:	b508      	push	{r3, lr}
 8015956:	ed2d 8b02 	vpush	{d8}
 801595a:	eeb0 8a40 	vmov.f32	s16, s0
 801595e:	f000 f9dd 	bl	8015d1c <__ieee754_acosf>
 8015962:	4b13      	ldr	r3, [pc, #76]	; (80159b0 <acosf+0x5c>)
 8015964:	f993 3000 	ldrsb.w	r3, [r3]
 8015968:	3301      	adds	r3, #1
 801596a:	eef0 8a40 	vmov.f32	s17, s0
 801596e:	d01a      	beq.n	80159a6 <acosf+0x52>
 8015970:	eeb4 8a48 	vcmp.f32	s16, s16
 8015974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015978:	d615      	bvs.n	80159a6 <acosf+0x52>
 801597a:	eeb0 0a48 	vmov.f32	s0, s16
 801597e:	f001 fc21 	bl	80171c4 <fabsf>
 8015982:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015986:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801598e:	dd0a      	ble.n	80159a6 <acosf+0x52>
 8015990:	f001 fce2 	bl	8017358 <__errno>
 8015994:	ecbd 8b02 	vpop	{d8}
 8015998:	2321      	movs	r3, #33	; 0x21
 801599a:	6003      	str	r3, [r0, #0]
 801599c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80159a0:	4804      	ldr	r0, [pc, #16]	; (80159b4 <acosf+0x60>)
 80159a2:	f001 bc59 	b.w	8017258 <nanf>
 80159a6:	eeb0 0a68 	vmov.f32	s0, s17
 80159aa:	ecbd 8b02 	vpop	{d8}
 80159ae:	bd08      	pop	{r3, pc}
 80159b0:	200000ed 	.word	0x200000ed
 80159b4:	0801aad8 	.word	0x0801aad8

080159b8 <asinf>:
 80159b8:	b508      	push	{r3, lr}
 80159ba:	ed2d 8b02 	vpush	{d8}
 80159be:	eeb0 8a40 	vmov.f32	s16, s0
 80159c2:	f000 faa5 	bl	8015f10 <__ieee754_asinf>
 80159c6:	4b13      	ldr	r3, [pc, #76]	; (8015a14 <asinf+0x5c>)
 80159c8:	f993 3000 	ldrsb.w	r3, [r3]
 80159cc:	3301      	adds	r3, #1
 80159ce:	eef0 8a40 	vmov.f32	s17, s0
 80159d2:	d01a      	beq.n	8015a0a <asinf+0x52>
 80159d4:	eeb4 8a48 	vcmp.f32	s16, s16
 80159d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159dc:	d615      	bvs.n	8015a0a <asinf+0x52>
 80159de:	eeb0 0a48 	vmov.f32	s0, s16
 80159e2:	f001 fbef 	bl	80171c4 <fabsf>
 80159e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80159ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f2:	dd0a      	ble.n	8015a0a <asinf+0x52>
 80159f4:	f001 fcb0 	bl	8017358 <__errno>
 80159f8:	ecbd 8b02 	vpop	{d8}
 80159fc:	2321      	movs	r3, #33	; 0x21
 80159fe:	6003      	str	r3, [r0, #0]
 8015a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a04:	4804      	ldr	r0, [pc, #16]	; (8015a18 <asinf+0x60>)
 8015a06:	f001 bc27 	b.w	8017258 <nanf>
 8015a0a:	eeb0 0a68 	vmov.f32	s0, s17
 8015a0e:	ecbd 8b02 	vpop	{d8}
 8015a12:	bd08      	pop	{r3, pc}
 8015a14:	200000ed 	.word	0x200000ed
 8015a18:	0801aad8 	.word	0x0801aad8

08015a1c <atan2f>:
 8015a1c:	f000 bb5e 	b.w	80160dc <__ieee754_atan2f>

08015a20 <__ieee754_atan2>:
 8015a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a24:	ec57 6b11 	vmov	r6, r7, d1
 8015a28:	4273      	negs	r3, r6
 8015a2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015bb0 <__ieee754_atan2+0x190>
 8015a2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015a32:	4333      	orrs	r3, r6
 8015a34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015a38:	4573      	cmp	r3, lr
 8015a3a:	ec51 0b10 	vmov	r0, r1, d0
 8015a3e:	ee11 8a10 	vmov	r8, s2
 8015a42:	d80a      	bhi.n	8015a5a <__ieee754_atan2+0x3a>
 8015a44:	4244      	negs	r4, r0
 8015a46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015a4a:	4304      	orrs	r4, r0
 8015a4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015a50:	4574      	cmp	r4, lr
 8015a52:	ee10 9a10 	vmov	r9, s0
 8015a56:	468c      	mov	ip, r1
 8015a58:	d907      	bls.n	8015a6a <__ieee754_atan2+0x4a>
 8015a5a:	4632      	mov	r2, r6
 8015a5c:	463b      	mov	r3, r7
 8015a5e:	f7ea fc15 	bl	800028c <__adddf3>
 8015a62:	ec41 0b10 	vmov	d0, r0, r1
 8015a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015a6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015a72:	4334      	orrs	r4, r6
 8015a74:	d103      	bne.n	8015a7e <__ieee754_atan2+0x5e>
 8015a76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a7a:	f001 b925 	b.w	8016cc8 <atan>
 8015a7e:	17bc      	asrs	r4, r7, #30
 8015a80:	f004 0402 	and.w	r4, r4, #2
 8015a84:	ea53 0909 	orrs.w	r9, r3, r9
 8015a88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015a8c:	d107      	bne.n	8015a9e <__ieee754_atan2+0x7e>
 8015a8e:	2c02      	cmp	r4, #2
 8015a90:	d060      	beq.n	8015b54 <__ieee754_atan2+0x134>
 8015a92:	2c03      	cmp	r4, #3
 8015a94:	d1e5      	bne.n	8015a62 <__ieee754_atan2+0x42>
 8015a96:	a142      	add	r1, pc, #264	; (adr r1, 8015ba0 <__ieee754_atan2+0x180>)
 8015a98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a9c:	e7e1      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015a9e:	ea52 0808 	orrs.w	r8, r2, r8
 8015aa2:	d106      	bne.n	8015ab2 <__ieee754_atan2+0x92>
 8015aa4:	f1bc 0f00 	cmp.w	ip, #0
 8015aa8:	da5f      	bge.n	8015b6a <__ieee754_atan2+0x14a>
 8015aaa:	a13f      	add	r1, pc, #252	; (adr r1, 8015ba8 <__ieee754_atan2+0x188>)
 8015aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ab0:	e7d7      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015ab2:	4572      	cmp	r2, lr
 8015ab4:	d10f      	bne.n	8015ad6 <__ieee754_atan2+0xb6>
 8015ab6:	4293      	cmp	r3, r2
 8015ab8:	f104 34ff 	add.w	r4, r4, #4294967295
 8015abc:	d107      	bne.n	8015ace <__ieee754_atan2+0xae>
 8015abe:	2c02      	cmp	r4, #2
 8015ac0:	d84c      	bhi.n	8015b5c <__ieee754_atan2+0x13c>
 8015ac2:	4b35      	ldr	r3, [pc, #212]	; (8015b98 <__ieee754_atan2+0x178>)
 8015ac4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015ac8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015acc:	e7c9      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015ace:	2c02      	cmp	r4, #2
 8015ad0:	d848      	bhi.n	8015b64 <__ieee754_atan2+0x144>
 8015ad2:	4b32      	ldr	r3, [pc, #200]	; (8015b9c <__ieee754_atan2+0x17c>)
 8015ad4:	e7f6      	b.n	8015ac4 <__ieee754_atan2+0xa4>
 8015ad6:	4573      	cmp	r3, lr
 8015ad8:	d0e4      	beq.n	8015aa4 <__ieee754_atan2+0x84>
 8015ada:	1a9b      	subs	r3, r3, r2
 8015adc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015ae0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015ae4:	da1e      	bge.n	8015b24 <__ieee754_atan2+0x104>
 8015ae6:	2f00      	cmp	r7, #0
 8015ae8:	da01      	bge.n	8015aee <__ieee754_atan2+0xce>
 8015aea:	323c      	adds	r2, #60	; 0x3c
 8015aec:	db1e      	blt.n	8015b2c <__ieee754_atan2+0x10c>
 8015aee:	4632      	mov	r2, r6
 8015af0:	463b      	mov	r3, r7
 8015af2:	f7ea feab 	bl	800084c <__aeabi_ddiv>
 8015af6:	ec41 0b10 	vmov	d0, r0, r1
 8015afa:	f001 fa85 	bl	8017008 <fabs>
 8015afe:	f001 f8e3 	bl	8016cc8 <atan>
 8015b02:	ec51 0b10 	vmov	r0, r1, d0
 8015b06:	2c01      	cmp	r4, #1
 8015b08:	d013      	beq.n	8015b32 <__ieee754_atan2+0x112>
 8015b0a:	2c02      	cmp	r4, #2
 8015b0c:	d015      	beq.n	8015b3a <__ieee754_atan2+0x11a>
 8015b0e:	2c00      	cmp	r4, #0
 8015b10:	d0a7      	beq.n	8015a62 <__ieee754_atan2+0x42>
 8015b12:	a319      	add	r3, pc, #100	; (adr r3, 8015b78 <__ieee754_atan2+0x158>)
 8015b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b18:	f7ea fbb6 	bl	8000288 <__aeabi_dsub>
 8015b1c:	a318      	add	r3, pc, #96	; (adr r3, 8015b80 <__ieee754_atan2+0x160>)
 8015b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b22:	e014      	b.n	8015b4e <__ieee754_atan2+0x12e>
 8015b24:	a118      	add	r1, pc, #96	; (adr r1, 8015b88 <__ieee754_atan2+0x168>)
 8015b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b2a:	e7ec      	b.n	8015b06 <__ieee754_atan2+0xe6>
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	2100      	movs	r1, #0
 8015b30:	e7e9      	b.n	8015b06 <__ieee754_atan2+0xe6>
 8015b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015b36:	4619      	mov	r1, r3
 8015b38:	e793      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015b3a:	a30f      	add	r3, pc, #60	; (adr r3, 8015b78 <__ieee754_atan2+0x158>)
 8015b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b40:	f7ea fba2 	bl	8000288 <__aeabi_dsub>
 8015b44:	4602      	mov	r2, r0
 8015b46:	460b      	mov	r3, r1
 8015b48:	a10d      	add	r1, pc, #52	; (adr r1, 8015b80 <__ieee754_atan2+0x160>)
 8015b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b4e:	f7ea fb9b 	bl	8000288 <__aeabi_dsub>
 8015b52:	e786      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015b54:	a10a      	add	r1, pc, #40	; (adr r1, 8015b80 <__ieee754_atan2+0x160>)
 8015b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b5a:	e782      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015b5c:	a10c      	add	r1, pc, #48	; (adr r1, 8015b90 <__ieee754_atan2+0x170>)
 8015b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b62:	e77e      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015b64:	2000      	movs	r0, #0
 8015b66:	2100      	movs	r1, #0
 8015b68:	e77b      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015b6a:	a107      	add	r1, pc, #28	; (adr r1, 8015b88 <__ieee754_atan2+0x168>)
 8015b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b70:	e777      	b.n	8015a62 <__ieee754_atan2+0x42>
 8015b72:	bf00      	nop
 8015b74:	f3af 8000 	nop.w
 8015b78:	33145c07 	.word	0x33145c07
 8015b7c:	3ca1a626 	.word	0x3ca1a626
 8015b80:	54442d18 	.word	0x54442d18
 8015b84:	400921fb 	.word	0x400921fb
 8015b88:	54442d18 	.word	0x54442d18
 8015b8c:	3ff921fb 	.word	0x3ff921fb
 8015b90:	54442d18 	.word	0x54442d18
 8015b94:	3fe921fb 	.word	0x3fe921fb
 8015b98:	0801a388 	.word	0x0801a388
 8015b9c:	0801a3a0 	.word	0x0801a3a0
 8015ba0:	54442d18 	.word	0x54442d18
 8015ba4:	c00921fb 	.word	0xc00921fb
 8015ba8:	54442d18 	.word	0x54442d18
 8015bac:	bff921fb 	.word	0xbff921fb
 8015bb0:	7ff00000 	.word	0x7ff00000

08015bb4 <__ieee754_sqrt>:
 8015bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb8:	ec55 4b10 	vmov	r4, r5, d0
 8015bbc:	4e56      	ldr	r6, [pc, #344]	; (8015d18 <__ieee754_sqrt+0x164>)
 8015bbe:	43ae      	bics	r6, r5
 8015bc0:	ee10 0a10 	vmov	r0, s0
 8015bc4:	ee10 3a10 	vmov	r3, s0
 8015bc8:	4629      	mov	r1, r5
 8015bca:	462a      	mov	r2, r5
 8015bcc:	d110      	bne.n	8015bf0 <__ieee754_sqrt+0x3c>
 8015bce:	ee10 2a10 	vmov	r2, s0
 8015bd2:	462b      	mov	r3, r5
 8015bd4:	f7ea fd10 	bl	80005f8 <__aeabi_dmul>
 8015bd8:	4602      	mov	r2, r0
 8015bda:	460b      	mov	r3, r1
 8015bdc:	4620      	mov	r0, r4
 8015bde:	4629      	mov	r1, r5
 8015be0:	f7ea fb54 	bl	800028c <__adddf3>
 8015be4:	4604      	mov	r4, r0
 8015be6:	460d      	mov	r5, r1
 8015be8:	ec45 4b10 	vmov	d0, r4, r5
 8015bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bf0:	2d00      	cmp	r5, #0
 8015bf2:	dc10      	bgt.n	8015c16 <__ieee754_sqrt+0x62>
 8015bf4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015bf8:	4330      	orrs	r0, r6
 8015bfa:	d0f5      	beq.n	8015be8 <__ieee754_sqrt+0x34>
 8015bfc:	b15d      	cbz	r5, 8015c16 <__ieee754_sqrt+0x62>
 8015bfe:	ee10 2a10 	vmov	r2, s0
 8015c02:	462b      	mov	r3, r5
 8015c04:	ee10 0a10 	vmov	r0, s0
 8015c08:	f7ea fb3e 	bl	8000288 <__aeabi_dsub>
 8015c0c:	4602      	mov	r2, r0
 8015c0e:	460b      	mov	r3, r1
 8015c10:	f7ea fe1c 	bl	800084c <__aeabi_ddiv>
 8015c14:	e7e6      	b.n	8015be4 <__ieee754_sqrt+0x30>
 8015c16:	1509      	asrs	r1, r1, #20
 8015c18:	d076      	beq.n	8015d08 <__ieee754_sqrt+0x154>
 8015c1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015c1e:	07ce      	lsls	r6, r1, #31
 8015c20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015c24:	bf5e      	ittt	pl
 8015c26:	0fda      	lsrpl	r2, r3, #31
 8015c28:	005b      	lslpl	r3, r3, #1
 8015c2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015c2e:	0fda      	lsrs	r2, r3, #31
 8015c30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015c34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015c38:	2000      	movs	r0, #0
 8015c3a:	106d      	asrs	r5, r5, #1
 8015c3c:	005b      	lsls	r3, r3, #1
 8015c3e:	f04f 0e16 	mov.w	lr, #22
 8015c42:	4684      	mov	ip, r0
 8015c44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015c48:	eb0c 0401 	add.w	r4, ip, r1
 8015c4c:	4294      	cmp	r4, r2
 8015c4e:	bfde      	ittt	le
 8015c50:	1b12      	suble	r2, r2, r4
 8015c52:	eb04 0c01 	addle.w	ip, r4, r1
 8015c56:	1840      	addle	r0, r0, r1
 8015c58:	0052      	lsls	r2, r2, #1
 8015c5a:	f1be 0e01 	subs.w	lr, lr, #1
 8015c5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015c62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015c66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015c6a:	d1ed      	bne.n	8015c48 <__ieee754_sqrt+0x94>
 8015c6c:	4671      	mov	r1, lr
 8015c6e:	2720      	movs	r7, #32
 8015c70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015c74:	4562      	cmp	r2, ip
 8015c76:	eb04 060e 	add.w	r6, r4, lr
 8015c7a:	dc02      	bgt.n	8015c82 <__ieee754_sqrt+0xce>
 8015c7c:	d113      	bne.n	8015ca6 <__ieee754_sqrt+0xf2>
 8015c7e:	429e      	cmp	r6, r3
 8015c80:	d811      	bhi.n	8015ca6 <__ieee754_sqrt+0xf2>
 8015c82:	2e00      	cmp	r6, #0
 8015c84:	eb06 0e04 	add.w	lr, r6, r4
 8015c88:	da43      	bge.n	8015d12 <__ieee754_sqrt+0x15e>
 8015c8a:	f1be 0f00 	cmp.w	lr, #0
 8015c8e:	db40      	blt.n	8015d12 <__ieee754_sqrt+0x15e>
 8015c90:	f10c 0801 	add.w	r8, ip, #1
 8015c94:	eba2 020c 	sub.w	r2, r2, ip
 8015c98:	429e      	cmp	r6, r3
 8015c9a:	bf88      	it	hi
 8015c9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015ca0:	1b9b      	subs	r3, r3, r6
 8015ca2:	4421      	add	r1, r4
 8015ca4:	46c4      	mov	ip, r8
 8015ca6:	0052      	lsls	r2, r2, #1
 8015ca8:	3f01      	subs	r7, #1
 8015caa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015cae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015cb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015cb6:	d1dd      	bne.n	8015c74 <__ieee754_sqrt+0xc0>
 8015cb8:	4313      	orrs	r3, r2
 8015cba:	d006      	beq.n	8015cca <__ieee754_sqrt+0x116>
 8015cbc:	1c4c      	adds	r4, r1, #1
 8015cbe:	bf13      	iteet	ne
 8015cc0:	3101      	addne	r1, #1
 8015cc2:	3001      	addeq	r0, #1
 8015cc4:	4639      	moveq	r1, r7
 8015cc6:	f021 0101 	bicne.w	r1, r1, #1
 8015cca:	1043      	asrs	r3, r0, #1
 8015ccc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015cd0:	0849      	lsrs	r1, r1, #1
 8015cd2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015cd6:	07c2      	lsls	r2, r0, #31
 8015cd8:	bf48      	it	mi
 8015cda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015cde:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015ce2:	460c      	mov	r4, r1
 8015ce4:	463d      	mov	r5, r7
 8015ce6:	e77f      	b.n	8015be8 <__ieee754_sqrt+0x34>
 8015ce8:	0ada      	lsrs	r2, r3, #11
 8015cea:	3815      	subs	r0, #21
 8015cec:	055b      	lsls	r3, r3, #21
 8015cee:	2a00      	cmp	r2, #0
 8015cf0:	d0fa      	beq.n	8015ce8 <__ieee754_sqrt+0x134>
 8015cf2:	02d7      	lsls	r7, r2, #11
 8015cf4:	d50a      	bpl.n	8015d0c <__ieee754_sqrt+0x158>
 8015cf6:	f1c1 0420 	rsb	r4, r1, #32
 8015cfa:	fa23 f404 	lsr.w	r4, r3, r4
 8015cfe:	1e4d      	subs	r5, r1, #1
 8015d00:	408b      	lsls	r3, r1
 8015d02:	4322      	orrs	r2, r4
 8015d04:	1b41      	subs	r1, r0, r5
 8015d06:	e788      	b.n	8015c1a <__ieee754_sqrt+0x66>
 8015d08:	4608      	mov	r0, r1
 8015d0a:	e7f0      	b.n	8015cee <__ieee754_sqrt+0x13a>
 8015d0c:	0052      	lsls	r2, r2, #1
 8015d0e:	3101      	adds	r1, #1
 8015d10:	e7ef      	b.n	8015cf2 <__ieee754_sqrt+0x13e>
 8015d12:	46e0      	mov	r8, ip
 8015d14:	e7be      	b.n	8015c94 <__ieee754_sqrt+0xe0>
 8015d16:	bf00      	nop
 8015d18:	7ff00000 	.word	0x7ff00000

08015d1c <__ieee754_acosf>:
 8015d1c:	b508      	push	{r3, lr}
 8015d1e:	ee10 3a10 	vmov	r3, s0
 8015d22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015d26:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015d2a:	ed2d 8b0c 	vpush	{d8-d13}
 8015d2e:	d10a      	bne.n	8015d46 <__ieee754_acosf+0x2a>
 8015d30:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8015ecc <__ieee754_acosf+0x1b0>
 8015d34:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8015ed0 <__ieee754_acosf+0x1b4>
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	bfd8      	it	le
 8015d3c:	eeb0 0a48 	vmovle.f32	s0, s16
 8015d40:	ecbd 8b0c 	vpop	{d8-d13}
 8015d44:	bd08      	pop	{r3, pc}
 8015d46:	dd04      	ble.n	8015d52 <__ieee754_acosf+0x36>
 8015d48:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015d4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015d50:	e7f6      	b.n	8015d40 <__ieee754_acosf+0x24>
 8015d52:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8015d56:	da3e      	bge.n	8015dd6 <__ieee754_acosf+0xba>
 8015d58:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8015d5c:	f340 80b3 	ble.w	8015ec6 <__ieee754_acosf+0x1aa>
 8015d60:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015d64:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8015ed4 <__ieee754_acosf+0x1b8>
 8015d68:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015ed8 <__ieee754_acosf+0x1bc>
 8015d6c:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8015edc <__ieee754_acosf+0x1c0>
 8015d70:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8015ee0 <__ieee754_acosf+0x1c4>
 8015d74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015d78:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8015ee4 <__ieee754_acosf+0x1c8>
 8015d7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015d80:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015ee8 <__ieee754_acosf+0x1cc>
 8015d84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015d88:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015eec <__ieee754_acosf+0x1d0>
 8015d8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015d90:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8015ef0 <__ieee754_acosf+0x1d4>
 8015d94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015d98:	eddf 6a56 	vldr	s13, [pc, #344]	; 8015ef4 <__ieee754_acosf+0x1d8>
 8015d9c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8015da0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015ef8 <__ieee754_acosf+0x1dc>
 8015da4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015da8:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8015efc <__ieee754_acosf+0x1e0>
 8015dac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015db4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015db8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015dbc:	eef0 7a66 	vmov.f32	s15, s13
 8015dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015dc4:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015f00 <__ieee754_acosf+0x1e4>
 8015dc8:	eea0 8a66 	vfms.f32	s16, s0, s13
 8015dcc:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015dd0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015dd4:	e7b4      	b.n	8015d40 <__ieee754_acosf+0x24>
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	eddf da3e 	vldr	s27, [pc, #248]	; 8015ed4 <__ieee754_acosf+0x1b8>
 8015ddc:	eddf ca3e 	vldr	s25, [pc, #248]	; 8015ed8 <__ieee754_acosf+0x1bc>
 8015de0:	ed9f ca40 	vldr	s24, [pc, #256]	; 8015ee4 <__ieee754_acosf+0x1c8>
 8015de4:	eddf ba40 	vldr	s23, [pc, #256]	; 8015ee8 <__ieee754_acosf+0x1cc>
 8015de8:	ed9f ba40 	vldr	s22, [pc, #256]	; 8015eec <__ieee754_acosf+0x1d0>
 8015dec:	eddf 8a40 	vldr	s17, [pc, #256]	; 8015ef0 <__ieee754_acosf+0x1d4>
 8015df0:	ed9f da40 	vldr	s26, [pc, #256]	; 8015ef4 <__ieee754_acosf+0x1d8>
 8015df4:	eddf aa39 	vldr	s21, [pc, #228]	; 8015edc <__ieee754_acosf+0x1c0>
 8015df8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8015ef8 <__ieee754_acosf+0x1dc>
 8015dfc:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8015efc <__ieee754_acosf+0x1e0>
 8015e00:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015e04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015e08:	da28      	bge.n	8015e5c <__ieee754_acosf+0x140>
 8015e0a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015e0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015e12:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8015e16:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015e1a:	eeac ca80 	vfma.f32	s24, s25, s0
 8015e1e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8015e22:	eeec ba00 	vfma.f32	s23, s24, s0
 8015e26:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015e2a:	eeab ba80 	vfma.f32	s22, s23, s0
 8015e2e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8015e32:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8015e36:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015e3a:	f000 fb2b 	bl	8016494 <__ieee754_sqrtf>
 8015e3e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8015e42:	eddf 7a30 	vldr	s15, [pc, #192]	; 8015f04 <__ieee754_acosf+0x1e8>
 8015e46:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015e4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015e4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015e52:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8015f08 <__ieee754_acosf+0x1ec>
 8015e56:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015e5a:	e771      	b.n	8015d40 <__ieee754_acosf+0x24>
 8015e5c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8015e60:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015e64:	eeb0 0a48 	vmov.f32	s0, s16
 8015e68:	f000 fb14 	bl	8016494 <__ieee754_sqrtf>
 8015e6c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8015e70:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8015e74:	eeac ca88 	vfma.f32	s24, s25, s16
 8015e78:	eeaa aa88 	vfma.f32	s20, s21, s16
 8015e7c:	eeec ba08 	vfma.f32	s23, s24, s16
 8015e80:	ee10 3a10 	vmov	r3, s0
 8015e84:	eeab ba88 	vfma.f32	s22, s23, s16
 8015e88:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015e8c:	f023 030f 	bic.w	r3, r3, #15
 8015e90:	eeea 9a08 	vfma.f32	s19, s20, s16
 8015e94:	ee07 3a90 	vmov	s15, r3
 8015e98:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8015e9c:	eeb0 6a48 	vmov.f32	s12, s16
 8015ea0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8015ea4:	eea9 9a88 	vfma.f32	s18, s19, s16
 8015ea8:	ee70 6a27 	vadd.f32	s13, s0, s15
 8015eac:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015eb0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015eb4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8015eb8:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015ebc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015ec0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015ec4:	e73c      	b.n	8015d40 <__ieee754_acosf+0x24>
 8015ec6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015f0c <__ieee754_acosf+0x1f0>
 8015eca:	e739      	b.n	8015d40 <__ieee754_acosf+0x24>
 8015ecc:	00000000 	.word	0x00000000
 8015ed0:	40490fdb 	.word	0x40490fdb
 8015ed4:	3811ef08 	.word	0x3811ef08
 8015ed8:	3a4f7f04 	.word	0x3a4f7f04
 8015edc:	bf303361 	.word	0xbf303361
 8015ee0:	33a22168 	.word	0x33a22168
 8015ee4:	bd241146 	.word	0xbd241146
 8015ee8:	3e4e0aa8 	.word	0x3e4e0aa8
 8015eec:	bea6b090 	.word	0xbea6b090
 8015ef0:	3e2aaaab 	.word	0x3e2aaaab
 8015ef4:	3d9dc62e 	.word	0x3d9dc62e
 8015ef8:	4001572d 	.word	0x4001572d
 8015efc:	c019d139 	.word	0xc019d139
 8015f00:	3fc90fda 	.word	0x3fc90fda
 8015f04:	b3a22168 	.word	0xb3a22168
 8015f08:	40490fda 	.word	0x40490fda
 8015f0c:	3fc90fdb 	.word	0x3fc90fdb

08015f10 <__ieee754_asinf>:
 8015f10:	b538      	push	{r3, r4, r5, lr}
 8015f12:	ee10 5a10 	vmov	r5, s0
 8015f16:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015f1a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015f1e:	ed2d 8b04 	vpush	{d8-d9}
 8015f22:	d10c      	bne.n	8015f3e <__ieee754_asinf+0x2e>
 8015f24:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801609c <__ieee754_asinf+0x18c>
 8015f28:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80160a0 <__ieee754_asinf+0x190>
 8015f2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015f30:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015f34:	eeb0 0a67 	vmov.f32	s0, s15
 8015f38:	ecbd 8b04 	vpop	{d8-d9}
 8015f3c:	bd38      	pop	{r3, r4, r5, pc}
 8015f3e:	dd04      	ble.n	8015f4a <__ieee754_asinf+0x3a>
 8015f40:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015f44:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015f48:	e7f6      	b.n	8015f38 <__ieee754_asinf+0x28>
 8015f4a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8015f4e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015f52:	da0b      	bge.n	8015f6c <__ieee754_asinf+0x5c>
 8015f54:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015f58:	da52      	bge.n	8016000 <__ieee754_asinf+0xf0>
 8015f5a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80160a4 <__ieee754_asinf+0x194>
 8015f5e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015f62:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f6a:	dce5      	bgt.n	8015f38 <__ieee754_asinf+0x28>
 8015f6c:	f001 f92a 	bl	80171c4 <fabsf>
 8015f70:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8015f74:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015f78:	ee20 8a08 	vmul.f32	s16, s0, s16
 8015f7c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80160a8 <__ieee754_asinf+0x198>
 8015f80:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80160ac <__ieee754_asinf+0x19c>
 8015f84:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80160b0 <__ieee754_asinf+0x1a0>
 8015f88:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015f8c:	eddf 7a49 	vldr	s15, [pc, #292]	; 80160b4 <__ieee754_asinf+0x1a4>
 8015f90:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015f94:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80160b8 <__ieee754_asinf+0x1a8>
 8015f98:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015f9c:	eddf 7a47 	vldr	s15, [pc, #284]	; 80160bc <__ieee754_asinf+0x1ac>
 8015fa0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015fa4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80160c0 <__ieee754_asinf+0x1b0>
 8015fa8:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015fac:	eddf 7a45 	vldr	s15, [pc, #276]	; 80160c4 <__ieee754_asinf+0x1b4>
 8015fb0:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015fb4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80160c8 <__ieee754_asinf+0x1b8>
 8015fb8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015fbc:	eddf 7a43 	vldr	s15, [pc, #268]	; 80160cc <__ieee754_asinf+0x1bc>
 8015fc0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8015fc8:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015fcc:	f000 fa62 	bl	8016494 <__ieee754_sqrtf>
 8015fd0:	4b3f      	ldr	r3, [pc, #252]	; (80160d0 <__ieee754_asinf+0x1c0>)
 8015fd2:	ee29 9a08 	vmul.f32	s18, s18, s16
 8015fd6:	429c      	cmp	r4, r3
 8015fd8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8015fdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015fe0:	dd3d      	ble.n	801605e <__ieee754_asinf+0x14e>
 8015fe2:	eea0 0a06 	vfma.f32	s0, s0, s12
 8015fe6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80160d4 <__ieee754_asinf+0x1c4>
 8015fea:	eee0 7a26 	vfma.f32	s15, s0, s13
 8015fee:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80160a0 <__ieee754_asinf+0x190>
 8015ff2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015ff6:	2d00      	cmp	r5, #0
 8015ff8:	bfd8      	it	le
 8015ffa:	eeb1 0a40 	vnegle.f32	s0, s0
 8015ffe:	e79b      	b.n	8015f38 <__ieee754_asinf+0x28>
 8016000:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016004:	eddf 6a28 	vldr	s13, [pc, #160]	; 80160a8 <__ieee754_asinf+0x198>
 8016008:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80160ac <__ieee754_asinf+0x19c>
 801600c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80160c0 <__ieee754_asinf+0x1b0>
 8016010:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016014:	eddf 6a27 	vldr	s13, [pc, #156]	; 80160b4 <__ieee754_asinf+0x1a4>
 8016018:	eee7 6a27 	vfma.f32	s13, s14, s15
 801601c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80160b8 <__ieee754_asinf+0x1a8>
 8016020:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016024:	eddf 6a25 	vldr	s13, [pc, #148]	; 80160bc <__ieee754_asinf+0x1ac>
 8016028:	eee7 6a27 	vfma.f32	s13, s14, s15
 801602c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80160b0 <__ieee754_asinf+0x1a0>
 8016030:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016034:	eddf 6a23 	vldr	s13, [pc, #140]	; 80160c4 <__ieee754_asinf+0x1b4>
 8016038:	eee7 6a86 	vfma.f32	s13, s15, s12
 801603c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80160c8 <__ieee754_asinf+0x1b8>
 8016040:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016044:	eddf 6a21 	vldr	s13, [pc, #132]	; 80160cc <__ieee754_asinf+0x1bc>
 8016048:	eee6 6a27 	vfma.f32	s13, s12, s15
 801604c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016050:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8016054:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016058:	eea0 0a27 	vfma.f32	s0, s0, s15
 801605c:	e76c      	b.n	8015f38 <__ieee754_asinf+0x28>
 801605e:	ee10 3a10 	vmov	r3, s0
 8016062:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016066:	f023 030f 	bic.w	r3, r3, #15
 801606a:	ee07 3a10 	vmov	s14, r3
 801606e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8016072:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016076:	ee30 0a00 	vadd.f32	s0, s0, s0
 801607a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801607e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801609c <__ieee754_asinf+0x18c>
 8016082:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8016086:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801608a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80160d8 <__ieee754_asinf+0x1c8>
 801608e:	eeb0 6a40 	vmov.f32	s12, s0
 8016092:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016096:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801609a:	e7aa      	b.n	8015ff2 <__ieee754_asinf+0xe2>
 801609c:	b33bbd2e 	.word	0xb33bbd2e
 80160a0:	3fc90fdb 	.word	0x3fc90fdb
 80160a4:	7149f2ca 	.word	0x7149f2ca
 80160a8:	3811ef08 	.word	0x3811ef08
 80160ac:	3a4f7f04 	.word	0x3a4f7f04
 80160b0:	3e2aaaab 	.word	0x3e2aaaab
 80160b4:	bd241146 	.word	0xbd241146
 80160b8:	3e4e0aa8 	.word	0x3e4e0aa8
 80160bc:	bea6b090 	.word	0xbea6b090
 80160c0:	3d9dc62e 	.word	0x3d9dc62e
 80160c4:	bf303361 	.word	0xbf303361
 80160c8:	4001572d 	.word	0x4001572d
 80160cc:	c019d139 	.word	0xc019d139
 80160d0:	3f799999 	.word	0x3f799999
 80160d4:	333bbd2e 	.word	0x333bbd2e
 80160d8:	3f490fdb 	.word	0x3f490fdb

080160dc <__ieee754_atan2f>:
 80160dc:	ee10 2a90 	vmov	r2, s1
 80160e0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80160e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80160e8:	b510      	push	{r4, lr}
 80160ea:	eef0 7a40 	vmov.f32	s15, s0
 80160ee:	dc06      	bgt.n	80160fe <__ieee754_atan2f+0x22>
 80160f0:	ee10 0a10 	vmov	r0, s0
 80160f4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80160f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80160fc:	dd04      	ble.n	8016108 <__ieee754_atan2f+0x2c>
 80160fe:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016102:	eeb0 0a67 	vmov.f32	s0, s15
 8016106:	bd10      	pop	{r4, pc}
 8016108:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801610c:	d103      	bne.n	8016116 <__ieee754_atan2f+0x3a>
 801610e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016112:	f000 bf83 	b.w	801701c <atanf>
 8016116:	1794      	asrs	r4, r2, #30
 8016118:	f004 0402 	and.w	r4, r4, #2
 801611c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016120:	b943      	cbnz	r3, 8016134 <__ieee754_atan2f+0x58>
 8016122:	2c02      	cmp	r4, #2
 8016124:	d05e      	beq.n	80161e4 <__ieee754_atan2f+0x108>
 8016126:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80161f8 <__ieee754_atan2f+0x11c>
 801612a:	2c03      	cmp	r4, #3
 801612c:	bf08      	it	eq
 801612e:	eef0 7a47 	vmoveq.f32	s15, s14
 8016132:	e7e6      	b.n	8016102 <__ieee754_atan2f+0x26>
 8016134:	b941      	cbnz	r1, 8016148 <__ieee754_atan2f+0x6c>
 8016136:	eddf 7a31 	vldr	s15, [pc, #196]	; 80161fc <__ieee754_atan2f+0x120>
 801613a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016200 <__ieee754_atan2f+0x124>
 801613e:	2800      	cmp	r0, #0
 8016140:	bfb8      	it	lt
 8016142:	eef0 7a40 	vmovlt.f32	s15, s0
 8016146:	e7dc      	b.n	8016102 <__ieee754_atan2f+0x26>
 8016148:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801614c:	d110      	bne.n	8016170 <__ieee754_atan2f+0x94>
 801614e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016152:	f104 34ff 	add.w	r4, r4, #4294967295
 8016156:	d107      	bne.n	8016168 <__ieee754_atan2f+0x8c>
 8016158:	2c02      	cmp	r4, #2
 801615a:	d846      	bhi.n	80161ea <__ieee754_atan2f+0x10e>
 801615c:	4b29      	ldr	r3, [pc, #164]	; (8016204 <__ieee754_atan2f+0x128>)
 801615e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016162:	edd4 7a00 	vldr	s15, [r4]
 8016166:	e7cc      	b.n	8016102 <__ieee754_atan2f+0x26>
 8016168:	2c02      	cmp	r4, #2
 801616a:	d841      	bhi.n	80161f0 <__ieee754_atan2f+0x114>
 801616c:	4b26      	ldr	r3, [pc, #152]	; (8016208 <__ieee754_atan2f+0x12c>)
 801616e:	e7f6      	b.n	801615e <__ieee754_atan2f+0x82>
 8016170:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016174:	d0df      	beq.n	8016136 <__ieee754_atan2f+0x5a>
 8016176:	1a5b      	subs	r3, r3, r1
 8016178:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801617c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016180:	da1a      	bge.n	80161b8 <__ieee754_atan2f+0xdc>
 8016182:	2a00      	cmp	r2, #0
 8016184:	da01      	bge.n	801618a <__ieee754_atan2f+0xae>
 8016186:	313c      	adds	r1, #60	; 0x3c
 8016188:	db19      	blt.n	80161be <__ieee754_atan2f+0xe2>
 801618a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801618e:	f001 f819 	bl	80171c4 <fabsf>
 8016192:	f000 ff43 	bl	801701c <atanf>
 8016196:	eef0 7a40 	vmov.f32	s15, s0
 801619a:	2c01      	cmp	r4, #1
 801619c:	d012      	beq.n	80161c4 <__ieee754_atan2f+0xe8>
 801619e:	2c02      	cmp	r4, #2
 80161a0:	d017      	beq.n	80161d2 <__ieee754_atan2f+0xf6>
 80161a2:	2c00      	cmp	r4, #0
 80161a4:	d0ad      	beq.n	8016102 <__ieee754_atan2f+0x26>
 80161a6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801620c <__ieee754_atan2f+0x130>
 80161aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80161ae:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016210 <__ieee754_atan2f+0x134>
 80161b2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80161b6:	e7a4      	b.n	8016102 <__ieee754_atan2f+0x26>
 80161b8:	eddf 7a10 	vldr	s15, [pc, #64]	; 80161fc <__ieee754_atan2f+0x120>
 80161bc:	e7ed      	b.n	801619a <__ieee754_atan2f+0xbe>
 80161be:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016214 <__ieee754_atan2f+0x138>
 80161c2:	e7ea      	b.n	801619a <__ieee754_atan2f+0xbe>
 80161c4:	ee17 3a90 	vmov	r3, s15
 80161c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80161cc:	ee07 3a90 	vmov	s15, r3
 80161d0:	e797      	b.n	8016102 <__ieee754_atan2f+0x26>
 80161d2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801620c <__ieee754_atan2f+0x130>
 80161d6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80161da:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016210 <__ieee754_atan2f+0x134>
 80161de:	ee70 7a67 	vsub.f32	s15, s0, s15
 80161e2:	e78e      	b.n	8016102 <__ieee754_atan2f+0x26>
 80161e4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016210 <__ieee754_atan2f+0x134>
 80161e8:	e78b      	b.n	8016102 <__ieee754_atan2f+0x26>
 80161ea:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016218 <__ieee754_atan2f+0x13c>
 80161ee:	e788      	b.n	8016102 <__ieee754_atan2f+0x26>
 80161f0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016214 <__ieee754_atan2f+0x138>
 80161f4:	e785      	b.n	8016102 <__ieee754_atan2f+0x26>
 80161f6:	bf00      	nop
 80161f8:	c0490fdb 	.word	0xc0490fdb
 80161fc:	3fc90fdb 	.word	0x3fc90fdb
 8016200:	bfc90fdb 	.word	0xbfc90fdb
 8016204:	0801a3b8 	.word	0x0801a3b8
 8016208:	0801a3c4 	.word	0x0801a3c4
 801620c:	33bbbd2e 	.word	0x33bbbd2e
 8016210:	40490fdb 	.word	0x40490fdb
 8016214:	00000000 	.word	0x00000000
 8016218:	3f490fdb 	.word	0x3f490fdb

0801621c <__ieee754_rem_pio2f>:
 801621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801621e:	ee10 6a10 	vmov	r6, s0
 8016222:	4b8e      	ldr	r3, [pc, #568]	; (801645c <__ieee754_rem_pio2f+0x240>)
 8016224:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016228:	429d      	cmp	r5, r3
 801622a:	b087      	sub	sp, #28
 801622c:	eef0 7a40 	vmov.f32	s15, s0
 8016230:	4604      	mov	r4, r0
 8016232:	dc05      	bgt.n	8016240 <__ieee754_rem_pio2f+0x24>
 8016234:	2300      	movs	r3, #0
 8016236:	ed80 0a00 	vstr	s0, [r0]
 801623a:	6043      	str	r3, [r0, #4]
 801623c:	2000      	movs	r0, #0
 801623e:	e01a      	b.n	8016276 <__ieee754_rem_pio2f+0x5a>
 8016240:	4b87      	ldr	r3, [pc, #540]	; (8016460 <__ieee754_rem_pio2f+0x244>)
 8016242:	429d      	cmp	r5, r3
 8016244:	dc46      	bgt.n	80162d4 <__ieee754_rem_pio2f+0xb8>
 8016246:	2e00      	cmp	r6, #0
 8016248:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016464 <__ieee754_rem_pio2f+0x248>
 801624c:	4b86      	ldr	r3, [pc, #536]	; (8016468 <__ieee754_rem_pio2f+0x24c>)
 801624e:	f025 050f 	bic.w	r5, r5, #15
 8016252:	dd1f      	ble.n	8016294 <__ieee754_rem_pio2f+0x78>
 8016254:	429d      	cmp	r5, r3
 8016256:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801625a:	d00e      	beq.n	801627a <__ieee754_rem_pio2f+0x5e>
 801625c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801646c <__ieee754_rem_pio2f+0x250>
 8016260:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016264:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016268:	ed80 0a00 	vstr	s0, [r0]
 801626c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016270:	2001      	movs	r0, #1
 8016272:	edc4 7a01 	vstr	s15, [r4, #4]
 8016276:	b007      	add	sp, #28
 8016278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801627a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016470 <__ieee754_rem_pio2f+0x254>
 801627e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8016474 <__ieee754_rem_pio2f+0x258>
 8016282:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016286:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801628a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801628e:	edc0 6a00 	vstr	s13, [r0]
 8016292:	e7eb      	b.n	801626c <__ieee754_rem_pio2f+0x50>
 8016294:	429d      	cmp	r5, r3
 8016296:	ee77 7a80 	vadd.f32	s15, s15, s0
 801629a:	d00e      	beq.n	80162ba <__ieee754_rem_pio2f+0x9e>
 801629c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801646c <__ieee754_rem_pio2f+0x250>
 80162a0:	ee37 0a87 	vadd.f32	s0, s15, s14
 80162a4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80162a8:	ed80 0a00 	vstr	s0, [r0]
 80162ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80162b0:	f04f 30ff 	mov.w	r0, #4294967295
 80162b4:	edc4 7a01 	vstr	s15, [r4, #4]
 80162b8:	e7dd      	b.n	8016276 <__ieee754_rem_pio2f+0x5a>
 80162ba:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016470 <__ieee754_rem_pio2f+0x254>
 80162be:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8016474 <__ieee754_rem_pio2f+0x258>
 80162c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80162c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80162ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80162ce:	edc0 6a00 	vstr	s13, [r0]
 80162d2:	e7eb      	b.n	80162ac <__ieee754_rem_pio2f+0x90>
 80162d4:	4b68      	ldr	r3, [pc, #416]	; (8016478 <__ieee754_rem_pio2f+0x25c>)
 80162d6:	429d      	cmp	r5, r3
 80162d8:	dc72      	bgt.n	80163c0 <__ieee754_rem_pio2f+0x1a4>
 80162da:	f000 ff73 	bl	80171c4 <fabsf>
 80162de:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801647c <__ieee754_rem_pio2f+0x260>
 80162e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80162e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80162ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80162ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80162f2:	ee17 0a90 	vmov	r0, s15
 80162f6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016464 <__ieee754_rem_pio2f+0x248>
 80162fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 80162fe:	281f      	cmp	r0, #31
 8016300:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801646c <__ieee754_rem_pio2f+0x250>
 8016304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016308:	eeb1 6a47 	vneg.f32	s12, s14
 801630c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016310:	ee16 2a90 	vmov	r2, s13
 8016314:	dc1c      	bgt.n	8016350 <__ieee754_rem_pio2f+0x134>
 8016316:	495a      	ldr	r1, [pc, #360]	; (8016480 <__ieee754_rem_pio2f+0x264>)
 8016318:	1e47      	subs	r7, r0, #1
 801631a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801631e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8016322:	428b      	cmp	r3, r1
 8016324:	d014      	beq.n	8016350 <__ieee754_rem_pio2f+0x134>
 8016326:	6022      	str	r2, [r4, #0]
 8016328:	ed94 7a00 	vldr	s14, [r4]
 801632c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016330:	2e00      	cmp	r6, #0
 8016332:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016336:	ed84 0a01 	vstr	s0, [r4, #4]
 801633a:	da9c      	bge.n	8016276 <__ieee754_rem_pio2f+0x5a>
 801633c:	eeb1 7a47 	vneg.f32	s14, s14
 8016340:	eeb1 0a40 	vneg.f32	s0, s0
 8016344:	ed84 7a00 	vstr	s14, [r4]
 8016348:	ed84 0a01 	vstr	s0, [r4, #4]
 801634c:	4240      	negs	r0, r0
 801634e:	e792      	b.n	8016276 <__ieee754_rem_pio2f+0x5a>
 8016350:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016354:	15eb      	asrs	r3, r5, #23
 8016356:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801635a:	2d08      	cmp	r5, #8
 801635c:	dde3      	ble.n	8016326 <__ieee754_rem_pio2f+0x10a>
 801635e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016470 <__ieee754_rem_pio2f+0x254>
 8016362:	eef0 6a40 	vmov.f32	s13, s0
 8016366:	eee6 6a27 	vfma.f32	s13, s12, s15
 801636a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801636e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8016372:	eddf 7a40 	vldr	s15, [pc, #256]	; 8016474 <__ieee754_rem_pio2f+0x258>
 8016376:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801637a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801637e:	eef0 7a40 	vmov.f32	s15, s0
 8016382:	ee15 2a90 	vmov	r2, s11
 8016386:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801638a:	1a5b      	subs	r3, r3, r1
 801638c:	2b19      	cmp	r3, #25
 801638e:	dc04      	bgt.n	801639a <__ieee754_rem_pio2f+0x17e>
 8016390:	edc4 5a00 	vstr	s11, [r4]
 8016394:	eeb0 0a66 	vmov.f32	s0, s13
 8016398:	e7c6      	b.n	8016328 <__ieee754_rem_pio2f+0x10c>
 801639a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016484 <__ieee754_rem_pio2f+0x268>
 801639e:	eeb0 0a66 	vmov.f32	s0, s13
 80163a2:	eea6 0a25 	vfma.f32	s0, s12, s11
 80163a6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80163aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016488 <__ieee754_rem_pio2f+0x26c>
 80163ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80163b2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80163b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80163ba:	ed84 7a00 	vstr	s14, [r4]
 80163be:	e7b3      	b.n	8016328 <__ieee754_rem_pio2f+0x10c>
 80163c0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80163c4:	db06      	blt.n	80163d4 <__ieee754_rem_pio2f+0x1b8>
 80163c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80163ca:	edc0 7a01 	vstr	s15, [r0, #4]
 80163ce:	edc0 7a00 	vstr	s15, [r0]
 80163d2:	e733      	b.n	801623c <__ieee754_rem_pio2f+0x20>
 80163d4:	15ea      	asrs	r2, r5, #23
 80163d6:	3a86      	subs	r2, #134	; 0x86
 80163d8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80163dc:	ee07 3a90 	vmov	s15, r3
 80163e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80163e4:	eddf 6a29 	vldr	s13, [pc, #164]	; 801648c <__ieee754_rem_pio2f+0x270>
 80163e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80163ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80163f0:	ed8d 7a03 	vstr	s14, [sp, #12]
 80163f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80163f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80163fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016404:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801640c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016414:	edcd 7a05 	vstr	s15, [sp, #20]
 8016418:	d11e      	bne.n	8016458 <__ieee754_rem_pio2f+0x23c>
 801641a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016422:	bf14      	ite	ne
 8016424:	2302      	movne	r3, #2
 8016426:	2301      	moveq	r3, #1
 8016428:	4919      	ldr	r1, [pc, #100]	; (8016490 <__ieee754_rem_pio2f+0x274>)
 801642a:	9101      	str	r1, [sp, #4]
 801642c:	2102      	movs	r1, #2
 801642e:	9100      	str	r1, [sp, #0]
 8016430:	a803      	add	r0, sp, #12
 8016432:	4621      	mov	r1, r4
 8016434:	f000 f892 	bl	801655c <__kernel_rem_pio2f>
 8016438:	2e00      	cmp	r6, #0
 801643a:	f6bf af1c 	bge.w	8016276 <__ieee754_rem_pio2f+0x5a>
 801643e:	edd4 7a00 	vldr	s15, [r4]
 8016442:	eef1 7a67 	vneg.f32	s15, s15
 8016446:	edc4 7a00 	vstr	s15, [r4]
 801644a:	edd4 7a01 	vldr	s15, [r4, #4]
 801644e:	eef1 7a67 	vneg.f32	s15, s15
 8016452:	edc4 7a01 	vstr	s15, [r4, #4]
 8016456:	e779      	b.n	801634c <__ieee754_rem_pio2f+0x130>
 8016458:	2303      	movs	r3, #3
 801645a:	e7e5      	b.n	8016428 <__ieee754_rem_pio2f+0x20c>
 801645c:	3f490fd8 	.word	0x3f490fd8
 8016460:	4016cbe3 	.word	0x4016cbe3
 8016464:	3fc90f80 	.word	0x3fc90f80
 8016468:	3fc90fd0 	.word	0x3fc90fd0
 801646c:	37354443 	.word	0x37354443
 8016470:	37354400 	.word	0x37354400
 8016474:	2e85a308 	.word	0x2e85a308
 8016478:	43490f80 	.word	0x43490f80
 801647c:	3f22f984 	.word	0x3f22f984
 8016480:	0801a3d0 	.word	0x0801a3d0
 8016484:	2e85a300 	.word	0x2e85a300
 8016488:	248d3132 	.word	0x248d3132
 801648c:	43800000 	.word	0x43800000
 8016490:	0801a450 	.word	0x0801a450

08016494 <__ieee754_sqrtf>:
 8016494:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016498:	4770      	bx	lr
	...

0801649c <__kernel_cosf>:
 801649c:	ee10 3a10 	vmov	r3, s0
 80164a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80164a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80164ac:	da05      	bge.n	80164ba <__kernel_cosf+0x1e>
 80164ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80164b2:	ee17 2a90 	vmov	r2, s15
 80164b6:	2a00      	cmp	r2, #0
 80164b8:	d03d      	beq.n	8016536 <__kernel_cosf+0x9a>
 80164ba:	ee60 5a00 	vmul.f32	s11, s0, s0
 80164be:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801653c <__kernel_cosf+0xa0>
 80164c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016540 <__kernel_cosf+0xa4>
 80164c6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016544 <__kernel_cosf+0xa8>
 80164ca:	4a1f      	ldr	r2, [pc, #124]	; (8016548 <__kernel_cosf+0xac>)
 80164cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80164d0:	4293      	cmp	r3, r2
 80164d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801654c <__kernel_cosf+0xb0>
 80164d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80164da:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016550 <__kernel_cosf+0xb4>
 80164de:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80164e2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016554 <__kernel_cosf+0xb8>
 80164e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80164ea:	eeb0 7a66 	vmov.f32	s14, s13
 80164ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80164f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80164f6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80164fa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80164fe:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8016502:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016506:	dc04      	bgt.n	8016512 <__kernel_cosf+0x76>
 8016508:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801650c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016510:	4770      	bx	lr
 8016512:	4a11      	ldr	r2, [pc, #68]	; (8016558 <__kernel_cosf+0xbc>)
 8016514:	4293      	cmp	r3, r2
 8016516:	bfda      	itte	le
 8016518:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801651c:	ee06 3a90 	vmovle	s13, r3
 8016520:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016524:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016528:	ee36 0a66 	vsub.f32	s0, s12, s13
 801652c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016530:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016534:	4770      	bx	lr
 8016536:	eeb0 0a46 	vmov.f32	s0, s12
 801653a:	4770      	bx	lr
 801653c:	ad47d74e 	.word	0xad47d74e
 8016540:	310f74f6 	.word	0x310f74f6
 8016544:	3d2aaaab 	.word	0x3d2aaaab
 8016548:	3e999999 	.word	0x3e999999
 801654c:	b493f27c 	.word	0xb493f27c
 8016550:	37d00d01 	.word	0x37d00d01
 8016554:	bab60b61 	.word	0xbab60b61
 8016558:	3f480000 	.word	0x3f480000

0801655c <__kernel_rem_pio2f>:
 801655c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016560:	ed2d 8b04 	vpush	{d8-d9}
 8016564:	b0d7      	sub	sp, #348	; 0x15c
 8016566:	4616      	mov	r6, r2
 8016568:	4698      	mov	r8, r3
 801656a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801656c:	4bbb      	ldr	r3, [pc, #748]	; (801685c <__kernel_rem_pio2f+0x300>)
 801656e:	9001      	str	r0, [sp, #4]
 8016570:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016574:	1d33      	adds	r3, r6, #4
 8016576:	460d      	mov	r5, r1
 8016578:	f108 39ff 	add.w	r9, r8, #4294967295
 801657c:	db29      	blt.n	80165d2 <__kernel_rem_pio2f+0x76>
 801657e:	1ef1      	subs	r1, r6, #3
 8016580:	bf48      	it	mi
 8016582:	1d31      	addmi	r1, r6, #4
 8016584:	10c9      	asrs	r1, r1, #3
 8016586:	1c4c      	adds	r4, r1, #1
 8016588:	00e3      	lsls	r3, r4, #3
 801658a:	9302      	str	r3, [sp, #8]
 801658c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801658e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801686c <__kernel_rem_pio2f+0x310>
 8016592:	eba1 0009 	sub.w	r0, r1, r9
 8016596:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801659a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801659e:	eb07 0c09 	add.w	ip, r7, r9
 80165a2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80165a6:	2300      	movs	r3, #0
 80165a8:	4563      	cmp	r3, ip
 80165aa:	dd14      	ble.n	80165d6 <__kernel_rem_pio2f+0x7a>
 80165ac:	ab1a      	add	r3, sp, #104	; 0x68
 80165ae:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80165b2:	46cc      	mov	ip, r9
 80165b4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80165b8:	f1c8 0b01 	rsb	fp, r8, #1
 80165bc:	eb0b 020c 	add.w	r2, fp, ip
 80165c0:	4297      	cmp	r7, r2
 80165c2:	db27      	blt.n	8016614 <__kernel_rem_pio2f+0xb8>
 80165c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80165c8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801686c <__kernel_rem_pio2f+0x310>
 80165cc:	4618      	mov	r0, r3
 80165ce:	2200      	movs	r2, #0
 80165d0:	e016      	b.n	8016600 <__kernel_rem_pio2f+0xa4>
 80165d2:	2100      	movs	r1, #0
 80165d4:	e7d7      	b.n	8016586 <__kernel_rem_pio2f+0x2a>
 80165d6:	42d8      	cmn	r0, r3
 80165d8:	bf5d      	ittte	pl
 80165da:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80165de:	ee07 2a90 	vmovpl	s15, r2
 80165e2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80165e6:	eef0 7a47 	vmovmi.f32	s15, s14
 80165ea:	ecea 7a01 	vstmia	sl!, {s15}
 80165ee:	3301      	adds	r3, #1
 80165f0:	e7da      	b.n	80165a8 <__kernel_rem_pio2f+0x4c>
 80165f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80165f6:	ed90 7a00 	vldr	s14, [r0]
 80165fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80165fe:	3201      	adds	r2, #1
 8016600:	454a      	cmp	r2, r9
 8016602:	f1a0 0004 	sub.w	r0, r0, #4
 8016606:	ddf4      	ble.n	80165f2 <__kernel_rem_pio2f+0x96>
 8016608:	ecea 7a01 	vstmia	sl!, {s15}
 801660c:	3304      	adds	r3, #4
 801660e:	f10c 0c01 	add.w	ip, ip, #1
 8016612:	e7d3      	b.n	80165bc <__kernel_rem_pio2f+0x60>
 8016614:	ab06      	add	r3, sp, #24
 8016616:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801661a:	9304      	str	r3, [sp, #16]
 801661c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801661e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016868 <__kernel_rem_pio2f+0x30c>
 8016622:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016864 <__kernel_rem_pio2f+0x308>
 8016626:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801662a:	9303      	str	r3, [sp, #12]
 801662c:	46ba      	mov	sl, r7
 801662e:	ab56      	add	r3, sp, #344	; 0x158
 8016630:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016634:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016638:	ab06      	add	r3, sp, #24
 801663a:	4618      	mov	r0, r3
 801663c:	4652      	mov	r2, sl
 801663e:	2a00      	cmp	r2, #0
 8016640:	dc51      	bgt.n	80166e6 <__kernel_rem_pio2f+0x18a>
 8016642:	4620      	mov	r0, r4
 8016644:	9305      	str	r3, [sp, #20]
 8016646:	f000 fe0d 	bl	8017264 <scalbnf>
 801664a:	eeb0 8a40 	vmov.f32	s16, s0
 801664e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016652:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016656:	f000 fdbd 	bl	80171d4 <floorf>
 801665a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801665e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016662:	2c00      	cmp	r4, #0
 8016664:	9b05      	ldr	r3, [sp, #20]
 8016666:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801666a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801666e:	edcd 7a00 	vstr	s15, [sp]
 8016672:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016676:	dd4b      	ble.n	8016710 <__kernel_rem_pio2f+0x1b4>
 8016678:	f10a 3cff 	add.w	ip, sl, #4294967295
 801667c:	aa06      	add	r2, sp, #24
 801667e:	f1c4 0e08 	rsb	lr, r4, #8
 8016682:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016686:	ee17 1a90 	vmov	r1, s15
 801668a:	fa42 f00e 	asr.w	r0, r2, lr
 801668e:	4401      	add	r1, r0
 8016690:	9100      	str	r1, [sp, #0]
 8016692:	fa00 f00e 	lsl.w	r0, r0, lr
 8016696:	a906      	add	r1, sp, #24
 8016698:	1a12      	subs	r2, r2, r0
 801669a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801669e:	f1c4 0007 	rsb	r0, r4, #7
 80166a2:	fa42 fb00 	asr.w	fp, r2, r0
 80166a6:	f1bb 0f00 	cmp.w	fp, #0
 80166aa:	dd43      	ble.n	8016734 <__kernel_rem_pio2f+0x1d8>
 80166ac:	9a00      	ldr	r2, [sp, #0]
 80166ae:	f04f 0e00 	mov.w	lr, #0
 80166b2:	3201      	adds	r2, #1
 80166b4:	9200      	str	r2, [sp, #0]
 80166b6:	4670      	mov	r0, lr
 80166b8:	45f2      	cmp	sl, lr
 80166ba:	dc6c      	bgt.n	8016796 <__kernel_rem_pio2f+0x23a>
 80166bc:	2c00      	cmp	r4, #0
 80166be:	dd04      	ble.n	80166ca <__kernel_rem_pio2f+0x16e>
 80166c0:	2c01      	cmp	r4, #1
 80166c2:	d079      	beq.n	80167b8 <__kernel_rem_pio2f+0x25c>
 80166c4:	2c02      	cmp	r4, #2
 80166c6:	f000 8082 	beq.w	80167ce <__kernel_rem_pio2f+0x272>
 80166ca:	f1bb 0f02 	cmp.w	fp, #2
 80166ce:	d131      	bne.n	8016734 <__kernel_rem_pio2f+0x1d8>
 80166d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80166d4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80166d8:	b360      	cbz	r0, 8016734 <__kernel_rem_pio2f+0x1d8>
 80166da:	4620      	mov	r0, r4
 80166dc:	f000 fdc2 	bl	8017264 <scalbnf>
 80166e0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80166e4:	e026      	b.n	8016734 <__kernel_rem_pio2f+0x1d8>
 80166e6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80166ea:	3a01      	subs	r2, #1
 80166ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166f0:	a942      	add	r1, sp, #264	; 0x108
 80166f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166f6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80166fa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80166fe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016702:	eca0 0a01 	vstmia	r0!, {s0}
 8016706:	ed9c 0a00 	vldr	s0, [ip]
 801670a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801670e:	e796      	b.n	801663e <__kernel_rem_pio2f+0xe2>
 8016710:	d107      	bne.n	8016722 <__kernel_rem_pio2f+0x1c6>
 8016712:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016716:	a906      	add	r1, sp, #24
 8016718:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801671c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016720:	e7c1      	b.n	80166a6 <__kernel_rem_pio2f+0x14a>
 8016722:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016726:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672e:	da2f      	bge.n	8016790 <__kernel_rem_pio2f+0x234>
 8016730:	f04f 0b00 	mov.w	fp, #0
 8016734:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801673c:	f040 8098 	bne.w	8016870 <__kernel_rem_pio2f+0x314>
 8016740:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016744:	469c      	mov	ip, r3
 8016746:	2200      	movs	r2, #0
 8016748:	45bc      	cmp	ip, r7
 801674a:	da48      	bge.n	80167de <__kernel_rem_pio2f+0x282>
 801674c:	2a00      	cmp	r2, #0
 801674e:	d05f      	beq.n	8016810 <__kernel_rem_pio2f+0x2b4>
 8016750:	aa06      	add	r2, sp, #24
 8016752:	3c08      	subs	r4, #8
 8016754:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016758:	2900      	cmp	r1, #0
 801675a:	d07d      	beq.n	8016858 <__kernel_rem_pio2f+0x2fc>
 801675c:	4620      	mov	r0, r4
 801675e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016762:	9301      	str	r3, [sp, #4]
 8016764:	f000 fd7e 	bl	8017264 <scalbnf>
 8016768:	9b01      	ldr	r3, [sp, #4]
 801676a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016868 <__kernel_rem_pio2f+0x30c>
 801676e:	4619      	mov	r1, r3
 8016770:	2900      	cmp	r1, #0
 8016772:	f280 80af 	bge.w	80168d4 <__kernel_rem_pio2f+0x378>
 8016776:	4618      	mov	r0, r3
 8016778:	2400      	movs	r4, #0
 801677a:	2800      	cmp	r0, #0
 801677c:	f2c0 80d0 	blt.w	8016920 <__kernel_rem_pio2f+0x3c4>
 8016780:	a942      	add	r1, sp, #264	; 0x108
 8016782:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016786:	4a36      	ldr	r2, [pc, #216]	; (8016860 <__kernel_rem_pio2f+0x304>)
 8016788:	eddf 7a38 	vldr	s15, [pc, #224]	; 801686c <__kernel_rem_pio2f+0x310>
 801678c:	2100      	movs	r1, #0
 801678e:	e0bb      	b.n	8016908 <__kernel_rem_pio2f+0x3ac>
 8016790:	f04f 0b02 	mov.w	fp, #2
 8016794:	e78a      	b.n	80166ac <__kernel_rem_pio2f+0x150>
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	b948      	cbnz	r0, 80167ae <__kernel_rem_pio2f+0x252>
 801679a:	b11a      	cbz	r2, 80167a4 <__kernel_rem_pio2f+0x248>
 801679c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80167a0:	601a      	str	r2, [r3, #0]
 80167a2:	2201      	movs	r2, #1
 80167a4:	f10e 0e01 	add.w	lr, lr, #1
 80167a8:	3304      	adds	r3, #4
 80167aa:	4610      	mov	r0, r2
 80167ac:	e784      	b.n	80166b8 <__kernel_rem_pio2f+0x15c>
 80167ae:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80167b2:	601a      	str	r2, [r3, #0]
 80167b4:	4602      	mov	r2, r0
 80167b6:	e7f5      	b.n	80167a4 <__kernel_rem_pio2f+0x248>
 80167b8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80167bc:	ab06      	add	r3, sp, #24
 80167be:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80167c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80167c6:	aa06      	add	r2, sp, #24
 80167c8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80167cc:	e77d      	b.n	80166ca <__kernel_rem_pio2f+0x16e>
 80167ce:	f10a 3cff 	add.w	ip, sl, #4294967295
 80167d2:	ab06      	add	r3, sp, #24
 80167d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80167d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80167dc:	e7f3      	b.n	80167c6 <__kernel_rem_pio2f+0x26a>
 80167de:	a906      	add	r1, sp, #24
 80167e0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80167e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80167e8:	4302      	orrs	r2, r0
 80167ea:	e7ad      	b.n	8016748 <__kernel_rem_pio2f+0x1ec>
 80167ec:	3001      	adds	r0, #1
 80167ee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80167f2:	2a00      	cmp	r2, #0
 80167f4:	d0fa      	beq.n	80167ec <__kernel_rem_pio2f+0x290>
 80167f6:	a91a      	add	r1, sp, #104	; 0x68
 80167f8:	eb0a 0208 	add.w	r2, sl, r8
 80167fc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016800:	f10a 0301 	add.w	r3, sl, #1
 8016804:	eb0a 0100 	add.w	r1, sl, r0
 8016808:	4299      	cmp	r1, r3
 801680a:	da04      	bge.n	8016816 <__kernel_rem_pio2f+0x2ba>
 801680c:	468a      	mov	sl, r1
 801680e:	e70e      	b.n	801662e <__kernel_rem_pio2f+0xd2>
 8016810:	9b04      	ldr	r3, [sp, #16]
 8016812:	2001      	movs	r0, #1
 8016814:	e7eb      	b.n	80167ee <__kernel_rem_pio2f+0x292>
 8016816:	9803      	ldr	r0, [sp, #12]
 8016818:	f8dd c004 	ldr.w	ip, [sp, #4]
 801681c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016820:	9000      	str	r0, [sp, #0]
 8016822:	ee07 0a90 	vmov	s15, r0
 8016826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801682a:	2000      	movs	r0, #0
 801682c:	ece2 7a01 	vstmia	r2!, {s15}
 8016830:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801686c <__kernel_rem_pio2f+0x310>
 8016834:	4696      	mov	lr, r2
 8016836:	4548      	cmp	r0, r9
 8016838:	dd06      	ble.n	8016848 <__kernel_rem_pio2f+0x2ec>
 801683a:	a842      	add	r0, sp, #264	; 0x108
 801683c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016840:	edc0 7a00 	vstr	s15, [r0]
 8016844:	3301      	adds	r3, #1
 8016846:	e7df      	b.n	8016808 <__kernel_rem_pio2f+0x2ac>
 8016848:	ecfc 6a01 	vldmia	ip!, {s13}
 801684c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016850:	3001      	adds	r0, #1
 8016852:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016856:	e7ee      	b.n	8016836 <__kernel_rem_pio2f+0x2da>
 8016858:	3b01      	subs	r3, #1
 801685a:	e779      	b.n	8016750 <__kernel_rem_pio2f+0x1f4>
 801685c:	0801a794 	.word	0x0801a794
 8016860:	0801a768 	.word	0x0801a768
 8016864:	43800000 	.word	0x43800000
 8016868:	3b800000 	.word	0x3b800000
 801686c:	00000000 	.word	0x00000000
 8016870:	9b02      	ldr	r3, [sp, #8]
 8016872:	eeb0 0a48 	vmov.f32	s0, s16
 8016876:	1b98      	subs	r0, r3, r6
 8016878:	f000 fcf4 	bl	8017264 <scalbnf>
 801687c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016864 <__kernel_rem_pio2f+0x308>
 8016880:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016888:	db1b      	blt.n	80168c2 <__kernel_rem_pio2f+0x366>
 801688a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016868 <__kernel_rem_pio2f+0x30c>
 801688e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016892:	aa06      	add	r2, sp, #24
 8016894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016898:	a906      	add	r1, sp, #24
 801689a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801689e:	3408      	adds	r4, #8
 80168a0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80168a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80168a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80168ac:	ee10 3a10 	vmov	r3, s0
 80168b0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80168b4:	ee17 2a90 	vmov	r2, s15
 80168b8:	f10a 0301 	add.w	r3, sl, #1
 80168bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80168c0:	e74c      	b.n	801675c <__kernel_rem_pio2f+0x200>
 80168c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80168c6:	aa06      	add	r2, sp, #24
 80168c8:	ee10 3a10 	vmov	r3, s0
 80168cc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80168d0:	4653      	mov	r3, sl
 80168d2:	e743      	b.n	801675c <__kernel_rem_pio2f+0x200>
 80168d4:	aa42      	add	r2, sp, #264	; 0x108
 80168d6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80168da:	aa06      	add	r2, sp, #24
 80168dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80168e0:	9201      	str	r2, [sp, #4]
 80168e2:	ee07 2a90 	vmov	s15, r2
 80168e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168ea:	3901      	subs	r1, #1
 80168ec:	ee67 7a80 	vmul.f32	s15, s15, s0
 80168f0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80168f4:	edc0 7a00 	vstr	s15, [r0]
 80168f8:	e73a      	b.n	8016770 <__kernel_rem_pio2f+0x214>
 80168fa:	ecf2 6a01 	vldmia	r2!, {s13}
 80168fe:	ecb6 7a01 	vldmia	r6!, {s14}
 8016902:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016906:	3101      	adds	r1, #1
 8016908:	42b9      	cmp	r1, r7
 801690a:	dc01      	bgt.n	8016910 <__kernel_rem_pio2f+0x3b4>
 801690c:	428c      	cmp	r4, r1
 801690e:	daf4      	bge.n	80168fa <__kernel_rem_pio2f+0x39e>
 8016910:	aa56      	add	r2, sp, #344	; 0x158
 8016912:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016916:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801691a:	3801      	subs	r0, #1
 801691c:	3401      	adds	r4, #1
 801691e:	e72c      	b.n	801677a <__kernel_rem_pio2f+0x21e>
 8016920:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016922:	2a02      	cmp	r2, #2
 8016924:	dc0a      	bgt.n	801693c <__kernel_rem_pio2f+0x3e0>
 8016926:	2a00      	cmp	r2, #0
 8016928:	dc61      	bgt.n	80169ee <__kernel_rem_pio2f+0x492>
 801692a:	d03c      	beq.n	80169a6 <__kernel_rem_pio2f+0x44a>
 801692c:	9b00      	ldr	r3, [sp, #0]
 801692e:	f003 0007 	and.w	r0, r3, #7
 8016932:	b057      	add	sp, #348	; 0x15c
 8016934:	ecbd 8b04 	vpop	{d8-d9}
 8016938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801693c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801693e:	2a03      	cmp	r2, #3
 8016940:	d1f4      	bne.n	801692c <__kernel_rem_pio2f+0x3d0>
 8016942:	aa2e      	add	r2, sp, #184	; 0xb8
 8016944:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016948:	4608      	mov	r0, r1
 801694a:	461c      	mov	r4, r3
 801694c:	2c00      	cmp	r4, #0
 801694e:	f1a0 0004 	sub.w	r0, r0, #4
 8016952:	dc59      	bgt.n	8016a08 <__kernel_rem_pio2f+0x4ac>
 8016954:	4618      	mov	r0, r3
 8016956:	2801      	cmp	r0, #1
 8016958:	f1a1 0104 	sub.w	r1, r1, #4
 801695c:	dc64      	bgt.n	8016a28 <__kernel_rem_pio2f+0x4cc>
 801695e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801686c <__kernel_rem_pio2f+0x310>
 8016962:	2b01      	cmp	r3, #1
 8016964:	dc70      	bgt.n	8016a48 <__kernel_rem_pio2f+0x4ec>
 8016966:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801696a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801696e:	f1bb 0f00 	cmp.w	fp, #0
 8016972:	d172      	bne.n	8016a5a <__kernel_rem_pio2f+0x4fe>
 8016974:	edc5 6a00 	vstr	s13, [r5]
 8016978:	ed85 7a01 	vstr	s14, [r5, #4]
 801697c:	edc5 7a02 	vstr	s15, [r5, #8]
 8016980:	e7d4      	b.n	801692c <__kernel_rem_pio2f+0x3d0>
 8016982:	aa2e      	add	r2, sp, #184	; 0xb8
 8016984:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016988:	ed91 7a00 	vldr	s14, [r1]
 801698c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016990:	3b01      	subs	r3, #1
 8016992:	2b00      	cmp	r3, #0
 8016994:	daf5      	bge.n	8016982 <__kernel_rem_pio2f+0x426>
 8016996:	f1bb 0f00 	cmp.w	fp, #0
 801699a:	d001      	beq.n	80169a0 <__kernel_rem_pio2f+0x444>
 801699c:	eef1 7a67 	vneg.f32	s15, s15
 80169a0:	edc5 7a00 	vstr	s15, [r5]
 80169a4:	e7c2      	b.n	801692c <__kernel_rem_pio2f+0x3d0>
 80169a6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801686c <__kernel_rem_pio2f+0x310>
 80169aa:	e7f2      	b.n	8016992 <__kernel_rem_pio2f+0x436>
 80169ac:	aa2e      	add	r2, sp, #184	; 0xb8
 80169ae:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80169b2:	edd0 7a00 	vldr	s15, [r0]
 80169b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80169ba:	3901      	subs	r1, #1
 80169bc:	2900      	cmp	r1, #0
 80169be:	daf5      	bge.n	80169ac <__kernel_rem_pio2f+0x450>
 80169c0:	f1bb 0f00 	cmp.w	fp, #0
 80169c4:	d017      	beq.n	80169f6 <__kernel_rem_pio2f+0x49a>
 80169c6:	eef1 7a47 	vneg.f32	s15, s14
 80169ca:	edc5 7a00 	vstr	s15, [r5]
 80169ce:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80169d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80169d6:	a82f      	add	r0, sp, #188	; 0xbc
 80169d8:	2101      	movs	r1, #1
 80169da:	428b      	cmp	r3, r1
 80169dc:	da0e      	bge.n	80169fc <__kernel_rem_pio2f+0x4a0>
 80169de:	f1bb 0f00 	cmp.w	fp, #0
 80169e2:	d001      	beq.n	80169e8 <__kernel_rem_pio2f+0x48c>
 80169e4:	eef1 7a67 	vneg.f32	s15, s15
 80169e8:	edc5 7a01 	vstr	s15, [r5, #4]
 80169ec:	e79e      	b.n	801692c <__kernel_rem_pio2f+0x3d0>
 80169ee:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801686c <__kernel_rem_pio2f+0x310>
 80169f2:	4619      	mov	r1, r3
 80169f4:	e7e2      	b.n	80169bc <__kernel_rem_pio2f+0x460>
 80169f6:	eef0 7a47 	vmov.f32	s15, s14
 80169fa:	e7e6      	b.n	80169ca <__kernel_rem_pio2f+0x46e>
 80169fc:	ecb0 7a01 	vldmia	r0!, {s14}
 8016a00:	3101      	adds	r1, #1
 8016a02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a06:	e7e8      	b.n	80169da <__kernel_rem_pio2f+0x47e>
 8016a08:	edd0 7a00 	vldr	s15, [r0]
 8016a0c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016a10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016a14:	3c01      	subs	r4, #1
 8016a16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a1a:	ed80 7a00 	vstr	s14, [r0]
 8016a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a22:	edc0 7a01 	vstr	s15, [r0, #4]
 8016a26:	e791      	b.n	801694c <__kernel_rem_pio2f+0x3f0>
 8016a28:	edd1 7a00 	vldr	s15, [r1]
 8016a2c:	edd1 6a01 	vldr	s13, [r1, #4]
 8016a30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016a34:	3801      	subs	r0, #1
 8016a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a3a:	ed81 7a00 	vstr	s14, [r1]
 8016a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a42:	edc1 7a01 	vstr	s15, [r1, #4]
 8016a46:	e786      	b.n	8016956 <__kernel_rem_pio2f+0x3fa>
 8016a48:	aa2e      	add	r2, sp, #184	; 0xb8
 8016a4a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016a4e:	ed91 7a00 	vldr	s14, [r1]
 8016a52:	3b01      	subs	r3, #1
 8016a54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a58:	e783      	b.n	8016962 <__kernel_rem_pio2f+0x406>
 8016a5a:	eef1 6a66 	vneg.f32	s13, s13
 8016a5e:	eeb1 7a47 	vneg.f32	s14, s14
 8016a62:	edc5 6a00 	vstr	s13, [r5]
 8016a66:	ed85 7a01 	vstr	s14, [r5, #4]
 8016a6a:	eef1 7a67 	vneg.f32	s15, s15
 8016a6e:	e785      	b.n	801697c <__kernel_rem_pio2f+0x420>

08016a70 <__kernel_sinf>:
 8016a70:	ee10 3a10 	vmov	r3, s0
 8016a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016a78:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016a7c:	da04      	bge.n	8016a88 <__kernel_sinf+0x18>
 8016a7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016a82:	ee17 3a90 	vmov	r3, s15
 8016a86:	b35b      	cbz	r3, 8016ae0 <__kernel_sinf+0x70>
 8016a88:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016a8c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016ae4 <__kernel_sinf+0x74>
 8016a90:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016ae8 <__kernel_sinf+0x78>
 8016a94:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016a98:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016aec <__kernel_sinf+0x7c>
 8016a9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016aa0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016af0 <__kernel_sinf+0x80>
 8016aa4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016aa8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016af4 <__kernel_sinf+0x84>
 8016aac:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016ab0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016ab4:	b930      	cbnz	r0, 8016ac4 <__kernel_sinf+0x54>
 8016ab6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016af8 <__kernel_sinf+0x88>
 8016aba:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016abe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016ac2:	4770      	bx	lr
 8016ac4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016ac8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016acc:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016ad0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016ad4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016afc <__kernel_sinf+0x8c>
 8016ad8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016adc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016ae0:	4770      	bx	lr
 8016ae2:	bf00      	nop
 8016ae4:	2f2ec9d3 	.word	0x2f2ec9d3
 8016ae8:	b2d72f34 	.word	0xb2d72f34
 8016aec:	3638ef1b 	.word	0x3638ef1b
 8016af0:	b9500d01 	.word	0xb9500d01
 8016af4:	3c088889 	.word	0x3c088889
 8016af8:	be2aaaab 	.word	0xbe2aaaab
 8016afc:	3e2aaaab 	.word	0x3e2aaaab

08016b00 <__kernel_tanf>:
 8016b00:	b508      	push	{r3, lr}
 8016b02:	ee10 3a10 	vmov	r3, s0
 8016b06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016b0a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016b0e:	eef0 7a40 	vmov.f32	s15, s0
 8016b12:	da17      	bge.n	8016b44 <__kernel_tanf+0x44>
 8016b14:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016b18:	ee17 1a10 	vmov	r1, s14
 8016b1c:	bb41      	cbnz	r1, 8016b70 <__kernel_tanf+0x70>
 8016b1e:	1c43      	adds	r3, r0, #1
 8016b20:	4313      	orrs	r3, r2
 8016b22:	d108      	bne.n	8016b36 <__kernel_tanf+0x36>
 8016b24:	f000 fb4e 	bl	80171c4 <fabsf>
 8016b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b30:	eeb0 0a67 	vmov.f32	s0, s15
 8016b34:	bd08      	pop	{r3, pc}
 8016b36:	2801      	cmp	r0, #1
 8016b38:	d0fa      	beq.n	8016b30 <__kernel_tanf+0x30>
 8016b3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016b3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b42:	e7f5      	b.n	8016b30 <__kernel_tanf+0x30>
 8016b44:	494d      	ldr	r1, [pc, #308]	; (8016c7c <__kernel_tanf+0x17c>)
 8016b46:	428a      	cmp	r2, r1
 8016b48:	db12      	blt.n	8016b70 <__kernel_tanf+0x70>
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	bfb8      	it	lt
 8016b4e:	eef1 7a40 	vneglt.f32	s15, s0
 8016b52:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8016c80 <__kernel_tanf+0x180>
 8016b56:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b5a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016c84 <__kernel_tanf+0x184>
 8016b5e:	bfb8      	it	lt
 8016b60:	eef1 0a60 	vneglt.f32	s1, s1
 8016b64:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016b68:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016b6c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016c88 <__kernel_tanf+0x188>
 8016b70:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016c8c <__kernel_tanf+0x18c>
 8016b74:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016c90 <__kernel_tanf+0x190>
 8016b78:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016c94 <__kernel_tanf+0x194>
 8016b7c:	493f      	ldr	r1, [pc, #252]	; (8016c7c <__kernel_tanf+0x17c>)
 8016b7e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016b82:	428a      	cmp	r2, r1
 8016b84:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016b88:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016b8c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016c98 <__kernel_tanf+0x198>
 8016b90:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b94:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8016c9c <__kernel_tanf+0x19c>
 8016b98:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b9c:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016ca0 <__kernel_tanf+0x1a0>
 8016ba0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016ba4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8016ca4 <__kernel_tanf+0x1a4>
 8016ba8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016bac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016ca8 <__kernel_tanf+0x1a8>
 8016bb0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016bb4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016cac <__kernel_tanf+0x1ac>
 8016bb8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016bbc:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8016cb0 <__kernel_tanf+0x1b0>
 8016bc0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016bc4:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016cb4 <__kernel_tanf+0x1b4>
 8016bc8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016bcc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016cb8 <__kernel_tanf+0x1b8>
 8016bd0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016bd4:	eeb0 7a65 	vmov.f32	s14, s11
 8016bd8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016bdc:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016be0:	eeb0 7a46 	vmov.f32	s14, s12
 8016be4:	eeb0 6a60 	vmov.f32	s12, s1
 8016be8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016bec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016cbc <__kernel_tanf+0x1bc>
 8016bf0:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016bf4:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016bf8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016bfc:	db1d      	blt.n	8016c3a <__kernel_tanf+0x13a>
 8016bfe:	ee06 0a90 	vmov	s13, r0
 8016c02:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016c06:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016c0a:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016c0e:	179b      	asrs	r3, r3, #30
 8016c10:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016c14:	f003 0302 	and.w	r3, r3, #2
 8016c18:	f1c3 0301 	rsb	r3, r3, #1
 8016c1c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016c20:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016c24:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016c28:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016c2c:	ee07 3a90 	vmov	s15, r3
 8016c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c34:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016c38:	e77a      	b.n	8016b30 <__kernel_tanf+0x30>
 8016c3a:	2801      	cmp	r0, #1
 8016c3c:	d01b      	beq.n	8016c76 <__kernel_tanf+0x176>
 8016c3e:	4b20      	ldr	r3, [pc, #128]	; (8016cc0 <__kernel_tanf+0x1c0>)
 8016c40:	ee17 2a10 	vmov	r2, s14
 8016c44:	401a      	ands	r2, r3
 8016c46:	ee06 2a10 	vmov	s12, r2
 8016c4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016c4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016c52:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016c56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c5e:	ee16 2a90 	vmov	r2, s13
 8016c62:	4013      	ands	r3, r2
 8016c64:	ee07 3a90 	vmov	s15, r3
 8016c68:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016c6c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016c70:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016c74:	e75c      	b.n	8016b30 <__kernel_tanf+0x30>
 8016c76:	eef0 7a47 	vmov.f32	s15, s14
 8016c7a:	e759      	b.n	8016b30 <__kernel_tanf+0x30>
 8016c7c:	3f2ca140 	.word	0x3f2ca140
 8016c80:	3f490fda 	.word	0x3f490fda
 8016c84:	33222168 	.word	0x33222168
 8016c88:	00000000 	.word	0x00000000
 8016c8c:	b79bae5f 	.word	0xb79bae5f
 8016c90:	38a3f445 	.word	0x38a3f445
 8016c94:	37d95384 	.word	0x37d95384
 8016c98:	3a1a26c8 	.word	0x3a1a26c8
 8016c9c:	3b6b6916 	.word	0x3b6b6916
 8016ca0:	3cb327a4 	.word	0x3cb327a4
 8016ca4:	3e088889 	.word	0x3e088889
 8016ca8:	3895c07a 	.word	0x3895c07a
 8016cac:	398137b9 	.word	0x398137b9
 8016cb0:	3abede48 	.word	0x3abede48
 8016cb4:	3c11371f 	.word	0x3c11371f
 8016cb8:	3d5d0dd1 	.word	0x3d5d0dd1
 8016cbc:	3eaaaaab 	.word	0x3eaaaaab
 8016cc0:	fffff000 	.word	0xfffff000
 8016cc4:	00000000 	.word	0x00000000

08016cc8 <atan>:
 8016cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ccc:	ec55 4b10 	vmov	r4, r5, d0
 8016cd0:	4bc3      	ldr	r3, [pc, #780]	; (8016fe0 <atan+0x318>)
 8016cd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016cd6:	429e      	cmp	r6, r3
 8016cd8:	46ab      	mov	fp, r5
 8016cda:	dd18      	ble.n	8016d0e <atan+0x46>
 8016cdc:	4bc1      	ldr	r3, [pc, #772]	; (8016fe4 <atan+0x31c>)
 8016cde:	429e      	cmp	r6, r3
 8016ce0:	dc01      	bgt.n	8016ce6 <atan+0x1e>
 8016ce2:	d109      	bne.n	8016cf8 <atan+0x30>
 8016ce4:	b144      	cbz	r4, 8016cf8 <atan+0x30>
 8016ce6:	4622      	mov	r2, r4
 8016ce8:	462b      	mov	r3, r5
 8016cea:	4620      	mov	r0, r4
 8016cec:	4629      	mov	r1, r5
 8016cee:	f7e9 facd 	bl	800028c <__adddf3>
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	460d      	mov	r5, r1
 8016cf6:	e006      	b.n	8016d06 <atan+0x3e>
 8016cf8:	f1bb 0f00 	cmp.w	fp, #0
 8016cfc:	f300 8131 	bgt.w	8016f62 <atan+0x29a>
 8016d00:	a59b      	add	r5, pc, #620	; (adr r5, 8016f70 <atan+0x2a8>)
 8016d02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016d06:	ec45 4b10 	vmov	d0, r4, r5
 8016d0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d0e:	4bb6      	ldr	r3, [pc, #728]	; (8016fe8 <atan+0x320>)
 8016d10:	429e      	cmp	r6, r3
 8016d12:	dc14      	bgt.n	8016d3e <atan+0x76>
 8016d14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016d18:	429e      	cmp	r6, r3
 8016d1a:	dc0d      	bgt.n	8016d38 <atan+0x70>
 8016d1c:	a396      	add	r3, pc, #600	; (adr r3, 8016f78 <atan+0x2b0>)
 8016d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d22:	ee10 0a10 	vmov	r0, s0
 8016d26:	4629      	mov	r1, r5
 8016d28:	f7e9 fab0 	bl	800028c <__adddf3>
 8016d2c:	4baf      	ldr	r3, [pc, #700]	; (8016fec <atan+0x324>)
 8016d2e:	2200      	movs	r2, #0
 8016d30:	f7e9 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 8016d34:	2800      	cmp	r0, #0
 8016d36:	d1e6      	bne.n	8016d06 <atan+0x3e>
 8016d38:	f04f 3aff 	mov.w	sl, #4294967295
 8016d3c:	e02b      	b.n	8016d96 <atan+0xce>
 8016d3e:	f000 f963 	bl	8017008 <fabs>
 8016d42:	4bab      	ldr	r3, [pc, #684]	; (8016ff0 <atan+0x328>)
 8016d44:	429e      	cmp	r6, r3
 8016d46:	ec55 4b10 	vmov	r4, r5, d0
 8016d4a:	f300 80bf 	bgt.w	8016ecc <atan+0x204>
 8016d4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016d52:	429e      	cmp	r6, r3
 8016d54:	f300 80a0 	bgt.w	8016e98 <atan+0x1d0>
 8016d58:	ee10 2a10 	vmov	r2, s0
 8016d5c:	ee10 0a10 	vmov	r0, s0
 8016d60:	462b      	mov	r3, r5
 8016d62:	4629      	mov	r1, r5
 8016d64:	f7e9 fa92 	bl	800028c <__adddf3>
 8016d68:	4ba0      	ldr	r3, [pc, #640]	; (8016fec <atan+0x324>)
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	f7e9 fa8c 	bl	8000288 <__aeabi_dsub>
 8016d70:	2200      	movs	r2, #0
 8016d72:	4606      	mov	r6, r0
 8016d74:	460f      	mov	r7, r1
 8016d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016d7a:	4620      	mov	r0, r4
 8016d7c:	4629      	mov	r1, r5
 8016d7e:	f7e9 fa85 	bl	800028c <__adddf3>
 8016d82:	4602      	mov	r2, r0
 8016d84:	460b      	mov	r3, r1
 8016d86:	4630      	mov	r0, r6
 8016d88:	4639      	mov	r1, r7
 8016d8a:	f7e9 fd5f 	bl	800084c <__aeabi_ddiv>
 8016d8e:	f04f 0a00 	mov.w	sl, #0
 8016d92:	4604      	mov	r4, r0
 8016d94:	460d      	mov	r5, r1
 8016d96:	4622      	mov	r2, r4
 8016d98:	462b      	mov	r3, r5
 8016d9a:	4620      	mov	r0, r4
 8016d9c:	4629      	mov	r1, r5
 8016d9e:	f7e9 fc2b 	bl	80005f8 <__aeabi_dmul>
 8016da2:	4602      	mov	r2, r0
 8016da4:	460b      	mov	r3, r1
 8016da6:	4680      	mov	r8, r0
 8016da8:	4689      	mov	r9, r1
 8016daa:	f7e9 fc25 	bl	80005f8 <__aeabi_dmul>
 8016dae:	a374      	add	r3, pc, #464	; (adr r3, 8016f80 <atan+0x2b8>)
 8016db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db4:	4606      	mov	r6, r0
 8016db6:	460f      	mov	r7, r1
 8016db8:	f7e9 fc1e 	bl	80005f8 <__aeabi_dmul>
 8016dbc:	a372      	add	r3, pc, #456	; (adr r3, 8016f88 <atan+0x2c0>)
 8016dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc2:	f7e9 fa63 	bl	800028c <__adddf3>
 8016dc6:	4632      	mov	r2, r6
 8016dc8:	463b      	mov	r3, r7
 8016dca:	f7e9 fc15 	bl	80005f8 <__aeabi_dmul>
 8016dce:	a370      	add	r3, pc, #448	; (adr r3, 8016f90 <atan+0x2c8>)
 8016dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd4:	f7e9 fa5a 	bl	800028c <__adddf3>
 8016dd8:	4632      	mov	r2, r6
 8016dda:	463b      	mov	r3, r7
 8016ddc:	f7e9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8016de0:	a36d      	add	r3, pc, #436	; (adr r3, 8016f98 <atan+0x2d0>)
 8016de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de6:	f7e9 fa51 	bl	800028c <__adddf3>
 8016dea:	4632      	mov	r2, r6
 8016dec:	463b      	mov	r3, r7
 8016dee:	f7e9 fc03 	bl	80005f8 <__aeabi_dmul>
 8016df2:	a36b      	add	r3, pc, #428	; (adr r3, 8016fa0 <atan+0x2d8>)
 8016df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df8:	f7e9 fa48 	bl	800028c <__adddf3>
 8016dfc:	4632      	mov	r2, r6
 8016dfe:	463b      	mov	r3, r7
 8016e00:	f7e9 fbfa 	bl	80005f8 <__aeabi_dmul>
 8016e04:	a368      	add	r3, pc, #416	; (adr r3, 8016fa8 <atan+0x2e0>)
 8016e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e0a:	f7e9 fa3f 	bl	800028c <__adddf3>
 8016e0e:	4642      	mov	r2, r8
 8016e10:	464b      	mov	r3, r9
 8016e12:	f7e9 fbf1 	bl	80005f8 <__aeabi_dmul>
 8016e16:	a366      	add	r3, pc, #408	; (adr r3, 8016fb0 <atan+0x2e8>)
 8016e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e1c:	4680      	mov	r8, r0
 8016e1e:	4689      	mov	r9, r1
 8016e20:	4630      	mov	r0, r6
 8016e22:	4639      	mov	r1, r7
 8016e24:	f7e9 fbe8 	bl	80005f8 <__aeabi_dmul>
 8016e28:	a363      	add	r3, pc, #396	; (adr r3, 8016fb8 <atan+0x2f0>)
 8016e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e2e:	f7e9 fa2b 	bl	8000288 <__aeabi_dsub>
 8016e32:	4632      	mov	r2, r6
 8016e34:	463b      	mov	r3, r7
 8016e36:	f7e9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8016e3a:	a361      	add	r3, pc, #388	; (adr r3, 8016fc0 <atan+0x2f8>)
 8016e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e40:	f7e9 fa22 	bl	8000288 <__aeabi_dsub>
 8016e44:	4632      	mov	r2, r6
 8016e46:	463b      	mov	r3, r7
 8016e48:	f7e9 fbd6 	bl	80005f8 <__aeabi_dmul>
 8016e4c:	a35e      	add	r3, pc, #376	; (adr r3, 8016fc8 <atan+0x300>)
 8016e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e52:	f7e9 fa19 	bl	8000288 <__aeabi_dsub>
 8016e56:	4632      	mov	r2, r6
 8016e58:	463b      	mov	r3, r7
 8016e5a:	f7e9 fbcd 	bl	80005f8 <__aeabi_dmul>
 8016e5e:	a35c      	add	r3, pc, #368	; (adr r3, 8016fd0 <atan+0x308>)
 8016e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e64:	f7e9 fa10 	bl	8000288 <__aeabi_dsub>
 8016e68:	4632      	mov	r2, r6
 8016e6a:	463b      	mov	r3, r7
 8016e6c:	f7e9 fbc4 	bl	80005f8 <__aeabi_dmul>
 8016e70:	4602      	mov	r2, r0
 8016e72:	460b      	mov	r3, r1
 8016e74:	4640      	mov	r0, r8
 8016e76:	4649      	mov	r1, r9
 8016e78:	f7e9 fa08 	bl	800028c <__adddf3>
 8016e7c:	4622      	mov	r2, r4
 8016e7e:	462b      	mov	r3, r5
 8016e80:	f7e9 fbba 	bl	80005f8 <__aeabi_dmul>
 8016e84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016e88:	4602      	mov	r2, r0
 8016e8a:	460b      	mov	r3, r1
 8016e8c:	d14b      	bne.n	8016f26 <atan+0x25e>
 8016e8e:	4620      	mov	r0, r4
 8016e90:	4629      	mov	r1, r5
 8016e92:	f7e9 f9f9 	bl	8000288 <__aeabi_dsub>
 8016e96:	e72c      	b.n	8016cf2 <atan+0x2a>
 8016e98:	ee10 0a10 	vmov	r0, s0
 8016e9c:	4b53      	ldr	r3, [pc, #332]	; (8016fec <atan+0x324>)
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	4629      	mov	r1, r5
 8016ea2:	f7e9 f9f1 	bl	8000288 <__aeabi_dsub>
 8016ea6:	4b51      	ldr	r3, [pc, #324]	; (8016fec <atan+0x324>)
 8016ea8:	4606      	mov	r6, r0
 8016eaa:	460f      	mov	r7, r1
 8016eac:	2200      	movs	r2, #0
 8016eae:	4620      	mov	r0, r4
 8016eb0:	4629      	mov	r1, r5
 8016eb2:	f7e9 f9eb 	bl	800028c <__adddf3>
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	460b      	mov	r3, r1
 8016eba:	4630      	mov	r0, r6
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	f7e9 fcc5 	bl	800084c <__aeabi_ddiv>
 8016ec2:	f04f 0a01 	mov.w	sl, #1
 8016ec6:	4604      	mov	r4, r0
 8016ec8:	460d      	mov	r5, r1
 8016eca:	e764      	b.n	8016d96 <atan+0xce>
 8016ecc:	4b49      	ldr	r3, [pc, #292]	; (8016ff4 <atan+0x32c>)
 8016ece:	429e      	cmp	r6, r3
 8016ed0:	da1d      	bge.n	8016f0e <atan+0x246>
 8016ed2:	ee10 0a10 	vmov	r0, s0
 8016ed6:	4b48      	ldr	r3, [pc, #288]	; (8016ff8 <atan+0x330>)
 8016ed8:	2200      	movs	r2, #0
 8016eda:	4629      	mov	r1, r5
 8016edc:	f7e9 f9d4 	bl	8000288 <__aeabi_dsub>
 8016ee0:	4b45      	ldr	r3, [pc, #276]	; (8016ff8 <atan+0x330>)
 8016ee2:	4606      	mov	r6, r0
 8016ee4:	460f      	mov	r7, r1
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	4620      	mov	r0, r4
 8016eea:	4629      	mov	r1, r5
 8016eec:	f7e9 fb84 	bl	80005f8 <__aeabi_dmul>
 8016ef0:	4b3e      	ldr	r3, [pc, #248]	; (8016fec <atan+0x324>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f7e9 f9ca 	bl	800028c <__adddf3>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	460b      	mov	r3, r1
 8016efc:	4630      	mov	r0, r6
 8016efe:	4639      	mov	r1, r7
 8016f00:	f7e9 fca4 	bl	800084c <__aeabi_ddiv>
 8016f04:	f04f 0a02 	mov.w	sl, #2
 8016f08:	4604      	mov	r4, r0
 8016f0a:	460d      	mov	r5, r1
 8016f0c:	e743      	b.n	8016d96 <atan+0xce>
 8016f0e:	462b      	mov	r3, r5
 8016f10:	ee10 2a10 	vmov	r2, s0
 8016f14:	4939      	ldr	r1, [pc, #228]	; (8016ffc <atan+0x334>)
 8016f16:	2000      	movs	r0, #0
 8016f18:	f7e9 fc98 	bl	800084c <__aeabi_ddiv>
 8016f1c:	f04f 0a03 	mov.w	sl, #3
 8016f20:	4604      	mov	r4, r0
 8016f22:	460d      	mov	r5, r1
 8016f24:	e737      	b.n	8016d96 <atan+0xce>
 8016f26:	4b36      	ldr	r3, [pc, #216]	; (8017000 <atan+0x338>)
 8016f28:	4e36      	ldr	r6, [pc, #216]	; (8017004 <atan+0x33c>)
 8016f2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8016f2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8016f32:	e9da 2300 	ldrd	r2, r3, [sl]
 8016f36:	f7e9 f9a7 	bl	8000288 <__aeabi_dsub>
 8016f3a:	4622      	mov	r2, r4
 8016f3c:	462b      	mov	r3, r5
 8016f3e:	f7e9 f9a3 	bl	8000288 <__aeabi_dsub>
 8016f42:	4602      	mov	r2, r0
 8016f44:	460b      	mov	r3, r1
 8016f46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016f4a:	f7e9 f99d 	bl	8000288 <__aeabi_dsub>
 8016f4e:	f1bb 0f00 	cmp.w	fp, #0
 8016f52:	4604      	mov	r4, r0
 8016f54:	460d      	mov	r5, r1
 8016f56:	f6bf aed6 	bge.w	8016d06 <atan+0x3e>
 8016f5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f5e:	461d      	mov	r5, r3
 8016f60:	e6d1      	b.n	8016d06 <atan+0x3e>
 8016f62:	a51d      	add	r5, pc, #116	; (adr r5, 8016fd8 <atan+0x310>)
 8016f64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016f68:	e6cd      	b.n	8016d06 <atan+0x3e>
 8016f6a:	bf00      	nop
 8016f6c:	f3af 8000 	nop.w
 8016f70:	54442d18 	.word	0x54442d18
 8016f74:	bff921fb 	.word	0xbff921fb
 8016f78:	8800759c 	.word	0x8800759c
 8016f7c:	7e37e43c 	.word	0x7e37e43c
 8016f80:	e322da11 	.word	0xe322da11
 8016f84:	3f90ad3a 	.word	0x3f90ad3a
 8016f88:	24760deb 	.word	0x24760deb
 8016f8c:	3fa97b4b 	.word	0x3fa97b4b
 8016f90:	a0d03d51 	.word	0xa0d03d51
 8016f94:	3fb10d66 	.word	0x3fb10d66
 8016f98:	c54c206e 	.word	0xc54c206e
 8016f9c:	3fb745cd 	.word	0x3fb745cd
 8016fa0:	920083ff 	.word	0x920083ff
 8016fa4:	3fc24924 	.word	0x3fc24924
 8016fa8:	5555550d 	.word	0x5555550d
 8016fac:	3fd55555 	.word	0x3fd55555
 8016fb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8016fb4:	bfa2b444 	.word	0xbfa2b444
 8016fb8:	52defd9a 	.word	0x52defd9a
 8016fbc:	3fadde2d 	.word	0x3fadde2d
 8016fc0:	af749a6d 	.word	0xaf749a6d
 8016fc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8016fc8:	fe231671 	.word	0xfe231671
 8016fcc:	3fbc71c6 	.word	0x3fbc71c6
 8016fd0:	9998ebc4 	.word	0x9998ebc4
 8016fd4:	3fc99999 	.word	0x3fc99999
 8016fd8:	54442d18 	.word	0x54442d18
 8016fdc:	3ff921fb 	.word	0x3ff921fb
 8016fe0:	440fffff 	.word	0x440fffff
 8016fe4:	7ff00000 	.word	0x7ff00000
 8016fe8:	3fdbffff 	.word	0x3fdbffff
 8016fec:	3ff00000 	.word	0x3ff00000
 8016ff0:	3ff2ffff 	.word	0x3ff2ffff
 8016ff4:	40038000 	.word	0x40038000
 8016ff8:	3ff80000 	.word	0x3ff80000
 8016ffc:	bff00000 	.word	0xbff00000
 8017000:	0801a7c0 	.word	0x0801a7c0
 8017004:	0801a7a0 	.word	0x0801a7a0

08017008 <fabs>:
 8017008:	ec51 0b10 	vmov	r0, r1, d0
 801700c:	ee10 2a10 	vmov	r2, s0
 8017010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017014:	ec43 2b10 	vmov	d0, r2, r3
 8017018:	4770      	bx	lr
	...

0801701c <atanf>:
 801701c:	b538      	push	{r3, r4, r5, lr}
 801701e:	ee10 5a10 	vmov	r5, s0
 8017022:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017026:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801702a:	eef0 7a40 	vmov.f32	s15, s0
 801702e:	db10      	blt.n	8017052 <atanf+0x36>
 8017030:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8017034:	dd04      	ble.n	8017040 <atanf+0x24>
 8017036:	ee70 7a00 	vadd.f32	s15, s0, s0
 801703a:	eeb0 0a67 	vmov.f32	s0, s15
 801703e:	bd38      	pop	{r3, r4, r5, pc}
 8017040:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017178 <atanf+0x15c>
 8017044:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801717c <atanf+0x160>
 8017048:	2d00      	cmp	r5, #0
 801704a:	bfd8      	it	le
 801704c:	eef0 7a40 	vmovle.f32	s15, s0
 8017050:	e7f3      	b.n	801703a <atanf+0x1e>
 8017052:	4b4b      	ldr	r3, [pc, #300]	; (8017180 <atanf+0x164>)
 8017054:	429c      	cmp	r4, r3
 8017056:	dc10      	bgt.n	801707a <atanf+0x5e>
 8017058:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801705c:	da0a      	bge.n	8017074 <atanf+0x58>
 801705e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017184 <atanf+0x168>
 8017062:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801706a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801706e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017072:	dce2      	bgt.n	801703a <atanf+0x1e>
 8017074:	f04f 33ff 	mov.w	r3, #4294967295
 8017078:	e013      	b.n	80170a2 <atanf+0x86>
 801707a:	f000 f8a3 	bl	80171c4 <fabsf>
 801707e:	4b42      	ldr	r3, [pc, #264]	; (8017188 <atanf+0x16c>)
 8017080:	429c      	cmp	r4, r3
 8017082:	dc4f      	bgt.n	8017124 <atanf+0x108>
 8017084:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017088:	429c      	cmp	r4, r3
 801708a:	dc41      	bgt.n	8017110 <atanf+0xf4>
 801708c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017090:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017094:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017098:	2300      	movs	r3, #0
 801709a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801709e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170a2:	1c5a      	adds	r2, r3, #1
 80170a4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80170a8:	eddf 5a38 	vldr	s11, [pc, #224]	; 801718c <atanf+0x170>
 80170ac:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8017190 <atanf+0x174>
 80170b0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017194 <atanf+0x178>
 80170b4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8017198 <atanf+0x17c>
 80170b8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80170bc:	eea7 6a25 	vfma.f32	s12, s14, s11
 80170c0:	eddf 5a36 	vldr	s11, [pc, #216]	; 801719c <atanf+0x180>
 80170c4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80170c8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80171a0 <atanf+0x184>
 80170cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80170d0:	eddf 5a34 	vldr	s11, [pc, #208]	; 80171a4 <atanf+0x188>
 80170d4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80170d8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80171a8 <atanf+0x18c>
 80170dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80170e0:	eddf 5a32 	vldr	s11, [pc, #200]	; 80171ac <atanf+0x190>
 80170e4:	eee7 5a05 	vfma.f32	s11, s14, s10
 80170e8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80171b0 <atanf+0x194>
 80170ec:	eea5 5a87 	vfma.f32	s10, s11, s14
 80170f0:	eddf 5a30 	vldr	s11, [pc, #192]	; 80171b4 <atanf+0x198>
 80170f4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80170f8:	eea5 0a87 	vfma.f32	s0, s11, s14
 80170fc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017100:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017104:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017108:	d121      	bne.n	801714e <atanf+0x132>
 801710a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801710e:	e794      	b.n	801703a <atanf+0x1e>
 8017110:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017114:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017118:	ee30 0a27 	vadd.f32	s0, s0, s15
 801711c:	2301      	movs	r3, #1
 801711e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017122:	e7be      	b.n	80170a2 <atanf+0x86>
 8017124:	4b24      	ldr	r3, [pc, #144]	; (80171b8 <atanf+0x19c>)
 8017126:	429c      	cmp	r4, r3
 8017128:	dc0b      	bgt.n	8017142 <atanf+0x126>
 801712a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801712e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017132:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017136:	2302      	movs	r3, #2
 8017138:	ee70 6a67 	vsub.f32	s13, s0, s15
 801713c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017140:	e7af      	b.n	80170a2 <atanf+0x86>
 8017142:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017146:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801714a:	2303      	movs	r3, #3
 801714c:	e7a9      	b.n	80170a2 <atanf+0x86>
 801714e:	4a1b      	ldr	r2, [pc, #108]	; (80171bc <atanf+0x1a0>)
 8017150:	491b      	ldr	r1, [pc, #108]	; (80171c0 <atanf+0x1a4>)
 8017152:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017156:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801715a:	ed93 7a00 	vldr	s14, [r3]
 801715e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017162:	2d00      	cmp	r5, #0
 8017164:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017168:	ed92 0a00 	vldr	s0, [r2]
 801716c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017170:	bfb8      	it	lt
 8017172:	eef1 7a67 	vneglt.f32	s15, s15
 8017176:	e760      	b.n	801703a <atanf+0x1e>
 8017178:	3fc90fdb 	.word	0x3fc90fdb
 801717c:	bfc90fdb 	.word	0xbfc90fdb
 8017180:	3edfffff 	.word	0x3edfffff
 8017184:	7149f2ca 	.word	0x7149f2ca
 8017188:	3f97ffff 	.word	0x3f97ffff
 801718c:	3c8569d7 	.word	0x3c8569d7
 8017190:	3d4bda59 	.word	0x3d4bda59
 8017194:	bd15a221 	.word	0xbd15a221
 8017198:	be4ccccd 	.word	0xbe4ccccd
 801719c:	3d886b35 	.word	0x3d886b35
 80171a0:	3dba2e6e 	.word	0x3dba2e6e
 80171a4:	3e124925 	.word	0x3e124925
 80171a8:	3eaaaaab 	.word	0x3eaaaaab
 80171ac:	bd6ef16b 	.word	0xbd6ef16b
 80171b0:	bd9d8795 	.word	0xbd9d8795
 80171b4:	bde38e38 	.word	0xbde38e38
 80171b8:	401bffff 	.word	0x401bffff
 80171bc:	0801a7e0 	.word	0x0801a7e0
 80171c0:	0801a7f0 	.word	0x0801a7f0

080171c4 <fabsf>:
 80171c4:	ee10 3a10 	vmov	r3, s0
 80171c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80171cc:	ee00 3a10 	vmov	s0, r3
 80171d0:	4770      	bx	lr
	...

080171d4 <floorf>:
 80171d4:	ee10 3a10 	vmov	r3, s0
 80171d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80171dc:	3a7f      	subs	r2, #127	; 0x7f
 80171de:	2a16      	cmp	r2, #22
 80171e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80171e4:	dc2a      	bgt.n	801723c <floorf+0x68>
 80171e6:	2a00      	cmp	r2, #0
 80171e8:	da11      	bge.n	801720e <floorf+0x3a>
 80171ea:	eddf 7a18 	vldr	s15, [pc, #96]	; 801724c <floorf+0x78>
 80171ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80171f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80171f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171fa:	dd05      	ble.n	8017208 <floorf+0x34>
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	da23      	bge.n	8017248 <floorf+0x74>
 8017200:	4a13      	ldr	r2, [pc, #76]	; (8017250 <floorf+0x7c>)
 8017202:	2900      	cmp	r1, #0
 8017204:	bf18      	it	ne
 8017206:	4613      	movne	r3, r2
 8017208:	ee00 3a10 	vmov	s0, r3
 801720c:	4770      	bx	lr
 801720e:	4911      	ldr	r1, [pc, #68]	; (8017254 <floorf+0x80>)
 8017210:	4111      	asrs	r1, r2
 8017212:	420b      	tst	r3, r1
 8017214:	d0fa      	beq.n	801720c <floorf+0x38>
 8017216:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801724c <floorf+0x78>
 801721a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801721e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017226:	ddef      	ble.n	8017208 <floorf+0x34>
 8017228:	2b00      	cmp	r3, #0
 801722a:	bfbe      	ittt	lt
 801722c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017230:	fa40 f202 	asrlt.w	r2, r0, r2
 8017234:	189b      	addlt	r3, r3, r2
 8017236:	ea23 0301 	bic.w	r3, r3, r1
 801723a:	e7e5      	b.n	8017208 <floorf+0x34>
 801723c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017240:	d3e4      	bcc.n	801720c <floorf+0x38>
 8017242:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017246:	4770      	bx	lr
 8017248:	2300      	movs	r3, #0
 801724a:	e7dd      	b.n	8017208 <floorf+0x34>
 801724c:	7149f2ca 	.word	0x7149f2ca
 8017250:	bf800000 	.word	0xbf800000
 8017254:	007fffff 	.word	0x007fffff

08017258 <nanf>:
 8017258:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017260 <nanf+0x8>
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	7fc00000 	.word	0x7fc00000

08017264 <scalbnf>:
 8017264:	ee10 3a10 	vmov	r3, s0
 8017268:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801726c:	d025      	beq.n	80172ba <scalbnf+0x56>
 801726e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017272:	d302      	bcc.n	801727a <scalbnf+0x16>
 8017274:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017278:	4770      	bx	lr
 801727a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801727e:	d122      	bne.n	80172c6 <scalbnf+0x62>
 8017280:	4b2a      	ldr	r3, [pc, #168]	; (801732c <scalbnf+0xc8>)
 8017282:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017330 <scalbnf+0xcc>
 8017286:	4298      	cmp	r0, r3
 8017288:	ee20 0a27 	vmul.f32	s0, s0, s15
 801728c:	db16      	blt.n	80172bc <scalbnf+0x58>
 801728e:	ee10 3a10 	vmov	r3, s0
 8017292:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017296:	3a19      	subs	r2, #25
 8017298:	4402      	add	r2, r0
 801729a:	2afe      	cmp	r2, #254	; 0xfe
 801729c:	dd15      	ble.n	80172ca <scalbnf+0x66>
 801729e:	ee10 3a10 	vmov	r3, s0
 80172a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017334 <scalbnf+0xd0>
 80172a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017338 <scalbnf+0xd4>
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	eeb0 7a67 	vmov.f32	s14, s15
 80172b0:	bfb8      	it	lt
 80172b2:	eef0 7a66 	vmovlt.f32	s15, s13
 80172b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80172ba:	4770      	bx	lr
 80172bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801733c <scalbnf+0xd8>
 80172c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80172c4:	4770      	bx	lr
 80172c6:	0dd2      	lsrs	r2, r2, #23
 80172c8:	e7e6      	b.n	8017298 <scalbnf+0x34>
 80172ca:	2a00      	cmp	r2, #0
 80172cc:	dd06      	ble.n	80172dc <scalbnf+0x78>
 80172ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80172d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80172d6:	ee00 3a10 	vmov	s0, r3
 80172da:	4770      	bx	lr
 80172dc:	f112 0f16 	cmn.w	r2, #22
 80172e0:	da1a      	bge.n	8017318 <scalbnf+0xb4>
 80172e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80172e6:	4298      	cmp	r0, r3
 80172e8:	ee10 3a10 	vmov	r3, s0
 80172ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80172f0:	dd0a      	ble.n	8017308 <scalbnf+0xa4>
 80172f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017334 <scalbnf+0xd0>
 80172f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017338 <scalbnf+0xd4>
 80172fa:	eef0 7a40 	vmov.f32	s15, s0
 80172fe:	2b00      	cmp	r3, #0
 8017300:	bf18      	it	ne
 8017302:	eeb0 0a47 	vmovne.f32	s0, s14
 8017306:	e7db      	b.n	80172c0 <scalbnf+0x5c>
 8017308:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801733c <scalbnf+0xd8>
 801730c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017340 <scalbnf+0xdc>
 8017310:	eef0 7a40 	vmov.f32	s15, s0
 8017314:	2b00      	cmp	r3, #0
 8017316:	e7f3      	b.n	8017300 <scalbnf+0x9c>
 8017318:	3219      	adds	r2, #25
 801731a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801731e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017322:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017344 <scalbnf+0xe0>
 8017326:	ee07 3a10 	vmov	s14, r3
 801732a:	e7c4      	b.n	80172b6 <scalbnf+0x52>
 801732c:	ffff3cb0 	.word	0xffff3cb0
 8017330:	4c000000 	.word	0x4c000000
 8017334:	7149f2ca 	.word	0x7149f2ca
 8017338:	f149f2ca 	.word	0xf149f2ca
 801733c:	0da24260 	.word	0x0da24260
 8017340:	8da24260 	.word	0x8da24260
 8017344:	33000000 	.word	0x33000000

08017348 <abort>:
 8017348:	b508      	push	{r3, lr}
 801734a:	2006      	movs	r0, #6
 801734c:	f000 fdb0 	bl	8017eb0 <raise>
 8017350:	2001      	movs	r0, #1
 8017352:	f7eb f911 	bl	8002578 <_exit>
	...

08017358 <__errno>:
 8017358:	4b01      	ldr	r3, [pc, #4]	; (8017360 <__errno+0x8>)
 801735a:	6818      	ldr	r0, [r3, #0]
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	200000f0 	.word	0x200000f0

08017364 <__libc_init_array>:
 8017364:	b570      	push	{r4, r5, r6, lr}
 8017366:	4d0d      	ldr	r5, [pc, #52]	; (801739c <__libc_init_array+0x38>)
 8017368:	4c0d      	ldr	r4, [pc, #52]	; (80173a0 <__libc_init_array+0x3c>)
 801736a:	1b64      	subs	r4, r4, r5
 801736c:	10a4      	asrs	r4, r4, #2
 801736e:	2600      	movs	r6, #0
 8017370:	42a6      	cmp	r6, r4
 8017372:	d109      	bne.n	8017388 <__libc_init_array+0x24>
 8017374:	4d0b      	ldr	r5, [pc, #44]	; (80173a4 <__libc_init_array+0x40>)
 8017376:	4c0c      	ldr	r4, [pc, #48]	; (80173a8 <__libc_init_array+0x44>)
 8017378:	f002 fed8 	bl	801a12c <_init>
 801737c:	1b64      	subs	r4, r4, r5
 801737e:	10a4      	asrs	r4, r4, #2
 8017380:	2600      	movs	r6, #0
 8017382:	42a6      	cmp	r6, r4
 8017384:	d105      	bne.n	8017392 <__libc_init_array+0x2e>
 8017386:	bd70      	pop	{r4, r5, r6, pc}
 8017388:	f855 3b04 	ldr.w	r3, [r5], #4
 801738c:	4798      	blx	r3
 801738e:	3601      	adds	r6, #1
 8017390:	e7ee      	b.n	8017370 <__libc_init_array+0xc>
 8017392:	f855 3b04 	ldr.w	r3, [r5], #4
 8017396:	4798      	blx	r3
 8017398:	3601      	adds	r6, #1
 801739a:	e7f2      	b.n	8017382 <__libc_init_array+0x1e>
 801739c:	0801abec 	.word	0x0801abec
 80173a0:	0801abec 	.word	0x0801abec
 80173a4:	0801abec 	.word	0x0801abec
 80173a8:	0801abf0 	.word	0x0801abf0

080173ac <malloc>:
 80173ac:	4b02      	ldr	r3, [pc, #8]	; (80173b8 <malloc+0xc>)
 80173ae:	4601      	mov	r1, r0
 80173b0:	6818      	ldr	r0, [r3, #0]
 80173b2:	f000 b869 	b.w	8017488 <_malloc_r>
 80173b6:	bf00      	nop
 80173b8:	200000f0 	.word	0x200000f0

080173bc <memcpy>:
 80173bc:	440a      	add	r2, r1
 80173be:	4291      	cmp	r1, r2
 80173c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80173c4:	d100      	bne.n	80173c8 <memcpy+0xc>
 80173c6:	4770      	bx	lr
 80173c8:	b510      	push	{r4, lr}
 80173ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80173ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80173d2:	4291      	cmp	r1, r2
 80173d4:	d1f9      	bne.n	80173ca <memcpy+0xe>
 80173d6:	bd10      	pop	{r4, pc}

080173d8 <memset>:
 80173d8:	4402      	add	r2, r0
 80173da:	4603      	mov	r3, r0
 80173dc:	4293      	cmp	r3, r2
 80173de:	d100      	bne.n	80173e2 <memset+0xa>
 80173e0:	4770      	bx	lr
 80173e2:	f803 1b01 	strb.w	r1, [r3], #1
 80173e6:	e7f9      	b.n	80173dc <memset+0x4>

080173e8 <_free_r>:
 80173e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173ea:	2900      	cmp	r1, #0
 80173ec:	d048      	beq.n	8017480 <_free_r+0x98>
 80173ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173f2:	9001      	str	r0, [sp, #4]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	f1a1 0404 	sub.w	r4, r1, #4
 80173fa:	bfb8      	it	lt
 80173fc:	18e4      	addlt	r4, r4, r3
 80173fe:	f001 fd1d 	bl	8018e3c <__malloc_lock>
 8017402:	4a20      	ldr	r2, [pc, #128]	; (8017484 <_free_r+0x9c>)
 8017404:	9801      	ldr	r0, [sp, #4]
 8017406:	6813      	ldr	r3, [r2, #0]
 8017408:	4615      	mov	r5, r2
 801740a:	b933      	cbnz	r3, 801741a <_free_r+0x32>
 801740c:	6063      	str	r3, [r4, #4]
 801740e:	6014      	str	r4, [r2, #0]
 8017410:	b003      	add	sp, #12
 8017412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017416:	f001 bd17 	b.w	8018e48 <__malloc_unlock>
 801741a:	42a3      	cmp	r3, r4
 801741c:	d90b      	bls.n	8017436 <_free_r+0x4e>
 801741e:	6821      	ldr	r1, [r4, #0]
 8017420:	1862      	adds	r2, r4, r1
 8017422:	4293      	cmp	r3, r2
 8017424:	bf04      	itt	eq
 8017426:	681a      	ldreq	r2, [r3, #0]
 8017428:	685b      	ldreq	r3, [r3, #4]
 801742a:	6063      	str	r3, [r4, #4]
 801742c:	bf04      	itt	eq
 801742e:	1852      	addeq	r2, r2, r1
 8017430:	6022      	streq	r2, [r4, #0]
 8017432:	602c      	str	r4, [r5, #0]
 8017434:	e7ec      	b.n	8017410 <_free_r+0x28>
 8017436:	461a      	mov	r2, r3
 8017438:	685b      	ldr	r3, [r3, #4]
 801743a:	b10b      	cbz	r3, 8017440 <_free_r+0x58>
 801743c:	42a3      	cmp	r3, r4
 801743e:	d9fa      	bls.n	8017436 <_free_r+0x4e>
 8017440:	6811      	ldr	r1, [r2, #0]
 8017442:	1855      	adds	r5, r2, r1
 8017444:	42a5      	cmp	r5, r4
 8017446:	d10b      	bne.n	8017460 <_free_r+0x78>
 8017448:	6824      	ldr	r4, [r4, #0]
 801744a:	4421      	add	r1, r4
 801744c:	1854      	adds	r4, r2, r1
 801744e:	42a3      	cmp	r3, r4
 8017450:	6011      	str	r1, [r2, #0]
 8017452:	d1dd      	bne.n	8017410 <_free_r+0x28>
 8017454:	681c      	ldr	r4, [r3, #0]
 8017456:	685b      	ldr	r3, [r3, #4]
 8017458:	6053      	str	r3, [r2, #4]
 801745a:	4421      	add	r1, r4
 801745c:	6011      	str	r1, [r2, #0]
 801745e:	e7d7      	b.n	8017410 <_free_r+0x28>
 8017460:	d902      	bls.n	8017468 <_free_r+0x80>
 8017462:	230c      	movs	r3, #12
 8017464:	6003      	str	r3, [r0, #0]
 8017466:	e7d3      	b.n	8017410 <_free_r+0x28>
 8017468:	6825      	ldr	r5, [r4, #0]
 801746a:	1961      	adds	r1, r4, r5
 801746c:	428b      	cmp	r3, r1
 801746e:	bf04      	itt	eq
 8017470:	6819      	ldreq	r1, [r3, #0]
 8017472:	685b      	ldreq	r3, [r3, #4]
 8017474:	6063      	str	r3, [r4, #4]
 8017476:	bf04      	itt	eq
 8017478:	1949      	addeq	r1, r1, r5
 801747a:	6021      	streq	r1, [r4, #0]
 801747c:	6054      	str	r4, [r2, #4]
 801747e:	e7c7      	b.n	8017410 <_free_r+0x28>
 8017480:	b003      	add	sp, #12
 8017482:	bd30      	pop	{r4, r5, pc}
 8017484:	200011b8 	.word	0x200011b8

08017488 <_malloc_r>:
 8017488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801748a:	1ccd      	adds	r5, r1, #3
 801748c:	f025 0503 	bic.w	r5, r5, #3
 8017490:	3508      	adds	r5, #8
 8017492:	2d0c      	cmp	r5, #12
 8017494:	bf38      	it	cc
 8017496:	250c      	movcc	r5, #12
 8017498:	2d00      	cmp	r5, #0
 801749a:	4606      	mov	r6, r0
 801749c:	db01      	blt.n	80174a2 <_malloc_r+0x1a>
 801749e:	42a9      	cmp	r1, r5
 80174a0:	d903      	bls.n	80174aa <_malloc_r+0x22>
 80174a2:	230c      	movs	r3, #12
 80174a4:	6033      	str	r3, [r6, #0]
 80174a6:	2000      	movs	r0, #0
 80174a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174aa:	f001 fcc7 	bl	8018e3c <__malloc_lock>
 80174ae:	4921      	ldr	r1, [pc, #132]	; (8017534 <_malloc_r+0xac>)
 80174b0:	680a      	ldr	r2, [r1, #0]
 80174b2:	4614      	mov	r4, r2
 80174b4:	b99c      	cbnz	r4, 80174de <_malloc_r+0x56>
 80174b6:	4f20      	ldr	r7, [pc, #128]	; (8017538 <_malloc_r+0xb0>)
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	b923      	cbnz	r3, 80174c6 <_malloc_r+0x3e>
 80174bc:	4621      	mov	r1, r4
 80174be:	4630      	mov	r0, r6
 80174c0:	f000 fcbe 	bl	8017e40 <_sbrk_r>
 80174c4:	6038      	str	r0, [r7, #0]
 80174c6:	4629      	mov	r1, r5
 80174c8:	4630      	mov	r0, r6
 80174ca:	f000 fcb9 	bl	8017e40 <_sbrk_r>
 80174ce:	1c43      	adds	r3, r0, #1
 80174d0:	d123      	bne.n	801751a <_malloc_r+0x92>
 80174d2:	230c      	movs	r3, #12
 80174d4:	6033      	str	r3, [r6, #0]
 80174d6:	4630      	mov	r0, r6
 80174d8:	f001 fcb6 	bl	8018e48 <__malloc_unlock>
 80174dc:	e7e3      	b.n	80174a6 <_malloc_r+0x1e>
 80174de:	6823      	ldr	r3, [r4, #0]
 80174e0:	1b5b      	subs	r3, r3, r5
 80174e2:	d417      	bmi.n	8017514 <_malloc_r+0x8c>
 80174e4:	2b0b      	cmp	r3, #11
 80174e6:	d903      	bls.n	80174f0 <_malloc_r+0x68>
 80174e8:	6023      	str	r3, [r4, #0]
 80174ea:	441c      	add	r4, r3
 80174ec:	6025      	str	r5, [r4, #0]
 80174ee:	e004      	b.n	80174fa <_malloc_r+0x72>
 80174f0:	6863      	ldr	r3, [r4, #4]
 80174f2:	42a2      	cmp	r2, r4
 80174f4:	bf0c      	ite	eq
 80174f6:	600b      	streq	r3, [r1, #0]
 80174f8:	6053      	strne	r3, [r2, #4]
 80174fa:	4630      	mov	r0, r6
 80174fc:	f001 fca4 	bl	8018e48 <__malloc_unlock>
 8017500:	f104 000b 	add.w	r0, r4, #11
 8017504:	1d23      	adds	r3, r4, #4
 8017506:	f020 0007 	bic.w	r0, r0, #7
 801750a:	1ac2      	subs	r2, r0, r3
 801750c:	d0cc      	beq.n	80174a8 <_malloc_r+0x20>
 801750e:	1a1b      	subs	r3, r3, r0
 8017510:	50a3      	str	r3, [r4, r2]
 8017512:	e7c9      	b.n	80174a8 <_malloc_r+0x20>
 8017514:	4622      	mov	r2, r4
 8017516:	6864      	ldr	r4, [r4, #4]
 8017518:	e7cc      	b.n	80174b4 <_malloc_r+0x2c>
 801751a:	1cc4      	adds	r4, r0, #3
 801751c:	f024 0403 	bic.w	r4, r4, #3
 8017520:	42a0      	cmp	r0, r4
 8017522:	d0e3      	beq.n	80174ec <_malloc_r+0x64>
 8017524:	1a21      	subs	r1, r4, r0
 8017526:	4630      	mov	r0, r6
 8017528:	f000 fc8a 	bl	8017e40 <_sbrk_r>
 801752c:	3001      	adds	r0, #1
 801752e:	d1dd      	bne.n	80174ec <_malloc_r+0x64>
 8017530:	e7cf      	b.n	80174d2 <_malloc_r+0x4a>
 8017532:	bf00      	nop
 8017534:	200011b8 	.word	0x200011b8
 8017538:	200011bc 	.word	0x200011bc

0801753c <__cvt>:
 801753c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017540:	ec55 4b10 	vmov	r4, r5, d0
 8017544:	2d00      	cmp	r5, #0
 8017546:	460e      	mov	r6, r1
 8017548:	4619      	mov	r1, r3
 801754a:	462b      	mov	r3, r5
 801754c:	bfbb      	ittet	lt
 801754e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017552:	461d      	movlt	r5, r3
 8017554:	2300      	movge	r3, #0
 8017556:	232d      	movlt	r3, #45	; 0x2d
 8017558:	700b      	strb	r3, [r1, #0]
 801755a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801755c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017560:	4691      	mov	r9, r2
 8017562:	f023 0820 	bic.w	r8, r3, #32
 8017566:	bfbc      	itt	lt
 8017568:	4622      	movlt	r2, r4
 801756a:	4614      	movlt	r4, r2
 801756c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017570:	d005      	beq.n	801757e <__cvt+0x42>
 8017572:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017576:	d100      	bne.n	801757a <__cvt+0x3e>
 8017578:	3601      	adds	r6, #1
 801757a:	2102      	movs	r1, #2
 801757c:	e000      	b.n	8017580 <__cvt+0x44>
 801757e:	2103      	movs	r1, #3
 8017580:	ab03      	add	r3, sp, #12
 8017582:	9301      	str	r3, [sp, #4]
 8017584:	ab02      	add	r3, sp, #8
 8017586:	9300      	str	r3, [sp, #0]
 8017588:	ec45 4b10 	vmov	d0, r4, r5
 801758c:	4653      	mov	r3, sl
 801758e:	4632      	mov	r2, r6
 8017590:	f000 fd6a 	bl	8018068 <_dtoa_r>
 8017594:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017598:	4607      	mov	r7, r0
 801759a:	d102      	bne.n	80175a2 <__cvt+0x66>
 801759c:	f019 0f01 	tst.w	r9, #1
 80175a0:	d022      	beq.n	80175e8 <__cvt+0xac>
 80175a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80175a6:	eb07 0906 	add.w	r9, r7, r6
 80175aa:	d110      	bne.n	80175ce <__cvt+0x92>
 80175ac:	783b      	ldrb	r3, [r7, #0]
 80175ae:	2b30      	cmp	r3, #48	; 0x30
 80175b0:	d10a      	bne.n	80175c8 <__cvt+0x8c>
 80175b2:	2200      	movs	r2, #0
 80175b4:	2300      	movs	r3, #0
 80175b6:	4620      	mov	r0, r4
 80175b8:	4629      	mov	r1, r5
 80175ba:	f7e9 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 80175be:	b918      	cbnz	r0, 80175c8 <__cvt+0x8c>
 80175c0:	f1c6 0601 	rsb	r6, r6, #1
 80175c4:	f8ca 6000 	str.w	r6, [sl]
 80175c8:	f8da 3000 	ldr.w	r3, [sl]
 80175cc:	4499      	add	r9, r3
 80175ce:	2200      	movs	r2, #0
 80175d0:	2300      	movs	r3, #0
 80175d2:	4620      	mov	r0, r4
 80175d4:	4629      	mov	r1, r5
 80175d6:	f7e9 fa77 	bl	8000ac8 <__aeabi_dcmpeq>
 80175da:	b108      	cbz	r0, 80175e0 <__cvt+0xa4>
 80175dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80175e0:	2230      	movs	r2, #48	; 0x30
 80175e2:	9b03      	ldr	r3, [sp, #12]
 80175e4:	454b      	cmp	r3, r9
 80175e6:	d307      	bcc.n	80175f8 <__cvt+0xbc>
 80175e8:	9b03      	ldr	r3, [sp, #12]
 80175ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175ec:	1bdb      	subs	r3, r3, r7
 80175ee:	4638      	mov	r0, r7
 80175f0:	6013      	str	r3, [r2, #0]
 80175f2:	b004      	add	sp, #16
 80175f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175f8:	1c59      	adds	r1, r3, #1
 80175fa:	9103      	str	r1, [sp, #12]
 80175fc:	701a      	strb	r2, [r3, #0]
 80175fe:	e7f0      	b.n	80175e2 <__cvt+0xa6>

08017600 <__exponent>:
 8017600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017602:	4603      	mov	r3, r0
 8017604:	2900      	cmp	r1, #0
 8017606:	bfb8      	it	lt
 8017608:	4249      	neglt	r1, r1
 801760a:	f803 2b02 	strb.w	r2, [r3], #2
 801760e:	bfb4      	ite	lt
 8017610:	222d      	movlt	r2, #45	; 0x2d
 8017612:	222b      	movge	r2, #43	; 0x2b
 8017614:	2909      	cmp	r1, #9
 8017616:	7042      	strb	r2, [r0, #1]
 8017618:	dd2a      	ble.n	8017670 <__exponent+0x70>
 801761a:	f10d 0407 	add.w	r4, sp, #7
 801761e:	46a4      	mov	ip, r4
 8017620:	270a      	movs	r7, #10
 8017622:	46a6      	mov	lr, r4
 8017624:	460a      	mov	r2, r1
 8017626:	fb91 f6f7 	sdiv	r6, r1, r7
 801762a:	fb07 1516 	mls	r5, r7, r6, r1
 801762e:	3530      	adds	r5, #48	; 0x30
 8017630:	2a63      	cmp	r2, #99	; 0x63
 8017632:	f104 34ff 	add.w	r4, r4, #4294967295
 8017636:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801763a:	4631      	mov	r1, r6
 801763c:	dcf1      	bgt.n	8017622 <__exponent+0x22>
 801763e:	3130      	adds	r1, #48	; 0x30
 8017640:	f1ae 0502 	sub.w	r5, lr, #2
 8017644:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017648:	1c44      	adds	r4, r0, #1
 801764a:	4629      	mov	r1, r5
 801764c:	4561      	cmp	r1, ip
 801764e:	d30a      	bcc.n	8017666 <__exponent+0x66>
 8017650:	f10d 0209 	add.w	r2, sp, #9
 8017654:	eba2 020e 	sub.w	r2, r2, lr
 8017658:	4565      	cmp	r5, ip
 801765a:	bf88      	it	hi
 801765c:	2200      	movhi	r2, #0
 801765e:	4413      	add	r3, r2
 8017660:	1a18      	subs	r0, r3, r0
 8017662:	b003      	add	sp, #12
 8017664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017666:	f811 2b01 	ldrb.w	r2, [r1], #1
 801766a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801766e:	e7ed      	b.n	801764c <__exponent+0x4c>
 8017670:	2330      	movs	r3, #48	; 0x30
 8017672:	3130      	adds	r1, #48	; 0x30
 8017674:	7083      	strb	r3, [r0, #2]
 8017676:	70c1      	strb	r1, [r0, #3]
 8017678:	1d03      	adds	r3, r0, #4
 801767a:	e7f1      	b.n	8017660 <__exponent+0x60>

0801767c <_printf_float>:
 801767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017680:	ed2d 8b02 	vpush	{d8}
 8017684:	b08d      	sub	sp, #52	; 0x34
 8017686:	460c      	mov	r4, r1
 8017688:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801768c:	4616      	mov	r6, r2
 801768e:	461f      	mov	r7, r3
 8017690:	4605      	mov	r5, r0
 8017692:	f001 fbcb 	bl	8018e2c <_localeconv_r>
 8017696:	f8d0 a000 	ldr.w	sl, [r0]
 801769a:	4650      	mov	r0, sl
 801769c:	f7e8 fd98 	bl	80001d0 <strlen>
 80176a0:	2300      	movs	r3, #0
 80176a2:	930a      	str	r3, [sp, #40]	; 0x28
 80176a4:	6823      	ldr	r3, [r4, #0]
 80176a6:	9305      	str	r3, [sp, #20]
 80176a8:	f8d8 3000 	ldr.w	r3, [r8]
 80176ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80176b0:	3307      	adds	r3, #7
 80176b2:	f023 0307 	bic.w	r3, r3, #7
 80176b6:	f103 0208 	add.w	r2, r3, #8
 80176ba:	f8c8 2000 	str.w	r2, [r8]
 80176be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80176c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80176ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80176ce:	9307      	str	r3, [sp, #28]
 80176d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80176d4:	ee08 0a10 	vmov	s16, r0
 80176d8:	4b9f      	ldr	r3, [pc, #636]	; (8017958 <_printf_float+0x2dc>)
 80176da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80176de:	f04f 32ff 	mov.w	r2, #4294967295
 80176e2:	f7e9 fa23 	bl	8000b2c <__aeabi_dcmpun>
 80176e6:	bb88      	cbnz	r0, 801774c <_printf_float+0xd0>
 80176e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80176ec:	4b9a      	ldr	r3, [pc, #616]	; (8017958 <_printf_float+0x2dc>)
 80176ee:	f04f 32ff 	mov.w	r2, #4294967295
 80176f2:	f7e9 f9fd 	bl	8000af0 <__aeabi_dcmple>
 80176f6:	bb48      	cbnz	r0, 801774c <_printf_float+0xd0>
 80176f8:	2200      	movs	r2, #0
 80176fa:	2300      	movs	r3, #0
 80176fc:	4640      	mov	r0, r8
 80176fe:	4649      	mov	r1, r9
 8017700:	f7e9 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8017704:	b110      	cbz	r0, 801770c <_printf_float+0x90>
 8017706:	232d      	movs	r3, #45	; 0x2d
 8017708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801770c:	4b93      	ldr	r3, [pc, #588]	; (801795c <_printf_float+0x2e0>)
 801770e:	4894      	ldr	r0, [pc, #592]	; (8017960 <_printf_float+0x2e4>)
 8017710:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017714:	bf94      	ite	ls
 8017716:	4698      	movls	r8, r3
 8017718:	4680      	movhi	r8, r0
 801771a:	2303      	movs	r3, #3
 801771c:	6123      	str	r3, [r4, #16]
 801771e:	9b05      	ldr	r3, [sp, #20]
 8017720:	f023 0204 	bic.w	r2, r3, #4
 8017724:	6022      	str	r2, [r4, #0]
 8017726:	f04f 0900 	mov.w	r9, #0
 801772a:	9700      	str	r7, [sp, #0]
 801772c:	4633      	mov	r3, r6
 801772e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017730:	4621      	mov	r1, r4
 8017732:	4628      	mov	r0, r5
 8017734:	f000 f9d8 	bl	8017ae8 <_printf_common>
 8017738:	3001      	adds	r0, #1
 801773a:	f040 8090 	bne.w	801785e <_printf_float+0x1e2>
 801773e:	f04f 30ff 	mov.w	r0, #4294967295
 8017742:	b00d      	add	sp, #52	; 0x34
 8017744:	ecbd 8b02 	vpop	{d8}
 8017748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801774c:	4642      	mov	r2, r8
 801774e:	464b      	mov	r3, r9
 8017750:	4640      	mov	r0, r8
 8017752:	4649      	mov	r1, r9
 8017754:	f7e9 f9ea 	bl	8000b2c <__aeabi_dcmpun>
 8017758:	b140      	cbz	r0, 801776c <_printf_float+0xf0>
 801775a:	464b      	mov	r3, r9
 801775c:	2b00      	cmp	r3, #0
 801775e:	bfbc      	itt	lt
 8017760:	232d      	movlt	r3, #45	; 0x2d
 8017762:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017766:	487f      	ldr	r0, [pc, #508]	; (8017964 <_printf_float+0x2e8>)
 8017768:	4b7f      	ldr	r3, [pc, #508]	; (8017968 <_printf_float+0x2ec>)
 801776a:	e7d1      	b.n	8017710 <_printf_float+0x94>
 801776c:	6863      	ldr	r3, [r4, #4]
 801776e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017772:	9206      	str	r2, [sp, #24]
 8017774:	1c5a      	adds	r2, r3, #1
 8017776:	d13f      	bne.n	80177f8 <_printf_float+0x17c>
 8017778:	2306      	movs	r3, #6
 801777a:	6063      	str	r3, [r4, #4]
 801777c:	9b05      	ldr	r3, [sp, #20]
 801777e:	6861      	ldr	r1, [r4, #4]
 8017780:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017784:	2300      	movs	r3, #0
 8017786:	9303      	str	r3, [sp, #12]
 8017788:	ab0a      	add	r3, sp, #40	; 0x28
 801778a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801778e:	ab09      	add	r3, sp, #36	; 0x24
 8017790:	ec49 8b10 	vmov	d0, r8, r9
 8017794:	9300      	str	r3, [sp, #0]
 8017796:	6022      	str	r2, [r4, #0]
 8017798:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801779c:	4628      	mov	r0, r5
 801779e:	f7ff fecd 	bl	801753c <__cvt>
 80177a2:	9b06      	ldr	r3, [sp, #24]
 80177a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80177a6:	2b47      	cmp	r3, #71	; 0x47
 80177a8:	4680      	mov	r8, r0
 80177aa:	d108      	bne.n	80177be <_printf_float+0x142>
 80177ac:	1cc8      	adds	r0, r1, #3
 80177ae:	db02      	blt.n	80177b6 <_printf_float+0x13a>
 80177b0:	6863      	ldr	r3, [r4, #4]
 80177b2:	4299      	cmp	r1, r3
 80177b4:	dd41      	ble.n	801783a <_printf_float+0x1be>
 80177b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80177ba:	fa5f fb8b 	uxtb.w	fp, fp
 80177be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80177c2:	d820      	bhi.n	8017806 <_printf_float+0x18a>
 80177c4:	3901      	subs	r1, #1
 80177c6:	465a      	mov	r2, fp
 80177c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80177cc:	9109      	str	r1, [sp, #36]	; 0x24
 80177ce:	f7ff ff17 	bl	8017600 <__exponent>
 80177d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80177d4:	1813      	adds	r3, r2, r0
 80177d6:	2a01      	cmp	r2, #1
 80177d8:	4681      	mov	r9, r0
 80177da:	6123      	str	r3, [r4, #16]
 80177dc:	dc02      	bgt.n	80177e4 <_printf_float+0x168>
 80177de:	6822      	ldr	r2, [r4, #0]
 80177e0:	07d2      	lsls	r2, r2, #31
 80177e2:	d501      	bpl.n	80177e8 <_printf_float+0x16c>
 80177e4:	3301      	adds	r3, #1
 80177e6:	6123      	str	r3, [r4, #16]
 80177e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d09c      	beq.n	801772a <_printf_float+0xae>
 80177f0:	232d      	movs	r3, #45	; 0x2d
 80177f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80177f6:	e798      	b.n	801772a <_printf_float+0xae>
 80177f8:	9a06      	ldr	r2, [sp, #24]
 80177fa:	2a47      	cmp	r2, #71	; 0x47
 80177fc:	d1be      	bne.n	801777c <_printf_float+0x100>
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d1bc      	bne.n	801777c <_printf_float+0x100>
 8017802:	2301      	movs	r3, #1
 8017804:	e7b9      	b.n	801777a <_printf_float+0xfe>
 8017806:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801780a:	d118      	bne.n	801783e <_printf_float+0x1c2>
 801780c:	2900      	cmp	r1, #0
 801780e:	6863      	ldr	r3, [r4, #4]
 8017810:	dd0b      	ble.n	801782a <_printf_float+0x1ae>
 8017812:	6121      	str	r1, [r4, #16]
 8017814:	b913      	cbnz	r3, 801781c <_printf_float+0x1a0>
 8017816:	6822      	ldr	r2, [r4, #0]
 8017818:	07d0      	lsls	r0, r2, #31
 801781a:	d502      	bpl.n	8017822 <_printf_float+0x1a6>
 801781c:	3301      	adds	r3, #1
 801781e:	440b      	add	r3, r1
 8017820:	6123      	str	r3, [r4, #16]
 8017822:	65a1      	str	r1, [r4, #88]	; 0x58
 8017824:	f04f 0900 	mov.w	r9, #0
 8017828:	e7de      	b.n	80177e8 <_printf_float+0x16c>
 801782a:	b913      	cbnz	r3, 8017832 <_printf_float+0x1b6>
 801782c:	6822      	ldr	r2, [r4, #0]
 801782e:	07d2      	lsls	r2, r2, #31
 8017830:	d501      	bpl.n	8017836 <_printf_float+0x1ba>
 8017832:	3302      	adds	r3, #2
 8017834:	e7f4      	b.n	8017820 <_printf_float+0x1a4>
 8017836:	2301      	movs	r3, #1
 8017838:	e7f2      	b.n	8017820 <_printf_float+0x1a4>
 801783a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801783e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017840:	4299      	cmp	r1, r3
 8017842:	db05      	blt.n	8017850 <_printf_float+0x1d4>
 8017844:	6823      	ldr	r3, [r4, #0]
 8017846:	6121      	str	r1, [r4, #16]
 8017848:	07d8      	lsls	r0, r3, #31
 801784a:	d5ea      	bpl.n	8017822 <_printf_float+0x1a6>
 801784c:	1c4b      	adds	r3, r1, #1
 801784e:	e7e7      	b.n	8017820 <_printf_float+0x1a4>
 8017850:	2900      	cmp	r1, #0
 8017852:	bfd4      	ite	le
 8017854:	f1c1 0202 	rsble	r2, r1, #2
 8017858:	2201      	movgt	r2, #1
 801785a:	4413      	add	r3, r2
 801785c:	e7e0      	b.n	8017820 <_printf_float+0x1a4>
 801785e:	6823      	ldr	r3, [r4, #0]
 8017860:	055a      	lsls	r2, r3, #21
 8017862:	d407      	bmi.n	8017874 <_printf_float+0x1f8>
 8017864:	6923      	ldr	r3, [r4, #16]
 8017866:	4642      	mov	r2, r8
 8017868:	4631      	mov	r1, r6
 801786a:	4628      	mov	r0, r5
 801786c:	47b8      	blx	r7
 801786e:	3001      	adds	r0, #1
 8017870:	d12c      	bne.n	80178cc <_printf_float+0x250>
 8017872:	e764      	b.n	801773e <_printf_float+0xc2>
 8017874:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017878:	f240 80e0 	bls.w	8017a3c <_printf_float+0x3c0>
 801787c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017880:	2200      	movs	r2, #0
 8017882:	2300      	movs	r3, #0
 8017884:	f7e9 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8017888:	2800      	cmp	r0, #0
 801788a:	d034      	beq.n	80178f6 <_printf_float+0x27a>
 801788c:	4a37      	ldr	r2, [pc, #220]	; (801796c <_printf_float+0x2f0>)
 801788e:	2301      	movs	r3, #1
 8017890:	4631      	mov	r1, r6
 8017892:	4628      	mov	r0, r5
 8017894:	47b8      	blx	r7
 8017896:	3001      	adds	r0, #1
 8017898:	f43f af51 	beq.w	801773e <_printf_float+0xc2>
 801789c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80178a0:	429a      	cmp	r2, r3
 80178a2:	db02      	blt.n	80178aa <_printf_float+0x22e>
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	07d8      	lsls	r0, r3, #31
 80178a8:	d510      	bpl.n	80178cc <_printf_float+0x250>
 80178aa:	ee18 3a10 	vmov	r3, s16
 80178ae:	4652      	mov	r2, sl
 80178b0:	4631      	mov	r1, r6
 80178b2:	4628      	mov	r0, r5
 80178b4:	47b8      	blx	r7
 80178b6:	3001      	adds	r0, #1
 80178b8:	f43f af41 	beq.w	801773e <_printf_float+0xc2>
 80178bc:	f04f 0800 	mov.w	r8, #0
 80178c0:	f104 091a 	add.w	r9, r4, #26
 80178c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178c6:	3b01      	subs	r3, #1
 80178c8:	4543      	cmp	r3, r8
 80178ca:	dc09      	bgt.n	80178e0 <_printf_float+0x264>
 80178cc:	6823      	ldr	r3, [r4, #0]
 80178ce:	079b      	lsls	r3, r3, #30
 80178d0:	f100 8105 	bmi.w	8017ade <_printf_float+0x462>
 80178d4:	68e0      	ldr	r0, [r4, #12]
 80178d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178d8:	4298      	cmp	r0, r3
 80178da:	bfb8      	it	lt
 80178dc:	4618      	movlt	r0, r3
 80178de:	e730      	b.n	8017742 <_printf_float+0xc6>
 80178e0:	2301      	movs	r3, #1
 80178e2:	464a      	mov	r2, r9
 80178e4:	4631      	mov	r1, r6
 80178e6:	4628      	mov	r0, r5
 80178e8:	47b8      	blx	r7
 80178ea:	3001      	adds	r0, #1
 80178ec:	f43f af27 	beq.w	801773e <_printf_float+0xc2>
 80178f0:	f108 0801 	add.w	r8, r8, #1
 80178f4:	e7e6      	b.n	80178c4 <_printf_float+0x248>
 80178f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	dc39      	bgt.n	8017970 <_printf_float+0x2f4>
 80178fc:	4a1b      	ldr	r2, [pc, #108]	; (801796c <_printf_float+0x2f0>)
 80178fe:	2301      	movs	r3, #1
 8017900:	4631      	mov	r1, r6
 8017902:	4628      	mov	r0, r5
 8017904:	47b8      	blx	r7
 8017906:	3001      	adds	r0, #1
 8017908:	f43f af19 	beq.w	801773e <_printf_float+0xc2>
 801790c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017910:	4313      	orrs	r3, r2
 8017912:	d102      	bne.n	801791a <_printf_float+0x29e>
 8017914:	6823      	ldr	r3, [r4, #0]
 8017916:	07d9      	lsls	r1, r3, #31
 8017918:	d5d8      	bpl.n	80178cc <_printf_float+0x250>
 801791a:	ee18 3a10 	vmov	r3, s16
 801791e:	4652      	mov	r2, sl
 8017920:	4631      	mov	r1, r6
 8017922:	4628      	mov	r0, r5
 8017924:	47b8      	blx	r7
 8017926:	3001      	adds	r0, #1
 8017928:	f43f af09 	beq.w	801773e <_printf_float+0xc2>
 801792c:	f04f 0900 	mov.w	r9, #0
 8017930:	f104 0a1a 	add.w	sl, r4, #26
 8017934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017936:	425b      	negs	r3, r3
 8017938:	454b      	cmp	r3, r9
 801793a:	dc01      	bgt.n	8017940 <_printf_float+0x2c4>
 801793c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801793e:	e792      	b.n	8017866 <_printf_float+0x1ea>
 8017940:	2301      	movs	r3, #1
 8017942:	4652      	mov	r2, sl
 8017944:	4631      	mov	r1, r6
 8017946:	4628      	mov	r0, r5
 8017948:	47b8      	blx	r7
 801794a:	3001      	adds	r0, #1
 801794c:	f43f aef7 	beq.w	801773e <_printf_float+0xc2>
 8017950:	f109 0901 	add.w	r9, r9, #1
 8017954:	e7ee      	b.n	8017934 <_printf_float+0x2b8>
 8017956:	bf00      	nop
 8017958:	7fefffff 	.word	0x7fefffff
 801795c:	0801a804 	.word	0x0801a804
 8017960:	0801a808 	.word	0x0801a808
 8017964:	0801a810 	.word	0x0801a810
 8017968:	0801a80c 	.word	0x0801a80c
 801796c:	0801a814 	.word	0x0801a814
 8017970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017972:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017974:	429a      	cmp	r2, r3
 8017976:	bfa8      	it	ge
 8017978:	461a      	movge	r2, r3
 801797a:	2a00      	cmp	r2, #0
 801797c:	4691      	mov	r9, r2
 801797e:	dc37      	bgt.n	80179f0 <_printf_float+0x374>
 8017980:	f04f 0b00 	mov.w	fp, #0
 8017984:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017988:	f104 021a 	add.w	r2, r4, #26
 801798c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801798e:	9305      	str	r3, [sp, #20]
 8017990:	eba3 0309 	sub.w	r3, r3, r9
 8017994:	455b      	cmp	r3, fp
 8017996:	dc33      	bgt.n	8017a00 <_printf_float+0x384>
 8017998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801799c:	429a      	cmp	r2, r3
 801799e:	db3b      	blt.n	8017a18 <_printf_float+0x39c>
 80179a0:	6823      	ldr	r3, [r4, #0]
 80179a2:	07da      	lsls	r2, r3, #31
 80179a4:	d438      	bmi.n	8017a18 <_printf_float+0x39c>
 80179a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179a8:	9b05      	ldr	r3, [sp, #20]
 80179aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179ac:	1ad3      	subs	r3, r2, r3
 80179ae:	eba2 0901 	sub.w	r9, r2, r1
 80179b2:	4599      	cmp	r9, r3
 80179b4:	bfa8      	it	ge
 80179b6:	4699      	movge	r9, r3
 80179b8:	f1b9 0f00 	cmp.w	r9, #0
 80179bc:	dc35      	bgt.n	8017a2a <_printf_float+0x3ae>
 80179be:	f04f 0800 	mov.w	r8, #0
 80179c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80179c6:	f104 0a1a 	add.w	sl, r4, #26
 80179ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80179ce:	1a9b      	subs	r3, r3, r2
 80179d0:	eba3 0309 	sub.w	r3, r3, r9
 80179d4:	4543      	cmp	r3, r8
 80179d6:	f77f af79 	ble.w	80178cc <_printf_float+0x250>
 80179da:	2301      	movs	r3, #1
 80179dc:	4652      	mov	r2, sl
 80179de:	4631      	mov	r1, r6
 80179e0:	4628      	mov	r0, r5
 80179e2:	47b8      	blx	r7
 80179e4:	3001      	adds	r0, #1
 80179e6:	f43f aeaa 	beq.w	801773e <_printf_float+0xc2>
 80179ea:	f108 0801 	add.w	r8, r8, #1
 80179ee:	e7ec      	b.n	80179ca <_printf_float+0x34e>
 80179f0:	4613      	mov	r3, r2
 80179f2:	4631      	mov	r1, r6
 80179f4:	4642      	mov	r2, r8
 80179f6:	4628      	mov	r0, r5
 80179f8:	47b8      	blx	r7
 80179fa:	3001      	adds	r0, #1
 80179fc:	d1c0      	bne.n	8017980 <_printf_float+0x304>
 80179fe:	e69e      	b.n	801773e <_printf_float+0xc2>
 8017a00:	2301      	movs	r3, #1
 8017a02:	4631      	mov	r1, r6
 8017a04:	4628      	mov	r0, r5
 8017a06:	9205      	str	r2, [sp, #20]
 8017a08:	47b8      	blx	r7
 8017a0a:	3001      	adds	r0, #1
 8017a0c:	f43f ae97 	beq.w	801773e <_printf_float+0xc2>
 8017a10:	9a05      	ldr	r2, [sp, #20]
 8017a12:	f10b 0b01 	add.w	fp, fp, #1
 8017a16:	e7b9      	b.n	801798c <_printf_float+0x310>
 8017a18:	ee18 3a10 	vmov	r3, s16
 8017a1c:	4652      	mov	r2, sl
 8017a1e:	4631      	mov	r1, r6
 8017a20:	4628      	mov	r0, r5
 8017a22:	47b8      	blx	r7
 8017a24:	3001      	adds	r0, #1
 8017a26:	d1be      	bne.n	80179a6 <_printf_float+0x32a>
 8017a28:	e689      	b.n	801773e <_printf_float+0xc2>
 8017a2a:	9a05      	ldr	r2, [sp, #20]
 8017a2c:	464b      	mov	r3, r9
 8017a2e:	4442      	add	r2, r8
 8017a30:	4631      	mov	r1, r6
 8017a32:	4628      	mov	r0, r5
 8017a34:	47b8      	blx	r7
 8017a36:	3001      	adds	r0, #1
 8017a38:	d1c1      	bne.n	80179be <_printf_float+0x342>
 8017a3a:	e680      	b.n	801773e <_printf_float+0xc2>
 8017a3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a3e:	2a01      	cmp	r2, #1
 8017a40:	dc01      	bgt.n	8017a46 <_printf_float+0x3ca>
 8017a42:	07db      	lsls	r3, r3, #31
 8017a44:	d538      	bpl.n	8017ab8 <_printf_float+0x43c>
 8017a46:	2301      	movs	r3, #1
 8017a48:	4642      	mov	r2, r8
 8017a4a:	4631      	mov	r1, r6
 8017a4c:	4628      	mov	r0, r5
 8017a4e:	47b8      	blx	r7
 8017a50:	3001      	adds	r0, #1
 8017a52:	f43f ae74 	beq.w	801773e <_printf_float+0xc2>
 8017a56:	ee18 3a10 	vmov	r3, s16
 8017a5a:	4652      	mov	r2, sl
 8017a5c:	4631      	mov	r1, r6
 8017a5e:	4628      	mov	r0, r5
 8017a60:	47b8      	blx	r7
 8017a62:	3001      	adds	r0, #1
 8017a64:	f43f ae6b 	beq.w	801773e <_printf_float+0xc2>
 8017a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	2300      	movs	r3, #0
 8017a70:	f7e9 f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8017a74:	b9d8      	cbnz	r0, 8017aae <_printf_float+0x432>
 8017a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a78:	f108 0201 	add.w	r2, r8, #1
 8017a7c:	3b01      	subs	r3, #1
 8017a7e:	4631      	mov	r1, r6
 8017a80:	4628      	mov	r0, r5
 8017a82:	47b8      	blx	r7
 8017a84:	3001      	adds	r0, #1
 8017a86:	d10e      	bne.n	8017aa6 <_printf_float+0x42a>
 8017a88:	e659      	b.n	801773e <_printf_float+0xc2>
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	4652      	mov	r2, sl
 8017a8e:	4631      	mov	r1, r6
 8017a90:	4628      	mov	r0, r5
 8017a92:	47b8      	blx	r7
 8017a94:	3001      	adds	r0, #1
 8017a96:	f43f ae52 	beq.w	801773e <_printf_float+0xc2>
 8017a9a:	f108 0801 	add.w	r8, r8, #1
 8017a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aa0:	3b01      	subs	r3, #1
 8017aa2:	4543      	cmp	r3, r8
 8017aa4:	dcf1      	bgt.n	8017a8a <_printf_float+0x40e>
 8017aa6:	464b      	mov	r3, r9
 8017aa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017aac:	e6dc      	b.n	8017868 <_printf_float+0x1ec>
 8017aae:	f04f 0800 	mov.w	r8, #0
 8017ab2:	f104 0a1a 	add.w	sl, r4, #26
 8017ab6:	e7f2      	b.n	8017a9e <_printf_float+0x422>
 8017ab8:	2301      	movs	r3, #1
 8017aba:	4642      	mov	r2, r8
 8017abc:	e7df      	b.n	8017a7e <_printf_float+0x402>
 8017abe:	2301      	movs	r3, #1
 8017ac0:	464a      	mov	r2, r9
 8017ac2:	4631      	mov	r1, r6
 8017ac4:	4628      	mov	r0, r5
 8017ac6:	47b8      	blx	r7
 8017ac8:	3001      	adds	r0, #1
 8017aca:	f43f ae38 	beq.w	801773e <_printf_float+0xc2>
 8017ace:	f108 0801 	add.w	r8, r8, #1
 8017ad2:	68e3      	ldr	r3, [r4, #12]
 8017ad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ad6:	1a5b      	subs	r3, r3, r1
 8017ad8:	4543      	cmp	r3, r8
 8017ada:	dcf0      	bgt.n	8017abe <_printf_float+0x442>
 8017adc:	e6fa      	b.n	80178d4 <_printf_float+0x258>
 8017ade:	f04f 0800 	mov.w	r8, #0
 8017ae2:	f104 0919 	add.w	r9, r4, #25
 8017ae6:	e7f4      	b.n	8017ad2 <_printf_float+0x456>

08017ae8 <_printf_common>:
 8017ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017aec:	4616      	mov	r6, r2
 8017aee:	4699      	mov	r9, r3
 8017af0:	688a      	ldr	r2, [r1, #8]
 8017af2:	690b      	ldr	r3, [r1, #16]
 8017af4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017af8:	4293      	cmp	r3, r2
 8017afa:	bfb8      	it	lt
 8017afc:	4613      	movlt	r3, r2
 8017afe:	6033      	str	r3, [r6, #0]
 8017b00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b04:	4607      	mov	r7, r0
 8017b06:	460c      	mov	r4, r1
 8017b08:	b10a      	cbz	r2, 8017b0e <_printf_common+0x26>
 8017b0a:	3301      	adds	r3, #1
 8017b0c:	6033      	str	r3, [r6, #0]
 8017b0e:	6823      	ldr	r3, [r4, #0]
 8017b10:	0699      	lsls	r1, r3, #26
 8017b12:	bf42      	ittt	mi
 8017b14:	6833      	ldrmi	r3, [r6, #0]
 8017b16:	3302      	addmi	r3, #2
 8017b18:	6033      	strmi	r3, [r6, #0]
 8017b1a:	6825      	ldr	r5, [r4, #0]
 8017b1c:	f015 0506 	ands.w	r5, r5, #6
 8017b20:	d106      	bne.n	8017b30 <_printf_common+0x48>
 8017b22:	f104 0a19 	add.w	sl, r4, #25
 8017b26:	68e3      	ldr	r3, [r4, #12]
 8017b28:	6832      	ldr	r2, [r6, #0]
 8017b2a:	1a9b      	subs	r3, r3, r2
 8017b2c:	42ab      	cmp	r3, r5
 8017b2e:	dc26      	bgt.n	8017b7e <_printf_common+0x96>
 8017b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017b34:	1e13      	subs	r3, r2, #0
 8017b36:	6822      	ldr	r2, [r4, #0]
 8017b38:	bf18      	it	ne
 8017b3a:	2301      	movne	r3, #1
 8017b3c:	0692      	lsls	r2, r2, #26
 8017b3e:	d42b      	bmi.n	8017b98 <_printf_common+0xb0>
 8017b40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b44:	4649      	mov	r1, r9
 8017b46:	4638      	mov	r0, r7
 8017b48:	47c0      	blx	r8
 8017b4a:	3001      	adds	r0, #1
 8017b4c:	d01e      	beq.n	8017b8c <_printf_common+0xa4>
 8017b4e:	6823      	ldr	r3, [r4, #0]
 8017b50:	68e5      	ldr	r5, [r4, #12]
 8017b52:	6832      	ldr	r2, [r6, #0]
 8017b54:	f003 0306 	and.w	r3, r3, #6
 8017b58:	2b04      	cmp	r3, #4
 8017b5a:	bf08      	it	eq
 8017b5c:	1aad      	subeq	r5, r5, r2
 8017b5e:	68a3      	ldr	r3, [r4, #8]
 8017b60:	6922      	ldr	r2, [r4, #16]
 8017b62:	bf0c      	ite	eq
 8017b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b68:	2500      	movne	r5, #0
 8017b6a:	4293      	cmp	r3, r2
 8017b6c:	bfc4      	itt	gt
 8017b6e:	1a9b      	subgt	r3, r3, r2
 8017b70:	18ed      	addgt	r5, r5, r3
 8017b72:	2600      	movs	r6, #0
 8017b74:	341a      	adds	r4, #26
 8017b76:	42b5      	cmp	r5, r6
 8017b78:	d11a      	bne.n	8017bb0 <_printf_common+0xc8>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	e008      	b.n	8017b90 <_printf_common+0xa8>
 8017b7e:	2301      	movs	r3, #1
 8017b80:	4652      	mov	r2, sl
 8017b82:	4649      	mov	r1, r9
 8017b84:	4638      	mov	r0, r7
 8017b86:	47c0      	blx	r8
 8017b88:	3001      	adds	r0, #1
 8017b8a:	d103      	bne.n	8017b94 <_printf_common+0xac>
 8017b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b94:	3501      	adds	r5, #1
 8017b96:	e7c6      	b.n	8017b26 <_printf_common+0x3e>
 8017b98:	18e1      	adds	r1, r4, r3
 8017b9a:	1c5a      	adds	r2, r3, #1
 8017b9c:	2030      	movs	r0, #48	; 0x30
 8017b9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ba2:	4422      	add	r2, r4
 8017ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017bac:	3302      	adds	r3, #2
 8017bae:	e7c7      	b.n	8017b40 <_printf_common+0x58>
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	4622      	mov	r2, r4
 8017bb4:	4649      	mov	r1, r9
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	47c0      	blx	r8
 8017bba:	3001      	adds	r0, #1
 8017bbc:	d0e6      	beq.n	8017b8c <_printf_common+0xa4>
 8017bbe:	3601      	adds	r6, #1
 8017bc0:	e7d9      	b.n	8017b76 <_printf_common+0x8e>
	...

08017bc4 <_printf_i>:
 8017bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bc8:	460c      	mov	r4, r1
 8017bca:	4691      	mov	r9, r2
 8017bcc:	7e27      	ldrb	r7, [r4, #24]
 8017bce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017bd0:	2f78      	cmp	r7, #120	; 0x78
 8017bd2:	4680      	mov	r8, r0
 8017bd4:	469a      	mov	sl, r3
 8017bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017bda:	d807      	bhi.n	8017bec <_printf_i+0x28>
 8017bdc:	2f62      	cmp	r7, #98	; 0x62
 8017bde:	d80a      	bhi.n	8017bf6 <_printf_i+0x32>
 8017be0:	2f00      	cmp	r7, #0
 8017be2:	f000 80d8 	beq.w	8017d96 <_printf_i+0x1d2>
 8017be6:	2f58      	cmp	r7, #88	; 0x58
 8017be8:	f000 80a3 	beq.w	8017d32 <_printf_i+0x16e>
 8017bec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017bf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017bf4:	e03a      	b.n	8017c6c <_printf_i+0xa8>
 8017bf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017bfa:	2b15      	cmp	r3, #21
 8017bfc:	d8f6      	bhi.n	8017bec <_printf_i+0x28>
 8017bfe:	a001      	add	r0, pc, #4	; (adr r0, 8017c04 <_printf_i+0x40>)
 8017c00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017c04:	08017c5d 	.word	0x08017c5d
 8017c08:	08017c71 	.word	0x08017c71
 8017c0c:	08017bed 	.word	0x08017bed
 8017c10:	08017bed 	.word	0x08017bed
 8017c14:	08017bed 	.word	0x08017bed
 8017c18:	08017bed 	.word	0x08017bed
 8017c1c:	08017c71 	.word	0x08017c71
 8017c20:	08017bed 	.word	0x08017bed
 8017c24:	08017bed 	.word	0x08017bed
 8017c28:	08017bed 	.word	0x08017bed
 8017c2c:	08017bed 	.word	0x08017bed
 8017c30:	08017d7d 	.word	0x08017d7d
 8017c34:	08017ca1 	.word	0x08017ca1
 8017c38:	08017d5f 	.word	0x08017d5f
 8017c3c:	08017bed 	.word	0x08017bed
 8017c40:	08017bed 	.word	0x08017bed
 8017c44:	08017d9f 	.word	0x08017d9f
 8017c48:	08017bed 	.word	0x08017bed
 8017c4c:	08017ca1 	.word	0x08017ca1
 8017c50:	08017bed 	.word	0x08017bed
 8017c54:	08017bed 	.word	0x08017bed
 8017c58:	08017d67 	.word	0x08017d67
 8017c5c:	680b      	ldr	r3, [r1, #0]
 8017c5e:	1d1a      	adds	r2, r3, #4
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	600a      	str	r2, [r1, #0]
 8017c64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017c68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	e0a3      	b.n	8017db8 <_printf_i+0x1f4>
 8017c70:	6825      	ldr	r5, [r4, #0]
 8017c72:	6808      	ldr	r0, [r1, #0]
 8017c74:	062e      	lsls	r6, r5, #24
 8017c76:	f100 0304 	add.w	r3, r0, #4
 8017c7a:	d50a      	bpl.n	8017c92 <_printf_i+0xce>
 8017c7c:	6805      	ldr	r5, [r0, #0]
 8017c7e:	600b      	str	r3, [r1, #0]
 8017c80:	2d00      	cmp	r5, #0
 8017c82:	da03      	bge.n	8017c8c <_printf_i+0xc8>
 8017c84:	232d      	movs	r3, #45	; 0x2d
 8017c86:	426d      	negs	r5, r5
 8017c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c8c:	485e      	ldr	r0, [pc, #376]	; (8017e08 <_printf_i+0x244>)
 8017c8e:	230a      	movs	r3, #10
 8017c90:	e019      	b.n	8017cc6 <_printf_i+0x102>
 8017c92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017c96:	6805      	ldr	r5, [r0, #0]
 8017c98:	600b      	str	r3, [r1, #0]
 8017c9a:	bf18      	it	ne
 8017c9c:	b22d      	sxthne	r5, r5
 8017c9e:	e7ef      	b.n	8017c80 <_printf_i+0xbc>
 8017ca0:	680b      	ldr	r3, [r1, #0]
 8017ca2:	6825      	ldr	r5, [r4, #0]
 8017ca4:	1d18      	adds	r0, r3, #4
 8017ca6:	6008      	str	r0, [r1, #0]
 8017ca8:	0628      	lsls	r0, r5, #24
 8017caa:	d501      	bpl.n	8017cb0 <_printf_i+0xec>
 8017cac:	681d      	ldr	r5, [r3, #0]
 8017cae:	e002      	b.n	8017cb6 <_printf_i+0xf2>
 8017cb0:	0669      	lsls	r1, r5, #25
 8017cb2:	d5fb      	bpl.n	8017cac <_printf_i+0xe8>
 8017cb4:	881d      	ldrh	r5, [r3, #0]
 8017cb6:	4854      	ldr	r0, [pc, #336]	; (8017e08 <_printf_i+0x244>)
 8017cb8:	2f6f      	cmp	r7, #111	; 0x6f
 8017cba:	bf0c      	ite	eq
 8017cbc:	2308      	moveq	r3, #8
 8017cbe:	230a      	movne	r3, #10
 8017cc0:	2100      	movs	r1, #0
 8017cc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017cc6:	6866      	ldr	r6, [r4, #4]
 8017cc8:	60a6      	str	r6, [r4, #8]
 8017cca:	2e00      	cmp	r6, #0
 8017ccc:	bfa2      	ittt	ge
 8017cce:	6821      	ldrge	r1, [r4, #0]
 8017cd0:	f021 0104 	bicge.w	r1, r1, #4
 8017cd4:	6021      	strge	r1, [r4, #0]
 8017cd6:	b90d      	cbnz	r5, 8017cdc <_printf_i+0x118>
 8017cd8:	2e00      	cmp	r6, #0
 8017cda:	d04d      	beq.n	8017d78 <_printf_i+0x1b4>
 8017cdc:	4616      	mov	r6, r2
 8017cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8017ce6:	5dc7      	ldrb	r7, [r0, r7]
 8017ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017cec:	462f      	mov	r7, r5
 8017cee:	42bb      	cmp	r3, r7
 8017cf0:	460d      	mov	r5, r1
 8017cf2:	d9f4      	bls.n	8017cde <_printf_i+0x11a>
 8017cf4:	2b08      	cmp	r3, #8
 8017cf6:	d10b      	bne.n	8017d10 <_printf_i+0x14c>
 8017cf8:	6823      	ldr	r3, [r4, #0]
 8017cfa:	07df      	lsls	r7, r3, #31
 8017cfc:	d508      	bpl.n	8017d10 <_printf_i+0x14c>
 8017cfe:	6923      	ldr	r3, [r4, #16]
 8017d00:	6861      	ldr	r1, [r4, #4]
 8017d02:	4299      	cmp	r1, r3
 8017d04:	bfde      	ittt	le
 8017d06:	2330      	movle	r3, #48	; 0x30
 8017d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017d10:	1b92      	subs	r2, r2, r6
 8017d12:	6122      	str	r2, [r4, #16]
 8017d14:	f8cd a000 	str.w	sl, [sp]
 8017d18:	464b      	mov	r3, r9
 8017d1a:	aa03      	add	r2, sp, #12
 8017d1c:	4621      	mov	r1, r4
 8017d1e:	4640      	mov	r0, r8
 8017d20:	f7ff fee2 	bl	8017ae8 <_printf_common>
 8017d24:	3001      	adds	r0, #1
 8017d26:	d14c      	bne.n	8017dc2 <_printf_i+0x1fe>
 8017d28:	f04f 30ff 	mov.w	r0, #4294967295
 8017d2c:	b004      	add	sp, #16
 8017d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d32:	4835      	ldr	r0, [pc, #212]	; (8017e08 <_printf_i+0x244>)
 8017d34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017d38:	6823      	ldr	r3, [r4, #0]
 8017d3a:	680e      	ldr	r6, [r1, #0]
 8017d3c:	061f      	lsls	r7, r3, #24
 8017d3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017d42:	600e      	str	r6, [r1, #0]
 8017d44:	d514      	bpl.n	8017d70 <_printf_i+0x1ac>
 8017d46:	07d9      	lsls	r1, r3, #31
 8017d48:	bf44      	itt	mi
 8017d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8017d4e:	6023      	strmi	r3, [r4, #0]
 8017d50:	b91d      	cbnz	r5, 8017d5a <_printf_i+0x196>
 8017d52:	6823      	ldr	r3, [r4, #0]
 8017d54:	f023 0320 	bic.w	r3, r3, #32
 8017d58:	6023      	str	r3, [r4, #0]
 8017d5a:	2310      	movs	r3, #16
 8017d5c:	e7b0      	b.n	8017cc0 <_printf_i+0xfc>
 8017d5e:	6823      	ldr	r3, [r4, #0]
 8017d60:	f043 0320 	orr.w	r3, r3, #32
 8017d64:	6023      	str	r3, [r4, #0]
 8017d66:	2378      	movs	r3, #120	; 0x78
 8017d68:	4828      	ldr	r0, [pc, #160]	; (8017e0c <_printf_i+0x248>)
 8017d6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d6e:	e7e3      	b.n	8017d38 <_printf_i+0x174>
 8017d70:	065e      	lsls	r6, r3, #25
 8017d72:	bf48      	it	mi
 8017d74:	b2ad      	uxthmi	r5, r5
 8017d76:	e7e6      	b.n	8017d46 <_printf_i+0x182>
 8017d78:	4616      	mov	r6, r2
 8017d7a:	e7bb      	b.n	8017cf4 <_printf_i+0x130>
 8017d7c:	680b      	ldr	r3, [r1, #0]
 8017d7e:	6826      	ldr	r6, [r4, #0]
 8017d80:	6960      	ldr	r0, [r4, #20]
 8017d82:	1d1d      	adds	r5, r3, #4
 8017d84:	600d      	str	r5, [r1, #0]
 8017d86:	0635      	lsls	r5, r6, #24
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	d501      	bpl.n	8017d90 <_printf_i+0x1cc>
 8017d8c:	6018      	str	r0, [r3, #0]
 8017d8e:	e002      	b.n	8017d96 <_printf_i+0x1d2>
 8017d90:	0671      	lsls	r1, r6, #25
 8017d92:	d5fb      	bpl.n	8017d8c <_printf_i+0x1c8>
 8017d94:	8018      	strh	r0, [r3, #0]
 8017d96:	2300      	movs	r3, #0
 8017d98:	6123      	str	r3, [r4, #16]
 8017d9a:	4616      	mov	r6, r2
 8017d9c:	e7ba      	b.n	8017d14 <_printf_i+0x150>
 8017d9e:	680b      	ldr	r3, [r1, #0]
 8017da0:	1d1a      	adds	r2, r3, #4
 8017da2:	600a      	str	r2, [r1, #0]
 8017da4:	681e      	ldr	r6, [r3, #0]
 8017da6:	6862      	ldr	r2, [r4, #4]
 8017da8:	2100      	movs	r1, #0
 8017daa:	4630      	mov	r0, r6
 8017dac:	f7e8 fa18 	bl	80001e0 <memchr>
 8017db0:	b108      	cbz	r0, 8017db6 <_printf_i+0x1f2>
 8017db2:	1b80      	subs	r0, r0, r6
 8017db4:	6060      	str	r0, [r4, #4]
 8017db6:	6863      	ldr	r3, [r4, #4]
 8017db8:	6123      	str	r3, [r4, #16]
 8017dba:	2300      	movs	r3, #0
 8017dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017dc0:	e7a8      	b.n	8017d14 <_printf_i+0x150>
 8017dc2:	6923      	ldr	r3, [r4, #16]
 8017dc4:	4632      	mov	r2, r6
 8017dc6:	4649      	mov	r1, r9
 8017dc8:	4640      	mov	r0, r8
 8017dca:	47d0      	blx	sl
 8017dcc:	3001      	adds	r0, #1
 8017dce:	d0ab      	beq.n	8017d28 <_printf_i+0x164>
 8017dd0:	6823      	ldr	r3, [r4, #0]
 8017dd2:	079b      	lsls	r3, r3, #30
 8017dd4:	d413      	bmi.n	8017dfe <_printf_i+0x23a>
 8017dd6:	68e0      	ldr	r0, [r4, #12]
 8017dd8:	9b03      	ldr	r3, [sp, #12]
 8017dda:	4298      	cmp	r0, r3
 8017ddc:	bfb8      	it	lt
 8017dde:	4618      	movlt	r0, r3
 8017de0:	e7a4      	b.n	8017d2c <_printf_i+0x168>
 8017de2:	2301      	movs	r3, #1
 8017de4:	4632      	mov	r2, r6
 8017de6:	4649      	mov	r1, r9
 8017de8:	4640      	mov	r0, r8
 8017dea:	47d0      	blx	sl
 8017dec:	3001      	adds	r0, #1
 8017dee:	d09b      	beq.n	8017d28 <_printf_i+0x164>
 8017df0:	3501      	adds	r5, #1
 8017df2:	68e3      	ldr	r3, [r4, #12]
 8017df4:	9903      	ldr	r1, [sp, #12]
 8017df6:	1a5b      	subs	r3, r3, r1
 8017df8:	42ab      	cmp	r3, r5
 8017dfa:	dcf2      	bgt.n	8017de2 <_printf_i+0x21e>
 8017dfc:	e7eb      	b.n	8017dd6 <_printf_i+0x212>
 8017dfe:	2500      	movs	r5, #0
 8017e00:	f104 0619 	add.w	r6, r4, #25
 8017e04:	e7f5      	b.n	8017df2 <_printf_i+0x22e>
 8017e06:	bf00      	nop
 8017e08:	0801a816 	.word	0x0801a816
 8017e0c:	0801a827 	.word	0x0801a827

08017e10 <iprintf>:
 8017e10:	b40f      	push	{r0, r1, r2, r3}
 8017e12:	4b0a      	ldr	r3, [pc, #40]	; (8017e3c <iprintf+0x2c>)
 8017e14:	b513      	push	{r0, r1, r4, lr}
 8017e16:	681c      	ldr	r4, [r3, #0]
 8017e18:	b124      	cbz	r4, 8017e24 <iprintf+0x14>
 8017e1a:	69a3      	ldr	r3, [r4, #24]
 8017e1c:	b913      	cbnz	r3, 8017e24 <iprintf+0x14>
 8017e1e:	4620      	mov	r0, r4
 8017e20:	f000 ff66 	bl	8018cf0 <__sinit>
 8017e24:	ab05      	add	r3, sp, #20
 8017e26:	9a04      	ldr	r2, [sp, #16]
 8017e28:	68a1      	ldr	r1, [r4, #8]
 8017e2a:	9301      	str	r3, [sp, #4]
 8017e2c:	4620      	mov	r0, r4
 8017e2e:	f001 fd23 	bl	8019878 <_vfiprintf_r>
 8017e32:	b002      	add	sp, #8
 8017e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e38:	b004      	add	sp, #16
 8017e3a:	4770      	bx	lr
 8017e3c:	200000f0 	.word	0x200000f0

08017e40 <_sbrk_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	4d06      	ldr	r5, [pc, #24]	; (8017e5c <_sbrk_r+0x1c>)
 8017e44:	2300      	movs	r3, #0
 8017e46:	4604      	mov	r4, r0
 8017e48:	4608      	mov	r0, r1
 8017e4a:	602b      	str	r3, [r5, #0]
 8017e4c:	f7ea fc0c 	bl	8002668 <_sbrk>
 8017e50:	1c43      	adds	r3, r0, #1
 8017e52:	d102      	bne.n	8017e5a <_sbrk_r+0x1a>
 8017e54:	682b      	ldr	r3, [r5, #0]
 8017e56:	b103      	cbz	r3, 8017e5a <_sbrk_r+0x1a>
 8017e58:	6023      	str	r3, [r4, #0]
 8017e5a:	bd38      	pop	{r3, r4, r5, pc}
 8017e5c:	20001a04 	.word	0x20001a04

08017e60 <_raise_r>:
 8017e60:	291f      	cmp	r1, #31
 8017e62:	b538      	push	{r3, r4, r5, lr}
 8017e64:	4604      	mov	r4, r0
 8017e66:	460d      	mov	r5, r1
 8017e68:	d904      	bls.n	8017e74 <_raise_r+0x14>
 8017e6a:	2316      	movs	r3, #22
 8017e6c:	6003      	str	r3, [r0, #0]
 8017e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017e72:	bd38      	pop	{r3, r4, r5, pc}
 8017e74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e76:	b112      	cbz	r2, 8017e7e <_raise_r+0x1e>
 8017e78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e7c:	b94b      	cbnz	r3, 8017e92 <_raise_r+0x32>
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f000 f830 	bl	8017ee4 <_getpid_r>
 8017e84:	462a      	mov	r2, r5
 8017e86:	4601      	mov	r1, r0
 8017e88:	4620      	mov	r0, r4
 8017e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e8e:	f000 b817 	b.w	8017ec0 <_kill_r>
 8017e92:	2b01      	cmp	r3, #1
 8017e94:	d00a      	beq.n	8017eac <_raise_r+0x4c>
 8017e96:	1c59      	adds	r1, r3, #1
 8017e98:	d103      	bne.n	8017ea2 <_raise_r+0x42>
 8017e9a:	2316      	movs	r3, #22
 8017e9c:	6003      	str	r3, [r0, #0]
 8017e9e:	2001      	movs	r0, #1
 8017ea0:	e7e7      	b.n	8017e72 <_raise_r+0x12>
 8017ea2:	2400      	movs	r4, #0
 8017ea4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ea8:	4628      	mov	r0, r5
 8017eaa:	4798      	blx	r3
 8017eac:	2000      	movs	r0, #0
 8017eae:	e7e0      	b.n	8017e72 <_raise_r+0x12>

08017eb0 <raise>:
 8017eb0:	4b02      	ldr	r3, [pc, #8]	; (8017ebc <raise+0xc>)
 8017eb2:	4601      	mov	r1, r0
 8017eb4:	6818      	ldr	r0, [r3, #0]
 8017eb6:	f7ff bfd3 	b.w	8017e60 <_raise_r>
 8017eba:	bf00      	nop
 8017ebc:	200000f0 	.word	0x200000f0

08017ec0 <_kill_r>:
 8017ec0:	b538      	push	{r3, r4, r5, lr}
 8017ec2:	4d07      	ldr	r5, [pc, #28]	; (8017ee0 <_kill_r+0x20>)
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	4604      	mov	r4, r0
 8017ec8:	4608      	mov	r0, r1
 8017eca:	4611      	mov	r1, r2
 8017ecc:	602b      	str	r3, [r5, #0]
 8017ece:	f7ea fb43 	bl	8002558 <_kill>
 8017ed2:	1c43      	adds	r3, r0, #1
 8017ed4:	d102      	bne.n	8017edc <_kill_r+0x1c>
 8017ed6:	682b      	ldr	r3, [r5, #0]
 8017ed8:	b103      	cbz	r3, 8017edc <_kill_r+0x1c>
 8017eda:	6023      	str	r3, [r4, #0]
 8017edc:	bd38      	pop	{r3, r4, r5, pc}
 8017ede:	bf00      	nop
 8017ee0:	20001a04 	.word	0x20001a04

08017ee4 <_getpid_r>:
 8017ee4:	f7ea bb30 	b.w	8002548 <_getpid>

08017ee8 <sniprintf>:
 8017ee8:	b40c      	push	{r2, r3}
 8017eea:	b530      	push	{r4, r5, lr}
 8017eec:	4b17      	ldr	r3, [pc, #92]	; (8017f4c <sniprintf+0x64>)
 8017eee:	1e0c      	subs	r4, r1, #0
 8017ef0:	681d      	ldr	r5, [r3, #0]
 8017ef2:	b09d      	sub	sp, #116	; 0x74
 8017ef4:	da08      	bge.n	8017f08 <sniprintf+0x20>
 8017ef6:	238b      	movs	r3, #139	; 0x8b
 8017ef8:	602b      	str	r3, [r5, #0]
 8017efa:	f04f 30ff 	mov.w	r0, #4294967295
 8017efe:	b01d      	add	sp, #116	; 0x74
 8017f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f04:	b002      	add	sp, #8
 8017f06:	4770      	bx	lr
 8017f08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017f0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017f10:	bf14      	ite	ne
 8017f12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017f16:	4623      	moveq	r3, r4
 8017f18:	9304      	str	r3, [sp, #16]
 8017f1a:	9307      	str	r3, [sp, #28]
 8017f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f20:	9002      	str	r0, [sp, #8]
 8017f22:	9006      	str	r0, [sp, #24]
 8017f24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017f28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f2a:	ab21      	add	r3, sp, #132	; 0x84
 8017f2c:	a902      	add	r1, sp, #8
 8017f2e:	4628      	mov	r0, r5
 8017f30:	9301      	str	r3, [sp, #4]
 8017f32:	f001 fb77 	bl	8019624 <_svfiprintf_r>
 8017f36:	1c43      	adds	r3, r0, #1
 8017f38:	bfbc      	itt	lt
 8017f3a:	238b      	movlt	r3, #139	; 0x8b
 8017f3c:	602b      	strlt	r3, [r5, #0]
 8017f3e:	2c00      	cmp	r4, #0
 8017f40:	d0dd      	beq.n	8017efe <sniprintf+0x16>
 8017f42:	9b02      	ldr	r3, [sp, #8]
 8017f44:	2200      	movs	r2, #0
 8017f46:	701a      	strb	r2, [r3, #0]
 8017f48:	e7d9      	b.n	8017efe <sniprintf+0x16>
 8017f4a:	bf00      	nop
 8017f4c:	200000f0 	.word	0x200000f0

08017f50 <quorem>:
 8017f50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f54:	6903      	ldr	r3, [r0, #16]
 8017f56:	690c      	ldr	r4, [r1, #16]
 8017f58:	42a3      	cmp	r3, r4
 8017f5a:	4607      	mov	r7, r0
 8017f5c:	f2c0 8081 	blt.w	8018062 <quorem+0x112>
 8017f60:	3c01      	subs	r4, #1
 8017f62:	f101 0814 	add.w	r8, r1, #20
 8017f66:	f100 0514 	add.w	r5, r0, #20
 8017f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017f6e:	9301      	str	r3, [sp, #4]
 8017f70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017f74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017f78:	3301      	adds	r3, #1
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017f80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8017f88:	d331      	bcc.n	8017fee <quorem+0x9e>
 8017f8a:	f04f 0e00 	mov.w	lr, #0
 8017f8e:	4640      	mov	r0, r8
 8017f90:	46ac      	mov	ip, r5
 8017f92:	46f2      	mov	sl, lr
 8017f94:	f850 2b04 	ldr.w	r2, [r0], #4
 8017f98:	b293      	uxth	r3, r2
 8017f9a:	fb06 e303 	mla	r3, r6, r3, lr
 8017f9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017fa2:	b29b      	uxth	r3, r3
 8017fa4:	ebaa 0303 	sub.w	r3, sl, r3
 8017fa8:	0c12      	lsrs	r2, r2, #16
 8017faa:	f8dc a000 	ldr.w	sl, [ip]
 8017fae:	fb06 e202 	mla	r2, r6, r2, lr
 8017fb2:	fa13 f38a 	uxtah	r3, r3, sl
 8017fb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017fba:	fa1f fa82 	uxth.w	sl, r2
 8017fbe:	f8dc 2000 	ldr.w	r2, [ip]
 8017fc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017fc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017fca:	b29b      	uxth	r3, r3
 8017fcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017fd0:	4581      	cmp	r9, r0
 8017fd2:	f84c 3b04 	str.w	r3, [ip], #4
 8017fd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017fda:	d2db      	bcs.n	8017f94 <quorem+0x44>
 8017fdc:	f855 300b 	ldr.w	r3, [r5, fp]
 8017fe0:	b92b      	cbnz	r3, 8017fee <quorem+0x9e>
 8017fe2:	9b01      	ldr	r3, [sp, #4]
 8017fe4:	3b04      	subs	r3, #4
 8017fe6:	429d      	cmp	r5, r3
 8017fe8:	461a      	mov	r2, r3
 8017fea:	d32e      	bcc.n	801804a <quorem+0xfa>
 8017fec:	613c      	str	r4, [r7, #16]
 8017fee:	4638      	mov	r0, r7
 8017ff0:	f001 f9ae 	bl	8019350 <__mcmp>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	db24      	blt.n	8018042 <quorem+0xf2>
 8017ff8:	3601      	adds	r6, #1
 8017ffa:	4628      	mov	r0, r5
 8017ffc:	f04f 0c00 	mov.w	ip, #0
 8018000:	f858 2b04 	ldr.w	r2, [r8], #4
 8018004:	f8d0 e000 	ldr.w	lr, [r0]
 8018008:	b293      	uxth	r3, r2
 801800a:	ebac 0303 	sub.w	r3, ip, r3
 801800e:	0c12      	lsrs	r2, r2, #16
 8018010:	fa13 f38e 	uxtah	r3, r3, lr
 8018014:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801801c:	b29b      	uxth	r3, r3
 801801e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018022:	45c1      	cmp	r9, r8
 8018024:	f840 3b04 	str.w	r3, [r0], #4
 8018028:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801802c:	d2e8      	bcs.n	8018000 <quorem+0xb0>
 801802e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018036:	b922      	cbnz	r2, 8018042 <quorem+0xf2>
 8018038:	3b04      	subs	r3, #4
 801803a:	429d      	cmp	r5, r3
 801803c:	461a      	mov	r2, r3
 801803e:	d30a      	bcc.n	8018056 <quorem+0x106>
 8018040:	613c      	str	r4, [r7, #16]
 8018042:	4630      	mov	r0, r6
 8018044:	b003      	add	sp, #12
 8018046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801804a:	6812      	ldr	r2, [r2, #0]
 801804c:	3b04      	subs	r3, #4
 801804e:	2a00      	cmp	r2, #0
 8018050:	d1cc      	bne.n	8017fec <quorem+0x9c>
 8018052:	3c01      	subs	r4, #1
 8018054:	e7c7      	b.n	8017fe6 <quorem+0x96>
 8018056:	6812      	ldr	r2, [r2, #0]
 8018058:	3b04      	subs	r3, #4
 801805a:	2a00      	cmp	r2, #0
 801805c:	d1f0      	bne.n	8018040 <quorem+0xf0>
 801805e:	3c01      	subs	r4, #1
 8018060:	e7eb      	b.n	801803a <quorem+0xea>
 8018062:	2000      	movs	r0, #0
 8018064:	e7ee      	b.n	8018044 <quorem+0xf4>
	...

08018068 <_dtoa_r>:
 8018068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801806c:	ed2d 8b02 	vpush	{d8}
 8018070:	ec57 6b10 	vmov	r6, r7, d0
 8018074:	b095      	sub	sp, #84	; 0x54
 8018076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018078:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801807c:	9105      	str	r1, [sp, #20]
 801807e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018082:	4604      	mov	r4, r0
 8018084:	9209      	str	r2, [sp, #36]	; 0x24
 8018086:	930f      	str	r3, [sp, #60]	; 0x3c
 8018088:	b975      	cbnz	r5, 80180a8 <_dtoa_r+0x40>
 801808a:	2010      	movs	r0, #16
 801808c:	f7ff f98e 	bl	80173ac <malloc>
 8018090:	4602      	mov	r2, r0
 8018092:	6260      	str	r0, [r4, #36]	; 0x24
 8018094:	b920      	cbnz	r0, 80180a0 <_dtoa_r+0x38>
 8018096:	4bb2      	ldr	r3, [pc, #712]	; (8018360 <_dtoa_r+0x2f8>)
 8018098:	21ea      	movs	r1, #234	; 0xea
 801809a:	48b2      	ldr	r0, [pc, #712]	; (8018364 <_dtoa_r+0x2fc>)
 801809c:	f001 fe32 	bl	8019d04 <__assert_func>
 80180a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80180a4:	6005      	str	r5, [r0, #0]
 80180a6:	60c5      	str	r5, [r0, #12]
 80180a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180aa:	6819      	ldr	r1, [r3, #0]
 80180ac:	b151      	cbz	r1, 80180c4 <_dtoa_r+0x5c>
 80180ae:	685a      	ldr	r2, [r3, #4]
 80180b0:	604a      	str	r2, [r1, #4]
 80180b2:	2301      	movs	r3, #1
 80180b4:	4093      	lsls	r3, r2
 80180b6:	608b      	str	r3, [r1, #8]
 80180b8:	4620      	mov	r0, r4
 80180ba:	f000 ff0b 	bl	8018ed4 <_Bfree>
 80180be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80180c0:	2200      	movs	r2, #0
 80180c2:	601a      	str	r2, [r3, #0]
 80180c4:	1e3b      	subs	r3, r7, #0
 80180c6:	bfb9      	ittee	lt
 80180c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80180cc:	9303      	strlt	r3, [sp, #12]
 80180ce:	2300      	movge	r3, #0
 80180d0:	f8c8 3000 	strge.w	r3, [r8]
 80180d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80180d8:	4ba3      	ldr	r3, [pc, #652]	; (8018368 <_dtoa_r+0x300>)
 80180da:	bfbc      	itt	lt
 80180dc:	2201      	movlt	r2, #1
 80180de:	f8c8 2000 	strlt.w	r2, [r8]
 80180e2:	ea33 0309 	bics.w	r3, r3, r9
 80180e6:	d11b      	bne.n	8018120 <_dtoa_r+0xb8>
 80180e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80180ee:	6013      	str	r3, [r2, #0]
 80180f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80180f4:	4333      	orrs	r3, r6
 80180f6:	f000 857a 	beq.w	8018bee <_dtoa_r+0xb86>
 80180fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80180fc:	b963      	cbnz	r3, 8018118 <_dtoa_r+0xb0>
 80180fe:	4b9b      	ldr	r3, [pc, #620]	; (801836c <_dtoa_r+0x304>)
 8018100:	e024      	b.n	801814c <_dtoa_r+0xe4>
 8018102:	4b9b      	ldr	r3, [pc, #620]	; (8018370 <_dtoa_r+0x308>)
 8018104:	9300      	str	r3, [sp, #0]
 8018106:	3308      	adds	r3, #8
 8018108:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801810a:	6013      	str	r3, [r2, #0]
 801810c:	9800      	ldr	r0, [sp, #0]
 801810e:	b015      	add	sp, #84	; 0x54
 8018110:	ecbd 8b02 	vpop	{d8}
 8018114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018118:	4b94      	ldr	r3, [pc, #592]	; (801836c <_dtoa_r+0x304>)
 801811a:	9300      	str	r3, [sp, #0]
 801811c:	3303      	adds	r3, #3
 801811e:	e7f3      	b.n	8018108 <_dtoa_r+0xa0>
 8018120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018124:	2200      	movs	r2, #0
 8018126:	ec51 0b17 	vmov	r0, r1, d7
 801812a:	2300      	movs	r3, #0
 801812c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018130:	f7e8 fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8018134:	4680      	mov	r8, r0
 8018136:	b158      	cbz	r0, 8018150 <_dtoa_r+0xe8>
 8018138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801813a:	2301      	movs	r3, #1
 801813c:	6013      	str	r3, [r2, #0]
 801813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018140:	2b00      	cmp	r3, #0
 8018142:	f000 8551 	beq.w	8018be8 <_dtoa_r+0xb80>
 8018146:	488b      	ldr	r0, [pc, #556]	; (8018374 <_dtoa_r+0x30c>)
 8018148:	6018      	str	r0, [r3, #0]
 801814a:	1e43      	subs	r3, r0, #1
 801814c:	9300      	str	r3, [sp, #0]
 801814e:	e7dd      	b.n	801810c <_dtoa_r+0xa4>
 8018150:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018154:	aa12      	add	r2, sp, #72	; 0x48
 8018156:	a913      	add	r1, sp, #76	; 0x4c
 8018158:	4620      	mov	r0, r4
 801815a:	f001 f99d 	bl	8019498 <__d2b>
 801815e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018162:	4683      	mov	fp, r0
 8018164:	2d00      	cmp	r5, #0
 8018166:	d07c      	beq.n	8018262 <_dtoa_r+0x1fa>
 8018168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801816a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801816e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018172:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018176:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801817a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801817e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018182:	4b7d      	ldr	r3, [pc, #500]	; (8018378 <_dtoa_r+0x310>)
 8018184:	2200      	movs	r2, #0
 8018186:	4630      	mov	r0, r6
 8018188:	4639      	mov	r1, r7
 801818a:	f7e8 f87d 	bl	8000288 <__aeabi_dsub>
 801818e:	a36e      	add	r3, pc, #440	; (adr r3, 8018348 <_dtoa_r+0x2e0>)
 8018190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018194:	f7e8 fa30 	bl	80005f8 <__aeabi_dmul>
 8018198:	a36d      	add	r3, pc, #436	; (adr r3, 8018350 <_dtoa_r+0x2e8>)
 801819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801819e:	f7e8 f875 	bl	800028c <__adddf3>
 80181a2:	4606      	mov	r6, r0
 80181a4:	4628      	mov	r0, r5
 80181a6:	460f      	mov	r7, r1
 80181a8:	f7e8 f9bc 	bl	8000524 <__aeabi_i2d>
 80181ac:	a36a      	add	r3, pc, #424	; (adr r3, 8018358 <_dtoa_r+0x2f0>)
 80181ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181b2:	f7e8 fa21 	bl	80005f8 <__aeabi_dmul>
 80181b6:	4602      	mov	r2, r0
 80181b8:	460b      	mov	r3, r1
 80181ba:	4630      	mov	r0, r6
 80181bc:	4639      	mov	r1, r7
 80181be:	f7e8 f865 	bl	800028c <__adddf3>
 80181c2:	4606      	mov	r6, r0
 80181c4:	460f      	mov	r7, r1
 80181c6:	f7e8 fcc7 	bl	8000b58 <__aeabi_d2iz>
 80181ca:	2200      	movs	r2, #0
 80181cc:	4682      	mov	sl, r0
 80181ce:	2300      	movs	r3, #0
 80181d0:	4630      	mov	r0, r6
 80181d2:	4639      	mov	r1, r7
 80181d4:	f7e8 fc82 	bl	8000adc <__aeabi_dcmplt>
 80181d8:	b148      	cbz	r0, 80181ee <_dtoa_r+0x186>
 80181da:	4650      	mov	r0, sl
 80181dc:	f7e8 f9a2 	bl	8000524 <__aeabi_i2d>
 80181e0:	4632      	mov	r2, r6
 80181e2:	463b      	mov	r3, r7
 80181e4:	f7e8 fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80181e8:	b908      	cbnz	r0, 80181ee <_dtoa_r+0x186>
 80181ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80181ee:	f1ba 0f16 	cmp.w	sl, #22
 80181f2:	d854      	bhi.n	801829e <_dtoa_r+0x236>
 80181f4:	4b61      	ldr	r3, [pc, #388]	; (801837c <_dtoa_r+0x314>)
 80181f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80181fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018202:	f7e8 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8018206:	2800      	cmp	r0, #0
 8018208:	d04b      	beq.n	80182a2 <_dtoa_r+0x23a>
 801820a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801820e:	2300      	movs	r3, #0
 8018210:	930e      	str	r3, [sp, #56]	; 0x38
 8018212:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018214:	1b5d      	subs	r5, r3, r5
 8018216:	1e6b      	subs	r3, r5, #1
 8018218:	9304      	str	r3, [sp, #16]
 801821a:	bf43      	ittte	mi
 801821c:	2300      	movmi	r3, #0
 801821e:	f1c5 0801 	rsbmi	r8, r5, #1
 8018222:	9304      	strmi	r3, [sp, #16]
 8018224:	f04f 0800 	movpl.w	r8, #0
 8018228:	f1ba 0f00 	cmp.w	sl, #0
 801822c:	db3b      	blt.n	80182a6 <_dtoa_r+0x23e>
 801822e:	9b04      	ldr	r3, [sp, #16]
 8018230:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018234:	4453      	add	r3, sl
 8018236:	9304      	str	r3, [sp, #16]
 8018238:	2300      	movs	r3, #0
 801823a:	9306      	str	r3, [sp, #24]
 801823c:	9b05      	ldr	r3, [sp, #20]
 801823e:	2b09      	cmp	r3, #9
 8018240:	d869      	bhi.n	8018316 <_dtoa_r+0x2ae>
 8018242:	2b05      	cmp	r3, #5
 8018244:	bfc4      	itt	gt
 8018246:	3b04      	subgt	r3, #4
 8018248:	9305      	strgt	r3, [sp, #20]
 801824a:	9b05      	ldr	r3, [sp, #20]
 801824c:	f1a3 0302 	sub.w	r3, r3, #2
 8018250:	bfcc      	ite	gt
 8018252:	2500      	movgt	r5, #0
 8018254:	2501      	movle	r5, #1
 8018256:	2b03      	cmp	r3, #3
 8018258:	d869      	bhi.n	801832e <_dtoa_r+0x2c6>
 801825a:	e8df f003 	tbb	[pc, r3]
 801825e:	4e2c      	.short	0x4e2c
 8018260:	5a4c      	.short	0x5a4c
 8018262:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018266:	441d      	add	r5, r3
 8018268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801826c:	2b20      	cmp	r3, #32
 801826e:	bfc1      	itttt	gt
 8018270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018274:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018278:	fa09 f303 	lslgt.w	r3, r9, r3
 801827c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018280:	bfda      	itte	le
 8018282:	f1c3 0320 	rsble	r3, r3, #32
 8018286:	fa06 f003 	lslle.w	r0, r6, r3
 801828a:	4318      	orrgt	r0, r3
 801828c:	f7e8 f93a 	bl	8000504 <__aeabi_ui2d>
 8018290:	2301      	movs	r3, #1
 8018292:	4606      	mov	r6, r0
 8018294:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018298:	3d01      	subs	r5, #1
 801829a:	9310      	str	r3, [sp, #64]	; 0x40
 801829c:	e771      	b.n	8018182 <_dtoa_r+0x11a>
 801829e:	2301      	movs	r3, #1
 80182a0:	e7b6      	b.n	8018210 <_dtoa_r+0x1a8>
 80182a2:	900e      	str	r0, [sp, #56]	; 0x38
 80182a4:	e7b5      	b.n	8018212 <_dtoa_r+0x1aa>
 80182a6:	f1ca 0300 	rsb	r3, sl, #0
 80182aa:	9306      	str	r3, [sp, #24]
 80182ac:	2300      	movs	r3, #0
 80182ae:	eba8 080a 	sub.w	r8, r8, sl
 80182b2:	930d      	str	r3, [sp, #52]	; 0x34
 80182b4:	e7c2      	b.n	801823c <_dtoa_r+0x1d4>
 80182b6:	2300      	movs	r3, #0
 80182b8:	9308      	str	r3, [sp, #32]
 80182ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182bc:	2b00      	cmp	r3, #0
 80182be:	dc39      	bgt.n	8018334 <_dtoa_r+0x2cc>
 80182c0:	f04f 0901 	mov.w	r9, #1
 80182c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80182c8:	464b      	mov	r3, r9
 80182ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80182ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80182d0:	2200      	movs	r2, #0
 80182d2:	6042      	str	r2, [r0, #4]
 80182d4:	2204      	movs	r2, #4
 80182d6:	f102 0614 	add.w	r6, r2, #20
 80182da:	429e      	cmp	r6, r3
 80182dc:	6841      	ldr	r1, [r0, #4]
 80182de:	d92f      	bls.n	8018340 <_dtoa_r+0x2d8>
 80182e0:	4620      	mov	r0, r4
 80182e2:	f000 fdb7 	bl	8018e54 <_Balloc>
 80182e6:	9000      	str	r0, [sp, #0]
 80182e8:	2800      	cmp	r0, #0
 80182ea:	d14b      	bne.n	8018384 <_dtoa_r+0x31c>
 80182ec:	4b24      	ldr	r3, [pc, #144]	; (8018380 <_dtoa_r+0x318>)
 80182ee:	4602      	mov	r2, r0
 80182f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80182f4:	e6d1      	b.n	801809a <_dtoa_r+0x32>
 80182f6:	2301      	movs	r3, #1
 80182f8:	e7de      	b.n	80182b8 <_dtoa_r+0x250>
 80182fa:	2300      	movs	r3, #0
 80182fc:	9308      	str	r3, [sp, #32]
 80182fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018300:	eb0a 0903 	add.w	r9, sl, r3
 8018304:	f109 0301 	add.w	r3, r9, #1
 8018308:	2b01      	cmp	r3, #1
 801830a:	9301      	str	r3, [sp, #4]
 801830c:	bfb8      	it	lt
 801830e:	2301      	movlt	r3, #1
 8018310:	e7dd      	b.n	80182ce <_dtoa_r+0x266>
 8018312:	2301      	movs	r3, #1
 8018314:	e7f2      	b.n	80182fc <_dtoa_r+0x294>
 8018316:	2501      	movs	r5, #1
 8018318:	2300      	movs	r3, #0
 801831a:	9305      	str	r3, [sp, #20]
 801831c:	9508      	str	r5, [sp, #32]
 801831e:	f04f 39ff 	mov.w	r9, #4294967295
 8018322:	2200      	movs	r2, #0
 8018324:	f8cd 9004 	str.w	r9, [sp, #4]
 8018328:	2312      	movs	r3, #18
 801832a:	9209      	str	r2, [sp, #36]	; 0x24
 801832c:	e7cf      	b.n	80182ce <_dtoa_r+0x266>
 801832e:	2301      	movs	r3, #1
 8018330:	9308      	str	r3, [sp, #32]
 8018332:	e7f4      	b.n	801831e <_dtoa_r+0x2b6>
 8018334:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018338:	f8cd 9004 	str.w	r9, [sp, #4]
 801833c:	464b      	mov	r3, r9
 801833e:	e7c6      	b.n	80182ce <_dtoa_r+0x266>
 8018340:	3101      	adds	r1, #1
 8018342:	6041      	str	r1, [r0, #4]
 8018344:	0052      	lsls	r2, r2, #1
 8018346:	e7c6      	b.n	80182d6 <_dtoa_r+0x26e>
 8018348:	636f4361 	.word	0x636f4361
 801834c:	3fd287a7 	.word	0x3fd287a7
 8018350:	8b60c8b3 	.word	0x8b60c8b3
 8018354:	3fc68a28 	.word	0x3fc68a28
 8018358:	509f79fb 	.word	0x509f79fb
 801835c:	3fd34413 	.word	0x3fd34413
 8018360:	0801a845 	.word	0x0801a845
 8018364:	0801a85c 	.word	0x0801a85c
 8018368:	7ff00000 	.word	0x7ff00000
 801836c:	0801a841 	.word	0x0801a841
 8018370:	0801a838 	.word	0x0801a838
 8018374:	0801a815 	.word	0x0801a815
 8018378:	3ff80000 	.word	0x3ff80000
 801837c:	0801a9b8 	.word	0x0801a9b8
 8018380:	0801a8bb 	.word	0x0801a8bb
 8018384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018386:	9a00      	ldr	r2, [sp, #0]
 8018388:	601a      	str	r2, [r3, #0]
 801838a:	9b01      	ldr	r3, [sp, #4]
 801838c:	2b0e      	cmp	r3, #14
 801838e:	f200 80ad 	bhi.w	80184ec <_dtoa_r+0x484>
 8018392:	2d00      	cmp	r5, #0
 8018394:	f000 80aa 	beq.w	80184ec <_dtoa_r+0x484>
 8018398:	f1ba 0f00 	cmp.w	sl, #0
 801839c:	dd36      	ble.n	801840c <_dtoa_r+0x3a4>
 801839e:	4ac3      	ldr	r2, [pc, #780]	; (80186ac <_dtoa_r+0x644>)
 80183a0:	f00a 030f 	and.w	r3, sl, #15
 80183a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80183a8:	ed93 7b00 	vldr	d7, [r3]
 80183ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80183b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80183b4:	eeb0 8a47 	vmov.f32	s16, s14
 80183b8:	eef0 8a67 	vmov.f32	s17, s15
 80183bc:	d016      	beq.n	80183ec <_dtoa_r+0x384>
 80183be:	4bbc      	ldr	r3, [pc, #752]	; (80186b0 <_dtoa_r+0x648>)
 80183c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80183c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80183c8:	f7e8 fa40 	bl	800084c <__aeabi_ddiv>
 80183cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183d0:	f007 070f 	and.w	r7, r7, #15
 80183d4:	2503      	movs	r5, #3
 80183d6:	4eb6      	ldr	r6, [pc, #728]	; (80186b0 <_dtoa_r+0x648>)
 80183d8:	b957      	cbnz	r7, 80183f0 <_dtoa_r+0x388>
 80183da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80183de:	ec53 2b18 	vmov	r2, r3, d8
 80183e2:	f7e8 fa33 	bl	800084c <__aeabi_ddiv>
 80183e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80183ea:	e029      	b.n	8018440 <_dtoa_r+0x3d8>
 80183ec:	2502      	movs	r5, #2
 80183ee:	e7f2      	b.n	80183d6 <_dtoa_r+0x36e>
 80183f0:	07f9      	lsls	r1, r7, #31
 80183f2:	d508      	bpl.n	8018406 <_dtoa_r+0x39e>
 80183f4:	ec51 0b18 	vmov	r0, r1, d8
 80183f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80183fc:	f7e8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8018400:	ec41 0b18 	vmov	d8, r0, r1
 8018404:	3501      	adds	r5, #1
 8018406:	107f      	asrs	r7, r7, #1
 8018408:	3608      	adds	r6, #8
 801840a:	e7e5      	b.n	80183d8 <_dtoa_r+0x370>
 801840c:	f000 80a6 	beq.w	801855c <_dtoa_r+0x4f4>
 8018410:	f1ca 0600 	rsb	r6, sl, #0
 8018414:	4ba5      	ldr	r3, [pc, #660]	; (80186ac <_dtoa_r+0x644>)
 8018416:	4fa6      	ldr	r7, [pc, #664]	; (80186b0 <_dtoa_r+0x648>)
 8018418:	f006 020f 	and.w	r2, r6, #15
 801841c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018424:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018428:	f7e8 f8e6 	bl	80005f8 <__aeabi_dmul>
 801842c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018430:	1136      	asrs	r6, r6, #4
 8018432:	2300      	movs	r3, #0
 8018434:	2502      	movs	r5, #2
 8018436:	2e00      	cmp	r6, #0
 8018438:	f040 8085 	bne.w	8018546 <_dtoa_r+0x4de>
 801843c:	2b00      	cmp	r3, #0
 801843e:	d1d2      	bne.n	80183e6 <_dtoa_r+0x37e>
 8018440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018442:	2b00      	cmp	r3, #0
 8018444:	f000 808c 	beq.w	8018560 <_dtoa_r+0x4f8>
 8018448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801844c:	4b99      	ldr	r3, [pc, #612]	; (80186b4 <_dtoa_r+0x64c>)
 801844e:	2200      	movs	r2, #0
 8018450:	4630      	mov	r0, r6
 8018452:	4639      	mov	r1, r7
 8018454:	f7e8 fb42 	bl	8000adc <__aeabi_dcmplt>
 8018458:	2800      	cmp	r0, #0
 801845a:	f000 8081 	beq.w	8018560 <_dtoa_r+0x4f8>
 801845e:	9b01      	ldr	r3, [sp, #4]
 8018460:	2b00      	cmp	r3, #0
 8018462:	d07d      	beq.n	8018560 <_dtoa_r+0x4f8>
 8018464:	f1b9 0f00 	cmp.w	r9, #0
 8018468:	dd3c      	ble.n	80184e4 <_dtoa_r+0x47c>
 801846a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801846e:	9307      	str	r3, [sp, #28]
 8018470:	2200      	movs	r2, #0
 8018472:	4b91      	ldr	r3, [pc, #580]	; (80186b8 <_dtoa_r+0x650>)
 8018474:	4630      	mov	r0, r6
 8018476:	4639      	mov	r1, r7
 8018478:	f7e8 f8be 	bl	80005f8 <__aeabi_dmul>
 801847c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018480:	3501      	adds	r5, #1
 8018482:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018486:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801848a:	4628      	mov	r0, r5
 801848c:	f7e8 f84a 	bl	8000524 <__aeabi_i2d>
 8018490:	4632      	mov	r2, r6
 8018492:	463b      	mov	r3, r7
 8018494:	f7e8 f8b0 	bl	80005f8 <__aeabi_dmul>
 8018498:	4b88      	ldr	r3, [pc, #544]	; (80186bc <_dtoa_r+0x654>)
 801849a:	2200      	movs	r2, #0
 801849c:	f7e7 fef6 	bl	800028c <__adddf3>
 80184a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80184a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184a8:	9303      	str	r3, [sp, #12]
 80184aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d15c      	bne.n	801856a <_dtoa_r+0x502>
 80184b0:	4b83      	ldr	r3, [pc, #524]	; (80186c0 <_dtoa_r+0x658>)
 80184b2:	2200      	movs	r2, #0
 80184b4:	4630      	mov	r0, r6
 80184b6:	4639      	mov	r1, r7
 80184b8:	f7e7 fee6 	bl	8000288 <__aeabi_dsub>
 80184bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80184c0:	4606      	mov	r6, r0
 80184c2:	460f      	mov	r7, r1
 80184c4:	f7e8 fb28 	bl	8000b18 <__aeabi_dcmpgt>
 80184c8:	2800      	cmp	r0, #0
 80184ca:	f040 8296 	bne.w	80189fa <_dtoa_r+0x992>
 80184ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80184d2:	4630      	mov	r0, r6
 80184d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80184d8:	4639      	mov	r1, r7
 80184da:	f7e8 faff 	bl	8000adc <__aeabi_dcmplt>
 80184de:	2800      	cmp	r0, #0
 80184e0:	f040 8288 	bne.w	80189f4 <_dtoa_r+0x98c>
 80184e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80184e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80184ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	f2c0 8158 	blt.w	80187a4 <_dtoa_r+0x73c>
 80184f4:	f1ba 0f0e 	cmp.w	sl, #14
 80184f8:	f300 8154 	bgt.w	80187a4 <_dtoa_r+0x73c>
 80184fc:	4b6b      	ldr	r3, [pc, #428]	; (80186ac <_dtoa_r+0x644>)
 80184fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018502:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018508:	2b00      	cmp	r3, #0
 801850a:	f280 80e3 	bge.w	80186d4 <_dtoa_r+0x66c>
 801850e:	9b01      	ldr	r3, [sp, #4]
 8018510:	2b00      	cmp	r3, #0
 8018512:	f300 80df 	bgt.w	80186d4 <_dtoa_r+0x66c>
 8018516:	f040 826d 	bne.w	80189f4 <_dtoa_r+0x98c>
 801851a:	4b69      	ldr	r3, [pc, #420]	; (80186c0 <_dtoa_r+0x658>)
 801851c:	2200      	movs	r2, #0
 801851e:	4640      	mov	r0, r8
 8018520:	4649      	mov	r1, r9
 8018522:	f7e8 f869 	bl	80005f8 <__aeabi_dmul>
 8018526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801852a:	f7e8 faeb 	bl	8000b04 <__aeabi_dcmpge>
 801852e:	9e01      	ldr	r6, [sp, #4]
 8018530:	4637      	mov	r7, r6
 8018532:	2800      	cmp	r0, #0
 8018534:	f040 8243 	bne.w	80189be <_dtoa_r+0x956>
 8018538:	9d00      	ldr	r5, [sp, #0]
 801853a:	2331      	movs	r3, #49	; 0x31
 801853c:	f805 3b01 	strb.w	r3, [r5], #1
 8018540:	f10a 0a01 	add.w	sl, sl, #1
 8018544:	e23f      	b.n	80189c6 <_dtoa_r+0x95e>
 8018546:	07f2      	lsls	r2, r6, #31
 8018548:	d505      	bpl.n	8018556 <_dtoa_r+0x4ee>
 801854a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801854e:	f7e8 f853 	bl	80005f8 <__aeabi_dmul>
 8018552:	3501      	adds	r5, #1
 8018554:	2301      	movs	r3, #1
 8018556:	1076      	asrs	r6, r6, #1
 8018558:	3708      	adds	r7, #8
 801855a:	e76c      	b.n	8018436 <_dtoa_r+0x3ce>
 801855c:	2502      	movs	r5, #2
 801855e:	e76f      	b.n	8018440 <_dtoa_r+0x3d8>
 8018560:	9b01      	ldr	r3, [sp, #4]
 8018562:	f8cd a01c 	str.w	sl, [sp, #28]
 8018566:	930c      	str	r3, [sp, #48]	; 0x30
 8018568:	e78d      	b.n	8018486 <_dtoa_r+0x41e>
 801856a:	9900      	ldr	r1, [sp, #0]
 801856c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801856e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018570:	4b4e      	ldr	r3, [pc, #312]	; (80186ac <_dtoa_r+0x644>)
 8018572:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018576:	4401      	add	r1, r0
 8018578:	9102      	str	r1, [sp, #8]
 801857a:	9908      	ldr	r1, [sp, #32]
 801857c:	eeb0 8a47 	vmov.f32	s16, s14
 8018580:	eef0 8a67 	vmov.f32	s17, s15
 8018584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801858c:	2900      	cmp	r1, #0
 801858e:	d045      	beq.n	801861c <_dtoa_r+0x5b4>
 8018590:	494c      	ldr	r1, [pc, #304]	; (80186c4 <_dtoa_r+0x65c>)
 8018592:	2000      	movs	r0, #0
 8018594:	f7e8 f95a 	bl	800084c <__aeabi_ddiv>
 8018598:	ec53 2b18 	vmov	r2, r3, d8
 801859c:	f7e7 fe74 	bl	8000288 <__aeabi_dsub>
 80185a0:	9d00      	ldr	r5, [sp, #0]
 80185a2:	ec41 0b18 	vmov	d8, r0, r1
 80185a6:	4639      	mov	r1, r7
 80185a8:	4630      	mov	r0, r6
 80185aa:	f7e8 fad5 	bl	8000b58 <__aeabi_d2iz>
 80185ae:	900c      	str	r0, [sp, #48]	; 0x30
 80185b0:	f7e7 ffb8 	bl	8000524 <__aeabi_i2d>
 80185b4:	4602      	mov	r2, r0
 80185b6:	460b      	mov	r3, r1
 80185b8:	4630      	mov	r0, r6
 80185ba:	4639      	mov	r1, r7
 80185bc:	f7e7 fe64 	bl	8000288 <__aeabi_dsub>
 80185c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185c2:	3330      	adds	r3, #48	; 0x30
 80185c4:	f805 3b01 	strb.w	r3, [r5], #1
 80185c8:	ec53 2b18 	vmov	r2, r3, d8
 80185cc:	4606      	mov	r6, r0
 80185ce:	460f      	mov	r7, r1
 80185d0:	f7e8 fa84 	bl	8000adc <__aeabi_dcmplt>
 80185d4:	2800      	cmp	r0, #0
 80185d6:	d165      	bne.n	80186a4 <_dtoa_r+0x63c>
 80185d8:	4632      	mov	r2, r6
 80185da:	463b      	mov	r3, r7
 80185dc:	4935      	ldr	r1, [pc, #212]	; (80186b4 <_dtoa_r+0x64c>)
 80185de:	2000      	movs	r0, #0
 80185e0:	f7e7 fe52 	bl	8000288 <__aeabi_dsub>
 80185e4:	ec53 2b18 	vmov	r2, r3, d8
 80185e8:	f7e8 fa78 	bl	8000adc <__aeabi_dcmplt>
 80185ec:	2800      	cmp	r0, #0
 80185ee:	f040 80b9 	bne.w	8018764 <_dtoa_r+0x6fc>
 80185f2:	9b02      	ldr	r3, [sp, #8]
 80185f4:	429d      	cmp	r5, r3
 80185f6:	f43f af75 	beq.w	80184e4 <_dtoa_r+0x47c>
 80185fa:	4b2f      	ldr	r3, [pc, #188]	; (80186b8 <_dtoa_r+0x650>)
 80185fc:	ec51 0b18 	vmov	r0, r1, d8
 8018600:	2200      	movs	r2, #0
 8018602:	f7e7 fff9 	bl	80005f8 <__aeabi_dmul>
 8018606:	4b2c      	ldr	r3, [pc, #176]	; (80186b8 <_dtoa_r+0x650>)
 8018608:	ec41 0b18 	vmov	d8, r0, r1
 801860c:	2200      	movs	r2, #0
 801860e:	4630      	mov	r0, r6
 8018610:	4639      	mov	r1, r7
 8018612:	f7e7 fff1 	bl	80005f8 <__aeabi_dmul>
 8018616:	4606      	mov	r6, r0
 8018618:	460f      	mov	r7, r1
 801861a:	e7c4      	b.n	80185a6 <_dtoa_r+0x53e>
 801861c:	ec51 0b17 	vmov	r0, r1, d7
 8018620:	f7e7 ffea 	bl	80005f8 <__aeabi_dmul>
 8018624:	9b02      	ldr	r3, [sp, #8]
 8018626:	9d00      	ldr	r5, [sp, #0]
 8018628:	930c      	str	r3, [sp, #48]	; 0x30
 801862a:	ec41 0b18 	vmov	d8, r0, r1
 801862e:	4639      	mov	r1, r7
 8018630:	4630      	mov	r0, r6
 8018632:	f7e8 fa91 	bl	8000b58 <__aeabi_d2iz>
 8018636:	9011      	str	r0, [sp, #68]	; 0x44
 8018638:	f7e7 ff74 	bl	8000524 <__aeabi_i2d>
 801863c:	4602      	mov	r2, r0
 801863e:	460b      	mov	r3, r1
 8018640:	4630      	mov	r0, r6
 8018642:	4639      	mov	r1, r7
 8018644:	f7e7 fe20 	bl	8000288 <__aeabi_dsub>
 8018648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801864a:	3330      	adds	r3, #48	; 0x30
 801864c:	f805 3b01 	strb.w	r3, [r5], #1
 8018650:	9b02      	ldr	r3, [sp, #8]
 8018652:	429d      	cmp	r5, r3
 8018654:	4606      	mov	r6, r0
 8018656:	460f      	mov	r7, r1
 8018658:	f04f 0200 	mov.w	r2, #0
 801865c:	d134      	bne.n	80186c8 <_dtoa_r+0x660>
 801865e:	4b19      	ldr	r3, [pc, #100]	; (80186c4 <_dtoa_r+0x65c>)
 8018660:	ec51 0b18 	vmov	r0, r1, d8
 8018664:	f7e7 fe12 	bl	800028c <__adddf3>
 8018668:	4602      	mov	r2, r0
 801866a:	460b      	mov	r3, r1
 801866c:	4630      	mov	r0, r6
 801866e:	4639      	mov	r1, r7
 8018670:	f7e8 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 8018674:	2800      	cmp	r0, #0
 8018676:	d175      	bne.n	8018764 <_dtoa_r+0x6fc>
 8018678:	ec53 2b18 	vmov	r2, r3, d8
 801867c:	4911      	ldr	r1, [pc, #68]	; (80186c4 <_dtoa_r+0x65c>)
 801867e:	2000      	movs	r0, #0
 8018680:	f7e7 fe02 	bl	8000288 <__aeabi_dsub>
 8018684:	4602      	mov	r2, r0
 8018686:	460b      	mov	r3, r1
 8018688:	4630      	mov	r0, r6
 801868a:	4639      	mov	r1, r7
 801868c:	f7e8 fa26 	bl	8000adc <__aeabi_dcmplt>
 8018690:	2800      	cmp	r0, #0
 8018692:	f43f af27 	beq.w	80184e4 <_dtoa_r+0x47c>
 8018696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018698:	1e6b      	subs	r3, r5, #1
 801869a:	930c      	str	r3, [sp, #48]	; 0x30
 801869c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80186a0:	2b30      	cmp	r3, #48	; 0x30
 80186a2:	d0f8      	beq.n	8018696 <_dtoa_r+0x62e>
 80186a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80186a8:	e04a      	b.n	8018740 <_dtoa_r+0x6d8>
 80186aa:	bf00      	nop
 80186ac:	0801a9b8 	.word	0x0801a9b8
 80186b0:	0801a990 	.word	0x0801a990
 80186b4:	3ff00000 	.word	0x3ff00000
 80186b8:	40240000 	.word	0x40240000
 80186bc:	401c0000 	.word	0x401c0000
 80186c0:	40140000 	.word	0x40140000
 80186c4:	3fe00000 	.word	0x3fe00000
 80186c8:	4baf      	ldr	r3, [pc, #700]	; (8018988 <_dtoa_r+0x920>)
 80186ca:	f7e7 ff95 	bl	80005f8 <__aeabi_dmul>
 80186ce:	4606      	mov	r6, r0
 80186d0:	460f      	mov	r7, r1
 80186d2:	e7ac      	b.n	801862e <_dtoa_r+0x5c6>
 80186d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80186d8:	9d00      	ldr	r5, [sp, #0]
 80186da:	4642      	mov	r2, r8
 80186dc:	464b      	mov	r3, r9
 80186de:	4630      	mov	r0, r6
 80186e0:	4639      	mov	r1, r7
 80186e2:	f7e8 f8b3 	bl	800084c <__aeabi_ddiv>
 80186e6:	f7e8 fa37 	bl	8000b58 <__aeabi_d2iz>
 80186ea:	9002      	str	r0, [sp, #8]
 80186ec:	f7e7 ff1a 	bl	8000524 <__aeabi_i2d>
 80186f0:	4642      	mov	r2, r8
 80186f2:	464b      	mov	r3, r9
 80186f4:	f7e7 ff80 	bl	80005f8 <__aeabi_dmul>
 80186f8:	4602      	mov	r2, r0
 80186fa:	460b      	mov	r3, r1
 80186fc:	4630      	mov	r0, r6
 80186fe:	4639      	mov	r1, r7
 8018700:	f7e7 fdc2 	bl	8000288 <__aeabi_dsub>
 8018704:	9e02      	ldr	r6, [sp, #8]
 8018706:	9f01      	ldr	r7, [sp, #4]
 8018708:	3630      	adds	r6, #48	; 0x30
 801870a:	f805 6b01 	strb.w	r6, [r5], #1
 801870e:	9e00      	ldr	r6, [sp, #0]
 8018710:	1bae      	subs	r6, r5, r6
 8018712:	42b7      	cmp	r7, r6
 8018714:	4602      	mov	r2, r0
 8018716:	460b      	mov	r3, r1
 8018718:	d137      	bne.n	801878a <_dtoa_r+0x722>
 801871a:	f7e7 fdb7 	bl	800028c <__adddf3>
 801871e:	4642      	mov	r2, r8
 8018720:	464b      	mov	r3, r9
 8018722:	4606      	mov	r6, r0
 8018724:	460f      	mov	r7, r1
 8018726:	f7e8 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 801872a:	b9c8      	cbnz	r0, 8018760 <_dtoa_r+0x6f8>
 801872c:	4642      	mov	r2, r8
 801872e:	464b      	mov	r3, r9
 8018730:	4630      	mov	r0, r6
 8018732:	4639      	mov	r1, r7
 8018734:	f7e8 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8018738:	b110      	cbz	r0, 8018740 <_dtoa_r+0x6d8>
 801873a:	9b02      	ldr	r3, [sp, #8]
 801873c:	07d9      	lsls	r1, r3, #31
 801873e:	d40f      	bmi.n	8018760 <_dtoa_r+0x6f8>
 8018740:	4620      	mov	r0, r4
 8018742:	4659      	mov	r1, fp
 8018744:	f000 fbc6 	bl	8018ed4 <_Bfree>
 8018748:	2300      	movs	r3, #0
 801874a:	702b      	strb	r3, [r5, #0]
 801874c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801874e:	f10a 0001 	add.w	r0, sl, #1
 8018752:	6018      	str	r0, [r3, #0]
 8018754:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018756:	2b00      	cmp	r3, #0
 8018758:	f43f acd8 	beq.w	801810c <_dtoa_r+0xa4>
 801875c:	601d      	str	r5, [r3, #0]
 801875e:	e4d5      	b.n	801810c <_dtoa_r+0xa4>
 8018760:	f8cd a01c 	str.w	sl, [sp, #28]
 8018764:	462b      	mov	r3, r5
 8018766:	461d      	mov	r5, r3
 8018768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801876c:	2a39      	cmp	r2, #57	; 0x39
 801876e:	d108      	bne.n	8018782 <_dtoa_r+0x71a>
 8018770:	9a00      	ldr	r2, [sp, #0]
 8018772:	429a      	cmp	r2, r3
 8018774:	d1f7      	bne.n	8018766 <_dtoa_r+0x6fe>
 8018776:	9a07      	ldr	r2, [sp, #28]
 8018778:	9900      	ldr	r1, [sp, #0]
 801877a:	3201      	adds	r2, #1
 801877c:	9207      	str	r2, [sp, #28]
 801877e:	2230      	movs	r2, #48	; 0x30
 8018780:	700a      	strb	r2, [r1, #0]
 8018782:	781a      	ldrb	r2, [r3, #0]
 8018784:	3201      	adds	r2, #1
 8018786:	701a      	strb	r2, [r3, #0]
 8018788:	e78c      	b.n	80186a4 <_dtoa_r+0x63c>
 801878a:	4b7f      	ldr	r3, [pc, #508]	; (8018988 <_dtoa_r+0x920>)
 801878c:	2200      	movs	r2, #0
 801878e:	f7e7 ff33 	bl	80005f8 <__aeabi_dmul>
 8018792:	2200      	movs	r2, #0
 8018794:	2300      	movs	r3, #0
 8018796:	4606      	mov	r6, r0
 8018798:	460f      	mov	r7, r1
 801879a:	f7e8 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 801879e:	2800      	cmp	r0, #0
 80187a0:	d09b      	beq.n	80186da <_dtoa_r+0x672>
 80187a2:	e7cd      	b.n	8018740 <_dtoa_r+0x6d8>
 80187a4:	9a08      	ldr	r2, [sp, #32]
 80187a6:	2a00      	cmp	r2, #0
 80187a8:	f000 80c4 	beq.w	8018934 <_dtoa_r+0x8cc>
 80187ac:	9a05      	ldr	r2, [sp, #20]
 80187ae:	2a01      	cmp	r2, #1
 80187b0:	f300 80a8 	bgt.w	8018904 <_dtoa_r+0x89c>
 80187b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80187b6:	2a00      	cmp	r2, #0
 80187b8:	f000 80a0 	beq.w	80188fc <_dtoa_r+0x894>
 80187bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80187c0:	9e06      	ldr	r6, [sp, #24]
 80187c2:	4645      	mov	r5, r8
 80187c4:	9a04      	ldr	r2, [sp, #16]
 80187c6:	2101      	movs	r1, #1
 80187c8:	441a      	add	r2, r3
 80187ca:	4620      	mov	r0, r4
 80187cc:	4498      	add	r8, r3
 80187ce:	9204      	str	r2, [sp, #16]
 80187d0:	f000 fc3c 	bl	801904c <__i2b>
 80187d4:	4607      	mov	r7, r0
 80187d6:	2d00      	cmp	r5, #0
 80187d8:	dd0b      	ble.n	80187f2 <_dtoa_r+0x78a>
 80187da:	9b04      	ldr	r3, [sp, #16]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	dd08      	ble.n	80187f2 <_dtoa_r+0x78a>
 80187e0:	42ab      	cmp	r3, r5
 80187e2:	9a04      	ldr	r2, [sp, #16]
 80187e4:	bfa8      	it	ge
 80187e6:	462b      	movge	r3, r5
 80187e8:	eba8 0803 	sub.w	r8, r8, r3
 80187ec:	1aed      	subs	r5, r5, r3
 80187ee:	1ad3      	subs	r3, r2, r3
 80187f0:	9304      	str	r3, [sp, #16]
 80187f2:	9b06      	ldr	r3, [sp, #24]
 80187f4:	b1fb      	cbz	r3, 8018836 <_dtoa_r+0x7ce>
 80187f6:	9b08      	ldr	r3, [sp, #32]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	f000 809f 	beq.w	801893c <_dtoa_r+0x8d4>
 80187fe:	2e00      	cmp	r6, #0
 8018800:	dd11      	ble.n	8018826 <_dtoa_r+0x7be>
 8018802:	4639      	mov	r1, r7
 8018804:	4632      	mov	r2, r6
 8018806:	4620      	mov	r0, r4
 8018808:	f000 fcdc 	bl	80191c4 <__pow5mult>
 801880c:	465a      	mov	r2, fp
 801880e:	4601      	mov	r1, r0
 8018810:	4607      	mov	r7, r0
 8018812:	4620      	mov	r0, r4
 8018814:	f000 fc30 	bl	8019078 <__multiply>
 8018818:	4659      	mov	r1, fp
 801881a:	9007      	str	r0, [sp, #28]
 801881c:	4620      	mov	r0, r4
 801881e:	f000 fb59 	bl	8018ed4 <_Bfree>
 8018822:	9b07      	ldr	r3, [sp, #28]
 8018824:	469b      	mov	fp, r3
 8018826:	9b06      	ldr	r3, [sp, #24]
 8018828:	1b9a      	subs	r2, r3, r6
 801882a:	d004      	beq.n	8018836 <_dtoa_r+0x7ce>
 801882c:	4659      	mov	r1, fp
 801882e:	4620      	mov	r0, r4
 8018830:	f000 fcc8 	bl	80191c4 <__pow5mult>
 8018834:	4683      	mov	fp, r0
 8018836:	2101      	movs	r1, #1
 8018838:	4620      	mov	r0, r4
 801883a:	f000 fc07 	bl	801904c <__i2b>
 801883e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018840:	2b00      	cmp	r3, #0
 8018842:	4606      	mov	r6, r0
 8018844:	dd7c      	ble.n	8018940 <_dtoa_r+0x8d8>
 8018846:	461a      	mov	r2, r3
 8018848:	4601      	mov	r1, r0
 801884a:	4620      	mov	r0, r4
 801884c:	f000 fcba 	bl	80191c4 <__pow5mult>
 8018850:	9b05      	ldr	r3, [sp, #20]
 8018852:	2b01      	cmp	r3, #1
 8018854:	4606      	mov	r6, r0
 8018856:	dd76      	ble.n	8018946 <_dtoa_r+0x8de>
 8018858:	2300      	movs	r3, #0
 801885a:	9306      	str	r3, [sp, #24]
 801885c:	6933      	ldr	r3, [r6, #16]
 801885e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018862:	6918      	ldr	r0, [r3, #16]
 8018864:	f000 fba2 	bl	8018fac <__hi0bits>
 8018868:	f1c0 0020 	rsb	r0, r0, #32
 801886c:	9b04      	ldr	r3, [sp, #16]
 801886e:	4418      	add	r0, r3
 8018870:	f010 001f 	ands.w	r0, r0, #31
 8018874:	f000 8086 	beq.w	8018984 <_dtoa_r+0x91c>
 8018878:	f1c0 0320 	rsb	r3, r0, #32
 801887c:	2b04      	cmp	r3, #4
 801887e:	dd7f      	ble.n	8018980 <_dtoa_r+0x918>
 8018880:	f1c0 001c 	rsb	r0, r0, #28
 8018884:	9b04      	ldr	r3, [sp, #16]
 8018886:	4403      	add	r3, r0
 8018888:	4480      	add	r8, r0
 801888a:	4405      	add	r5, r0
 801888c:	9304      	str	r3, [sp, #16]
 801888e:	f1b8 0f00 	cmp.w	r8, #0
 8018892:	dd05      	ble.n	80188a0 <_dtoa_r+0x838>
 8018894:	4659      	mov	r1, fp
 8018896:	4642      	mov	r2, r8
 8018898:	4620      	mov	r0, r4
 801889a:	f000 fced 	bl	8019278 <__lshift>
 801889e:	4683      	mov	fp, r0
 80188a0:	9b04      	ldr	r3, [sp, #16]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	dd05      	ble.n	80188b2 <_dtoa_r+0x84a>
 80188a6:	4631      	mov	r1, r6
 80188a8:	461a      	mov	r2, r3
 80188aa:	4620      	mov	r0, r4
 80188ac:	f000 fce4 	bl	8019278 <__lshift>
 80188b0:	4606      	mov	r6, r0
 80188b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d069      	beq.n	801898c <_dtoa_r+0x924>
 80188b8:	4631      	mov	r1, r6
 80188ba:	4658      	mov	r0, fp
 80188bc:	f000 fd48 	bl	8019350 <__mcmp>
 80188c0:	2800      	cmp	r0, #0
 80188c2:	da63      	bge.n	801898c <_dtoa_r+0x924>
 80188c4:	2300      	movs	r3, #0
 80188c6:	4659      	mov	r1, fp
 80188c8:	220a      	movs	r2, #10
 80188ca:	4620      	mov	r0, r4
 80188cc:	f000 fb24 	bl	8018f18 <__multadd>
 80188d0:	9b08      	ldr	r3, [sp, #32]
 80188d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80188d6:	4683      	mov	fp, r0
 80188d8:	2b00      	cmp	r3, #0
 80188da:	f000 818f 	beq.w	8018bfc <_dtoa_r+0xb94>
 80188de:	4639      	mov	r1, r7
 80188e0:	2300      	movs	r3, #0
 80188e2:	220a      	movs	r2, #10
 80188e4:	4620      	mov	r0, r4
 80188e6:	f000 fb17 	bl	8018f18 <__multadd>
 80188ea:	f1b9 0f00 	cmp.w	r9, #0
 80188ee:	4607      	mov	r7, r0
 80188f0:	f300 808e 	bgt.w	8018a10 <_dtoa_r+0x9a8>
 80188f4:	9b05      	ldr	r3, [sp, #20]
 80188f6:	2b02      	cmp	r3, #2
 80188f8:	dc50      	bgt.n	801899c <_dtoa_r+0x934>
 80188fa:	e089      	b.n	8018a10 <_dtoa_r+0x9a8>
 80188fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80188fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018902:	e75d      	b.n	80187c0 <_dtoa_r+0x758>
 8018904:	9b01      	ldr	r3, [sp, #4]
 8018906:	1e5e      	subs	r6, r3, #1
 8018908:	9b06      	ldr	r3, [sp, #24]
 801890a:	42b3      	cmp	r3, r6
 801890c:	bfbf      	itttt	lt
 801890e:	9b06      	ldrlt	r3, [sp, #24]
 8018910:	9606      	strlt	r6, [sp, #24]
 8018912:	1af2      	sublt	r2, r6, r3
 8018914:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018916:	bfb6      	itet	lt
 8018918:	189b      	addlt	r3, r3, r2
 801891a:	1b9e      	subge	r6, r3, r6
 801891c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801891e:	9b01      	ldr	r3, [sp, #4]
 8018920:	bfb8      	it	lt
 8018922:	2600      	movlt	r6, #0
 8018924:	2b00      	cmp	r3, #0
 8018926:	bfb5      	itete	lt
 8018928:	eba8 0503 	sublt.w	r5, r8, r3
 801892c:	9b01      	ldrge	r3, [sp, #4]
 801892e:	2300      	movlt	r3, #0
 8018930:	4645      	movge	r5, r8
 8018932:	e747      	b.n	80187c4 <_dtoa_r+0x75c>
 8018934:	9e06      	ldr	r6, [sp, #24]
 8018936:	9f08      	ldr	r7, [sp, #32]
 8018938:	4645      	mov	r5, r8
 801893a:	e74c      	b.n	80187d6 <_dtoa_r+0x76e>
 801893c:	9a06      	ldr	r2, [sp, #24]
 801893e:	e775      	b.n	801882c <_dtoa_r+0x7c4>
 8018940:	9b05      	ldr	r3, [sp, #20]
 8018942:	2b01      	cmp	r3, #1
 8018944:	dc18      	bgt.n	8018978 <_dtoa_r+0x910>
 8018946:	9b02      	ldr	r3, [sp, #8]
 8018948:	b9b3      	cbnz	r3, 8018978 <_dtoa_r+0x910>
 801894a:	9b03      	ldr	r3, [sp, #12]
 801894c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018950:	b9a3      	cbnz	r3, 801897c <_dtoa_r+0x914>
 8018952:	9b03      	ldr	r3, [sp, #12]
 8018954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018958:	0d1b      	lsrs	r3, r3, #20
 801895a:	051b      	lsls	r3, r3, #20
 801895c:	b12b      	cbz	r3, 801896a <_dtoa_r+0x902>
 801895e:	9b04      	ldr	r3, [sp, #16]
 8018960:	3301      	adds	r3, #1
 8018962:	9304      	str	r3, [sp, #16]
 8018964:	f108 0801 	add.w	r8, r8, #1
 8018968:	2301      	movs	r3, #1
 801896a:	9306      	str	r3, [sp, #24]
 801896c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801896e:	2b00      	cmp	r3, #0
 8018970:	f47f af74 	bne.w	801885c <_dtoa_r+0x7f4>
 8018974:	2001      	movs	r0, #1
 8018976:	e779      	b.n	801886c <_dtoa_r+0x804>
 8018978:	2300      	movs	r3, #0
 801897a:	e7f6      	b.n	801896a <_dtoa_r+0x902>
 801897c:	9b02      	ldr	r3, [sp, #8]
 801897e:	e7f4      	b.n	801896a <_dtoa_r+0x902>
 8018980:	d085      	beq.n	801888e <_dtoa_r+0x826>
 8018982:	4618      	mov	r0, r3
 8018984:	301c      	adds	r0, #28
 8018986:	e77d      	b.n	8018884 <_dtoa_r+0x81c>
 8018988:	40240000 	.word	0x40240000
 801898c:	9b01      	ldr	r3, [sp, #4]
 801898e:	2b00      	cmp	r3, #0
 8018990:	dc38      	bgt.n	8018a04 <_dtoa_r+0x99c>
 8018992:	9b05      	ldr	r3, [sp, #20]
 8018994:	2b02      	cmp	r3, #2
 8018996:	dd35      	ble.n	8018a04 <_dtoa_r+0x99c>
 8018998:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801899c:	f1b9 0f00 	cmp.w	r9, #0
 80189a0:	d10d      	bne.n	80189be <_dtoa_r+0x956>
 80189a2:	4631      	mov	r1, r6
 80189a4:	464b      	mov	r3, r9
 80189a6:	2205      	movs	r2, #5
 80189a8:	4620      	mov	r0, r4
 80189aa:	f000 fab5 	bl	8018f18 <__multadd>
 80189ae:	4601      	mov	r1, r0
 80189b0:	4606      	mov	r6, r0
 80189b2:	4658      	mov	r0, fp
 80189b4:	f000 fccc 	bl	8019350 <__mcmp>
 80189b8:	2800      	cmp	r0, #0
 80189ba:	f73f adbd 	bgt.w	8018538 <_dtoa_r+0x4d0>
 80189be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189c0:	9d00      	ldr	r5, [sp, #0]
 80189c2:	ea6f 0a03 	mvn.w	sl, r3
 80189c6:	f04f 0800 	mov.w	r8, #0
 80189ca:	4631      	mov	r1, r6
 80189cc:	4620      	mov	r0, r4
 80189ce:	f000 fa81 	bl	8018ed4 <_Bfree>
 80189d2:	2f00      	cmp	r7, #0
 80189d4:	f43f aeb4 	beq.w	8018740 <_dtoa_r+0x6d8>
 80189d8:	f1b8 0f00 	cmp.w	r8, #0
 80189dc:	d005      	beq.n	80189ea <_dtoa_r+0x982>
 80189de:	45b8      	cmp	r8, r7
 80189e0:	d003      	beq.n	80189ea <_dtoa_r+0x982>
 80189e2:	4641      	mov	r1, r8
 80189e4:	4620      	mov	r0, r4
 80189e6:	f000 fa75 	bl	8018ed4 <_Bfree>
 80189ea:	4639      	mov	r1, r7
 80189ec:	4620      	mov	r0, r4
 80189ee:	f000 fa71 	bl	8018ed4 <_Bfree>
 80189f2:	e6a5      	b.n	8018740 <_dtoa_r+0x6d8>
 80189f4:	2600      	movs	r6, #0
 80189f6:	4637      	mov	r7, r6
 80189f8:	e7e1      	b.n	80189be <_dtoa_r+0x956>
 80189fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80189fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018a00:	4637      	mov	r7, r6
 8018a02:	e599      	b.n	8018538 <_dtoa_r+0x4d0>
 8018a04:	9b08      	ldr	r3, [sp, #32]
 8018a06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	f000 80fd 	beq.w	8018c0a <_dtoa_r+0xba2>
 8018a10:	2d00      	cmp	r5, #0
 8018a12:	dd05      	ble.n	8018a20 <_dtoa_r+0x9b8>
 8018a14:	4639      	mov	r1, r7
 8018a16:	462a      	mov	r2, r5
 8018a18:	4620      	mov	r0, r4
 8018a1a:	f000 fc2d 	bl	8019278 <__lshift>
 8018a1e:	4607      	mov	r7, r0
 8018a20:	9b06      	ldr	r3, [sp, #24]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d05c      	beq.n	8018ae0 <_dtoa_r+0xa78>
 8018a26:	6879      	ldr	r1, [r7, #4]
 8018a28:	4620      	mov	r0, r4
 8018a2a:	f000 fa13 	bl	8018e54 <_Balloc>
 8018a2e:	4605      	mov	r5, r0
 8018a30:	b928      	cbnz	r0, 8018a3e <_dtoa_r+0x9d6>
 8018a32:	4b80      	ldr	r3, [pc, #512]	; (8018c34 <_dtoa_r+0xbcc>)
 8018a34:	4602      	mov	r2, r0
 8018a36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018a3a:	f7ff bb2e 	b.w	801809a <_dtoa_r+0x32>
 8018a3e:	693a      	ldr	r2, [r7, #16]
 8018a40:	3202      	adds	r2, #2
 8018a42:	0092      	lsls	r2, r2, #2
 8018a44:	f107 010c 	add.w	r1, r7, #12
 8018a48:	300c      	adds	r0, #12
 8018a4a:	f7fe fcb7 	bl	80173bc <memcpy>
 8018a4e:	2201      	movs	r2, #1
 8018a50:	4629      	mov	r1, r5
 8018a52:	4620      	mov	r0, r4
 8018a54:	f000 fc10 	bl	8019278 <__lshift>
 8018a58:	9b00      	ldr	r3, [sp, #0]
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	9301      	str	r3, [sp, #4]
 8018a5e:	9b00      	ldr	r3, [sp, #0]
 8018a60:	444b      	add	r3, r9
 8018a62:	9307      	str	r3, [sp, #28]
 8018a64:	9b02      	ldr	r3, [sp, #8]
 8018a66:	f003 0301 	and.w	r3, r3, #1
 8018a6a:	46b8      	mov	r8, r7
 8018a6c:	9306      	str	r3, [sp, #24]
 8018a6e:	4607      	mov	r7, r0
 8018a70:	9b01      	ldr	r3, [sp, #4]
 8018a72:	4631      	mov	r1, r6
 8018a74:	3b01      	subs	r3, #1
 8018a76:	4658      	mov	r0, fp
 8018a78:	9302      	str	r3, [sp, #8]
 8018a7a:	f7ff fa69 	bl	8017f50 <quorem>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	3330      	adds	r3, #48	; 0x30
 8018a82:	9004      	str	r0, [sp, #16]
 8018a84:	4641      	mov	r1, r8
 8018a86:	4658      	mov	r0, fp
 8018a88:	9308      	str	r3, [sp, #32]
 8018a8a:	f000 fc61 	bl	8019350 <__mcmp>
 8018a8e:	463a      	mov	r2, r7
 8018a90:	4681      	mov	r9, r0
 8018a92:	4631      	mov	r1, r6
 8018a94:	4620      	mov	r0, r4
 8018a96:	f000 fc77 	bl	8019388 <__mdiff>
 8018a9a:	68c2      	ldr	r2, [r0, #12]
 8018a9c:	9b08      	ldr	r3, [sp, #32]
 8018a9e:	4605      	mov	r5, r0
 8018aa0:	bb02      	cbnz	r2, 8018ae4 <_dtoa_r+0xa7c>
 8018aa2:	4601      	mov	r1, r0
 8018aa4:	4658      	mov	r0, fp
 8018aa6:	f000 fc53 	bl	8019350 <__mcmp>
 8018aaa:	9b08      	ldr	r3, [sp, #32]
 8018aac:	4602      	mov	r2, r0
 8018aae:	4629      	mov	r1, r5
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018ab6:	f000 fa0d 	bl	8018ed4 <_Bfree>
 8018aba:	9b05      	ldr	r3, [sp, #20]
 8018abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018abe:	9d01      	ldr	r5, [sp, #4]
 8018ac0:	ea43 0102 	orr.w	r1, r3, r2
 8018ac4:	9b06      	ldr	r3, [sp, #24]
 8018ac6:	430b      	orrs	r3, r1
 8018ac8:	9b08      	ldr	r3, [sp, #32]
 8018aca:	d10d      	bne.n	8018ae8 <_dtoa_r+0xa80>
 8018acc:	2b39      	cmp	r3, #57	; 0x39
 8018ace:	d029      	beq.n	8018b24 <_dtoa_r+0xabc>
 8018ad0:	f1b9 0f00 	cmp.w	r9, #0
 8018ad4:	dd01      	ble.n	8018ada <_dtoa_r+0xa72>
 8018ad6:	9b04      	ldr	r3, [sp, #16]
 8018ad8:	3331      	adds	r3, #49	; 0x31
 8018ada:	9a02      	ldr	r2, [sp, #8]
 8018adc:	7013      	strb	r3, [r2, #0]
 8018ade:	e774      	b.n	80189ca <_dtoa_r+0x962>
 8018ae0:	4638      	mov	r0, r7
 8018ae2:	e7b9      	b.n	8018a58 <_dtoa_r+0x9f0>
 8018ae4:	2201      	movs	r2, #1
 8018ae6:	e7e2      	b.n	8018aae <_dtoa_r+0xa46>
 8018ae8:	f1b9 0f00 	cmp.w	r9, #0
 8018aec:	db06      	blt.n	8018afc <_dtoa_r+0xa94>
 8018aee:	9905      	ldr	r1, [sp, #20]
 8018af0:	ea41 0909 	orr.w	r9, r1, r9
 8018af4:	9906      	ldr	r1, [sp, #24]
 8018af6:	ea59 0101 	orrs.w	r1, r9, r1
 8018afa:	d120      	bne.n	8018b3e <_dtoa_r+0xad6>
 8018afc:	2a00      	cmp	r2, #0
 8018afe:	ddec      	ble.n	8018ada <_dtoa_r+0xa72>
 8018b00:	4659      	mov	r1, fp
 8018b02:	2201      	movs	r2, #1
 8018b04:	4620      	mov	r0, r4
 8018b06:	9301      	str	r3, [sp, #4]
 8018b08:	f000 fbb6 	bl	8019278 <__lshift>
 8018b0c:	4631      	mov	r1, r6
 8018b0e:	4683      	mov	fp, r0
 8018b10:	f000 fc1e 	bl	8019350 <__mcmp>
 8018b14:	2800      	cmp	r0, #0
 8018b16:	9b01      	ldr	r3, [sp, #4]
 8018b18:	dc02      	bgt.n	8018b20 <_dtoa_r+0xab8>
 8018b1a:	d1de      	bne.n	8018ada <_dtoa_r+0xa72>
 8018b1c:	07da      	lsls	r2, r3, #31
 8018b1e:	d5dc      	bpl.n	8018ada <_dtoa_r+0xa72>
 8018b20:	2b39      	cmp	r3, #57	; 0x39
 8018b22:	d1d8      	bne.n	8018ad6 <_dtoa_r+0xa6e>
 8018b24:	9a02      	ldr	r2, [sp, #8]
 8018b26:	2339      	movs	r3, #57	; 0x39
 8018b28:	7013      	strb	r3, [r2, #0]
 8018b2a:	462b      	mov	r3, r5
 8018b2c:	461d      	mov	r5, r3
 8018b2e:	3b01      	subs	r3, #1
 8018b30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018b34:	2a39      	cmp	r2, #57	; 0x39
 8018b36:	d050      	beq.n	8018bda <_dtoa_r+0xb72>
 8018b38:	3201      	adds	r2, #1
 8018b3a:	701a      	strb	r2, [r3, #0]
 8018b3c:	e745      	b.n	80189ca <_dtoa_r+0x962>
 8018b3e:	2a00      	cmp	r2, #0
 8018b40:	dd03      	ble.n	8018b4a <_dtoa_r+0xae2>
 8018b42:	2b39      	cmp	r3, #57	; 0x39
 8018b44:	d0ee      	beq.n	8018b24 <_dtoa_r+0xabc>
 8018b46:	3301      	adds	r3, #1
 8018b48:	e7c7      	b.n	8018ada <_dtoa_r+0xa72>
 8018b4a:	9a01      	ldr	r2, [sp, #4]
 8018b4c:	9907      	ldr	r1, [sp, #28]
 8018b4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018b52:	428a      	cmp	r2, r1
 8018b54:	d02a      	beq.n	8018bac <_dtoa_r+0xb44>
 8018b56:	4659      	mov	r1, fp
 8018b58:	2300      	movs	r3, #0
 8018b5a:	220a      	movs	r2, #10
 8018b5c:	4620      	mov	r0, r4
 8018b5e:	f000 f9db 	bl	8018f18 <__multadd>
 8018b62:	45b8      	cmp	r8, r7
 8018b64:	4683      	mov	fp, r0
 8018b66:	f04f 0300 	mov.w	r3, #0
 8018b6a:	f04f 020a 	mov.w	r2, #10
 8018b6e:	4641      	mov	r1, r8
 8018b70:	4620      	mov	r0, r4
 8018b72:	d107      	bne.n	8018b84 <_dtoa_r+0xb1c>
 8018b74:	f000 f9d0 	bl	8018f18 <__multadd>
 8018b78:	4680      	mov	r8, r0
 8018b7a:	4607      	mov	r7, r0
 8018b7c:	9b01      	ldr	r3, [sp, #4]
 8018b7e:	3301      	adds	r3, #1
 8018b80:	9301      	str	r3, [sp, #4]
 8018b82:	e775      	b.n	8018a70 <_dtoa_r+0xa08>
 8018b84:	f000 f9c8 	bl	8018f18 <__multadd>
 8018b88:	4639      	mov	r1, r7
 8018b8a:	4680      	mov	r8, r0
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	220a      	movs	r2, #10
 8018b90:	4620      	mov	r0, r4
 8018b92:	f000 f9c1 	bl	8018f18 <__multadd>
 8018b96:	4607      	mov	r7, r0
 8018b98:	e7f0      	b.n	8018b7c <_dtoa_r+0xb14>
 8018b9a:	f1b9 0f00 	cmp.w	r9, #0
 8018b9e:	9a00      	ldr	r2, [sp, #0]
 8018ba0:	bfcc      	ite	gt
 8018ba2:	464d      	movgt	r5, r9
 8018ba4:	2501      	movle	r5, #1
 8018ba6:	4415      	add	r5, r2
 8018ba8:	f04f 0800 	mov.w	r8, #0
 8018bac:	4659      	mov	r1, fp
 8018bae:	2201      	movs	r2, #1
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	9301      	str	r3, [sp, #4]
 8018bb4:	f000 fb60 	bl	8019278 <__lshift>
 8018bb8:	4631      	mov	r1, r6
 8018bba:	4683      	mov	fp, r0
 8018bbc:	f000 fbc8 	bl	8019350 <__mcmp>
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	dcb2      	bgt.n	8018b2a <_dtoa_r+0xac2>
 8018bc4:	d102      	bne.n	8018bcc <_dtoa_r+0xb64>
 8018bc6:	9b01      	ldr	r3, [sp, #4]
 8018bc8:	07db      	lsls	r3, r3, #31
 8018bca:	d4ae      	bmi.n	8018b2a <_dtoa_r+0xac2>
 8018bcc:	462b      	mov	r3, r5
 8018bce:	461d      	mov	r5, r3
 8018bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018bd4:	2a30      	cmp	r2, #48	; 0x30
 8018bd6:	d0fa      	beq.n	8018bce <_dtoa_r+0xb66>
 8018bd8:	e6f7      	b.n	80189ca <_dtoa_r+0x962>
 8018bda:	9a00      	ldr	r2, [sp, #0]
 8018bdc:	429a      	cmp	r2, r3
 8018bde:	d1a5      	bne.n	8018b2c <_dtoa_r+0xac4>
 8018be0:	f10a 0a01 	add.w	sl, sl, #1
 8018be4:	2331      	movs	r3, #49	; 0x31
 8018be6:	e779      	b.n	8018adc <_dtoa_r+0xa74>
 8018be8:	4b13      	ldr	r3, [pc, #76]	; (8018c38 <_dtoa_r+0xbd0>)
 8018bea:	f7ff baaf 	b.w	801814c <_dtoa_r+0xe4>
 8018bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	f47f aa86 	bne.w	8018102 <_dtoa_r+0x9a>
 8018bf6:	4b11      	ldr	r3, [pc, #68]	; (8018c3c <_dtoa_r+0xbd4>)
 8018bf8:	f7ff baa8 	b.w	801814c <_dtoa_r+0xe4>
 8018bfc:	f1b9 0f00 	cmp.w	r9, #0
 8018c00:	dc03      	bgt.n	8018c0a <_dtoa_r+0xba2>
 8018c02:	9b05      	ldr	r3, [sp, #20]
 8018c04:	2b02      	cmp	r3, #2
 8018c06:	f73f aec9 	bgt.w	801899c <_dtoa_r+0x934>
 8018c0a:	9d00      	ldr	r5, [sp, #0]
 8018c0c:	4631      	mov	r1, r6
 8018c0e:	4658      	mov	r0, fp
 8018c10:	f7ff f99e 	bl	8017f50 <quorem>
 8018c14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018c18:	f805 3b01 	strb.w	r3, [r5], #1
 8018c1c:	9a00      	ldr	r2, [sp, #0]
 8018c1e:	1aaa      	subs	r2, r5, r2
 8018c20:	4591      	cmp	r9, r2
 8018c22:	ddba      	ble.n	8018b9a <_dtoa_r+0xb32>
 8018c24:	4659      	mov	r1, fp
 8018c26:	2300      	movs	r3, #0
 8018c28:	220a      	movs	r2, #10
 8018c2a:	4620      	mov	r0, r4
 8018c2c:	f000 f974 	bl	8018f18 <__multadd>
 8018c30:	4683      	mov	fp, r0
 8018c32:	e7eb      	b.n	8018c0c <_dtoa_r+0xba4>
 8018c34:	0801a8bb 	.word	0x0801a8bb
 8018c38:	0801a814 	.word	0x0801a814
 8018c3c:	0801a838 	.word	0x0801a838

08018c40 <std>:
 8018c40:	2300      	movs	r3, #0
 8018c42:	b510      	push	{r4, lr}
 8018c44:	4604      	mov	r4, r0
 8018c46:	e9c0 3300 	strd	r3, r3, [r0]
 8018c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018c4e:	6083      	str	r3, [r0, #8]
 8018c50:	8181      	strh	r1, [r0, #12]
 8018c52:	6643      	str	r3, [r0, #100]	; 0x64
 8018c54:	81c2      	strh	r2, [r0, #14]
 8018c56:	6183      	str	r3, [r0, #24]
 8018c58:	4619      	mov	r1, r3
 8018c5a:	2208      	movs	r2, #8
 8018c5c:	305c      	adds	r0, #92	; 0x5c
 8018c5e:	f7fe fbbb 	bl	80173d8 <memset>
 8018c62:	4b05      	ldr	r3, [pc, #20]	; (8018c78 <std+0x38>)
 8018c64:	6263      	str	r3, [r4, #36]	; 0x24
 8018c66:	4b05      	ldr	r3, [pc, #20]	; (8018c7c <std+0x3c>)
 8018c68:	62a3      	str	r3, [r4, #40]	; 0x28
 8018c6a:	4b05      	ldr	r3, [pc, #20]	; (8018c80 <std+0x40>)
 8018c6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018c6e:	4b05      	ldr	r3, [pc, #20]	; (8018c84 <std+0x44>)
 8018c70:	6224      	str	r4, [r4, #32]
 8018c72:	6323      	str	r3, [r4, #48]	; 0x30
 8018c74:	bd10      	pop	{r4, pc}
 8018c76:	bf00      	nop
 8018c78:	08019ad9 	.word	0x08019ad9
 8018c7c:	08019afb 	.word	0x08019afb
 8018c80:	08019b33 	.word	0x08019b33
 8018c84:	08019b57 	.word	0x08019b57

08018c88 <_cleanup_r>:
 8018c88:	4901      	ldr	r1, [pc, #4]	; (8018c90 <_cleanup_r+0x8>)
 8018c8a:	f000 b8af 	b.w	8018dec <_fwalk_reent>
 8018c8e:	bf00      	nop
 8018c90:	08019e6d 	.word	0x08019e6d

08018c94 <__sfmoreglue>:
 8018c94:	b570      	push	{r4, r5, r6, lr}
 8018c96:	1e4a      	subs	r2, r1, #1
 8018c98:	2568      	movs	r5, #104	; 0x68
 8018c9a:	4355      	muls	r5, r2
 8018c9c:	460e      	mov	r6, r1
 8018c9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018ca2:	f7fe fbf1 	bl	8017488 <_malloc_r>
 8018ca6:	4604      	mov	r4, r0
 8018ca8:	b140      	cbz	r0, 8018cbc <__sfmoreglue+0x28>
 8018caa:	2100      	movs	r1, #0
 8018cac:	e9c0 1600 	strd	r1, r6, [r0]
 8018cb0:	300c      	adds	r0, #12
 8018cb2:	60a0      	str	r0, [r4, #8]
 8018cb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018cb8:	f7fe fb8e 	bl	80173d8 <memset>
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	bd70      	pop	{r4, r5, r6, pc}

08018cc0 <__sfp_lock_acquire>:
 8018cc0:	4801      	ldr	r0, [pc, #4]	; (8018cc8 <__sfp_lock_acquire+0x8>)
 8018cc2:	f000 b8b8 	b.w	8018e36 <__retarget_lock_acquire_recursive>
 8018cc6:	bf00      	nop
 8018cc8:	20001a00 	.word	0x20001a00

08018ccc <__sfp_lock_release>:
 8018ccc:	4801      	ldr	r0, [pc, #4]	; (8018cd4 <__sfp_lock_release+0x8>)
 8018cce:	f000 b8b3 	b.w	8018e38 <__retarget_lock_release_recursive>
 8018cd2:	bf00      	nop
 8018cd4:	20001a00 	.word	0x20001a00

08018cd8 <__sinit_lock_acquire>:
 8018cd8:	4801      	ldr	r0, [pc, #4]	; (8018ce0 <__sinit_lock_acquire+0x8>)
 8018cda:	f000 b8ac 	b.w	8018e36 <__retarget_lock_acquire_recursive>
 8018cde:	bf00      	nop
 8018ce0:	200019fb 	.word	0x200019fb

08018ce4 <__sinit_lock_release>:
 8018ce4:	4801      	ldr	r0, [pc, #4]	; (8018cec <__sinit_lock_release+0x8>)
 8018ce6:	f000 b8a7 	b.w	8018e38 <__retarget_lock_release_recursive>
 8018cea:	bf00      	nop
 8018cec:	200019fb 	.word	0x200019fb

08018cf0 <__sinit>:
 8018cf0:	b510      	push	{r4, lr}
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	f7ff fff0 	bl	8018cd8 <__sinit_lock_acquire>
 8018cf8:	69a3      	ldr	r3, [r4, #24]
 8018cfa:	b11b      	cbz	r3, 8018d04 <__sinit+0x14>
 8018cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d00:	f7ff bff0 	b.w	8018ce4 <__sinit_lock_release>
 8018d04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018d08:	6523      	str	r3, [r4, #80]	; 0x50
 8018d0a:	4b13      	ldr	r3, [pc, #76]	; (8018d58 <__sinit+0x68>)
 8018d0c:	4a13      	ldr	r2, [pc, #76]	; (8018d5c <__sinit+0x6c>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	62a2      	str	r2, [r4, #40]	; 0x28
 8018d12:	42a3      	cmp	r3, r4
 8018d14:	bf04      	itt	eq
 8018d16:	2301      	moveq	r3, #1
 8018d18:	61a3      	streq	r3, [r4, #24]
 8018d1a:	4620      	mov	r0, r4
 8018d1c:	f000 f820 	bl	8018d60 <__sfp>
 8018d20:	6060      	str	r0, [r4, #4]
 8018d22:	4620      	mov	r0, r4
 8018d24:	f000 f81c 	bl	8018d60 <__sfp>
 8018d28:	60a0      	str	r0, [r4, #8]
 8018d2a:	4620      	mov	r0, r4
 8018d2c:	f000 f818 	bl	8018d60 <__sfp>
 8018d30:	2200      	movs	r2, #0
 8018d32:	60e0      	str	r0, [r4, #12]
 8018d34:	2104      	movs	r1, #4
 8018d36:	6860      	ldr	r0, [r4, #4]
 8018d38:	f7ff ff82 	bl	8018c40 <std>
 8018d3c:	68a0      	ldr	r0, [r4, #8]
 8018d3e:	2201      	movs	r2, #1
 8018d40:	2109      	movs	r1, #9
 8018d42:	f7ff ff7d 	bl	8018c40 <std>
 8018d46:	68e0      	ldr	r0, [r4, #12]
 8018d48:	2202      	movs	r2, #2
 8018d4a:	2112      	movs	r1, #18
 8018d4c:	f7ff ff78 	bl	8018c40 <std>
 8018d50:	2301      	movs	r3, #1
 8018d52:	61a3      	str	r3, [r4, #24]
 8018d54:	e7d2      	b.n	8018cfc <__sinit+0xc>
 8018d56:	bf00      	nop
 8018d58:	0801a800 	.word	0x0801a800
 8018d5c:	08018c89 	.word	0x08018c89

08018d60 <__sfp>:
 8018d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d62:	4607      	mov	r7, r0
 8018d64:	f7ff ffac 	bl	8018cc0 <__sfp_lock_acquire>
 8018d68:	4b1e      	ldr	r3, [pc, #120]	; (8018de4 <__sfp+0x84>)
 8018d6a:	681e      	ldr	r6, [r3, #0]
 8018d6c:	69b3      	ldr	r3, [r6, #24]
 8018d6e:	b913      	cbnz	r3, 8018d76 <__sfp+0x16>
 8018d70:	4630      	mov	r0, r6
 8018d72:	f7ff ffbd 	bl	8018cf0 <__sinit>
 8018d76:	3648      	adds	r6, #72	; 0x48
 8018d78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018d7c:	3b01      	subs	r3, #1
 8018d7e:	d503      	bpl.n	8018d88 <__sfp+0x28>
 8018d80:	6833      	ldr	r3, [r6, #0]
 8018d82:	b30b      	cbz	r3, 8018dc8 <__sfp+0x68>
 8018d84:	6836      	ldr	r6, [r6, #0]
 8018d86:	e7f7      	b.n	8018d78 <__sfp+0x18>
 8018d88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018d8c:	b9d5      	cbnz	r5, 8018dc4 <__sfp+0x64>
 8018d8e:	4b16      	ldr	r3, [pc, #88]	; (8018de8 <__sfp+0x88>)
 8018d90:	60e3      	str	r3, [r4, #12]
 8018d92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018d96:	6665      	str	r5, [r4, #100]	; 0x64
 8018d98:	f000 f84c 	bl	8018e34 <__retarget_lock_init_recursive>
 8018d9c:	f7ff ff96 	bl	8018ccc <__sfp_lock_release>
 8018da0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018da4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018da8:	6025      	str	r5, [r4, #0]
 8018daa:	61a5      	str	r5, [r4, #24]
 8018dac:	2208      	movs	r2, #8
 8018dae:	4629      	mov	r1, r5
 8018db0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018db4:	f7fe fb10 	bl	80173d8 <memset>
 8018db8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018dbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dc4:	3468      	adds	r4, #104	; 0x68
 8018dc6:	e7d9      	b.n	8018d7c <__sfp+0x1c>
 8018dc8:	2104      	movs	r1, #4
 8018dca:	4638      	mov	r0, r7
 8018dcc:	f7ff ff62 	bl	8018c94 <__sfmoreglue>
 8018dd0:	4604      	mov	r4, r0
 8018dd2:	6030      	str	r0, [r6, #0]
 8018dd4:	2800      	cmp	r0, #0
 8018dd6:	d1d5      	bne.n	8018d84 <__sfp+0x24>
 8018dd8:	f7ff ff78 	bl	8018ccc <__sfp_lock_release>
 8018ddc:	230c      	movs	r3, #12
 8018dde:	603b      	str	r3, [r7, #0]
 8018de0:	e7ee      	b.n	8018dc0 <__sfp+0x60>
 8018de2:	bf00      	nop
 8018de4:	0801a800 	.word	0x0801a800
 8018de8:	ffff0001 	.word	0xffff0001

08018dec <_fwalk_reent>:
 8018dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018df0:	4606      	mov	r6, r0
 8018df2:	4688      	mov	r8, r1
 8018df4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018df8:	2700      	movs	r7, #0
 8018dfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018dfe:	f1b9 0901 	subs.w	r9, r9, #1
 8018e02:	d505      	bpl.n	8018e10 <_fwalk_reent+0x24>
 8018e04:	6824      	ldr	r4, [r4, #0]
 8018e06:	2c00      	cmp	r4, #0
 8018e08:	d1f7      	bne.n	8018dfa <_fwalk_reent+0xe>
 8018e0a:	4638      	mov	r0, r7
 8018e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e10:	89ab      	ldrh	r3, [r5, #12]
 8018e12:	2b01      	cmp	r3, #1
 8018e14:	d907      	bls.n	8018e26 <_fwalk_reent+0x3a>
 8018e16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	d003      	beq.n	8018e26 <_fwalk_reent+0x3a>
 8018e1e:	4629      	mov	r1, r5
 8018e20:	4630      	mov	r0, r6
 8018e22:	47c0      	blx	r8
 8018e24:	4307      	orrs	r7, r0
 8018e26:	3568      	adds	r5, #104	; 0x68
 8018e28:	e7e9      	b.n	8018dfe <_fwalk_reent+0x12>
	...

08018e2c <_localeconv_r>:
 8018e2c:	4800      	ldr	r0, [pc, #0]	; (8018e30 <_localeconv_r+0x4>)
 8018e2e:	4770      	bx	lr
 8018e30:	20000244 	.word	0x20000244

08018e34 <__retarget_lock_init_recursive>:
 8018e34:	4770      	bx	lr

08018e36 <__retarget_lock_acquire_recursive>:
 8018e36:	4770      	bx	lr

08018e38 <__retarget_lock_release_recursive>:
 8018e38:	4770      	bx	lr
	...

08018e3c <__malloc_lock>:
 8018e3c:	4801      	ldr	r0, [pc, #4]	; (8018e44 <__malloc_lock+0x8>)
 8018e3e:	f7ff bffa 	b.w	8018e36 <__retarget_lock_acquire_recursive>
 8018e42:	bf00      	nop
 8018e44:	200019fc 	.word	0x200019fc

08018e48 <__malloc_unlock>:
 8018e48:	4801      	ldr	r0, [pc, #4]	; (8018e50 <__malloc_unlock+0x8>)
 8018e4a:	f7ff bff5 	b.w	8018e38 <__retarget_lock_release_recursive>
 8018e4e:	bf00      	nop
 8018e50:	200019fc 	.word	0x200019fc

08018e54 <_Balloc>:
 8018e54:	b570      	push	{r4, r5, r6, lr}
 8018e56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018e58:	4604      	mov	r4, r0
 8018e5a:	460d      	mov	r5, r1
 8018e5c:	b976      	cbnz	r6, 8018e7c <_Balloc+0x28>
 8018e5e:	2010      	movs	r0, #16
 8018e60:	f7fe faa4 	bl	80173ac <malloc>
 8018e64:	4602      	mov	r2, r0
 8018e66:	6260      	str	r0, [r4, #36]	; 0x24
 8018e68:	b920      	cbnz	r0, 8018e74 <_Balloc+0x20>
 8018e6a:	4b18      	ldr	r3, [pc, #96]	; (8018ecc <_Balloc+0x78>)
 8018e6c:	4818      	ldr	r0, [pc, #96]	; (8018ed0 <_Balloc+0x7c>)
 8018e6e:	2166      	movs	r1, #102	; 0x66
 8018e70:	f000 ff48 	bl	8019d04 <__assert_func>
 8018e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e78:	6006      	str	r6, [r0, #0]
 8018e7a:	60c6      	str	r6, [r0, #12]
 8018e7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018e7e:	68f3      	ldr	r3, [r6, #12]
 8018e80:	b183      	cbz	r3, 8018ea4 <_Balloc+0x50>
 8018e82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e84:	68db      	ldr	r3, [r3, #12]
 8018e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018e8a:	b9b8      	cbnz	r0, 8018ebc <_Balloc+0x68>
 8018e8c:	2101      	movs	r1, #1
 8018e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8018e92:	1d72      	adds	r2, r6, #5
 8018e94:	0092      	lsls	r2, r2, #2
 8018e96:	4620      	mov	r0, r4
 8018e98:	f000 fb5a 	bl	8019550 <_calloc_r>
 8018e9c:	b160      	cbz	r0, 8018eb8 <_Balloc+0x64>
 8018e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018ea2:	e00e      	b.n	8018ec2 <_Balloc+0x6e>
 8018ea4:	2221      	movs	r2, #33	; 0x21
 8018ea6:	2104      	movs	r1, #4
 8018ea8:	4620      	mov	r0, r4
 8018eaa:	f000 fb51 	bl	8019550 <_calloc_r>
 8018eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018eb0:	60f0      	str	r0, [r6, #12]
 8018eb2:	68db      	ldr	r3, [r3, #12]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d1e4      	bne.n	8018e82 <_Balloc+0x2e>
 8018eb8:	2000      	movs	r0, #0
 8018eba:	bd70      	pop	{r4, r5, r6, pc}
 8018ebc:	6802      	ldr	r2, [r0, #0]
 8018ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018ec8:	e7f7      	b.n	8018eba <_Balloc+0x66>
 8018eca:	bf00      	nop
 8018ecc:	0801a845 	.word	0x0801a845
 8018ed0:	0801a92c 	.word	0x0801a92c

08018ed4 <_Bfree>:
 8018ed4:	b570      	push	{r4, r5, r6, lr}
 8018ed6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018ed8:	4605      	mov	r5, r0
 8018eda:	460c      	mov	r4, r1
 8018edc:	b976      	cbnz	r6, 8018efc <_Bfree+0x28>
 8018ede:	2010      	movs	r0, #16
 8018ee0:	f7fe fa64 	bl	80173ac <malloc>
 8018ee4:	4602      	mov	r2, r0
 8018ee6:	6268      	str	r0, [r5, #36]	; 0x24
 8018ee8:	b920      	cbnz	r0, 8018ef4 <_Bfree+0x20>
 8018eea:	4b09      	ldr	r3, [pc, #36]	; (8018f10 <_Bfree+0x3c>)
 8018eec:	4809      	ldr	r0, [pc, #36]	; (8018f14 <_Bfree+0x40>)
 8018eee:	218a      	movs	r1, #138	; 0x8a
 8018ef0:	f000 ff08 	bl	8019d04 <__assert_func>
 8018ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ef8:	6006      	str	r6, [r0, #0]
 8018efa:	60c6      	str	r6, [r0, #12]
 8018efc:	b13c      	cbz	r4, 8018f0e <_Bfree+0x3a>
 8018efe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018f00:	6862      	ldr	r2, [r4, #4]
 8018f02:	68db      	ldr	r3, [r3, #12]
 8018f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f08:	6021      	str	r1, [r4, #0]
 8018f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f0e:	bd70      	pop	{r4, r5, r6, pc}
 8018f10:	0801a845 	.word	0x0801a845
 8018f14:	0801a92c 	.word	0x0801a92c

08018f18 <__multadd>:
 8018f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f1c:	690e      	ldr	r6, [r1, #16]
 8018f1e:	4607      	mov	r7, r0
 8018f20:	4698      	mov	r8, r3
 8018f22:	460c      	mov	r4, r1
 8018f24:	f101 0014 	add.w	r0, r1, #20
 8018f28:	2300      	movs	r3, #0
 8018f2a:	6805      	ldr	r5, [r0, #0]
 8018f2c:	b2a9      	uxth	r1, r5
 8018f2e:	fb02 8101 	mla	r1, r2, r1, r8
 8018f32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018f36:	0c2d      	lsrs	r5, r5, #16
 8018f38:	fb02 c505 	mla	r5, r2, r5, ip
 8018f3c:	b289      	uxth	r1, r1
 8018f3e:	3301      	adds	r3, #1
 8018f40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018f44:	429e      	cmp	r6, r3
 8018f46:	f840 1b04 	str.w	r1, [r0], #4
 8018f4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018f4e:	dcec      	bgt.n	8018f2a <__multadd+0x12>
 8018f50:	f1b8 0f00 	cmp.w	r8, #0
 8018f54:	d022      	beq.n	8018f9c <__multadd+0x84>
 8018f56:	68a3      	ldr	r3, [r4, #8]
 8018f58:	42b3      	cmp	r3, r6
 8018f5a:	dc19      	bgt.n	8018f90 <__multadd+0x78>
 8018f5c:	6861      	ldr	r1, [r4, #4]
 8018f5e:	4638      	mov	r0, r7
 8018f60:	3101      	adds	r1, #1
 8018f62:	f7ff ff77 	bl	8018e54 <_Balloc>
 8018f66:	4605      	mov	r5, r0
 8018f68:	b928      	cbnz	r0, 8018f76 <__multadd+0x5e>
 8018f6a:	4602      	mov	r2, r0
 8018f6c:	4b0d      	ldr	r3, [pc, #52]	; (8018fa4 <__multadd+0x8c>)
 8018f6e:	480e      	ldr	r0, [pc, #56]	; (8018fa8 <__multadd+0x90>)
 8018f70:	21b5      	movs	r1, #181	; 0xb5
 8018f72:	f000 fec7 	bl	8019d04 <__assert_func>
 8018f76:	6922      	ldr	r2, [r4, #16]
 8018f78:	3202      	adds	r2, #2
 8018f7a:	f104 010c 	add.w	r1, r4, #12
 8018f7e:	0092      	lsls	r2, r2, #2
 8018f80:	300c      	adds	r0, #12
 8018f82:	f7fe fa1b 	bl	80173bc <memcpy>
 8018f86:	4621      	mov	r1, r4
 8018f88:	4638      	mov	r0, r7
 8018f8a:	f7ff ffa3 	bl	8018ed4 <_Bfree>
 8018f8e:	462c      	mov	r4, r5
 8018f90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018f94:	3601      	adds	r6, #1
 8018f96:	f8c3 8014 	str.w	r8, [r3, #20]
 8018f9a:	6126      	str	r6, [r4, #16]
 8018f9c:	4620      	mov	r0, r4
 8018f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fa2:	bf00      	nop
 8018fa4:	0801a8bb 	.word	0x0801a8bb
 8018fa8:	0801a92c 	.word	0x0801a92c

08018fac <__hi0bits>:
 8018fac:	0c03      	lsrs	r3, r0, #16
 8018fae:	041b      	lsls	r3, r3, #16
 8018fb0:	b9d3      	cbnz	r3, 8018fe8 <__hi0bits+0x3c>
 8018fb2:	0400      	lsls	r0, r0, #16
 8018fb4:	2310      	movs	r3, #16
 8018fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018fba:	bf04      	itt	eq
 8018fbc:	0200      	lsleq	r0, r0, #8
 8018fbe:	3308      	addeq	r3, #8
 8018fc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018fc4:	bf04      	itt	eq
 8018fc6:	0100      	lsleq	r0, r0, #4
 8018fc8:	3304      	addeq	r3, #4
 8018fca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018fce:	bf04      	itt	eq
 8018fd0:	0080      	lsleq	r0, r0, #2
 8018fd2:	3302      	addeq	r3, #2
 8018fd4:	2800      	cmp	r0, #0
 8018fd6:	db05      	blt.n	8018fe4 <__hi0bits+0x38>
 8018fd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018fdc:	f103 0301 	add.w	r3, r3, #1
 8018fe0:	bf08      	it	eq
 8018fe2:	2320      	moveq	r3, #32
 8018fe4:	4618      	mov	r0, r3
 8018fe6:	4770      	bx	lr
 8018fe8:	2300      	movs	r3, #0
 8018fea:	e7e4      	b.n	8018fb6 <__hi0bits+0xa>

08018fec <__lo0bits>:
 8018fec:	6803      	ldr	r3, [r0, #0]
 8018fee:	f013 0207 	ands.w	r2, r3, #7
 8018ff2:	4601      	mov	r1, r0
 8018ff4:	d00b      	beq.n	801900e <__lo0bits+0x22>
 8018ff6:	07da      	lsls	r2, r3, #31
 8018ff8:	d424      	bmi.n	8019044 <__lo0bits+0x58>
 8018ffa:	0798      	lsls	r0, r3, #30
 8018ffc:	bf49      	itett	mi
 8018ffe:	085b      	lsrmi	r3, r3, #1
 8019000:	089b      	lsrpl	r3, r3, #2
 8019002:	2001      	movmi	r0, #1
 8019004:	600b      	strmi	r3, [r1, #0]
 8019006:	bf5c      	itt	pl
 8019008:	600b      	strpl	r3, [r1, #0]
 801900a:	2002      	movpl	r0, #2
 801900c:	4770      	bx	lr
 801900e:	b298      	uxth	r0, r3
 8019010:	b9b0      	cbnz	r0, 8019040 <__lo0bits+0x54>
 8019012:	0c1b      	lsrs	r3, r3, #16
 8019014:	2010      	movs	r0, #16
 8019016:	f013 0fff 	tst.w	r3, #255	; 0xff
 801901a:	bf04      	itt	eq
 801901c:	0a1b      	lsreq	r3, r3, #8
 801901e:	3008      	addeq	r0, #8
 8019020:	071a      	lsls	r2, r3, #28
 8019022:	bf04      	itt	eq
 8019024:	091b      	lsreq	r3, r3, #4
 8019026:	3004      	addeq	r0, #4
 8019028:	079a      	lsls	r2, r3, #30
 801902a:	bf04      	itt	eq
 801902c:	089b      	lsreq	r3, r3, #2
 801902e:	3002      	addeq	r0, #2
 8019030:	07da      	lsls	r2, r3, #31
 8019032:	d403      	bmi.n	801903c <__lo0bits+0x50>
 8019034:	085b      	lsrs	r3, r3, #1
 8019036:	f100 0001 	add.w	r0, r0, #1
 801903a:	d005      	beq.n	8019048 <__lo0bits+0x5c>
 801903c:	600b      	str	r3, [r1, #0]
 801903e:	4770      	bx	lr
 8019040:	4610      	mov	r0, r2
 8019042:	e7e8      	b.n	8019016 <__lo0bits+0x2a>
 8019044:	2000      	movs	r0, #0
 8019046:	4770      	bx	lr
 8019048:	2020      	movs	r0, #32
 801904a:	4770      	bx	lr

0801904c <__i2b>:
 801904c:	b510      	push	{r4, lr}
 801904e:	460c      	mov	r4, r1
 8019050:	2101      	movs	r1, #1
 8019052:	f7ff feff 	bl	8018e54 <_Balloc>
 8019056:	4602      	mov	r2, r0
 8019058:	b928      	cbnz	r0, 8019066 <__i2b+0x1a>
 801905a:	4b05      	ldr	r3, [pc, #20]	; (8019070 <__i2b+0x24>)
 801905c:	4805      	ldr	r0, [pc, #20]	; (8019074 <__i2b+0x28>)
 801905e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019062:	f000 fe4f 	bl	8019d04 <__assert_func>
 8019066:	2301      	movs	r3, #1
 8019068:	6144      	str	r4, [r0, #20]
 801906a:	6103      	str	r3, [r0, #16]
 801906c:	bd10      	pop	{r4, pc}
 801906e:	bf00      	nop
 8019070:	0801a8bb 	.word	0x0801a8bb
 8019074:	0801a92c 	.word	0x0801a92c

08019078 <__multiply>:
 8019078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801907c:	4614      	mov	r4, r2
 801907e:	690a      	ldr	r2, [r1, #16]
 8019080:	6923      	ldr	r3, [r4, #16]
 8019082:	429a      	cmp	r2, r3
 8019084:	bfb8      	it	lt
 8019086:	460b      	movlt	r3, r1
 8019088:	460d      	mov	r5, r1
 801908a:	bfbc      	itt	lt
 801908c:	4625      	movlt	r5, r4
 801908e:	461c      	movlt	r4, r3
 8019090:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019094:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019098:	68ab      	ldr	r3, [r5, #8]
 801909a:	6869      	ldr	r1, [r5, #4]
 801909c:	eb0a 0709 	add.w	r7, sl, r9
 80190a0:	42bb      	cmp	r3, r7
 80190a2:	b085      	sub	sp, #20
 80190a4:	bfb8      	it	lt
 80190a6:	3101      	addlt	r1, #1
 80190a8:	f7ff fed4 	bl	8018e54 <_Balloc>
 80190ac:	b930      	cbnz	r0, 80190bc <__multiply+0x44>
 80190ae:	4602      	mov	r2, r0
 80190b0:	4b42      	ldr	r3, [pc, #264]	; (80191bc <__multiply+0x144>)
 80190b2:	4843      	ldr	r0, [pc, #268]	; (80191c0 <__multiply+0x148>)
 80190b4:	f240 115d 	movw	r1, #349	; 0x15d
 80190b8:	f000 fe24 	bl	8019d04 <__assert_func>
 80190bc:	f100 0614 	add.w	r6, r0, #20
 80190c0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80190c4:	4633      	mov	r3, r6
 80190c6:	2200      	movs	r2, #0
 80190c8:	4543      	cmp	r3, r8
 80190ca:	d31e      	bcc.n	801910a <__multiply+0x92>
 80190cc:	f105 0c14 	add.w	ip, r5, #20
 80190d0:	f104 0314 	add.w	r3, r4, #20
 80190d4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80190d8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80190dc:	9202      	str	r2, [sp, #8]
 80190de:	ebac 0205 	sub.w	r2, ip, r5
 80190e2:	3a15      	subs	r2, #21
 80190e4:	f022 0203 	bic.w	r2, r2, #3
 80190e8:	3204      	adds	r2, #4
 80190ea:	f105 0115 	add.w	r1, r5, #21
 80190ee:	458c      	cmp	ip, r1
 80190f0:	bf38      	it	cc
 80190f2:	2204      	movcc	r2, #4
 80190f4:	9201      	str	r2, [sp, #4]
 80190f6:	9a02      	ldr	r2, [sp, #8]
 80190f8:	9303      	str	r3, [sp, #12]
 80190fa:	429a      	cmp	r2, r3
 80190fc:	d808      	bhi.n	8019110 <__multiply+0x98>
 80190fe:	2f00      	cmp	r7, #0
 8019100:	dc55      	bgt.n	80191ae <__multiply+0x136>
 8019102:	6107      	str	r7, [r0, #16]
 8019104:	b005      	add	sp, #20
 8019106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801910a:	f843 2b04 	str.w	r2, [r3], #4
 801910e:	e7db      	b.n	80190c8 <__multiply+0x50>
 8019110:	f8b3 a000 	ldrh.w	sl, [r3]
 8019114:	f1ba 0f00 	cmp.w	sl, #0
 8019118:	d020      	beq.n	801915c <__multiply+0xe4>
 801911a:	f105 0e14 	add.w	lr, r5, #20
 801911e:	46b1      	mov	r9, r6
 8019120:	2200      	movs	r2, #0
 8019122:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019126:	f8d9 b000 	ldr.w	fp, [r9]
 801912a:	b2a1      	uxth	r1, r4
 801912c:	fa1f fb8b 	uxth.w	fp, fp
 8019130:	fb0a b101 	mla	r1, sl, r1, fp
 8019134:	4411      	add	r1, r2
 8019136:	f8d9 2000 	ldr.w	r2, [r9]
 801913a:	0c24      	lsrs	r4, r4, #16
 801913c:	0c12      	lsrs	r2, r2, #16
 801913e:	fb0a 2404 	mla	r4, sl, r4, r2
 8019142:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019146:	b289      	uxth	r1, r1
 8019148:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801914c:	45f4      	cmp	ip, lr
 801914e:	f849 1b04 	str.w	r1, [r9], #4
 8019152:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019156:	d8e4      	bhi.n	8019122 <__multiply+0xaa>
 8019158:	9901      	ldr	r1, [sp, #4]
 801915a:	5072      	str	r2, [r6, r1]
 801915c:	9a03      	ldr	r2, [sp, #12]
 801915e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019162:	3304      	adds	r3, #4
 8019164:	f1b9 0f00 	cmp.w	r9, #0
 8019168:	d01f      	beq.n	80191aa <__multiply+0x132>
 801916a:	6834      	ldr	r4, [r6, #0]
 801916c:	f105 0114 	add.w	r1, r5, #20
 8019170:	46b6      	mov	lr, r6
 8019172:	f04f 0a00 	mov.w	sl, #0
 8019176:	880a      	ldrh	r2, [r1, #0]
 8019178:	f8be b002 	ldrh.w	fp, [lr, #2]
 801917c:	fb09 b202 	mla	r2, r9, r2, fp
 8019180:	4492      	add	sl, r2
 8019182:	b2a4      	uxth	r4, r4
 8019184:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019188:	f84e 4b04 	str.w	r4, [lr], #4
 801918c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019190:	f8be 2000 	ldrh.w	r2, [lr]
 8019194:	0c24      	lsrs	r4, r4, #16
 8019196:	fb09 2404 	mla	r4, r9, r4, r2
 801919a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801919e:	458c      	cmp	ip, r1
 80191a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80191a4:	d8e7      	bhi.n	8019176 <__multiply+0xfe>
 80191a6:	9a01      	ldr	r2, [sp, #4]
 80191a8:	50b4      	str	r4, [r6, r2]
 80191aa:	3604      	adds	r6, #4
 80191ac:	e7a3      	b.n	80190f6 <__multiply+0x7e>
 80191ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d1a5      	bne.n	8019102 <__multiply+0x8a>
 80191b6:	3f01      	subs	r7, #1
 80191b8:	e7a1      	b.n	80190fe <__multiply+0x86>
 80191ba:	bf00      	nop
 80191bc:	0801a8bb 	.word	0x0801a8bb
 80191c0:	0801a92c 	.word	0x0801a92c

080191c4 <__pow5mult>:
 80191c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191c8:	4615      	mov	r5, r2
 80191ca:	f012 0203 	ands.w	r2, r2, #3
 80191ce:	4606      	mov	r6, r0
 80191d0:	460f      	mov	r7, r1
 80191d2:	d007      	beq.n	80191e4 <__pow5mult+0x20>
 80191d4:	4c25      	ldr	r4, [pc, #148]	; (801926c <__pow5mult+0xa8>)
 80191d6:	3a01      	subs	r2, #1
 80191d8:	2300      	movs	r3, #0
 80191da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80191de:	f7ff fe9b 	bl	8018f18 <__multadd>
 80191e2:	4607      	mov	r7, r0
 80191e4:	10ad      	asrs	r5, r5, #2
 80191e6:	d03d      	beq.n	8019264 <__pow5mult+0xa0>
 80191e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80191ea:	b97c      	cbnz	r4, 801920c <__pow5mult+0x48>
 80191ec:	2010      	movs	r0, #16
 80191ee:	f7fe f8dd 	bl	80173ac <malloc>
 80191f2:	4602      	mov	r2, r0
 80191f4:	6270      	str	r0, [r6, #36]	; 0x24
 80191f6:	b928      	cbnz	r0, 8019204 <__pow5mult+0x40>
 80191f8:	4b1d      	ldr	r3, [pc, #116]	; (8019270 <__pow5mult+0xac>)
 80191fa:	481e      	ldr	r0, [pc, #120]	; (8019274 <__pow5mult+0xb0>)
 80191fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019200:	f000 fd80 	bl	8019d04 <__assert_func>
 8019204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019208:	6004      	str	r4, [r0, #0]
 801920a:	60c4      	str	r4, [r0, #12]
 801920c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019214:	b94c      	cbnz	r4, 801922a <__pow5mult+0x66>
 8019216:	f240 2171 	movw	r1, #625	; 0x271
 801921a:	4630      	mov	r0, r6
 801921c:	f7ff ff16 	bl	801904c <__i2b>
 8019220:	2300      	movs	r3, #0
 8019222:	f8c8 0008 	str.w	r0, [r8, #8]
 8019226:	4604      	mov	r4, r0
 8019228:	6003      	str	r3, [r0, #0]
 801922a:	f04f 0900 	mov.w	r9, #0
 801922e:	07eb      	lsls	r3, r5, #31
 8019230:	d50a      	bpl.n	8019248 <__pow5mult+0x84>
 8019232:	4639      	mov	r1, r7
 8019234:	4622      	mov	r2, r4
 8019236:	4630      	mov	r0, r6
 8019238:	f7ff ff1e 	bl	8019078 <__multiply>
 801923c:	4639      	mov	r1, r7
 801923e:	4680      	mov	r8, r0
 8019240:	4630      	mov	r0, r6
 8019242:	f7ff fe47 	bl	8018ed4 <_Bfree>
 8019246:	4647      	mov	r7, r8
 8019248:	106d      	asrs	r5, r5, #1
 801924a:	d00b      	beq.n	8019264 <__pow5mult+0xa0>
 801924c:	6820      	ldr	r0, [r4, #0]
 801924e:	b938      	cbnz	r0, 8019260 <__pow5mult+0x9c>
 8019250:	4622      	mov	r2, r4
 8019252:	4621      	mov	r1, r4
 8019254:	4630      	mov	r0, r6
 8019256:	f7ff ff0f 	bl	8019078 <__multiply>
 801925a:	6020      	str	r0, [r4, #0]
 801925c:	f8c0 9000 	str.w	r9, [r0]
 8019260:	4604      	mov	r4, r0
 8019262:	e7e4      	b.n	801922e <__pow5mult+0x6a>
 8019264:	4638      	mov	r0, r7
 8019266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801926a:	bf00      	nop
 801926c:	0801aa80 	.word	0x0801aa80
 8019270:	0801a845 	.word	0x0801a845
 8019274:	0801a92c 	.word	0x0801a92c

08019278 <__lshift>:
 8019278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801927c:	460c      	mov	r4, r1
 801927e:	6849      	ldr	r1, [r1, #4]
 8019280:	6923      	ldr	r3, [r4, #16]
 8019282:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019286:	68a3      	ldr	r3, [r4, #8]
 8019288:	4607      	mov	r7, r0
 801928a:	4691      	mov	r9, r2
 801928c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019290:	f108 0601 	add.w	r6, r8, #1
 8019294:	42b3      	cmp	r3, r6
 8019296:	db0b      	blt.n	80192b0 <__lshift+0x38>
 8019298:	4638      	mov	r0, r7
 801929a:	f7ff fddb 	bl	8018e54 <_Balloc>
 801929e:	4605      	mov	r5, r0
 80192a0:	b948      	cbnz	r0, 80192b6 <__lshift+0x3e>
 80192a2:	4602      	mov	r2, r0
 80192a4:	4b28      	ldr	r3, [pc, #160]	; (8019348 <__lshift+0xd0>)
 80192a6:	4829      	ldr	r0, [pc, #164]	; (801934c <__lshift+0xd4>)
 80192a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80192ac:	f000 fd2a 	bl	8019d04 <__assert_func>
 80192b0:	3101      	adds	r1, #1
 80192b2:	005b      	lsls	r3, r3, #1
 80192b4:	e7ee      	b.n	8019294 <__lshift+0x1c>
 80192b6:	2300      	movs	r3, #0
 80192b8:	f100 0114 	add.w	r1, r0, #20
 80192bc:	f100 0210 	add.w	r2, r0, #16
 80192c0:	4618      	mov	r0, r3
 80192c2:	4553      	cmp	r3, sl
 80192c4:	db33      	blt.n	801932e <__lshift+0xb6>
 80192c6:	6920      	ldr	r0, [r4, #16]
 80192c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80192cc:	f104 0314 	add.w	r3, r4, #20
 80192d0:	f019 091f 	ands.w	r9, r9, #31
 80192d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80192d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80192dc:	d02b      	beq.n	8019336 <__lshift+0xbe>
 80192de:	f1c9 0e20 	rsb	lr, r9, #32
 80192e2:	468a      	mov	sl, r1
 80192e4:	2200      	movs	r2, #0
 80192e6:	6818      	ldr	r0, [r3, #0]
 80192e8:	fa00 f009 	lsl.w	r0, r0, r9
 80192ec:	4302      	orrs	r2, r0
 80192ee:	f84a 2b04 	str.w	r2, [sl], #4
 80192f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80192f6:	459c      	cmp	ip, r3
 80192f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80192fc:	d8f3      	bhi.n	80192e6 <__lshift+0x6e>
 80192fe:	ebac 0304 	sub.w	r3, ip, r4
 8019302:	3b15      	subs	r3, #21
 8019304:	f023 0303 	bic.w	r3, r3, #3
 8019308:	3304      	adds	r3, #4
 801930a:	f104 0015 	add.w	r0, r4, #21
 801930e:	4584      	cmp	ip, r0
 8019310:	bf38      	it	cc
 8019312:	2304      	movcc	r3, #4
 8019314:	50ca      	str	r2, [r1, r3]
 8019316:	b10a      	cbz	r2, 801931c <__lshift+0xa4>
 8019318:	f108 0602 	add.w	r6, r8, #2
 801931c:	3e01      	subs	r6, #1
 801931e:	4638      	mov	r0, r7
 8019320:	612e      	str	r6, [r5, #16]
 8019322:	4621      	mov	r1, r4
 8019324:	f7ff fdd6 	bl	8018ed4 <_Bfree>
 8019328:	4628      	mov	r0, r5
 801932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801932e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019332:	3301      	adds	r3, #1
 8019334:	e7c5      	b.n	80192c2 <__lshift+0x4a>
 8019336:	3904      	subs	r1, #4
 8019338:	f853 2b04 	ldr.w	r2, [r3], #4
 801933c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019340:	459c      	cmp	ip, r3
 8019342:	d8f9      	bhi.n	8019338 <__lshift+0xc0>
 8019344:	e7ea      	b.n	801931c <__lshift+0xa4>
 8019346:	bf00      	nop
 8019348:	0801a8bb 	.word	0x0801a8bb
 801934c:	0801a92c 	.word	0x0801a92c

08019350 <__mcmp>:
 8019350:	b530      	push	{r4, r5, lr}
 8019352:	6902      	ldr	r2, [r0, #16]
 8019354:	690c      	ldr	r4, [r1, #16]
 8019356:	1b12      	subs	r2, r2, r4
 8019358:	d10e      	bne.n	8019378 <__mcmp+0x28>
 801935a:	f100 0314 	add.w	r3, r0, #20
 801935e:	3114      	adds	r1, #20
 8019360:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019364:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019368:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801936c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019370:	42a5      	cmp	r5, r4
 8019372:	d003      	beq.n	801937c <__mcmp+0x2c>
 8019374:	d305      	bcc.n	8019382 <__mcmp+0x32>
 8019376:	2201      	movs	r2, #1
 8019378:	4610      	mov	r0, r2
 801937a:	bd30      	pop	{r4, r5, pc}
 801937c:	4283      	cmp	r3, r0
 801937e:	d3f3      	bcc.n	8019368 <__mcmp+0x18>
 8019380:	e7fa      	b.n	8019378 <__mcmp+0x28>
 8019382:	f04f 32ff 	mov.w	r2, #4294967295
 8019386:	e7f7      	b.n	8019378 <__mcmp+0x28>

08019388 <__mdiff>:
 8019388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801938c:	460c      	mov	r4, r1
 801938e:	4606      	mov	r6, r0
 8019390:	4611      	mov	r1, r2
 8019392:	4620      	mov	r0, r4
 8019394:	4617      	mov	r7, r2
 8019396:	f7ff ffdb 	bl	8019350 <__mcmp>
 801939a:	1e05      	subs	r5, r0, #0
 801939c:	d110      	bne.n	80193c0 <__mdiff+0x38>
 801939e:	4629      	mov	r1, r5
 80193a0:	4630      	mov	r0, r6
 80193a2:	f7ff fd57 	bl	8018e54 <_Balloc>
 80193a6:	b930      	cbnz	r0, 80193b6 <__mdiff+0x2e>
 80193a8:	4b39      	ldr	r3, [pc, #228]	; (8019490 <__mdiff+0x108>)
 80193aa:	4602      	mov	r2, r0
 80193ac:	f240 2132 	movw	r1, #562	; 0x232
 80193b0:	4838      	ldr	r0, [pc, #224]	; (8019494 <__mdiff+0x10c>)
 80193b2:	f000 fca7 	bl	8019d04 <__assert_func>
 80193b6:	2301      	movs	r3, #1
 80193b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80193bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193c0:	bfa4      	itt	ge
 80193c2:	463b      	movge	r3, r7
 80193c4:	4627      	movge	r7, r4
 80193c6:	4630      	mov	r0, r6
 80193c8:	6879      	ldr	r1, [r7, #4]
 80193ca:	bfa6      	itte	ge
 80193cc:	461c      	movge	r4, r3
 80193ce:	2500      	movge	r5, #0
 80193d0:	2501      	movlt	r5, #1
 80193d2:	f7ff fd3f 	bl	8018e54 <_Balloc>
 80193d6:	b920      	cbnz	r0, 80193e2 <__mdiff+0x5a>
 80193d8:	4b2d      	ldr	r3, [pc, #180]	; (8019490 <__mdiff+0x108>)
 80193da:	4602      	mov	r2, r0
 80193dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80193e0:	e7e6      	b.n	80193b0 <__mdiff+0x28>
 80193e2:	693e      	ldr	r6, [r7, #16]
 80193e4:	60c5      	str	r5, [r0, #12]
 80193e6:	6925      	ldr	r5, [r4, #16]
 80193e8:	f107 0114 	add.w	r1, r7, #20
 80193ec:	f104 0914 	add.w	r9, r4, #20
 80193f0:	f100 0e14 	add.w	lr, r0, #20
 80193f4:	f107 0210 	add.w	r2, r7, #16
 80193f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80193fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019400:	46f2      	mov	sl, lr
 8019402:	2700      	movs	r7, #0
 8019404:	f859 3b04 	ldr.w	r3, [r9], #4
 8019408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801940c:	fa1f f883 	uxth.w	r8, r3
 8019410:	fa17 f78b 	uxtah	r7, r7, fp
 8019414:	0c1b      	lsrs	r3, r3, #16
 8019416:	eba7 0808 	sub.w	r8, r7, r8
 801941a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801941e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019422:	fa1f f888 	uxth.w	r8, r8
 8019426:	141f      	asrs	r7, r3, #16
 8019428:	454d      	cmp	r5, r9
 801942a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801942e:	f84a 3b04 	str.w	r3, [sl], #4
 8019432:	d8e7      	bhi.n	8019404 <__mdiff+0x7c>
 8019434:	1b2b      	subs	r3, r5, r4
 8019436:	3b15      	subs	r3, #21
 8019438:	f023 0303 	bic.w	r3, r3, #3
 801943c:	3304      	adds	r3, #4
 801943e:	3415      	adds	r4, #21
 8019440:	42a5      	cmp	r5, r4
 8019442:	bf38      	it	cc
 8019444:	2304      	movcc	r3, #4
 8019446:	4419      	add	r1, r3
 8019448:	4473      	add	r3, lr
 801944a:	469e      	mov	lr, r3
 801944c:	460d      	mov	r5, r1
 801944e:	4565      	cmp	r5, ip
 8019450:	d30e      	bcc.n	8019470 <__mdiff+0xe8>
 8019452:	f10c 0203 	add.w	r2, ip, #3
 8019456:	1a52      	subs	r2, r2, r1
 8019458:	f022 0203 	bic.w	r2, r2, #3
 801945c:	3903      	subs	r1, #3
 801945e:	458c      	cmp	ip, r1
 8019460:	bf38      	it	cc
 8019462:	2200      	movcc	r2, #0
 8019464:	441a      	add	r2, r3
 8019466:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801946a:	b17b      	cbz	r3, 801948c <__mdiff+0x104>
 801946c:	6106      	str	r6, [r0, #16]
 801946e:	e7a5      	b.n	80193bc <__mdiff+0x34>
 8019470:	f855 8b04 	ldr.w	r8, [r5], #4
 8019474:	fa17 f488 	uxtah	r4, r7, r8
 8019478:	1422      	asrs	r2, r4, #16
 801947a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801947e:	b2a4      	uxth	r4, r4
 8019480:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019484:	f84e 4b04 	str.w	r4, [lr], #4
 8019488:	1417      	asrs	r7, r2, #16
 801948a:	e7e0      	b.n	801944e <__mdiff+0xc6>
 801948c:	3e01      	subs	r6, #1
 801948e:	e7ea      	b.n	8019466 <__mdiff+0xde>
 8019490:	0801a8bb 	.word	0x0801a8bb
 8019494:	0801a92c 	.word	0x0801a92c

08019498 <__d2b>:
 8019498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801949c:	4689      	mov	r9, r1
 801949e:	2101      	movs	r1, #1
 80194a0:	ec57 6b10 	vmov	r6, r7, d0
 80194a4:	4690      	mov	r8, r2
 80194a6:	f7ff fcd5 	bl	8018e54 <_Balloc>
 80194aa:	4604      	mov	r4, r0
 80194ac:	b930      	cbnz	r0, 80194bc <__d2b+0x24>
 80194ae:	4602      	mov	r2, r0
 80194b0:	4b25      	ldr	r3, [pc, #148]	; (8019548 <__d2b+0xb0>)
 80194b2:	4826      	ldr	r0, [pc, #152]	; (801954c <__d2b+0xb4>)
 80194b4:	f240 310a 	movw	r1, #778	; 0x30a
 80194b8:	f000 fc24 	bl	8019d04 <__assert_func>
 80194bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80194c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80194c4:	bb35      	cbnz	r5, 8019514 <__d2b+0x7c>
 80194c6:	2e00      	cmp	r6, #0
 80194c8:	9301      	str	r3, [sp, #4]
 80194ca:	d028      	beq.n	801951e <__d2b+0x86>
 80194cc:	4668      	mov	r0, sp
 80194ce:	9600      	str	r6, [sp, #0]
 80194d0:	f7ff fd8c 	bl	8018fec <__lo0bits>
 80194d4:	9900      	ldr	r1, [sp, #0]
 80194d6:	b300      	cbz	r0, 801951a <__d2b+0x82>
 80194d8:	9a01      	ldr	r2, [sp, #4]
 80194da:	f1c0 0320 	rsb	r3, r0, #32
 80194de:	fa02 f303 	lsl.w	r3, r2, r3
 80194e2:	430b      	orrs	r3, r1
 80194e4:	40c2      	lsrs	r2, r0
 80194e6:	6163      	str	r3, [r4, #20]
 80194e8:	9201      	str	r2, [sp, #4]
 80194ea:	9b01      	ldr	r3, [sp, #4]
 80194ec:	61a3      	str	r3, [r4, #24]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	bf14      	ite	ne
 80194f2:	2202      	movne	r2, #2
 80194f4:	2201      	moveq	r2, #1
 80194f6:	6122      	str	r2, [r4, #16]
 80194f8:	b1d5      	cbz	r5, 8019530 <__d2b+0x98>
 80194fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80194fe:	4405      	add	r5, r0
 8019500:	f8c9 5000 	str.w	r5, [r9]
 8019504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019508:	f8c8 0000 	str.w	r0, [r8]
 801950c:	4620      	mov	r0, r4
 801950e:	b003      	add	sp, #12
 8019510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019518:	e7d5      	b.n	80194c6 <__d2b+0x2e>
 801951a:	6161      	str	r1, [r4, #20]
 801951c:	e7e5      	b.n	80194ea <__d2b+0x52>
 801951e:	a801      	add	r0, sp, #4
 8019520:	f7ff fd64 	bl	8018fec <__lo0bits>
 8019524:	9b01      	ldr	r3, [sp, #4]
 8019526:	6163      	str	r3, [r4, #20]
 8019528:	2201      	movs	r2, #1
 801952a:	6122      	str	r2, [r4, #16]
 801952c:	3020      	adds	r0, #32
 801952e:	e7e3      	b.n	80194f8 <__d2b+0x60>
 8019530:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019534:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019538:	f8c9 0000 	str.w	r0, [r9]
 801953c:	6918      	ldr	r0, [r3, #16]
 801953e:	f7ff fd35 	bl	8018fac <__hi0bits>
 8019542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019546:	e7df      	b.n	8019508 <__d2b+0x70>
 8019548:	0801a8bb 	.word	0x0801a8bb
 801954c:	0801a92c 	.word	0x0801a92c

08019550 <_calloc_r>:
 8019550:	b513      	push	{r0, r1, r4, lr}
 8019552:	434a      	muls	r2, r1
 8019554:	4611      	mov	r1, r2
 8019556:	9201      	str	r2, [sp, #4]
 8019558:	f7fd ff96 	bl	8017488 <_malloc_r>
 801955c:	4604      	mov	r4, r0
 801955e:	b118      	cbz	r0, 8019568 <_calloc_r+0x18>
 8019560:	9a01      	ldr	r2, [sp, #4]
 8019562:	2100      	movs	r1, #0
 8019564:	f7fd ff38 	bl	80173d8 <memset>
 8019568:	4620      	mov	r0, r4
 801956a:	b002      	add	sp, #8
 801956c:	bd10      	pop	{r4, pc}

0801956e <__ssputs_r>:
 801956e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019572:	688e      	ldr	r6, [r1, #8]
 8019574:	429e      	cmp	r6, r3
 8019576:	4682      	mov	sl, r0
 8019578:	460c      	mov	r4, r1
 801957a:	4690      	mov	r8, r2
 801957c:	461f      	mov	r7, r3
 801957e:	d838      	bhi.n	80195f2 <__ssputs_r+0x84>
 8019580:	898a      	ldrh	r2, [r1, #12]
 8019582:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019586:	d032      	beq.n	80195ee <__ssputs_r+0x80>
 8019588:	6825      	ldr	r5, [r4, #0]
 801958a:	6909      	ldr	r1, [r1, #16]
 801958c:	eba5 0901 	sub.w	r9, r5, r1
 8019590:	6965      	ldr	r5, [r4, #20]
 8019592:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019596:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801959a:	3301      	adds	r3, #1
 801959c:	444b      	add	r3, r9
 801959e:	106d      	asrs	r5, r5, #1
 80195a0:	429d      	cmp	r5, r3
 80195a2:	bf38      	it	cc
 80195a4:	461d      	movcc	r5, r3
 80195a6:	0553      	lsls	r3, r2, #21
 80195a8:	d531      	bpl.n	801960e <__ssputs_r+0xa0>
 80195aa:	4629      	mov	r1, r5
 80195ac:	f7fd ff6c 	bl	8017488 <_malloc_r>
 80195b0:	4606      	mov	r6, r0
 80195b2:	b950      	cbnz	r0, 80195ca <__ssputs_r+0x5c>
 80195b4:	230c      	movs	r3, #12
 80195b6:	f8ca 3000 	str.w	r3, [sl]
 80195ba:	89a3      	ldrh	r3, [r4, #12]
 80195bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195c0:	81a3      	strh	r3, [r4, #12]
 80195c2:	f04f 30ff 	mov.w	r0, #4294967295
 80195c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195ca:	6921      	ldr	r1, [r4, #16]
 80195cc:	464a      	mov	r2, r9
 80195ce:	f7fd fef5 	bl	80173bc <memcpy>
 80195d2:	89a3      	ldrh	r3, [r4, #12]
 80195d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80195d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80195dc:	81a3      	strh	r3, [r4, #12]
 80195de:	6126      	str	r6, [r4, #16]
 80195e0:	6165      	str	r5, [r4, #20]
 80195e2:	444e      	add	r6, r9
 80195e4:	eba5 0509 	sub.w	r5, r5, r9
 80195e8:	6026      	str	r6, [r4, #0]
 80195ea:	60a5      	str	r5, [r4, #8]
 80195ec:	463e      	mov	r6, r7
 80195ee:	42be      	cmp	r6, r7
 80195f0:	d900      	bls.n	80195f4 <__ssputs_r+0x86>
 80195f2:	463e      	mov	r6, r7
 80195f4:	4632      	mov	r2, r6
 80195f6:	6820      	ldr	r0, [r4, #0]
 80195f8:	4641      	mov	r1, r8
 80195fa:	f000 fd0d 	bl	801a018 <memmove>
 80195fe:	68a3      	ldr	r3, [r4, #8]
 8019600:	6822      	ldr	r2, [r4, #0]
 8019602:	1b9b      	subs	r3, r3, r6
 8019604:	4432      	add	r2, r6
 8019606:	60a3      	str	r3, [r4, #8]
 8019608:	6022      	str	r2, [r4, #0]
 801960a:	2000      	movs	r0, #0
 801960c:	e7db      	b.n	80195c6 <__ssputs_r+0x58>
 801960e:	462a      	mov	r2, r5
 8019610:	f000 fd1c 	bl	801a04c <_realloc_r>
 8019614:	4606      	mov	r6, r0
 8019616:	2800      	cmp	r0, #0
 8019618:	d1e1      	bne.n	80195de <__ssputs_r+0x70>
 801961a:	6921      	ldr	r1, [r4, #16]
 801961c:	4650      	mov	r0, sl
 801961e:	f7fd fee3 	bl	80173e8 <_free_r>
 8019622:	e7c7      	b.n	80195b4 <__ssputs_r+0x46>

08019624 <_svfiprintf_r>:
 8019624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019628:	4698      	mov	r8, r3
 801962a:	898b      	ldrh	r3, [r1, #12]
 801962c:	061b      	lsls	r3, r3, #24
 801962e:	b09d      	sub	sp, #116	; 0x74
 8019630:	4607      	mov	r7, r0
 8019632:	460d      	mov	r5, r1
 8019634:	4614      	mov	r4, r2
 8019636:	d50e      	bpl.n	8019656 <_svfiprintf_r+0x32>
 8019638:	690b      	ldr	r3, [r1, #16]
 801963a:	b963      	cbnz	r3, 8019656 <_svfiprintf_r+0x32>
 801963c:	2140      	movs	r1, #64	; 0x40
 801963e:	f7fd ff23 	bl	8017488 <_malloc_r>
 8019642:	6028      	str	r0, [r5, #0]
 8019644:	6128      	str	r0, [r5, #16]
 8019646:	b920      	cbnz	r0, 8019652 <_svfiprintf_r+0x2e>
 8019648:	230c      	movs	r3, #12
 801964a:	603b      	str	r3, [r7, #0]
 801964c:	f04f 30ff 	mov.w	r0, #4294967295
 8019650:	e0d1      	b.n	80197f6 <_svfiprintf_r+0x1d2>
 8019652:	2340      	movs	r3, #64	; 0x40
 8019654:	616b      	str	r3, [r5, #20]
 8019656:	2300      	movs	r3, #0
 8019658:	9309      	str	r3, [sp, #36]	; 0x24
 801965a:	2320      	movs	r3, #32
 801965c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019660:	f8cd 800c 	str.w	r8, [sp, #12]
 8019664:	2330      	movs	r3, #48	; 0x30
 8019666:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019810 <_svfiprintf_r+0x1ec>
 801966a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801966e:	f04f 0901 	mov.w	r9, #1
 8019672:	4623      	mov	r3, r4
 8019674:	469a      	mov	sl, r3
 8019676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801967a:	b10a      	cbz	r2, 8019680 <_svfiprintf_r+0x5c>
 801967c:	2a25      	cmp	r2, #37	; 0x25
 801967e:	d1f9      	bne.n	8019674 <_svfiprintf_r+0x50>
 8019680:	ebba 0b04 	subs.w	fp, sl, r4
 8019684:	d00b      	beq.n	801969e <_svfiprintf_r+0x7a>
 8019686:	465b      	mov	r3, fp
 8019688:	4622      	mov	r2, r4
 801968a:	4629      	mov	r1, r5
 801968c:	4638      	mov	r0, r7
 801968e:	f7ff ff6e 	bl	801956e <__ssputs_r>
 8019692:	3001      	adds	r0, #1
 8019694:	f000 80aa 	beq.w	80197ec <_svfiprintf_r+0x1c8>
 8019698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801969a:	445a      	add	r2, fp
 801969c:	9209      	str	r2, [sp, #36]	; 0x24
 801969e:	f89a 3000 	ldrb.w	r3, [sl]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	f000 80a2 	beq.w	80197ec <_svfiprintf_r+0x1c8>
 80196a8:	2300      	movs	r3, #0
 80196aa:	f04f 32ff 	mov.w	r2, #4294967295
 80196ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80196b2:	f10a 0a01 	add.w	sl, sl, #1
 80196b6:	9304      	str	r3, [sp, #16]
 80196b8:	9307      	str	r3, [sp, #28]
 80196ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80196be:	931a      	str	r3, [sp, #104]	; 0x68
 80196c0:	4654      	mov	r4, sl
 80196c2:	2205      	movs	r2, #5
 80196c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196c8:	4851      	ldr	r0, [pc, #324]	; (8019810 <_svfiprintf_r+0x1ec>)
 80196ca:	f7e6 fd89 	bl	80001e0 <memchr>
 80196ce:	9a04      	ldr	r2, [sp, #16]
 80196d0:	b9d8      	cbnz	r0, 801970a <_svfiprintf_r+0xe6>
 80196d2:	06d0      	lsls	r0, r2, #27
 80196d4:	bf44      	itt	mi
 80196d6:	2320      	movmi	r3, #32
 80196d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80196dc:	0711      	lsls	r1, r2, #28
 80196de:	bf44      	itt	mi
 80196e0:	232b      	movmi	r3, #43	; 0x2b
 80196e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80196e6:	f89a 3000 	ldrb.w	r3, [sl]
 80196ea:	2b2a      	cmp	r3, #42	; 0x2a
 80196ec:	d015      	beq.n	801971a <_svfiprintf_r+0xf6>
 80196ee:	9a07      	ldr	r2, [sp, #28]
 80196f0:	4654      	mov	r4, sl
 80196f2:	2000      	movs	r0, #0
 80196f4:	f04f 0c0a 	mov.w	ip, #10
 80196f8:	4621      	mov	r1, r4
 80196fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80196fe:	3b30      	subs	r3, #48	; 0x30
 8019700:	2b09      	cmp	r3, #9
 8019702:	d94e      	bls.n	80197a2 <_svfiprintf_r+0x17e>
 8019704:	b1b0      	cbz	r0, 8019734 <_svfiprintf_r+0x110>
 8019706:	9207      	str	r2, [sp, #28]
 8019708:	e014      	b.n	8019734 <_svfiprintf_r+0x110>
 801970a:	eba0 0308 	sub.w	r3, r0, r8
 801970e:	fa09 f303 	lsl.w	r3, r9, r3
 8019712:	4313      	orrs	r3, r2
 8019714:	9304      	str	r3, [sp, #16]
 8019716:	46a2      	mov	sl, r4
 8019718:	e7d2      	b.n	80196c0 <_svfiprintf_r+0x9c>
 801971a:	9b03      	ldr	r3, [sp, #12]
 801971c:	1d19      	adds	r1, r3, #4
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	9103      	str	r1, [sp, #12]
 8019722:	2b00      	cmp	r3, #0
 8019724:	bfbb      	ittet	lt
 8019726:	425b      	neglt	r3, r3
 8019728:	f042 0202 	orrlt.w	r2, r2, #2
 801972c:	9307      	strge	r3, [sp, #28]
 801972e:	9307      	strlt	r3, [sp, #28]
 8019730:	bfb8      	it	lt
 8019732:	9204      	strlt	r2, [sp, #16]
 8019734:	7823      	ldrb	r3, [r4, #0]
 8019736:	2b2e      	cmp	r3, #46	; 0x2e
 8019738:	d10c      	bne.n	8019754 <_svfiprintf_r+0x130>
 801973a:	7863      	ldrb	r3, [r4, #1]
 801973c:	2b2a      	cmp	r3, #42	; 0x2a
 801973e:	d135      	bne.n	80197ac <_svfiprintf_r+0x188>
 8019740:	9b03      	ldr	r3, [sp, #12]
 8019742:	1d1a      	adds	r2, r3, #4
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	9203      	str	r2, [sp, #12]
 8019748:	2b00      	cmp	r3, #0
 801974a:	bfb8      	it	lt
 801974c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019750:	3402      	adds	r4, #2
 8019752:	9305      	str	r3, [sp, #20]
 8019754:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019820 <_svfiprintf_r+0x1fc>
 8019758:	7821      	ldrb	r1, [r4, #0]
 801975a:	2203      	movs	r2, #3
 801975c:	4650      	mov	r0, sl
 801975e:	f7e6 fd3f 	bl	80001e0 <memchr>
 8019762:	b140      	cbz	r0, 8019776 <_svfiprintf_r+0x152>
 8019764:	2340      	movs	r3, #64	; 0x40
 8019766:	eba0 000a 	sub.w	r0, r0, sl
 801976a:	fa03 f000 	lsl.w	r0, r3, r0
 801976e:	9b04      	ldr	r3, [sp, #16]
 8019770:	4303      	orrs	r3, r0
 8019772:	3401      	adds	r4, #1
 8019774:	9304      	str	r3, [sp, #16]
 8019776:	f814 1b01 	ldrb.w	r1, [r4], #1
 801977a:	4826      	ldr	r0, [pc, #152]	; (8019814 <_svfiprintf_r+0x1f0>)
 801977c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019780:	2206      	movs	r2, #6
 8019782:	f7e6 fd2d 	bl	80001e0 <memchr>
 8019786:	2800      	cmp	r0, #0
 8019788:	d038      	beq.n	80197fc <_svfiprintf_r+0x1d8>
 801978a:	4b23      	ldr	r3, [pc, #140]	; (8019818 <_svfiprintf_r+0x1f4>)
 801978c:	bb1b      	cbnz	r3, 80197d6 <_svfiprintf_r+0x1b2>
 801978e:	9b03      	ldr	r3, [sp, #12]
 8019790:	3307      	adds	r3, #7
 8019792:	f023 0307 	bic.w	r3, r3, #7
 8019796:	3308      	adds	r3, #8
 8019798:	9303      	str	r3, [sp, #12]
 801979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801979c:	4433      	add	r3, r6
 801979e:	9309      	str	r3, [sp, #36]	; 0x24
 80197a0:	e767      	b.n	8019672 <_svfiprintf_r+0x4e>
 80197a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80197a6:	460c      	mov	r4, r1
 80197a8:	2001      	movs	r0, #1
 80197aa:	e7a5      	b.n	80196f8 <_svfiprintf_r+0xd4>
 80197ac:	2300      	movs	r3, #0
 80197ae:	3401      	adds	r4, #1
 80197b0:	9305      	str	r3, [sp, #20]
 80197b2:	4619      	mov	r1, r3
 80197b4:	f04f 0c0a 	mov.w	ip, #10
 80197b8:	4620      	mov	r0, r4
 80197ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80197be:	3a30      	subs	r2, #48	; 0x30
 80197c0:	2a09      	cmp	r2, #9
 80197c2:	d903      	bls.n	80197cc <_svfiprintf_r+0x1a8>
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d0c5      	beq.n	8019754 <_svfiprintf_r+0x130>
 80197c8:	9105      	str	r1, [sp, #20]
 80197ca:	e7c3      	b.n	8019754 <_svfiprintf_r+0x130>
 80197cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80197d0:	4604      	mov	r4, r0
 80197d2:	2301      	movs	r3, #1
 80197d4:	e7f0      	b.n	80197b8 <_svfiprintf_r+0x194>
 80197d6:	ab03      	add	r3, sp, #12
 80197d8:	9300      	str	r3, [sp, #0]
 80197da:	462a      	mov	r2, r5
 80197dc:	4b0f      	ldr	r3, [pc, #60]	; (801981c <_svfiprintf_r+0x1f8>)
 80197de:	a904      	add	r1, sp, #16
 80197e0:	4638      	mov	r0, r7
 80197e2:	f7fd ff4b 	bl	801767c <_printf_float>
 80197e6:	1c42      	adds	r2, r0, #1
 80197e8:	4606      	mov	r6, r0
 80197ea:	d1d6      	bne.n	801979a <_svfiprintf_r+0x176>
 80197ec:	89ab      	ldrh	r3, [r5, #12]
 80197ee:	065b      	lsls	r3, r3, #25
 80197f0:	f53f af2c 	bmi.w	801964c <_svfiprintf_r+0x28>
 80197f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80197f6:	b01d      	add	sp, #116	; 0x74
 80197f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197fc:	ab03      	add	r3, sp, #12
 80197fe:	9300      	str	r3, [sp, #0]
 8019800:	462a      	mov	r2, r5
 8019802:	4b06      	ldr	r3, [pc, #24]	; (801981c <_svfiprintf_r+0x1f8>)
 8019804:	a904      	add	r1, sp, #16
 8019806:	4638      	mov	r0, r7
 8019808:	f7fe f9dc 	bl	8017bc4 <_printf_i>
 801980c:	e7eb      	b.n	80197e6 <_svfiprintf_r+0x1c2>
 801980e:	bf00      	nop
 8019810:	0801aa8c 	.word	0x0801aa8c
 8019814:	0801aa96 	.word	0x0801aa96
 8019818:	0801767d 	.word	0x0801767d
 801981c:	0801956f 	.word	0x0801956f
 8019820:	0801aa92 	.word	0x0801aa92

08019824 <__sfputc_r>:
 8019824:	6893      	ldr	r3, [r2, #8]
 8019826:	3b01      	subs	r3, #1
 8019828:	2b00      	cmp	r3, #0
 801982a:	b410      	push	{r4}
 801982c:	6093      	str	r3, [r2, #8]
 801982e:	da08      	bge.n	8019842 <__sfputc_r+0x1e>
 8019830:	6994      	ldr	r4, [r2, #24]
 8019832:	42a3      	cmp	r3, r4
 8019834:	db01      	blt.n	801983a <__sfputc_r+0x16>
 8019836:	290a      	cmp	r1, #10
 8019838:	d103      	bne.n	8019842 <__sfputc_r+0x1e>
 801983a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801983e:	f000 b98f 	b.w	8019b60 <__swbuf_r>
 8019842:	6813      	ldr	r3, [r2, #0]
 8019844:	1c58      	adds	r0, r3, #1
 8019846:	6010      	str	r0, [r2, #0]
 8019848:	7019      	strb	r1, [r3, #0]
 801984a:	4608      	mov	r0, r1
 801984c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019850:	4770      	bx	lr

08019852 <__sfputs_r>:
 8019852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019854:	4606      	mov	r6, r0
 8019856:	460f      	mov	r7, r1
 8019858:	4614      	mov	r4, r2
 801985a:	18d5      	adds	r5, r2, r3
 801985c:	42ac      	cmp	r4, r5
 801985e:	d101      	bne.n	8019864 <__sfputs_r+0x12>
 8019860:	2000      	movs	r0, #0
 8019862:	e007      	b.n	8019874 <__sfputs_r+0x22>
 8019864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019868:	463a      	mov	r2, r7
 801986a:	4630      	mov	r0, r6
 801986c:	f7ff ffda 	bl	8019824 <__sfputc_r>
 8019870:	1c43      	adds	r3, r0, #1
 8019872:	d1f3      	bne.n	801985c <__sfputs_r+0xa>
 8019874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019878 <_vfiprintf_r>:
 8019878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801987c:	460d      	mov	r5, r1
 801987e:	b09d      	sub	sp, #116	; 0x74
 8019880:	4614      	mov	r4, r2
 8019882:	4698      	mov	r8, r3
 8019884:	4606      	mov	r6, r0
 8019886:	b118      	cbz	r0, 8019890 <_vfiprintf_r+0x18>
 8019888:	6983      	ldr	r3, [r0, #24]
 801988a:	b90b      	cbnz	r3, 8019890 <_vfiprintf_r+0x18>
 801988c:	f7ff fa30 	bl	8018cf0 <__sinit>
 8019890:	4b89      	ldr	r3, [pc, #548]	; (8019ab8 <_vfiprintf_r+0x240>)
 8019892:	429d      	cmp	r5, r3
 8019894:	d11b      	bne.n	80198ce <_vfiprintf_r+0x56>
 8019896:	6875      	ldr	r5, [r6, #4]
 8019898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801989a:	07d9      	lsls	r1, r3, #31
 801989c:	d405      	bmi.n	80198aa <_vfiprintf_r+0x32>
 801989e:	89ab      	ldrh	r3, [r5, #12]
 80198a0:	059a      	lsls	r2, r3, #22
 80198a2:	d402      	bmi.n	80198aa <_vfiprintf_r+0x32>
 80198a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80198a6:	f7ff fac6 	bl	8018e36 <__retarget_lock_acquire_recursive>
 80198aa:	89ab      	ldrh	r3, [r5, #12]
 80198ac:	071b      	lsls	r3, r3, #28
 80198ae:	d501      	bpl.n	80198b4 <_vfiprintf_r+0x3c>
 80198b0:	692b      	ldr	r3, [r5, #16]
 80198b2:	b9eb      	cbnz	r3, 80198f0 <_vfiprintf_r+0x78>
 80198b4:	4629      	mov	r1, r5
 80198b6:	4630      	mov	r0, r6
 80198b8:	f000 f9b6 	bl	8019c28 <__swsetup_r>
 80198bc:	b1c0      	cbz	r0, 80198f0 <_vfiprintf_r+0x78>
 80198be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80198c0:	07dc      	lsls	r4, r3, #31
 80198c2:	d50e      	bpl.n	80198e2 <_vfiprintf_r+0x6a>
 80198c4:	f04f 30ff 	mov.w	r0, #4294967295
 80198c8:	b01d      	add	sp, #116	; 0x74
 80198ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ce:	4b7b      	ldr	r3, [pc, #492]	; (8019abc <_vfiprintf_r+0x244>)
 80198d0:	429d      	cmp	r5, r3
 80198d2:	d101      	bne.n	80198d8 <_vfiprintf_r+0x60>
 80198d4:	68b5      	ldr	r5, [r6, #8]
 80198d6:	e7df      	b.n	8019898 <_vfiprintf_r+0x20>
 80198d8:	4b79      	ldr	r3, [pc, #484]	; (8019ac0 <_vfiprintf_r+0x248>)
 80198da:	429d      	cmp	r5, r3
 80198dc:	bf08      	it	eq
 80198de:	68f5      	ldreq	r5, [r6, #12]
 80198e0:	e7da      	b.n	8019898 <_vfiprintf_r+0x20>
 80198e2:	89ab      	ldrh	r3, [r5, #12]
 80198e4:	0598      	lsls	r0, r3, #22
 80198e6:	d4ed      	bmi.n	80198c4 <_vfiprintf_r+0x4c>
 80198e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80198ea:	f7ff faa5 	bl	8018e38 <__retarget_lock_release_recursive>
 80198ee:	e7e9      	b.n	80198c4 <_vfiprintf_r+0x4c>
 80198f0:	2300      	movs	r3, #0
 80198f2:	9309      	str	r3, [sp, #36]	; 0x24
 80198f4:	2320      	movs	r3, #32
 80198f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80198fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80198fe:	2330      	movs	r3, #48	; 0x30
 8019900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019ac4 <_vfiprintf_r+0x24c>
 8019904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019908:	f04f 0901 	mov.w	r9, #1
 801990c:	4623      	mov	r3, r4
 801990e:	469a      	mov	sl, r3
 8019910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019914:	b10a      	cbz	r2, 801991a <_vfiprintf_r+0xa2>
 8019916:	2a25      	cmp	r2, #37	; 0x25
 8019918:	d1f9      	bne.n	801990e <_vfiprintf_r+0x96>
 801991a:	ebba 0b04 	subs.w	fp, sl, r4
 801991e:	d00b      	beq.n	8019938 <_vfiprintf_r+0xc0>
 8019920:	465b      	mov	r3, fp
 8019922:	4622      	mov	r2, r4
 8019924:	4629      	mov	r1, r5
 8019926:	4630      	mov	r0, r6
 8019928:	f7ff ff93 	bl	8019852 <__sfputs_r>
 801992c:	3001      	adds	r0, #1
 801992e:	f000 80aa 	beq.w	8019a86 <_vfiprintf_r+0x20e>
 8019932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019934:	445a      	add	r2, fp
 8019936:	9209      	str	r2, [sp, #36]	; 0x24
 8019938:	f89a 3000 	ldrb.w	r3, [sl]
 801993c:	2b00      	cmp	r3, #0
 801993e:	f000 80a2 	beq.w	8019a86 <_vfiprintf_r+0x20e>
 8019942:	2300      	movs	r3, #0
 8019944:	f04f 32ff 	mov.w	r2, #4294967295
 8019948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801994c:	f10a 0a01 	add.w	sl, sl, #1
 8019950:	9304      	str	r3, [sp, #16]
 8019952:	9307      	str	r3, [sp, #28]
 8019954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019958:	931a      	str	r3, [sp, #104]	; 0x68
 801995a:	4654      	mov	r4, sl
 801995c:	2205      	movs	r2, #5
 801995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019962:	4858      	ldr	r0, [pc, #352]	; (8019ac4 <_vfiprintf_r+0x24c>)
 8019964:	f7e6 fc3c 	bl	80001e0 <memchr>
 8019968:	9a04      	ldr	r2, [sp, #16]
 801996a:	b9d8      	cbnz	r0, 80199a4 <_vfiprintf_r+0x12c>
 801996c:	06d1      	lsls	r1, r2, #27
 801996e:	bf44      	itt	mi
 8019970:	2320      	movmi	r3, #32
 8019972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019976:	0713      	lsls	r3, r2, #28
 8019978:	bf44      	itt	mi
 801997a:	232b      	movmi	r3, #43	; 0x2b
 801997c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019980:	f89a 3000 	ldrb.w	r3, [sl]
 8019984:	2b2a      	cmp	r3, #42	; 0x2a
 8019986:	d015      	beq.n	80199b4 <_vfiprintf_r+0x13c>
 8019988:	9a07      	ldr	r2, [sp, #28]
 801998a:	4654      	mov	r4, sl
 801998c:	2000      	movs	r0, #0
 801998e:	f04f 0c0a 	mov.w	ip, #10
 8019992:	4621      	mov	r1, r4
 8019994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019998:	3b30      	subs	r3, #48	; 0x30
 801999a:	2b09      	cmp	r3, #9
 801999c:	d94e      	bls.n	8019a3c <_vfiprintf_r+0x1c4>
 801999e:	b1b0      	cbz	r0, 80199ce <_vfiprintf_r+0x156>
 80199a0:	9207      	str	r2, [sp, #28]
 80199a2:	e014      	b.n	80199ce <_vfiprintf_r+0x156>
 80199a4:	eba0 0308 	sub.w	r3, r0, r8
 80199a8:	fa09 f303 	lsl.w	r3, r9, r3
 80199ac:	4313      	orrs	r3, r2
 80199ae:	9304      	str	r3, [sp, #16]
 80199b0:	46a2      	mov	sl, r4
 80199b2:	e7d2      	b.n	801995a <_vfiprintf_r+0xe2>
 80199b4:	9b03      	ldr	r3, [sp, #12]
 80199b6:	1d19      	adds	r1, r3, #4
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	9103      	str	r1, [sp, #12]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	bfbb      	ittet	lt
 80199c0:	425b      	neglt	r3, r3
 80199c2:	f042 0202 	orrlt.w	r2, r2, #2
 80199c6:	9307      	strge	r3, [sp, #28]
 80199c8:	9307      	strlt	r3, [sp, #28]
 80199ca:	bfb8      	it	lt
 80199cc:	9204      	strlt	r2, [sp, #16]
 80199ce:	7823      	ldrb	r3, [r4, #0]
 80199d0:	2b2e      	cmp	r3, #46	; 0x2e
 80199d2:	d10c      	bne.n	80199ee <_vfiprintf_r+0x176>
 80199d4:	7863      	ldrb	r3, [r4, #1]
 80199d6:	2b2a      	cmp	r3, #42	; 0x2a
 80199d8:	d135      	bne.n	8019a46 <_vfiprintf_r+0x1ce>
 80199da:	9b03      	ldr	r3, [sp, #12]
 80199dc:	1d1a      	adds	r2, r3, #4
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	9203      	str	r2, [sp, #12]
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	bfb8      	it	lt
 80199e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80199ea:	3402      	adds	r4, #2
 80199ec:	9305      	str	r3, [sp, #20]
 80199ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019ad4 <_vfiprintf_r+0x25c>
 80199f2:	7821      	ldrb	r1, [r4, #0]
 80199f4:	2203      	movs	r2, #3
 80199f6:	4650      	mov	r0, sl
 80199f8:	f7e6 fbf2 	bl	80001e0 <memchr>
 80199fc:	b140      	cbz	r0, 8019a10 <_vfiprintf_r+0x198>
 80199fe:	2340      	movs	r3, #64	; 0x40
 8019a00:	eba0 000a 	sub.w	r0, r0, sl
 8019a04:	fa03 f000 	lsl.w	r0, r3, r0
 8019a08:	9b04      	ldr	r3, [sp, #16]
 8019a0a:	4303      	orrs	r3, r0
 8019a0c:	3401      	adds	r4, #1
 8019a0e:	9304      	str	r3, [sp, #16]
 8019a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a14:	482c      	ldr	r0, [pc, #176]	; (8019ac8 <_vfiprintf_r+0x250>)
 8019a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019a1a:	2206      	movs	r2, #6
 8019a1c:	f7e6 fbe0 	bl	80001e0 <memchr>
 8019a20:	2800      	cmp	r0, #0
 8019a22:	d03f      	beq.n	8019aa4 <_vfiprintf_r+0x22c>
 8019a24:	4b29      	ldr	r3, [pc, #164]	; (8019acc <_vfiprintf_r+0x254>)
 8019a26:	bb1b      	cbnz	r3, 8019a70 <_vfiprintf_r+0x1f8>
 8019a28:	9b03      	ldr	r3, [sp, #12]
 8019a2a:	3307      	adds	r3, #7
 8019a2c:	f023 0307 	bic.w	r3, r3, #7
 8019a30:	3308      	adds	r3, #8
 8019a32:	9303      	str	r3, [sp, #12]
 8019a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a36:	443b      	add	r3, r7
 8019a38:	9309      	str	r3, [sp, #36]	; 0x24
 8019a3a:	e767      	b.n	801990c <_vfiprintf_r+0x94>
 8019a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a40:	460c      	mov	r4, r1
 8019a42:	2001      	movs	r0, #1
 8019a44:	e7a5      	b.n	8019992 <_vfiprintf_r+0x11a>
 8019a46:	2300      	movs	r3, #0
 8019a48:	3401      	adds	r4, #1
 8019a4a:	9305      	str	r3, [sp, #20]
 8019a4c:	4619      	mov	r1, r3
 8019a4e:	f04f 0c0a 	mov.w	ip, #10
 8019a52:	4620      	mov	r0, r4
 8019a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a58:	3a30      	subs	r2, #48	; 0x30
 8019a5a:	2a09      	cmp	r2, #9
 8019a5c:	d903      	bls.n	8019a66 <_vfiprintf_r+0x1ee>
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d0c5      	beq.n	80199ee <_vfiprintf_r+0x176>
 8019a62:	9105      	str	r1, [sp, #20]
 8019a64:	e7c3      	b.n	80199ee <_vfiprintf_r+0x176>
 8019a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	2301      	movs	r3, #1
 8019a6e:	e7f0      	b.n	8019a52 <_vfiprintf_r+0x1da>
 8019a70:	ab03      	add	r3, sp, #12
 8019a72:	9300      	str	r3, [sp, #0]
 8019a74:	462a      	mov	r2, r5
 8019a76:	4b16      	ldr	r3, [pc, #88]	; (8019ad0 <_vfiprintf_r+0x258>)
 8019a78:	a904      	add	r1, sp, #16
 8019a7a:	4630      	mov	r0, r6
 8019a7c:	f7fd fdfe 	bl	801767c <_printf_float>
 8019a80:	4607      	mov	r7, r0
 8019a82:	1c78      	adds	r0, r7, #1
 8019a84:	d1d6      	bne.n	8019a34 <_vfiprintf_r+0x1bc>
 8019a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a88:	07d9      	lsls	r1, r3, #31
 8019a8a:	d405      	bmi.n	8019a98 <_vfiprintf_r+0x220>
 8019a8c:	89ab      	ldrh	r3, [r5, #12]
 8019a8e:	059a      	lsls	r2, r3, #22
 8019a90:	d402      	bmi.n	8019a98 <_vfiprintf_r+0x220>
 8019a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a94:	f7ff f9d0 	bl	8018e38 <__retarget_lock_release_recursive>
 8019a98:	89ab      	ldrh	r3, [r5, #12]
 8019a9a:	065b      	lsls	r3, r3, #25
 8019a9c:	f53f af12 	bmi.w	80198c4 <_vfiprintf_r+0x4c>
 8019aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019aa2:	e711      	b.n	80198c8 <_vfiprintf_r+0x50>
 8019aa4:	ab03      	add	r3, sp, #12
 8019aa6:	9300      	str	r3, [sp, #0]
 8019aa8:	462a      	mov	r2, r5
 8019aaa:	4b09      	ldr	r3, [pc, #36]	; (8019ad0 <_vfiprintf_r+0x258>)
 8019aac:	a904      	add	r1, sp, #16
 8019aae:	4630      	mov	r0, r6
 8019ab0:	f7fe f888 	bl	8017bc4 <_printf_i>
 8019ab4:	e7e4      	b.n	8019a80 <_vfiprintf_r+0x208>
 8019ab6:	bf00      	nop
 8019ab8:	0801a8ec 	.word	0x0801a8ec
 8019abc:	0801a90c 	.word	0x0801a90c
 8019ac0:	0801a8cc 	.word	0x0801a8cc
 8019ac4:	0801aa8c 	.word	0x0801aa8c
 8019ac8:	0801aa96 	.word	0x0801aa96
 8019acc:	0801767d 	.word	0x0801767d
 8019ad0:	08019853 	.word	0x08019853
 8019ad4:	0801aa92 	.word	0x0801aa92

08019ad8 <__sread>:
 8019ad8:	b510      	push	{r4, lr}
 8019ada:	460c      	mov	r4, r1
 8019adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ae0:	f000 fada 	bl	801a098 <_read_r>
 8019ae4:	2800      	cmp	r0, #0
 8019ae6:	bfab      	itete	ge
 8019ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019aea:	89a3      	ldrhlt	r3, [r4, #12]
 8019aec:	181b      	addge	r3, r3, r0
 8019aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019af2:	bfac      	ite	ge
 8019af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8019af6:	81a3      	strhlt	r3, [r4, #12]
 8019af8:	bd10      	pop	{r4, pc}

08019afa <__swrite>:
 8019afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019afe:	461f      	mov	r7, r3
 8019b00:	898b      	ldrh	r3, [r1, #12]
 8019b02:	05db      	lsls	r3, r3, #23
 8019b04:	4605      	mov	r5, r0
 8019b06:	460c      	mov	r4, r1
 8019b08:	4616      	mov	r6, r2
 8019b0a:	d505      	bpl.n	8019b18 <__swrite+0x1e>
 8019b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b10:	2302      	movs	r3, #2
 8019b12:	2200      	movs	r2, #0
 8019b14:	f000 f9f8 	bl	8019f08 <_lseek_r>
 8019b18:	89a3      	ldrh	r3, [r4, #12]
 8019b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019b22:	81a3      	strh	r3, [r4, #12]
 8019b24:	4632      	mov	r2, r6
 8019b26:	463b      	mov	r3, r7
 8019b28:	4628      	mov	r0, r5
 8019b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b2e:	f000 b869 	b.w	8019c04 <_write_r>

08019b32 <__sseek>:
 8019b32:	b510      	push	{r4, lr}
 8019b34:	460c      	mov	r4, r1
 8019b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b3a:	f000 f9e5 	bl	8019f08 <_lseek_r>
 8019b3e:	1c43      	adds	r3, r0, #1
 8019b40:	89a3      	ldrh	r3, [r4, #12]
 8019b42:	bf15      	itete	ne
 8019b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8019b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019b4e:	81a3      	strheq	r3, [r4, #12]
 8019b50:	bf18      	it	ne
 8019b52:	81a3      	strhne	r3, [r4, #12]
 8019b54:	bd10      	pop	{r4, pc}

08019b56 <__sclose>:
 8019b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b5a:	f000 b8f1 	b.w	8019d40 <_close_r>
	...

08019b60 <__swbuf_r>:
 8019b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b62:	460e      	mov	r6, r1
 8019b64:	4614      	mov	r4, r2
 8019b66:	4605      	mov	r5, r0
 8019b68:	b118      	cbz	r0, 8019b72 <__swbuf_r+0x12>
 8019b6a:	6983      	ldr	r3, [r0, #24]
 8019b6c:	b90b      	cbnz	r3, 8019b72 <__swbuf_r+0x12>
 8019b6e:	f7ff f8bf 	bl	8018cf0 <__sinit>
 8019b72:	4b21      	ldr	r3, [pc, #132]	; (8019bf8 <__swbuf_r+0x98>)
 8019b74:	429c      	cmp	r4, r3
 8019b76:	d12b      	bne.n	8019bd0 <__swbuf_r+0x70>
 8019b78:	686c      	ldr	r4, [r5, #4]
 8019b7a:	69a3      	ldr	r3, [r4, #24]
 8019b7c:	60a3      	str	r3, [r4, #8]
 8019b7e:	89a3      	ldrh	r3, [r4, #12]
 8019b80:	071a      	lsls	r2, r3, #28
 8019b82:	d52f      	bpl.n	8019be4 <__swbuf_r+0x84>
 8019b84:	6923      	ldr	r3, [r4, #16]
 8019b86:	b36b      	cbz	r3, 8019be4 <__swbuf_r+0x84>
 8019b88:	6923      	ldr	r3, [r4, #16]
 8019b8a:	6820      	ldr	r0, [r4, #0]
 8019b8c:	1ac0      	subs	r0, r0, r3
 8019b8e:	6963      	ldr	r3, [r4, #20]
 8019b90:	b2f6      	uxtb	r6, r6
 8019b92:	4283      	cmp	r3, r0
 8019b94:	4637      	mov	r7, r6
 8019b96:	dc04      	bgt.n	8019ba2 <__swbuf_r+0x42>
 8019b98:	4621      	mov	r1, r4
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	f000 f966 	bl	8019e6c <_fflush_r>
 8019ba0:	bb30      	cbnz	r0, 8019bf0 <__swbuf_r+0x90>
 8019ba2:	68a3      	ldr	r3, [r4, #8]
 8019ba4:	3b01      	subs	r3, #1
 8019ba6:	60a3      	str	r3, [r4, #8]
 8019ba8:	6823      	ldr	r3, [r4, #0]
 8019baa:	1c5a      	adds	r2, r3, #1
 8019bac:	6022      	str	r2, [r4, #0]
 8019bae:	701e      	strb	r6, [r3, #0]
 8019bb0:	6963      	ldr	r3, [r4, #20]
 8019bb2:	3001      	adds	r0, #1
 8019bb4:	4283      	cmp	r3, r0
 8019bb6:	d004      	beq.n	8019bc2 <__swbuf_r+0x62>
 8019bb8:	89a3      	ldrh	r3, [r4, #12]
 8019bba:	07db      	lsls	r3, r3, #31
 8019bbc:	d506      	bpl.n	8019bcc <__swbuf_r+0x6c>
 8019bbe:	2e0a      	cmp	r6, #10
 8019bc0:	d104      	bne.n	8019bcc <__swbuf_r+0x6c>
 8019bc2:	4621      	mov	r1, r4
 8019bc4:	4628      	mov	r0, r5
 8019bc6:	f000 f951 	bl	8019e6c <_fflush_r>
 8019bca:	b988      	cbnz	r0, 8019bf0 <__swbuf_r+0x90>
 8019bcc:	4638      	mov	r0, r7
 8019bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd0:	4b0a      	ldr	r3, [pc, #40]	; (8019bfc <__swbuf_r+0x9c>)
 8019bd2:	429c      	cmp	r4, r3
 8019bd4:	d101      	bne.n	8019bda <__swbuf_r+0x7a>
 8019bd6:	68ac      	ldr	r4, [r5, #8]
 8019bd8:	e7cf      	b.n	8019b7a <__swbuf_r+0x1a>
 8019bda:	4b09      	ldr	r3, [pc, #36]	; (8019c00 <__swbuf_r+0xa0>)
 8019bdc:	429c      	cmp	r4, r3
 8019bde:	bf08      	it	eq
 8019be0:	68ec      	ldreq	r4, [r5, #12]
 8019be2:	e7ca      	b.n	8019b7a <__swbuf_r+0x1a>
 8019be4:	4621      	mov	r1, r4
 8019be6:	4628      	mov	r0, r5
 8019be8:	f000 f81e 	bl	8019c28 <__swsetup_r>
 8019bec:	2800      	cmp	r0, #0
 8019bee:	d0cb      	beq.n	8019b88 <__swbuf_r+0x28>
 8019bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8019bf4:	e7ea      	b.n	8019bcc <__swbuf_r+0x6c>
 8019bf6:	bf00      	nop
 8019bf8:	0801a8ec 	.word	0x0801a8ec
 8019bfc:	0801a90c 	.word	0x0801a90c
 8019c00:	0801a8cc 	.word	0x0801a8cc

08019c04 <_write_r>:
 8019c04:	b538      	push	{r3, r4, r5, lr}
 8019c06:	4d07      	ldr	r5, [pc, #28]	; (8019c24 <_write_r+0x20>)
 8019c08:	4604      	mov	r4, r0
 8019c0a:	4608      	mov	r0, r1
 8019c0c:	4611      	mov	r1, r2
 8019c0e:	2200      	movs	r2, #0
 8019c10:	602a      	str	r2, [r5, #0]
 8019c12:	461a      	mov	r2, r3
 8019c14:	f7e8 fcd7 	bl	80025c6 <_write>
 8019c18:	1c43      	adds	r3, r0, #1
 8019c1a:	d102      	bne.n	8019c22 <_write_r+0x1e>
 8019c1c:	682b      	ldr	r3, [r5, #0]
 8019c1e:	b103      	cbz	r3, 8019c22 <_write_r+0x1e>
 8019c20:	6023      	str	r3, [r4, #0]
 8019c22:	bd38      	pop	{r3, r4, r5, pc}
 8019c24:	20001a04 	.word	0x20001a04

08019c28 <__swsetup_r>:
 8019c28:	4b32      	ldr	r3, [pc, #200]	; (8019cf4 <__swsetup_r+0xcc>)
 8019c2a:	b570      	push	{r4, r5, r6, lr}
 8019c2c:	681d      	ldr	r5, [r3, #0]
 8019c2e:	4606      	mov	r6, r0
 8019c30:	460c      	mov	r4, r1
 8019c32:	b125      	cbz	r5, 8019c3e <__swsetup_r+0x16>
 8019c34:	69ab      	ldr	r3, [r5, #24]
 8019c36:	b913      	cbnz	r3, 8019c3e <__swsetup_r+0x16>
 8019c38:	4628      	mov	r0, r5
 8019c3a:	f7ff f859 	bl	8018cf0 <__sinit>
 8019c3e:	4b2e      	ldr	r3, [pc, #184]	; (8019cf8 <__swsetup_r+0xd0>)
 8019c40:	429c      	cmp	r4, r3
 8019c42:	d10f      	bne.n	8019c64 <__swsetup_r+0x3c>
 8019c44:	686c      	ldr	r4, [r5, #4]
 8019c46:	89a3      	ldrh	r3, [r4, #12]
 8019c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019c4c:	0719      	lsls	r1, r3, #28
 8019c4e:	d42c      	bmi.n	8019caa <__swsetup_r+0x82>
 8019c50:	06dd      	lsls	r5, r3, #27
 8019c52:	d411      	bmi.n	8019c78 <__swsetup_r+0x50>
 8019c54:	2309      	movs	r3, #9
 8019c56:	6033      	str	r3, [r6, #0]
 8019c58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019c5c:	81a3      	strh	r3, [r4, #12]
 8019c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c62:	e03e      	b.n	8019ce2 <__swsetup_r+0xba>
 8019c64:	4b25      	ldr	r3, [pc, #148]	; (8019cfc <__swsetup_r+0xd4>)
 8019c66:	429c      	cmp	r4, r3
 8019c68:	d101      	bne.n	8019c6e <__swsetup_r+0x46>
 8019c6a:	68ac      	ldr	r4, [r5, #8]
 8019c6c:	e7eb      	b.n	8019c46 <__swsetup_r+0x1e>
 8019c6e:	4b24      	ldr	r3, [pc, #144]	; (8019d00 <__swsetup_r+0xd8>)
 8019c70:	429c      	cmp	r4, r3
 8019c72:	bf08      	it	eq
 8019c74:	68ec      	ldreq	r4, [r5, #12]
 8019c76:	e7e6      	b.n	8019c46 <__swsetup_r+0x1e>
 8019c78:	0758      	lsls	r0, r3, #29
 8019c7a:	d512      	bpl.n	8019ca2 <__swsetup_r+0x7a>
 8019c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019c7e:	b141      	cbz	r1, 8019c92 <__swsetup_r+0x6a>
 8019c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019c84:	4299      	cmp	r1, r3
 8019c86:	d002      	beq.n	8019c8e <__swsetup_r+0x66>
 8019c88:	4630      	mov	r0, r6
 8019c8a:	f7fd fbad 	bl	80173e8 <_free_r>
 8019c8e:	2300      	movs	r3, #0
 8019c90:	6363      	str	r3, [r4, #52]	; 0x34
 8019c92:	89a3      	ldrh	r3, [r4, #12]
 8019c94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019c98:	81a3      	strh	r3, [r4, #12]
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	6063      	str	r3, [r4, #4]
 8019c9e:	6923      	ldr	r3, [r4, #16]
 8019ca0:	6023      	str	r3, [r4, #0]
 8019ca2:	89a3      	ldrh	r3, [r4, #12]
 8019ca4:	f043 0308 	orr.w	r3, r3, #8
 8019ca8:	81a3      	strh	r3, [r4, #12]
 8019caa:	6923      	ldr	r3, [r4, #16]
 8019cac:	b94b      	cbnz	r3, 8019cc2 <__swsetup_r+0x9a>
 8019cae:	89a3      	ldrh	r3, [r4, #12]
 8019cb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019cb8:	d003      	beq.n	8019cc2 <__swsetup_r+0x9a>
 8019cba:	4621      	mov	r1, r4
 8019cbc:	4630      	mov	r0, r6
 8019cbe:	f000 f959 	bl	8019f74 <__smakebuf_r>
 8019cc2:	89a0      	ldrh	r0, [r4, #12]
 8019cc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019cc8:	f010 0301 	ands.w	r3, r0, #1
 8019ccc:	d00a      	beq.n	8019ce4 <__swsetup_r+0xbc>
 8019cce:	2300      	movs	r3, #0
 8019cd0:	60a3      	str	r3, [r4, #8]
 8019cd2:	6963      	ldr	r3, [r4, #20]
 8019cd4:	425b      	negs	r3, r3
 8019cd6:	61a3      	str	r3, [r4, #24]
 8019cd8:	6923      	ldr	r3, [r4, #16]
 8019cda:	b943      	cbnz	r3, 8019cee <__swsetup_r+0xc6>
 8019cdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019ce0:	d1ba      	bne.n	8019c58 <__swsetup_r+0x30>
 8019ce2:	bd70      	pop	{r4, r5, r6, pc}
 8019ce4:	0781      	lsls	r1, r0, #30
 8019ce6:	bf58      	it	pl
 8019ce8:	6963      	ldrpl	r3, [r4, #20]
 8019cea:	60a3      	str	r3, [r4, #8]
 8019cec:	e7f4      	b.n	8019cd8 <__swsetup_r+0xb0>
 8019cee:	2000      	movs	r0, #0
 8019cf0:	e7f7      	b.n	8019ce2 <__swsetup_r+0xba>
 8019cf2:	bf00      	nop
 8019cf4:	200000f0 	.word	0x200000f0
 8019cf8:	0801a8ec 	.word	0x0801a8ec
 8019cfc:	0801a90c 	.word	0x0801a90c
 8019d00:	0801a8cc 	.word	0x0801a8cc

08019d04 <__assert_func>:
 8019d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d06:	4614      	mov	r4, r2
 8019d08:	461a      	mov	r2, r3
 8019d0a:	4b09      	ldr	r3, [pc, #36]	; (8019d30 <__assert_func+0x2c>)
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	4605      	mov	r5, r0
 8019d10:	68d8      	ldr	r0, [r3, #12]
 8019d12:	b14c      	cbz	r4, 8019d28 <__assert_func+0x24>
 8019d14:	4b07      	ldr	r3, [pc, #28]	; (8019d34 <__assert_func+0x30>)
 8019d16:	9100      	str	r1, [sp, #0]
 8019d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019d1c:	4906      	ldr	r1, [pc, #24]	; (8019d38 <__assert_func+0x34>)
 8019d1e:	462b      	mov	r3, r5
 8019d20:	f000 f8e0 	bl	8019ee4 <fiprintf>
 8019d24:	f7fd fb10 	bl	8017348 <abort>
 8019d28:	4b04      	ldr	r3, [pc, #16]	; (8019d3c <__assert_func+0x38>)
 8019d2a:	461c      	mov	r4, r3
 8019d2c:	e7f3      	b.n	8019d16 <__assert_func+0x12>
 8019d2e:	bf00      	nop
 8019d30:	200000f0 	.word	0x200000f0
 8019d34:	0801aa9d 	.word	0x0801aa9d
 8019d38:	0801aaaa 	.word	0x0801aaaa
 8019d3c:	0801aad8 	.word	0x0801aad8

08019d40 <_close_r>:
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	4d06      	ldr	r5, [pc, #24]	; (8019d5c <_close_r+0x1c>)
 8019d44:	2300      	movs	r3, #0
 8019d46:	4604      	mov	r4, r0
 8019d48:	4608      	mov	r0, r1
 8019d4a:	602b      	str	r3, [r5, #0]
 8019d4c:	f7e8 fc57 	bl	80025fe <_close>
 8019d50:	1c43      	adds	r3, r0, #1
 8019d52:	d102      	bne.n	8019d5a <_close_r+0x1a>
 8019d54:	682b      	ldr	r3, [r5, #0]
 8019d56:	b103      	cbz	r3, 8019d5a <_close_r+0x1a>
 8019d58:	6023      	str	r3, [r4, #0]
 8019d5a:	bd38      	pop	{r3, r4, r5, pc}
 8019d5c:	20001a04 	.word	0x20001a04

08019d60 <__sflush_r>:
 8019d60:	898a      	ldrh	r2, [r1, #12]
 8019d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d66:	4605      	mov	r5, r0
 8019d68:	0710      	lsls	r0, r2, #28
 8019d6a:	460c      	mov	r4, r1
 8019d6c:	d458      	bmi.n	8019e20 <__sflush_r+0xc0>
 8019d6e:	684b      	ldr	r3, [r1, #4]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	dc05      	bgt.n	8019d80 <__sflush_r+0x20>
 8019d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	dc02      	bgt.n	8019d80 <__sflush_r+0x20>
 8019d7a:	2000      	movs	r0, #0
 8019d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019d82:	2e00      	cmp	r6, #0
 8019d84:	d0f9      	beq.n	8019d7a <__sflush_r+0x1a>
 8019d86:	2300      	movs	r3, #0
 8019d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019d8c:	682f      	ldr	r7, [r5, #0]
 8019d8e:	602b      	str	r3, [r5, #0]
 8019d90:	d032      	beq.n	8019df8 <__sflush_r+0x98>
 8019d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019d94:	89a3      	ldrh	r3, [r4, #12]
 8019d96:	075a      	lsls	r2, r3, #29
 8019d98:	d505      	bpl.n	8019da6 <__sflush_r+0x46>
 8019d9a:	6863      	ldr	r3, [r4, #4]
 8019d9c:	1ac0      	subs	r0, r0, r3
 8019d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019da0:	b10b      	cbz	r3, 8019da6 <__sflush_r+0x46>
 8019da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019da4:	1ac0      	subs	r0, r0, r3
 8019da6:	2300      	movs	r3, #0
 8019da8:	4602      	mov	r2, r0
 8019daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019dac:	6a21      	ldr	r1, [r4, #32]
 8019dae:	4628      	mov	r0, r5
 8019db0:	47b0      	blx	r6
 8019db2:	1c43      	adds	r3, r0, #1
 8019db4:	89a3      	ldrh	r3, [r4, #12]
 8019db6:	d106      	bne.n	8019dc6 <__sflush_r+0x66>
 8019db8:	6829      	ldr	r1, [r5, #0]
 8019dba:	291d      	cmp	r1, #29
 8019dbc:	d82c      	bhi.n	8019e18 <__sflush_r+0xb8>
 8019dbe:	4a2a      	ldr	r2, [pc, #168]	; (8019e68 <__sflush_r+0x108>)
 8019dc0:	40ca      	lsrs	r2, r1
 8019dc2:	07d6      	lsls	r6, r2, #31
 8019dc4:	d528      	bpl.n	8019e18 <__sflush_r+0xb8>
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	6062      	str	r2, [r4, #4]
 8019dca:	04d9      	lsls	r1, r3, #19
 8019dcc:	6922      	ldr	r2, [r4, #16]
 8019dce:	6022      	str	r2, [r4, #0]
 8019dd0:	d504      	bpl.n	8019ddc <__sflush_r+0x7c>
 8019dd2:	1c42      	adds	r2, r0, #1
 8019dd4:	d101      	bne.n	8019dda <__sflush_r+0x7a>
 8019dd6:	682b      	ldr	r3, [r5, #0]
 8019dd8:	b903      	cbnz	r3, 8019ddc <__sflush_r+0x7c>
 8019dda:	6560      	str	r0, [r4, #84]	; 0x54
 8019ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019dde:	602f      	str	r7, [r5, #0]
 8019de0:	2900      	cmp	r1, #0
 8019de2:	d0ca      	beq.n	8019d7a <__sflush_r+0x1a>
 8019de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019de8:	4299      	cmp	r1, r3
 8019dea:	d002      	beq.n	8019df2 <__sflush_r+0x92>
 8019dec:	4628      	mov	r0, r5
 8019dee:	f7fd fafb 	bl	80173e8 <_free_r>
 8019df2:	2000      	movs	r0, #0
 8019df4:	6360      	str	r0, [r4, #52]	; 0x34
 8019df6:	e7c1      	b.n	8019d7c <__sflush_r+0x1c>
 8019df8:	6a21      	ldr	r1, [r4, #32]
 8019dfa:	2301      	movs	r3, #1
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	47b0      	blx	r6
 8019e00:	1c41      	adds	r1, r0, #1
 8019e02:	d1c7      	bne.n	8019d94 <__sflush_r+0x34>
 8019e04:	682b      	ldr	r3, [r5, #0]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d0c4      	beq.n	8019d94 <__sflush_r+0x34>
 8019e0a:	2b1d      	cmp	r3, #29
 8019e0c:	d001      	beq.n	8019e12 <__sflush_r+0xb2>
 8019e0e:	2b16      	cmp	r3, #22
 8019e10:	d101      	bne.n	8019e16 <__sflush_r+0xb6>
 8019e12:	602f      	str	r7, [r5, #0]
 8019e14:	e7b1      	b.n	8019d7a <__sflush_r+0x1a>
 8019e16:	89a3      	ldrh	r3, [r4, #12]
 8019e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e1c:	81a3      	strh	r3, [r4, #12]
 8019e1e:	e7ad      	b.n	8019d7c <__sflush_r+0x1c>
 8019e20:	690f      	ldr	r7, [r1, #16]
 8019e22:	2f00      	cmp	r7, #0
 8019e24:	d0a9      	beq.n	8019d7a <__sflush_r+0x1a>
 8019e26:	0793      	lsls	r3, r2, #30
 8019e28:	680e      	ldr	r6, [r1, #0]
 8019e2a:	bf08      	it	eq
 8019e2c:	694b      	ldreq	r3, [r1, #20]
 8019e2e:	600f      	str	r7, [r1, #0]
 8019e30:	bf18      	it	ne
 8019e32:	2300      	movne	r3, #0
 8019e34:	eba6 0807 	sub.w	r8, r6, r7
 8019e38:	608b      	str	r3, [r1, #8]
 8019e3a:	f1b8 0f00 	cmp.w	r8, #0
 8019e3e:	dd9c      	ble.n	8019d7a <__sflush_r+0x1a>
 8019e40:	6a21      	ldr	r1, [r4, #32]
 8019e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019e44:	4643      	mov	r3, r8
 8019e46:	463a      	mov	r2, r7
 8019e48:	4628      	mov	r0, r5
 8019e4a:	47b0      	blx	r6
 8019e4c:	2800      	cmp	r0, #0
 8019e4e:	dc06      	bgt.n	8019e5e <__sflush_r+0xfe>
 8019e50:	89a3      	ldrh	r3, [r4, #12]
 8019e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e56:	81a3      	strh	r3, [r4, #12]
 8019e58:	f04f 30ff 	mov.w	r0, #4294967295
 8019e5c:	e78e      	b.n	8019d7c <__sflush_r+0x1c>
 8019e5e:	4407      	add	r7, r0
 8019e60:	eba8 0800 	sub.w	r8, r8, r0
 8019e64:	e7e9      	b.n	8019e3a <__sflush_r+0xda>
 8019e66:	bf00      	nop
 8019e68:	20400001 	.word	0x20400001

08019e6c <_fflush_r>:
 8019e6c:	b538      	push	{r3, r4, r5, lr}
 8019e6e:	690b      	ldr	r3, [r1, #16]
 8019e70:	4605      	mov	r5, r0
 8019e72:	460c      	mov	r4, r1
 8019e74:	b913      	cbnz	r3, 8019e7c <_fflush_r+0x10>
 8019e76:	2500      	movs	r5, #0
 8019e78:	4628      	mov	r0, r5
 8019e7a:	bd38      	pop	{r3, r4, r5, pc}
 8019e7c:	b118      	cbz	r0, 8019e86 <_fflush_r+0x1a>
 8019e7e:	6983      	ldr	r3, [r0, #24]
 8019e80:	b90b      	cbnz	r3, 8019e86 <_fflush_r+0x1a>
 8019e82:	f7fe ff35 	bl	8018cf0 <__sinit>
 8019e86:	4b14      	ldr	r3, [pc, #80]	; (8019ed8 <_fflush_r+0x6c>)
 8019e88:	429c      	cmp	r4, r3
 8019e8a:	d11b      	bne.n	8019ec4 <_fflush_r+0x58>
 8019e8c:	686c      	ldr	r4, [r5, #4]
 8019e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d0ef      	beq.n	8019e76 <_fflush_r+0xa>
 8019e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019e98:	07d0      	lsls	r0, r2, #31
 8019e9a:	d404      	bmi.n	8019ea6 <_fflush_r+0x3a>
 8019e9c:	0599      	lsls	r1, r3, #22
 8019e9e:	d402      	bmi.n	8019ea6 <_fflush_r+0x3a>
 8019ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ea2:	f7fe ffc8 	bl	8018e36 <__retarget_lock_acquire_recursive>
 8019ea6:	4628      	mov	r0, r5
 8019ea8:	4621      	mov	r1, r4
 8019eaa:	f7ff ff59 	bl	8019d60 <__sflush_r>
 8019eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019eb0:	07da      	lsls	r2, r3, #31
 8019eb2:	4605      	mov	r5, r0
 8019eb4:	d4e0      	bmi.n	8019e78 <_fflush_r+0xc>
 8019eb6:	89a3      	ldrh	r3, [r4, #12]
 8019eb8:	059b      	lsls	r3, r3, #22
 8019eba:	d4dd      	bmi.n	8019e78 <_fflush_r+0xc>
 8019ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ebe:	f7fe ffbb 	bl	8018e38 <__retarget_lock_release_recursive>
 8019ec2:	e7d9      	b.n	8019e78 <_fflush_r+0xc>
 8019ec4:	4b05      	ldr	r3, [pc, #20]	; (8019edc <_fflush_r+0x70>)
 8019ec6:	429c      	cmp	r4, r3
 8019ec8:	d101      	bne.n	8019ece <_fflush_r+0x62>
 8019eca:	68ac      	ldr	r4, [r5, #8]
 8019ecc:	e7df      	b.n	8019e8e <_fflush_r+0x22>
 8019ece:	4b04      	ldr	r3, [pc, #16]	; (8019ee0 <_fflush_r+0x74>)
 8019ed0:	429c      	cmp	r4, r3
 8019ed2:	bf08      	it	eq
 8019ed4:	68ec      	ldreq	r4, [r5, #12]
 8019ed6:	e7da      	b.n	8019e8e <_fflush_r+0x22>
 8019ed8:	0801a8ec 	.word	0x0801a8ec
 8019edc:	0801a90c 	.word	0x0801a90c
 8019ee0:	0801a8cc 	.word	0x0801a8cc

08019ee4 <fiprintf>:
 8019ee4:	b40e      	push	{r1, r2, r3}
 8019ee6:	b503      	push	{r0, r1, lr}
 8019ee8:	4601      	mov	r1, r0
 8019eea:	ab03      	add	r3, sp, #12
 8019eec:	4805      	ldr	r0, [pc, #20]	; (8019f04 <fiprintf+0x20>)
 8019eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8019ef2:	6800      	ldr	r0, [r0, #0]
 8019ef4:	9301      	str	r3, [sp, #4]
 8019ef6:	f7ff fcbf 	bl	8019878 <_vfiprintf_r>
 8019efa:	b002      	add	sp, #8
 8019efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f00:	b003      	add	sp, #12
 8019f02:	4770      	bx	lr
 8019f04:	200000f0 	.word	0x200000f0

08019f08 <_lseek_r>:
 8019f08:	b538      	push	{r3, r4, r5, lr}
 8019f0a:	4d07      	ldr	r5, [pc, #28]	; (8019f28 <_lseek_r+0x20>)
 8019f0c:	4604      	mov	r4, r0
 8019f0e:	4608      	mov	r0, r1
 8019f10:	4611      	mov	r1, r2
 8019f12:	2200      	movs	r2, #0
 8019f14:	602a      	str	r2, [r5, #0]
 8019f16:	461a      	mov	r2, r3
 8019f18:	f7e8 fb98 	bl	800264c <_lseek>
 8019f1c:	1c43      	adds	r3, r0, #1
 8019f1e:	d102      	bne.n	8019f26 <_lseek_r+0x1e>
 8019f20:	682b      	ldr	r3, [r5, #0]
 8019f22:	b103      	cbz	r3, 8019f26 <_lseek_r+0x1e>
 8019f24:	6023      	str	r3, [r4, #0]
 8019f26:	bd38      	pop	{r3, r4, r5, pc}
 8019f28:	20001a04 	.word	0x20001a04

08019f2c <__swhatbuf_r>:
 8019f2c:	b570      	push	{r4, r5, r6, lr}
 8019f2e:	460e      	mov	r6, r1
 8019f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f34:	2900      	cmp	r1, #0
 8019f36:	b096      	sub	sp, #88	; 0x58
 8019f38:	4614      	mov	r4, r2
 8019f3a:	461d      	mov	r5, r3
 8019f3c:	da07      	bge.n	8019f4e <__swhatbuf_r+0x22>
 8019f3e:	2300      	movs	r3, #0
 8019f40:	602b      	str	r3, [r5, #0]
 8019f42:	89b3      	ldrh	r3, [r6, #12]
 8019f44:	061a      	lsls	r2, r3, #24
 8019f46:	d410      	bmi.n	8019f6a <__swhatbuf_r+0x3e>
 8019f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019f4c:	e00e      	b.n	8019f6c <__swhatbuf_r+0x40>
 8019f4e:	466a      	mov	r2, sp
 8019f50:	f000 f8c2 	bl	801a0d8 <_fstat_r>
 8019f54:	2800      	cmp	r0, #0
 8019f56:	dbf2      	blt.n	8019f3e <__swhatbuf_r+0x12>
 8019f58:	9a01      	ldr	r2, [sp, #4]
 8019f5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019f5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019f62:	425a      	negs	r2, r3
 8019f64:	415a      	adcs	r2, r3
 8019f66:	602a      	str	r2, [r5, #0]
 8019f68:	e7ee      	b.n	8019f48 <__swhatbuf_r+0x1c>
 8019f6a:	2340      	movs	r3, #64	; 0x40
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	6023      	str	r3, [r4, #0]
 8019f70:	b016      	add	sp, #88	; 0x58
 8019f72:	bd70      	pop	{r4, r5, r6, pc}

08019f74 <__smakebuf_r>:
 8019f74:	898b      	ldrh	r3, [r1, #12]
 8019f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f78:	079d      	lsls	r5, r3, #30
 8019f7a:	4606      	mov	r6, r0
 8019f7c:	460c      	mov	r4, r1
 8019f7e:	d507      	bpl.n	8019f90 <__smakebuf_r+0x1c>
 8019f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019f84:	6023      	str	r3, [r4, #0]
 8019f86:	6123      	str	r3, [r4, #16]
 8019f88:	2301      	movs	r3, #1
 8019f8a:	6163      	str	r3, [r4, #20]
 8019f8c:	b002      	add	sp, #8
 8019f8e:	bd70      	pop	{r4, r5, r6, pc}
 8019f90:	ab01      	add	r3, sp, #4
 8019f92:	466a      	mov	r2, sp
 8019f94:	f7ff ffca 	bl	8019f2c <__swhatbuf_r>
 8019f98:	9900      	ldr	r1, [sp, #0]
 8019f9a:	4605      	mov	r5, r0
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f7fd fa73 	bl	8017488 <_malloc_r>
 8019fa2:	b948      	cbnz	r0, 8019fb8 <__smakebuf_r+0x44>
 8019fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019fa8:	059a      	lsls	r2, r3, #22
 8019faa:	d4ef      	bmi.n	8019f8c <__smakebuf_r+0x18>
 8019fac:	f023 0303 	bic.w	r3, r3, #3
 8019fb0:	f043 0302 	orr.w	r3, r3, #2
 8019fb4:	81a3      	strh	r3, [r4, #12]
 8019fb6:	e7e3      	b.n	8019f80 <__smakebuf_r+0xc>
 8019fb8:	4b0d      	ldr	r3, [pc, #52]	; (8019ff0 <__smakebuf_r+0x7c>)
 8019fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8019fbc:	89a3      	ldrh	r3, [r4, #12]
 8019fbe:	6020      	str	r0, [r4, #0]
 8019fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fc4:	81a3      	strh	r3, [r4, #12]
 8019fc6:	9b00      	ldr	r3, [sp, #0]
 8019fc8:	6163      	str	r3, [r4, #20]
 8019fca:	9b01      	ldr	r3, [sp, #4]
 8019fcc:	6120      	str	r0, [r4, #16]
 8019fce:	b15b      	cbz	r3, 8019fe8 <__smakebuf_r+0x74>
 8019fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	f000 f891 	bl	801a0fc <_isatty_r>
 8019fda:	b128      	cbz	r0, 8019fe8 <__smakebuf_r+0x74>
 8019fdc:	89a3      	ldrh	r3, [r4, #12]
 8019fde:	f023 0303 	bic.w	r3, r3, #3
 8019fe2:	f043 0301 	orr.w	r3, r3, #1
 8019fe6:	81a3      	strh	r3, [r4, #12]
 8019fe8:	89a0      	ldrh	r0, [r4, #12]
 8019fea:	4305      	orrs	r5, r0
 8019fec:	81a5      	strh	r5, [r4, #12]
 8019fee:	e7cd      	b.n	8019f8c <__smakebuf_r+0x18>
 8019ff0:	08018c89 	.word	0x08018c89

08019ff4 <__ascii_mbtowc>:
 8019ff4:	b082      	sub	sp, #8
 8019ff6:	b901      	cbnz	r1, 8019ffa <__ascii_mbtowc+0x6>
 8019ff8:	a901      	add	r1, sp, #4
 8019ffa:	b142      	cbz	r2, 801a00e <__ascii_mbtowc+0x1a>
 8019ffc:	b14b      	cbz	r3, 801a012 <__ascii_mbtowc+0x1e>
 8019ffe:	7813      	ldrb	r3, [r2, #0]
 801a000:	600b      	str	r3, [r1, #0]
 801a002:	7812      	ldrb	r2, [r2, #0]
 801a004:	1e10      	subs	r0, r2, #0
 801a006:	bf18      	it	ne
 801a008:	2001      	movne	r0, #1
 801a00a:	b002      	add	sp, #8
 801a00c:	4770      	bx	lr
 801a00e:	4610      	mov	r0, r2
 801a010:	e7fb      	b.n	801a00a <__ascii_mbtowc+0x16>
 801a012:	f06f 0001 	mvn.w	r0, #1
 801a016:	e7f8      	b.n	801a00a <__ascii_mbtowc+0x16>

0801a018 <memmove>:
 801a018:	4288      	cmp	r0, r1
 801a01a:	b510      	push	{r4, lr}
 801a01c:	eb01 0402 	add.w	r4, r1, r2
 801a020:	d902      	bls.n	801a028 <memmove+0x10>
 801a022:	4284      	cmp	r4, r0
 801a024:	4623      	mov	r3, r4
 801a026:	d807      	bhi.n	801a038 <memmove+0x20>
 801a028:	1e43      	subs	r3, r0, #1
 801a02a:	42a1      	cmp	r1, r4
 801a02c:	d008      	beq.n	801a040 <memmove+0x28>
 801a02e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a032:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a036:	e7f8      	b.n	801a02a <memmove+0x12>
 801a038:	4402      	add	r2, r0
 801a03a:	4601      	mov	r1, r0
 801a03c:	428a      	cmp	r2, r1
 801a03e:	d100      	bne.n	801a042 <memmove+0x2a>
 801a040:	bd10      	pop	{r4, pc}
 801a042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a046:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a04a:	e7f7      	b.n	801a03c <memmove+0x24>

0801a04c <_realloc_r>:
 801a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a04e:	4607      	mov	r7, r0
 801a050:	4614      	mov	r4, r2
 801a052:	460e      	mov	r6, r1
 801a054:	b921      	cbnz	r1, 801a060 <_realloc_r+0x14>
 801a056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a05a:	4611      	mov	r1, r2
 801a05c:	f7fd ba14 	b.w	8017488 <_malloc_r>
 801a060:	b922      	cbnz	r2, 801a06c <_realloc_r+0x20>
 801a062:	f7fd f9c1 	bl	80173e8 <_free_r>
 801a066:	4625      	mov	r5, r4
 801a068:	4628      	mov	r0, r5
 801a06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a06c:	f000 f856 	bl	801a11c <_malloc_usable_size_r>
 801a070:	42a0      	cmp	r0, r4
 801a072:	d20f      	bcs.n	801a094 <_realloc_r+0x48>
 801a074:	4621      	mov	r1, r4
 801a076:	4638      	mov	r0, r7
 801a078:	f7fd fa06 	bl	8017488 <_malloc_r>
 801a07c:	4605      	mov	r5, r0
 801a07e:	2800      	cmp	r0, #0
 801a080:	d0f2      	beq.n	801a068 <_realloc_r+0x1c>
 801a082:	4631      	mov	r1, r6
 801a084:	4622      	mov	r2, r4
 801a086:	f7fd f999 	bl	80173bc <memcpy>
 801a08a:	4631      	mov	r1, r6
 801a08c:	4638      	mov	r0, r7
 801a08e:	f7fd f9ab 	bl	80173e8 <_free_r>
 801a092:	e7e9      	b.n	801a068 <_realloc_r+0x1c>
 801a094:	4635      	mov	r5, r6
 801a096:	e7e7      	b.n	801a068 <_realloc_r+0x1c>

0801a098 <_read_r>:
 801a098:	b538      	push	{r3, r4, r5, lr}
 801a09a:	4d07      	ldr	r5, [pc, #28]	; (801a0b8 <_read_r+0x20>)
 801a09c:	4604      	mov	r4, r0
 801a09e:	4608      	mov	r0, r1
 801a0a0:	4611      	mov	r1, r2
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	602a      	str	r2, [r5, #0]
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	f7e8 fa70 	bl	800258c <_read>
 801a0ac:	1c43      	adds	r3, r0, #1
 801a0ae:	d102      	bne.n	801a0b6 <_read_r+0x1e>
 801a0b0:	682b      	ldr	r3, [r5, #0]
 801a0b2:	b103      	cbz	r3, 801a0b6 <_read_r+0x1e>
 801a0b4:	6023      	str	r3, [r4, #0]
 801a0b6:	bd38      	pop	{r3, r4, r5, pc}
 801a0b8:	20001a04 	.word	0x20001a04

0801a0bc <__ascii_wctomb>:
 801a0bc:	b149      	cbz	r1, 801a0d2 <__ascii_wctomb+0x16>
 801a0be:	2aff      	cmp	r2, #255	; 0xff
 801a0c0:	bf85      	ittet	hi
 801a0c2:	238a      	movhi	r3, #138	; 0x8a
 801a0c4:	6003      	strhi	r3, [r0, #0]
 801a0c6:	700a      	strbls	r2, [r1, #0]
 801a0c8:	f04f 30ff 	movhi.w	r0, #4294967295
 801a0cc:	bf98      	it	ls
 801a0ce:	2001      	movls	r0, #1
 801a0d0:	4770      	bx	lr
 801a0d2:	4608      	mov	r0, r1
 801a0d4:	4770      	bx	lr
	...

0801a0d8 <_fstat_r>:
 801a0d8:	b538      	push	{r3, r4, r5, lr}
 801a0da:	4d07      	ldr	r5, [pc, #28]	; (801a0f8 <_fstat_r+0x20>)
 801a0dc:	2300      	movs	r3, #0
 801a0de:	4604      	mov	r4, r0
 801a0e0:	4608      	mov	r0, r1
 801a0e2:	4611      	mov	r1, r2
 801a0e4:	602b      	str	r3, [r5, #0]
 801a0e6:	f7e8 fa96 	bl	8002616 <_fstat>
 801a0ea:	1c43      	adds	r3, r0, #1
 801a0ec:	d102      	bne.n	801a0f4 <_fstat_r+0x1c>
 801a0ee:	682b      	ldr	r3, [r5, #0]
 801a0f0:	b103      	cbz	r3, 801a0f4 <_fstat_r+0x1c>
 801a0f2:	6023      	str	r3, [r4, #0]
 801a0f4:	bd38      	pop	{r3, r4, r5, pc}
 801a0f6:	bf00      	nop
 801a0f8:	20001a04 	.word	0x20001a04

0801a0fc <_isatty_r>:
 801a0fc:	b538      	push	{r3, r4, r5, lr}
 801a0fe:	4d06      	ldr	r5, [pc, #24]	; (801a118 <_isatty_r+0x1c>)
 801a100:	2300      	movs	r3, #0
 801a102:	4604      	mov	r4, r0
 801a104:	4608      	mov	r0, r1
 801a106:	602b      	str	r3, [r5, #0]
 801a108:	f7e8 fa95 	bl	8002636 <_isatty>
 801a10c:	1c43      	adds	r3, r0, #1
 801a10e:	d102      	bne.n	801a116 <_isatty_r+0x1a>
 801a110:	682b      	ldr	r3, [r5, #0]
 801a112:	b103      	cbz	r3, 801a116 <_isatty_r+0x1a>
 801a114:	6023      	str	r3, [r4, #0]
 801a116:	bd38      	pop	{r3, r4, r5, pc}
 801a118:	20001a04 	.word	0x20001a04

0801a11c <_malloc_usable_size_r>:
 801a11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a120:	1f18      	subs	r0, r3, #4
 801a122:	2b00      	cmp	r3, #0
 801a124:	bfbc      	itt	lt
 801a126:	580b      	ldrlt	r3, [r1, r0]
 801a128:	18c0      	addlt	r0, r0, r3
 801a12a:	4770      	bx	lr

0801a12c <_init>:
 801a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a12e:	bf00      	nop
 801a130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a132:	bc08      	pop	{r3}
 801a134:	469e      	mov	lr, r3
 801a136:	4770      	bx	lr

0801a138 <_fini>:
 801a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a13a:	bf00      	nop
 801a13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a13e:	bc08      	pop	{r3}
 801a140:	469e      	mov	lr, r3
 801a142:	4770      	bx	lr
