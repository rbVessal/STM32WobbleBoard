
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a500  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0801a690  0801a690  0002a690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b23c  0801b23c  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b23c  0801b23c  0002b23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b244  0801b244  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b244  0801b244  0002b244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b248  0801b248  0002b248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801b24c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801b50c  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801b50c  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f1c2  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006044  00000000  00000000  0007f4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b60  00000000  00000000  000854f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002918  00000000  00000000  00088058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000312b9  00000000  00000000  0008a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b087  00000000  00000000  000bbc29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001167f4  00000000  00000000  000e6cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd4a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e3e4  00000000  00000000  001fd4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a678 	.word	0x0801a678

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a678 	.word	0x0801a678

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f4e:	801a      	strh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <_ZN14WobbleBoardAppC1Ev+0x98>)
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
{
}
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	3e4ccccd 	.word	0x3e4ccccd

08000fdc <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f005 f99d 	bl	8006324 <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fea:	f001 fdb3 	bl	8002b54 <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000fee:	2164      	movs	r1, #100	; 0x64
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fc3f 	bl	8001874 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f85e 	bl	80010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ffc:	f001 f9c8 	bl	8002390 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001000:	200a      	movs	r0, #10
 8001002:	f001 fa80 	bl	8002506 <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f014 fc2e 	bl	801586c <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8001010:	7e3b      	ldrb	r3, [r7, #24]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d132      	bne.n	800107c <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001016:	edd7 7a03 	vldr	s15, [r7, #12]
 800101a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8001026:	edd7 7a07 	vldr	s15, [r7, #28]
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 2a90 	vmov	r2, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8001046:	edd7 7a07 	vldr	s15, [r7, #28]
 800104a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104e:	ee17 2a90 	vmov	r2, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001056:	edd7 7a05 	vldr	s15, [r7, #20]
 800105a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8001066:	edd7 7a07 	vldr	s15, [r7, #28]
 800106a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106e:	ee17 2a90 	vmov	r2, s15
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	615a      	str	r2, [r3, #20]

		MagCalStatus = 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	721a      	strb	r2, [r3, #8]
	}

	DWTInit();
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fb5b 	bl	8001738 <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8001082:	f000 fe79 	bl	8001d78 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	if(Enable6XMotionFusion == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <_ZN14WobbleBoardApp4InitEv+0xc4>
	{
		Enable6AxisMotionFusion();
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fbd3 	bl	8001844 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>
 800109e:	e002      	b.n	80010a6 <_ZN14WobbleBoardApp4InitEv+0xca>
	}
	else
	{
		Enable9AxisMotionFusion();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fbdb 	bl	800185c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>
	}

	StartDataStreaming();
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fb9e 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	43fa0000 	.word	0x43fa0000

080010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 80010c0:	f001 f804 	bl	80020cc <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 80010c4:	f001 f80a 	bl	80020dc <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 80010c8:	f001 f810 	bl	80020ec <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80010cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80010e4 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 80010d0:	f001 f853 	bl	800217a <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f001 f85f 	bl	8002198 <BSP_SENSOR_ACC_SetFullScale>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	42c80000 	.word	0x42c80000

080010e8 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//			HandleCMD((TMsg *)&msg_cmd);
//		}
//	}
//

	if (MagCalRequest == 1U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <_ZN14WobbleBoardApp7ProcessEv+0x44>
	{
		MagCalRequest = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	721a      	strb	r2, [r3, #8]
		MagOffset.x = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
		MagOffset.y = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
		MagOffset.z = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001126:	200a      	movs	r0, #10
 8001128:	f001 f9ed 	bl	8002506 <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!IsInUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <_ZN14WobbleBoardApp7ProcessEv+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <_ZN14WobbleBoardApp7ProcessEv+0x64>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <_ZN14WobbleBoardApp7ProcessEv+0x70>
	{
		SensorReadRequest = 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n User Calibration Mode timer counter: %d \r\n",
//			userCalbirationModeTimerCount);
//		printf("%s", DataOut);
	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(IsInUserCalibrationMode)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
	{
		CaptureMotionFXGravityXData();
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fbe2 	bl	800192c <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>

		if(HAL_GetTick() - UserCalibrationTimerTimestamp  >= USER_CALIBRATION_TIME)
 8001168:	f005 fa46 	bl	80065f8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	bf2c      	ite	cs
 800117e:	2301      	movcs	r3, #1
 8001180:	2300      	movcc	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
		{
			ExitUserCalibrationMode(false);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fcf6 	bl	8001b7c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
		}
	}

	if (SensorReadRequest == 1U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <_ZN14WobbleBoardApp7ProcessEv+0xcc>
	{
		SensorReadRequest = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f91a 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200014a8 	.word	0x200014a8

080011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3318      	adds	r3, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 ffad 	bl	800212c <BSP_SENSOR_ACC_GetAxes>

	if(MotionDataVerbosityLevel == All)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d116      	bne.n	800120a <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4a>

	//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
	//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
	//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6999      	ldr	r1, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6a12      	ldr	r2, [r2, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x54>)
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	f017 f913 	bl	8018424 <sniprintf>
		printf("%s", DataOut);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	334c      	adds	r3, #76	; 0x4c
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x58>)
 8001206:	f017 f8a1 	bl	801834c <iprintf>
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0801a690 	.word	0x0801a690
 8001218:	0801a6bc 	.word	0x0801a6bc

0800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3324      	adds	r3, #36	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ff8c 	bl	8002146 <BSP_SENSOR_GYR_GetAxes>

	if(MotionDataVerbosityLevel == All)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001234:	2b00      	cmp	r3, #0
 8001236:	d116      	bne.n	8001266 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4a>
	{
	//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
	//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
	//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x54>)
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f017 f8e5 	bl	8018424 <sniprintf>
		printf("%s", DataOut);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	334c      	adds	r3, #76	; 0x4c
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x58>)
 8001262:	f017 f873 	bl	801834c <iprintf>
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0801a6c0 	.word	0x0801a6c0
 8001274:	0801a6bc 	.word	0x0801a6bc

08001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3330      	adds	r3, #48	; 0x30
 8001284:	4618      	mov	r0, r3
 8001286:	f000 ff6b 	bl	8002160 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7a1b      	ldrb	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d16d      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	f103 020a 	add.w	r2, r3, #10
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f8f6 	bl	80024e8 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80012fc:	7e3b      	ldrb	r3, [r7, #24]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d135      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	721a      	strb	r2, [r3, #8]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 8001318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001328:	edd7 7a04 	vldr	s15, [r7, #16]
 800132c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001338:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800133c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001340:	ee17 2a90 	vmov	r2, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001348:	edd7 7a05 	vldr	s15, [r7, #20]
 800134c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001358:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	615a      	str	r2, [r3, #20]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001368:	200a      	movs	r0, #10
 800136a:	f001 f8d8 	bl	800251e <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	1ad2      	subs	r2, r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	639a      	str	r2, [r3, #56]	; 0x38

	if(MotionDataVerbosityLevel == All)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
	{
	//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
	//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
	//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x168>)
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	f017 f830 	bl	8018424 <sniprintf>
		printf("%s", DataOut);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	334c      	adds	r3, #76	; 0x4c
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x16c>)
 80013cc:	f016 ffbe 	bl	801834c <iprintf>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	3b03126f 	.word	0x3b03126f
 80013dc:	43fa0000 	.word	0x43fa0000
 80013e0:	0801a6e4 	.word	0x0801a6e4
 80013e4:	0801a6bc 	.word	0x0801a6bc

080013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

MFX_output_t * WobbleBoardApp::MotionFXDataHandler()
{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	b0a5      	sub	sp, #148	; 0x94
 80013ee:	af06      	add	r7, sp, #24
 80013f0:	6078      	str	r0, [r7, #4]
	// Get the 3 motion sensor data
	// and potentially write them to the terminal
	// depending on motion verbosity log level
	AccelerometerSensorHandler();
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fee4 	bl	80011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
	GyroSensorHandler();
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff0f 	bl	800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
	MagnetometerSensorHandler();
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff3a 	bl	8001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

	MFX_input_t dataIn;
	MFX_input_t* pDataIn = &dataIn;
 8001404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t dataOut;
	MFX_output_t* pDataOut = &dataOut;
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	dataIn.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	dataIn.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	dataIn.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	/* Convert acceleration from [mg] to [g] */
	dataIn.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	dataIn.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	dataIn.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	dataIn.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	dataIn.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	dataIn.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	/* Run Sensor Fusion algorithm */
	DWTStart();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f93f 	bl	800176c <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pDataIn, pDataOut, MOTION_FX_ENGINE_DELTATIME);
 80014ee:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800171c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x334>
 80014f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014f6:	f000 ffa3 	bl	8002440 <MotionFX_manager_run>
	uint32_t elapsed_time_us = DWTStop();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f94c 	bl	8001798 <_ZN14WobbleBoardApp7DWTStopEv>
 8001500:	66b8      	str	r0, [r7, #104]	; 0x68
//	(void)memcpy(&Msg->Data[95], (void *) & (pDataOut->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pDataOut->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if((MotionDataVerbosityLevel == All || MotionDataVerbosityLevel == MotionFXOnly) &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x130>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 80f7 	bne.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
 8001518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80f3 	beq.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
			(pDataOut != nullptr))
	{
		float motionFXGravityX = pDataOut->gravity[0];
 8001520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
		if(motionFXGravityX < 0.0f)
 8001526:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800152a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d505      	bpl.n	8001540 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x158>
		{
			motionFXGravityX *= -1.0f;
 8001534:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001538:	eef1 7a67 	vneg.f32	s15, s15
 800153c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		}

		// Only transmit the motion FX data if it's more than the deadzone
		if(motionFXGravityX > DeadZoneMotionFXGravityX)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8001546:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	f340 80d8 	ble.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
		{
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800155c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155e:	68db      	ldr	r3, [r3, #12]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800156a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156c:	691b      	ldr	r3, [r3, #16]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 8001578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157a:	695b      	ldr	r3, [r3, #20]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800158e:	e9cd 4500 	strd	r4, r5, [sp]
 8001592:	4a63      	ldr	r2, [pc, #396]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	4630      	mov	r0, r6
 800159a:	f016 ff43 	bl	8018424 <sniprintf>
			printf("%s", DataOut);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	334c      	adds	r3, #76	; 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	485f      	ldr	r0, [pc, #380]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015a6:	f016 fed1 	bl	801834c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b2:	681b      	ldr	r3, [r3, #0]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c0:	685b      	ldr	r3, [r3, #4]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	4680      	mov	r8, r0
 80015ca:	4689      	mov	r9, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ce:	689b      	ldr	r3, [r3, #8]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015e2:	e9cd 4500 	strd	r4, r5, [sp]
 80015e6:	4a50      	ldr	r2, [pc, #320]	; (8001728 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x340>)
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4630      	mov	r0, r6
 80015ee:	f016 ff19 	bl	8018424 <sniprintf>
			printf("%s", DataOut);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	334c      	adds	r3, #76	; 0x4c
 80015f6:	4619      	mov	r1, r3
 80015f8:	484a      	ldr	r0, [pc, #296]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015fa:	f016 fea7 	bl	801834c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001606:	69db      	ldr	r3, [r3, #28]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001614:	6a1b      	ldr	r3, [r3, #32]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff96 	bl	8000548 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff8f 	bl	8000548 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001632:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001636:	e9cd 4500 	strd	r4, r5, [sp]
 800163a:	4a3c      	ldr	r2, [pc, #240]	; (800172c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x344>)
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4630      	mov	r0, r6
 8001642:	f016 feef 	bl	8018424 <sniprintf>
			printf("%s", DataOut);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	334c      	adds	r3, #76	; 0x4c
 800164a:	4619      	mov	r1, r3
 800164c:	4835      	ldr	r0, [pc, #212]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 800164e:	f016 fe7d 	bl	801834c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff6c 	bl	8000548 <__aeabi_f2d>
 8001670:	4680      	mov	r8, r0
 8001672:	4689      	mov	r9, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001686:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800168a:	e9cd 4500 	strd	r4, r5, [sp]
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001694:	4630      	mov	r0, r6
 8001696:	f016 fec5 	bl	8018424 <sniprintf>
			printf("%s", DataOut);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	334c      	adds	r3, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016a2:	f016 fe53 	bl	801834c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->heading);
 80016ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9cd 2300 	strd	r2, r3, [sp]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x348>)
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	4620      	mov	r0, r4
 80016c6:	f016 fead 	bl	8018424 <sniprintf>
			printf("%s", DataOut);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	334c      	adds	r3, #76	; 0x4c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016d2:	f016 fe3b 	bl	801834c <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->headingErr);
 80016dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9cd 2300 	strd	r2, r3, [sp]
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x34c>)
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4620      	mov	r0, r4
 80016f6:	f016 fe95 	bl	8018424 <sniprintf>
			printf("%s", DataOut);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	334c      	adds	r3, #76	; 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 8001702:	f016 fe23 	bl	801834c <iprintf>
		}
	}

	return pDataOut;
 8001706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001708:	4618      	mov	r0, r3
 800170a:	377c      	adds	r7, #124	; 0x7c
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001712:	bf00      	nop
 8001714:	3a83126f 	.word	0x3a83126f
 8001718:	3b03126f 	.word	0x3b03126f
 800171c:	3c23d70a 	.word	0x3c23d70a
 8001720:	0801a710 	.word	0x0801a710
 8001724:	0801a6bc 	.word	0x0801a6bc
 8001728:	0801a748 	.word	0x0801a748
 800172c:	0801a780 	.word	0x0801a780
 8001730:	0801a7b4 	.word	0x0801a7b4
 8001734:	0801a7d4 	.word	0x0801a7d4

08001738 <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000edf0 	.word	0xe000edf0
 8001768:	e0001000 	.word	0xe0001000

0800176c <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e0001000 	.word	0xe0001000

08001798 <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e0001000 	.word	0xe0001000
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 80017f0:	f000 fc84 	bl	80020fc <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 80017f4:	f000 fc8a 	bl	800210c <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 80017f8:	f000 fc90 	bl	800211c <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 80017fe:	f008 f9c7 	bl	8009b90 <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	SensorsEnabled = 1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200014a8 	.word	0x200014a8

0800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <_ZN14WobbleBoardApp17StopDataStreamingEv+0x24>)
 800182e:	f008 fa17 	bl	8009c60 <HAL_TIM_Base_Stop>

	SensorsEnabled = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200014a8 	.word	0x200014a8

08001844 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>:

void WobbleBoardApp::Enable6AxisMotionFusion()
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_9X();
 800184c:	f000 fe42 	bl	80024d4 <MotionFX_manager_stop_9X>
	MotionFX_manager_start_6X();
 8001850:	f000 fe22 	bl	8002498 <MotionFX_manager_start_6X>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001864:	f000 fe22 	bl	80024ac <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001868:	f000 fe2a 	bl	80024c0 <MotionFX_manager_start_9X>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800187e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001882:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 800188a:	fba2 2303 	umull	r2, r3, r2, r3
 800188e:	09db      	lsrs	r3, r3, #7
 8001890:	3b01      	subs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	3b01      	subs	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80018ae:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80018c0:	480a      	ldr	r0, [pc, #40]	; (80018ec <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018c2:	f008 f90d 	bl	8009ae0 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf14      	ite	ne
 80018cc:	2301      	movne	r3, #1
 80018ce:	2300      	moveq	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 80018d6:	f000 fd55 	bl	8002384 <Error_Handler>
  }
}
 80018da:	bf00      	nop
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	10624dd3 	.word	0x10624dd3
 80018ec:	200014a8 	.word	0x200014a8

080018f0 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80018fe:	f083 0301 	eor.w	r3, r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if(ShouldStartUserCalibrationMode)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8b5 	bl	8001a84 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode(true);
	}
}
 800191a:	e003      	b.n	8001924 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x34>
		ExitUserCalibrationMode(true);
 800191c:	2101      	movs	r1, #1
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f92c 	bl	8001b7c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>:

void WobbleBoardApp::CaptureMotionFXGravityXData()
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b087      	sub	sp, #28
 8001930:	af02      	add	r7, sp, #8
 8001932:	6078      	str	r0, [r7, #4]
	MFX_output_t* pMotionFXData = MotionFXDataHandler();
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff fd57 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
 800193a:	60f8      	str	r0, [r7, #12]
	if(pMotionFXData != nullptr)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d031      	beq.n	80019a6 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x7a>
	{
		MotionFXGravityXBuffer[MotionFXDataBufferIndex] = pMotionFXData->gravity[0];
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	69d2      	ldr	r2, [r2, #28]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	3354      	adds	r3, #84	; 0x54
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	601a      	str	r2, [r3, #0]

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Captured MotionFusion Gravity X from User: %.1f\r\n",
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f103 044c 	add.w	r4, r3, #76	; 0x4c
				pMotionFXData->gravity[0]);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	69db      	ldr	r3, [r3, #28]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Captured MotionFusion Gravity X from User: %.1f\r\n",
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf1 	bl	8000548 <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	e9cd 2300 	strd	r2, r3, [sp]
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x84>)
 8001970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001974:	4620      	mov	r0, r4
 8001976:	f016 fd55 	bl	8018424 <sniprintf>
		printf("%s", DataOut);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	334c      	adds	r3, #76	; 0x4c
 800197e:	4619      	mov	r1, r3
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x88>)
 8001982:	f016 fce3 	bl	801834c <iprintf>

		MotionFXDataBufferIndex++;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

		// Make sure we don't exceed the buffer length and wrap around
		// instead to keep grabbing data
		if(MotionFXDataBufferIndex >= NUMBER_OF_MOTIONFX_DATA_SAMPLES)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800199a:	2b31      	cmp	r3, #49	; 0x31
 800199c:	dd03      	ble.n	80019a6 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x7a>
		{
			MotionFXDataBufferIndex = 0;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		}
	}
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	0801a7fc 	.word	0x0801a7fc
 80019b4:	0801a6bc 	.word	0x0801a6bc

080019b8 <_ZN14WobbleBoardApp17CalculateDeadZoneEv>:

// Get the average motion fusion gravity X over a time period
float WobbleBoardApp::CalculateDeadZone()
{
 80019b8:	b590      	push	{r4, r7, lr}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
	float accumulatedMotionFXGravityX = 0.0f;
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b31      	cmp	r3, #49	; 0x31
 80019ce:	dc1f      	bgt.n	8001a10 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x58>
	{
		float motionFusionGravityX = MotionFXGravityXBuffer[i];
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	3354      	adds	r3, #84	; 0x54
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

		// It's possible that it could be negative and we want to
		// negate that so they don't cancel each other out
		// when accumulating the gravity X
		if(motionFusionGravityX < 0.0f)
 80019de:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d505      	bpl.n	80019f8 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x40>
		{
			motionFusionGravityX *= -1.0f;
 80019ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f0:	eef1 7a67 	vneg.f32	s15, s15
 80019f4:	edc7 7a03 	vstr	s15, [r7, #12]

//		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X from User: %.1f\r\n",
//				motionFusionGravityX);
//			printf("%s", DataOut);

		accumulatedMotionFXGravityX += motionFusionGravityX;
 80019f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	e7dc      	b.n	80019ca <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x12>
	}

	float averageMotionFXGravityX = accumulatedMotionFXGravityX / NUMBER_OF_MOTIONFX_DATA_SAMPLES;
 8001a10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a14:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a78 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc0>
 8001a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1c:	edc7 7a02 	vstr	s15, [r7, #8]
	if(averageMotionFXGravityX < MIN_DEADZONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d502      	bpl.n	8001a3a <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x82>
	{
		averageMotionFXGravityX = MIN_DEADZONE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60bb      	str	r3, [r7, #8]
	}

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X DeadZone Calculated For User: %.1f\r\n",
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	f7fe fd81 	bl	8000548 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc4>)
 8001a50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a54:	4620      	mov	r0, r4
 8001a56:	f016 fce5 	bl	8018424 <sniprintf>
			averageMotionFXGravityX);
	printf("%s", DataOut);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	334c      	adds	r3, #76	; 0x4c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4807      	ldr	r0, [pc, #28]	; (8001a80 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc8>)
 8001a62:	f016 fc73 	bl	801834c <iprintf>

	return averageMotionFXGravityX;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	ee07 3a90 	vmov	s15, r3
}
 8001a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd90      	pop	{r4, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	42480000 	.word	0x42480000
 8001a7c:	0801a834 	.word	0x0801a834
 8001a80:	0801a6bc 	.word	0x0801a6bc

08001a84 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	// the user calibration time to end the user calibration mode
	UserCalibrationTimerTimestamp = HAL_GetTick();

	IsInUserCalibrationMode = true;

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
 8001a8c:	466b      	mov	r3, sp
 8001a8e:	461d      	mov	r5, r3
	std::string printString = "Entered User Calibration Mode\r\n";
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f013 ff36 	bl	8015906 <_ZNSaIcEC1Ev>
 8001a9a:	f107 0220 	add.w	r2, r7, #32
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xf0>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f013 ff9b 	bl	80159e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001aaa:	f107 0320 	add.w	r3, r7, #32
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f013 ff2a 	bl	8015908 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f013 ff69 	bl	8015990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	char PrintBuffer[printStringLength];
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	1e5c      	subs	r4, r3, #1
 8001ac6:	62bc      	str	r4, [r7, #40]	; 0x28
 8001ac8:	4623      	mov	r3, r4
 8001aca:	3301      	adds	r3, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	00cb      	lsls	r3, r1, #3
 8001adc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ae0:	00c2      	lsls	r2, r0, #3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	00cb      	lsls	r3, r1, #3
 8001af6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001afa:	00c2      	lsls	r2, r0, #3
 8001afc:	4623      	mov	r3, r4
 8001afe:	3301      	adds	r3, #1
 8001b00:	3307      	adds	r3, #7
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0a:	466b      	mov	r3, sp
 8001b0c:	3300      	adds	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(PrintBuffer, printString.c_str());
 8001b10:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f013 ff3c 	bl	8015994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4620      	mov	r0, r4
 8001b22:	f016 fcb3 	bl	801848c <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001b26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b30:	4811      	ldr	r0, [pc, #68]	; (8001b78 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xf4>)
 8001b32:	f008 fd09 	bl	800a548 <HAL_UART_Transmit>
	StopDataStreaming();
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe70 	bl	800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>
	UserCalibrationTimerTimestamp = HAL_GetTick();
 8001b3c:	f004 fd5c 	bl	80065f8 <HAL_GetTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	IsInUserCalibrationMode = true;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2120      	movs	r1, #32
 8001b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5a:	f005 fbeb 	bl	8007334 <HAL_GPIO_WritePin>
	std::string printString = "Entered User Calibration Mode\r\n";
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f013 ff0e 	bl	8015984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b68:	46ad      	mov	sp, r5
}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0801a874 	.word	0x0801a874
 8001b78:	20001548 	.word	0x20001548

08001b7c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>:

void WobbleBoardApp::ExitUserCalibrationMode(bool Interrupted)
{
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b098      	sub	sp, #96	; 0x60
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	IsInUserCalibrationMode = false;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	ShouldStartUserCalibrationMode = false;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	MotionFXDataBufferIndex = 0;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PinState::GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f005 fbc4 	bl	8007334 <HAL_GPIO_WritePin>

	if(!Interrupted)
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f083 0301 	eor.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x4c>
	{
		DeadZoneMotionFXGravityX = CalculateDeadZone();
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fefd 	bl	80019b8 <_ZN14WobbleBoardApp17CalculateDeadZoneEv>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edc3 7a88 	vstr	s15, [r3, #544]	; 0x220
	}

	// Clear out the MotionFXGravityXBuffer
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bce:	2b31      	cmp	r3, #49	; 0x31
 8001bd0:	dc0b      	bgt.n	8001bea <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x6e>
	{
		MotionFXGravityXBuffer[i] = 0.0f;
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bd6:	3354      	adds	r3, #84	; 0x54
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001be2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be4:	3301      	adds	r3, #1
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001be8:	e7f0      	b.n	8001bcc <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x50>
	}

	if(Interrupted)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d05b      	beq.n	8001ca8 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x12c>
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
		int printStringLength = printString.length();

		char PrintBuffer[printStringLength];
		sprintf(PrintBuffer, printString.c_str());
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001bf0:	466b      	mov	r3, sp
 8001bf2:	461d      	mov	r5, r3
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
 8001bf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f013 fe84 	bl	8015906 <_ZNSaIcEC1Ev>
 8001bfe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c06:	4959      	ldr	r1, [pc, #356]	; (8001d6c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1f0>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f013 fee9 	bl	80159e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c12:	4618      	mov	r0, r3
 8001c14:	f013 fe78 	bl	8015908 <_ZNSaIcED1Ev>
		int printStringLength = printString.length();
 8001c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f013 feb7 	bl	8015990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001c22:	4603      	mov	r3, r0
 8001c24:	64fb      	str	r3, [r7, #76]	; 0x4c
		char PrintBuffer[printStringLength];
 8001c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c28:	1e5c      	subs	r4, r3, #1
 8001c2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	00cb      	lsls	r3, r1, #3
 8001c40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c44:	00c2      	lsls	r2, r0, #3
 8001c46:	4623      	mov	r3, r4
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f04f 0100 	mov.w	r1, #0
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	00cb      	lsls	r3, r1, #3
 8001c5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c5e:	00c2      	lsls	r2, r0, #3
 8001c60:	4623      	mov	r3, r4
 8001c62:	3301      	adds	r3, #1
 8001c64:	3307      	adds	r3, #7
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c6e:	466b      	mov	r3, sp
 8001c70:	3300      	adds	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(PrintBuffer, printString.c_str());
 8001c74:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f013 fe8a 	bl	8015994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4620      	mov	r0, r4
 8001c86:	f016 fc01 	bl	801848c <siprintf>
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c94:	4836      	ldr	r0, [pc, #216]	; (8001d70 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1f4>)
 8001c96:	f008 fc57 	bl	800a548 <HAL_UART_Transmit>
		std::string printString = "Exited User Calibration Mode: Interrupted - Will Discard User Calibration Data\r\n";
 8001c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f013 fe70 	bl	8015984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ca4:	46ad      	mov	sp, r5
 8001ca6:	e05a      	b.n	8001d5e <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1e2>
		std::string printString = "Exited User Calibration Mode\r\n";
		int printStringLength = printString.length();

		char PrintBuffer[printStringLength];
		sprintf(PrintBuffer, printString.c_str());
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001ca8:	466b      	mov	r3, sp
 8001caa:	461d      	mov	r5, r3
		std::string printString = "Exited User Calibration Mode\r\n";
 8001cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f013 fe28 	bl	8015906 <_ZNSaIcEC1Ev>
 8001cb6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001cba:	f107 030c 	add.w	r3, r7, #12
 8001cbe:	492d      	ldr	r1, [pc, #180]	; (8001d74 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1f8>)
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f013 fe8d 	bl	80159e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001cc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f013 fe1c 	bl	8015908 <_ZNSaIcED1Ev>
		int printStringLength = printString.length();
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f013 fe5b 	bl	8015990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	65bb      	str	r3, [r7, #88]	; 0x58
		char PrintBuffer[printStringLength];
 8001cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ce0:	1e5c      	subs	r4, r3, #1
 8001ce2:	657c      	str	r4, [r7, #84]	; 0x54
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	00cb      	lsls	r3, r1, #3
 8001cf8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cfc:	00c2      	lsls	r2, r0, #3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	3301      	adds	r3, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	00cb      	lsls	r3, r1, #3
 8001d12:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d16:	00c2      	lsls	r2, r0, #3
 8001d18:	4623      	mov	r3, r4
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	ebad 0d03 	sub.w	sp, sp, r3
 8001d26:	466b      	mov	r3, sp
 8001d28:	3300      	adds	r3, #0
 8001d2a:	653b      	str	r3, [r7, #80]	; 0x50
		sprintf(PrintBuffer, printString.c_str());
 8001d2c:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	4618      	mov	r0, r3
 8001d34:	f013 fe2e 	bl	8015994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	f016 fba5 	bl	801848c <siprintf>
		HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001d42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x1f4>)
 8001d4e:	f008 fbfb 	bl	800a548 <HAL_UART_Transmit>
		std::string printString = "Exited User Calibration Mode\r\n";
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4618      	mov	r0, r3
 8001d58:	f013 fe14 	bl	8015984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d5c:	46ad      	mov	sp, r5

	// Stop the user calibration timer
	//HAL_TIM_Base_Stop(&htim15);

	// Start streaming out the motion data again
	StartDataStreaming();
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fd42 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8001d64:	bf00      	nop
 8001d66:	3760      	adds	r7, #96	; 0x60
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d6c:	0801a894 	.word	0x0801a894
 8001d70:	20001548 	.word	0x20001548
 8001d74:	0801a8e8 	.word	0x0801a8e8

08001d78 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <UART_StartReceiveMsg+0x2c>)
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <UART_StartReceiveMsg+0x30>)
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <UART_StartReceiveMsg+0x2c>)
 8001d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <UART_StartReceiveMsg+0x2c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <UART_StartReceiveMsg+0x30>)
 8001d9a:	4802      	ldr	r0, [pc, #8]	; (8001da4 <UART_StartReceiveMsg+0x2c>)
 8001d9c:	f008 fc68 	bl	800a670 <HAL_UART_Receive_DMA>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20001548 	.word	0x20001548
 8001da8:	200011c0 	.word	0x200011c0

08001dac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001db0:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <MX_CRC_Init+0x40>)
 8001db4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	; (8001de8 <MX_CRC_Init+0x3c>)
 8001dd6:	f004 fd2d 	bl	8006834 <HAL_CRC_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001de0:	f000 fad0 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200013c8 	.word	0x200013c8
 8001dec:	40023000 	.word	0x40023000

08001df0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_CRC_MspInit+0x38>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10b      	bne.n	8001e1a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_CRC_MspInit+0x3c>)
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_CRC_MspInit+0x3c>)
 8001e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <HAL_CRC_MspInit+0x3c>)
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40023000 	.word	0x40023000
 8001e2c:	40021000 	.word	0x40021000

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_DMA_Init+0x38>)
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <MX_DMA_Init+0x38>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6493      	str	r3, [r2, #72]	; 0x48
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_DMA_Init+0x38>)
 8001e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2010      	movs	r0, #16
 8001e54:	f004 fcb7 	bl	80067c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e58:	2010      	movs	r0, #16
 8001e5a:	f004 fcd0 	bl	80067fe <HAL_NVIC_EnableIRQ>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000

08001e6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	4a2e      	ldr	r2, [pc, #184]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea6:	4b26      	ldr	r3, [pc, #152]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	4a22      	ldr	r2, [pc, #136]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_GPIO_Init+0xd4>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f005 fa23 	bl	8007334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <MX_GPIO_Init+0xd8>)
 8001f06:	f004 ff77 	bl	8006df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f24:	f004 ff68 	bl	8006df8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f004 fc4a 	bl	80067c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f32:	2028      	movs	r0, #40	; 0x28
 8001f34:	f004 fc63 	bl	80067fe <HAL_NVIC_EnableIRQ>

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800

08001f48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <MX_I2C1_Init+0x78>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f54:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <MX_I2C1_Init+0x7c>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f82:	480e      	ldr	r0, [pc, #56]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f84:	f005 fa06 	bl	8007394 <HAL_I2C_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f8e:	f000 f9f9 	bl	8002384 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f92:	2100      	movs	r1, #0
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001f96:	f005 ffa9 	bl	8007eec <HAL_I2CEx_ConfigAnalogFilter>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fa0:	f000 f9f0 	bl	8002384 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_I2C1_Init+0x74>)
 8001fa8:	f005 ffeb 	bl	8007f82 <HAL_I2CEx_ConfigDigitalFilter>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fb2:	f000 f9e7 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200013ec 	.word	0x200013ec
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	00702991 	.word	0x00702991

08001fc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0ac      	sub	sp, #176	; 0xb0
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2288      	movs	r2, #136	; 0x88
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f015 fc93 	bl	8017914 <memset>
  if(i2cHandle->Instance==I2C1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <HAL_I2C_MspInit+0xb0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d13b      	bne.n	8002070 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4618      	mov	r0, r3
 8002006:	f006 fe59 	bl	8008cbc <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002010:	f000 f9b8 	bl	8002384 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_I2C_MspInit+0xb4>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <HAL_I2C_MspInit+0xb4>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <HAL_I2C_MspInit+0xb4>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002034:	2312      	movs	r3, #18
 8002036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002046:	2304      	movs	r3, #4
 8002048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002050:	4619      	mov	r1, r3
 8002052:	480b      	ldr	r0, [pc, #44]	; (8002080 <HAL_I2C_MspInit+0xb8>)
 8002054:	f004 fed0 	bl	8006df8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_I2C_MspInit+0xb4>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_I2C_MspInit+0xb4>)
 800205e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_I2C_MspInit+0xb4>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002070:	bf00      	nop
 8002072:	37b0      	adds	r7, #176	; 0xb0
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40005400 	.word	0x40005400
 800207c:	40021000 	.word	0x40021000
 8002080:	48000400 	.word	0x48000400

08002084 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_I2C_MspDeInit+0x3c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10f      	bne.n	80020b6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_I2C_MspDeInit+0x40>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_I2C_MspDeInit+0x40>)
 800209c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80020a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <HAL_I2C_MspDeInit+0x44>)
 80020a8:	f005 f850 	bl	800714c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80020ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <HAL_I2C_MspDeInit+0x44>)
 80020b2:	f005 f84b 	bl	800714c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000400 	.word	0x48000400

080020cc <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80020d0:	2102      	movs	r1, #2
 80020d2:	2000      	movs	r0, #0
 80020d4:	f003 fd16 	bl	8005b04 <IKS01A2_MOTION_SENSOR_Init>
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80020e0:	2101      	movs	r1, #1
 80020e2:	2000      	movs	r0, #0
 80020e4:	f003 fd0e 	bl	8005b04 <IKS01A2_MOTION_SENSOR_Init>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80020f0:	2104      	movs	r1, #4
 80020f2:	2002      	movs	r0, #2
 80020f4:	f003 fd06 	bl	8005b04 <IKS01A2_MOTION_SENSOR_Init>
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002100:	2102      	movs	r1, #2
 8002102:	2000      	movs	r0, #0
 8002104:	f003 fdfa 	bl	8005cfc <IKS01A2_MOTION_SENSOR_Enable>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002110:	2101      	movs	r1, #1
 8002112:	2000      	movs	r0, #0
 8002114:	f003 fdf2 	bl	8005cfc <IKS01A2_MOTION_SENSOR_Enable>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002120:	2104      	movs	r1, #4
 8002122:	2002      	movs	r0, #2
 8002124:	f003 fdea 	bl	8005cfc <IKS01A2_MOTION_SENSOR_Enable>
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	2102      	movs	r1, #2
 8002138:	2000      	movs	r0, #0
 800213a:	f003 fe21 	bl	8005d80 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	2101      	movs	r1, #1
 8002152:	2000      	movs	r0, #0
 8002154:	f003 fe14 	bl	8005d80 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	2104      	movs	r1, #4
 800216c:	2002      	movs	r0, #2
 800216e:	f003 fe07 	bl	8005d80 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8002184:	ed97 0a01 	vldr	s0, [r7, #4]
 8002188:	2102      	movs	r1, #2
 800218a:	2000      	movs	r0, #0
 800218c:	f003 fe3c 	bl	8005e08 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	2102      	movs	r1, #2
 80021a4:	2000      	movs	r0, #0
 80021a6:	f003 fe75 	bl	8005e94 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	226e      	movs	r2, #110	; 0x6e
 80021be:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3301      	adds	r3, #1
 80021c4:	2277      	movs	r2, #119	; 0x77
 80021c6:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3302      	adds	r3, #2
 80021cc:	2275      	movs	r2, #117	; 0x75
 80021ce:	701a      	strb	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	226e      	movs	r2, #110	; 0x6e
 80021e8:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3301      	adds	r3, #1
 80021ee:	2277      	movs	r2, #119	; 0x77
 80021f0:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3302      	adds	r3, #2
 80021f6:	2275      	movs	r2, #117	; 0x75
 80021f8:	701a      	strb	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	226e      	movs	r2, #110	; 0x6e
 8002212:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	2265      	movs	r2, #101	; 0x65
 800221a:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3302      	adds	r3, #2
 8002220:	2275      	movs	r2, #117	; 0x75
 8002222:	701a      	strb	r2, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002230:	b598      	push	{r3, r4, r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002234:	f004 f970 	bl	8006518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002238:	f000 f82a 	bl	8002290 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223c:	f7ff fe16 	bl	8001e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8002240:	f7ff fdf6 	bl	8001e30 <MX_DMA_Init>
  MX_CRC_Init();
 8002244:	f7ff fdb2 	bl	8001dac <MX_CRC_Init>
  MX_RTC_Init();
 8002248:	f000 f976 	bl	8002538 <MX_RTC_Init>
  MX_TIM15_Init();
 800224c:	f000 fcd0 	bl	8002bf0 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8002250:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002254:	f013 fb46 	bl	80158e4 <_Znwj>
 8002258:	4603      	mov	r3, r0
 800225a:	461c      	mov	r4, r3
 800225c:	4620      	mov	r0, r4
 800225e:	f7fe fe6f 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <main+0x5c>)
 8002264:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <main+0x5c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <main+0x48>
  {
	  wobbleBoardApp->Init();
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <main+0x5c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe feb2 	bl	8000fdc <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <main+0x5c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0fb      	beq.n	8002278 <main+0x48>
	  {
		  wobbleBoardApp->Process();
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <main+0x5c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe ff2f 	bl	80010e8 <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 800228a:	e7f5      	b.n	8002278 <main+0x48>
 800228c:	2000072c 	.word	0x2000072c

08002290 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b096      	sub	sp, #88	; 0x58
 8002294:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	2244      	movs	r2, #68	; 0x44
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f015 fb38 	bl	8017914 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80022b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022b6:	f005 febf 	bl	8008038 <HAL_PWREx_ControlVoltageScaling>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bf14      	ite	ne
 80022c0:	2301      	movne	r3, #1
 80022c2:	2300      	moveq	r3, #0
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 80022ca:	f000 f85b 	bl	8002384 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80022ce:	230a      	movs	r3, #10
 80022d0:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d8:	2310      	movs	r3, #16
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80022dc:	2301      	movs	r3, #1
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e0:	2302      	movs	r3, #2
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022e4:	2302      	movs	r3, #2
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80022e8:	2301      	movs	r3, #1
 80022ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80022ec:	230a      	movs	r3, #10
 80022ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022f0:	2307      	movs	r3, #7
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022f8:	2302      	movs	r3, #2
 80022fa:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4618      	mov	r0, r3
 8002302:	f005 feef 	bl	80080e4 <HAL_RCC_OscConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 8002316:	f000 f835 	bl	8002384 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231a:	230f      	movs	r3, #15
 800231c:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231e:	2303      	movs	r3, #3
 8002320:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	2104      	movs	r1, #4
 8002332:	4618      	mov	r0, r3
 8002334:	f006 fabc 	bl	80088b0 <HAL_RCC_ClockConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 8002348:	f000 f81c 	bl	8002384 <Error_Handler>
	}
}
 800234c:	bf00      	nop
 800234e:	3758      	adds	r7, #88	; 0x58
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002364:	d108      	bne.n	8002378 <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fabc 	bl	80018f0 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
		}
	}
}
 8002378:	bf00      	nop
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000072c 	.word	0x2000072c

08002384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002388:	b672      	cpsid	i
}
 800238a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800238c:	e7fe      	b.n	800238c <Error_Handler+0x8>
	...

08002390 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8002394:	f012 fcec 	bl	8014d70 <MotionFX_GetStateSize>
 8002398:	4603      	mov	r3, r0
 800239a:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 800239e:	d901      	bls.n	80023a4 <MotionFX_manager_init+0x14>
    Error_Handler();
 80023a0:	f7ff fff0 	bl	8002384 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 80023a4:	4821      	ldr	r0, [pc, #132]	; (800242c <MotionFX_manager_init+0x9c>)
 80023a6:	f012 fce7 	bl	8014d78 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	481e      	ldr	r0, [pc, #120]	; (800242c <MotionFX_manager_init+0x9c>)
 80023b2:	f012 fdc5 	bl	8014f40 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	331d      	adds	r3, #29
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fef8 	bl	80021b2 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	3321      	adds	r3, #33	; 0x21
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff07 	bl	80021dc <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3325      	adds	r3, #37	; 0x25
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff16 	bl	8002206 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <MotionFX_manager_init+0xa4>)
 80023e0:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <MotionFX_manager_init+0xa8>)
 80023e8:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <MotionFX_manager_init+0xac>)
 80023f0:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MotionFX_manager_init+0xa0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2201      	movs	r2, #1
 8002402:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <MotionFX_manager_init+0xa0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <MotionFX_manager_init+0xa0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <MotionFX_manager_init+0x9c>)
 8002414:	f012 fd4a 	bl	8014eac <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002418:	2100      	movs	r1, #0
 800241a:	4804      	ldr	r0, [pc, #16]	; (800242c <MotionFX_manager_init+0x9c>)
 800241c:	f012 fdcc 	bl	8014fb8 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002420:	2100      	movs	r1, #0
 8002422:	4802      	ldr	r0, [pc, #8]	; (800242c <MotionFX_manager_init+0x9c>)
 8002424:	f012 fde8 	bl	8014ff8 <MotionFX_enable_9X>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000764 	.word	0x20000764
 8002430:	20000004 	.word	0x20000004
 8002434:	3ac88a48 	.word	0x3ac88a48
 8002438:	3b83126f 	.word	0x3b83126f
 800243c:	3b449ba6 	.word	0x3b449ba6

08002440 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MotionFX_manager_run+0x4c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <MotionFX_manager_run+0x50>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d10e      	bne.n	8002478 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <MotionFX_manager_run+0x54>)
 8002462:	f012 fdf9 	bl	8015058 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	2200      	movs	r2, #0
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4808      	ldr	r0, [pc, #32]	; (8002494 <MotionFX_manager_run+0x54>)
 8002472:	f012 fde1 	bl	8015038 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8002476:	e004      	b.n	8002482 <MotionFX_manager_run+0x42>
    discardedCount++;
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <MotionFX_manager_run+0x4c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	4a03      	ldr	r2, [pc, #12]	; (800248c <MotionFX_manager_run+0x4c>)
 8002480:	6013      	str	r3, [r2, #0]
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000760 	.word	0x20000760
 8002490:	20000008 	.word	0x20000008
 8002494:	20000764 	.word	0x20000764

08002498 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 800249c:	2101      	movs	r1, #1
 800249e:	4802      	ldr	r0, [pc, #8]	; (80024a8 <MotionFX_manager_start_6X+0x10>)
 80024a0:	f012 fd8a 	bl	8014fb8 <MotionFX_enable_6X>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000764 	.word	0x20000764

080024ac <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80024b0:	2100      	movs	r1, #0
 80024b2:	4802      	ldr	r0, [pc, #8]	; (80024bc <MotionFX_manager_stop_6X+0x10>)
 80024b4:	f012 fd80 	bl	8014fb8 <MotionFX_enable_6X>
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000764 	.word	0x20000764

080024c0 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80024c4:	2101      	movs	r1, #1
 80024c6:	4802      	ldr	r0, [pc, #8]	; (80024d0 <MotionFX_manager_start_9X+0x10>)
 80024c8:	f012 fd96 	bl	8014ff8 <MotionFX_enable_9X>
}
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000764 	.word	0x20000764

080024d4 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80024d8:	2100      	movs	r1, #0
 80024da:	4802      	ldr	r0, [pc, #8]	; (80024e4 <MotionFX_manager_stop_9X+0x10>)
 80024dc:	f012 fd8c 	bl	8014ff8 <MotionFX_enable_9X>
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000764 	.word	0x20000764

080024e8 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f012 ff98 	bl	8015428 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 80024f8:	6838      	ldr	r0, [r7, #0]
 80024fa:	f013 f9b7 	bl	801586c <MotionFX_MagCal_getParams>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800250e:	2101      	movs	r1, #1
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f012 fef3 	bl	80152fc <MotionFX_MagCal_init>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8002526:	2100      	movs	r1, #0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f012 fee7 	bl	80152fc <MotionFX_MagCal_init>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800254c:	2300      	movs	r3, #0
 800254e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <MX_RTC_Init+0xb0>)
 8002552:	4a26      	ldr	r2, [pc, #152]	; (80025ec <MX_RTC_Init+0xb4>)
 8002554:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <MX_RTC_Init+0xb0>)
 8002558:	2200      	movs	r2, #0
 800255a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <MX_RTC_Init+0xb0>)
 800255e:	227f      	movs	r2, #127	; 0x7f
 8002560:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002562:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <MX_RTC_Init+0xb0>)
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <MX_RTC_Init+0xb0>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <MX_RTC_Init+0xb0>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <MX_RTC_Init+0xb0>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <MX_RTC_Init+0xb0>)
 800257c:	2200      	movs	r2, #0
 800257e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002580:	4819      	ldr	r0, [pc, #100]	; (80025e8 <MX_RTC_Init+0xb0>)
 8002582:	f007 f857 	bl	8009634 <HAL_RTC_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800258c:	f7ff fefa 	bl	8002384 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002590:	2300      	movs	r3, #0
 8002592:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002594:	2300      	movs	r3, #0
 8002596:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002598:	2300      	movs	r3, #0
 800259a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2201      	movs	r2, #1
 80025a8:	4619      	mov	r1, r3
 80025aa:	480f      	ldr	r0, [pc, #60]	; (80025e8 <MX_RTC_Init+0xb0>)
 80025ac:	f007 f8bd 	bl	800972a <HAL_RTC_SetTime>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80025b6:	f7ff fee5 	bl	8002384 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025ba:	2301      	movs	r3, #1
 80025bc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80025be:	2301      	movs	r3, #1
 80025c0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80025ca:	463b      	mov	r3, r7
 80025cc:	2201      	movs	r2, #1
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_RTC_Init+0xb0>)
 80025d2:	f007 f947 	bl	8009864 <HAL_RTC_SetDate>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80025dc:	f7ff fed2 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20001438 	.word	0x20001438
 80025ec:	40002800 	.word	0x40002800

080025f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0a4      	sub	sp, #144	; 0x90
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	2288      	movs	r2, #136	; 0x88
 80025fe:	2100      	movs	r1, #0
 8002600:	4618      	mov	r0, r3
 8002602:	f015 f987 	bl	8017914 <memset>
  if(rtcHandle->Instance==RTC)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a10      	ldr	r2, [pc, #64]	; (800264c <HAL_RTC_MspInit+0x5c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d118      	bne.n	8002642 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002614:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	4618      	mov	r0, r3
 8002624:	f006 fb4a 	bl	8008cbc <HAL_RCCEx_PeriphCLKConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800262e:	f7ff fea9 	bl	8002384 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <HAL_RTC_MspInit+0x60>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_RTC_MspInit+0x60>)
 800263a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002642:	bf00      	nop
 8002644:	3790      	adds	r7, #144	; 0x90
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40002800 	.word	0x40002800
 8002650:	40021000 	.word	0x40021000

08002654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_MspInit+0x44>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_MspInit+0x44>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6613      	str	r3, [r2, #96]	; 0x60
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_MspInit+0x44>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_MspInit+0x44>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <HAL_MspInit+0x44>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_MspInit+0x44>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <NMI_Handler+0x4>

080026a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler+0x4>

080026ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <UsageFault_Handler+0x4>

080026ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e8:	f003 ff72 	bl	80065d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <DMA1_Channel6_IRQHandler+0x10>)
 80026f6:	f004 fa9f 	bl	8006c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20001500 	.word	0x20001500

08002704 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800270a:	f007 fad0 	bl	8009cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	2000145c 	.word	0x2000145c

08002718 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <TIM3_IRQHandler+0x10>)
 800271e:	f007 fac6 	bl	8009cae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200014a8 	.word	0x200014a8

0800272c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002730:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002734:	f004 fe16 	bl	8007364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <BSP_I2C1_Init+0x70>)
 8002748:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <BSP_I2C1_Init+0x74>)
 800274a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <BSP_I2C1_Init+0x78>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	4918      	ldr	r1, [pc, #96]	; (80027b4 <BSP_I2C1_Init+0x78>)
 8002754:	600a      	str	r2, [r1, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d122      	bne.n	80027a0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800275a:	4814      	ldr	r0, [pc, #80]	; (80027ac <BSP_I2C1_Init+0x70>)
 800275c:	f005 f906 	bl	800796c <HAL_I2C_GetState>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11c      	bne.n	80027a0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002766:	4811      	ldr	r0, [pc, #68]	; (80027ac <BSP_I2C1_Init+0x70>)
 8002768:	f000 f8ba 	bl	80028e0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d116      	bne.n	80027a0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002772:	480e      	ldr	r0, [pc, #56]	; (80027ac <BSP_I2C1_Init+0x70>)
 8002774:	f7ff fbe8 	bl	8001f48 <MX_I2C1_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800277e:	f06f 0307 	mvn.w	r3, #7
 8002782:	607b      	str	r3, [r7, #4]
 8002784:	e00c      	b.n	80027a0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002786:	2100      	movs	r1, #0
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <BSP_I2C1_Init+0x70>)
 800278a:	f005 fbaf 	bl	8007eec <HAL_I2CEx_ConfigAnalogFilter>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002794:	f06f 0307 	mvn.w	r3, #7
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	e001      	b.n	80027a0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800279c:	2300      	movs	r3, #0
 800279e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200013ec 	.word	0x200013ec
 80027b0:	40005400 	.word	0x40005400
 80027b4:	200010e4 	.word	0x200010e4

080027b8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <BSP_I2C1_DeInit+0x48>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d014      	beq.n	80027f4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <BSP_I2C1_DeInit+0x48>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	4a0b      	ldr	r2, [pc, #44]	; (8002800 <BSP_I2C1_DeInit+0x48>)
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <BSP_I2C1_DeInit+0x48>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80027dc:	4809      	ldr	r0, [pc, #36]	; (8002804 <BSP_I2C1_DeInit+0x4c>)
 80027de:	f000 f8c5 	bl	800296c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <BSP_I2C1_DeInit+0x4c>)
 80027e4:	f004 fe65 	bl	80074b2 <HAL_I2C_DeInit>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80027ee:	f06f 0307 	mvn.w	r3, #7
 80027f2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200010e4 	.word	0x200010e4
 8002804:	200013ec 	.word	0x200013ec

08002808 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af04      	add	r7, sp, #16
 800280e:	60ba      	str	r2, [r7, #8]
 8002810:	461a      	mov	r2, r3
 8002812:	4603      	mov	r3, r0
 8002814:	81fb      	strh	r3, [r7, #14]
 8002816:	460b      	mov	r3, r1
 8002818:	81bb      	strh	r3, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002822:	89ba      	ldrh	r2, [r7, #12]
 8002824:	89f9      	ldrh	r1, [r7, #14]
 8002826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2301      	movs	r3, #1
 8002836:	480c      	ldr	r0, [pc, #48]	; (8002868 <BSP_I2C1_WriteReg+0x60>)
 8002838:	f004 fe6a 	bl	8007510 <HAL_I2C_Mem_Write>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002842:	4809      	ldr	r0, [pc, #36]	; (8002868 <BSP_I2C1_WriteReg+0x60>)
 8002844:	f005 f8a0 	bl	8007988 <HAL_I2C_GetError>
 8002848:	4603      	mov	r3, r0
 800284a:	2b04      	cmp	r3, #4
 800284c:	d103      	bne.n	8002856 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800284e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	e002      	b.n	800285c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002856:	f06f 0303 	mvn.w	r3, #3
 800285a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800285c:	697b      	ldr	r3, [r7, #20]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200013ec 	.word	0x200013ec

0800286c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af04      	add	r7, sp, #16
 8002872:	60ba      	str	r2, [r7, #8]
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	81fb      	strh	r3, [r7, #14]
 800287a:	460b      	mov	r3, r1
 800287c:	81bb      	strh	r3, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002886:	89ba      	ldrh	r2, [r7, #12]
 8002888:	89f9      	ldrh	r1, [r7, #14]
 800288a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288e:	9302      	str	r3, [sp, #8]
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2301      	movs	r3, #1
 800289a:	480c      	ldr	r0, [pc, #48]	; (80028cc <BSP_I2C1_ReadReg+0x60>)
 800289c:	f004 ff4c 	bl	8007738 <HAL_I2C_Mem_Read>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <BSP_I2C1_ReadReg+0x60>)
 80028a8:	f005 f86e 	bl	8007988 <HAL_I2C_GetError>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d103      	bne.n	80028ba <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80028b2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e002      	b.n	80028c0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80028ba:	f06f 0303 	mvn.w	r3, #3
 80028be:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80028c0:	697b      	ldr	r3, [r7, #20]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200013ec 	.word	0x200013ec

080028d0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80028d4:	f003 fe90 	bl	80065f8 <HAL_GetTick>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <I2C1_MspInit+0x84>)
 80028ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <I2C1_MspInit+0x84>)
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <I2C1_MspInit+0x84>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002906:	2312      	movs	r3, #18
 8002908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290e:	2303      	movs	r3, #3
 8002910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002912:	2304      	movs	r3, #4
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	4812      	ldr	r0, [pc, #72]	; (8002968 <I2C1_MspInit+0x88>)
 800291e:	f004 fa6b 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002928:	2312      	movs	r3, #18
 800292a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002934:	2304      	movs	r3, #4
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	480a      	ldr	r0, [pc, #40]	; (8002968 <I2C1_MspInit+0x88>)
 8002940:	f004 fa5a 	bl	8006df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <I2C1_MspInit+0x84>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a06      	ldr	r2, [pc, #24]	; (8002964 <I2C1_MspInit+0x84>)
 800294a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <I2C1_MspInit+0x84>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	48000400 	.word	0x48000400

0800296c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <I2C1_MspDeInit+0x30>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4a08      	ldr	r2, [pc, #32]	; (800299c <I2C1_MspDeInit+0x30>)
 800297a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800297e:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <I2C1_MspDeInit+0x34>)
 8002986:	f004 fbe1 	bl	800714c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800298a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800298e:	4804      	ldr	r0, [pc, #16]	; (80029a0 <I2C1_MspDeInit+0x34>)
 8002990:	f004 fbdc 	bl	800714c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000400 	.word	0x48000400

080029a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
	return 1;
 80029a8:	2301      	movs	r3, #1
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_kill>:

int _kill(int pid, int sig)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029be:	f014 ff47 	bl	8017850 <__errno>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2216      	movs	r2, #22
 80029c6:	601a      	str	r2, [r3, #0]
	return -1;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_exit>:

void _exit (int status)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffe7 	bl	80029b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029e6:	e7fe      	b.n	80029e6 <_exit+0x12>

080029e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	e00a      	b.n	8002a10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029fa:	f3af 8000 	nop.w
 80029fe:	4601      	mov	r1, r0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	60ba      	str	r2, [r7, #8]
 8002a06:	b2ca      	uxtb	r2, r1
 8002a08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	dbf0      	blt.n	80029fa <_read+0x12>
	}

return len;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e009      	b.n	8002a48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	60ba      	str	r2, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f003 fce3 	bl	8006408 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	dbf1      	blt.n	8002a34 <_write+0x12>
	}
	return len;
 8002a50:	687b      	ldr	r3, [r7, #4]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <_close>:

int _close(int file)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
	return -1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	605a      	str	r2, [r3, #4]
	return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <_isatty>:

int _isatty(int file)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	return 1;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002acc:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <_sbrk+0x5c>)
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <_sbrk+0x60>)
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d102      	bne.n	8002ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <_sbrk+0x64>)
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <_sbrk+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d207      	bcs.n	8002b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af4:	f014 feac 	bl	8017850 <__errno>
 8002af8:	4603      	mov	r3, r0
 8002afa:	220c      	movs	r2, #12
 8002afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e009      	b.n	8002b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <_sbrk+0x64>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <_sbrk+0x64>)
 8002b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b16:	68fb      	ldr	r3, [r7, #12]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20018000 	.word	0x20018000
 8002b24:	00000400 	.word	0x00000400
 8002b28:	200010e8 	.word	0x200010e8
 8002b2c:	20001a08 	.word	0x20001a08

08002b30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <SystemInit+0x20>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <SystemInit+0x20>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <MX_TIM3_Init+0x98>)
 8002b76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8c:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b98:	4813      	ldr	r0, [pc, #76]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002b9a:	f006 ffa1 	bl	8009ae0 <HAL_TIM_Base_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ba4:	f7ff fbee 	bl	8002384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480c      	ldr	r0, [pc, #48]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002bb6:	f007 f999 	bl	8009eec <HAL_TIM_ConfigClockSource>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002bc0:	f7ff fbe0 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_TIM3_Init+0x94>)
 8002bd2:	f007 fbbb 	bl	800a34c <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002bdc:	f7ff fbd2 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002be0:	bf00      	nop
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200014a8 	.word	0x200014a8
 8002bec:	40000400 	.word	0x40000400

08002bf0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bf6:	f107 0310 	add.w	r3, r7, #16
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <MX_TIM15_Init+0xa0>)
 8002c12:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10000 -1;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c16:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c1a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65536 - 1;
 8002c22:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c28:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002c3c:	4813      	ldr	r0, [pc, #76]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c3e:	f006 ff4f 	bl	8009ae0 <HAL_TIM_Base_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002c48:	f7ff fb9c 	bl	8002384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002c52:	f107 0310 	add.w	r3, r7, #16
 8002c56:	4619      	mov	r1, r3
 8002c58:	480c      	ldr	r0, [pc, #48]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c5a:	f007 f947 	bl	8009eec <HAL_TIM_ConfigClockSource>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002c64:	f7ff fb8e 	bl	8002384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <MX_TIM15_Init+0x9c>)
 8002c76:	f007 fb69 	bl	800a34c <HAL_TIMEx_MasterConfigSynchronization>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002c80:	f7ff fb80 	bl	8002384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000145c 	.word	0x2000145c
 8002c90:	40014000 	.word	0x40014000

08002c94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_TIM_Base_MspInit+0x78>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d114      	bne.n	8002cd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_TIM_Base_MspInit+0x7c>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_TIM_Base_MspInit+0x7c>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_TIM_Base_MspInit+0x7c>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	201d      	movs	r0, #29
 8002cc4:	f003 fd7f 	bl	80067c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002cc8:	201d      	movs	r0, #29
 8002cca:	f003 fd98 	bl	80067fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002cce:	e018      	b.n	8002d02 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <HAL_TIM_Base_MspInit+0x80>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d113      	bne.n	8002d02 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <HAL_TIM_Base_MspInit+0x7c>)
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <HAL_TIM_Base_MspInit+0x7c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_TIM_Base_MspInit+0x7c>)
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2018      	movs	r0, #24
 8002cf8:	f003 fd65 	bl	80067c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002cfc:	2018      	movs	r0, #24
 8002cfe:	f003 fd7e 	bl	80067fe <HAL_NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40014000 	.word	0x40014000

08002d18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d1c:	f7ff ff08 	bl	8002b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d20:	480c      	ldr	r0, [pc, #48]	; (8002d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d22:	490d      	ldr	r1, [pc, #52]	; (8002d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <LoopForever+0xe>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d28:	e002      	b.n	8002d30 <LoopCopyDataInit>

08002d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2e:	3304      	adds	r3, #4

08002d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d34:	d3f9      	bcc.n	8002d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d38:	4c0a      	ldr	r4, [pc, #40]	; (8002d64 <LoopForever+0x16>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d3c:	e001      	b.n	8002d42 <LoopFillZerobss>

08002d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d40:	3204      	adds	r2, #4

08002d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d44:	d3fb      	bcc.n	8002d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d46:	f014 fd89 	bl	801785c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d4a:	f7ff fa71 	bl	8002230 <main>

08002d4e <LoopForever>:

LoopForever:
    b LoopForever
 8002d4e:	e7fe      	b.n	8002d4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d58:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002d5c:	0801b24c 	.word	0x0801b24c
  ldr r2, =_sbss
 8002d60:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002d64:	20001a08 	.word	0x20001a08

08002d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC1_2_IRQHandler>
	...

08002d6c <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d103      	bne.n	8002d88 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e04d      	b.n	8002e24 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	7b1a      	ldrb	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002dc4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002dca:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e020      	b.n	8002e24 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4798      	blx	r3
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e016      	b.n	8002e24 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d112      	bne.n	8002e24 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10d      	bne.n	8002e24 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2123      	movs	r1, #35	; 0x23
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fb55 	bl	80034c2 <LSM303AGR_ACC_Write_Reg>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	e000      	b.n	8002e26 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002e24:	68fb      	ldr	r3, [r7, #12]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	08003cd1 	.word	0x08003cd1
 8002e34:	08003d33 	.word	0x08003d33

08002e38 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	331c      	adds	r3, #28
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 f94a 	bl	80040e0 <lsm303agr_xl_block_data_update_set>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002e52:	f04f 33ff 	mov.w	r3, #4294967295
 8002e56:	e02c      	b.n	8002eb2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	331c      	adds	r3, #28
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 faed 	bl	800443e <lsm303agr_xl_fifo_mode_set>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e020      	b.n	8002eb2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2205      	movs	r2, #5
 8002e74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	331c      	adds	r3, #28
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f84e 	bl	8003f20 <lsm303agr_xl_data_rate_set>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e010      	b.n	8002eb2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	331c      	adds	r3, #28
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f8c4 	bl	8004024 <lsm303agr_xl_full_scale_set>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e004      	b.n	8002eb2 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f87c 	bl	8002fc0 <LSM303AGR_ACC_Disable>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e008      	b.n	8002ee6 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	331c      	adds	r3, #28
 8002efc:	6839      	ldr	r1, [r7, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 fa55 	bl	80043ae <lsm303agr_xl_device_id_get>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e000      	b.n	8002f12 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2210      	movs	r2, #16
 8002f48:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4a06      	ldr	r2, [pc, #24]	; (8002f74 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002f5c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	43c80000 	.word	0x43c80000

08002f78 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e014      	b.n	8002fb8 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f103 021c 	add.w	r2, r3, #28
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	f000 ffbf 	bl	8003f20 <lsm303agr_xl_data_rate_set>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fac:	e004      	b.n	8002fb8 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e01f      	b.n	8003016 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f103 021c 	add.w	r2, r3, #28
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	332a      	adds	r3, #42	; 0x2a
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f000 ffc2 	bl	8003f6c <lsm303agr_xl_data_rate_get>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e010      	b.n	8003016 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	331c      	adds	r3, #28
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 ff90 	bl	8003f20 <lsm303agr_xl_data_rate_set>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e004      	b.n	8003016 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	331c      	adds	r3, #28
 8003030:	f107 020b 	add.w	r2, r7, #11
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ff3e 	bl	8003eb8 <lsm303agr_xl_operating_mode_get>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	e031      	b.n	80030ac <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d01a      	beq.n	8003084 <LSM303AGR_ACC_GetSensitivity+0x66>
 800304e:	2b02      	cmp	r3, #2
 8003050:	dc22      	bgt.n	8003098 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <LSM303AGR_ACC_GetSensitivity+0x3e>
 8003056:	2b01      	cmp	r3, #1
 8003058:	d00a      	beq.n	8003070 <LSM303AGR_ACC_GetSensitivity+0x52>
 800305a:	e01d      	b.n	8003098 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fca8 	bl	80039b4 <LSM303AGR_ACC_GetSensitivityHR>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01a      	beq.n	80030a0 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	e01d      	b.n	80030ac <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fce4 	bl	8003a40 <LSM303AGR_ACC_GetSensitivityNM>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d012      	beq.n	80030a4 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	e013      	b.n	80030ac <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8003084:	6839      	ldr	r1, [r7, #0]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fd20 	bl	8003acc <LSM303AGR_ACC_GetSensitivityLP>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
 8003096:	e009      	b.n	80030ac <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	60fb      	str	r3, [r7, #12]
      break;
 800309e:	e004      	b.n	80030aa <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80030a0:	bf00      	nop
 80030a2:	e002      	b.n	80030aa <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80030a4:	bf00      	nop
 80030a6:	e000      	b.n	80030aa <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80030a8:	bf00      	nop
  }

  return ret;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	331c      	adds	r3, #28
 80030c6:	f107 020b 	add.w	r2, r7, #11
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fef3 	bl	8003eb8 <lsm303agr_xl_operating_mode_get>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e09d      	b.n	800321a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	331c      	adds	r3, #28
 80030e2:	f107 020a 	add.w	r2, r7, #10
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 ff3f 	bl	8003f6c <lsm303agr_xl_data_rate_get>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e08f      	b.n	800321a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d147      	bne.n	8003190 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8003100:	7abb      	ldrb	r3, [r7, #10]
 8003102:	2b09      	cmp	r3, #9
 8003104:	d840      	bhi.n	8003188 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8003106:	a201      	add	r2, pc, #4	; (adr r2, 800310c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313f 	.word	0x0800313f
 8003114:	08003149 	.word	0x08003149
 8003118:	08003151 	.word	0x08003151
 800311c:	08003159 	.word	0x08003159
 8003120:	08003161 	.word	0x08003161
 8003124:	08003169 	.word	0x08003169
 8003128:	08003171 	.word	0x08003171
 800312c:	08003179 	.word	0x08003179
 8003130:	08003181 	.word	0x08003181
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
        break;
 800313c:	e06c      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003144:	601a      	str	r2, [r3, #0]
        break;
 8003146:	e067      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	4a36      	ldr	r2, [pc, #216]	; (8003224 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 800314c:	601a      	str	r2, [r3, #0]
        break;
 800314e:	e063      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4a35      	ldr	r2, [pc, #212]	; (8003228 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003154:	601a      	str	r2, [r3, #0]
        break;
 8003156:	e05f      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4a34      	ldr	r2, [pc, #208]	; (800322c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 800315c:	601a      	str	r2, [r3, #0]
        break;
 800315e:	e05b      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4a33      	ldr	r2, [pc, #204]	; (8003230 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003164:	601a      	str	r2, [r3, #0]
        break;
 8003166:	e057      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4a32      	ldr	r2, [pc, #200]	; (8003234 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 800316c:	601a      	str	r2, [r3, #0]
        break;
 800316e:	e053      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4a31      	ldr	r2, [pc, #196]	; (8003238 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003174:	601a      	str	r2, [r3, #0]
        break;
 8003176:	e04f      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4a30      	ldr	r2, [pc, #192]	; (800323c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 800317c:	601a      	str	r2, [r3, #0]
        break;
 800317e:	e04b      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8003184:	601a      	str	r2, [r3, #0]
        break;
 8003186:	e047      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	60fb      	str	r3, [r7, #12]
        break;
 800318e:	e043      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8003190:	7abb      	ldrb	r3, [r7, #10]
 8003192:	2b09      	cmp	r3, #9
 8003194:	d83c      	bhi.n	8003210 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031e1 	.word	0x080031e1
 80031ac:	080031e9 	.word	0x080031e9
 80031b0:	080031f1 	.word	0x080031f1
 80031b4:	080031f9 	.word	0x080031f9
 80031b8:	08003201 	.word	0x08003201
 80031bc:	08003211 	.word	0x08003211
 80031c0:	08003209 	.word	0x08003209
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
        break;
 80031cc:	e024      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031d4:	601a      	str	r2, [r3, #0]
        break;
 80031d6:	e01f      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	; (8003224 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80031dc:	601a      	str	r2, [r3, #0]
        break;
 80031de:	e01b      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4a11      	ldr	r2, [pc, #68]	; (8003228 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80031e4:	601a      	str	r2, [r3, #0]
        break;
 80031e6:	e017      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4a10      	ldr	r2, [pc, #64]	; (800322c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80031ec:	601a      	str	r2, [r3, #0]
        break;
 80031ee:	e013      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80031f4:	601a      	str	r2, [r3, #0]
        break;
 80031f6:	e00f      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80031fc:	601a      	str	r2, [r3, #0]
        break;
 80031fe:	e00b      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003204:	601a      	str	r2, [r3, #0]
        break;
 8003206:	e007      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 800320c:	601a      	str	r2, [r3, #0]
        break;
 800320e:	e003      	b.n	8003218 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	60fb      	str	r3, [r7, #12]
        break;
 8003216:	bf00      	nop
    }
  }

  return ret;
 8003218:	68fb      	ldr	r3, [r7, #12]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	41200000 	.word	0x41200000
 8003228:	41c80000 	.word	0x41c80000
 800322c:	42480000 	.word	0x42480000
 8003230:	42c80000 	.word	0x42c80000
 8003234:	43480000 	.word	0x43480000
 8003238:	43c80000 	.word	0x43c80000
 800323c:	44ca8000 	.word	0x44ca8000
 8003240:	45a80000 	.word	0x45a80000
 8003244:	44a80000 	.word	0x44a80000

08003248 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800325a:	2b01      	cmp	r3, #1
 800325c:	d106      	bne.n	800326c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800325e:	ed97 0a00 	vldr	s0, [r7]
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fc78 	bl	8003b58 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8003268:	4603      	mov	r3, r0
 800326a:	e005      	b.n	8003278 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800326c:	ed97 0a00 	vldr	s0, [r7]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fcd3 	bl	8003c1c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8003276:	4603      	mov	r3, r0
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	331c      	adds	r3, #28
 8003292:	f107 020b 	add.w	r2, r7, #11
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fee9 	bl	8004070 <lsm303agr_xl_full_scale_get>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	e023      	b.n	80032f2 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d81b      	bhi.n	80032e8 <LSM303AGR_ACC_GetFullScale+0x68>
 80032b0:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <LSM303AGR_ACC_GetFullScale+0x38>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032c9 	.word	0x080032c9
 80032bc:	080032d1 	.word	0x080032d1
 80032c0:	080032d9 	.word	0x080032d9
 80032c4:	080032e1 	.word	0x080032e1
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2202      	movs	r2, #2
 80032cc:	601a      	str	r2, [r3, #0]
      break;
 80032ce:	e00f      	b.n	80032f0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	601a      	str	r2, [r3, #0]
      break;
 80032d6:	e00b      	b.n	80032f0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2208      	movs	r2, #8
 80032dc:	601a      	str	r2, [r3, #0]
      break;
 80032de:	e007      	b.n	80032f0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	601a      	str	r2, [r3, #0]
      break;
 80032e6:	e003      	b.n	80032f0 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ec:	60fb      	str	r3, [r7, #12]
      break;
 80032ee:	bf00      	nop
  }

  return ret;
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop

080032fc <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b02      	cmp	r3, #2
 800330a:	dd0b      	ble.n	8003324 <LSM303AGR_ACC_SetFullScale+0x28>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2b04      	cmp	r3, #4
 8003310:	dd06      	ble.n	8003320 <LSM303AGR_ACC_SetFullScale+0x24>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b08      	cmp	r3, #8
 8003316:	dc01      	bgt.n	800331c <LSM303AGR_ACC_SetFullScale+0x20>
 8003318:	2302      	movs	r3, #2
 800331a:	e004      	b.n	8003326 <LSM303AGR_ACC_SetFullScale+0x2a>
 800331c:	2303      	movs	r3, #3
 800331e:	e002      	b.n	8003326 <LSM303AGR_ACC_SetFullScale+0x2a>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <LSM303AGR_ACC_SetFullScale+0x2a>
 8003324:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8003326:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	331c      	adds	r3, #28
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fe77 	bl	8004024 <lsm303agr_xl_full_scale_set>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	e000      	b.n	8003344 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	331c      	adds	r3, #28
 8003362:	f107 020f 	add.w	r2, r7, #15
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fda5 	bl	8003eb8 <lsm303agr_xl_operating_mode_get>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	e04a      	b.n	8003410 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d00c      	beq.n	800339a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003380:	2b02      	cmp	r3, #2
 8003382:	dc0e      	bgt.n	80033a2 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8003388:	2b01      	cmp	r3, #1
 800338a:	d003      	beq.n	8003394 <LSM303AGR_ACC_GetAxesRaw+0x48>
 800338c:	e009      	b.n	80033a2 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800338e:	2310      	movs	r3, #16
 8003390:	83fb      	strh	r3, [r7, #30]
      break;
 8003392:	e00a      	b.n	80033aa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	83fb      	strh	r3, [r7, #30]
      break;
 8003398:	e007      	b.n	80033aa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800339a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339e:	83fb      	strh	r3, [r7, #30]
      break;
 80033a0:	e003      	b.n	80033aa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	61bb      	str	r3, [r7, #24]
      break;
 80033a8:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d101      	bne.n	80033b6 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	e02c      	b.n	8003410 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	331c      	adds	r3, #28
 80033ba:	f107 0210 	add.w	r2, r7, #16
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 feb3 	bl	800412c <lsm303agr_acceleration_raw_get>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e01e      	b.n	8003410 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80033d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80033e0:	b21a      	sxth	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80033e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80033f4:	b21a      	sxth	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80033fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033fe:	461a      	mov	r2, r3
 8003400:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003404:	fb92 f3f3 	sdiv	r3, r2, r3
 8003408:	b21a      	sxth	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	809a      	strh	r2, [r3, #4]

  return ret;
 800340e:	69bb      	ldr	r3, [r7, #24]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003428:	f107 0310 	add.w	r3, r7, #16
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ff8c 	bl	800334c <LSM303AGR_ACC_GetAxesRaw>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	e03c      	b.n	80034ba <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff fde9 	bl	800301e <LSM303AGR_ACC_GetSensitivity>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	e030      	b.n	80034ba <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003458:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003464:	edd7 7a03 	vldr	s15, [r7, #12]
 8003468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003470:	ee17 2a90 	vmov	r2, s15
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003478:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800347c:	ee07 3a90 	vmov	s15, r3
 8003480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003484:	edd7 7a03 	vldr	s15, [r7, #12]
 8003488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003490:	ee17 2a90 	vmov	r2, s15
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003498:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800349c:	ee07 3a90 	vmov	s15, r3
 80034a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034b0:	ee17 2a90 	vmov	r2, s15
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	460b      	mov	r3, r1
 80034cc:	70fb      	strb	r3, [r7, #3]
 80034ce:	4613      	mov	r3, r2
 80034d0:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 001c 	add.w	r0, r3, #28
 80034d8:	1cba      	adds	r2, r7, #2
 80034da:	78f9      	ldrb	r1, [r7, #3]
 80034dc:	2301      	movs	r3, #1
 80034de:	f000 fcd3 	bl	8003e88 <lsm303agr_write_reg>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80034e8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ec:	e000      	b.n	80034f0 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800350c:	f04f 33ff 	mov.w	r3, #4294967295
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e04b      	b.n	80035ac <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	7b1a      	ldrb	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695a      	ldr	r2, [r3, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003550:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003556:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e01e      	b.n	80035ac <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4798      	blx	r3
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e014      	b.n	80035ac <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10b      	bne.n	80035ac <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	331c      	adds	r3, #28
 8003598:	2101      	movs	r1, #1
 800359a:	4618      	mov	r0, r3
 800359c:	f000 ff75 	bl	800448a <lsm303agr_mag_i2c_interface_set>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e000      	b.n	80035ae <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08003d95 	.word	0x08003d95
 80035bc:	08003df7 	.word	0x08003df7

080035c0 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	331c      	adds	r3, #28
 80035cc:	2101      	movs	r1, #1
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fe7c 	bl	80042cc <lsm303agr_mag_block_data_update_set>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	e028      	b.n	8003632 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	331c      	adds	r3, #28
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fdeb 	bl	80041c2 <lsm303agr_mag_operating_mode_set>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	e01c      	b.n	8003632 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	331c      	adds	r3, #28
 80035fc:	2103      	movs	r1, #3
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fe05 	bl	800420e <lsm303agr_mag_data_rate_set>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	e010      	b.n	8003632 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	331c      	adds	r3, #28
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f000 feeb 	bl	80043f2 <lsm303agr_mag_self_test_set>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	e004      	b.n	8003632 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f874 	bl	8003730 <LSM303AGR_MAG_Disable>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e004      	b.n	800365e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	331c      	adds	r3, #28
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 feaa 	bl	80043d0 <lsm303agr_mag_device_id_get>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	e000      	b.n	800368a <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2200      	movs	r2, #0
 80036a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2232      	movs	r2, #50	; 0x32
 80036c6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <LSM303AGR_MAG_GetCapabilities+0x58>)
 80036dc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	42c80000 	.word	0x42c80000

080036f0 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e010      	b.n	8003728 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	331c      	adds	r3, #28
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fd58 	bl	80041c2 <lsm303agr_mag_operating_mode_set>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	e004      	b.n	8003728 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e010      	b.n	8003768 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	331c      	adds	r3, #28
 800374a:	2102      	movs	r1, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fd38 	bl	80041c2 <lsm303agr_mag_operating_mode_set>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	e004      	b.n	8003768 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003780:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	331c      	adds	r3, #28
 80037a2:	f107 020b 	add.w	r2, r7, #11
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd57 	bl	800425c <lsm303agr_mag_data_rate_get>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	e023      	b.n	8003802 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80037ba:	7afb      	ldrb	r3, [r7, #11]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d81b      	bhi.n	80037f8 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e1 	.word	0x080037e1
 80037d0:	080037e9 	.word	0x080037e9
 80037d4:	080037f1 	.word	0x080037f1
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80037dc:	601a      	str	r2, [r3, #0]
      break;
 80037de:	e00f      	b.n	8003800 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80037e4:	601a      	str	r2, [r3, #0]
      break;
 80037e6:	e00b      	b.n	8003800 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80037ec:	601a      	str	r2, [r3, #0]
      break;
 80037ee:	e007      	b.n	8003800 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	4a09      	ldr	r2, [pc, #36]	; (8003818 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80037f4:	601a      	str	r2, [r3, #0]
      break;
 80037f6:	e003      	b.n	8003800 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80037f8:	f04f 33ff 	mov.w	r3, #4294967295
 80037fc:	60fb      	str	r3, [r7, #12]
      break;
 80037fe:	bf00      	nop
  }

  return ret;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	41200000 	.word	0x41200000
 8003810:	41a00000 	.word	0x41a00000
 8003814:	42480000 	.word	0x42480000
 8003818:	42c80000 	.word	0x42c80000

0800381c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003828:	edd7 7a00 	vldr	s15, [r7]
 800382c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003838:	d801      	bhi.n	800383e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800383a:	2300      	movs	r3, #0
 800383c:	e016      	b.n	800386c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800383e:	edd7 7a00 	vldr	s15, [r7]
 8003842:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	d801      	bhi.n	8003854 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003850:	2301      	movs	r3, #1
 8003852:	e00b      	b.n	800386c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003854:	edd7 7a00 	vldr	s15, [r7]
 8003858:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003894 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 800385c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	d801      	bhi.n	800386a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003866:	2302      	movs	r3, #2
 8003868:	e000      	b.n	800386c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800386a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 800386c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	331c      	adds	r3, #28
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fcc9 	bl	800420e <lsm303agr_mag_data_rate_set>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e000      	b.n	800388a <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	42480000 	.word	0x42480000

08003898 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2232      	movs	r2, #50	; 0x32
 80038a6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	331c      	adds	r3, #28
 80038dc:	f107 0208 	add.w	r2, r7, #8
 80038e0:	4611      	mov	r1, r2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fd18 	bl	8004318 <lsm303agr_magnetic_raw_get>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295
 80038f2:	e00c      	b.n	800390e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80038f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80038fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003904:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b086      	sub	sp, #24
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	331c      	adds	r3, #28
 8003924:	f107 0210 	add.w	r2, r7, #16
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fcf4 	bl	8004318 <lsm303agr_magnetic_raw_get>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003936:	f04f 33ff 	mov.w	r3, #4294967295
 800393a:	e036      	b.n	80039aa <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7ff ff14 	bl	8003770 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003948:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003954:	edd7 7a03 	vldr	s15, [r7, #12]
 8003958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003960:	ee17 2a90 	vmov	r2, s15
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003968:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003974:	edd7 7a03 	vldr	s15, [r7, #12]
 8003978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003980:	ee17 2a90 	vmov	r2, s15
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003988:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003994:	edd7 7a03 	vldr	s15, [r7, #12]
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039a0:	ee17 2a90 	vmov	r2, s15
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	331c      	adds	r3, #28
 80039c6:	f107 020b 	add.w	r2, r7, #11
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fb4f 	bl	8004070 <lsm303agr_xl_full_scale_get>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80039d8:	f04f 33ff 	mov.w	r3, #4294967295
 80039dc:	e023      	b.n	8003a26 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d81b      	bhi.n	8003a1c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a05 	.word	0x08003a05
 80039f4:	08003a0d 	.word	0x08003a0d
 80039f8:	08003a15 	.word	0x08003a15
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003a00:	601a      	str	r2, [r3, #0]
      break;
 8003a02:	e00f      	b.n	8003a24 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003a08:	601a      	str	r2, [r3, #0]
      break;
 8003a0a:	e00b      	b.n	8003a24 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003a10:	601a      	str	r2, [r3, #0]
      break;
 8003a12:	e007      	b.n	8003a24 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003a18:	601a      	str	r2, [r3, #0]
      break;
 8003a1a:	e003      	b.n	8003a24 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	60fb      	str	r3, [r7, #12]
      break;
 8003a22:	bf00      	nop
  }

  return ret;
 8003a24:	68fb      	ldr	r3, [r7, #12]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	3f7ae148 	.word	0x3f7ae148
 8003a34:	3ff9999a 	.word	0x3ff9999a
 8003a38:	4079999a 	.word	0x4079999a
 8003a3c:	413b851f 	.word	0x413b851f

08003a40 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	331c      	adds	r3, #28
 8003a52:	f107 020b 	add.w	r2, r7, #11
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fb09 	bl	8004070 <lsm303agr_xl_full_scale_get>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003a64:	f04f 33ff 	mov.w	r3, #4294967295
 8003a68:	e023      	b.n	8003ab2 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d81b      	bhi.n	8003aa8 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a91 	.word	0x08003a91
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003aa1 	.word	0x08003aa1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003a8c:	601a      	str	r2, [r3, #0]
      break;
 8003a8e:	e00f      	b.n	8003ab0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003a94:	601a      	str	r2, [r3, #0]
      break;
 8003a96:	e00b      	b.n	8003ab0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003a9c:	601a      	str	r2, [r3, #0]
      break;
 8003a9e:	e007      	b.n	8003ab0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003aa4:	601a      	str	r2, [r3, #0]
      break;
 8003aa6:	e003      	b.n	8003ab0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	60fb      	str	r3, [r7, #12]
      break;
 8003aae:	bf00      	nop
  }

  return ret;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	4079999a 	.word	0x4079999a
 8003ac0:	40fa3d71 	.word	0x40fa3d71
 8003ac4:	417a147b 	.word	0x417a147b
 8003ac8:	423b999a 	.word	0x423b999a

08003acc <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	331c      	adds	r3, #28
 8003ade:	f107 020b 	add.w	r2, r7, #11
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fac3 	bl	8004070 <lsm303agr_xl_full_scale_get>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295
 8003af4:	e023      	b.n	8003b3e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d81b      	bhi.n	8003b34 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b15 	.word	0x08003b15
 8003b08:	08003b1d 	.word	0x08003b1d
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b2d 	.word	0x08003b2d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003b18:	601a      	str	r2, [r3, #0]
      break;
 8003b1a:	e00f      	b.n	8003b3c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003b20:	601a      	str	r2, [r3, #0]
      break;
 8003b22:	e00b      	b.n	8003b3c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003b28:	601a      	str	r2, [r3, #0]
      break;
 8003b2a:	e007      	b.n	8003b3c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003b30:	601a      	str	r2, [r3, #0]
      break;
 8003b32:	e003      	b.n	8003b3c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003b34:	f04f 33ff 	mov.w	r3, #4294967295
 8003b38:	60fb      	str	r3, [r7, #12]
      break;
 8003b3a:	bf00      	nop
  }

  return ret;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	417a147b 	.word	0x417a147b
 8003b4c:	41fa147b 	.word	0x41fa147b
 8003b50:	427a147b 	.word	0x427a147b
 8003b54:	433b947b 	.word	0x433b947b

08003b58 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003b64:	edd7 7a00 	vldr	s15, [r7]
 8003b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b74:	d801      	bhi.n	8003b7a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e037      	b.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b7a:	edd7 7a00 	vldr	s15, [r7]
 8003b7e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8a:	d801      	bhi.n	8003b90 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e02c      	b.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b90:	edd7 7a00 	vldr	s15, [r7]
 8003b94:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba0:	d801      	bhi.n	8003ba6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e021      	b.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003ba6:	edd7 7a00 	vldr	s15, [r7]
 8003baa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003c10 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb6:	d801      	bhi.n	8003bbc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	e016      	b.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003bbc:	edd7 7a00 	vldr	s15, [r7]
 8003bc0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003c14 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	d801      	bhi.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003bce:	2305      	movs	r3, #5
 8003bd0:	e00b      	b.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003bd2:	edd7 7a00 	vldr	s15, [r7]
 8003bd6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003c18 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	d801      	bhi.n	8003be8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003be4:	2306      	movs	r3, #6
 8003be6:	e000      	b.n	8003bea <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003be8:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003bea:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	331c      	adds	r3, #28
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f993 	bl	8003f20 <lsm303agr_xl_data_rate_set>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003c00:	f04f 33ff 	mov.w	r3, #4294967295
 8003c04:	e000      	b.n	8003c08 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	42480000 	.word	0x42480000
 8003c14:	42c80000 	.word	0x42c80000
 8003c18:	43480000 	.word	0x43480000

08003c1c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003c28:	edd7 7a00 	vldr	s15, [r7]
 8003c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	d801      	bhi.n	8003c3e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e037      	b.n	8003cae <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c3e:	edd7 7a00 	vldr	s15, [r7]
 8003c42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	d801      	bhi.n	8003c54 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e02c      	b.n	8003cae <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c54:	edd7 7a00 	vldr	s15, [r7]
 8003c58:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c64:	d801      	bhi.n	8003c6a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003c66:	2303      	movs	r3, #3
 8003c68:	e021      	b.n	8003cae <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c6a:	edd7 7a00 	vldr	s15, [r7]
 8003c6e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003cc4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d801      	bhi.n	8003c80 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	e016      	b.n	8003cae <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c80:	edd7 7a00 	vldr	s15, [r7]
 8003c84:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003cc8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	d801      	bhi.n	8003c96 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003c92:	2305      	movs	r3, #5
 8003c94:	e00b      	b.n	8003cae <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003c96:	edd7 7a00 	vldr	s15, [r7]
 8003c9a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003ccc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	d801      	bhi.n	8003cac <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003ca8:	2306      	movs	r3, #6
 8003caa:	e000      	b.n	8003cae <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003cac:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	42480000 	.word	0x42480000
 8003cc8:	42c80000 	.word	0x42c80000
 8003ccc:	43480000 	.word	0x43480000

08003cd0 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	72fb      	strb	r3, [r7, #11]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10e      	bne.n	8003d0e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	695c      	ldr	r4, [r3, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	7b1b      	ldrb	r3, [r3, #12]
 8003cf8:	b298      	uxth	r0, r3
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	b299      	uxth	r1, r3
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	47a0      	blx	r4
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	e00d      	b.n	8003d2a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	695c      	ldr	r4, [r3, #20]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	7b1b      	ldrb	r3, [r3, #12]
 8003d16:	b298      	uxth	r0, r3
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	b299      	uxth	r1, r3
 8003d22:	893b      	ldrh	r3, [r7, #8]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	47a0      	blx	r4
 8003d28:	4603      	mov	r3, r0
  }
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd90      	pop	{r4, r7, pc}

08003d32 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d32:	b590      	push	{r4, r7, lr}
 8003d34:	b087      	sub	sp, #28
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	460b      	mov	r3, r1
 8003d40:	72fb      	strb	r3, [r7, #11]
 8003d42:	4613      	mov	r3, r2
 8003d44:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10e      	bne.n	8003d70 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	691c      	ldr	r4, [r3, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	7b1b      	ldrb	r3, [r3, #12]
 8003d5a:	b298      	uxth	r0, r3
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	b299      	uxth	r1, r3
 8003d66:	893b      	ldrh	r3, [r7, #8]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	47a0      	blx	r4
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	e00d      	b.n	8003d8c <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	691c      	ldr	r4, [r3, #16]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	7b1b      	ldrb	r3, [r3, #12]
 8003d78:	b298      	uxth	r0, r3
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	b299      	uxth	r1, r3
 8003d84:	893b      	ldrh	r3, [r7, #8]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	47a0      	blx	r4
 8003d8a:	4603      	mov	r3, r0
  }
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}

08003d94 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d94:	b590      	push	{r4, r7, lr}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	460b      	mov	r3, r1
 8003da2:	72fb      	strb	r3, [r7, #11]
 8003da4:	4613      	mov	r3, r2
 8003da6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10e      	bne.n	8003dd2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	695c      	ldr	r4, [r3, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	7b1b      	ldrb	r3, [r3, #12]
 8003dbc:	b298      	uxth	r0, r3
 8003dbe:	7afb      	ldrb	r3, [r7, #11]
 8003dc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	47a0      	blx	r4
 8003dce:	4603      	mov	r3, r0
 8003dd0:	e00d      	b.n	8003dee <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	695c      	ldr	r4, [r3, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	7b1b      	ldrb	r3, [r3, #12]
 8003dda:	b298      	uxth	r0, r3
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
 8003dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	b299      	uxth	r1, r3
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	47a0      	blx	r4
 8003dec:	4603      	mov	r3, r0
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd90      	pop	{r4, r7, pc}

08003df6 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003df6:	b590      	push	{r4, r7, lr}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	461a      	mov	r2, r3
 8003e02:	460b      	mov	r3, r1
 8003e04:	72fb      	strb	r3, [r7, #11]
 8003e06:	4613      	mov	r3, r2
 8003e08:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10e      	bne.n	8003e34 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	691c      	ldr	r4, [r3, #16]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	7b1b      	ldrb	r3, [r3, #12]
 8003e1e:	b298      	uxth	r0, r3
 8003e20:	7afb      	ldrb	r3, [r7, #11]
 8003e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	b299      	uxth	r1, r3
 8003e2a:	893b      	ldrh	r3, [r7, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	47a0      	blx	r4
 8003e30:	4603      	mov	r3, r0
 8003e32:	e00d      	b.n	8003e50 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	691c      	ldr	r4, [r3, #16]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	7b1b      	ldrb	r3, [r3, #12]
 8003e3c:	b298      	uxth	r0, r3
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
 8003e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	b299      	uxth	r1, r3
 8003e48:	893b      	ldrh	r3, [r7, #8]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	47a0      	blx	r4
 8003e4e:	4603      	mov	r3, r0
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}

08003e58 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	460b      	mov	r3, r1
 8003e66:	72fb      	strb	r3, [r7, #11]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685c      	ldr	r4, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6898      	ldr	r0, [r3, #8]
 8003e74:	893b      	ldrh	r3, [r7, #8]
 8003e76:	7af9      	ldrb	r1, [r7, #11]
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	47a0      	blx	r4
 8003e7c:	6178      	str	r0, [r7, #20]
  return ret;
 8003e7e:	697b      	ldr	r3, [r7, #20]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd90      	pop	{r4, r7, pc}

08003e88 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003e88:	b590      	push	{r4, r7, lr}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	460b      	mov	r3, r1
 8003e96:	72fb      	strb	r3, [r7, #11]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681c      	ldr	r4, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6898      	ldr	r0, [r3, #8]
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	7af9      	ldrb	r1, [r7, #11]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	47a0      	blx	r4
 8003eac:	6178      	str	r0, [r7, #20]
  return ret;
 8003eae:	697b      	ldr	r3, [r7, #20]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}

08003eb8 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003ec2:	f107 020c 	add.w	r2, r7, #12
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	2120      	movs	r1, #32
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff ffc4 	bl	8003e58 <lsm303agr_read_reg>
 8003ed0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003ed8:	f107 0210 	add.w	r2, r7, #16
 8003edc:	2301      	movs	r3, #1
 8003ede:	2123      	movs	r1, #35	; 0x23
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff ffb9 	bl	8003e58 <lsm303agr_read_reg>
 8003ee6:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003ee8:	7b3b      	ldrb	r3, [r7, #12]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e00c      	b.n	8003f16 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003efc:	7c3b      	ldrb	r3, [r7, #16]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e002      	b.n	8003f16 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003f16:	697b      	ldr	r3, [r7, #20]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f2c:	f107 0208 	add.w	r2, r7, #8
 8003f30:	2301      	movs	r3, #1
 8003f32:	2120      	movs	r1, #32
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff8f 	bl	8003e58 <lsm303agr_read_reg>
 8003f3a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10f      	bne.n	8003f62 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	7a3b      	ldrb	r3, [r7, #8]
 8003f4c:	f362 1307 	bfi	r3, r2, #4, #4
 8003f50:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f52:	f107 0208 	add.w	r2, r7, #8
 8003f56:	2301      	movs	r3, #1
 8003f58:	2120      	movs	r1, #32
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ff94 	bl	8003e88 <lsm303agr_write_reg>
 8003f60:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003f62:	68fb      	ldr	r3, [r7, #12]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003f76:	f107 0208 	add.w	r2, r7, #8
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	2120      	movs	r1, #32
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ff6a 	bl	8003e58 <lsm303agr_read_reg>
 8003f84:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003f86:	7a3b      	ldrb	r3, [r7, #8]
 8003f88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b09      	cmp	r3, #9
 8003f90:	d83e      	bhi.n	8004010 <lsm303agr_xl_data_rate_get+0xa4>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <lsm303agr_xl_data_rate_get+0x2c>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fc1 	.word	0x08003fc1
 8003f9c:	08003fc9 	.word	0x08003fc9
 8003fa0:	08003fd1 	.word	0x08003fd1
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003fe1 	.word	0x08003fe1
 8003fac:	08003fe9 	.word	0x08003fe9
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003ff9 	.word	0x08003ff9
 8003fb8:	08004001 	.word	0x08004001
 8003fbc:	08004009 	.word	0x08004009
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	701a      	strb	r2, [r3, #0]
      break;
 8003fc6:	e027      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
      break;
 8003fce:	e023      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	701a      	strb	r2, [r3, #0]
      break;
 8003fd6:	e01f      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	701a      	strb	r2, [r3, #0]
      break;
 8003fde:	e01b      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	701a      	strb	r2, [r3, #0]
      break;
 8003fe6:	e017      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2205      	movs	r2, #5
 8003fec:	701a      	strb	r2, [r3, #0]
      break;
 8003fee:	e013      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2206      	movs	r2, #6
 8003ff4:	701a      	strb	r2, [r3, #0]
      break;
 8003ff6:	e00f      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	701a      	strb	r2, [r3, #0]
      break;
 8003ffe:	e00b      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2208      	movs	r2, #8
 8004004:	701a      	strb	r2, [r3, #0]
      break;
 8004006:	e007      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2209      	movs	r2, #9
 800400c:	701a      	strb	r2, [r3, #0]
      break;
 800400e:	e003      	b.n	8004018 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
      break;
 8004016:	bf00      	nop
  }

  return ret;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop

08004024 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	460b      	mov	r3, r1
 800402e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004030:	f107 0208 	add.w	r2, r7, #8
 8004034:	2301      	movs	r3, #1
 8004036:	2123      	movs	r1, #35	; 0x23
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ff0d 	bl	8003e58 <lsm303agr_read_reg>
 800403e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10f      	bne.n	8004066 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	b2da      	uxtb	r2, r3
 800404e:	7a3b      	ldrb	r3, [r7, #8]
 8004050:	f362 1305 	bfi	r3, r2, #4, #2
 8004054:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004056:	f107 0208 	add.w	r2, r7, #8
 800405a:	2301      	movs	r3, #1
 800405c:	2123      	movs	r1, #35	; 0x23
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff12 	bl	8003e88 <lsm303agr_write_reg>
 8004064:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004066:	68fb      	ldr	r3, [r7, #12]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	2301      	movs	r3, #1
 8004080:	2123      	movs	r1, #35	; 0x23
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fee8 	bl	8003e58 <lsm303agr_read_reg>
 8004088:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 800408a:	7a3b      	ldrb	r3, [r7, #8]
 800408c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b03      	cmp	r3, #3
 8004094:	d81a      	bhi.n	80040cc <lsm303agr_xl_full_scale_get+0x5c>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <lsm303agr_xl_full_scale_get+0x2c>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	080040b5 	.word	0x080040b5
 80040a4:	080040bd 	.word	0x080040bd
 80040a8:	080040c5 	.word	0x080040c5
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
      break;
 80040b2:	e00f      	b.n	80040d4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
      break;
 80040ba:	e00b      	b.n	80040d4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
      break;
 80040c2:	e007      	b.n	80040d4 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2203      	movs	r2, #3
 80040c8:	701a      	strb	r2, [r3, #0]
      break;
 80040ca:	e003      	b.n	80040d4 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
      break;
 80040d2:	bf00      	nop
  }

  return ret;
 80040d4:	68fb      	ldr	r3, [r7, #12]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop

080040e0 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80040ec:	f107 0208 	add.w	r2, r7, #8
 80040f0:	2301      	movs	r3, #1
 80040f2:	2123      	movs	r1, #35	; 0x23
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff feaf 	bl	8003e58 <lsm303agr_read_reg>
 80040fa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	b2da      	uxtb	r2, r3
 800410a:	7a3b      	ldrb	r3, [r7, #8]
 800410c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004110:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004112:	f107 0208 	add.w	r2, r7, #8
 8004116:	2301      	movs	r3, #1
 8004118:	2123      	movs	r1, #35	; 0x23
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff feb4 	bl	8003e88 <lsm303agr_write_reg>
 8004120:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8004136:	f107 020c 	add.w	r2, r7, #12
 800413a:	2306      	movs	r3, #6
 800413c:	2128      	movs	r1, #40	; 0x28
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fe8a 	bl	8003e58 <lsm303agr_read_reg>
 8004144:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004146:	7b7b      	ldrb	r3, [r7, #13]
 8004148:	b21a      	sxth	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004154:	b29b      	uxth	r3, r3
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	b29a      	uxth	r2, r3
 800415a:	7b3b      	ldrb	r3, [r7, #12]
 800415c:	b29b      	uxth	r3, r3
 800415e:	4413      	add	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	b21a      	sxth	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	3302      	adds	r3, #2
 800416e:	b212      	sxth	r2, r2
 8004170:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3302      	adds	r3, #2
 8004176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800417a:	b29b      	uxth	r3, r3
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	b29a      	uxth	r2, r3
 8004180:	7bbb      	ldrb	r3, [r7, #14]
 8004182:	b29b      	uxth	r3, r3
 8004184:	4413      	add	r3, r2
 8004186:	b29a      	uxth	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	3302      	adds	r3, #2
 800418c:	b212      	sxth	r2, r2
 800418e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004190:	7c7a      	ldrb	r2, [r7, #17]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	3304      	adds	r3, #4
 8004196:	b212      	sxth	r2, r2
 8004198:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	7c3b      	ldrb	r3, [r7, #16]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	3304      	adds	r3, #4
 80041b4:	b212      	sxth	r2, r2
 80041b6:	801a      	strh	r2, [r3, #0]
  return ret;
 80041b8:	697b      	ldr	r3, [r7, #20]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041ce:	f107 0208 	add.w	r2, r7, #8
 80041d2:	2301      	movs	r3, #1
 80041d4:	2160      	movs	r1, #96	; 0x60
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff fe3e 	bl	8003e58 <lsm303agr_read_reg>
 80041dc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	7a3b      	ldrb	r3, [r7, #8]
 80041ee:	f362 0301 	bfi	r3, r2, #0, #2
 80041f2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80041f4:	f107 0208 	add.w	r2, r7, #8
 80041f8:	2301      	movs	r3, #1
 80041fa:	2160      	movs	r1, #96	; 0x60
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f7ff fe43 	bl	8003e88 <lsm303agr_write_reg>
 8004202:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004204:	68fb      	ldr	r3, [r7, #12]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800421a:	f107 0208 	add.w	r2, r7, #8
 800421e:	2301      	movs	r3, #1
 8004220:	2160      	movs	r1, #96	; 0x60
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe18 	bl	8003e58 <lsm303agr_read_reg>
 8004228:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	b2da      	uxtb	r2, r3
 8004238:	7a3b      	ldrb	r3, [r7, #8]
 800423a:	f362 0383 	bfi	r3, r2, #2, #2
 800423e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004240:	f107 0208 	add.w	r2, r7, #8
 8004244:	2301      	movs	r3, #1
 8004246:	2160      	movs	r1, #96	; 0x60
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff fe1d 	bl	8003e88 <lsm303agr_write_reg>
 800424e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004266:	f107 0208 	add.w	r2, r7, #8
 800426a:	2301      	movs	r3, #1
 800426c:	2160      	movs	r1, #96	; 0x60
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fdf2 	bl	8003e58 <lsm303agr_read_reg>
 8004274:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8004276:	7a3b      	ldrb	r3, [r7, #8]
 8004278:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b03      	cmp	r3, #3
 8004280:	d81a      	bhi.n	80042b8 <lsm303agr_mag_data_rate_get+0x5c>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <lsm303agr_mag_data_rate_get+0x2c>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	08004299 	.word	0x08004299
 800428c:	080042a1 	.word	0x080042a1
 8004290:	080042a9 	.word	0x080042a9
 8004294:	080042b1 	.word	0x080042b1
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
      break;
 800429e:	e00f      	b.n	80042c0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
      break;
 80042a6:	e00b      	b.n	80042c0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2202      	movs	r2, #2
 80042ac:	701a      	strb	r2, [r3, #0]
      break;
 80042ae:	e007      	b.n	80042c0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2203      	movs	r2, #3
 80042b4:	701a      	strb	r2, [r3, #0]
      break;
 80042b6:	e003      	b.n	80042c0 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
      break;
 80042be:	bf00      	nop
  }

  return ret;
 80042c0:	68fb      	ldr	r3, [r7, #12]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop

080042cc <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042d8:	f107 0208 	add.w	r2, r7, #8
 80042dc:	2301      	movs	r3, #1
 80042de:	2162      	movs	r1, #98	; 0x62
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fdb9 	bl	8003e58 <lsm303agr_read_reg>
 80042e6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10f      	bne.n	800430e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	7a3b      	ldrb	r3, [r7, #8]
 80042f8:	f362 1304 	bfi	r3, r2, #4, #1
 80042fc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80042fe:	f107 0208 	add.w	r2, r7, #8
 8004302:	2301      	movs	r3, #1
 8004304:	2162      	movs	r1, #98	; 0x62
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fdbe 	bl	8003e88 <lsm303agr_write_reg>
 800430c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800430e:	68fb      	ldr	r3, [r7, #12]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004322:	f107 020c 	add.w	r2, r7, #12
 8004326:	2306      	movs	r3, #6
 8004328:	2168      	movs	r1, #104	; 0x68
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fd94 	bl	8003e58 <lsm303agr_read_reg>
 8004330:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004332:	7b7b      	ldrb	r3, [r7, #13]
 8004334:	b21a      	sxth	r2, r3
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004340:	b29b      	uxth	r3, r3
 8004342:	021b      	lsls	r3, r3, #8
 8004344:	b29a      	uxth	r2, r3
 8004346:	7b3b      	ldrb	r3, [r7, #12]
 8004348:	b29b      	uxth	r3, r3
 800434a:	4413      	add	r3, r2
 800434c:	b29b      	uxth	r3, r3
 800434e:	b21a      	sxth	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3302      	adds	r3, #2
 800435a:	b212      	sxth	r2, r2
 800435c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	3302      	adds	r3, #2
 8004362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004366:	b29b      	uxth	r3, r3
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	b29a      	uxth	r2, r3
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	b29b      	uxth	r3, r3
 8004370:	4413      	add	r3, r2
 8004372:	b29a      	uxth	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3302      	adds	r3, #2
 8004378:	b212      	sxth	r2, r2
 800437a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800437c:	7c7a      	ldrb	r2, [r7, #17]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	b212      	sxth	r2, r2
 8004384:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438e:	b29b      	uxth	r3, r3
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	b29a      	uxth	r2, r3
 8004394:	7c3b      	ldrb	r3, [r7, #16]
 8004396:	b29b      	uxth	r3, r3
 8004398:	4413      	add	r3, r2
 800439a:	b29a      	uxth	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	3304      	adds	r3, #4
 80043a0:	b212      	sxth	r2, r2
 80043a2:	801a      	strh	r2, [r3, #0]
  return ret;
 80043a4:	697b      	ldr	r3, [r7, #20]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80043b8:	2301      	movs	r3, #1
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	210f      	movs	r1, #15
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff fd4a 	bl	8003e58 <lsm303agr_read_reg>
 80043c4:	60f8      	str	r0, [r7, #12]
  return ret;
 80043c6:	68fb      	ldr	r3, [r7, #12]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80043da:	2301      	movs	r3, #1
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	214f      	movs	r1, #79	; 0x4f
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff fd39 	bl	8003e58 <lsm303agr_read_reg>
 80043e6:	60f8      	str	r0, [r7, #12]
  return ret;
 80043e8:	68fb      	ldr	r3, [r7, #12]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80043fe:	f107 0208 	add.w	r2, r7, #8
 8004402:	2301      	movs	r3, #1
 8004404:	2162      	movs	r1, #98	; 0x62
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fd26 	bl	8003e58 <lsm303agr_read_reg>
 800440c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10f      	bne.n	8004434 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	7a3b      	ldrb	r3, [r7, #8]
 800441e:	f362 0341 	bfi	r3, r2, #1, #1
 8004422:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004424:	f107 0208 	add.w	r2, r7, #8
 8004428:	2301      	movs	r3, #1
 800442a:	2162      	movs	r1, #98	; 0x62
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff fd2b 	bl	8003e88 <lsm303agr_write_reg>
 8004432:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800444a:	f107 0208 	add.w	r2, r7, #8
 800444e:	2301      	movs	r3, #1
 8004450:	212e      	movs	r1, #46	; 0x2e
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff fd00 	bl	8003e58 <lsm303agr_read_reg>
 8004458:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	b2da      	uxtb	r2, r3
 8004468:	7a3b      	ldrb	r3, [r7, #8]
 800446a:	f362 1387 	bfi	r3, r2, #6, #2
 800446e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004470:	f107 0208 	add.w	r2, r7, #8
 8004474:	2301      	movs	r3, #1
 8004476:	212e      	movs	r1, #46	; 0x2e
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff fd05 	bl	8003e88 <lsm303agr_write_reg>
 800447e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004496:	f107 0208 	add.w	r2, r7, #8
 800449a:	2301      	movs	r3, #1
 800449c:	2162      	movs	r1, #98	; 0x62
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7ff fcda 	bl	8003e58 <lsm303agr_read_reg>
 80044a4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10f      	bne.n	80044cc <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	7a3b      	ldrb	r3, [r7, #8]
 80044b6:	f362 1345 	bfi	r3, r2, #5, #1
 80044ba:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80044bc:	f107 0208 	add.w	r2, r7, #8
 80044c0:	2301      	movs	r3, #1
 80044c2:	2162      	movs	r1, #98	; 0x62
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fcdf 	bl	8003e88 <lsm303agr_write_reg>
 80044ca:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80044cc:	68fb      	ldr	r3, [r7, #12]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80044ec:	f04f 33ff 	mov.w	r3, #4294967295
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	e04d      	b.n	8004590 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	7b1a      	ldrb	r2, [r3, #12]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1b      	ldr	r2, [pc, #108]	; (800459c <LSM6DSL_RegisterBusIO+0xc4>)
 8004530:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1a      	ldr	r2, [pc, #104]	; (80045a0 <LSM6DSL_RegisterBusIO+0xc8>)
 8004536:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004546:	f04f 33ff 	mov.w	r3, #4294967295
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e020      	b.n	8004590 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4798      	blx	r3
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e016      	b.n	8004590 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d112      	bne.n	8004590 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004574:	230c      	movs	r3, #12
 8004576:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004578:	7afb      	ldrb	r3, [r7, #11]
 800457a:	461a      	mov	r2, r3
 800457c:	2112      	movs	r1, #18
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fd2d 	bl	8004fde <LSM6DSL_Write_Reg>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004590:	68fb      	ldr	r3, [r7, #12]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	0800544d 	.word	0x0800544d
 80045a0:	08005483 	.word	0x08005483

080045a4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	331c      	adds	r3, #28
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 fa59 	bl	8005a6a <lsm6dsl_auto_increment_set>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295
 80045c2:	e054      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	331c      	adds	r3, #28
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f980 	bl	80058d0 <lsm6dsl_block_data_update_set>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80045d6:	f04f 33ff 	mov.w	r3, #4294967295
 80045da:	e048      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	331c      	adds	r3, #28
 80045e0:	2100      	movs	r1, #0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 fa67 	bl	8005ab6 <lsm6dsl_fifo_mode_set>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295
 80045f2:	e03c      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2204      	movs	r2, #4
 80045f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	331c      	adds	r3, #28
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 ffe6 	bl	80055d4 <lsm6dsl_xl_data_rate_set>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800460e:	f04f 33ff 	mov.w	r3, #4294967295
 8004612:	e02c      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	331c      	adds	r3, #28
 8004618:	2100      	movs	r1, #0
 800461a:	4618      	mov	r0, r3
 800461c:	f000 ff7c 	bl	8005518 <lsm6dsl_xl_full_scale_set>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	e020      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2204      	movs	r2, #4
 8004630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	331c      	adds	r3, #28
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f8c0 	bl	80057c0 <lsm6dsl_gy_data_rate_set>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004646:	f04f 33ff 	mov.w	r3, #4294967295
 800464a:	e010      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	331c      	adds	r3, #28
 8004650:	2106      	movs	r1, #6
 8004652:	4618      	mov	r0, r3
 8004654:	f001 f84c 	bl	80056f0 <lsm6dsl_gy_full_scale_set>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800465e:	f04f 33ff 	mov.w	r3, #4294967295
 8004662:	e004      	b.n	800466e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f888 	bl	8004794 <LSM6DSL_ACC_Disable>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 800468a:	f04f 33ff 	mov.w	r3, #4294967295
 800468e:	e015      	b.n	80046bc <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa9a 	bl	8004bca <LSM6DSL_GYRO_Disable>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	e00c      	b.n	80046bc <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	331c      	adds	r3, #28
 80046d2:	6839      	ldr	r1, [r7, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f001 f9b7 	bl	8005a48 <lsm6dsl_device_id_get>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	e000      	b.n	80046e8 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2201      	movs	r2, #1
 8004704:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004718:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <LSM6DSL_GetCapabilities+0x58>)
 800472a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	4a06      	ldr	r2, [pc, #24]	; (8004748 <LSM6DSL_GetCapabilities+0x58>)
 8004730:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	45d02000 	.word	0x45d02000

0800474c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	e014      	b.n	800478c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f103 021c 	add.w	r2, r3, #28
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 ff2f 	bl	80055d4 <lsm6dsl_xl_data_rate_set>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	e004      	b.n	800478c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e01f      	b.n	80047ea <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f103 021c 	add.w	r2, r3, #28
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	332b      	adds	r3, #43	; 0x2b
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 ff32 	bl	8005620 <lsm6dsl_xl_data_rate_get>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e010      	b.n	80047ea <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	331c      	adds	r3, #28
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 ff00 	bl	80055d4 <lsm6dsl_xl_data_rate_set>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e004      	b.n	80047ea <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	331c      	adds	r3, #28
 8004806:	f107 020b 	add.w	r2, r7, #11
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fea9 	bl	8005564 <lsm6dsl_xl_full_scale_get>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
 800481c:	e023      	b.n	8004866 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d81b      	bhi.n	800485c <LSM6DSL_ACC_GetSensitivity+0x68>
 8004824:	a201      	add	r2, pc, #4	; (adr r2, 800482c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482a:	bf00      	nop
 800482c:	0800483d 	.word	0x0800483d
 8004830:	08004855 	.word	0x08004855
 8004834:	08004845 	.word	0x08004845
 8004838:	0800484d 	.word	0x0800484d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004840:	601a      	str	r2, [r3, #0]
      break;
 8004842:	e00f      	b.n	8004864 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004848:	601a      	str	r2, [r3, #0]
      break;
 800484a:	e00b      	b.n	8004864 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004850:	601a      	str	r2, [r3, #0]
      break;
 8004852:	e007      	b.n	8004864 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004858:	601a      	str	r2, [r3, #0]
      break;
 800485a:	e003      	b.n	8004864 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800485c:	f04f 33ff 	mov.w	r3, #4294967295
 8004860:	60fb      	str	r3, [r7, #12]
      break;
 8004862:	bf00      	nop
  }

  return ret;
 8004864:	68fb      	ldr	r3, [r7, #12]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	3d79db23 	.word	0x3d79db23
 8004874:	3df9db23 	.word	0x3df9db23
 8004878:	3e79db23 	.word	0x3e79db23
 800487c:	3ef9db23 	.word	0x3ef9db23

08004880 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	331c      	adds	r3, #28
 8004892:	f107 020b 	add.w	r2, r7, #11
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fec1 	bl	8005620 <lsm6dsl_xl_data_rate_get>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	e054      	b.n	8004954 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80048aa:	7afb      	ldrb	r3, [r7, #11]
 80048ac:	2b0b      	cmp	r3, #11
 80048ae:	d84c      	bhi.n	800494a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048e9 	.word	0x080048e9
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	08004903 	.word	0x08004903
 80048c4:	0800490b 	.word	0x0800490b
 80048c8:	08004913 	.word	0x08004913
 80048cc:	0800491b 	.word	0x0800491b
 80048d0:	08004923 	.word	0x08004923
 80048d4:	0800492b 	.word	0x0800492b
 80048d8:	08004933 	.word	0x08004933
 80048dc:	0800493b 	.word	0x0800493b
 80048e0:	08004943 	.word	0x08004943
 80048e4:	080048f3 	.word	0x080048f3
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
      break;
 80048f0:	e02f      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 80048f6:	601a      	str	r2, [r3, #0]
      break;
 80048f8:	e02b      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 80048fe:	601a      	str	r2, [r3, #0]
      break;
 8004900:	e027      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004906:	601a      	str	r2, [r3, #0]
      break;
 8004908:	e023      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	4a16      	ldr	r2, [pc, #88]	; (8004968 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800490e:	601a      	str	r2, [r3, #0]
      break;
 8004910:	e01f      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4a15      	ldr	r2, [pc, #84]	; (800496c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004916:	601a      	str	r2, [r3, #0]
      break;
 8004918:	e01b      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800491e:	601a      	str	r2, [r3, #0]
      break;
 8004920:	e017      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004926:	601a      	str	r2, [r3, #0]
      break;
 8004928:	e013      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	4a12      	ldr	r2, [pc, #72]	; (8004978 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800492e:	601a      	str	r2, [r3, #0]
      break;
 8004930:	e00f      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	4a11      	ldr	r2, [pc, #68]	; (800497c <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004936:	601a      	str	r2, [r3, #0]
      break;
 8004938:	e00b      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4a10      	ldr	r2, [pc, #64]	; (8004980 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800493e:	601a      	str	r2, [r3, #0]
      break;
 8004940:	e007      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	4a0f      	ldr	r2, [pc, #60]	; (8004984 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004946:	601a      	str	r2, [r3, #0]
      break;
 8004948:	e003      	b.n	8004952 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	60fb      	str	r3, [r7, #12]
      break;
 8004950:	bf00      	nop
  }

  return ret;
 8004952:	68fb      	ldr	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	3fcccccd 	.word	0x3fcccccd
 8004960:	41480000 	.word	0x41480000
 8004964:	41d00000 	.word	0x41d00000
 8004968:	42500000 	.word	0x42500000
 800496c:	42d00000 	.word	0x42d00000
 8004970:	43500000 	.word	0x43500000
 8004974:	43d00000 	.word	0x43d00000
 8004978:	44504000 	.word	0x44504000
 800497c:	44cf8000 	.word	0x44cf8000
 8004980:	45502000 	.word	0x45502000
 8004984:	45d02000 	.word	0x45d02000

08004988 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800499a:	2b01      	cmp	r3, #1
 800499c:	d106      	bne.n	80049ac <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800499e:	ed97 0a00 	vldr	s0, [r7]
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fb36 	bl	8005014 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80049a8:	4603      	mov	r3, r0
 80049aa:	e005      	b.n	80049b8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80049ac:	ed97 0a00 	vldr	s0, [r7]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fbbb 	bl	800512c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80049b6:	4603      	mov	r3, r0
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3708      	adds	r7, #8
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	331c      	adds	r3, #28
 80049d2:	f107 020b 	add.w	r2, r7, #11
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fdc3 	bl	8005564 <lsm6dsl_xl_full_scale_get>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80049e4:	f04f 33ff 	mov.w	r3, #4294967295
 80049e8:	e023      	b.n	8004a32 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80049ea:	7afb      	ldrb	r3, [r7, #11]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d81b      	bhi.n	8004a28 <LSM6DSL_ACC_GetFullScale+0x68>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <LSM6DSL_ACC_GetFullScale+0x38>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a11 	.word	0x08004a11
 8004a04:	08004a19 	.word	0x08004a19
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	601a      	str	r2, [r3, #0]
      break;
 8004a0e:	e00f      	b.n	8004a30 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2204      	movs	r2, #4
 8004a14:	601a      	str	r2, [r3, #0]
      break;
 8004a16:	e00b      	b.n	8004a30 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	601a      	str	r2, [r3, #0]
      break;
 8004a1e:	e007      	b.n	8004a30 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2210      	movs	r2, #16
 8004a24:	601a      	str	r2, [r3, #0]
      break;
 8004a26:	e003      	b.n	8004a30 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	60fb      	str	r3, [r7, #12]
      break;
 8004a2e:	bf00      	nop
  }

  return ret;
 8004a30:	68fb      	ldr	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop

08004a3c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	dd0b      	ble.n	8004a64 <LSM6DSL_ACC_SetFullScale+0x28>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	dd06      	ble.n	8004a60 <LSM6DSL_ACC_SetFullScale+0x24>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	dc01      	bgt.n	8004a5c <LSM6DSL_ACC_SetFullScale+0x20>
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e004      	b.n	8004a66 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e002      	b.n	8004a66 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e000      	b.n	8004a66 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004a64:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004a66:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	331c      	adds	r3, #28
 8004a6c:	7bfa      	ldrb	r2, [r7, #15]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd51 	bl	8005518 <lsm6dsl_xl_full_scale_set>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a80:	e000      	b.n	8004a84 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	331c      	adds	r3, #28
 8004a9a:	f107 0208 	add.w	r2, r7, #8
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 ff86 	bl	80059b2 <lsm6dsl_acceleration_raw_get>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004aac:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab0:	e00c      	b.n	8004acc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004ab2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004aba:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004ac2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	331c      	adds	r3, #28
 8004ae8:	f107 0210 	add.w	r2, r7, #16
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 ff5f 	bl	80059b2 <lsm6dsl_acceleration_raw_get>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004afa:	f04f 33ff 	mov.w	r3, #4294967295
 8004afe:	e03c      	b.n	8004b7a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fe74 	bl	80047f4 <LSM6DSL_ACC_GetSensitivity>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	e030      	b.n	8004b7a <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b30:	ee17 2a90 	vmov	r2, s15
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b50:	ee17 2a90 	vmov	r2, s15
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004b58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b70:	ee17 2a90 	vmov	r2, s15
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b082      	sub	sp, #8
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e014      	b.n	8004bc2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f103 021c 	add.w	r2, r3, #28
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	f000 fe0a 	bl	80057c0 <lsm6dsl_gy_data_rate_set>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e004      	b.n	8004bc2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e01f      	b.n	8004c20 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f103 021c 	add.w	r2, r3, #28
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	332c      	adds	r3, #44	; 0x2c
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f000 fe0d 	bl	800580c <lsm6dsl_gy_data_rate_get>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfc:	e010      	b.n	8004c20 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	331c      	adds	r3, #28
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 fddb 	bl	80057c0 <lsm6dsl_gy_data_rate_set>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295
 8004c14:	e004      	b.n	8004c20 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	331c      	adds	r3, #28
 8004c3a:	f107 020b 	add.w	r2, r7, #11
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fd7b 	bl	800573c <lsm6dsl_gy_full_scale_get>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c50:	e02d      	b.n	8004cae <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004c52:	7afb      	ldrb	r3, [r7, #11]
 8004c54:	2b06      	cmp	r3, #6
 8004c56:	d825      	bhi.n	8004ca4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c85 	.word	0x08004c85
 8004c64:	08004c7d 	.word	0x08004c7d
 8004c68:	08004c8d 	.word	0x08004c8d
 8004c6c:	08004ca5 	.word	0x08004ca5
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004c9d 	.word	0x08004c9d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4a0e      	ldr	r2, [pc, #56]	; (8004cb8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004c80:	601a      	str	r2, [r3, #0]
      break;
 8004c82:	e013      	b.n	8004cac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4a0d      	ldr	r2, [pc, #52]	; (8004cbc <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004c88:	601a      	str	r2, [r3, #0]
      break;
 8004c8a:	e00f      	b.n	8004cac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004c90:	601a      	str	r2, [r3, #0]
      break;
 8004c92:	e00b      	b.n	8004cac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004c98:	601a      	str	r2, [r3, #0]
      break;
 8004c9a:	e007      	b.n	8004cac <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4a0a      	ldr	r2, [pc, #40]	; (8004cc8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004ca0:	601a      	str	r2, [r3, #0]
      break;
 8004ca2:	e003      	b.n	8004cac <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	60fb      	str	r3, [r7, #12]
      break;
 8004caa:	bf00      	nop
  }

  return ret;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	408c0000 	.word	0x408c0000
 8004cbc:	410c0000 	.word	0x410c0000
 8004cc0:	418c0000 	.word	0x418c0000
 8004cc4:	420c0000 	.word	0x420c0000
 8004cc8:	428c0000 	.word	0x428c0000

08004ccc <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	331c      	adds	r3, #28
 8004cde:	f107 020b 	add.w	r2, r7, #11
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fd91 	bl	800580c <lsm6dsl_gy_data_rate_get>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	e04e      	b.n	8004d94 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	2b0a      	cmp	r3, #10
 8004cfa:	d846      	bhi.n	8004d8a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d31 	.word	0x08004d31
 8004d08:	08004d3b 	.word	0x08004d3b
 8004d0c:	08004d43 	.word	0x08004d43
 8004d10:	08004d4b 	.word	0x08004d4b
 8004d14:	08004d53 	.word	0x08004d53
 8004d18:	08004d5b 	.word	0x08004d5b
 8004d1c:	08004d63 	.word	0x08004d63
 8004d20:	08004d6b 	.word	0x08004d6b
 8004d24:	08004d73 	.word	0x08004d73
 8004d28:	08004d7b 	.word	0x08004d7b
 8004d2c:	08004d83 	.word	0x08004d83
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
      break;
 8004d38:	e02b      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004d3e:	601a      	str	r2, [r3, #0]
      break;
 8004d40:	e027      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004d46:	601a      	str	r2, [r3, #0]
      break;
 8004d48:	e023      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004d4e:	601a      	str	r2, [r3, #0]
      break;
 8004d50:	e01f      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004d56:	601a      	str	r2, [r3, #0]
      break;
 8004d58:	e01b      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004d5e:	601a      	str	r2, [r3, #0]
      break;
 8004d60:	e017      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004d66:	601a      	str	r2, [r3, #0]
      break;
 8004d68:	e013      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004d6e:	601a      	str	r2, [r3, #0]
      break;
 8004d70:	e00f      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004d76:	601a      	str	r2, [r3, #0]
      break;
 8004d78:	e00b      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004d7e:	601a      	str	r2, [r3, #0]
      break;
 8004d80:	e007      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004d86:	601a      	str	r2, [r3, #0]
      break;
 8004d88:	e003      	b.n	8004d92 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	60fb      	str	r3, [r7, #12]
      break;
 8004d90:	bf00      	nop
  }

  return ret;
 8004d92:	68fb      	ldr	r3, [r7, #12]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	41480000 	.word	0x41480000
 8004da0:	41d00000 	.word	0x41d00000
 8004da4:	42500000 	.word	0x42500000
 8004da8:	42d00000 	.word	0x42d00000
 8004dac:	43500000 	.word	0x43500000
 8004db0:	43d00000 	.word	0x43d00000
 8004db4:	44504000 	.word	0x44504000
 8004db8:	44cf8000 	.word	0x44cf8000
 8004dbc:	45502000 	.word	0x45502000
 8004dc0:	45d02000 	.word	0x45d02000

08004dc4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d106      	bne.n	8004de8 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004dda:	ed97 0a00 	vldr	s0, [r7]
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa26 	bl	8005230 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004de4:	4603      	mov	r3, r0
 8004de6:	e005      	b.n	8004df4 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004de8:	ed97 0a00 	vldr	s0, [r7]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 faab 	bl	8005348 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004df2:	4603      	mov	r3, r0
  }
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	331c      	adds	r3, #28
 8004e0e:	f107 020b 	add.w	r2, r7, #11
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fc91 	bl	800573c <lsm6dsl_gy_full_scale_get>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004e20:	f04f 33ff 	mov.w	r3, #4294967295
 8004e24:	e030      	b.n	8004e88 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004e26:	7afb      	ldrb	r3, [r7, #11]
 8004e28:	2b06      	cmp	r3, #6
 8004e2a:	d828      	bhi.n	8004e7e <LSM6DSL_GYRO_GetFullScale+0x82>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e59 	.word	0x08004e59
 8004e38:	08004e51 	.word	0x08004e51
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e7f 	.word	0x08004e7f
 8004e44:	08004e6b 	.word	0x08004e6b
 8004e48:	08004e7f 	.word	0x08004e7f
 8004e4c:	08004e75 	.word	0x08004e75
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	227d      	movs	r2, #125	; 0x7d
 8004e54:	601a      	str	r2, [r3, #0]
      break;
 8004e56:	e016      	b.n	8004e86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	22fa      	movs	r2, #250	; 0xfa
 8004e5c:	601a      	str	r2, [r3, #0]
      break;
 8004e5e:	e012      	b.n	8004e86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e66:	601a      	str	r2, [r3, #0]
      break;
 8004e68:	e00d      	b.n	8004e86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e70:	601a      	str	r2, [r3, #0]
      break;
 8004e72:	e008      	b.n	8004e86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004e7a:	601a      	str	r2, [r3, #0]
      break;
 8004e7c:	e003      	b.n	8004e86 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e82:	60fb      	str	r3, [r7, #12]
      break;
 8004e84:	bf00      	nop
  }

  return ret;
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b7d      	cmp	r3, #125	; 0x7d
 8004e9e:	dd12      	ble.n	8004ec6 <LSM6DSL_GYRO_SetFullScale+0x36>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2bfa      	cmp	r3, #250	; 0xfa
 8004ea4:	dd0d      	ble.n	8004ec2 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eac:	dd07      	ble.n	8004ebe <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb4:	dc01      	bgt.n	8004eba <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004eb6:	2304      	movs	r3, #4
 8004eb8:	e006      	b.n	8004ec8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004eba:	2306      	movs	r3, #6
 8004ebc:	e004      	b.n	8004ec8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e002      	b.n	8004ec8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004ec6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004ec8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	331c      	adds	r3, #28
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fc0c 	bl	80056f0 <lsm6dsl_gy_full_scale_set>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e000      	b.n	8004ee6 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	331c      	adds	r3, #28
 8004efc:	f107 0208 	add.w	r2, r7, #8
 8004f00:	4611      	mov	r1, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fd0a 	bl	800591c <lsm6dsl_angular_rate_raw_get>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f12:	e00c      	b.n	8004f2e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004f14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004f1c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004f24:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b086      	sub	sp, #24
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	331c      	adds	r3, #28
 8004f44:	f107 0210 	add.w	r2, r7, #16
 8004f48:	4611      	mov	r1, r2
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fce6 	bl	800591c <lsm6dsl_angular_rate_raw_get>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5a:	e03c      	b.n	8004fd6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004f5c:	f107 030c 	add.w	r3, r7, #12
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe60 	bl	8004c28 <LSM6DSL_GYRO_GetSensitivity>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f72:	e030      	b.n	8004fd6 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004f74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f8c:	ee17 2a90 	vmov	r2, s15
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f98:	ee07 3a90 	vmov	s15, r3
 8004f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fac:	ee17 2a90 	vmov	r2, s15
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004fb4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fcc:	ee17 2a90 	vmov	r2, s15
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
 8004fea:	4613      	mov	r3, r2
 8004fec:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f103 001c 	add.w	r0, r3, #28
 8004ff4:	1cba      	adds	r2, r7, #2
 8004ff6:	78f9      	ldrb	r1, [r7, #3]
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f000 fa75 	bl	80054e8 <lsm6dsl_write_reg>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	e000      	b.n	800500c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005020:	edd7 7a00 	vldr	s15, [r7]
 8005024:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005030:	d801      	bhi.n	8005036 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005032:	2301      	movs	r3, #1
 8005034:	e058      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005036:	edd7 7a00 	vldr	s15, [r7]
 800503a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	d801      	bhi.n	800504c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005048:	2302      	movs	r3, #2
 800504a:	e04d      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800504c:	edd7 7a00 	vldr	s15, [r7]
 8005050:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005110 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505c:	d801      	bhi.n	8005062 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800505e:	2303      	movs	r3, #3
 8005060:	e042      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005062:	edd7 7a00 	vldr	s15, [r7]
 8005066:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005114 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 800506a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	d801      	bhi.n	8005078 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005074:	2304      	movs	r3, #4
 8005076:	e037      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005078:	edd7 7a00 	vldr	s15, [r7]
 800507c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005118 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	d801      	bhi.n	800508e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800508a:	2305      	movs	r3, #5
 800508c:	e02c      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800508e:	edd7 7a00 	vldr	s15, [r7]
 8005092:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800511c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	d801      	bhi.n	80050a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 80050a0:	2306      	movs	r3, #6
 80050a2:	e021      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050a4:	edd7 7a00 	vldr	s15, [r7]
 80050a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005120 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80050ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b4:	d801      	bhi.n	80050ba <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80050b6:	2307      	movs	r3, #7
 80050b8:	e016      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050ba:	edd7 7a00 	vldr	s15, [r7]
 80050be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80050c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d801      	bhi.n	80050d0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80050cc:	2308      	movs	r3, #8
 80050ce:	e00b      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050d0:	edd7 7a00 	vldr	s15, [r7]
 80050d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005128 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80050d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e0:	d801      	bhi.n	80050e6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80050e2:	2309      	movs	r3, #9
 80050e4:	e000      	b.n	80050e8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050e6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80050e8:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	331c      	adds	r3, #28
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa6e 	bl	80055d4 <lsm6dsl_xl_data_rate_set>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	e000      	b.n	8005106 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	42500000 	.word	0x42500000
 8005114:	42d00000 	.word	0x42d00000
 8005118:	43500000 	.word	0x43500000
 800511c:	43d00000 	.word	0x43d00000
 8005120:	44504000 	.word	0x44504000
 8005124:	44cf8000 	.word	0x44cf8000
 8005128:	45502000 	.word	0x45502000

0800512c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8005138:	edd7 7a00 	vldr	s15, [r7]
 800513c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005148:	d801      	bhi.n	800514e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800514a:	2301      	movs	r3, #1
 800514c:	e058      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800514e:	edd7 7a00 	vldr	s15, [r7]
 8005152:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	d801      	bhi.n	8005164 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005160:	2302      	movs	r3, #2
 8005162:	e04d      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005164:	edd7 7a00 	vldr	s15, [r7]
 8005168:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005214 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800516c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	d801      	bhi.n	800517a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005176:	2303      	movs	r3, #3
 8005178:	e042      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800517a:	edd7 7a00 	vldr	s15, [r7]
 800517e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005218 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d801      	bhi.n	8005190 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 800518c:	2304      	movs	r3, #4
 800518e:	e037      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005190:	edd7 7a00 	vldr	s15, [r7]
 8005194:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800521c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	d801      	bhi.n	80051a6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80051a2:	2305      	movs	r3, #5
 80051a4:	e02c      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051a6:	edd7 7a00 	vldr	s15, [r7]
 80051aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005220 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80051ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	d801      	bhi.n	80051bc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80051b8:	2306      	movs	r3, #6
 80051ba:	e021      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051bc:	edd7 7a00 	vldr	s15, [r7]
 80051c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005224 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80051c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051cc:	d801      	bhi.n	80051d2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80051ce:	2307      	movs	r3, #7
 80051d0:	e016      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051d2:	edd7 7a00 	vldr	s15, [r7]
 80051d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005228 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80051da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	d801      	bhi.n	80051e8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80051e4:	2308      	movs	r3, #8
 80051e6:	e00b      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051e8:	edd7 7a00 	vldr	s15, [r7]
 80051ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800522c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80051f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	d801      	bhi.n	80051fe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80051fa:	2309      	movs	r3, #9
 80051fc:	e000      	b.n	8005200 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051fe:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	42500000 	.word	0x42500000
 8005218:	42d00000 	.word	0x42d00000
 800521c:	43500000 	.word	0x43500000
 8005220:	43d00000 	.word	0x43d00000
 8005224:	44504000 	.word	0x44504000
 8005228:	44cf8000 	.word	0x44cf8000
 800522c:	45502000 	.word	0x45502000

08005230 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800523c:	edd7 7a00 	vldr	s15, [r7]
 8005240:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	d801      	bhi.n	8005252 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800524e:	2301      	movs	r3, #1
 8005250:	e058      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005252:	edd7 7a00 	vldr	s15, [r7]
 8005256:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800525a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	d801      	bhi.n	8005268 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005264:	2302      	movs	r3, #2
 8005266:	e04d      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005268:	edd7 7a00 	vldr	s15, [r7]
 800526c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800532c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d801      	bhi.n	800527e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800527a:	2303      	movs	r3, #3
 800527c:	e042      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800527e:	edd7 7a00 	vldr	s15, [r7]
 8005282:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005330 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	d801      	bhi.n	8005294 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005290:	2304      	movs	r3, #4
 8005292:	e037      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005294:	edd7 7a00 	vldr	s15, [r7]
 8005298:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005334 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800529c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d801      	bhi.n	80052aa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80052a6:	2305      	movs	r3, #5
 80052a8:	e02c      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052aa:	edd7 7a00 	vldr	s15, [r7]
 80052ae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005338 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80052b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ba:	d801      	bhi.n	80052c0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80052bc:	2306      	movs	r3, #6
 80052be:	e021      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052c0:	edd7 7a00 	vldr	s15, [r7]
 80052c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800533c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80052c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	d801      	bhi.n	80052d6 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80052d2:	2307      	movs	r3, #7
 80052d4:	e016      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052d6:	edd7 7a00 	vldr	s15, [r7]
 80052da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e6:	d801      	bhi.n	80052ec <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052e8:	2308      	movs	r3, #8
 80052ea:	e00b      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052ec:	edd7 7a00 	vldr	s15, [r7]
 80052f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005344 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80052f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	d801      	bhi.n	8005302 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80052fe:	2309      	movs	r3, #9
 8005300:	e000      	b.n	8005304 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005302:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005304:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	331c      	adds	r3, #28
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fa56 	bl	80057c0 <lsm6dsl_gy_data_rate_set>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	e000      	b.n	8005322 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	42500000 	.word	0x42500000
 8005330:	42d00000 	.word	0x42d00000
 8005334:	43500000 	.word	0x43500000
 8005338:	43d00000 	.word	0x43d00000
 800533c:	44504000 	.word	0x44504000
 8005340:	44cf8000 	.word	0x44cf8000
 8005344:	45502000 	.word	0x45502000

08005348 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005354:	edd7 7a00 	vldr	s15, [r7]
 8005358:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800535c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	d801      	bhi.n	800536a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005366:	2301      	movs	r3, #1
 8005368:	e058      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800536a:	edd7 7a00 	vldr	s15, [r7]
 800536e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	d801      	bhi.n	8005380 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800537c:	2302      	movs	r3, #2
 800537e:	e04d      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005380:	edd7 7a00 	vldr	s15, [r7]
 8005384:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005430 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	d801      	bhi.n	8005396 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005392:	2303      	movs	r3, #3
 8005394:	e042      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005396:	edd7 7a00 	vldr	s15, [r7]
 800539a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005434 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800539e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	d801      	bhi.n	80053ac <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e037      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053ac:	edd7 7a00 	vldr	s15, [r7]
 80053b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005438 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80053b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053bc:	d801      	bhi.n	80053c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80053be:	2305      	movs	r3, #5
 80053c0:	e02c      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053c2:	edd7 7a00 	vldr	s15, [r7]
 80053c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800543c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80053ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	d801      	bhi.n	80053d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80053d4:	2306      	movs	r3, #6
 80053d6:	e021      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053d8:	edd7 7a00 	vldr	s15, [r7]
 80053dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005440 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e8:	d801      	bhi.n	80053ee <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053ea:	2307      	movs	r3, #7
 80053ec:	e016      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053ee:	edd7 7a00 	vldr	s15, [r7]
 80053f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005444 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80053f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	d801      	bhi.n	8005404 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005400:	2308      	movs	r3, #8
 8005402:	e00b      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005404:	edd7 7a00 	vldr	s15, [r7]
 8005408:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005448 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800540c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005414:	d801      	bhi.n	800541a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005416:	2309      	movs	r3, #9
 8005418:	e000      	b.n	800541c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800541a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	42500000 	.word	0x42500000
 8005434:	42d00000 	.word	0x42d00000
 8005438:	43500000 	.word	0x43500000
 800543c:	43d00000 	.word	0x43d00000
 8005440:	44504000 	.word	0x44504000
 8005444:	44cf8000 	.word	0x44cf8000
 8005448:	45502000 	.word	0x45502000

0800544c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	461a      	mov	r2, r3
 8005458:	460b      	mov	r3, r1
 800545a:	72fb      	strb	r3, [r7, #11]
 800545c:	4613      	mov	r3, r2
 800545e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	695c      	ldr	r4, [r3, #20]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	7b1b      	ldrb	r3, [r3, #12]
 800546c:	b298      	uxth	r0, r3
 800546e:	7afb      	ldrb	r3, [r7, #11]
 8005470:	b299      	uxth	r1, r3
 8005472:	893b      	ldrh	r3, [r7, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	47a0      	blx	r4
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}

08005482 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005482:	b590      	push	{r4, r7, lr}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	461a      	mov	r2, r3
 800548e:	460b      	mov	r3, r1
 8005490:	72fb      	strb	r3, [r7, #11]
 8005492:	4613      	mov	r3, r2
 8005494:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	691c      	ldr	r4, [r3, #16]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	7b1b      	ldrb	r3, [r3, #12]
 80054a2:	b298      	uxth	r0, r3
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	b299      	uxth	r1, r3
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	47a0      	blx	r4
 80054ae:	4603      	mov	r3, r0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd90      	pop	{r4, r7, pc}

080054b8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	461a      	mov	r2, r3
 80054c4:	460b      	mov	r3, r1
 80054c6:	72fb      	strb	r3, [r7, #11]
 80054c8:	4613      	mov	r3, r2
 80054ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685c      	ldr	r4, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6898      	ldr	r0, [r3, #8]
 80054d4:	893b      	ldrh	r3, [r7, #8]
 80054d6:	7af9      	ldrb	r1, [r7, #11]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	47a0      	blx	r4
 80054dc:	6178      	str	r0, [r7, #20]
  return ret;
 80054de:	697b      	ldr	r3, [r7, #20]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd90      	pop	{r4, r7, pc}

080054e8 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	461a      	mov	r2, r3
 80054f4:	460b      	mov	r3, r1
 80054f6:	72fb      	strb	r3, [r7, #11]
 80054f8:	4613      	mov	r3, r2
 80054fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681c      	ldr	r4, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6898      	ldr	r0, [r3, #8]
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	7af9      	ldrb	r1, [r7, #11]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	47a0      	blx	r4
 800550c:	6178      	str	r0, [r7, #20]
  return ret;
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005524:	f107 0208 	add.w	r2, r7, #8
 8005528:	2301      	movs	r3, #1
 800552a:	2110      	movs	r1, #16
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ffc3 	bl	80054b8 <lsm6dsl_read_reg>
 8005532:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	b2da      	uxtb	r2, r3
 8005542:	7a3b      	ldrb	r3, [r7, #8]
 8005544:	f362 0383 	bfi	r3, r2, #2, #2
 8005548:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	2301      	movs	r3, #1
 8005550:	2110      	movs	r1, #16
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ffc8 	bl	80054e8 <lsm6dsl_write_reg>
 8005558:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800556e:	f107 0208 	add.w	r2, r7, #8
 8005572:	2301      	movs	r3, #1
 8005574:	2110      	movs	r1, #16
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff ff9e 	bl	80054b8 <lsm6dsl_read_reg>
 800557c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 800557e:	7a3b      	ldrb	r3, [r7, #8]
 8005580:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d81a      	bhi.n	80055c0 <lsm6dsl_xl_full_scale_get+0x5c>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <lsm6dsl_xl_full_scale_get+0x2c>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055a9 	.word	0x080055a9
 8005598:	080055b1 	.word	0x080055b1
 800559c:	080055b9 	.word	0x080055b9
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
      break;
 80055a6:	e00f      	b.n	80055c8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
      break;
 80055ae:	e00b      	b.n	80055c8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
      break;
 80055b6:	e007      	b.n	80055c8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2203      	movs	r2, #3
 80055bc:	701a      	strb	r2, [r3, #0]
      break;
 80055be:	e003      	b.n	80055c8 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2204      	movs	r2, #4
 80055c4:	701a      	strb	r2, [r3, #0]
      break;
 80055c6:	bf00      	nop
  }

  return ret;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 80055e0:	f107 0208 	add.w	r2, r7, #8
 80055e4:	2301      	movs	r3, #1
 80055e6:	2110      	movs	r1, #16
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ff65 	bl	80054b8 <lsm6dsl_read_reg>
 80055ee:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	7a3b      	ldrb	r3, [r7, #8]
 8005600:	f362 1307 	bfi	r3, r2, #4, #4
 8005604:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005606:	f107 0208 	add.w	r2, r7, #8
 800560a:	2301      	movs	r3, #1
 800560c:	2110      	movs	r1, #16
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7ff ff6a 	bl	80054e8 <lsm6dsl_write_reg>
 8005614:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005616:	68fb      	ldr	r3, [r7, #12]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800562a:	f107 0208 	add.w	r2, r7, #8
 800562e:	2301      	movs	r3, #1
 8005630:	2110      	movs	r1, #16
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff ff40 	bl	80054b8 <lsm6dsl_read_reg>
 8005638:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800563a:	7a3b      	ldrb	r3, [r7, #8]
 800563c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b0b      	cmp	r3, #11
 8005644:	d84a      	bhi.n	80056dc <lsm6dsl_xl_data_rate_get+0xbc>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	0800567d 	.word	0x0800567d
 8005650:	08005685 	.word	0x08005685
 8005654:	0800568d 	.word	0x0800568d
 8005658:	08005695 	.word	0x08005695
 800565c:	0800569d 	.word	0x0800569d
 8005660:	080056a5 	.word	0x080056a5
 8005664:	080056ad 	.word	0x080056ad
 8005668:	080056b5 	.word	0x080056b5
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056c5 	.word	0x080056c5
 8005674:	080056cd 	.word	0x080056cd
 8005678:	080056d5 	.word	0x080056d5
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
      break;
 8005682:	e02f      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	701a      	strb	r2, [r3, #0]
      break;
 800568a:	e02b      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2202      	movs	r2, #2
 8005690:	701a      	strb	r2, [r3, #0]
      break;
 8005692:	e027      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2203      	movs	r2, #3
 8005698:	701a      	strb	r2, [r3, #0]
      break;
 800569a:	e023      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2204      	movs	r2, #4
 80056a0:	701a      	strb	r2, [r3, #0]
      break;
 80056a2:	e01f      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2205      	movs	r2, #5
 80056a8:	701a      	strb	r2, [r3, #0]
      break;
 80056aa:	e01b      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2206      	movs	r2, #6
 80056b0:	701a      	strb	r2, [r3, #0]
      break;
 80056b2:	e017      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2207      	movs	r2, #7
 80056b8:	701a      	strb	r2, [r3, #0]
      break;
 80056ba:	e013      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2208      	movs	r2, #8
 80056c0:	701a      	strb	r2, [r3, #0]
      break;
 80056c2:	e00f      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2209      	movs	r2, #9
 80056c8:	701a      	strb	r2, [r3, #0]
      break;
 80056ca:	e00b      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	220a      	movs	r2, #10
 80056d0:	701a      	strb	r2, [r3, #0]
      break;
 80056d2:	e007      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	220b      	movs	r2, #11
 80056d8:	701a      	strb	r2, [r3, #0]
      break;
 80056da:	e003      	b.n	80056e4 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	220c      	movs	r2, #12
 80056e0:	701a      	strb	r2, [r3, #0]
      break;
 80056e2:	bf00      	nop
  }

  return ret;
 80056e4:	68fb      	ldr	r3, [r7, #12]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop

080056f0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056fc:	f107 0208 	add.w	r2, r7, #8
 8005700:	2301      	movs	r3, #1
 8005702:	2111      	movs	r1, #17
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fed7 	bl	80054b8 <lsm6dsl_read_reg>
 800570a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10f      	bne.n	8005732 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	b2da      	uxtb	r2, r3
 800571a:	7a3b      	ldrb	r3, [r7, #8]
 800571c:	f362 0343 	bfi	r3, r2, #1, #3
 8005720:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005722:	f107 0208 	add.w	r2, r7, #8
 8005726:	2301      	movs	r3, #1
 8005728:	2111      	movs	r1, #17
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff fedc 	bl	80054e8 <lsm6dsl_write_reg>
 8005730:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005746:	f107 0208 	add.w	r2, r7, #8
 800574a:	2301      	movs	r3, #1
 800574c:	2111      	movs	r1, #17
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff feb2 	bl	80054b8 <lsm6dsl_read_reg>
 8005754:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8005756:	7a3b      	ldrb	r3, [r7, #8]
 8005758:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b06      	cmp	r3, #6
 8005760:	d824      	bhi.n	80057ac <lsm6dsl_gy_full_scale_get+0x70>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	08005785 	.word	0x08005785
 800576c:	0800578d 	.word	0x0800578d
 8005770:	08005795 	.word	0x08005795
 8005774:	080057ad 	.word	0x080057ad
 8005778:	0800579d 	.word	0x0800579d
 800577c:	080057ad 	.word	0x080057ad
 8005780:	080057a5 	.word	0x080057a5
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
      break;
 800578a:	e013      	b.n	80057b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
      break;
 8005792:	e00f      	b.n	80057b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2202      	movs	r2, #2
 8005798:	701a      	strb	r2, [r3, #0]
      break;
 800579a:	e00b      	b.n	80057b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2204      	movs	r2, #4
 80057a0:	701a      	strb	r2, [r3, #0]
      break;
 80057a2:	e007      	b.n	80057b4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2206      	movs	r2, #6
 80057a8:	701a      	strb	r2, [r3, #0]
      break;
 80057aa:	e003      	b.n	80057b4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2207      	movs	r2, #7
 80057b0:	701a      	strb	r2, [r3, #0]
      break;
 80057b2:	bf00      	nop
  }

  return ret;
 80057b4:	68fb      	ldr	r3, [r7, #12]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop

080057c0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057cc:	f107 0208 	add.w	r2, r7, #8
 80057d0:	2301      	movs	r3, #1
 80057d2:	2111      	movs	r1, #17
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff fe6f 	bl	80054b8 <lsm6dsl_read_reg>
 80057da:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10f      	bne.n	8005802 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 030f 	and.w	r3, r3, #15
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	7a3b      	ldrb	r3, [r7, #8]
 80057ec:	f362 1307 	bfi	r3, r2, #4, #4
 80057f0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80057f2:	f107 0208 	add.w	r2, r7, #8
 80057f6:	2301      	movs	r3, #1
 80057f8:	2111      	movs	r1, #17
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff fe74 	bl	80054e8 <lsm6dsl_write_reg>
 8005800:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005816:	f107 0208 	add.w	r2, r7, #8
 800581a:	2301      	movs	r3, #1
 800581c:	2111      	movs	r1, #17
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fe4a 	bl	80054b8 <lsm6dsl_read_reg>
 8005824:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005826:	7a3b      	ldrb	r3, [r7, #8]
 8005828:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b0a      	cmp	r3, #10
 8005830:	d844      	bhi.n	80058bc <lsm6dsl_gy_data_rate_get+0xb0>
 8005832:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005838:	08005865 	.word	0x08005865
 800583c:	0800586d 	.word	0x0800586d
 8005840:	08005875 	.word	0x08005875
 8005844:	0800587d 	.word	0x0800587d
 8005848:	08005885 	.word	0x08005885
 800584c:	0800588d 	.word	0x0800588d
 8005850:	08005895 	.word	0x08005895
 8005854:	0800589d 	.word	0x0800589d
 8005858:	080058a5 	.word	0x080058a5
 800585c:	080058ad 	.word	0x080058ad
 8005860:	080058b5 	.word	0x080058b5
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
      break;
 800586a:	e02b      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
      break;
 8005872:	e027      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2202      	movs	r2, #2
 8005878:	701a      	strb	r2, [r3, #0]
      break;
 800587a:	e023      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2203      	movs	r2, #3
 8005880:	701a      	strb	r2, [r3, #0]
      break;
 8005882:	e01f      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2204      	movs	r2, #4
 8005888:	701a      	strb	r2, [r3, #0]
      break;
 800588a:	e01b      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2205      	movs	r2, #5
 8005890:	701a      	strb	r2, [r3, #0]
      break;
 8005892:	e017      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2206      	movs	r2, #6
 8005898:	701a      	strb	r2, [r3, #0]
      break;
 800589a:	e013      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2207      	movs	r2, #7
 80058a0:	701a      	strb	r2, [r3, #0]
      break;
 80058a2:	e00f      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2208      	movs	r2, #8
 80058a8:	701a      	strb	r2, [r3, #0]
      break;
 80058aa:	e00b      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2209      	movs	r2, #9
 80058b0:	701a      	strb	r2, [r3, #0]
      break;
 80058b2:	e007      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	220a      	movs	r2, #10
 80058b8:	701a      	strb	r2, [r3, #0]
      break;
 80058ba:	e003      	b.n	80058c4 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	220b      	movs	r2, #11
 80058c0:	701a      	strb	r2, [r3, #0]
      break;
 80058c2:	bf00      	nop
  }

  return ret;
 80058c4:	68fb      	ldr	r3, [r7, #12]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop

080058d0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80058dc:	f107 0208 	add.w	r2, r7, #8
 80058e0:	2301      	movs	r3, #1
 80058e2:	2112      	movs	r1, #18
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fde7 	bl	80054b8 <lsm6dsl_read_reg>
 80058ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	7a3b      	ldrb	r3, [r7, #8]
 80058fc:	f362 1386 	bfi	r3, r2, #6, #1
 8005900:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005902:	f107 0208 	add.w	r2, r7, #8
 8005906:	2301      	movs	r3, #1
 8005908:	2112      	movs	r1, #18
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fdec 	bl	80054e8 <lsm6dsl_write_reg>
 8005910:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005912:	68fb      	ldr	r3, [r7, #12]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005926:	f107 020c 	add.w	r2, r7, #12
 800592a:	2306      	movs	r3, #6
 800592c:	2122      	movs	r1, #34	; 0x22
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fdc2 	bl	80054b8 <lsm6dsl_read_reg>
 8005934:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005936:	7b7b      	ldrb	r3, [r7, #13]
 8005938:	b21a      	sxth	r2, r3
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005944:	b29b      	uxth	r3, r3
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b29a      	uxth	r2, r3
 800594a:	7b3b      	ldrb	r3, [r7, #12]
 800594c:	b29b      	uxth	r3, r3
 800594e:	4413      	add	r3, r2
 8005950:	b29b      	uxth	r3, r3
 8005952:	b21a      	sxth	r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005958:	7bfa      	ldrb	r2, [r7, #15]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3302      	adds	r3, #2
 800595e:	b212      	sxth	r2, r2
 8005960:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	3302      	adds	r3, #2
 8005966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800596a:	b29b      	uxth	r3, r3
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	b29a      	uxth	r2, r3
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	b29b      	uxth	r3, r3
 8005974:	4413      	add	r3, r2
 8005976:	b29a      	uxth	r2, r3
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	3302      	adds	r3, #2
 800597c:	b212      	sxth	r2, r2
 800597e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005980:	7c7a      	ldrb	r2, [r7, #17]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	3304      	adds	r3, #4
 8005986:	b212      	sxth	r2, r2
 8005988:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	3304      	adds	r3, #4
 800598e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005992:	b29b      	uxth	r3, r3
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	b29a      	uxth	r2, r3
 8005998:	7c3b      	ldrb	r3, [r7, #16]
 800599a:	b29b      	uxth	r3, r3
 800599c:	4413      	add	r3, r2
 800599e:	b29a      	uxth	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	3304      	adds	r3, #4
 80059a4:	b212      	sxth	r2, r2
 80059a6:	801a      	strh	r2, [r3, #0]
  return ret;
 80059a8:	697b      	ldr	r3, [r7, #20]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b086      	sub	sp, #24
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80059bc:	f107 020c 	add.w	r2, r7, #12
 80059c0:	2306      	movs	r3, #6
 80059c2:	2128      	movs	r1, #40	; 0x28
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fd77 	bl	80054b8 <lsm6dsl_read_reg>
 80059ca:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80059cc:	7b7b      	ldrb	r3, [r7, #13]
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	b29a      	uxth	r2, r3
 80059e0:	7b3b      	ldrb	r3, [r7, #12]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	3302      	adds	r3, #2
 80059f4:	b212      	sxth	r2, r2
 80059f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	3302      	adds	r3, #2
 80059fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	3302      	adds	r3, #2
 8005a12:	b212      	sxth	r2, r2
 8005a14:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005a16:	7c7a      	ldrb	r2, [r7, #17]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	b212      	sxth	r2, r2
 8005a1e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	3304      	adds	r3, #4
 8005a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	7c3b      	ldrb	r3, [r7, #16]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	b212      	sxth	r2, r2
 8005a3c:	801a      	strh	r2, [r3, #0]
  return ret;
 8005a3e:	697b      	ldr	r3, [r7, #20]
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005a52:	2301      	movs	r3, #1
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	210f      	movs	r1, #15
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff fd2d 	bl	80054b8 <lsm6dsl_read_reg>
 8005a5e:	60f8      	str	r0, [r7, #12]
  return ret;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a76:	f107 0208 	add.w	r2, r7, #8
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	2112      	movs	r1, #18
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff fd1a 	bl	80054b8 <lsm6dsl_read_reg>
 8005a84:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10f      	bne.n	8005aac <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	7a3b      	ldrb	r3, [r7, #8]
 8005a96:	f362 0382 	bfi	r3, r2, #2, #1
 8005a9a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005a9c:	f107 0208 	add.w	r2, r7, #8
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	2112      	movs	r1, #18
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff fd1f 	bl	80054e8 <lsm6dsl_write_reg>
 8005aaa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005aac:	68fb      	ldr	r3, [r7, #12]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005ac2:	f107 0208 	add.w	r2, r7, #8
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	210a      	movs	r1, #10
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fcf4 	bl	80054b8 <lsm6dsl_read_reg>
 8005ad0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10f      	bne.n	8005af8 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	7a3b      	ldrb	r3, [r7, #8]
 8005ae2:	f362 0302 	bfi	r3, r2, #0, #3
 8005ae6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005ae8:	f107 0208 	add.w	r2, r7, #8
 8005aec:	2301      	movs	r3, #1
 8005aee:	210a      	movs	r1, #10
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fcf9 	bl	80054e8 <lsm6dsl_write_reg>
 8005af6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005af8:	68fb      	ldr	r3, [r7, #12]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	; 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005b12:	2301      	movs	r3, #1
 8005b14:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d06e      	beq.n	8005bfe <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	f200 809d 	bhi.w	8005c62 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d032      	beq.n	8005b9a <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005b34:	e095      	b.n	8005c62 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b36:	6838      	ldr	r0, [r7, #0]
 8005b38:	f000 f9f0 	bl	8005f1c <LSM6DSL_0_Probe>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	e0cc      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b48:	4a68      	ldr	r2, [pc, #416]	; (8005cec <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	4967      	ldr	r1, [pc, #412]	; (8005cf0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b5a:	f107 010c 	add.w	r1, r7, #12
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4798      	blx	r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d002      	beq.n	8005b6e <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b68:	f06f 0306 	mvn.w	r3, #6
 8005b6c:	e0b9      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b6e:	7b3b      	ldrb	r3, [r7, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d103      	bne.n	8005b7c <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	f043 0302 	orr.w	r3, r3, #2
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b7c:	7b7b      	ldrb	r3, [r7, #13]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d103      	bne.n	8005b8a <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d16c      	bne.n	8005c6a <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	f043 0304 	orr.w	r3, r3, #4
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b98:	e067      	b.n	8005c6a <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b9a:	6838      	ldr	r0, [r7, #0]
 8005b9c:	f000 fa7a 	bl	8006094 <LSM303AGR_ACC_0_Probe>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	e09a      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bac:	4a4f      	ldr	r2, [pc, #316]	; (8005cec <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	494e      	ldr	r1, [pc, #312]	; (8005cf0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bbe:	f107 010c 	add.w	r1, r7, #12
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4798      	blx	r3
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005bcc:	f06f 0306 	mvn.w	r3, #6
 8005bd0:	e087      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005bd2:	7b3b      	ldrb	r3, [r7, #12]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d103      	bne.n	8005be0 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	f043 0302 	orr.w	r3, r3, #2
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005be0:	7b7b      	ldrb	r3, [r7, #13]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d103      	bne.n	8005bee <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d13c      	bne.n	8005c6e <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	f043 0304 	orr.w	r3, r3, #4
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005bfc:	e037      	b.n	8005c6e <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005bfe:	6838      	ldr	r0, [r7, #0]
 8005c00:	f000 faec 	bl	80061dc <LSM303AGR_MAG_0_Probe>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e068      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005c10:	4a36      	ldr	r2, [pc, #216]	; (8005cec <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	4935      	ldr	r1, [pc, #212]	; (8005cf0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c22:	f107 010c 	add.w	r1, r7, #12
 8005c26:	4610      	mov	r0, r2
 8005c28:	4798      	blx	r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d002      	beq.n	8005c36 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c30:	f06f 0306 	mvn.w	r3, #6
 8005c34:	e055      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005c36:	7b3b      	ldrb	r3, [r7, #12]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d103      	bne.n	8005c44 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c44:	7b7b      	ldrb	r3, [r7, #13]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d103      	bne.n	8005c52 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d10c      	bne.n	8005c72 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	f043 0304 	orr.w	r3, r3, #4
 8005c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c60:	e007      	b.n	8005c72 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005c62:	f06f 0301 	mvn.w	r3, #1
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005c68:	e004      	b.n	8005c74 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005c72:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7c:	e031      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005c7e:	2300      	movs	r3, #0
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c82:	e02a      	b.n	8005cda <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	4013      	ands	r3, r2
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d11e      	bne.n	8005cce <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	4013      	ands	r3, r2
 8005c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d118      	bne.n	8005cce <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ca4:	4814      	ldr	r0, [pc, #80]	; (8005cf8 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4413      	add	r3, r2
 8005cae:	440b      	add	r3, r1
 8005cb0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	490e      	ldr	r1, [pc, #56]	; (8005cf0 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005cc8:	f06f 0304 	mvn.w	r3, #4
 8005ccc:	e009      	b.n	8005ce2 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d9d1      	bls.n	8005c84 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3738      	adds	r7, #56	; 0x38
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20001110 	.word	0x20001110
 8005cf0:	200014f4 	.word	0x200014f4
 8005cf4:	200000d0 	.word	0x200000d0
 8005cf8:	200010ec 	.word	0x200010ec

08005cfc <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d903      	bls.n	8005d14 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d0c:	f06f 0301 	mvn.w	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e028      	b.n	8005d66 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d14:	4a16      	ldr	r2, [pc, #88]	; (8005d70 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d11c      	bne.n	8005d60 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d2e:	4812      	ldr	r0, [pc, #72]	; (8005d78 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	440b      	add	r3, r1
 8005d3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	490e      	ldr	r1, [pc, #56]	; (8005d7c <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4798      	blx	r3
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d52:	f06f 0304 	mvn.w	r3, #4
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e005      	b.n	8005d66 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e002      	b.n	8005d66 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d60:	f06f 0301 	mvn.w	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005d66:	68fb      	ldr	r3, [r7, #12]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	2000111c 	.word	0x2000111c
 8005d74:	200000d0 	.word	0x200000d0
 8005d78:	200010ec 	.word	0x200010ec
 8005d7c:	200014f4 	.word	0x200014f4

08005d80 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d903      	bls.n	8005d9a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d92:	f06f 0301 	mvn.w	r3, #1
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e029      	b.n	8005dee <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d11d      	bne.n	8005de8 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005db4:	4812      	ldr	r0, [pc, #72]	; (8005e00 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4613      	mov	r3, r2
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	4413      	add	r3, r2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	490f      	ldr	r1, [pc, #60]	; (8005e04 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dda:	f06f 0304 	mvn.w	r3, #4
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e005      	b.n	8005dee <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e002      	b.n	8005dee <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005de8:	f06f 0301 	mvn.w	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005dee:	697b      	ldr	r3, [r7, #20]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	2000111c 	.word	0x2000111c
 8005dfc:	200000d0 	.word	0x200000d0
 8005e00:	200010ec 	.word	0x200010ec
 8005e04:	200014f4 	.word	0x200014f4

08005e08 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d903      	bls.n	8005e24 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e1c:	f06f 0301 	mvn.w	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e02a      	b.n	8005e7a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e24:	4a17      	ldr	r2, [pc, #92]	; (8005e84 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d11e      	bne.n	8005e74 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005e36:	4a14      	ldr	r2, [pc, #80]	; (8005e88 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e3e:	4813      	ldr	r0, [pc, #76]	; (8005e8c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	490f      	ldr	r1, [pc, #60]	; (8005e90 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e58:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e66:	f06f 0304 	mvn.w	r3, #4
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e005      	b.n	8005e7a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e002      	b.n	8005e7a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005e74:	f06f 0301 	mvn.w	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005e7a:	697b      	ldr	r3, [r7, #20]
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2000111c 	.word	0x2000111c
 8005e88:	200000d0 	.word	0x200000d0
 8005e8c:	200010ec 	.word	0x200010ec
 8005e90:	200014f4 	.word	0x200014f4

08005e94 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d903      	bls.n	8005eae <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ea6:	f06f 0301 	mvn.w	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e029      	b.n	8005f02 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005eae:	4a17      	ldr	r2, [pc, #92]	; (8005f0c <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d11d      	bne.n	8005efc <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005ec0:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ec8:	4812      	ldr	r0, [pc, #72]	; (8005f14 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	490f      	ldr	r1, [pc, #60]	; (8005f18 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4798      	blx	r3
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005eee:	f06f 0304 	mvn.w	r3, #4
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e005      	b.n	8005f02 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e002      	b.n	8005f02 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005efc:	f06f 0301 	mvn.w	r3, #1
 8005f00:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005f02:	697b      	ldr	r3, [r7, #20]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	2000111c 	.word	0x2000111c
 8005f10:	200000d0 	.word	0x200000d0
 8005f14:	200010ec 	.word	0x200010ec
 8005f18:	200014f4 	.word	0x200014f4

08005f1c <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b092      	sub	sp, #72	; 0x48
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005f28:	2300      	movs	r3, #0
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005f2c:	23d7      	movs	r3, #215	; 0xd7
 8005f2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005f32:	4b4a      	ldr	r3, [pc, #296]	; (800605c <LSM6DSL_0_Probe+0x140>)
 8005f34:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005f36:	4b4a      	ldr	r3, [pc, #296]	; (8006060 <LSM6DSL_0_Probe+0x144>)
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005f3a:	4b4a      	ldr	r3, [pc, #296]	; (8006064 <LSM6DSL_0_Probe+0x148>)
 8005f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005f3e:	4b4a      	ldr	r3, [pc, #296]	; (8006068 <LSM6DSL_0_Probe+0x14c>)
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005f42:	4b4a      	ldr	r3, [pc, #296]	; (800606c <LSM6DSL_0_Probe+0x150>)
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4848      	ldr	r0, [pc, #288]	; (8006070 <LSM6DSL_0_Probe+0x154>)
 8005f4e:	f7fe fac3 	bl	80044d8 <LSM6DSL_RegisterBusIO>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f58:	f06f 0306 	mvn.w	r3, #6
 8005f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5e:	e077      	b.n	8006050 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005f60:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f64:	4619      	mov	r1, r3
 8005f66:	4842      	ldr	r0, [pc, #264]	; (8006070 <LSM6DSL_0_Probe+0x154>)
 8005f68:	f7fe fbac 	bl	80046c4 <LSM6DSL_ReadID>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f72:	f06f 0306 	mvn.w	r3, #6
 8005f76:	647b      	str	r3, [r7, #68]	; 0x44
 8005f78:	e06a      	b.n	8006050 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7e:	2b6a      	cmp	r3, #106	; 0x6a
 8005f80:	d003      	beq.n	8005f8a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f82:	f06f 0306 	mvn.w	r3, #6
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	e062      	b.n	8006050 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005f8a:	f107 0308 	add.w	r3, r7, #8
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4837      	ldr	r0, [pc, #220]	; (8006070 <LSM6DSL_0_Probe+0x154>)
 8005f92:	f7fe fbad 	bl	80046f0 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005f96:	7a7b      	ldrb	r3, [r7, #9]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	7a3b      	ldrb	r3, [r7, #8]
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	7abb      	ldrb	r3, [r7, #10]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a33      	ldr	r2, [pc, #204]	; (8006074 <LSM6DSL_0_Probe+0x158>)
 8005fa8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005faa:	4b33      	ldr	r3, [pc, #204]	; (8006078 <LSM6DSL_0_Probe+0x15c>)
 8005fac:	4a30      	ldr	r2, [pc, #192]	; (8006070 <LSM6DSL_0_Probe+0x154>)
 8005fae:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005fb0:	4b32      	ldr	r3, [pc, #200]	; (800607c <LSM6DSL_0_Probe+0x160>)
 8005fb2:	4a33      	ldr	r2, [pc, #204]	; (8006080 <LSM6DSL_0_Probe+0x164>)
 8005fb4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d11d      	bne.n	8005ff8 <LSM6DSL_0_Probe+0xdc>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d018      	beq.n	8005ff8 <LSM6DSL_0_Probe+0xdc>
 8005fc6:	7a7b      	ldrb	r3, [r7, #9]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d115      	bne.n	8005ff8 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005fcc:	4b2d      	ldr	r3, [pc, #180]	; (8006084 <LSM6DSL_0_Probe+0x168>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <LSM6DSL_0_Probe+0x16c>)
 8005fd2:	492e      	ldr	r1, [pc, #184]	; (800608c <LSM6DSL_0_Probe+0x170>)
 8005fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005fd8:	4b28      	ldr	r3, [pc, #160]	; (800607c <LSM6DSL_0_Probe+0x160>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a26      	ldr	r2, [pc, #152]	; (8006078 <LSM6DSL_0_Probe+0x15c>)
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4798      	blx	r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fec:	f06f 0304 	mvn.w	r3, #4
 8005ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff2:	e001      	b.n	8005ff8 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11d      	bne.n	800603a <LSM6DSL_0_Probe+0x11e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d018      	beq.n	800603a <LSM6DSL_0_Probe+0x11e>
 8006008:	7a3b      	ldrb	r3, [r7, #8]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d115      	bne.n	800603a <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800600e:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <LSM6DSL_0_Probe+0x168>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	4a1d      	ldr	r2, [pc, #116]	; (8006088 <LSM6DSL_0_Probe+0x16c>)
 8006014:	491e      	ldr	r1, [pc, #120]	; (8006090 <LSM6DSL_0_Probe+0x174>)
 8006016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800601a:	4b18      	ldr	r3, [pc, #96]	; (800607c <LSM6DSL_0_Probe+0x160>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <LSM6DSL_0_Probe+0x15c>)
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	4610      	mov	r0, r2
 8006026:	4798      	blx	r3
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800602e:	f06f 0304 	mvn.w	r3, #4
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	e001      	b.n	800603a <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006036:	2300      	movs	r3, #0
 8006038:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800603a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800603c:	2b00      	cmp	r3, #0
 800603e:	d107      	bne.n	8006050 <LSM6DSL_0_Probe+0x134>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800604a:	f06f 0304 	mvn.w	r3, #4
 800604e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8006050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006052:	4618      	mov	r0, r3
 8006054:	3748      	adds	r7, #72	; 0x48
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	0800273d 	.word	0x0800273d
 8006060:	080027b9 	.word	0x080027b9
 8006064:	0800286d 	.word	0x0800286d
 8006068:	08002809 	.word	0x08002809
 800606c:	080028d1 	.word	0x080028d1
 8006070:	20001128 	.word	0x20001128
 8006074:	2000111c 	.word	0x2000111c
 8006078:	200014f4 	.word	0x200014f4
 800607c:	20001110 	.word	0x20001110
 8006080:	20000078 	.word	0x20000078
 8006084:	200000d0 	.word	0x200000d0
 8006088:	200010ec 	.word	0x200010ec
 800608c:	200000ac 	.word	0x200000ac
 8006090:	20000088 	.word	0x20000088

08006094 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b092      	sub	sp, #72	; 0x48
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800609c:	2300      	movs	r3, #0
 800609e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80060a0:	2300      	movs	r3, #0
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 80060a4:	2333      	movs	r3, #51	; 0x33
 80060a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80060aa:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <LSM303AGR_ACC_0_Probe+0x114>)
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80060ae:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <LSM303AGR_ACC_0_Probe+0x118>)
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80060b2:	4b3f      	ldr	r3, [pc, #252]	; (80061b0 <LSM303AGR_ACC_0_Probe+0x11c>)
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80060b6:	4b3f      	ldr	r3, [pc, #252]	; (80061b4 <LSM303AGR_ACC_0_Probe+0x120>)
 80060b8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80060ba:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <LSM303AGR_ACC_0_Probe+0x124>)
 80060bc:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 80060be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060c2:	4619      	mov	r1, r3
 80060c4:	483d      	ldr	r0, [pc, #244]	; (80061bc <LSM303AGR_ACC_0_Probe+0x128>)
 80060c6:	f7fc fe51 	bl	8002d6c <LSM303AGR_ACC_RegisterBusIO>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060d0:	f06f 0306 	mvn.w	r3, #6
 80060d4:	647b      	str	r3, [r7, #68]	; 0x44
 80060d6:	e062      	b.n	800619e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 80060d8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80060dc:	4619      	mov	r1, r3
 80060de:	4837      	ldr	r0, [pc, #220]	; (80061bc <LSM303AGR_ACC_0_Probe+0x128>)
 80060e0:	f7fc ff05 	bl	8002eee <LSM303AGR_ACC_ReadID>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060ea:	f06f 0306 	mvn.w	r3, #6
 80060ee:	647b      	str	r3, [r7, #68]	; 0x44
 80060f0:	e055      	b.n	800619e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80060f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f6:	2b33      	cmp	r3, #51	; 0x33
 80060f8:	d003      	beq.n	8006102 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060fa:	f06f 0306 	mvn.w	r3, #6
 80060fe:	647b      	str	r3, [r7, #68]	; 0x44
 8006100:	e04d      	b.n	800619e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4619      	mov	r1, r3
 8006108:	482c      	ldr	r0, [pc, #176]	; (80061bc <LSM303AGR_ACC_0_Probe+0x128>)
 800610a:	f7fc ff07 	bl	8002f1c <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800610e:	7a7b      	ldrb	r3, [r7, #9]
 8006110:	461a      	mov	r2, r3
 8006112:	7a3b      	ldrb	r3, [r7, #8]
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006118:	7abb      	ldrb	r3, [r7, #10]
 800611a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800611c:	4313      	orrs	r3, r2
 800611e:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <LSM303AGR_ACC_0_Probe+0x12c>)
 8006120:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <LSM303AGR_ACC_0_Probe+0x130>)
 8006124:	4a25      	ldr	r2, [pc, #148]	; (80061bc <LSM303AGR_ACC_0_Probe+0x128>)
 8006126:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8006128:	4b27      	ldr	r3, [pc, #156]	; (80061c8 <LSM303AGR_ACC_0_Probe+0x134>)
 800612a:	4a28      	ldr	r2, [pc, #160]	; (80061cc <LSM303AGR_ACC_0_Probe+0x138>)
 800612c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800612e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11e      	bne.n	8006172 <LSM303AGR_ACC_0_Probe+0xde>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d019      	beq.n	8006172 <LSM303AGR_ACC_0_Probe+0xde>
 800613e:	7a3b      	ldrb	r3, [r7, #8]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d116      	bne.n	8006172 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006144:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <LSM303AGR_ACC_0_Probe+0x13c>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <LSM303AGR_ACC_0_Probe+0x140>)
 800614a:	3303      	adds	r3, #3
 800614c:	4922      	ldr	r1, [pc, #136]	; (80061d8 <LSM303AGR_ACC_0_Probe+0x144>)
 800614e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8006152:	4b1d      	ldr	r3, [pc, #116]	; (80061c8 <LSM303AGR_ACC_0_Probe+0x134>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <LSM303AGR_ACC_0_Probe+0x130>)
 800615a:	6852      	ldr	r2, [r2, #4]
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006166:	f06f 0304 	mvn.w	r3, #4
 800616a:	647b      	str	r3, [r7, #68]	; 0x44
 800616c:	e001      	b.n	8006172 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800616e:	2300      	movs	r3, #0
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006174:	2b00      	cmp	r3, #0
 8006176:	d107      	bne.n	8006188 <LSM303AGR_ACC_0_Probe+0xf4>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006182:	f06f 0304 	mvn.w	r3, #4
 8006186:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618a:	2b00      	cmp	r3, #0
 800618c:	d107      	bne.n	800619e <LSM303AGR_ACC_0_Probe+0x10a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006198:	f06f 0304 	mvn.w	r3, #4
 800619c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800619e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3748      	adds	r7, #72	; 0x48
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	0800273d 	.word	0x0800273d
 80061ac:	080027b9 	.word	0x080027b9
 80061b0:	0800286d 	.word	0x0800286d
 80061b4:	08002809 	.word	0x08002809
 80061b8:	080028d1 	.word	0x080028d1
 80061bc:	20001158 	.word	0x20001158
 80061c0:	2000111c 	.word	0x2000111c
 80061c4:	200014f4 	.word	0x200014f4
 80061c8:	20001110 	.word	0x20001110
 80061cc:	20000010 	.word	0x20000010
 80061d0:	200000d0 	.word	0x200000d0
 80061d4:	200010ec 	.word	0x200010ec
 80061d8:	20000020 	.word	0x20000020

080061dc <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b092      	sub	sp, #72	; 0x48
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80061e4:	2300      	movs	r3, #0
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80061e8:	2300      	movs	r3, #0
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 80061ec:	233d      	movs	r3, #61	; 0x3d
 80061ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80061f2:	4b3f      	ldr	r3, [pc, #252]	; (80062f0 <LSM303AGR_MAG_0_Probe+0x114>)
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80061f6:	4b3f      	ldr	r3, [pc, #252]	; (80062f4 <LSM303AGR_MAG_0_Probe+0x118>)
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80061fa:	4b3f      	ldr	r3, [pc, #252]	; (80062f8 <LSM303AGR_MAG_0_Probe+0x11c>)
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80061fe:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <LSM303AGR_MAG_0_Probe+0x120>)
 8006200:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006202:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <LSM303AGR_MAG_0_Probe+0x124>)
 8006204:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8006206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800620a:	4619      	mov	r1, r3
 800620c:	483d      	ldr	r0, [pc, #244]	; (8006304 <LSM303AGR_MAG_0_Probe+0x128>)
 800620e:	f7fd f973 	bl	80034f8 <LSM303AGR_MAG_RegisterBusIO>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006218:	f06f 0306 	mvn.w	r3, #6
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
 800621e:	e062      	b.n	80062e6 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8006220:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006224:	4619      	mov	r1, r3
 8006226:	4837      	ldr	r0, [pc, #220]	; (8006304 <LSM303AGR_MAG_0_Probe+0x128>)
 8006228:	f7fd fa1d 	bl	8003666 <LSM303AGR_MAG_ReadID>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006232:	f06f 0306 	mvn.w	r3, #6
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
 8006238:	e055      	b.n	80062e6 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800623a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d003      	beq.n	800624a <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006242:	f06f 0306 	mvn.w	r3, #6
 8006246:	647b      	str	r3, [r7, #68]	; 0x44
 8006248:	e04d      	b.n	80062e6 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4619      	mov	r1, r3
 8006250:	482c      	ldr	r0, [pc, #176]	; (8006304 <LSM303AGR_MAG_0_Probe+0x128>)
 8006252:	f7fd fa1f 	bl	8003694 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006256:	7a7b      	ldrb	r3, [r7, #9]
 8006258:	461a      	mov	r2, r3
 800625a:	7a3b      	ldrb	r3, [r7, #8]
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006260:	7abb      	ldrb	r3, [r7, #10]
 8006262:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8006264:	4313      	orrs	r3, r2
 8006266:	4a28      	ldr	r2, [pc, #160]	; (8006308 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006268:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800626a:	4b28      	ldr	r3, [pc, #160]	; (800630c <LSM303AGR_MAG_0_Probe+0x130>)
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <LSM303AGR_MAG_0_Probe+0x128>)
 800626e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006270:	4b27      	ldr	r3, [pc, #156]	; (8006310 <LSM303AGR_MAG_0_Probe+0x134>)
 8006272:	4a28      	ldr	r2, [pc, #160]	; (8006314 <LSM303AGR_MAG_0_Probe+0x138>)
 8006274:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8006276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006278:	2b00      	cmp	r3, #0
 800627a:	d11e      	bne.n	80062ba <LSM303AGR_MAG_0_Probe+0xde>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d019      	beq.n	80062ba <LSM303AGR_MAG_0_Probe+0xde>
 8006286:	7abb      	ldrb	r3, [r7, #10]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d116      	bne.n	80062ba <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <LSM303AGR_MAG_0_Probe+0x13c>)
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	4a22      	ldr	r2, [pc, #136]	; (800631c <LSM303AGR_MAG_0_Probe+0x140>)
 8006292:	3306      	adds	r3, #6
 8006294:	4922      	ldr	r1, [pc, #136]	; (8006320 <LSM303AGR_MAG_0_Probe+0x144>)
 8006296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800629a:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <LSM303AGR_MAG_0_Probe+0x134>)
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1a      	ldr	r2, [pc, #104]	; (800630c <LSM303AGR_MAG_0_Probe+0x130>)
 80062a2:	6892      	ldr	r2, [r2, #8]
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062ae:	f06f 0304 	mvn.w	r3, #4
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	e001      	b.n	80062ba <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80062b6:	2300      	movs	r3, #0
 80062b8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80062ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <LSM303AGR_MAG_0_Probe+0xf4>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80062ca:	f06f 0304 	mvn.w	r3, #4
 80062ce:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80062d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d107      	bne.n	80062e6 <LSM303AGR_MAG_0_Probe+0x10a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80062e0:	f06f 0304 	mvn.w	r3, #4
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80062e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3748      	adds	r7, #72	; 0x48
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	0800273d 	.word	0x0800273d
 80062f4:	080027b9 	.word	0x080027b9
 80062f8:	0800286d 	.word	0x0800286d
 80062fc:	08002809 	.word	0x08002809
 8006300:	080028d1 	.word	0x080028d1
 8006304:	20001184 	.word	0x20001184
 8006308:	2000111c 	.word	0x2000111c
 800630c:	200014f4 	.word	0x200014f4
 8006310:	20001110 	.word	0x20001110
 8006314:	20000044 	.word	0x20000044
 8006318:	200000d0 	.word	0x200000d0
 800631c:	200010ec 	.word	0x200010ec
 8006320:	20000054 	.word	0x20000054

08006324 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d903      	bls.n	8006340 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006338:	f06f 0301 	mvn.w	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e025      	b.n	800638c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	79fa      	ldrb	r2, [r7, #7]
 8006344:	4914      	ldr	r1, [pc, #80]	; (8006398 <BSP_COM_Init+0x74>)
 8006346:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800634a:	4814      	ldr	r0, [pc, #80]	; (800639c <BSP_COM_Init+0x78>)
 800634c:	4613      	mov	r3, r2
 800634e:	015b      	lsls	r3, r3, #5
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4403      	add	r3, r0
 8006356:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8006358:	79fa      	ldrb	r2, [r7, #7]
 800635a:	4613      	mov	r3, r2
 800635c:	015b      	lsls	r3, r3, #5
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <BSP_COM_Init+0x78>)
 8006364:	4413      	add	r3, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f86a 	bl	8006440 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800636c:	79fa      	ldrb	r2, [r7, #7]
 800636e:	4613      	mov	r3, r2
 8006370:	015b      	lsls	r3, r3, #5
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4a09      	ldr	r2, [pc, #36]	; (800639c <BSP_COM_Init+0x78>)
 8006378:	4413      	add	r3, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f000 f810 	bl	80063a0 <MX_USART2_UART_Init>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006386:	f06f 0303 	mvn.w	r3, #3
 800638a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800638c:	68fb      	ldr	r3, [r7, #12]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	200000e4 	.word	0x200000e4
 800639c:	20001548 	.word	0x20001548

080063a0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063a8:	2300      	movs	r3, #0
 80063aa:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <MX_USART2_UART_Init+0x64>)
 80063b0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80063b8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	220c      	movs	r2, #12
 80063d0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f004 f854 	bl	800a498 <HAL_UART_Init>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3710      	adds	r7, #16
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40004400 	.word	0x40004400

08006408 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <__io_putchar+0x30>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	4613      	mov	r3, r2
 8006418:	015b      	lsls	r3, r3, #5
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4a07      	ldr	r2, [pc, #28]	; (800643c <__io_putchar+0x34>)
 8006420:	1898      	adds	r0, r3, r2
 8006422:	1d39      	adds	r1, r7, #4
 8006424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006428:	2201      	movs	r2, #1
 800642a:	f004 f88d 	bl	800a548 <HAL_UART_Transmit>
  return ch;
 800642e:	687b      	ldr	r3, [r7, #4]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	200011b0 	.word	0x200011b0
 800643c:	20001548 	.word	0x20001548

08006440 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006448:	4b30      	ldr	r3, [pc, #192]	; (800650c <USART2_MspInit+0xcc>)
 800644a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644c:	4a2f      	ldr	r2, [pc, #188]	; (800650c <USART2_MspInit+0xcc>)
 800644e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006452:	6593      	str	r3, [r2, #88]	; 0x58
 8006454:	4b2d      	ldr	r3, [pc, #180]	; (800650c <USART2_MspInit+0xcc>)
 8006456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006460:	4b2a      	ldr	r3, [pc, #168]	; (800650c <USART2_MspInit+0xcc>)
 8006462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006464:	4a29      	ldr	r2, [pc, #164]	; (800650c <USART2_MspInit+0xcc>)
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800646c:	4b27      	ldr	r3, [pc, #156]	; (800650c <USART2_MspInit+0xcc>)
 800646e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006478:	2304      	movs	r3, #4
 800647a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800647c:	2302      	movs	r3, #2
 800647e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006484:	2303      	movs	r3, #3
 8006486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006488:	2307      	movs	r3, #7
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800648c:	f107 0314 	add.w	r3, r7, #20
 8006490:	4619      	mov	r1, r3
 8006492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006496:	f000 fcaf 	bl	8006df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800649a:	2308      	movs	r3, #8
 800649c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a6:	2303      	movs	r3, #3
 80064a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80064aa:	2307      	movs	r3, #7
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80064ae:	f107 0314 	add.w	r3, r7, #20
 80064b2:	4619      	mov	r1, r3
 80064b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064b8:	f000 fc9e 	bl	8006df8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 80064bc:	4b14      	ldr	r3, [pc, #80]	; (8006510 <USART2_MspInit+0xd0>)
 80064be:	4a15      	ldr	r2, [pc, #84]	; (8006514 <USART2_MspInit+0xd4>)
 80064c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80064c2:	4b13      	ldr	r3, [pc, #76]	; (8006510 <USART2_MspInit+0xd0>)
 80064c4:	2202      	movs	r2, #2
 80064c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064c8:	4b11      	ldr	r3, [pc, #68]	; (8006510 <USART2_MspInit+0xd0>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ce:	4b10      	ldr	r3, [pc, #64]	; (8006510 <USART2_MspInit+0xd0>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064d4:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <USART2_MspInit+0xd0>)
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064da:	4b0d      	ldr	r3, [pc, #52]	; (8006510 <USART2_MspInit+0xd0>)
 80064dc:	2200      	movs	r2, #0
 80064de:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <USART2_MspInit+0xd0>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <USART2_MspInit+0xd0>)
 80064e8:	2220      	movs	r2, #32
 80064ea:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064ec:	4b08      	ldr	r3, [pc, #32]	; (8006510 <USART2_MspInit+0xd0>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 80064f2:	4807      	ldr	r0, [pc, #28]	; (8006510 <USART2_MspInit+0xd0>)
 80064f4:	f000 fa88 	bl	8006a08 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a05      	ldr	r2, [pc, #20]	; (8006510 <USART2_MspInit+0xd0>)
 80064fc:	671a      	str	r2, [r3, #112]	; 0x70
 80064fe:	4a04      	ldr	r2, [pc, #16]	; (8006510 <USART2_MspInit+0xd0>)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8006504:	bf00      	nop
 8006506:	3728      	adds	r7, #40	; 0x28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40021000 	.word	0x40021000
 8006510:	20001500 	.word	0x20001500
 8006514:	4002006c 	.word	0x4002006c

08006518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <HAL_Init+0x3c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a0b      	ldr	r2, [pc, #44]	; (8006554 <HAL_Init+0x3c>)
 8006528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800652e:	2003      	movs	r0, #3
 8006530:	f000 f93e 	bl	80067b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006534:	2000      	movs	r0, #0
 8006536:	f000 f80f 	bl	8006558 <HAL_InitTick>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	71fb      	strb	r3, [r7, #7]
 8006544:	e001      	b.n	800654a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006546:	f7fc f885 	bl	8002654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800654a:	79fb      	ldrb	r3, [r7, #7]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40022000 	.word	0x40022000

08006558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <HAL_InitTick+0x6c>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d023      	beq.n	80065b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <HAL_InitTick+0x70>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <HAL_InitTick+0x6c>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	4619      	mov	r1, r3
 8006576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800657a:	fbb3 f3f1 	udiv	r3, r3, r1
 800657e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f949 	bl	800681a <HAL_SYSTICK_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d809      	bhi.n	80065a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006594:	2200      	movs	r2, #0
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	f000 f913 	bl	80067c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <HAL_InitTick+0x74>)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e007      	b.n	80065b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
 80065ac:	e004      	b.n	80065b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	73fb      	strb	r3, [r7, #15]
 80065b2:	e001      	b.n	80065b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200000ec 	.word	0x200000ec
 80065c8:	2000000c 	.word	0x2000000c
 80065cc:	200000e8 	.word	0x200000e8

080065d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80065d4:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <HAL_IncTick+0x20>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <HAL_IncTick+0x24>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4413      	add	r3, r2
 80065e0:	4a04      	ldr	r2, [pc, #16]	; (80065f4 <HAL_IncTick+0x24>)
 80065e2:	6013      	str	r3, [r2, #0]
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	200000ec 	.word	0x200000ec
 80065f4:	200015cc 	.word	0x200015cc

080065f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return uwTick;
 80065fc:	4b03      	ldr	r3, [pc, #12]	; (800660c <HAL_GetTick+0x14>)
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	4618      	mov	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	200015cc 	.word	0x200015cc

08006610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <__NVIC_SetPriorityGrouping+0x44>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006642:	4a04      	ldr	r2, [pc, #16]	; (8006654 <__NVIC_SetPriorityGrouping+0x44>)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	60d3      	str	r3, [r2, #12]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <__NVIC_GetPriorityGrouping+0x18>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	f003 0307 	and.w	r3, r3, #7
}
 8006666:	4618      	mov	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800667e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006682:	2b00      	cmp	r3, #0
 8006684:	db0b      	blt.n	800669e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	f003 021f 	and.w	r2, r3, #31
 800668c:	4907      	ldr	r1, [pc, #28]	; (80066ac <__NVIC_EnableIRQ+0x38>)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2001      	movs	r0, #1
 8006696:	fa00 f202 	lsl.w	r2, r0, r2
 800669a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	e000e100 	.word	0xe000e100

080066b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db0a      	blt.n	80066da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	490c      	ldr	r1, [pc, #48]	; (80066fc <__NVIC_SetPriority+0x4c>)
 80066ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	440b      	add	r3, r1
 80066d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066d8:	e00a      	b.n	80066f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	4908      	ldr	r1, [pc, #32]	; (8006700 <__NVIC_SetPriority+0x50>)
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	3b04      	subs	r3, #4
 80066e8:	0112      	lsls	r2, r2, #4
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	440b      	add	r3, r1
 80066ee:	761a      	strb	r2, [r3, #24]
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000e100 	.word	0xe000e100
 8006700:	e000ed00 	.word	0xe000ed00

08006704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	; 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f1c3 0307 	rsb	r3, r3, #7
 800671e:	2b04      	cmp	r3, #4
 8006720:	bf28      	it	cs
 8006722:	2304      	movcs	r3, #4
 8006724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3304      	adds	r3, #4
 800672a:	2b06      	cmp	r3, #6
 800672c:	d902      	bls.n	8006734 <NVIC_EncodePriority+0x30>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3b03      	subs	r3, #3
 8006732:	e000      	b.n	8006736 <NVIC_EncodePriority+0x32>
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006738:	f04f 32ff 	mov.w	r2, #4294967295
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43da      	mvns	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	401a      	ands	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800674c:	f04f 31ff 	mov.w	r1, #4294967295
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	43d9      	mvns	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800675c:	4313      	orrs	r3, r2
         );
}
 800675e:	4618      	mov	r0, r3
 8006760:	3724      	adds	r7, #36	; 0x24
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3b01      	subs	r3, #1
 8006778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800677c:	d301      	bcc.n	8006782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800677e:	2301      	movs	r3, #1
 8006780:	e00f      	b.n	80067a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006782:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <SysTick_Config+0x40>)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3b01      	subs	r3, #1
 8006788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800678a:	210f      	movs	r1, #15
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f7ff ff8e 	bl	80066b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <SysTick_Config+0x40>)
 8006796:	2200      	movs	r2, #0
 8006798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <SysTick_Config+0x40>)
 800679c:	2207      	movs	r2, #7
 800679e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	e000e010 	.word	0xe000e010

080067b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff29 	bl	8006610 <__NVIC_SetPriorityGrouping>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4603      	mov	r3, r0
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067d8:	f7ff ff3e 	bl	8006658 <__NVIC_GetPriorityGrouping>
 80067dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	6978      	ldr	r0, [r7, #20]
 80067e4:	f7ff ff8e 	bl	8006704 <NVIC_EncodePriority>
 80067e8:	4602      	mov	r2, r0
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff ff5d 	bl	80066b0 <__NVIC_SetPriority>
}
 80067f6:	bf00      	nop
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	4603      	mov	r3, r0
 8006806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff31 	bl	8006674 <__NVIC_EnableIRQ>
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff ffa2 	bl	800676c <SysTick_Config>
 8006828:	4603      	mov	r3, r0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e054      	b.n	80068f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7f5b      	ldrb	r3, [r3, #29]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fb faca 	bl	8001df0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	791b      	ldrb	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10c      	bne.n	8006884 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <HAL_CRC_Init+0xc4>)
 8006870:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0218 	bic.w	r2, r2, #24
 8006880:	609a      	str	r2, [r3, #8]
 8006882:	e00c      	b.n	800689e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6899      	ldr	r1, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	461a      	mov	r2, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f834 	bl	80068fc <HAL_CRCEx_Polynomial_Set>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e028      	b.n	80068f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	795b      	ldrb	r3, [r3, #5]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f04f 32ff 	mov.w	r2, #4294967295
 80068ae:	611a      	str	r2, [r3, #16]
 80068b0:	e004      	b.n	80068bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6912      	ldr	r2, [r2, #16]
 80068ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	04c11db7 	.word	0x04c11db7

080068fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800690c:	231f      	movs	r3, #31
 800690e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006910:	bf00      	nop
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1e5a      	subs	r2, r3, #1
 8006916:	613a      	str	r2, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d009      	beq.n	8006930 <HAL_CRCEx_Polynomial_Set+0x34>
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0f0      	beq.n	8006912 <HAL_CRCEx_Polynomial_Set+0x16>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b18      	cmp	r3, #24
 8006934:	d846      	bhi.n	80069c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	080069cb 	.word	0x080069cb
 8006940:	080069c5 	.word	0x080069c5
 8006944:	080069c5 	.word	0x080069c5
 8006948:	080069c5 	.word	0x080069c5
 800694c:	080069c5 	.word	0x080069c5
 8006950:	080069c5 	.word	0x080069c5
 8006954:	080069c5 	.word	0x080069c5
 8006958:	080069c5 	.word	0x080069c5
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069c5 	.word	0x080069c5
 8006964:	080069c5 	.word	0x080069c5
 8006968:	080069c5 	.word	0x080069c5
 800696c:	080069c5 	.word	0x080069c5
 8006970:	080069c5 	.word	0x080069c5
 8006974:	080069c5 	.word	0x080069c5
 8006978:	080069c5 	.word	0x080069c5
 800697c:	080069ad 	.word	0x080069ad
 8006980:	080069c5 	.word	0x080069c5
 8006984:	080069c5 	.word	0x080069c5
 8006988:	080069c5 	.word	0x080069c5
 800698c:	080069c5 	.word	0x080069c5
 8006990:	080069c5 	.word	0x080069c5
 8006994:	080069c5 	.word	0x080069c5
 8006998:	080069c5 	.word	0x080069c5
 800699c:	080069a1 	.word	0x080069a1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d913      	bls.n	80069ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069aa:	e010      	b.n	80069ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b07      	cmp	r3, #7
 80069b0:	d90f      	bls.n	80069d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069b6:	e00c      	b.n	80069d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b0f      	cmp	r3, #15
 80069bc:	d90b      	bls.n	80069d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80069c2:	e008      	b.n	80069d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	75fb      	strb	r3, [r7, #23]
      break;
 80069c8:	e006      	b.n	80069d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069ca:	bf00      	nop
 80069cc:	e004      	b.n	80069d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069ce:	bf00      	nop
 80069d0:	e002      	b.n	80069d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069d2:	bf00      	nop
 80069d4:	e000      	b.n	80069d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80069d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10d      	bne.n	80069fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f023 0118 	bic.w	r1, r3, #24
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e098      	b.n	8006b4c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4b4d      	ldr	r3, [pc, #308]	; (8006b58 <HAL_DMA_Init+0x150>)
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d80f      	bhi.n	8006a46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <HAL_DMA_Init+0x154>)
 8006a2e:	4413      	add	r3, r2
 8006a30:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <HAL_DMA_Init+0x158>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	009a      	lsls	r2, r3, #2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a48      	ldr	r2, [pc, #288]	; (8006b64 <HAL_DMA_Init+0x15c>)
 8006a42:	641a      	str	r2, [r3, #64]	; 0x40
 8006a44:	e00e      	b.n	8006a64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4b46      	ldr	r3, [pc, #280]	; (8006b68 <HAL_DMA_Init+0x160>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	4a43      	ldr	r2, [pc, #268]	; (8006b60 <HAL_DMA_Init+0x158>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	009a      	lsls	r2, r3, #2
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a42      	ldr	r2, [pc, #264]	; (8006b6c <HAL_DMA_Init+0x164>)
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006abe:	d039      	beq.n	8006b34 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	4a27      	ldr	r2, [pc, #156]	; (8006b64 <HAL_DMA_Init+0x15c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d11a      	bne.n	8006b00 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006aca:	4b29      	ldr	r3, [pc, #164]	; (8006b70 <HAL_DMA_Init+0x168>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad2:	f003 031c 	and.w	r3, r3, #28
 8006ad6:	210f      	movs	r1, #15
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	4924      	ldr	r1, [pc, #144]	; (8006b70 <HAL_DMA_Init+0x168>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006ae4:	4b22      	ldr	r3, [pc, #136]	; (8006b70 <HAL_DMA_Init+0x168>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af0:	f003 031c 	and.w	r3, r3, #28
 8006af4:	fa01 f303 	lsl.w	r3, r1, r3
 8006af8:	491d      	ldr	r1, [pc, #116]	; (8006b70 <HAL_DMA_Init+0x168>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]
 8006afe:	e019      	b.n	8006b34 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006b00:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <HAL_DMA_Init+0x16c>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b08:	f003 031c 	and.w	r3, r3, #28
 8006b0c:	210f      	movs	r1, #15
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	43db      	mvns	r3, r3
 8006b14:	4917      	ldr	r1, [pc, #92]	; (8006b74 <HAL_DMA_Init+0x16c>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006b1a:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <HAL_DMA_Init+0x16c>)
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6859      	ldr	r1, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b26:	f003 031c 	and.w	r3, r3, #28
 8006b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2e:	4911      	ldr	r1, [pc, #68]	; (8006b74 <HAL_DMA_Init+0x16c>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40020407 	.word	0x40020407
 8006b5c:	bffdfff8 	.word	0xbffdfff8
 8006b60:	cccccccd 	.word	0xcccccccd
 8006b64:	40020000 	.word	0x40020000
 8006b68:	bffdfbf8 	.word	0xbffdfbf8
 8006b6c:	40020400 	.word	0x40020400
 8006b70:	400200a8 	.word	0x400200a8
 8006b74:	400204a8 	.word	0x400204a8

08006b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_DMA_Start_IT+0x20>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e04b      	b.n	8006c30 <HAL_DMA_Start_IT+0xb8>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d13a      	bne.n	8006c22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f8e0 	bl	8006d96 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d008      	beq.n	8006bf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 020e 	orr.w	r2, r2, #14
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e00f      	b.n	8006c10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 020a 	orr.w	r2, r2, #10
 8006c0e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e005      	b.n	8006c2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c54:	f003 031c 	and.w	r3, r3, #28
 8006c58:	2204      	movs	r2, #4
 8006c5a:	409a      	lsls	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d026      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x7a>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d021      	beq.n	8006cb2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d107      	bne.n	8006c8c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0204 	bic.w	r2, r2, #4
 8006c8a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	f003 021c 	and.w	r2, r3, #28
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	2104      	movs	r1, #4
 8006c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c9e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d071      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006cb0:	e06c      	b.n	8006d8c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f003 031c 	and.w	r3, r3, #28
 8006cba:	2202      	movs	r2, #2
 8006cbc:	409a      	lsls	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d02e      	beq.n	8006d24 <HAL_DMA_IRQHandler+0xec>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d029      	beq.n	8006d24 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 020a 	bic.w	r2, r2, #10
 8006cec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	f003 021c 	and.w	r2, r3, #28
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	2102      	movs	r1, #2
 8006d04:	fa01 f202 	lsl.w	r2, r1, r2
 8006d08:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d038      	beq.n	8006d8c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006d22:	e033      	b.n	8006d8c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d28:	f003 031c 	and.w	r3, r3, #28
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d02a      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x156>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 0308 	and.w	r3, r3, #8
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d025      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 020e 	bic.w	r2, r2, #14
 8006d50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	f003 021c 	and.w	r2, r3, #28
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	2101      	movs	r1, #1
 8006d60:	fa01 f202 	lsl.w	r2, r1, r2
 8006d64:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop
}
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da8:	f003 021c 	and.w	r2, r3, #28
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db0:	2101      	movs	r1, #1
 8006db2:	fa01 f202 	lsl.w	r2, r1, r2
 8006db6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b10      	cmp	r3, #16
 8006dc6:	d108      	bne.n	8006dda <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006dd8:	e007      	b.n	8006dea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]
}
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e02:	2300      	movs	r3, #0
 8006e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e06:	e17f      	b.n	8007108 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	fa01 f303 	lsl.w	r3, r1, r3
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8171 	beq.w	8007102 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d005      	beq.n	8006e38 <HAL_GPIO_Init+0x40>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d130      	bne.n	8006e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	2203      	movs	r2, #3
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e6e:	2201      	movs	r2, #1
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	43db      	mvns	r3, r3
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	f003 0201 	and.w	r2, r3, #1
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d118      	bne.n	8006ed8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006eac:	2201      	movs	r2, #1
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	08db      	lsrs	r3, r3, #3
 8006ec2:	f003 0201 	and.w	r2, r3, #1
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	2b03      	cmp	r3, #3
 8006ee2:	d017      	beq.n	8006f14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	2203      	movs	r2, #3
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d123      	bne.n	8006f68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	08da      	lsrs	r2, r3, #3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3208      	adds	r2, #8
 8006f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	220f      	movs	r2, #15
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4013      	ands	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	691a      	ldr	r2, [r3, #16]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f003 0307 	and.w	r3, r3, #7
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	08da      	lsrs	r2, r3, #3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3208      	adds	r2, #8
 8006f62:	6939      	ldr	r1, [r7, #16]
 8006f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	2203      	movs	r2, #3
 8006f74:	fa02 f303 	lsl.w	r3, r2, r3
 8006f78:	43db      	mvns	r3, r3
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f003 0203 	and.w	r2, r3, #3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80ac 	beq.w	8007102 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006faa:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <HAL_GPIO_Init+0x330>)
 8006fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fae:	4a5e      	ldr	r2, [pc, #376]	; (8007128 <HAL_GPIO_Init+0x330>)
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	6613      	str	r3, [r2, #96]	; 0x60
 8006fb6:	4b5c      	ldr	r3, [pc, #368]	; (8007128 <HAL_GPIO_Init+0x330>)
 8006fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006fc2:	4a5a      	ldr	r2, [pc, #360]	; (800712c <HAL_GPIO_Init+0x334>)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	089b      	lsrs	r3, r3, #2
 8006fc8:	3302      	adds	r3, #2
 8006fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	220f      	movs	r2, #15
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006fec:	d025      	beq.n	800703a <HAL_GPIO_Init+0x242>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a4f      	ldr	r2, [pc, #316]	; (8007130 <HAL_GPIO_Init+0x338>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d01f      	beq.n	8007036 <HAL_GPIO_Init+0x23e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a4e      	ldr	r2, [pc, #312]	; (8007134 <HAL_GPIO_Init+0x33c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d019      	beq.n	8007032 <HAL_GPIO_Init+0x23a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a4d      	ldr	r2, [pc, #308]	; (8007138 <HAL_GPIO_Init+0x340>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <HAL_GPIO_Init+0x236>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a4c      	ldr	r2, [pc, #304]	; (800713c <HAL_GPIO_Init+0x344>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00d      	beq.n	800702a <HAL_GPIO_Init+0x232>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a4b      	ldr	r2, [pc, #300]	; (8007140 <HAL_GPIO_Init+0x348>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d007      	beq.n	8007026 <HAL_GPIO_Init+0x22e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a4a      	ldr	r2, [pc, #296]	; (8007144 <HAL_GPIO_Init+0x34c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d101      	bne.n	8007022 <HAL_GPIO_Init+0x22a>
 800701e:	2306      	movs	r3, #6
 8007020:	e00c      	b.n	800703c <HAL_GPIO_Init+0x244>
 8007022:	2307      	movs	r3, #7
 8007024:	e00a      	b.n	800703c <HAL_GPIO_Init+0x244>
 8007026:	2305      	movs	r3, #5
 8007028:	e008      	b.n	800703c <HAL_GPIO_Init+0x244>
 800702a:	2304      	movs	r3, #4
 800702c:	e006      	b.n	800703c <HAL_GPIO_Init+0x244>
 800702e:	2303      	movs	r3, #3
 8007030:	e004      	b.n	800703c <HAL_GPIO_Init+0x244>
 8007032:	2302      	movs	r3, #2
 8007034:	e002      	b.n	800703c <HAL_GPIO_Init+0x244>
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <HAL_GPIO_Init+0x244>
 800703a:	2300      	movs	r3, #0
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	f002 0203 	and.w	r2, r2, #3
 8007042:	0092      	lsls	r2, r2, #2
 8007044:	4093      	lsls	r3, r2
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800704c:	4937      	ldr	r1, [pc, #220]	; (800712c <HAL_GPIO_Init+0x334>)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	089b      	lsrs	r3, r3, #2
 8007052:	3302      	adds	r3, #2
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800705a:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <HAL_GPIO_Init+0x350>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	43db      	mvns	r3, r3
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	4013      	ands	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800707e:	4a32      	ldr	r2, [pc, #200]	; (8007148 <HAL_GPIO_Init+0x350>)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007084:	4b30      	ldr	r3, [pc, #192]	; (8007148 <HAL_GPIO_Init+0x350>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	43db      	mvns	r3, r3
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	4013      	ands	r3, r2
 8007092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80070a8:	4a27      	ldr	r2, [pc, #156]	; (8007148 <HAL_GPIO_Init+0x350>)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80070ae:	4b26      	ldr	r3, [pc, #152]	; (8007148 <HAL_GPIO_Init+0x350>)
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	43db      	mvns	r3, r3
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4013      	ands	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80070d2:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <HAL_GPIO_Init+0x350>)
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_GPIO_Init+0x350>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	43db      	mvns	r3, r3
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4013      	ands	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80070fc:	4a12      	ldr	r2, [pc, #72]	; (8007148 <HAL_GPIO_Init+0x350>)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	3301      	adds	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	f47f ae78 	bne.w	8006e08 <HAL_GPIO_Init+0x10>
  }
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40021000 	.word	0x40021000
 800712c:	40010000 	.word	0x40010000
 8007130:	48000400 	.word	0x48000400
 8007134:	48000800 	.word	0x48000800
 8007138:	48000c00 	.word	0x48000c00
 800713c:	48001000 	.word	0x48001000
 8007140:	48001400 	.word	0x48001400
 8007144:	48001800 	.word	0x48001800
 8007148:	40010400 	.word	0x40010400

0800714c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800715a:	e0cd      	b.n	80072f8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800715c:	2201      	movs	r2, #1
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	4013      	ands	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80c0 	beq.w	80072f2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007172:	4a68      	ldr	r2, [pc, #416]	; (8007314 <HAL_GPIO_DeInit+0x1c8>)
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	3302      	adds	r3, #2
 800717a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800717e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	220f      	movs	r2, #15
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4013      	ands	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800719a:	d025      	beq.n	80071e8 <HAL_GPIO_DeInit+0x9c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a5e      	ldr	r2, [pc, #376]	; (8007318 <HAL_GPIO_DeInit+0x1cc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d01f      	beq.n	80071e4 <HAL_GPIO_DeInit+0x98>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a5d      	ldr	r2, [pc, #372]	; (800731c <HAL_GPIO_DeInit+0x1d0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d019      	beq.n	80071e0 <HAL_GPIO_DeInit+0x94>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a5c      	ldr	r2, [pc, #368]	; (8007320 <HAL_GPIO_DeInit+0x1d4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <HAL_GPIO_DeInit+0x90>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a5b      	ldr	r2, [pc, #364]	; (8007324 <HAL_GPIO_DeInit+0x1d8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00d      	beq.n	80071d8 <HAL_GPIO_DeInit+0x8c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a5a      	ldr	r2, [pc, #360]	; (8007328 <HAL_GPIO_DeInit+0x1dc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <HAL_GPIO_DeInit+0x88>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a59      	ldr	r2, [pc, #356]	; (800732c <HAL_GPIO_DeInit+0x1e0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d101      	bne.n	80071d0 <HAL_GPIO_DeInit+0x84>
 80071cc:	2306      	movs	r3, #6
 80071ce:	e00c      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071d0:	2307      	movs	r3, #7
 80071d2:	e00a      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071d4:	2305      	movs	r3, #5
 80071d6:	e008      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071d8:	2304      	movs	r3, #4
 80071da:	e006      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071dc:	2303      	movs	r3, #3
 80071de:	e004      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e002      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <HAL_GPIO_DeInit+0x9e>
 80071e8:	2300      	movs	r3, #0
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	f002 0203 	and.w	r2, r2, #3
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	4093      	lsls	r3, r2
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d132      	bne.n	8007260 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80071fa:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	43db      	mvns	r3, r3
 8007202:	494b      	ldr	r1, [pc, #300]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 8007204:	4013      	ands	r3, r2
 8007206:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007208:	4b49      	ldr	r3, [pc, #292]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	43db      	mvns	r3, r3
 8007210:	4947      	ldr	r1, [pc, #284]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 8007212:	4013      	ands	r3, r2
 8007214:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007216:	4b46      	ldr	r3, [pc, #280]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	43db      	mvns	r3, r3
 800721e:	4944      	ldr	r1, [pc, #272]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 8007220:	4013      	ands	r3, r2
 8007222:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007224:	4b42      	ldr	r3, [pc, #264]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	43db      	mvns	r3, r3
 800722c:	4940      	ldr	r1, [pc, #256]	; (8007330 <HAL_GPIO_DeInit+0x1e4>)
 800722e:	4013      	ands	r3, r2
 8007230:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f003 0303 	and.w	r3, r3, #3
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	220f      	movs	r2, #15
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007242:	4a34      	ldr	r2, [pc, #208]	; (8007314 <HAL_GPIO_DeInit+0x1c8>)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	089b      	lsrs	r3, r3, #2
 8007248:	3302      	adds	r3, #2
 800724a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	43da      	mvns	r2, r3
 8007252:	4830      	ldr	r0, [pc, #192]	; (8007314 <HAL_GPIO_DeInit+0x1c8>)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	089b      	lsrs	r3, r3, #2
 8007258:	400a      	ands	r2, r1
 800725a:	3302      	adds	r3, #2
 800725c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	2103      	movs	r1, #3
 800726a:	fa01 f303 	lsl.w	r3, r1, r3
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	08da      	lsrs	r2, r3, #3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3208      	adds	r2, #8
 800727c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	220f      	movs	r2, #15
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43db      	mvns	r3, r3
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	08d2      	lsrs	r2, r2, #3
 8007294:	4019      	ands	r1, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3208      	adds	r2, #8
 800729a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	2103      	movs	r1, #3
 80072a8:	fa01 f303 	lsl.w	r3, r1, r3
 80072ac:	43db      	mvns	r3, r3
 80072ae:	401a      	ands	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	2101      	movs	r1, #1
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	2103      	movs	r1, #3
 80072d2:	fa01 f303 	lsl.w	r3, r1, r3
 80072d6:	43db      	mvns	r3, r3
 80072d8:	401a      	ands	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	2101      	movs	r1, #1
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	43db      	mvns	r3, r3
 80072ec:	401a      	ands	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	3301      	adds	r3, #1
 80072f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	f47f af2b 	bne.w	800715c <HAL_GPIO_DeInit+0x10>
  }
}
 8007306:	bf00      	nop
 8007308:	bf00      	nop
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	40010000 	.word	0x40010000
 8007318:	48000400 	.word	0x48000400
 800731c:	48000800 	.word	0x48000800
 8007320:	48000c00 	.word	0x48000c00
 8007324:	48001000 	.word	0x48001000
 8007328:	48001400 	.word	0x48001400
 800732c:	48001800 	.word	0x48001800
 8007330:	40010400 	.word	0x40010400

08007334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	807b      	strh	r3, [r7, #2]
 8007340:	4613      	mov	r3, r2
 8007342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007344:	787b      	ldrb	r3, [r7, #1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800734a:	887a      	ldrh	r2, [r7, #2]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007350:	e002      	b.n	8007358 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007352:	887a      	ldrh	r2, [r7, #2]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	4013      	ands	r3, r2
 8007376:	2b00      	cmp	r3, #0
 8007378:	d006      	beq.n	8007388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800737a:	4a05      	ldr	r2, [pc, #20]	; (8007390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007380:	88fb      	ldrh	r3, [r7, #6]
 8007382:	4618      	mov	r0, r3
 8007384:	f7fa ffe6 	bl	8002354 <HAL_GPIO_EXTI_Callback>
  }
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40010400 	.word	0x40010400

08007394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e081      	b.n	80074aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fa fe04 	bl	8001fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	; 0x24
 80073c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0201 	bic.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d107      	bne.n	800740e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	e006      	b.n	800741c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689a      	ldr	r2, [r3, #8]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800741a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d104      	bne.n	800742e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800742c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800743c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007440:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007450:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691a      	ldr	r2, [r3, #16]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69d9      	ldr	r1, [r3, #28]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1a      	ldr	r2, [r3, #32]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b082      	sub	sp, #8
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e021      	b.n	8007508 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2224      	movs	r2, #36	; 0x24
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fa fdd1 	bl	8002084 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4603      	mov	r3, r0
 8007520:	817b      	strh	r3, [r7, #10]
 8007522:	460b      	mov	r3, r1
 8007524:	813b      	strh	r3, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b20      	cmp	r3, #32
 8007534:	f040 80f9 	bne.w	800772a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_I2C_Mem_Write+0x34>
 800753e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0ed      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_I2C_Mem_Write+0x4e>
 800755a:	2302      	movs	r3, #2
 800755c:	e0e6      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007566:	f7ff f847 	bl	80065f8 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	2319      	movs	r3, #25
 8007572:	2201      	movs	r2, #1
 8007574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fadd 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e0d1      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2221      	movs	r2, #33	; 0x21
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a3a      	ldr	r2, [r7, #32]
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80075a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075b0:	88f8      	ldrh	r0, [r7, #6]
 80075b2:	893a      	ldrh	r2, [r7, #8]
 80075b4:	8979      	ldrh	r1, [r7, #10]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4603      	mov	r3, r0
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f9ed 	bl	80079a0 <I2C_RequestMemoryWrite>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0a9      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2bff      	cmp	r3, #255	; 0xff
 80075e0:	d90e      	bls.n	8007600 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	22ff      	movs	r2, #255	; 0xff
 80075e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	8979      	ldrh	r1, [r7, #10]
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fc45 	bl	8007e88 <I2C_TransferConfig>
 80075fe:	e00f      	b.n	8007620 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	8979      	ldrh	r1, [r7, #10]
 8007612:	2300      	movs	r3, #0
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fc34 	bl	8007e88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fac7 	bl	8007bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e07b      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	781a      	ldrb	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d034      	beq.n	80076d8 <HAL_I2C_Mem_Write+0x1c8>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d130      	bne.n	80076d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	2200      	movs	r2, #0
 800767e:	2180      	movs	r1, #128	; 0x80
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa59 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e04d      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2bff      	cmp	r3, #255	; 0xff
 8007698:	d90e      	bls.n	80076b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	22ff      	movs	r2, #255	; 0xff
 800769e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	8979      	ldrh	r1, [r7, #10]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fbe9 	bl	8007e88 <I2C_TransferConfig>
 80076b6:	e00f      	b.n	80076d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	8979      	ldrh	r1, [r7, #10]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fbd8 	bl	8007e88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d19e      	bne.n	8007620 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 faa6 	bl	8007c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e01a      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2220      	movs	r2, #32
 80076fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6859      	ldr	r1, [r3, #4]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <HAL_I2C_Mem_Write+0x224>)
 800770a:	400b      	ands	r3, r1
 800770c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800772a:	2302      	movs	r3, #2
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	fe00e800 	.word	0xfe00e800

08007738 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4603      	mov	r3, r0
 8007748:	817b      	strh	r3, [r7, #10]
 800774a:	460b      	mov	r3, r1
 800774c:	813b      	strh	r3, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b20      	cmp	r3, #32
 800775c:	f040 80fd 	bne.w	800795a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_I2C_Mem_Read+0x34>
 8007766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007772:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e0f1      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2C_Mem_Read+0x4e>
 8007782:	2302      	movs	r3, #2
 8007784:	e0ea      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800778e:	f7fe ff33 	bl	80065f8 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2319      	movs	r3, #25
 800779a:	2201      	movs	r2, #1
 800779c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f9c9 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0d5      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2222      	movs	r2, #34	; 0x22
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a3a      	ldr	r2, [r7, #32]
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077d8:	88f8      	ldrh	r0, [r7, #6]
 80077da:	893a      	ldrh	r2, [r7, #8]
 80077dc:	8979      	ldrh	r1, [r7, #10]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4603      	mov	r3, r0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f92d 	bl	8007a48 <I2C_RequestMemoryRead>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0ad      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2bff      	cmp	r3, #255	; 0xff
 8007808:	d90e      	bls.n	8007828 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	22ff      	movs	r2, #255	; 0xff
 800780e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007814:	b2da      	uxtb	r2, r3
 8007816:	8979      	ldrh	r1, [r7, #10]
 8007818:	4b52      	ldr	r3, [pc, #328]	; (8007964 <HAL_I2C_Mem_Read+0x22c>)
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fb31 	bl	8007e88 <I2C_TransferConfig>
 8007826:	e00f      	b.n	8007848 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007836:	b2da      	uxtb	r2, r3
 8007838:	8979      	ldrh	r1, [r7, #10]
 800783a:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_I2C_Mem_Read+0x22c>)
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fb20 	bl	8007e88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	2200      	movs	r2, #0
 8007850:	2104      	movs	r1, #4
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f970 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e07c      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d034      	beq.n	8007908 <HAL_I2C_Mem_Read+0x1d0>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d130      	bne.n	8007908 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	2200      	movs	r2, #0
 80078ae:	2180      	movs	r1, #128	; 0x80
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 f941 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e04d      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2bff      	cmp	r3, #255	; 0xff
 80078c8:	d90e      	bls.n	80078e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	22ff      	movs	r2, #255	; 0xff
 80078ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	8979      	ldrh	r1, [r7, #10]
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fad1 	bl	8007e88 <I2C_TransferConfig>
 80078e6:	e00f      	b.n	8007908 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	8979      	ldrh	r1, [r7, #10]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fac0 	bl	8007e88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d19a      	bne.n	8007848 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 f98e 	bl	8007c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e01a      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2220      	movs	r2, #32
 800792c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6859      	ldr	r1, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <HAL_I2C_Mem_Read+0x230>)
 800793a:	400b      	ands	r3, r1
 800793c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	80002400 	.word	0x80002400
 8007968:	fe00e800 	.word	0xfe00e800

0800796c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800797a:	b2db      	uxtb	r3, r3
}
 800797c:	4618      	mov	r0, r3
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	461a      	mov	r2, r3
 80079ae:	4603      	mov	r3, r0
 80079b0:	817b      	strh	r3, [r7, #10]
 80079b2:	460b      	mov	r3, r1
 80079b4:	813b      	strh	r3, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079ba:	88fb      	ldrh	r3, [r7, #6]
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	8979      	ldrh	r1, [r7, #10]
 80079c0:	4b20      	ldr	r3, [pc, #128]	; (8007a44 <I2C_RequestMemoryWrite+0xa4>)
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 fa5d 	bl	8007e88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	69b9      	ldr	r1, [r7, #24]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f8f0 	bl	8007bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e02c      	b.n	8007a3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d105      	bne.n	80079f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079e8:	893b      	ldrh	r3, [r7, #8]
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	629a      	str	r2, [r3, #40]	; 0x28
 80079f2:	e015      	b.n	8007a20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80079f4:	893b      	ldrh	r3, [r7, #8]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a02:	69fa      	ldr	r2, [r7, #28]
 8007a04:	69b9      	ldr	r1, [r7, #24]
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f8d6 	bl	8007bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e012      	b.n	8007a3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a16:	893b      	ldrh	r3, [r7, #8]
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2200      	movs	r2, #0
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f884 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	80002000 	.word	0x80002000

08007a48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af02      	add	r7, sp, #8
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	817b      	strh	r3, [r7, #10]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	813b      	strh	r3, [r7, #8]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a62:	88fb      	ldrh	r3, [r7, #6]
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	8979      	ldrh	r1, [r7, #10]
 8007a68:	4b20      	ldr	r3, [pc, #128]	; (8007aec <I2C_RequestMemoryRead+0xa4>)
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fa0a 	bl	8007e88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	69b9      	ldr	r1, [r7, #24]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f89d 	bl	8007bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e02c      	b.n	8007ae2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d105      	bne.n	8007a9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a8e:	893b      	ldrh	r3, [r7, #8]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28
 8007a98:	e015      	b.n	8007ac6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a9a:	893b      	ldrh	r3, [r7, #8]
 8007a9c:	0a1b      	lsrs	r3, r3, #8
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa8:	69fa      	ldr	r2, [r7, #28]
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 f883 	bl	8007bb8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e012      	b.n	8007ae2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007abc:	893b      	ldrh	r3, [r7, #8]
 8007abe:	b2da      	uxtb	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2200      	movs	r2, #0
 8007ace:	2140      	movs	r1, #64	; 0x40
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f831 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d001      	beq.n	8007ae0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	80002000 	.word	0x80002000

08007af0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d103      	bne.n	8007b0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d007      	beq.n	8007b2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	619a      	str	r2, [r3, #24]
  }
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b48:	e022      	b.n	8007b90 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b50:	d01e      	beq.n	8007b90 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b52:	f7fe fd51 	bl	80065f8 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d302      	bcc.n	8007b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d113      	bne.n	8007b90 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6c:	f043 0220 	orr.w	r2, r3, #32
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e00f      	b.n	8007bb0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	699a      	ldr	r2, [r3, #24]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4013      	ands	r3, r2
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	bf0c      	ite	eq
 8007ba0:	2301      	moveq	r3, #1
 8007ba2:	2300      	movne	r3, #0
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d0cd      	beq.n	8007b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3710      	adds	r7, #16
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bc4:	e02c      	b.n	8007c20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f870 	bl	8007cb0 <I2C_IsErrorOccurred>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e02a      	b.n	8007c30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be0:	d01e      	beq.n	8007c20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be2:	f7fe fd09 	bl	80065f8 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d113      	bne.n	8007c20 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfc:	f043 0220 	orr.w	r2, r3, #32
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e007      	b.n	8007c30 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d1cb      	bne.n	8007bc6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c44:	e028      	b.n	8007c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	68b9      	ldr	r1, [r7, #8]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f830 	bl	8007cb0 <I2C_IsErrorOccurred>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e026      	b.n	8007ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c5a:	f7fe fccd 	bl	80065f8 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d302      	bcc.n	8007c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d113      	bne.n	8007c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c74:	f043 0220 	orr.w	r2, r3, #32
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e007      	b.n	8007ca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b20      	cmp	r3, #32
 8007ca4:	d1cf      	bne.n	8007c46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08a      	sub	sp, #40	; 0x28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d075      	beq.n	8007dc8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2210      	movs	r2, #16
 8007ce2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ce4:	e056      	b.n	8007d94 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cec:	d052      	beq.n	8007d94 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cee:	f7fe fc83 	bl	80065f8 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d302      	bcc.n	8007d04 <I2C_IsErrorOccurred+0x54>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d147      	bne.n	8007d94 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d26:	d12e      	bne.n	8007d86 <I2C_IsErrorOccurred+0xd6>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d2e:	d02a      	beq.n	8007d86 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007d30:	7cfb      	ldrb	r3, [r7, #19]
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d027      	beq.n	8007d86 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d44:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d46:	f7fe fc57 	bl	80065f8 <HAL_GetTick>
 8007d4a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d4c:	e01b      	b.n	8007d86 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d4e:	f7fe fc53 	bl	80065f8 <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b19      	cmp	r3, #25
 8007d5a:	d914      	bls.n	8007d86 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d60:	f043 0220 	orr.w	r2, r3, #32
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d1dc      	bne.n	8007d4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d003      	beq.n	8007daa <I2C_IsErrorOccurred+0xfa>
 8007da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d09d      	beq.n	8007ce6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d103      	bne.n	8007dba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2220      	movs	r2, #32
 8007db8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f043 0304 	orr.w	r3, r3, #4
 8007dc0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f043 0301 	orr.w	r3, r3, #1
 8007de0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	f043 0308 	orr.w	r3, r3, #8
 8007e02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00b      	beq.n	8007e36 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f043 0302 	orr.w	r3, r3, #2
 8007e24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01c      	beq.n	8007e78 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fe56 	bl	8007af0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <I2C_IsErrorOccurred+0x1d4>)
 8007e50:	400b      	ands	r3, r1
 8007e52:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	431a      	orrs	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	fe00e800 	.word	0xfe00e800

08007e88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	607b      	str	r3, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	817b      	strh	r3, [r7, #10]
 8007e96:	4613      	mov	r3, r2
 8007e98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e9a:	897b      	ldrh	r3, [r7, #10]
 8007e9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ea0:	7a7b      	ldrb	r3, [r7, #9]
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ea8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eb6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	0d5b      	lsrs	r3, r3, #21
 8007ec2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007ec6:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <I2C_TransferConfig+0x60>)
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	43db      	mvns	r3, r3
 8007ecc:	ea02 0103 	and.w	r1, r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007eda:	bf00      	nop
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	03ff63ff 	.word	0x03ff63ff

08007eec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d138      	bne.n	8007f74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d101      	bne.n	8007f10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	e032      	b.n	8007f76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2224      	movs	r2, #36	; 0x24
 8007f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6819      	ldr	r1, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	e000      	b.n	8007f76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f74:	2302      	movs	r3, #2
  }
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b085      	sub	sp, #20
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d139      	bne.n	800800c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d101      	bne.n	8007fa6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e033      	b.n	800800e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2224      	movs	r2, #36	; 0x24
 8007fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007fd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	021b      	lsls	r3, r3, #8
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0201 	orr.w	r2, r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	e000      	b.n	800800e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800800c:	2302      	movs	r3, #2
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <HAL_PWREx_GetVoltageRange+0x18>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40007000 	.word	0x40007000

08008038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008046:	d130      	bne.n	80080aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008048:	4b23      	ldr	r3, [pc, #140]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008054:	d038      	beq.n	80080c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008056:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800805e:	4a1e      	ldr	r2, [pc, #120]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008060:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008064:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008066:	4b1d      	ldr	r3, [pc, #116]	; (80080dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2232      	movs	r2, #50	; 0x32
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	4a1b      	ldr	r2, [pc, #108]	; (80080e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008072:	fba2 2303 	umull	r2, r3, r2, r3
 8008076:	0c9b      	lsrs	r3, r3, #18
 8008078:	3301      	adds	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800807c:	e002      	b.n	8008084 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3b01      	subs	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008084:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008090:	d102      	bne.n	8008098 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f2      	bne.n	800807e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008098:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a4:	d110      	bne.n	80080c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e00f      	b.n	80080ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80080aa:	4b0b      	ldr	r3, [pc, #44]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b6:	d007      	beq.n	80080c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80080b8:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80080c0:	4a05      	ldr	r2, [pc, #20]	; (80080d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80080c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40007000 	.word	0x40007000
 80080dc:	2000000c 	.word	0x2000000c
 80080e0:	431bde83 	.word	0x431bde83

080080e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e3d4      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080f6:	4ba1      	ldr	r3, [pc, #644]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 030c 	and.w	r3, r3, #12
 80080fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008100:	4b9e      	ldr	r3, [pc, #632]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80e4 	beq.w	80082e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <HAL_RCC_OscConfig+0x4a>
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	2b0c      	cmp	r3, #12
 8008122:	f040 808b 	bne.w	800823c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b01      	cmp	r3, #1
 800812a:	f040 8087 	bne.w	800823c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800812e:	4b93      	ldr	r3, [pc, #588]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_RCC_OscConfig+0x62>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e3ac      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	4b8c      	ldr	r3, [pc, #560]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0308 	and.w	r3, r3, #8
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <HAL_RCC_OscConfig+0x7c>
 8008156:	4b89      	ldr	r3, [pc, #548]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800815e:	e005      	b.n	800816c <HAL_RCC_OscConfig+0x88>
 8008160:	4b86      	ldr	r3, [pc, #536]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800816c:	4293      	cmp	r3, r2
 800816e:	d223      	bcs.n	80081b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	4618      	mov	r0, r3
 8008176:	f000 fd41 	bl	8008bfc <RCC_SetFlashLatencyFromMSIRange>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e38d      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008184:	4b7d      	ldr	r3, [pc, #500]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a7c      	ldr	r2, [pc, #496]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800818a:	f043 0308 	orr.w	r3, r3, #8
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	4b7a      	ldr	r3, [pc, #488]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	4977      	ldr	r1, [pc, #476]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081a2:	4b76      	ldr	r3, [pc, #472]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	4972      	ldr	r1, [pc, #456]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	604b      	str	r3, [r1, #4]
 80081b6:	e025      	b.n	8008204 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80081b8:	4b70      	ldr	r3, [pc, #448]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6f      	ldr	r2, [pc, #444]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081be:	f043 0308 	orr.w	r3, r3, #8
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	4b6d      	ldr	r3, [pc, #436]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	496a      	ldr	r1, [pc, #424]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80081d6:	4b69      	ldr	r3, [pc, #420]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	4965      	ldr	r1, [pc, #404]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d109      	bne.n	8008204 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fd01 	bl	8008bfc <RCC_SetFlashLatencyFromMSIRange>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d001      	beq.n	8008204 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e34d      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008204:	f000 fc36 	bl	8008a74 <HAL_RCC_GetSysClockFreq>
 8008208:	4602      	mov	r2, r0
 800820a:	4b5c      	ldr	r3, [pc, #368]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	091b      	lsrs	r3, r3, #4
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	495a      	ldr	r1, [pc, #360]	; (8008380 <HAL_RCC_OscConfig+0x29c>)
 8008216:	5ccb      	ldrb	r3, [r1, r3]
 8008218:	f003 031f 	and.w	r3, r3, #31
 800821c:	fa22 f303 	lsr.w	r3, r2, r3
 8008220:	4a58      	ldr	r2, [pc, #352]	; (8008384 <HAL_RCC_OscConfig+0x2a0>)
 8008222:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008224:	4b58      	ldr	r3, [pc, #352]	; (8008388 <HAL_RCC_OscConfig+0x2a4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4618      	mov	r0, r3
 800822a:	f7fe f995 	bl	8006558 <HAL_InitTick>
 800822e:	4603      	mov	r3, r0
 8008230:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008232:	7bfb      	ldrb	r3, [r7, #15]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d052      	beq.n	80082de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	e331      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d032      	beq.n	80082aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008244:	4b4d      	ldr	r3, [pc, #308]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a4c      	ldr	r2, [pc, #304]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008250:	f7fe f9d2 	bl	80065f8 <HAL_GetTick>
 8008254:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008258:	f7fe f9ce 	bl	80065f8 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e31a      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800826a:	4b44      	ldr	r3, [pc, #272]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008276:	4b41      	ldr	r3, [pc, #260]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a40      	ldr	r2, [pc, #256]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800827c:	f043 0308 	orr.w	r3, r3, #8
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	4b3e      	ldr	r3, [pc, #248]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	493b      	ldr	r1, [pc, #236]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008290:	4313      	orrs	r3, r2
 8008292:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008294:	4b39      	ldr	r3, [pc, #228]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	4936      	ldr	r1, [pc, #216]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	604b      	str	r3, [r1, #4]
 80082a8:	e01a      	b.n	80082e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80082aa:	4b34      	ldr	r3, [pc, #208]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a33      	ldr	r2, [pc, #204]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80082b0:	f023 0301 	bic.w	r3, r3, #1
 80082b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80082b6:	f7fe f99f 	bl	80065f8 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80082be:	f7fe f99b 	bl	80065f8 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e2e7      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80082d0:	4b2a      	ldr	r3, [pc, #168]	; (800837c <HAL_RCC_OscConfig+0x298>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <HAL_RCC_OscConfig+0x1da>
 80082dc:	e000      	b.n	80082e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d074      	beq.n	80083d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	2b08      	cmp	r3, #8
 80082f0:	d005      	beq.n	80082fe <HAL_RCC_OscConfig+0x21a>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b0c      	cmp	r3, #12
 80082f6:	d10e      	bne.n	8008316 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d10b      	bne.n	8008316 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082fe:	4b1f      	ldr	r3, [pc, #124]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d064      	beq.n	80083d4 <HAL_RCC_OscConfig+0x2f0>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d160      	bne.n	80083d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e2c4      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800831e:	d106      	bne.n	800832e <HAL_RCC_OscConfig+0x24a>
 8008320:	4b16      	ldr	r3, [pc, #88]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a15      	ldr	r2, [pc, #84]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800832a:	6013      	str	r3, [r2, #0]
 800832c:	e01d      	b.n	800836a <HAL_RCC_OscConfig+0x286>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008336:	d10c      	bne.n	8008352 <HAL_RCC_OscConfig+0x26e>
 8008338:	4b10      	ldr	r3, [pc, #64]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a0f      	ldr	r2, [pc, #60]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800833e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	4b0d      	ldr	r3, [pc, #52]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a0c      	ldr	r2, [pc, #48]	; (800837c <HAL_RCC_OscConfig+0x298>)
 800834a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	e00b      	b.n	800836a <HAL_RCC_OscConfig+0x286>
 8008352:	4b0a      	ldr	r3, [pc, #40]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a06      	ldr	r2, [pc, #24]	; (800837c <HAL_RCC_OscConfig+0x298>)
 8008364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008368:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01c      	beq.n	80083ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008372:	f7fe f941 	bl	80065f8 <HAL_GetTick>
 8008376:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008378:	e011      	b.n	800839e <HAL_RCC_OscConfig+0x2ba>
 800837a:	bf00      	nop
 800837c:	40021000 	.word	0x40021000
 8008380:	0801a954 	.word	0x0801a954
 8008384:	2000000c 	.word	0x2000000c
 8008388:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838c:	f7fe f934 	bl	80065f8 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	; 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e280      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800839e:	4baf      	ldr	r3, [pc, #700]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0x2a8>
 80083aa:	e014      	b.n	80083d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ac:	f7fe f924 	bl	80065f8 <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b4:	f7fe f920 	bl	80065f8 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	; 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e26c      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083c6:	4ba5      	ldr	r3, [pc, #660]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f0      	bne.n	80083b4 <HAL_RCC_OscConfig+0x2d0>
 80083d2:	e000      	b.n	80083d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d060      	beq.n	80084a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d005      	beq.n	80083f4 <HAL_RCC_OscConfig+0x310>
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2b0c      	cmp	r3, #12
 80083ec:	d119      	bne.n	8008422 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d116      	bne.n	8008422 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083f4:	4b99      	ldr	r3, [pc, #612]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_RCC_OscConfig+0x328>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e249      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800840c:	4b93      	ldr	r3, [pc, #588]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	061b      	lsls	r3, r3, #24
 800841a:	4990      	ldr	r1, [pc, #576]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800841c:	4313      	orrs	r3, r2
 800841e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008420:	e040      	b.n	80084a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d023      	beq.n	8008472 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800842a:	4b8c      	ldr	r3, [pc, #560]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a8b      	ldr	r2, [pc, #556]	; (800865c <HAL_RCC_OscConfig+0x578>)
 8008430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7fe f8df 	bl	80065f8 <HAL_GetTick>
 800843a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800843c:	e008      	b.n	8008450 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800843e:	f7fe f8db 	bl	80065f8 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e227      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008450:	4b82      	ldr	r3, [pc, #520]	; (800865c <HAL_RCC_OscConfig+0x578>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0f0      	beq.n	800843e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800845c:	4b7f      	ldr	r3, [pc, #508]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	497c      	ldr	r1, [pc, #496]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800846c:	4313      	orrs	r3, r2
 800846e:	604b      	str	r3, [r1, #4]
 8008470:	e018      	b.n	80084a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008472:	4b7a      	ldr	r3, [pc, #488]	; (800865c <HAL_RCC_OscConfig+0x578>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a79      	ldr	r2, [pc, #484]	; (800865c <HAL_RCC_OscConfig+0x578>)
 8008478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800847c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847e:	f7fe f8bb 	bl	80065f8 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008484:	e008      	b.n	8008498 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008486:	f7fe f8b7 	bl	80065f8 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e203      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008498:	4b70      	ldr	r3, [pc, #448]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d03c      	beq.n	800852a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01c      	beq.n	80084f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084b8:	4b68      	ldr	r3, [pc, #416]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80084ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084be:	4a67      	ldr	r2, [pc, #412]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80084c0:	f043 0301 	orr.w	r3, r3, #1
 80084c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c8:	f7fe f896 	bl	80065f8 <HAL_GetTick>
 80084cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084d0:	f7fe f892 	bl	80065f8 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e1de      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084e2:	4b5e      	ldr	r3, [pc, #376]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80084e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0ef      	beq.n	80084d0 <HAL_RCC_OscConfig+0x3ec>
 80084f0:	e01b      	b.n	800852a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084f2:	4b5a      	ldr	r3, [pc, #360]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80084f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084f8:	4a58      	ldr	r2, [pc, #352]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80084fa:	f023 0301 	bic.w	r3, r3, #1
 80084fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008502:	f7fe f879 	bl	80065f8 <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800850a:	f7fe f875 	bl	80065f8 <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e1c1      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800851c:	4b4f      	ldr	r3, [pc, #316]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800851e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1ef      	bne.n	800850a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80a6 	beq.w	8008684 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008538:	2300      	movs	r3, #0
 800853a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800853c:	4b47      	ldr	r3, [pc, #284]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800853e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10d      	bne.n	8008564 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008548:	4b44      	ldr	r3, [pc, #272]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800854a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800854c:	4a43      	ldr	r2, [pc, #268]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800854e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008552:	6593      	str	r3, [r2, #88]	; 0x58
 8008554:	4b41      	ldr	r3, [pc, #260]	; (800865c <HAL_RCC_OscConfig+0x578>)
 8008556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008560:	2301      	movs	r3, #1
 8008562:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008564:	4b3e      	ldr	r3, [pc, #248]	; (8008660 <HAL_RCC_OscConfig+0x57c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d118      	bne.n	80085a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008570:	4b3b      	ldr	r3, [pc, #236]	; (8008660 <HAL_RCC_OscConfig+0x57c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a3a      	ldr	r2, [pc, #232]	; (8008660 <HAL_RCC_OscConfig+0x57c>)
 8008576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800857c:	f7fe f83c 	bl	80065f8 <HAL_GetTick>
 8008580:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008582:	e008      	b.n	8008596 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008584:	f7fe f838 	bl	80065f8 <HAL_GetTick>
 8008588:	4602      	mov	r2, r0
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d901      	bls.n	8008596 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e184      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008596:	4b32      	ldr	r3, [pc, #200]	; (8008660 <HAL_RCC_OscConfig+0x57c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d0f0      	beq.n	8008584 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d108      	bne.n	80085bc <HAL_RCC_OscConfig+0x4d8>
 80085aa:	4b2c      	ldr	r3, [pc, #176]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b0:	4a2a      	ldr	r2, [pc, #168]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085ba:	e024      	b.n	8008606 <HAL_RCC_OscConfig+0x522>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d110      	bne.n	80085e6 <HAL_RCC_OscConfig+0x502>
 80085c4:	4b25      	ldr	r3, [pc, #148]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ca:	4a24      	ldr	r2, [pc, #144]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085cc:	f043 0304 	orr.w	r3, r3, #4
 80085d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085d4:	4b21      	ldr	r3, [pc, #132]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	4a20      	ldr	r2, [pc, #128]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085e4:	e00f      	b.n	8008606 <HAL_RCC_OscConfig+0x522>
 80085e6:	4b1d      	ldr	r3, [pc, #116]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ec:	4a1b      	ldr	r2, [pc, #108]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085ee:	f023 0301 	bic.w	r3, r3, #1
 80085f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085f6:	4b19      	ldr	r3, [pc, #100]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fc:	4a17      	ldr	r2, [pc, #92]	; (800865c <HAL_RCC_OscConfig+0x578>)
 80085fe:	f023 0304 	bic.w	r3, r3, #4
 8008602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d016      	beq.n	800863c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800860e:	f7fd fff3 	bl	80065f8 <HAL_GetTick>
 8008612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008614:	e00a      	b.n	800862c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008616:	f7fd ffef 	bl	80065f8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f241 3288 	movw	r2, #5000	; 0x1388
 8008624:	4293      	cmp	r3, r2
 8008626:	d901      	bls.n	800862c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e139      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <HAL_RCC_OscConfig+0x578>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0ed      	beq.n	8008616 <HAL_RCC_OscConfig+0x532>
 800863a:	e01a      	b.n	8008672 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800863c:	f7fd ffdc 	bl	80065f8 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008642:	e00f      	b.n	8008664 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008644:	f7fd ffd8 	bl	80065f8 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008652:	4293      	cmp	r3, r2
 8008654:	d906      	bls.n	8008664 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e122      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
 800865a:	bf00      	nop
 800865c:	40021000 	.word	0x40021000
 8008660:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008664:	4b90      	ldr	r3, [pc, #576]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e8      	bne.n	8008644 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008672:	7ffb      	ldrb	r3, [r7, #31]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d105      	bne.n	8008684 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008678:	4b8b      	ldr	r3, [pc, #556]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800867a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867c:	4a8a      	ldr	r2, [pc, #552]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800867e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008682:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8108 	beq.w	800889e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	2b02      	cmp	r3, #2
 8008694:	f040 80d0 	bne.w	8008838 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008698:	4b83      	ldr	r3, [pc, #524]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f003 0203 	and.w	r2, r3, #3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d130      	bne.n	800870e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	3b01      	subs	r3, #1
 80086b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d127      	bne.n	800870e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d11f      	bne.n	800870e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80086d8:	2a07      	cmp	r2, #7
 80086da:	bf14      	ite	ne
 80086dc:	2201      	movne	r2, #1
 80086de:	2200      	moveq	r2, #0
 80086e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d113      	bne.n	800870e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	3b01      	subs	r3, #1
 80086f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d109      	bne.n	800870e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	085b      	lsrs	r3, r3, #1
 8008706:	3b01      	subs	r3, #1
 8008708:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800870a:	429a      	cmp	r2, r3
 800870c:	d06e      	beq.n	80087ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	2b0c      	cmp	r3, #12
 8008712:	d069      	beq.n	80087e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008714:	4b64      	ldr	r3, [pc, #400]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d105      	bne.n	800872c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008720:	4b61      	ldr	r3, [pc, #388]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e0b7      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008730:	4b5d      	ldr	r3, [pc, #372]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a5c      	ldr	r2, [pc, #368]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800873a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800873c:	f7fd ff5c 	bl	80065f8 <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008742:	e008      	b.n	8008756 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008744:	f7fd ff58 	bl	80065f8 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d901      	bls.n	8008756 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e0a4      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008756:	4b54      	ldr	r3, [pc, #336]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1f0      	bne.n	8008744 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008762:	4b51      	ldr	r3, [pc, #324]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	4b51      	ldr	r3, [pc, #324]	; (80088ac <HAL_RCC_OscConfig+0x7c8>)
 8008768:	4013      	ands	r3, r2
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008772:	3a01      	subs	r2, #1
 8008774:	0112      	lsls	r2, r2, #4
 8008776:	4311      	orrs	r1, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800877c:	0212      	lsls	r2, r2, #8
 800877e:	4311      	orrs	r1, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008784:	0852      	lsrs	r2, r2, #1
 8008786:	3a01      	subs	r2, #1
 8008788:	0552      	lsls	r2, r2, #21
 800878a:	4311      	orrs	r1, r2
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008790:	0852      	lsrs	r2, r2, #1
 8008792:	3a01      	subs	r2, #1
 8008794:	0652      	lsls	r2, r2, #25
 8008796:	4311      	orrs	r1, r2
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800879c:	0912      	lsrs	r2, r2, #4
 800879e:	0452      	lsls	r2, r2, #17
 80087a0:	430a      	orrs	r2, r1
 80087a2:	4941      	ldr	r1, [pc, #260]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80087a8:	4b3f      	ldr	r3, [pc, #252]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a3e      	ldr	r2, [pc, #248]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087b4:	4b3c      	ldr	r3, [pc, #240]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	4a3b      	ldr	r2, [pc, #236]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80087c0:	f7fd ff1a 	bl	80065f8 <HAL_GetTick>
 80087c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087c6:	e008      	b.n	80087da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c8:	f7fd ff16 	bl	80065f8 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d901      	bls.n	80087da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e062      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087da:	4b33      	ldr	r3, [pc, #204]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0f0      	beq.n	80087c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087e6:	e05a      	b.n	800889e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e059      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ec:	4b2e      	ldr	r3, [pc, #184]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d152      	bne.n	800889e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80087f8:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a2a      	ldr	r2, [pc, #168]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 80087fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008802:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008804:	4b28      	ldr	r3, [pc, #160]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	4a27      	ldr	r2, [pc, #156]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800880a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800880e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008810:	f7fd fef2 	bl	80065f8 <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008818:	f7fd feee 	bl	80065f8 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e03a      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800882a:	4b1f      	ldr	r3, [pc, #124]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0f0      	beq.n	8008818 <HAL_RCC_OscConfig+0x734>
 8008836:	e032      	b.n	800889e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b0c      	cmp	r3, #12
 800883c:	d02d      	beq.n	800889a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800883e:	4b1a      	ldr	r3, [pc, #104]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008848:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800884a:	4b17      	ldr	r3, [pc, #92]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d105      	bne.n	8008862 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	4a13      	ldr	r2, [pc, #76]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800885c:	f023 0303 	bic.w	r3, r3, #3
 8008860:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008862:	4b11      	ldr	r3, [pc, #68]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	4a10      	ldr	r2, [pc, #64]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 8008868:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800886c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008870:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008872:	f7fd fec1 	bl	80065f8 <HAL_GetTick>
 8008876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800887a:	f7fd febd 	bl	80065f8 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e009      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <HAL_RCC_OscConfig+0x7c4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <HAL_RCC_OscConfig+0x796>
 8008898:	e001      	b.n	800889e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40021000 	.word	0x40021000
 80088ac:	f99d808c 	.word	0xf99d808c

080088b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e0c8      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088c4:	4b66      	ldr	r3, [pc, #408]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d910      	bls.n	80088f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d2:	4b63      	ldr	r3, [pc, #396]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f023 0207 	bic.w	r2, r3, #7
 80088da:	4961      	ldr	r1, [pc, #388]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	4313      	orrs	r3, r2
 80088e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e2:	4b5f      	ldr	r3, [pc, #380]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e0b0      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0301 	and.w	r3, r3, #1
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d04c      	beq.n	800899a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d107      	bne.n	8008918 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008908:	4b56      	ldr	r3, [pc, #344]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d121      	bne.n	8008958 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e09e      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	2b02      	cmp	r3, #2
 800891e:	d107      	bne.n	8008930 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008920:	4b50      	ldr	r3, [pc, #320]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d115      	bne.n	8008958 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e092      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008938:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e086      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008948:	4b46      	ldr	r3, [pc, #280]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e07e      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008958:	4b42      	ldr	r3, [pc, #264]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f023 0203 	bic.w	r2, r3, #3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	493f      	ldr	r1, [pc, #252]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 8008966:	4313      	orrs	r3, r2
 8008968:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896a:	f7fd fe45 	bl	80065f8 <HAL_GetTick>
 800896e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008970:	e00a      	b.n	8008988 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008972:	f7fd fe41 	bl	80065f8 <HAL_GetTick>
 8008976:	4602      	mov	r2, r0
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008980:	4293      	cmp	r3, r2
 8008982:	d901      	bls.n	8008988 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e066      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008988:	4b36      	ldr	r3, [pc, #216]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 020c 	and.w	r2, r3, #12
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	429a      	cmp	r2, r3
 8008998:	d1eb      	bne.n	8008972 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d008      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a6:	4b2f      	ldr	r3, [pc, #188]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	492c      	ldr	r1, [pc, #176]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b8:	4b29      	ldr	r3, [pc, #164]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d210      	bcs.n	80089e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b26      	ldr	r3, [pc, #152]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f023 0207 	bic.w	r2, r3, #7
 80089ce:	4924      	ldr	r1, [pc, #144]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d6:	4b22      	ldr	r3, [pc, #136]	; (8008a60 <HAL_RCC_ClockConfig+0x1b0>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d001      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e036      	b.n	8008a56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0304 	and.w	r3, r3, #4
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d008      	beq.n	8008a06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089f4:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	4918      	ldr	r1, [pc, #96]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d009      	beq.n	8008a26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4910      	ldr	r1, [pc, #64]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a26:	f000 f825 	bl	8008a74 <HAL_RCC_GetSysClockFreq>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <HAL_RCC_ClockConfig+0x1b4>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	091b      	lsrs	r3, r3, #4
 8008a32:	f003 030f 	and.w	r3, r3, #15
 8008a36:	490c      	ldr	r1, [pc, #48]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 8008a38:	5ccb      	ldrb	r3, [r1, r3]
 8008a3a:	f003 031f 	and.w	r3, r3, #31
 8008a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a42:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008a46:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <HAL_RCC_ClockConfig+0x1c0>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fd fd84 	bl	8006558 <HAL_InitTick>
 8008a50:	4603      	mov	r3, r0
 8008a52:	72fb      	strb	r3, [r7, #11]

  return status;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	40022000 	.word	0x40022000
 8008a64:	40021000 	.word	0x40021000
 8008a68:	0801a954 	.word	0x0801a954
 8008a6c:	2000000c 	.word	0x2000000c
 8008a70:	200000e8 	.word	0x200000e8

08008a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b089      	sub	sp, #36	; 0x24
 8008a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a82:	4b3e      	ldr	r3, [pc, #248]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 030c 	and.w	r3, r3, #12
 8008a8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a8c:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2b0c      	cmp	r3, #12
 8008aa0:	d121      	bne.n	8008ae6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d11e      	bne.n	8008ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008aa8:	4b34      	ldr	r3, [pc, #208]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0308 	and.w	r3, r3, #8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d107      	bne.n	8008ac4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ab4:	4b31      	ldr	r3, [pc, #196]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008aba:	0a1b      	lsrs	r3, r3, #8
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	e005      	b.n	8008ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008ac4:	4b2d      	ldr	r3, [pc, #180]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ad0:	4a2b      	ldr	r2, [pc, #172]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ad8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10d      	bne.n	8008afc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ae4:	e00a      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d102      	bne.n	8008af2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008aec:	4b25      	ldr	r3, [pc, #148]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	e004      	b.n	8008afc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d101      	bne.n	8008afc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008af8:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8008afa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b0c      	cmp	r3, #12
 8008b00:	d134      	bne.n	8008b6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d003      	beq.n	8008b1a <HAL_RCC_GetSysClockFreq+0xa6>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d003      	beq.n	8008b20 <HAL_RCC_GetSysClockFreq+0xac>
 8008b18:	e005      	b.n	8008b26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008b1a:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x110>)
 8008b1c:	617b      	str	r3, [r7, #20]
      break;
 8008b1e:	e005      	b.n	8008b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008b20:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x114>)
 8008b22:	617b      	str	r3, [r7, #20]
      break;
 8008b24:	e002      	b.n	8008b2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	617b      	str	r3, [r7, #20]
      break;
 8008b2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b2c:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	091b      	lsrs	r3, r3, #4
 8008b32:	f003 0307 	and.w	r3, r3, #7
 8008b36:	3301      	adds	r3, #1
 8008b38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008b3a:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	0a1b      	lsrs	r3, r3, #8
 8008b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	fb02 f203 	mul.w	r2, r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b52:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x108>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	0e5b      	lsrs	r3, r3, #25
 8008b58:	f003 0303 	and.w	r3, r3, #3
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3724      	adds	r7, #36	; 0x24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	0801a96c 	.word	0x0801a96c
 8008b84:	00f42400 	.word	0x00f42400
 8008b88:	007a1200 	.word	0x007a1200

08008b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b92:	681b      	ldr	r3, [r3, #0]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	2000000c 	.word	0x2000000c

08008ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ba8:	f7ff fff0 	bl	8008b8c <HAL_RCC_GetHCLKFreq>
 8008bac:	4602      	mov	r2, r0
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	0a1b      	lsrs	r3, r3, #8
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	4904      	ldr	r1, [pc, #16]	; (8008bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bba:	5ccb      	ldrb	r3, [r1, r3]
 8008bbc:	f003 031f 	and.w	r3, r3, #31
 8008bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	40021000 	.word	0x40021000
 8008bcc:	0801a964 	.word	0x0801a964

08008bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bd4:	f7ff ffda 	bl	8008b8c <HAL_RCC_GetHCLKFreq>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	0adb      	lsrs	r3, r3, #11
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	4904      	ldr	r1, [pc, #16]	; (8008bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008be6:	5ccb      	ldrb	r3, [r1, r3]
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	40021000 	.word	0x40021000
 8008bf8:	0801a964 	.word	0x0801a964

08008bfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008c04:	2300      	movs	r3, #0
 8008c06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008c08:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008c14:	f7ff fa02 	bl	800801c <HAL_PWREx_GetVoltageRange>
 8008c18:	6178      	str	r0, [r7, #20]
 8008c1a:	e014      	b.n	8008c46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c1c:	4b25      	ldr	r3, [pc, #148]	; (8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c20:	4a24      	ldr	r2, [pc, #144]	; (8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c26:	6593      	str	r3, [r2, #88]	; 0x58
 8008c28:	4b22      	ldr	r3, [pc, #136]	; (8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c30:	60fb      	str	r3, [r7, #12]
 8008c32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008c34:	f7ff f9f2 	bl	800801c <HAL_PWREx_GetVoltageRange>
 8008c38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008c3a:	4b1e      	ldr	r3, [pc, #120]	; (8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3e:	4a1d      	ldr	r2, [pc, #116]	; (8008cb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c4c:	d10b      	bne.n	8008c66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b80      	cmp	r3, #128	; 0x80
 8008c52:	d919      	bls.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2ba0      	cmp	r3, #160	; 0xa0
 8008c58:	d902      	bls.n	8008c60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	e013      	b.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c60:	2301      	movs	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
 8008c64:	e010      	b.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b80      	cmp	r3, #128	; 0x80
 8008c6a:	d902      	bls.n	8008c72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	e00a      	b.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b80      	cmp	r3, #128	; 0x80
 8008c76:	d102      	bne.n	8008c7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c78:	2302      	movs	r3, #2
 8008c7a:	613b      	str	r3, [r7, #16]
 8008c7c:	e004      	b.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b70      	cmp	r3, #112	; 0x70
 8008c82:	d101      	bne.n	8008c88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c84:	2301      	movs	r3, #1
 8008c86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c88:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f023 0207 	bic.w	r2, r3, #7
 8008c90:	4909      	ldr	r1, [pc, #36]	; (8008cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008c98:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d001      	beq.n	8008caa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e000      	b.n	8008cac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40021000 	.word	0x40021000
 8008cb8:	40022000 	.word	0x40022000

08008cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cc8:	2300      	movs	r3, #0
 8008cca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d041      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ce0:	d02a      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ce2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008ce6:	d824      	bhi.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ce8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cec:	d008      	beq.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008cee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cf2:	d81e      	bhi.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008cf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cfc:	d010      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cfe:	e018      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d00:	4b86      	ldr	r3, [pc, #536]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4a85      	ldr	r2, [pc, #532]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d0c:	e015      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	3304      	adds	r3, #4
 8008d12:	2100      	movs	r1, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fabb 	bl	8009290 <RCCEx_PLLSAI1_Config>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d1e:	e00c      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3320      	adds	r3, #32
 8008d24:	2100      	movs	r1, #0
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fba6 	bl	8009478 <RCCEx_PLLSAI2_Config>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008d30:	e003      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	74fb      	strb	r3, [r7, #19]
      break;
 8008d36:	e000      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d3a:	7cfb      	ldrb	r3, [r7, #19]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d40:	4b76      	ldr	r3, [pc, #472]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d4e:	4973      	ldr	r1, [pc, #460]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008d56:	e001      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d58:	7cfb      	ldrb	r3, [r7, #19]
 8008d5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d041      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d70:	d02a      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008d72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d76:	d824      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d7c:	d008      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d82:	d81e      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00a      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d8c:	d010      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008d8e:	e018      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d90:	4b62      	ldr	r3, [pc, #392]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	4a61      	ldr	r2, [pc, #388]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d9c:	e015      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3304      	adds	r3, #4
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 fa73 	bl	8009290 <RCCEx_PLLSAI1_Config>
 8008daa:	4603      	mov	r3, r0
 8008dac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008dae:	e00c      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3320      	adds	r3, #32
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fb5e 	bl	8009478 <RCCEx_PLLSAI2_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008dc0:	e003      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	74fb      	strb	r3, [r7, #19]
      break;
 8008dc6:	e000      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dca:	7cfb      	ldrb	r3, [r7, #19]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008dd0:	4b52      	ldr	r3, [pc, #328]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dde:	494f      	ldr	r1, [pc, #316]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008de6:	e001      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de8:	7cfb      	ldrb	r3, [r7, #19]
 8008dea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 80a0 	beq.w	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008dfe:	4b47      	ldr	r3, [pc, #284]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e000      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00d      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e14:	4b41      	ldr	r3, [pc, #260]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e18:	4a40      	ldr	r2, [pc, #256]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8008e20:	4b3e      	ldr	r3, [pc, #248]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e28:	60bb      	str	r3, [r7, #8]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e30:	4b3b      	ldr	r3, [pc, #236]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a3a      	ldr	r2, [pc, #232]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e3c:	f7fd fbdc 	bl	80065f8 <HAL_GetTick>
 8008e40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e42:	e009      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e44:	f7fd fbd8 	bl	80065f8 <HAL_GetTick>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d902      	bls.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	74fb      	strb	r3, [r7, #19]
        break;
 8008e56:	e005      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e58:	4b31      	ldr	r3, [pc, #196]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d0ef      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008e64:	7cfb      	ldrb	r3, [r7, #19]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d15c      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01f      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d019      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e88:	4b24      	ldr	r3, [pc, #144]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e94:	4b21      	ldr	r3, [pc, #132]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9a:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ea4:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eaa:	4a1c      	ldr	r2, [pc, #112]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008eb4:	4a19      	ldr	r2, [pc, #100]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d016      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec6:	f7fd fb97 	bl	80065f8 <HAL_GetTick>
 8008eca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ecc:	e00b      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ece:	f7fd fb93 	bl	80065f8 <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d902      	bls.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	74fb      	strb	r3, [r7, #19]
            break;
 8008ee4:	e006      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ee6:	4b0d      	ldr	r3, [pc, #52]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0ec      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008ef4:	7cfb      	ldrb	r3, [r7, #19]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f0a:	4904      	ldr	r1, [pc, #16]	; (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008f12:	e009      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f14:	7cfb      	ldrb	r3, [r7, #19]
 8008f16:	74bb      	strb	r3, [r7, #18]
 8008f18:	e006      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008f1a:	bf00      	nop
 8008f1c:	40021000 	.word	0x40021000
 8008f20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f24:	7cfb      	ldrb	r3, [r7, #19]
 8008f26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f28:	7c7b      	ldrb	r3, [r7, #17]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d105      	bne.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f2e:	4b9e      	ldr	r3, [pc, #632]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	4a9d      	ldr	r2, [pc, #628]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f46:	4b98      	ldr	r3, [pc, #608]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4c:	f023 0203 	bic.w	r2, r3, #3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	4994      	ldr	r1, [pc, #592]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f68:	4b8f      	ldr	r3, [pc, #572]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	f023 020c 	bic.w	r2, r3, #12
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f76:	498c      	ldr	r1, [pc, #560]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0304 	and.w	r3, r3, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f8a:	4b87      	ldr	r3, [pc, #540]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	4983      	ldr	r1, [pc, #524]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fac:	4b7e      	ldr	r3, [pc, #504]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	497b      	ldr	r1, [pc, #492]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fce:	4b76      	ldr	r3, [pc, #472]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fdc:	4972      	ldr	r1, [pc, #456]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ff0:	4b6d      	ldr	r3, [pc, #436]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffe:	496a      	ldr	r1, [pc, #424]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009012:	4b65      	ldr	r3, [pc, #404]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009020:	4961      	ldr	r1, [pc, #388]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009034:	4b5c      	ldr	r3, [pc, #368]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009042:	4959      	ldr	r1, [pc, #356]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009044:	4313      	orrs	r3, r2
 8009046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009056:	4b54      	ldr	r3, [pc, #336]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009064:	4950      	ldr	r1, [pc, #320]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009066:	4313      	orrs	r3, r2
 8009068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00a      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009078:	4b4b      	ldr	r3, [pc, #300]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800907a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009086:	4948      	ldr	r1, [pc, #288]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800909a:	4b43      	ldr	r3, [pc, #268]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800909c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a8:	493f      	ldr	r1, [pc, #252]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d028      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090bc:	4b3a      	ldr	r3, [pc, #232]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ca:	4937      	ldr	r1, [pc, #220]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090da:	d106      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090dc:	4b32      	ldr	r3, [pc, #200]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4a31      	ldr	r2, [pc, #196]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e6:	60d3      	str	r3, [r2, #12]
 80090e8:	e011      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090f2:	d10c      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	3304      	adds	r3, #4
 80090f8:	2101      	movs	r1, #1
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f8c8 	bl	8009290 <RCCEx_PLLSAI1_Config>
 8009100:	4603      	mov	r3, r0
 8009102:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009104:	7cfb      	ldrb	r3, [r7, #19]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800910a:	7cfb      	ldrb	r3, [r7, #19]
 800910c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d028      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800911a:	4b23      	ldr	r3, [pc, #140]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800911c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009120:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009128:	491f      	ldr	r1, [pc, #124]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800912a:	4313      	orrs	r3, r2
 800912c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009138:	d106      	bne.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800913a:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	4a1a      	ldr	r2, [pc, #104]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009144:	60d3      	str	r3, [r2, #12]
 8009146:	e011      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009150:	d10c      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3304      	adds	r3, #4
 8009156:	2101      	movs	r1, #1
 8009158:	4618      	mov	r0, r3
 800915a:	f000 f899 	bl	8009290 <RCCEx_PLLSAI1_Config>
 800915e:	4603      	mov	r3, r0
 8009160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009162:	7cfb      	ldrb	r3, [r7, #19]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009168:	7cfb      	ldrb	r3, [r7, #19]
 800916a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d02b      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009178:	4b0b      	ldr	r3, [pc, #44]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800917e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009186:	4908      	ldr	r1, [pc, #32]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009188:	4313      	orrs	r3, r2
 800918a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009196:	d109      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009198:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	4a02      	ldr	r2, [pc, #8]	; (80091a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800919e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091a2:	60d3      	str	r3, [r2, #12]
 80091a4:	e014      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80091a6:	bf00      	nop
 80091a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80091b4:	d10c      	bne.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	3304      	adds	r3, #4
 80091ba:	2101      	movs	r1, #1
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 f867 	bl	8009290 <RCCEx_PLLSAI1_Config>
 80091c2:	4603      	mov	r3, r0
 80091c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091c6:	7cfb      	ldrb	r3, [r7, #19]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80091cc:	7cfb      	ldrb	r3, [r7, #19]
 80091ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d02f      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091dc:	4b2b      	ldr	r3, [pc, #172]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091ea:	4928      	ldr	r1, [pc, #160]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091ec:	4313      	orrs	r3, r2
 80091ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091fa:	d10d      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	3304      	adds	r3, #4
 8009200:	2102      	movs	r1, #2
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f844 	bl	8009290 <RCCEx_PLLSAI1_Config>
 8009208:	4603      	mov	r3, r0
 800920a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800920c:	7cfb      	ldrb	r3, [r7, #19]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d014      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009212:	7cfb      	ldrb	r3, [r7, #19]
 8009214:	74bb      	strb	r3, [r7, #18]
 8009216:	e011      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800921c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009220:	d10c      	bne.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3320      	adds	r3, #32
 8009226:	2102      	movs	r1, #2
 8009228:	4618      	mov	r0, r3
 800922a:	f000 f925 	bl	8009478 <RCCEx_PLLSAI2_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009232:	7cfb      	ldrb	r3, [r7, #19]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009238:	7cfb      	ldrb	r3, [r7, #19]
 800923a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009248:	4b10      	ldr	r3, [pc, #64]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800924a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009256:	490d      	ldr	r1, [pc, #52]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009258:	4313      	orrs	r3, r2
 800925a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00b      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800926a:	4b08      	ldr	r3, [pc, #32]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800926c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009270:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927a:	4904      	ldr	r1, [pc, #16]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800927c:	4313      	orrs	r3, r2
 800927e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009282:	7cbb      	ldrb	r3, [r7, #18]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40021000 	.word	0x40021000

08009290 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800929e:	4b75      	ldr	r3, [pc, #468]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d018      	beq.n	80092dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80092aa:	4b72      	ldr	r3, [pc, #456]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	f003 0203 	and.w	r2, r3, #3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d10d      	bne.n	80092d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
       ||
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80092c2:	4b6c      	ldr	r3, [pc, #432]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	091b      	lsrs	r3, r3, #4
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
       ||
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d047      	beq.n	8009366 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]
 80092da:	e044      	b.n	8009366 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d018      	beq.n	8009316 <RCCEx_PLLSAI1_Config+0x86>
 80092e4:	2b03      	cmp	r3, #3
 80092e6:	d825      	bhi.n	8009334 <RCCEx_PLLSAI1_Config+0xa4>
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d002      	beq.n	80092f2 <RCCEx_PLLSAI1_Config+0x62>
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d009      	beq.n	8009304 <RCCEx_PLLSAI1_Config+0x74>
 80092f0:	e020      	b.n	8009334 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80092f2:	4b60      	ldr	r3, [pc, #384]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d11d      	bne.n	800933a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009302:	e01a      	b.n	800933a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009304:	4b5b      	ldr	r3, [pc, #364]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800930c:	2b00      	cmp	r3, #0
 800930e:	d116      	bne.n	800933e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009314:	e013      	b.n	800933e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009316:	4b57      	ldr	r3, [pc, #348]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10f      	bne.n	8009342 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009322:	4b54      	ldr	r3, [pc, #336]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009332:	e006      	b.n	8009342 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	73fb      	strb	r3, [r7, #15]
      break;
 8009338:	e004      	b.n	8009344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800933a:	bf00      	nop
 800933c:	e002      	b.n	8009344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800933e:	bf00      	nop
 8009340:	e000      	b.n	8009344 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009342:	bf00      	nop
    }

    if(status == HAL_OK)
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d10d      	bne.n	8009366 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800934a:	4b4a      	ldr	r3, [pc, #296]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6819      	ldr	r1, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	3b01      	subs	r3, #1
 800935c:	011b      	lsls	r3, r3, #4
 800935e:	430b      	orrs	r3, r1
 8009360:	4944      	ldr	r1, [pc, #272]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009362:	4313      	orrs	r3, r2
 8009364:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d17d      	bne.n	8009468 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800936c:	4b41      	ldr	r3, [pc, #260]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a40      	ldr	r2, [pc, #256]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009378:	f7fd f93e 	bl	80065f8 <HAL_GetTick>
 800937c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800937e:	e009      	b.n	8009394 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009380:	f7fd f93a 	bl	80065f8 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b02      	cmp	r3, #2
 800938c:	d902      	bls.n	8009394 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	73fb      	strb	r3, [r7, #15]
        break;
 8009392:	e005      	b.n	80093a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009394:	4b37      	ldr	r3, [pc, #220]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1ef      	bne.n	8009380 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d160      	bne.n	8009468 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d111      	bne.n	80093d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093ac:	4b31      	ldr	r3, [pc, #196]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80093b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6892      	ldr	r2, [r2, #8]
 80093bc:	0211      	lsls	r1, r2, #8
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	68d2      	ldr	r2, [r2, #12]
 80093c2:	0912      	lsrs	r2, r2, #4
 80093c4:	0452      	lsls	r2, r2, #17
 80093c6:	430a      	orrs	r2, r1
 80093c8:	492a      	ldr	r1, [pc, #168]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	610b      	str	r3, [r1, #16]
 80093ce:	e027      	b.n	8009420 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d112      	bne.n	80093fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093d6:	4b27      	ldr	r3, [pc, #156]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80093de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6892      	ldr	r2, [r2, #8]
 80093e6:	0211      	lsls	r1, r2, #8
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	6912      	ldr	r2, [r2, #16]
 80093ec:	0852      	lsrs	r2, r2, #1
 80093ee:	3a01      	subs	r2, #1
 80093f0:	0552      	lsls	r2, r2, #21
 80093f2:	430a      	orrs	r2, r1
 80093f4:	491f      	ldr	r1, [pc, #124]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	610b      	str	r3, [r1, #16]
 80093fa:	e011      	b.n	8009420 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093fc:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009404:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6892      	ldr	r2, [r2, #8]
 800940c:	0211      	lsls	r1, r2, #8
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6952      	ldr	r2, [r2, #20]
 8009412:	0852      	lsrs	r2, r2, #1
 8009414:	3a01      	subs	r2, #1
 8009416:	0652      	lsls	r2, r2, #25
 8009418:	430a      	orrs	r2, r1
 800941a:	4916      	ldr	r1, [pc, #88]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800941c:	4313      	orrs	r3, r2
 800941e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009420:	4b14      	ldr	r3, [pc, #80]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a13      	ldr	r2, [pc, #76]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800942a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942c:	f7fd f8e4 	bl	80065f8 <HAL_GetTick>
 8009430:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009432:	e009      	b.n	8009448 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009434:	f7fd f8e0 	bl	80065f8 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	2b02      	cmp	r3, #2
 8009440:	d902      	bls.n	8009448 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	73fb      	strb	r3, [r7, #15]
          break;
 8009446:	e005      	b.n	8009454 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009448:	4b0a      	ldr	r3, [pc, #40]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d0ef      	beq.n	8009434 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009454:	7bfb      	ldrb	r3, [r7, #15]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d106      	bne.n	8009468 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800945a:	4b06      	ldr	r3, [pc, #24]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	4904      	ldr	r1, [pc, #16]	; (8009474 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009464:	4313      	orrs	r3, r2
 8009466:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	40021000 	.word	0x40021000

08009478 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009486:	4b6a      	ldr	r3, [pc, #424]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0303 	and.w	r3, r3, #3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d018      	beq.n	80094c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009492:	4b67      	ldr	r3, [pc, #412]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f003 0203 	and.w	r2, r3, #3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d10d      	bne.n	80094be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
       ||
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80094aa:	4b61      	ldr	r3, [pc, #388]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	091b      	lsrs	r3, r3, #4
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
       ||
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d047      	beq.n	800954e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	73fb      	strb	r3, [r7, #15]
 80094c2:	e044      	b.n	800954e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d018      	beq.n	80094fe <RCCEx_PLLSAI2_Config+0x86>
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d825      	bhi.n	800951c <RCCEx_PLLSAI2_Config+0xa4>
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d002      	beq.n	80094da <RCCEx_PLLSAI2_Config+0x62>
 80094d4:	2b02      	cmp	r3, #2
 80094d6:	d009      	beq.n	80094ec <RCCEx_PLLSAI2_Config+0x74>
 80094d8:	e020      	b.n	800951c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80094da:	4b55      	ldr	r3, [pc, #340]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d11d      	bne.n	8009522 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094ea:	e01a      	b.n	8009522 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094ec:	4b50      	ldr	r3, [pc, #320]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d116      	bne.n	8009526 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094fc:	e013      	b.n	8009526 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094fe:	4b4c      	ldr	r3, [pc, #304]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10f      	bne.n	800952a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800950a:	4b49      	ldr	r3, [pc, #292]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800951a:	e006      	b.n	800952a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
      break;
 8009520:	e004      	b.n	800952c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009522:	bf00      	nop
 8009524:	e002      	b.n	800952c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009526:	bf00      	nop
 8009528:	e000      	b.n	800952c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800952a:	bf00      	nop
    }

    if(status == HAL_OK)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10d      	bne.n	800954e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009532:	4b3f      	ldr	r3, [pc, #252]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6819      	ldr	r1, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	3b01      	subs	r3, #1
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	430b      	orrs	r3, r1
 8009548:	4939      	ldr	r1, [pc, #228]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800954a:	4313      	orrs	r3, r2
 800954c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d167      	bne.n	8009624 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009554:	4b36      	ldr	r3, [pc, #216]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a35      	ldr	r2, [pc, #212]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800955a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800955e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009560:	f7fd f84a 	bl	80065f8 <HAL_GetTick>
 8009564:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009566:	e009      	b.n	800957c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009568:	f7fd f846 	bl	80065f8 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	2b02      	cmp	r3, #2
 8009574:	d902      	bls.n	800957c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009576:	2303      	movs	r3, #3
 8009578:	73fb      	strb	r3, [r7, #15]
        break;
 800957a:	e005      	b.n	8009588 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800957c:	4b2c      	ldr	r3, [pc, #176]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1ef      	bne.n	8009568 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d14a      	bne.n	8009624 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d111      	bne.n	80095b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009594:	4b26      	ldr	r3, [pc, #152]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009596:	695b      	ldr	r3, [r3, #20]
 8009598:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800959c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6892      	ldr	r2, [r2, #8]
 80095a4:	0211      	lsls	r1, r2, #8
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68d2      	ldr	r2, [r2, #12]
 80095aa:	0912      	lsrs	r2, r2, #4
 80095ac:	0452      	lsls	r2, r2, #17
 80095ae:	430a      	orrs	r2, r1
 80095b0:	491f      	ldr	r1, [pc, #124]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	614b      	str	r3, [r1, #20]
 80095b6:	e011      	b.n	80095dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80095b8:	4b1d      	ldr	r3, [pc, #116]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80095c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6892      	ldr	r2, [r2, #8]
 80095c8:	0211      	lsls	r1, r2, #8
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6912      	ldr	r2, [r2, #16]
 80095ce:	0852      	lsrs	r2, r2, #1
 80095d0:	3a01      	subs	r2, #1
 80095d2:	0652      	lsls	r2, r2, #25
 80095d4:	430a      	orrs	r2, r1
 80095d6:	4916      	ldr	r1, [pc, #88]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80095dc:	4b14      	ldr	r3, [pc, #80]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a13      	ldr	r2, [pc, #76]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e8:	f7fd f806 	bl	80065f8 <HAL_GetTick>
 80095ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095ee:	e009      	b.n	8009604 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80095f0:	f7fd f802 	bl	80065f8 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d902      	bls.n	8009604 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	73fb      	strb	r3, [r7, #15]
          break;
 8009602:	e005      	b.n	8009610 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0ef      	beq.n	80095f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009616:	4b06      	ldr	r3, [pc, #24]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009618:	695a      	ldr	r2, [r3, #20]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	4904      	ldr	r1, [pc, #16]	; (8009630 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009620:	4313      	orrs	r3, r2
 8009622:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	40021000 	.word	0x40021000

08009634 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d06c      	beq.n	8009720 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7f8 ffc8 	bl	80025f0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	22ca      	movs	r2, #202	; 0xca
 800966e:	625a      	str	r2, [r3, #36]	; 0x24
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2253      	movs	r2, #83	; 0x53
 8009676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f9a0 	bl	80099be <RTC_EnterInitMode>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d14b      	bne.n	8009720 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6812      	ldr	r2, [r2, #0]
 8009692:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800969a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6899      	ldr	r1, [r3, #8]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	430a      	orrs	r2, r1
 80096b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	68d2      	ldr	r2, [r2, #12]
 80096c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6919      	ldr	r1, [r3, #16]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	041a      	lsls	r2, r3, #16
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f9a3 	bl	8009a24 <RTC_ExitInitMode>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11b      	bne.n	8009720 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f022 0203 	bic.w	r2, r2, #3
 80096f6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	69da      	ldr	r2, [r3, #28]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	430a      	orrs	r2, r1
 800970e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	22ff      	movs	r2, #255	; 0xff
 8009716:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009720:	7bfb      	ldrb	r3, [r7, #15]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800972a:	b590      	push	{r4, r7, lr}
 800972c:	b087      	sub	sp, #28
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_RTC_SetTime+0x1a>
 8009740:	2302      	movs	r3, #2
 8009742:	e08b      	b.n	800985c <HAL_RTC_SetTime+0x132>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2202      	movs	r2, #2
 8009750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	22ca      	movs	r2, #202	; 0xca
 800975a:	625a      	str	r2, [r3, #36]	; 0x24
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2253      	movs	r2, #83	; 0x53
 8009762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f92a 	bl	80099be <RTC_EnterInitMode>
 800976a:	4603      	mov	r3, r0
 800976c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800976e:	7cfb      	ldrb	r3, [r7, #19]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d163      	bne.n	800983c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d126      	bne.n	80097c8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2200      	movs	r2, #0
 800978c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f984 	bl	8009aa0 <RTC_ByteToBcd2>
 8009798:	4603      	mov	r3, r0
 800979a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f000 f97d 	bl	8009aa0 <RTC_ByteToBcd2>
 80097a6:	4603      	mov	r3, r0
 80097a8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097aa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	789b      	ldrb	r3, [r3, #2]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f000 f975 	bl	8009aa0 <RTC_ByteToBcd2>
 80097b6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097b8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	78db      	ldrb	r3, [r3, #3]
 80097c0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	e018      	b.n	80097fa <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2200      	movs	r2, #0
 80097da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097e8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80097ee:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	78db      	ldrb	r3, [r3, #3]
 80097f4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80097f6:	4313      	orrs	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009804:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009808:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009818:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6899      	ldr	r1, [r3, #8]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	431a      	orrs	r2, r3
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 f8f6 	bl	8009a24 <RTC_ExitInitMode>
 8009838:	4603      	mov	r3, r0
 800983a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	22ff      	movs	r2, #255	; 0xff
 8009842:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009844:	7cfb      	ldrb	r3, [r7, #19]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d103      	bne.n	8009852 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800985a:	7cfb      	ldrb	r3, [r7, #19]
}
 800985c:	4618      	mov	r0, r3
 800985e:	371c      	adds	r7, #28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd90      	pop	{r4, r7, pc}

08009864 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d101      	bne.n	800987e <HAL_RTC_SetDate+0x1a>
 800987a:	2302      	movs	r3, #2
 800987c:	e075      	b.n	800996a <HAL_RTC_SetDate+0x106>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10e      	bne.n	80098b2 <HAL_RTC_SetDate+0x4e>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	785b      	ldrb	r3, [r3, #1]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	f023 0310 	bic.w	r3, r3, #16
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	330a      	adds	r3, #10
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d11c      	bne.n	80098f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	78db      	ldrb	r3, [r3, #3]
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 f8ef 	bl	8009aa0 <RTC_ByteToBcd2>
 80098c2:	4603      	mov	r3, r0
 80098c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f000 f8e8 	bl	8009aa0 <RTC_ByteToBcd2>
 80098d0:	4603      	mov	r3, r0
 80098d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	789b      	ldrb	r3, [r3, #2]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 f8e0 	bl	8009aa0 <RTC_ByteToBcd2>
 80098e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80098e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	e00e      	b.n	8009910 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	78db      	ldrb	r3, [r3, #3]
 80098f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098fe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009904:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	22ca      	movs	r2, #202	; 0xca
 8009916:	625a      	str	r2, [r3, #36]	; 0x24
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2253      	movs	r2, #83	; 0x53
 800991e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f84c 	bl	80099be <RTC_EnterInitMode>
 8009926:	4603      	mov	r3, r0
 8009928:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800992a:	7cfb      	ldrb	r3, [r7, #19]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10c      	bne.n	800994a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800993a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800993e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f86f 	bl	8009a24 <RTC_ExitInitMode>
 8009946:	4603      	mov	r3, r0
 8009948:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	22ff      	movs	r2, #255	; 0xff
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009952:	7cfb      	ldrb	r3, [r7, #19]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009968:	7cfb      	ldrb	r3, [r7, #19]
}
 800996a:	4618      	mov	r0, r3
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd90      	pop	{r4, r7, pc}

08009972 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68da      	ldr	r2, [r3, #12]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009988:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800998a:	f7fc fe35 	bl	80065f8 <HAL_GetTick>
 800998e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009990:	e009      	b.n	80099a6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009992:	f7fc fe31 	bl	80065f8 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099a0:	d901      	bls.n	80099a6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e007      	b.n	80099b6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d0ee      	beq.n	8009992 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d120      	bne.n	8009a1a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f04f 32ff 	mov.w	r2, #4294967295
 80099e0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80099e2:	f7fc fe09 	bl	80065f8 <HAL_GetTick>
 80099e6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80099e8:	e00d      	b.n	8009a06 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80099ea:	f7fc fe05 	bl	80065f8 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099f8:	d905      	bls.n	8009a06 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2203      	movs	r2, #3
 8009a02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <RTC_EnterInitMode+0x5c>
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d1e7      	bne.n	80099ea <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009a30:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	4a19      	ldr	r2, [pc, #100]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a3a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009a3c:	4b17      	ldr	r3, [pc, #92]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f003 0320 	and.w	r3, r3, #32
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10c      	bne.n	8009a62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff ff92 	bl	8009972 <HAL_RTC_WaitForSynchro>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d01e      	beq.n	8009a92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2203      	movs	r2, #3
 8009a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	73fb      	strb	r3, [r7, #15]
 8009a60:	e017      	b.n	8009a92 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a62:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	4a0d      	ldr	r2, [pc, #52]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a68:	f023 0320 	bic.w	r3, r3, #32
 8009a6c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7ff ff7f 	bl	8009972 <HAL_RTC_WaitForSynchro>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d005      	beq.n	8009a86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2203      	movs	r2, #3
 8009a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a86:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	4a04      	ldr	r2, [pc, #16]	; (8009a9c <RTC_ExitInitMode+0x78>)
 8009a8c:	f043 0320 	orr.w	r3, r3, #32
 8009a90:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	40002800 	.word	0x40002800

08009aa0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009ab2:	e005      	b.n	8009ac0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	3b0a      	subs	r3, #10
 8009abe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d8f6      	bhi.n	8009ab4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	7afb      	ldrb	r3, [r7, #11]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	b2db      	uxtb	r3, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e049      	b.n	8009b86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d106      	bne.n	8009b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7f9 f8c4 	bl	8002c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4610      	mov	r0, r2
 8009b20:	f000 fae0 	bl	800a0e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d001      	beq.n	8009ba8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e047      	b.n	8009c38 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a23      	ldr	r2, [pc, #140]	; (8009c44 <HAL_TIM_Base_Start+0xb4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d01d      	beq.n	8009bf6 <HAL_TIM_Base_Start+0x66>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc2:	d018      	beq.n	8009bf6 <HAL_TIM_Base_Start+0x66>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a1f      	ldr	r2, [pc, #124]	; (8009c48 <HAL_TIM_Base_Start+0xb8>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d013      	beq.n	8009bf6 <HAL_TIM_Base_Start+0x66>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1e      	ldr	r2, [pc, #120]	; (8009c4c <HAL_TIM_Base_Start+0xbc>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d00e      	beq.n	8009bf6 <HAL_TIM_Base_Start+0x66>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a1c      	ldr	r2, [pc, #112]	; (8009c50 <HAL_TIM_Base_Start+0xc0>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d009      	beq.n	8009bf6 <HAL_TIM_Base_Start+0x66>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1b      	ldr	r2, [pc, #108]	; (8009c54 <HAL_TIM_Base_Start+0xc4>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d004      	beq.n	8009bf6 <HAL_TIM_Base_Start+0x66>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a19      	ldr	r2, [pc, #100]	; (8009c58 <HAL_TIM_Base_Start+0xc8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d115      	bne.n	8009c22 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	689a      	ldr	r2, [r3, #8]
 8009bfc:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <HAL_TIM_Base_Start+0xcc>)
 8009bfe:	4013      	ands	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b06      	cmp	r3, #6
 8009c06:	d015      	beq.n	8009c34 <HAL_TIM_Base_Start+0xa4>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0e:	d011      	beq.n	8009c34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0201 	orr.w	r2, r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c20:	e008      	b.n	8009c34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f042 0201 	orr.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	e000      	b.n	8009c36 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	40012c00 	.word	0x40012c00
 8009c48:	40000400 	.word	0x40000400
 8009c4c:	40000800 	.word	0x40000800
 8009c50:	40000c00 	.word	0x40000c00
 8009c54:	40013400 	.word	0x40013400
 8009c58:	40014000 	.word	0x40014000
 8009c5c:	00010007 	.word	0x00010007

08009c60 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6a1a      	ldr	r2, [r3, #32]
 8009c6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c72:	4013      	ands	r3, r2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10f      	bne.n	8009c98 <HAL_TIM_Base_Stop+0x38>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6a1a      	ldr	r2, [r3, #32]
 8009c7e:	f240 4344 	movw	r3, #1092	; 0x444
 8009c82:	4013      	ands	r3, r2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <HAL_TIM_Base_Stop+0x38>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0201 	bic.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d122      	bne.n	8009d0a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d11b      	bne.n	8009d0a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f06f 0202 	mvn.w	r2, #2
 8009cda:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	f003 0303 	and.w	r3, r3, #3
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d003      	beq.n	8009cf8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f9d8 	bl	800a0a6 <HAL_TIM_IC_CaptureCallback>
 8009cf6:	e005      	b.n	8009d04 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f9ca 	bl	800a092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f9db 	bl	800a0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d122      	bne.n	8009d5e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f003 0304 	and.w	r3, r3, #4
 8009d22:	2b04      	cmp	r3, #4
 8009d24:	d11b      	bne.n	8009d5e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f06f 0204 	mvn.w	r2, #4
 8009d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 f9ae 	bl	800a0a6 <HAL_TIM_IC_CaptureCallback>
 8009d4a:	e005      	b.n	8009d58 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 f9a0 	bl	800a092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f9b1 	bl	800a0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d122      	bne.n	8009db2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b08      	cmp	r3, #8
 8009d78:	d11b      	bne.n	8009db2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f06f 0208 	mvn.w	r2, #8
 8009d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2204      	movs	r2, #4
 8009d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d003      	beq.n	8009da0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f984 	bl	800a0a6 <HAL_TIM_IC_CaptureCallback>
 8009d9e:	e005      	b.n	8009dac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f976 	bl	800a092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f987 	bl	800a0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f003 0310 	and.w	r3, r3, #16
 8009dbc:	2b10      	cmp	r3, #16
 8009dbe:	d122      	bne.n	8009e06 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f003 0310 	and.w	r3, r3, #16
 8009dca:	2b10      	cmp	r3, #16
 8009dcc:	d11b      	bne.n	8009e06 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f06f 0210 	mvn.w	r2, #16
 8009dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2208      	movs	r2, #8
 8009ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f95a 	bl	800a0a6 <HAL_TIM_IC_CaptureCallback>
 8009df2:	e005      	b.n	8009e00 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f94c 	bl	800a092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f95d 	bl	800a0ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d10e      	bne.n	8009e32 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d107      	bne.n	8009e32 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f06f 0201 	mvn.w	r2, #1
 8009e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f926 	bl	800a07e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3c:	2b80      	cmp	r3, #128	; 0x80
 8009e3e:	d10e      	bne.n	8009e5e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4a:	2b80      	cmp	r3, #128	; 0x80
 8009e4c:	d107      	bne.n	8009e5e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fb09 	bl	800a470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6c:	d10e      	bne.n	8009e8c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e78:	2b80      	cmp	r3, #128	; 0x80
 8009e7a:	d107      	bne.n	8009e8c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fafc 	bl	800a484 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d10e      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea4:	2b40      	cmp	r3, #64	; 0x40
 8009ea6:	d107      	bne.n	8009eb8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f90b 	bl	800a0ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	f003 0320 	and.w	r3, r3, #32
 8009ec2:	2b20      	cmp	r3, #32
 8009ec4:	d10e      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d107      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f06f 0220 	mvn.w	r2, #32
 8009edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fabc 	bl	800a45c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_TIM_ConfigClockSource+0x1c>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e0b6      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x18a>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f44:	d03e      	beq.n	8009fc4 <HAL_TIM_ConfigClockSource+0xd8>
 8009f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f4a:	f200 8087 	bhi.w	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f52:	f000 8086 	beq.w	800a062 <HAL_TIM_ConfigClockSource+0x176>
 8009f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5a:	d87f      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f5c:	2b70      	cmp	r3, #112	; 0x70
 8009f5e:	d01a      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0xaa>
 8009f60:	2b70      	cmp	r3, #112	; 0x70
 8009f62:	d87b      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f64:	2b60      	cmp	r3, #96	; 0x60
 8009f66:	d050      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x11e>
 8009f68:	2b60      	cmp	r3, #96	; 0x60
 8009f6a:	d877      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f6c:	2b50      	cmp	r3, #80	; 0x50
 8009f6e:	d03c      	beq.n	8009fea <HAL_TIM_ConfigClockSource+0xfe>
 8009f70:	2b50      	cmp	r3, #80	; 0x50
 8009f72:	d873      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f74:	2b40      	cmp	r3, #64	; 0x40
 8009f76:	d058      	beq.n	800a02a <HAL_TIM_ConfigClockSource+0x13e>
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d86f      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f7c:	2b30      	cmp	r3, #48	; 0x30
 8009f7e:	d064      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15e>
 8009f80:	2b30      	cmp	r3, #48	; 0x30
 8009f82:	d86b      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f84:	2b20      	cmp	r3, #32
 8009f86:	d060      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15e>
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d867      	bhi.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05c      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15e>
 8009f90:	2b10      	cmp	r3, #16
 8009f92:	d05a      	beq.n	800a04a <HAL_TIM_ConfigClockSource+0x15e>
 8009f94:	e062      	b.n	800a05c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	6899      	ldr	r1, [r3, #8]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f000 f9b1 	bl	800a30c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	609a      	str	r2, [r3, #8]
      break;
 8009fc2:	e04f      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6818      	ldr	r0, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	6899      	ldr	r1, [r3, #8]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f000 f99a 	bl	800a30c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fe6:	609a      	str	r2, [r3, #8]
      break;
 8009fe8:	e03c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6859      	ldr	r1, [r3, #4]
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f000 f90e 	bl	800a218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2150      	movs	r1, #80	; 0x50
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f967 	bl	800a2d6 <TIM_ITRx_SetConfig>
      break;
 800a008:	e02c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	f000 f92d 	bl	800a276 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2160      	movs	r1, #96	; 0x60
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f957 	bl	800a2d6 <TIM_ITRx_SetConfig>
      break;
 800a028:	e01c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	461a      	mov	r2, r3
 800a038:	f000 f8ee 	bl	800a218 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	4618      	mov	r0, r3
 800a044:	f000 f947 	bl	800a2d6 <TIM_ITRx_SetConfig>
      break;
 800a048:	e00c      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4619      	mov	r1, r3
 800a054:	4610      	mov	r0, r2
 800a056:	f000 f93e 	bl	800a2d6 <TIM_ITRx_SetConfig>
      break;
 800a05a:	e003      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	73fb      	strb	r3, [r7, #15]
      break;
 800a060:	e000      	b.n	800a064 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a07e:	b480      	push	{r7}
 800a080:	b083      	sub	sp, #12
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a40      	ldr	r2, [pc, #256]	; (800a1f8 <TIM_Base_SetConfig+0x114>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d013      	beq.n	800a124 <TIM_Base_SetConfig+0x40>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a102:	d00f      	beq.n	800a124 <TIM_Base_SetConfig+0x40>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a3d      	ldr	r2, [pc, #244]	; (800a1fc <TIM_Base_SetConfig+0x118>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d00b      	beq.n	800a124 <TIM_Base_SetConfig+0x40>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a3c      	ldr	r2, [pc, #240]	; (800a200 <TIM_Base_SetConfig+0x11c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d007      	beq.n	800a124 <TIM_Base_SetConfig+0x40>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a3b      	ldr	r2, [pc, #236]	; (800a204 <TIM_Base_SetConfig+0x120>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d003      	beq.n	800a124 <TIM_Base_SetConfig+0x40>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a3a      	ldr	r2, [pc, #232]	; (800a208 <TIM_Base_SetConfig+0x124>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d108      	bne.n	800a136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a12a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	4313      	orrs	r3, r2
 800a134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a2f      	ldr	r2, [pc, #188]	; (800a1f8 <TIM_Base_SetConfig+0x114>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d01f      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a144:	d01b      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a2c      	ldr	r2, [pc, #176]	; (800a1fc <TIM_Base_SetConfig+0x118>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d017      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a2b      	ldr	r2, [pc, #172]	; (800a200 <TIM_Base_SetConfig+0x11c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d013      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a2a      	ldr	r2, [pc, #168]	; (800a204 <TIM_Base_SetConfig+0x120>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d00f      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a29      	ldr	r2, [pc, #164]	; (800a208 <TIM_Base_SetConfig+0x124>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00b      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a28      	ldr	r2, [pc, #160]	; (800a20c <TIM_Base_SetConfig+0x128>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d007      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a27      	ldr	r2, [pc, #156]	; (800a210 <TIM_Base_SetConfig+0x12c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d003      	beq.n	800a17e <TIM_Base_SetConfig+0x9a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a26      	ldr	r2, [pc, #152]	; (800a214 <TIM_Base_SetConfig+0x130>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d108      	bne.n	800a190 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a10      	ldr	r2, [pc, #64]	; (800a1f8 <TIM_Base_SetConfig+0x114>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d00f      	beq.n	800a1dc <TIM_Base_SetConfig+0xf8>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a12      	ldr	r2, [pc, #72]	; (800a208 <TIM_Base_SetConfig+0x124>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d00b      	beq.n	800a1dc <TIM_Base_SetConfig+0xf8>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a11      	ldr	r2, [pc, #68]	; (800a20c <TIM_Base_SetConfig+0x128>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d007      	beq.n	800a1dc <TIM_Base_SetConfig+0xf8>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a10      	ldr	r2, [pc, #64]	; (800a210 <TIM_Base_SetConfig+0x12c>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d003      	beq.n	800a1dc <TIM_Base_SetConfig+0xf8>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a0f      	ldr	r2, [pc, #60]	; (800a214 <TIM_Base_SetConfig+0x130>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d103      	bne.n	800a1e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	691a      	ldr	r2, [r3, #16]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	615a      	str	r2, [r3, #20]
}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	40012c00 	.word	0x40012c00
 800a1fc:	40000400 	.word	0x40000400
 800a200:	40000800 	.word	0x40000800
 800a204:	40000c00 	.word	0x40000c00
 800a208:	40013400 	.word	0x40013400
 800a20c:	40014000 	.word	0x40014000
 800a210:	40014400 	.word	0x40014400
 800a214:	40014800 	.word	0x40014800

0800a218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f023 0201 	bic.w	r2, r3, #1
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f023 030a 	bic.w	r3, r3, #10
 800a254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a276:	b480      	push	{r7}
 800a278:	b087      	sub	sp, #28
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	60f8      	str	r0, [r7, #12]
 800a27e:	60b9      	str	r1, [r7, #8]
 800a280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f023 0210 	bic.w	r2, r3, #16
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6a1b      	ldr	r3, [r3, #32]
 800a298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	031b      	lsls	r3, r3, #12
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	621a      	str	r2, [r3, #32]
}
 800a2ca:	bf00      	nop
 800a2cc:	371c      	adds	r7, #28
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	f043 0307 	orr.w	r3, r3, #7
 800a2f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	609a      	str	r2, [r3, #8]
}
 800a300:	bf00      	nop
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
 800a318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	021a      	lsls	r2, r3, #8
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	431a      	orrs	r2, r3
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	4313      	orrs	r3, r2
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	609a      	str	r2, [r3, #8]
}
 800a340:	bf00      	nop
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d101      	bne.n	800a364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a360:	2302      	movs	r3, #2
 800a362:	e068      	b.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a2e      	ldr	r2, [pc, #184]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d004      	beq.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a2d      	ldr	r2, [pc, #180]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d108      	bne.n	800a3aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a39e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a1e      	ldr	r2, [pc, #120]	; (800a444 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d01d      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d6:	d018      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a1b      	ldr	r2, [pc, #108]	; (800a44c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d013      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a1a      	ldr	r2, [pc, #104]	; (800a450 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00e      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a18      	ldr	r2, [pc, #96]	; (800a454 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d009      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a13      	ldr	r2, [pc, #76]	; (800a448 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d004      	beq.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a14      	ldr	r2, [pc, #80]	; (800a458 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d10c      	bne.n	800a424 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40012c00 	.word	0x40012c00
 800a448:	40013400 	.word	0x40013400
 800a44c:	40000400 	.word	0x40000400
 800a450:	40000800 	.word	0x40000800
 800a454:	40000c00 	.word	0x40000c00
 800a458:	40014000 	.word	0x40014000

0800a45c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e040      	b.n	800a52c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d106      	bne.n	800a4c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f83a 	bl	800a534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2224      	movs	r2, #36	; 0x24
 800a4c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0201 	bic.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f94a 	bl	800a770 <UART_SetConfig>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d101      	bne.n	800a4e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e022      	b.n	800a52c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fbc8 	bl	800ac84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0201 	orr.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fc4f 	bl	800adc8 <UART_CheckIdleState>
 800a52a:	4603      	mov	r3, r0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	; 0x28
 800a54c:	af02      	add	r7, sp, #8
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	603b      	str	r3, [r7, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	f040 8082 	bne.w	800a666 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <HAL_UART_Transmit+0x26>
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d101      	bne.n	800a572 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e07a      	b.n	800a668 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d101      	bne.n	800a580 <HAL_UART_Transmit+0x38>
 800a57c:	2302      	movs	r3, #2
 800a57e:	e073      	b.n	800a668 <HAL_UART_Transmit+0x120>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2221      	movs	r2, #33	; 0x21
 800a594:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a596:	f7fc f82f 	bl	80065f8 <HAL_GetTick>
 800a59a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	88fa      	ldrh	r2, [r7, #6]
 800a5a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	88fa      	ldrh	r2, [r7, #6]
 800a5a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5b4:	d108      	bne.n	800a5c8 <HAL_UART_Transmit+0x80>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d104      	bne.n	800a5c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	61bb      	str	r3, [r7, #24]
 800a5c6:	e003      	b.n	800a5d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a5d8:	e02d      	b.n	800a636 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	2180      	movs	r1, #128	; 0x80
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 fc38 	bl	800ae5a <UART_WaitOnFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e039      	b.n	800a668 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	881a      	ldrh	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a606:	b292      	uxth	r2, r2
 800a608:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	3302      	adds	r3, #2
 800a60e:	61bb      	str	r3, [r7, #24]
 800a610:	e008      	b.n	800a624 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	781a      	ldrb	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	b292      	uxth	r2, r2
 800a61c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	3301      	adds	r3, #1
 800a622:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	3b01      	subs	r3, #1
 800a62e:	b29a      	uxth	r2, r3
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1cb      	bne.n	800a5da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2200      	movs	r2, #0
 800a64a:	2140      	movs	r1, #64	; 0x40
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 fc04 	bl	800ae5a <UART_WaitOnFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e005      	b.n	800a668 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2220      	movs	r2, #32
 800a660:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	e000      	b.n	800a668 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a666:	2302      	movs	r3, #2
  }
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3720      	adds	r7, #32
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08a      	sub	sp, #40	; 0x28
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a682:	2b20      	cmp	r3, #32
 800a684:	d142      	bne.n	800a70c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <HAL_UART_Receive_DMA+0x22>
 800a68c:	88fb      	ldrh	r3, [r7, #6]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e03b      	b.n	800a70e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_UART_Receive_DMA+0x34>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e034      	b.n	800a70e <HAL_UART_Receive_DMA+0x9e>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a18      	ldr	r2, [pc, #96]	; (800a718 <HAL_UART_Receive_DMA+0xa8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d01f      	beq.n	800a6fc <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d018      	beq.n	800a6fc <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	e853 3f00 	ldrex	r3, [r3]
 800a6d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	623b      	str	r3, [r7, #32]
 800a6ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ec:	69f9      	ldr	r1, [r7, #28]
 800a6ee:	6a3a      	ldr	r2, [r7, #32]
 800a6f0:	e841 2300 	strex	r3, r2, [r1]
 800a6f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e6      	bne.n	800a6ca <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	461a      	mov	r2, r3
 800a700:	68b9      	ldr	r1, [r7, #8]
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 fc6e 	bl	800afe4 <UART_Start_Receive_DMA>
 800a708:	4603      	mov	r3, r0
 800a70a:	e000      	b.n	800a70e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a70c:	2302      	movs	r3, #2
  }
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3728      	adds	r7, #40	; 0x28
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	40008000 	.word	0x40008000

0800a71c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a770:	b5b0      	push	{r4, r5, r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a778:	2300      	movs	r3, #0
 800a77a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689a      	ldr	r2, [r3, #8]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	431a      	orrs	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	4313      	orrs	r3, r2
 800a792:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	4bad      	ldr	r3, [pc, #692]	; (800aa50 <UART_SetConfig+0x2e0>)
 800a79c:	4013      	ands	r3, r2
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	69f9      	ldr	r1, [r7, #28]
 800a7a4:	430b      	orrs	r3, r1
 800a7a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4aa2      	ldr	r2, [pc, #648]	; (800aa54 <UART_SetConfig+0x2e4>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d004      	beq.n	800a7d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a99      	ldr	r2, [pc, #612]	; (800aa58 <UART_SetConfig+0x2e8>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d121      	bne.n	800a83a <UART_SetConfig+0xca>
 800a7f6:	4b99      	ldr	r3, [pc, #612]	; (800aa5c <UART_SetConfig+0x2ec>)
 800a7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fc:	f003 0303 	and.w	r3, r3, #3
 800a800:	2b03      	cmp	r3, #3
 800a802:	d817      	bhi.n	800a834 <UART_SetConfig+0xc4>
 800a804:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <UART_SetConfig+0x9c>)
 800a806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80a:	bf00      	nop
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a829 	.word	0x0800a829
 800a814:	0800a823 	.word	0x0800a823
 800a818:	0800a82f 	.word	0x0800a82f
 800a81c:	2301      	movs	r3, #1
 800a81e:	76fb      	strb	r3, [r7, #27]
 800a820:	e0e7      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a822:	2302      	movs	r3, #2
 800a824:	76fb      	strb	r3, [r7, #27]
 800a826:	e0e4      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a828:	2304      	movs	r3, #4
 800a82a:	76fb      	strb	r3, [r7, #27]
 800a82c:	e0e1      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a82e:	2308      	movs	r3, #8
 800a830:	76fb      	strb	r3, [r7, #27]
 800a832:	e0de      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a834:	2310      	movs	r3, #16
 800a836:	76fb      	strb	r3, [r7, #27]
 800a838:	e0db      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a88      	ldr	r2, [pc, #544]	; (800aa60 <UART_SetConfig+0x2f0>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d132      	bne.n	800a8aa <UART_SetConfig+0x13a>
 800a844:	4b85      	ldr	r3, [pc, #532]	; (800aa5c <UART_SetConfig+0x2ec>)
 800a846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84a:	f003 030c 	and.w	r3, r3, #12
 800a84e:	2b0c      	cmp	r3, #12
 800a850:	d828      	bhi.n	800a8a4 <UART_SetConfig+0x134>
 800a852:	a201      	add	r2, pc, #4	; (adr r2, 800a858 <UART_SetConfig+0xe8>)
 800a854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a858:	0800a88d 	.word	0x0800a88d
 800a85c:	0800a8a5 	.word	0x0800a8a5
 800a860:	0800a8a5 	.word	0x0800a8a5
 800a864:	0800a8a5 	.word	0x0800a8a5
 800a868:	0800a899 	.word	0x0800a899
 800a86c:	0800a8a5 	.word	0x0800a8a5
 800a870:	0800a8a5 	.word	0x0800a8a5
 800a874:	0800a8a5 	.word	0x0800a8a5
 800a878:	0800a893 	.word	0x0800a893
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a89f 	.word	0x0800a89f
 800a88c:	2300      	movs	r3, #0
 800a88e:	76fb      	strb	r3, [r7, #27]
 800a890:	e0af      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a892:	2302      	movs	r3, #2
 800a894:	76fb      	strb	r3, [r7, #27]
 800a896:	e0ac      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a898:	2304      	movs	r3, #4
 800a89a:	76fb      	strb	r3, [r7, #27]
 800a89c:	e0a9      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a89e:	2308      	movs	r3, #8
 800a8a0:	76fb      	strb	r3, [r7, #27]
 800a8a2:	e0a6      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8a4:	2310      	movs	r3, #16
 800a8a6:	76fb      	strb	r3, [r7, #27]
 800a8a8:	e0a3      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a6d      	ldr	r2, [pc, #436]	; (800aa64 <UART_SetConfig+0x2f4>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d120      	bne.n	800a8f6 <UART_SetConfig+0x186>
 800a8b4:	4b69      	ldr	r3, [pc, #420]	; (800aa5c <UART_SetConfig+0x2ec>)
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8be:	2b30      	cmp	r3, #48	; 0x30
 800a8c0:	d013      	beq.n	800a8ea <UART_SetConfig+0x17a>
 800a8c2:	2b30      	cmp	r3, #48	; 0x30
 800a8c4:	d814      	bhi.n	800a8f0 <UART_SetConfig+0x180>
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d009      	beq.n	800a8de <UART_SetConfig+0x16e>
 800a8ca:	2b20      	cmp	r3, #32
 800a8cc:	d810      	bhi.n	800a8f0 <UART_SetConfig+0x180>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <UART_SetConfig+0x168>
 800a8d2:	2b10      	cmp	r3, #16
 800a8d4:	d006      	beq.n	800a8e4 <UART_SetConfig+0x174>
 800a8d6:	e00b      	b.n	800a8f0 <UART_SetConfig+0x180>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	76fb      	strb	r3, [r7, #27]
 800a8dc:	e089      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	76fb      	strb	r3, [r7, #27]
 800a8e2:	e086      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	76fb      	strb	r3, [r7, #27]
 800a8e8:	e083      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8ea:	2308      	movs	r3, #8
 800a8ec:	76fb      	strb	r3, [r7, #27]
 800a8ee:	e080      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8f0:	2310      	movs	r3, #16
 800a8f2:	76fb      	strb	r3, [r7, #27]
 800a8f4:	e07d      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a5b      	ldr	r2, [pc, #364]	; (800aa68 <UART_SetConfig+0x2f8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d120      	bne.n	800a942 <UART_SetConfig+0x1d2>
 800a900:	4b56      	ldr	r3, [pc, #344]	; (800aa5c <UART_SetConfig+0x2ec>)
 800a902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a906:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a90a:	2bc0      	cmp	r3, #192	; 0xc0
 800a90c:	d013      	beq.n	800a936 <UART_SetConfig+0x1c6>
 800a90e:	2bc0      	cmp	r3, #192	; 0xc0
 800a910:	d814      	bhi.n	800a93c <UART_SetConfig+0x1cc>
 800a912:	2b80      	cmp	r3, #128	; 0x80
 800a914:	d009      	beq.n	800a92a <UART_SetConfig+0x1ba>
 800a916:	2b80      	cmp	r3, #128	; 0x80
 800a918:	d810      	bhi.n	800a93c <UART_SetConfig+0x1cc>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <UART_SetConfig+0x1b4>
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	d006      	beq.n	800a930 <UART_SetConfig+0x1c0>
 800a922:	e00b      	b.n	800a93c <UART_SetConfig+0x1cc>
 800a924:	2300      	movs	r3, #0
 800a926:	76fb      	strb	r3, [r7, #27]
 800a928:	e063      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a92a:	2302      	movs	r3, #2
 800a92c:	76fb      	strb	r3, [r7, #27]
 800a92e:	e060      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a930:	2304      	movs	r3, #4
 800a932:	76fb      	strb	r3, [r7, #27]
 800a934:	e05d      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a936:	2308      	movs	r3, #8
 800a938:	76fb      	strb	r3, [r7, #27]
 800a93a:	e05a      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a93c:	2310      	movs	r3, #16
 800a93e:	76fb      	strb	r3, [r7, #27]
 800a940:	e057      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a49      	ldr	r2, [pc, #292]	; (800aa6c <UART_SetConfig+0x2fc>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d125      	bne.n	800a998 <UART_SetConfig+0x228>
 800a94c:	4b43      	ldr	r3, [pc, #268]	; (800aa5c <UART_SetConfig+0x2ec>)
 800a94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a95a:	d017      	beq.n	800a98c <UART_SetConfig+0x21c>
 800a95c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a960:	d817      	bhi.n	800a992 <UART_SetConfig+0x222>
 800a962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a966:	d00b      	beq.n	800a980 <UART_SetConfig+0x210>
 800a968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a96c:	d811      	bhi.n	800a992 <UART_SetConfig+0x222>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <UART_SetConfig+0x20a>
 800a972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a976:	d006      	beq.n	800a986 <UART_SetConfig+0x216>
 800a978:	e00b      	b.n	800a992 <UART_SetConfig+0x222>
 800a97a:	2300      	movs	r3, #0
 800a97c:	76fb      	strb	r3, [r7, #27]
 800a97e:	e038      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a980:	2302      	movs	r3, #2
 800a982:	76fb      	strb	r3, [r7, #27]
 800a984:	e035      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a986:	2304      	movs	r3, #4
 800a988:	76fb      	strb	r3, [r7, #27]
 800a98a:	e032      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a98c:	2308      	movs	r3, #8
 800a98e:	76fb      	strb	r3, [r7, #27]
 800a990:	e02f      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a992:	2310      	movs	r3, #16
 800a994:	76fb      	strb	r3, [r7, #27]
 800a996:	e02c      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a2d      	ldr	r2, [pc, #180]	; (800aa54 <UART_SetConfig+0x2e4>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d125      	bne.n	800a9ee <UART_SetConfig+0x27e>
 800a9a2:	4b2e      	ldr	r3, [pc, #184]	; (800aa5c <UART_SetConfig+0x2ec>)
 800a9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9b0:	d017      	beq.n	800a9e2 <UART_SetConfig+0x272>
 800a9b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9b6:	d817      	bhi.n	800a9e8 <UART_SetConfig+0x278>
 800a9b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9bc:	d00b      	beq.n	800a9d6 <UART_SetConfig+0x266>
 800a9be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9c2:	d811      	bhi.n	800a9e8 <UART_SetConfig+0x278>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <UART_SetConfig+0x260>
 800a9c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9cc:	d006      	beq.n	800a9dc <UART_SetConfig+0x26c>
 800a9ce:	e00b      	b.n	800a9e8 <UART_SetConfig+0x278>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	76fb      	strb	r3, [r7, #27]
 800a9d4:	e00d      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	76fb      	strb	r3, [r7, #27]
 800a9da:	e00a      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a9dc:	2304      	movs	r3, #4
 800a9de:	76fb      	strb	r3, [r7, #27]
 800a9e0:	e007      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a9e2:	2308      	movs	r3, #8
 800a9e4:	76fb      	strb	r3, [r7, #27]
 800a9e6:	e004      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a9e8:	2310      	movs	r3, #16
 800a9ea:	76fb      	strb	r3, [r7, #27]
 800a9ec:	e001      	b.n	800a9f2 <UART_SetConfig+0x282>
 800a9ee:	2310      	movs	r3, #16
 800a9f0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a17      	ldr	r2, [pc, #92]	; (800aa54 <UART_SetConfig+0x2e4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	f040 8087 	bne.w	800ab0c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9fe:	7efb      	ldrb	r3, [r7, #27]
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d837      	bhi.n	800aa74 <UART_SetConfig+0x304>
 800aa04:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <UART_SetConfig+0x29c>)
 800aa06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0a:	bf00      	nop
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa75 	.word	0x0800aa75
 800aa14:	0800aa39 	.word	0x0800aa39
 800aa18:	0800aa75 	.word	0x0800aa75
 800aa1c:	0800aa3f 	.word	0x0800aa3f
 800aa20:	0800aa75 	.word	0x0800aa75
 800aa24:	0800aa75 	.word	0x0800aa75
 800aa28:	0800aa75 	.word	0x0800aa75
 800aa2c:	0800aa47 	.word	0x0800aa47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa30:	f7fe f8b8 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 800aa34:	6178      	str	r0, [r7, #20]
        break;
 800aa36:	e022      	b.n	800aa7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa38:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <UART_SetConfig+0x300>)
 800aa3a:	617b      	str	r3, [r7, #20]
        break;
 800aa3c:	e01f      	b.n	800aa7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa3e:	f7fe f819 	bl	8008a74 <HAL_RCC_GetSysClockFreq>
 800aa42:	6178      	str	r0, [r7, #20]
        break;
 800aa44:	e01b      	b.n	800aa7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa4a:	617b      	str	r3, [r7, #20]
        break;
 800aa4c:	e017      	b.n	800aa7e <UART_SetConfig+0x30e>
 800aa4e:	bf00      	nop
 800aa50:	efff69f3 	.word	0xefff69f3
 800aa54:	40008000 	.word	0x40008000
 800aa58:	40013800 	.word	0x40013800
 800aa5c:	40021000 	.word	0x40021000
 800aa60:	40004400 	.word	0x40004400
 800aa64:	40004800 	.word	0x40004800
 800aa68:	40004c00 	.word	0x40004c00
 800aa6c:	40005000 	.word	0x40005000
 800aa70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	76bb      	strb	r3, [r7, #26]
        break;
 800aa7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80f1 	beq.w	800ac68 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685a      	ldr	r2, [r3, #4]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	005b      	lsls	r3, r3, #1
 800aa8e:	4413      	add	r3, r2
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d305      	bcc.n	800aaa2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d902      	bls.n	800aaa8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	76bb      	strb	r3, [r7, #26]
 800aaa6:	e0df      	b.n	800ac68 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f04f 0100 	mov.w	r1, #0
 800aab0:	f04f 0200 	mov.w	r2, #0
 800aab4:	f04f 0300 	mov.w	r3, #0
 800aab8:	020b      	lsls	r3, r1, #8
 800aaba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aabe:	0202      	lsls	r2, r0, #8
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	6849      	ldr	r1, [r1, #4]
 800aac4:	0849      	lsrs	r1, r1, #1
 800aac6:	4608      	mov	r0, r1
 800aac8:	f04f 0100 	mov.w	r1, #0
 800aacc:	1814      	adds	r4, r2, r0
 800aace:	eb43 0501 	adc.w	r5, r3, r1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	461a      	mov	r2, r3
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	4620      	mov	r0, r4
 800aade:	4629      	mov	r1, r5
 800aae0:	f7f6 f8b2 	bl	8000c48 <__aeabi_uldivmod>
 800aae4:	4602      	mov	r2, r0
 800aae6:	460b      	mov	r3, r1
 800aae8:	4613      	mov	r3, r2
 800aaea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaf2:	d308      	bcc.n	800ab06 <UART_SetConfig+0x396>
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafa:	d204      	bcs.n	800ab06 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	60da      	str	r2, [r3, #12]
 800ab04:	e0b0      	b.n	800ac68 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	76bb      	strb	r3, [r7, #26]
 800ab0a:	e0ad      	b.n	800ac68 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab14:	d15b      	bne.n	800abce <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800ab16:	7efb      	ldrb	r3, [r7, #27]
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	d828      	bhi.n	800ab6e <UART_SetConfig+0x3fe>
 800ab1c:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <UART_SetConfig+0x3b4>)
 800ab1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab22:	bf00      	nop
 800ab24:	0800ab49 	.word	0x0800ab49
 800ab28:	0800ab51 	.word	0x0800ab51
 800ab2c:	0800ab59 	.word	0x0800ab59
 800ab30:	0800ab6f 	.word	0x0800ab6f
 800ab34:	0800ab5f 	.word	0x0800ab5f
 800ab38:	0800ab6f 	.word	0x0800ab6f
 800ab3c:	0800ab6f 	.word	0x0800ab6f
 800ab40:	0800ab6f 	.word	0x0800ab6f
 800ab44:	0800ab67 	.word	0x0800ab67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab48:	f7fe f82c 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 800ab4c:	6178      	str	r0, [r7, #20]
        break;
 800ab4e:	e013      	b.n	800ab78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab50:	f7fe f83e 	bl	8008bd0 <HAL_RCC_GetPCLK2Freq>
 800ab54:	6178      	str	r0, [r7, #20]
        break;
 800ab56:	e00f      	b.n	800ab78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab58:	4b49      	ldr	r3, [pc, #292]	; (800ac80 <UART_SetConfig+0x510>)
 800ab5a:	617b      	str	r3, [r7, #20]
        break;
 800ab5c:	e00c      	b.n	800ab78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab5e:	f7fd ff89 	bl	8008a74 <HAL_RCC_GetSysClockFreq>
 800ab62:	6178      	str	r0, [r7, #20]
        break;
 800ab64:	e008      	b.n	800ab78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab6a:	617b      	str	r3, [r7, #20]
        break;
 800ab6c:	e004      	b.n	800ab78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	76bb      	strb	r3, [r7, #26]
        break;
 800ab76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d074      	beq.n	800ac68 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	005a      	lsls	r2, r3, #1
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	085b      	lsrs	r3, r3, #1
 800ab88:	441a      	add	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2b0f      	cmp	r3, #15
 800ab98:	d916      	bls.n	800abc8 <UART_SetConfig+0x458>
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba0:	d212      	bcs.n	800abc8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	f023 030f 	bic.w	r3, r3, #15
 800abaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	085b      	lsrs	r3, r3, #1
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	89fb      	ldrh	r3, [r7, #14]
 800abba:	4313      	orrs	r3, r2
 800abbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	89fa      	ldrh	r2, [r7, #14]
 800abc4:	60da      	str	r2, [r3, #12]
 800abc6:	e04f      	b.n	800ac68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	76bb      	strb	r3, [r7, #26]
 800abcc:	e04c      	b.n	800ac68 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abce:	7efb      	ldrb	r3, [r7, #27]
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d828      	bhi.n	800ac26 <UART_SetConfig+0x4b6>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x46c>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac09 	.word	0x0800ac09
 800abe4:	0800ac11 	.word	0x0800ac11
 800abe8:	0800ac27 	.word	0x0800ac27
 800abec:	0800ac17 	.word	0x0800ac17
 800abf0:	0800ac27 	.word	0x0800ac27
 800abf4:	0800ac27 	.word	0x0800ac27
 800abf8:	0800ac27 	.word	0x0800ac27
 800abfc:	0800ac1f 	.word	0x0800ac1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac00:	f7fd ffd0 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 800ac04:	6178      	str	r0, [r7, #20]
        break;
 800ac06:	e013      	b.n	800ac30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac08:	f7fd ffe2 	bl	8008bd0 <HAL_RCC_GetPCLK2Freq>
 800ac0c:	6178      	str	r0, [r7, #20]
        break;
 800ac0e:	e00f      	b.n	800ac30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac10:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <UART_SetConfig+0x510>)
 800ac12:	617b      	str	r3, [r7, #20]
        break;
 800ac14:	e00c      	b.n	800ac30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac16:	f7fd ff2d 	bl	8008a74 <HAL_RCC_GetSysClockFreq>
 800ac1a:	6178      	str	r0, [r7, #20]
        break;
 800ac1c:	e008      	b.n	800ac30 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac22:	617b      	str	r3, [r7, #20]
        break;
 800ac24:	e004      	b.n	800ac30 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	76bb      	strb	r3, [r7, #26]
        break;
 800ac2e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d018      	beq.n	800ac68 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	085a      	lsrs	r2, r3, #1
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	441a      	add	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac48:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b0f      	cmp	r3, #15
 800ac4e:	d909      	bls.n	800ac64 <UART_SetConfig+0x4f4>
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac56:	d205      	bcs.n	800ac64 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	b29a      	uxth	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	e001      	b.n	800ac68 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ac74:	7ebb      	ldrb	r3, [r7, #26]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	00f42400 	.word	0x00f42400

0800ac84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00a      	beq.n	800acae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	430a      	orrs	r2, r1
 800acac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb2:	f003 0302 	and.w	r3, r3, #2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00a      	beq.n	800acf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf6:	f003 0308 	and.w	r3, r3, #8
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	430a      	orrs	r2, r1
 800ad12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	f003 0310 	and.w	r3, r3, #16
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00a      	beq.n	800ad36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3a:	f003 0320 	and.w	r3, r3, #32
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d01a      	beq.n	800ad9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	430a      	orrs	r2, r1
 800ad78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad82:	d10a      	bne.n	800ad9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	430a      	orrs	r2, r1
 800adba:	605a      	str	r2, [r3, #4]
  }
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af02      	add	r7, sp, #8
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800add8:	f7fb fc0e 	bl	80065f8 <HAL_GetTick>
 800addc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 0308 	and.w	r3, r3, #8
 800ade8:	2b08      	cmp	r3, #8
 800adea:	d10e      	bne.n	800ae0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 f82d 	bl	800ae5a <UART_WaitOnFlagUntilTimeout>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d001      	beq.n	800ae0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae06:	2303      	movs	r3, #3
 800ae08:	e023      	b.n	800ae52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0304 	and.w	r3, r3, #4
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d10e      	bne.n	800ae36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f817 	bl	800ae5a <UART_WaitOnFlagUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e00d      	b.n	800ae52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2220      	movs	r2, #32
 800ae3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2220      	movs	r2, #32
 800ae40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b09c      	sub	sp, #112	; 0x70
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	60b9      	str	r1, [r7, #8]
 800ae64:	603b      	str	r3, [r7, #0]
 800ae66:	4613      	mov	r3, r2
 800ae68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae6a:	e0a5      	b.n	800afb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae72:	f000 80a1 	beq.w	800afb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae76:	f7fb fbbf 	bl	80065f8 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d302      	bcc.n	800ae8c <UART_WaitOnFlagUntilTimeout+0x32>
 800ae86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d13e      	bne.n	800af0a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aea0:	667b      	str	r3, [r7, #100]	; 0x64
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aeb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aeb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	3308      	adds	r3, #8
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec8:	e853 3f00 	ldrex	r3, [r3]
 800aecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	f023 0301 	bic.w	r3, r3, #1
 800aed4:	663b      	str	r3, [r7, #96]	; 0x60
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3308      	adds	r3, #8
 800aedc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aede:	64ba      	str	r2, [r7, #72]	; 0x48
 800aee0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aee6:	e841 2300 	strex	r3, r2, [r1]
 800aeea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aeec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1e5      	bne.n	800aebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2220      	movs	r2, #32
 800aef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2220      	movs	r2, #32
 800aefc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e067      	b.n	800afda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d04f      	beq.n	800afb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	69db      	ldr	r3, [r3, #28]
 800af1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af26:	d147      	bne.n	800afb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af30:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	e853 3f00 	ldrex	r3, [r3]
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af46:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	461a      	mov	r2, r3
 800af4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
 800af52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af58:	e841 2300 	strex	r3, r2, [r1]
 800af5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e6      	bne.n	800af32 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3308      	adds	r3, #8
 800af6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	613b      	str	r3, [r7, #16]
   return(result);
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f023 0301 	bic.w	r3, r3, #1
 800af7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3308      	adds	r3, #8
 800af82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af84:	623a      	str	r2, [r7, #32]
 800af86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	6a3a      	ldr	r2, [r7, #32]
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	61bb      	str	r3, [r7, #24]
   return(result);
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e5      	bne.n	800af64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2220      	movs	r2, #32
 800afa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e010      	b.n	800afda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	69da      	ldr	r2, [r3, #28]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	4013      	ands	r3, r2
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	bf0c      	ite	eq
 800afc8:	2301      	moveq	r3, #1
 800afca:	2300      	movne	r3, #0
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	461a      	mov	r2, r3
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	f43f af4a 	beq.w	800ae6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3770      	adds	r7, #112	; 0x70
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b096      	sub	sp, #88	; 0x58
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	4613      	mov	r3, r2
 800aff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	88fa      	ldrh	r2, [r7, #6]
 800affc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2222      	movs	r2, #34	; 0x22
 800b00c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b012:	2b00      	cmp	r3, #0
 800b014:	d02b      	beq.n	800b06e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01a:	4a42      	ldr	r2, [pc, #264]	; (800b124 <UART_Start_Receive_DMA+0x140>)
 800b01c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b022:	4a41      	ldr	r2, [pc, #260]	; (800b128 <UART_Start_Receive_DMA+0x144>)
 800b024:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02a:	4a40      	ldr	r2, [pc, #256]	; (800b12c <UART_Start_Receive_DMA+0x148>)
 800b02c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b032:	2200      	movs	r2, #0
 800b034:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3324      	adds	r3, #36	; 0x24
 800b040:	4619      	mov	r1, r3
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b046:	461a      	mov	r2, r3
 800b048:	88fb      	ldrh	r3, [r7, #6]
 800b04a:	f7fb fd95 	bl	8006b78 <HAL_DMA_Start_IT>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00c      	beq.n	800b06e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2210      	movs	r2, #16
 800b058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2220      	movs	r2, #32
 800b068:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e055      	b.n	800b11a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d018      	beq.n	800b0b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b092:	657b      	str	r3, [r7, #84]	; 0x54
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	461a      	mov	r2, r3
 800b09a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b09c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b09e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1e6      	bne.n	800b07e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	e853 3f00 	ldrex	r3, [r3]
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	f043 0301 	orr.w	r3, r3, #1
 800b0c6:	653b      	str	r3, [r7, #80]	; 0x50
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0d0:	637a      	str	r2, [r7, #52]	; 0x34
 800b0d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0d8:	e841 2300 	strex	r3, r2, [r1]
 800b0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1e5      	bne.n	800b0b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	e853 3f00 	ldrex	r3, [r3]
 800b0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	3308      	adds	r3, #8
 800b102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b104:	623a      	str	r2, [r7, #32]
 800b106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b108:	69f9      	ldr	r1, [r7, #28]
 800b10a:	6a3a      	ldr	r2, [r7, #32]
 800b10c:	e841 2300 	strex	r3, r2, [r1]
 800b110:	61bb      	str	r3, [r7, #24]
   return(result);
 800b112:	69bb      	ldr	r3, [r7, #24]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d1e5      	bne.n	800b0e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3758      	adds	r7, #88	; 0x58
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	0800b243 	.word	0x0800b243
 800b128:	0800b367 	.word	0x0800b367
 800b12c:	0800b39f 	.word	0x0800b39f

0800b130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b130:	b480      	push	{r7}
 800b132:	b089      	sub	sp, #36	; 0x24
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	e853 3f00 	ldrex	r3, [r3]
 800b144:	60bb      	str	r3, [r7, #8]
   return(result);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b14c:	61fb      	str	r3, [r7, #28]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	6979      	ldr	r1, [r7, #20]
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	613b      	str	r3, [r7, #16]
   return(result);
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e6      	bne.n	800b138 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2220      	movs	r2, #32
 800b16e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b170:	bf00      	nop
 800b172:	3724      	adds	r7, #36	; 0x24
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b095      	sub	sp, #84	; 0x54
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a2:	643b      	str	r3, [r7, #64]	; 0x40
 800b1a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1aa:	e841 2300 	strex	r3, r2, [r1]
 800b1ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1e6      	bne.n	800b184 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	e853 3f00 	ldrex	r3, [r3]
 800b1c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	f023 0301 	bic.w	r3, r3, #1
 800b1cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1de:	e841 2300 	strex	r3, r2, [r1]
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1e5      	bne.n	800b1b6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d118      	bne.n	800b224 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f023 0310 	bic.w	r3, r3, #16
 800b206:	647b      	str	r3, [r7, #68]	; 0x44
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b210:	61bb      	str	r3, [r7, #24]
 800b212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b214:	6979      	ldr	r1, [r7, #20]
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	e841 2300 	strex	r3, r2, [r1]
 800b21c:	613b      	str	r3, [r7, #16]
   return(result);
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e6      	bne.n	800b1f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2220      	movs	r2, #32
 800b228:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b236:	bf00      	nop
 800b238:	3754      	adds	r7, #84	; 0x54
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b09c      	sub	sp, #112	; 0x70
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b24e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d170      	bne.n	800b340 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800b25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b260:	2200      	movs	r2, #0
 800b262:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b26c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b26e:	e853 3f00 	ldrex	r3, [r3]
 800b272:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b27a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b27c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	461a      	mov	r2, r3
 800b282:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b284:	65bb      	str	r3, [r7, #88]	; 0x58
 800b286:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b288:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b28a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b28c:	e841 2300 	strex	r3, r2, [r1]
 800b290:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e6      	bne.n	800b266 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	3308      	adds	r3, #8
 800b29e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	e853 3f00 	ldrex	r3, [r3]
 800b2a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	f023 0301 	bic.w	r3, r3, #1
 800b2ae:	667b      	str	r3, [r7, #100]	; 0x64
 800b2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b2b8:	647a      	str	r2, [r7, #68]	; 0x44
 800b2ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b2be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2c0:	e841 2300 	strex	r3, r2, [r1]
 800b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e5      	bne.n	800b298 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	623b      	str	r3, [r7, #32]
   return(result);
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2e2:	663b      	str	r3, [r7, #96]	; 0x60
 800b2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2ec:	633a      	str	r2, [r7, #48]	; 0x30
 800b2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e5      	bne.n	800b2cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b302:	2220      	movs	r2, #32
 800b304:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d118      	bne.n	800b340 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	e853 3f00 	ldrex	r3, [r3]
 800b31a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f023 0310 	bic.w	r3, r3, #16
 800b322:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	461a      	mov	r2, r3
 800b32a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b32c:	61fb      	str	r3, [r7, #28]
 800b32e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b330:	69b9      	ldr	r1, [r7, #24]
 800b332:	69fa      	ldr	r2, [r7, #28]
 800b334:	e841 2300 	strex	r3, r2, [r1]
 800b338:	617b      	str	r3, [r7, #20]
   return(result);
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1e6      	bne.n	800b30e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b344:	2b01      	cmp	r3, #1
 800b346:	d107      	bne.n	800b358 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b34e:	4619      	mov	r1, r3
 800b350:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b352:	f7ff fa01 	bl	800a758 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b356:	e002      	b.n	800b35e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b358:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b35a:	f7ff f9df 	bl	800a71c <HAL_UART_RxCpltCallback>
}
 800b35e:	bf00      	nop
 800b360:	3770      	adds	r7, #112	; 0x70
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b084      	sub	sp, #16
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b372:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d109      	bne.n	800b390 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b382:	085b      	lsrs	r3, r3, #1
 800b384:	b29b      	uxth	r3, r3
 800b386:	4619      	mov	r1, r3
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7ff f9e5 	bl	800a758 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b38e:	e002      	b.n	800b396 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f7ff f9cd 	bl	800a730 <HAL_UART_RxHalfCpltCallback>
}
 800b396:	bf00      	nop
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b086      	sub	sp, #24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3aa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3b0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3c2:	2b80      	cmp	r3, #128	; 0x80
 800b3c4:	d109      	bne.n	800b3da <UART_DMAError+0x3c>
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b21      	cmp	r3, #33	; 0x21
 800b3ca:	d106      	bne.n	800b3da <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b3d4:	6978      	ldr	r0, [r7, #20]
 800b3d6:	f7ff feab 	bl	800b130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e4:	2b40      	cmp	r3, #64	; 0x40
 800b3e6:	d109      	bne.n	800b3fc <UART_DMAError+0x5e>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b22      	cmp	r3, #34	; 0x22
 800b3ec:	d106      	bne.n	800b3fc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b3f6:	6978      	ldr	r0, [r7, #20]
 800b3f8:	f7ff fec0 	bl	800b17c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b402:	f043 0210 	orr.w	r2, r3, #16
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b40c:	6978      	ldr	r0, [r7, #20]
 800b40e:	f7ff f999 	bl	800a744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b412:	bf00      	nop
 800b414:	3718      	adds	r7, #24
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <DataHist_parameters>:
 800b41c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b420:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b422:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b424:	7020      	strb	r0, [r4, #0]
 800b426:	6808      	ldr	r0, [r1, #0]
 800b428:	6060      	str	r0, [r4, #4]
 800b42a:	6848      	ldr	r0, [r1, #4]
 800b42c:	60a0      	str	r0, [r4, #8]
 800b42e:	6888      	ldr	r0, [r1, #8]
 800b430:	60e0      	str	r0, [r4, #12]
 800b432:	68c8      	ldr	r0, [r1, #12]
 800b434:	6120      	str	r0, [r4, #16]
 800b436:	6908      	ldr	r0, [r1, #16]
 800b438:	6160      	str	r0, [r4, #20]
 800b43a:	6948      	ldr	r0, [r1, #20]
 800b43c:	61a0      	str	r0, [r4, #24]
 800b43e:	6988      	ldr	r0, [r1, #24]
 800b440:	61e0      	str	r0, [r4, #28]
 800b442:	69c8      	ldr	r0, [r1, #28]
 800b444:	6220      	str	r0, [r4, #32]
 800b446:	6a09      	ldr	r1, [r1, #32]
 800b448:	6261      	str	r1, [r4, #36]	; 0x24
 800b44a:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b44e:	8811      	ldrh	r1, [r2, #0]
 800b450:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b454:	8521      	strh	r1, [r4, #40]	; 0x28
 800b456:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b45a:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b45e:	f04f 0e00 	mov.w	lr, #0
 800b462:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b466:	4641      	mov	r1, r8
 800b468:	f852 0b04 	ldr.w	r0, [r2], #4
 800b46c:	f841 0b04 	str.w	r0, [r1], #4
 800b470:	4562      	cmp	r2, ip
 800b472:	d1f9      	bne.n	800b468 <DataHist_parameters+0x4c>
 800b474:	f10e 0e1e 	add.w	lr, lr, #30
 800b478:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b47c:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b480:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b484:	d1ed      	bne.n	800b462 <DataHist_parameters+0x46>
 800b486:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b48a:	881a      	ldrh	r2, [r3, #0]
 800b48c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b490:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b494:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b498:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b49c:	f04f 0c00 	mov.w	ip, #0
 800b4a0:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b4a4:	4672      	mov	r2, lr
 800b4a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4aa:	f842 1b04 	str.w	r1, [r2], #4
 800b4ae:	4283      	cmp	r3, r0
 800b4b0:	d1f9      	bne.n	800b4a6 <DataHist_parameters+0x8a>
 800b4b2:	f10c 0c1e 	add.w	ip, ip, #30
 800b4b6:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b4ba:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b4be:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b4c2:	d1ed      	bne.n	800b4a0 <DataHist_parameters+0x84>
 800b4c4:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b4c8:	883b      	ldrh	r3, [r7, #0]
 800b4ca:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b4ce:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b4d2:	3780      	adds	r7, #128	; 0x80
 800b4d4:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b4de:	4662      	mov	r2, ip
 800b4e0:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4e4:	f842 1b04 	str.w	r1, [r2], #4
 800b4e8:	42bb      	cmp	r3, r7
 800b4ea:	d1f9      	bne.n	800b4e0 <DataHist_parameters+0xc4>
 800b4ec:	301e      	adds	r0, #30
 800b4ee:	285a      	cmp	r0, #90	; 0x5a
 800b4f0:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b4f4:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b4f8:	d1ef      	bne.n	800b4da <DataHist_parameters+0xbe>
 800b4fa:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b4fe:	8833      	ldrh	r3, [r6, #0]
 800b500:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b504:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b508:	3680      	adds	r6, #128	; 0x80
 800b50a:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b50e:	2000      	movs	r0, #0
 800b510:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b514:	463a      	mov	r2, r7
 800b516:	f853 1b04 	ldr.w	r1, [r3], #4
 800b51a:	f842 1b04 	str.w	r1, [r2], #4
 800b51e:	429e      	cmp	r6, r3
 800b520:	d1f9      	bne.n	800b516 <DataHist_parameters+0xfa>
 800b522:	301e      	adds	r0, #30
 800b524:	285a      	cmp	r0, #90	; 0x5a
 800b526:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b52a:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b52e:	d1ef      	bne.n	800b510 <DataHist_parameters+0xf4>
 800b530:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b534:	69aa      	ldr	r2, [r5, #24]
 800b536:	f8c3 c004 	str.w	ip, [r3, #4]
 800b53a:	782b      	ldrb	r3, [r5, #0]
 800b53c:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b540:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b544:	619a      	str	r2, [r3, #24]
 800b546:	686a      	ldr	r2, [r5, #4]
 800b548:	605a      	str	r2, [r3, #4]
 800b54a:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b54e:	68a9      	ldr	r1, [r5, #8]
 800b550:	6011      	str	r1, [r2, #0]
 800b552:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b556:	68e9      	ldr	r1, [r5, #12]
 800b558:	6011      	str	r1, [r2, #0]
 800b55a:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b55e:	6929      	ldr	r1, [r5, #16]
 800b560:	6011      	str	r1, [r2, #0]
 800b562:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b566:	6969      	ldr	r1, [r5, #20]
 800b568:	6011      	str	r1, [r2, #0]
 800b56a:	69ea      	ldr	r2, [r5, #28]
 800b56c:	61da      	str	r2, [r3, #28]
 800b56e:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b572:	6a2a      	ldr	r2, [r5, #32]
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b57a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b582:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b584:	601a      	str	r2, [r3, #0]
 800b586:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b58a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b592:	bf00      	nop

0800b594 <rotVect>:
 800b594:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b598:	ed92 5a01 	vldr	s10, [r2, #4]
 800b59c:	edd2 5a00 	vldr	s11, [r2]
 800b5a0:	ed92 6a02 	vldr	s12, [r2, #8]
 800b5a4:	ee07 3a90 	vmov	s15, r3
 800b5a8:	f991 3000 	ldrsb.w	r3, [r1]
 800b5ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5b0:	ee06 3a90 	vmov	s13, r3
 800b5b4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b5b8:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b5bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5c0:	ee07 3a10 	vmov	s14, r3
 800b5c4:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5cc:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5d0:	edc0 7a00 	vstr	s15, [r0]
 800b5d4:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b5d8:	ed92 5a01 	vldr	s10, [r2, #4]
 800b5dc:	edd2 5a00 	vldr	s11, [r2]
 800b5e0:	ed92 6a02 	vldr	s12, [r2, #8]
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b5ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5f0:	ee06 3a90 	vmov	s13, r3
 800b5f4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b5f8:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b5fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b600:	ee07 3a10 	vmov	s14, r3
 800b604:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b608:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b60c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b610:	edc0 7a01 	vstr	s15, [r0, #4]
 800b614:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b618:	ed92 5a01 	vldr	s10, [r2, #4]
 800b61c:	edd2 5a00 	vldr	s11, [r2]
 800b620:	ed92 6a02 	vldr	s12, [r2, #8]
 800b624:	ee07 3a90 	vmov	s15, r3
 800b628:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b62c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b630:	ee06 3a90 	vmov	s13, r3
 800b634:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b638:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b63c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b640:	ee07 3a10 	vmov	s14, r3
 800b644:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b648:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b64c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b650:	edc0 7a02 	vstr	s15, [r0, #8]
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop

0800b658 <findAxis>:
 800b658:	f990 3000 	ldrsb.w	r3, [r0]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d027      	beq.n	800b6b0 <findAxis+0x58>
 800b660:	3301      	adds	r3, #1
 800b662:	d00e      	beq.n	800b682 <findAxis+0x2a>
 800b664:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d053      	beq.n	800b714 <findAxis+0xbc>
 800b66c:	3301      	adds	r3, #1
 800b66e:	d048      	beq.n	800b702 <findAxis+0xaa>
 800b670:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d053      	beq.n	800b720 <findAxis+0xc8>
 800b678:	3301      	adds	r3, #1
 800b67a:	d104      	bne.n	800b686 <findAxis+0x2e>
 800b67c:	2364      	movs	r3, #100	; 0x64
 800b67e:	700b      	strb	r3, [r1, #0]
 800b680:	e001      	b.n	800b686 <findAxis+0x2e>
 800b682:	2377      	movs	r3, #119	; 0x77
 800b684:	700b      	strb	r3, [r1, #0]
 800b686:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d016      	beq.n	800b6bc <findAxis+0x64>
 800b68e:	3301      	adds	r3, #1
 800b690:	d02e      	beq.n	800b6f0 <findAxis+0x98>
 800b692:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d039      	beq.n	800b70e <findAxis+0xb6>
 800b69a:	3301      	adds	r3, #1
 800b69c:	d034      	beq.n	800b708 <findAxis+0xb0>
 800b69e:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d03f      	beq.n	800b726 <findAxis+0xce>
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	d10a      	bne.n	800b6c0 <findAxis+0x68>
 800b6aa:	2364      	movs	r3, #100	; 0x64
 800b6ac:	704b      	strb	r3, [r1, #1]
 800b6ae:	e007      	b.n	800b6c0 <findAxis+0x68>
 800b6b0:	2365      	movs	r3, #101	; 0x65
 800b6b2:	700b      	strb	r3, [r1, #0]
 800b6b4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d1e8      	bne.n	800b68e <findAxis+0x36>
 800b6bc:	2365      	movs	r3, #101	; 0x65
 800b6be:	704b      	strb	r3, [r1, #1]
 800b6c0:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d010      	beq.n	800b6ea <findAxis+0x92>
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	d014      	beq.n	800b6f6 <findAxis+0x9e>
 800b6cc:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d022      	beq.n	800b71a <findAxis+0xc2>
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	d011      	beq.n	800b6fc <findAxis+0xa4>
 800b6d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d025      	beq.n	800b72c <findAxis+0xd4>
 800b6e0:	3301      	adds	r3, #1
 800b6e2:	bf04      	itt	eq
 800b6e4:	2364      	moveq	r3, #100	; 0x64
 800b6e6:	708b      	strbeq	r3, [r1, #2]
 800b6e8:	4770      	bx	lr
 800b6ea:	2365      	movs	r3, #101	; 0x65
 800b6ec:	708b      	strb	r3, [r1, #2]
 800b6ee:	4770      	bx	lr
 800b6f0:	2377      	movs	r3, #119	; 0x77
 800b6f2:	704b      	strb	r3, [r1, #1]
 800b6f4:	e7e4      	b.n	800b6c0 <findAxis+0x68>
 800b6f6:	2377      	movs	r3, #119	; 0x77
 800b6f8:	708b      	strb	r3, [r1, #2]
 800b6fa:	4770      	bx	lr
 800b6fc:	2373      	movs	r3, #115	; 0x73
 800b6fe:	708b      	strb	r3, [r1, #2]
 800b700:	4770      	bx	lr
 800b702:	2373      	movs	r3, #115	; 0x73
 800b704:	700b      	strb	r3, [r1, #0]
 800b706:	e7be      	b.n	800b686 <findAxis+0x2e>
 800b708:	2373      	movs	r3, #115	; 0x73
 800b70a:	704b      	strb	r3, [r1, #1]
 800b70c:	e7d8      	b.n	800b6c0 <findAxis+0x68>
 800b70e:	236e      	movs	r3, #110	; 0x6e
 800b710:	704b      	strb	r3, [r1, #1]
 800b712:	e7d5      	b.n	800b6c0 <findAxis+0x68>
 800b714:	236e      	movs	r3, #110	; 0x6e
 800b716:	700b      	strb	r3, [r1, #0]
 800b718:	e7b5      	b.n	800b686 <findAxis+0x2e>
 800b71a:	236e      	movs	r3, #110	; 0x6e
 800b71c:	708b      	strb	r3, [r1, #2]
 800b71e:	4770      	bx	lr
 800b720:	2375      	movs	r3, #117	; 0x75
 800b722:	700b      	strb	r3, [r1, #0]
 800b724:	e7af      	b.n	800b686 <findAxis+0x2e>
 800b726:	2375      	movs	r3, #117	; 0x75
 800b728:	704b      	strb	r3, [r1, #1]
 800b72a:	e7c9      	b.n	800b6c0 <findAxis+0x68>
 800b72c:	2375      	movs	r3, #117	; 0x75
 800b72e:	708b      	strb	r3, [r1, #2]
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop
 800b734:	0000      	movs	r0, r0
	...

0800b738 <findDirection>:
 800b738:	b5d0      	push	{r4, r6, r7, lr}
 800b73a:	ed2d 8b04 	vpush	{d8-d9}
 800b73e:	eef0 8ac0 	vabs.f32	s17, s0
 800b742:	eeb0 8ae0 	vabs.f32	s16, s1
 800b746:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74e:	4604      	mov	r4, r0
 800b750:	eeb0 9ac1 	vabs.f32	s18, s2
 800b754:	dd36      	ble.n	800b7c4 <findDirection+0x8c>
 800b756:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b75e:	dd31      	ble.n	800b7c4 <findDirection+0x8c>
 800b760:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b768:	ee18 0a90 	vmov	r0, s17
 800b76c:	f340 8094 	ble.w	800b898 <findDirection+0x160>
 800b770:	f7f4 feea 	bl	8000548 <__aeabi_f2d>
 800b774:	4606      	mov	r6, r0
 800b776:	ee18 0a10 	vmov	r0, s16
 800b77a:	460f      	mov	r7, r1
 800b77c:	f7f4 fee4 	bl	8000548 <__aeabi_f2d>
 800b780:	a387      	add	r3, pc, #540	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 ff37 	bl	80005f8 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f5 f9c1 	bl	8000b18 <__aeabi_dcmpgt>
 800b796:	b188      	cbz	r0, 800b7bc <findDirection+0x84>
 800b798:	ee19 0a10 	vmov	r0, s18
 800b79c:	f7f4 fed4 	bl	8000548 <__aeabi_f2d>
 800b7a0:	a37f      	add	r3, pc, #508	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 ff27 	bl	80005f8 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f5 f9b1 	bl	8000b18 <__aeabi_dcmpgt>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	bf18      	it	ne
 800b7ba:	2404      	movne	r4, #4
 800b7bc:	ecbd 8b04 	vpop	{d8-d9}
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	bdd0      	pop	{r4, r6, r7, pc}
 800b7c4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7cc:	dd32      	ble.n	800b834 <findDirection+0xfc>
 800b7ce:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d6:	ee18 0a10 	vmov	r0, s16
 800b7da:	f340 8086 	ble.w	800b8ea <findDirection+0x1b2>
 800b7de:	f7f4 feb3 	bl	8000548 <__aeabi_f2d>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	ee18 0a90 	vmov	r0, s17
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	f7f4 fead 	bl	8000548 <__aeabi_f2d>
 800b7ee:	a36c      	add	r3, pc, #432	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f7f4 ff00 	bl	80005f8 <__aeabi_dmul>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	4639      	mov	r1, r7
 800b800:	f7f5 f98a 	bl	8000b18 <__aeabi_dcmpgt>
 800b804:	2800      	cmp	r0, #0
 800b806:	d0d9      	beq.n	800b7bc <findDirection+0x84>
 800b808:	ee19 0a10 	vmov	r0, s18
 800b80c:	f7f4 fe9c 	bl	8000548 <__aeabi_f2d>
 800b810:	a363      	add	r3, pc, #396	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 feef 	bl	80005f8 <__aeabi_dmul>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f5 f979 	bl	8000b18 <__aeabi_dcmpgt>
 800b826:	ecbd 8b04 	vpop	{d8-d9}
 800b82a:	2800      	cmp	r0, #0
 800b82c:	bf18      	it	ne
 800b82e:	2401      	movne	r4, #1
 800b830:	4620      	mov	r0, r4
 800b832:	bdd0      	pop	{r4, r6, r7, pc}
 800b834:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b83c:	ee19 0a10 	vmov	r0, s18
 800b840:	dd7f      	ble.n	800b942 <findDirection+0x20a>
 800b842:	f7f4 fe81 	bl	8000548 <__aeabi_f2d>
 800b846:	4606      	mov	r6, r0
 800b848:	ee18 0a10 	vmov	r0, s16
 800b84c:	460f      	mov	r7, r1
 800b84e:	f7f4 fe7b 	bl	8000548 <__aeabi_f2d>
 800b852:	a353      	add	r3, pc, #332	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fece 	bl	80005f8 <__aeabi_dmul>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4630      	mov	r0, r6
 800b862:	4639      	mov	r1, r7
 800b864:	f7f5 f958 	bl	8000b18 <__aeabi_dcmpgt>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d0a7      	beq.n	800b7bc <findDirection+0x84>
 800b86c:	ee18 0a90 	vmov	r0, s17
 800b870:	f7f4 fe6a 	bl	8000548 <__aeabi_f2d>
 800b874:	a34a      	add	r3, pc, #296	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f7f4 febd 	bl	80005f8 <__aeabi_dmul>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f5 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800b88a:	ecbd 8b04 	vpop	{d8-d9}
 800b88e:	2800      	cmp	r0, #0
 800b890:	bf18      	it	ne
 800b892:	2400      	movne	r4, #0
 800b894:	4620      	mov	r0, r4
 800b896:	bdd0      	pop	{r4, r6, r7, pc}
 800b898:	f7f4 fe56 	bl	8000548 <__aeabi_f2d>
 800b89c:	4606      	mov	r6, r0
 800b89e:	ee18 0a10 	vmov	r0, s16
 800b8a2:	460f      	mov	r7, r1
 800b8a4:	f7f4 fe50 	bl	8000548 <__aeabi_f2d>
 800b8a8:	a33d      	add	r3, pc, #244	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	f7f4 fea3 	bl	80005f8 <__aeabi_dmul>
 800b8b2:	4602      	mov	r2, r0
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	4639      	mov	r1, r7
 800b8ba:	f7f5 f92d 	bl	8000b18 <__aeabi_dcmpgt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	f43f af7c 	beq.w	800b7bc <findDirection+0x84>
 800b8c4:	ee19 0a10 	vmov	r0, s18
 800b8c8:	f7f4 fe3e 	bl	8000548 <__aeabi_f2d>
 800b8cc:	a334      	add	r3, pc, #208	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f7f4 fe91 	bl	80005f8 <__aeabi_dmul>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4630      	mov	r0, r6
 800b8dc:	4639      	mov	r1, r7
 800b8de:	f7f5 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	bf18      	it	ne
 800b8e6:	2405      	movne	r4, #5
 800b8e8:	e768      	b.n	800b7bc <findDirection+0x84>
 800b8ea:	f7f4 fe2d 	bl	8000548 <__aeabi_f2d>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	ee18 0a90 	vmov	r0, s17
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	f7f4 fe27 	bl	8000548 <__aeabi_f2d>
 800b8fa:	a329      	add	r3, pc, #164	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f7f4 fe7a 	bl	80005f8 <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f5 f904 	bl	8000b18 <__aeabi_dcmpgt>
 800b910:	2800      	cmp	r0, #0
 800b912:	f43f af53 	beq.w	800b7bc <findDirection+0x84>
 800b916:	ee19 0a10 	vmov	r0, s18
 800b91a:	f7f4 fe15 	bl	8000548 <__aeabi_f2d>
 800b91e:	a320      	add	r3, pc, #128	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe68 	bl	80005f8 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f5 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 800b934:	ecbd 8b04 	vpop	{d8-d9}
 800b938:	2800      	cmp	r0, #0
 800b93a:	bf18      	it	ne
 800b93c:	2403      	movne	r4, #3
 800b93e:	4620      	mov	r0, r4
 800b940:	bdd0      	pop	{r4, r6, r7, pc}
 800b942:	f7f4 fe01 	bl	8000548 <__aeabi_f2d>
 800b946:	4606      	mov	r6, r0
 800b948:	ee18 0a10 	vmov	r0, s16
 800b94c:	460f      	mov	r7, r1
 800b94e:	f7f4 fdfb 	bl	8000548 <__aeabi_f2d>
 800b952:	a313      	add	r3, pc, #76	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fe4e 	bl	80005f8 <__aeabi_dmul>
 800b95c:	4602      	mov	r2, r0
 800b95e:	460b      	mov	r3, r1
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	f7f5 f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 800b968:	2800      	cmp	r0, #0
 800b96a:	f43f af27 	beq.w	800b7bc <findDirection+0x84>
 800b96e:	ee18 0a90 	vmov	r0, s17
 800b972:	f7f4 fde9 	bl	8000548 <__aeabi_f2d>
 800b976:	a30a      	add	r3, pc, #40	; (adr r3, 800b9a0 <findDirection+0x268>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	f7f4 fe3c 	bl	80005f8 <__aeabi_dmul>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4630      	mov	r0, r6
 800b986:	4639      	mov	r1, r7
 800b988:	f7f5 f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800b98c:	ecbd 8b04 	vpop	{d8-d9}
 800b990:	2800      	cmp	r0, #0
 800b992:	bf18      	it	ne
 800b994:	2402      	movne	r4, #2
 800b996:	4620      	mov	r0, r4
 800b998:	bdd0      	pop	{r4, r6, r7, pc}
 800b99a:	bf00      	nop
 800b99c:	f3af 8000 	nop.w
 800b9a0:	e0000000 	.word	0xe0000000
 800b9a4:	3ff6b851 	.word	0x3ff6b851

0800b9a8 <updateOrientation>:
 800b9a8:	b410      	push	{r4}
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	6003      	str	r3, [r0, #0]
 800b9ae:	6043      	str	r3, [r0, #4]
 800b9b0:	7203      	strb	r3, [r0, #8]
 800b9b2:	780c      	ldrb	r4, [r1, #0]
 800b9b4:	784a      	ldrb	r2, [r1, #1]
 800b9b6:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b9ba:	2b17      	cmp	r3, #23
 800b9bc:	bf98      	it	ls
 800b9be:	3420      	addls	r4, #32
 800b9c0:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b9c4:	bf98      	it	ls
 800b9c6:	b2e4      	uxtbls	r4, r4
 800b9c8:	2b17      	cmp	r3, #23
 800b9ca:	788b      	ldrb	r3, [r1, #2]
 800b9cc:	bf98      	it	ls
 800b9ce:	3220      	addls	r2, #32
 800b9d0:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b9d4:	bf98      	it	ls
 800b9d6:	b2d2      	uxtbls	r2, r2
 800b9d8:	2917      	cmp	r1, #23
 800b9da:	bf98      	it	ls
 800b9dc:	3320      	addls	r3, #32
 800b9de:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b9e2:	bf98      	it	ls
 800b9e4:	b2db      	uxtbls	r3, r3
 800b9e6:	2c13      	cmp	r4, #19
 800b9e8:	d80d      	bhi.n	800ba06 <updateOrientation+0x5e>
 800b9ea:	e8df f004 	tbb	[pc, r4]
 800b9ee:	0a36      	.short	0x0a36
 800b9f0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9f4:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9f8:	0c0c0c39 	.word	0x0c0c0c39
 800b9fc:	3f0c3c0c 	.word	0x3f0c3c0c
 800ba00:	420c      	.short	0x420c
 800ba02:	2101      	movs	r1, #1
 800ba04:	7001      	strb	r1, [r0, #0]
 800ba06:	3a64      	subs	r2, #100	; 0x64
 800ba08:	2a13      	cmp	r2, #19
 800ba0a:	d80d      	bhi.n	800ba28 <updateOrientation+0x80>
 800ba0c:	e8df f002 	tbb	[pc, r2]
 800ba10:	0c0c0a34 	.word	0x0c0c0a34
 800ba14:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba18:	0c370c0c 	.word	0x0c370c0c
 800ba1c:	3a0c0c0c 	.word	0x3a0c0c0c
 800ba20:	400c3d0c 	.word	0x400c3d0c
 800ba24:	2201      	movs	r2, #1
 800ba26:	7042      	strb	r2, [r0, #1]
 800ba28:	3b64      	subs	r3, #100	; 0x64
 800ba2a:	2b13      	cmp	r3, #19
 800ba2c:	d80d      	bhi.n	800ba4a <updateOrientation+0xa2>
 800ba2e:	e8df f003 	tbb	[pc, r3]
 800ba32:	320a      	.short	0x320a
 800ba34:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba38:	0c0c0c0c 	.word	0x0c0c0c0c
 800ba3c:	0c0c0c37 	.word	0x0c0c0c37
 800ba40:	410c3c0c 	.word	0x410c3c0c
 800ba44:	0f0c      	.short	0x0f0c
 800ba46:	23ff      	movs	r3, #255	; 0xff
 800ba48:	7203      	strb	r3, [r0, #8]
 800ba4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	23ff      	movs	r3, #255	; 0xff
 800ba52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba56:	7083      	strb	r3, [r0, #2]
 800ba58:	4770      	bx	lr
 800ba5a:	21ff      	movs	r1, #255	; 0xff
 800ba5c:	7181      	strb	r1, [r0, #6]
 800ba5e:	e7d2      	b.n	800ba06 <updateOrientation+0x5e>
 800ba60:	2101      	movs	r1, #1
 800ba62:	70c1      	strb	r1, [r0, #3]
 800ba64:	e7cf      	b.n	800ba06 <updateOrientation+0x5e>
 800ba66:	21ff      	movs	r1, #255	; 0xff
 800ba68:	70c1      	strb	r1, [r0, #3]
 800ba6a:	e7cc      	b.n	800ba06 <updateOrientation+0x5e>
 800ba6c:	2101      	movs	r1, #1
 800ba6e:	7181      	strb	r1, [r0, #6]
 800ba70:	e7c9      	b.n	800ba06 <updateOrientation+0x5e>
 800ba72:	21ff      	movs	r1, #255	; 0xff
 800ba74:	7001      	strb	r1, [r0, #0]
 800ba76:	e7c6      	b.n	800ba06 <updateOrientation+0x5e>
 800ba78:	22ff      	movs	r2, #255	; 0xff
 800ba7a:	71c2      	strb	r2, [r0, #7]
 800ba7c:	e7d4      	b.n	800ba28 <updateOrientation+0x80>
 800ba7e:	2201      	movs	r2, #1
 800ba80:	7102      	strb	r2, [r0, #4]
 800ba82:	e7d1      	b.n	800ba28 <updateOrientation+0x80>
 800ba84:	22ff      	movs	r2, #255	; 0xff
 800ba86:	7102      	strb	r2, [r0, #4]
 800ba88:	e7ce      	b.n	800ba28 <updateOrientation+0x80>
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	71c2      	strb	r2, [r0, #7]
 800ba8e:	e7cb      	b.n	800ba28 <updateOrientation+0x80>
 800ba90:	22ff      	movs	r2, #255	; 0xff
 800ba92:	7042      	strb	r2, [r0, #1]
 800ba94:	e7c8      	b.n	800ba28 <updateOrientation+0x80>
 800ba96:	2301      	movs	r3, #1
 800ba98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba9c:	7083      	strb	r3, [r0, #2]
 800ba9e:	4770      	bx	lr
 800baa0:	2301      	movs	r3, #1
 800baa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baa6:	7143      	strb	r3, [r0, #5]
 800baa8:	4770      	bx	lr
 800baaa:	23ff      	movs	r3, #255	; 0xff
 800baac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bab0:	7143      	strb	r3, [r0, #5]
 800bab2:	4770      	bx	lr
 800bab4:	2301      	movs	r3, #1
 800bab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baba:	7203      	strb	r3, [r0, #8]
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop

0800bac0 <qmult>:
 800bac0:	ed91 2a03 	vldr	s4, [r1, #12]
 800bac4:	ed90 3a01 	vldr	s6, [r0, #4]
 800bac8:	edd0 5a02 	vldr	s11, [r0, #8]
 800bacc:	edd1 4a01 	vldr	s9, [r1, #4]
 800bad0:	ed90 4a00 	vldr	s8, [r0]
 800bad4:	edd1 3a00 	vldr	s7, [r1]
 800bad8:	ed91 5a02 	vldr	s10, [r1, #8]
 800badc:	edd0 2a03 	vldr	s5, [r0, #12]
 800bae0:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800bae4:	ee62 6a03 	vmul.f32	s13, s4, s6
 800bae8:	ee22 7a25 	vmul.f32	s14, s4, s11
 800baec:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800baf0:	eea4 6a02 	vfma.f32	s12, s8, s4
 800baf4:	eee4 6a05 	vfma.f32	s13, s8, s10
 800baf8:	eea3 7a23 	vfma.f32	s14, s6, s7
 800bafc:	eee4 7a63 	vfms.f32	s15, s8, s7
 800bb00:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800bb04:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800bb08:	eea5 7a22 	vfma.f32	s14, s10, s5
 800bb0c:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bb10:	eea3 6a45 	vfms.f32	s12, s6, s10
 800bb14:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800bb18:	eea4 7a64 	vfms.f32	s14, s8, s9
 800bb1c:	eee5 7a65 	vfms.f32	s15, s10, s11
 800bb20:	ed82 6a00 	vstr	s12, [r2]
 800bb24:	edc2 6a01 	vstr	s13, [r2, #4]
 800bb28:	ed82 7a02 	vstr	s14, [r2, #8]
 800bb2c:	edc2 7a03 	vstr	s15, [r2, #12]
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop

0800bb34 <MEMS_setMagIndexToOne>:
 800bb34:	291f      	cmp	r1, #31
 800bb36:	b430      	push	{r4, r5}
 800bb38:	d920      	bls.n	800bb7c <MEMS_setMagIndexToOne+0x48>
 800bb3a:	6885      	ldr	r5, [r0, #8]
 800bb3c:	3920      	subs	r1, #32
 800bb3e:	2401      	movs	r4, #1
 800bb40:	fa04 f101 	lsl.w	r1, r4, r1
 800bb44:	ea21 0105 	bic.w	r1, r1, r5
 800bb48:	4069      	eors	r1, r5
 800bb4a:	2a1f      	cmp	r2, #31
 800bb4c:	6081      	str	r1, [r0, #8]
 800bb4e:	d91f      	bls.n	800bb90 <MEMS_setMagIndexToOne+0x5c>
 800bb50:	6901      	ldr	r1, [r0, #16]
 800bb52:	f1a2 0420 	sub.w	r4, r2, #32
 800bb56:	2201      	movs	r2, #1
 800bb58:	40a2      	lsls	r2, r4
 800bb5a:	ea22 0201 	bic.w	r2, r2, r1
 800bb5e:	404a      	eors	r2, r1
 800bb60:	2b1f      	cmp	r3, #31
 800bb62:	6102      	str	r2, [r0, #16]
 800bb64:	d91e      	bls.n	800bba4 <MEMS_setMagIndexToOne+0x70>
 800bb66:	69c2      	ldr	r2, [r0, #28]
 800bb68:	f1a3 0120 	sub.w	r1, r3, #32
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	408b      	lsls	r3, r1
 800bb70:	ea23 0302 	bic.w	r3, r3, r2
 800bb74:	4053      	eors	r3, r2
 800bb76:	bc30      	pop	{r4, r5}
 800bb78:	61c3      	str	r3, [r0, #28]
 800bb7a:	4770      	bx	lr
 800bb7c:	68c5      	ldr	r5, [r0, #12]
 800bb7e:	2401      	movs	r4, #1
 800bb80:	fa04 f101 	lsl.w	r1, r4, r1
 800bb84:	ea21 0105 	bic.w	r1, r1, r5
 800bb88:	4069      	eors	r1, r5
 800bb8a:	2a1f      	cmp	r2, #31
 800bb8c:	60c1      	str	r1, [r0, #12]
 800bb8e:	d8df      	bhi.n	800bb50 <MEMS_setMagIndexToOne+0x1c>
 800bb90:	6944      	ldr	r4, [r0, #20]
 800bb92:	2101      	movs	r1, #1
 800bb94:	fa01 f202 	lsl.w	r2, r1, r2
 800bb98:	ea22 0204 	bic.w	r2, r2, r4
 800bb9c:	4062      	eors	r2, r4
 800bb9e:	2b1f      	cmp	r3, #31
 800bba0:	6142      	str	r2, [r0, #20]
 800bba2:	d8e0      	bhi.n	800bb66 <MEMS_setMagIndexToOne+0x32>
 800bba4:	6981      	ldr	r1, [r0, #24]
 800bba6:	2201      	movs	r2, #1
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	ea23 0301 	bic.w	r3, r3, r1
 800bbb0:	404b      	eors	r3, r1
 800bbb2:	bc30      	pop	{r4, r5}
 800bbb4:	6183      	str	r3, [r0, #24]
 800bbb6:	4770      	bx	lr

0800bbb8 <getRotationMatrix>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4605      	mov	r5, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	4610      	mov	r0, r2
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	2224      	movs	r2, #36	; 0x24
 800bbc4:	f00b fea6 	bl	8017914 <memset>
 800bbc8:	edd5 5a00 	vldr	s11, [r5]
 800bbcc:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800bcf4 <getRotationMatrix+0x13c>
 800bbd0:	edc0 5a02 	vstr	s11, [r0, #8]
 800bbd4:	ed95 7a01 	vldr	s14, [r5, #4]
 800bbd8:	ed80 7a05 	vstr	s14, [r0, #20]
 800bbdc:	ed95 5a02 	vldr	s10, [r5, #8]
 800bbe0:	ed80 5a08 	vstr	s10, [r0, #32]
 800bbe4:	ed94 4a02 	vldr	s8, [r4, #8]
 800bbe8:	edd4 3a01 	vldr	s7, [r4, #4]
 800bbec:	edd4 4a00 	vldr	s9, [r4]
 800bbf0:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800bbf4:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800bbf8:	eee3 7a85 	vfma.f32	s15, s7, s10
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	eee4 6a87 	vfma.f32	s13, s9, s14
 800bc02:	eeb0 7ae7 	vabs.f32	s14, s15
 800bc06:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800bc0a:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	eea4 6a25 	vfma.f32	s12, s8, s11
 800bc16:	bfdc      	itt	le
 800bc18:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800bc1c:	eeb0 7a43 	vmovle.f32	s14, s6
 800bc20:	eeb0 5ac6 	vabs.f32	s10, s12
 800bc24:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bc28:	edc0 6a06 	vstr	s13, [r0, #24]
 800bc2c:	bfd4      	ite	le
 800bc2e:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800bc32:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800bc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3a:	ed80 6a03 	vstr	s12, [r0, #12]
 800bc3e:	edc0 7a00 	vstr	s15, [r0]
 800bc42:	d447      	bmi.n	800bcd4 <getRotationMatrix+0x11c>
 800bc44:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800bc48:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800bc4c:	eef0 5a66 	vmov.f32	s11, s13
 800bc50:	edd3 6a06 	vldr	s13, [r3, #24]
 800bc54:	eeb0 5ae6 	vabs.f32	s10, s13
 800bc58:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc60:	d543      	bpl.n	800bcea <getRotationMatrix+0x132>
 800bc62:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bc66:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800bc6a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bc6e:	eeb0 7a45 	vmov.f32	s14, s10
 800bc72:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800bc76:	eef0 5a44 	vmov.f32	s11, s8
 800bc7a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800bc7e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800bc82:	ee65 5a07 	vmul.f32	s11, s10, s14
 800bc86:	edd3 3a08 	vldr	s7, [r3, #32]
 800bc8a:	edd3 4a02 	vldr	s9, [r3, #8]
 800bc8e:	ed93 4a05 	vldr	s8, [r3, #20]
 800bc92:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800bc96:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc9a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bc9e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bca2:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800bca6:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800bcaa:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800bcae:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800bcb2:	eee4 5a07 	vfma.f32	s11, s8, s14
 800bcb6:	eee6 6a24 	vfma.f32	s13, s12, s9
 800bcba:	edc3 7a00 	vstr	s15, [r3]
 800bcbe:	ed83 6a03 	vstr	s12, [r3, #12]
 800bcc2:	ed83 7a06 	vstr	s14, [r3, #24]
 800bcc6:	ed83 5a04 	vstr	s10, [r3, #16]
 800bcca:	edc3 5a01 	vstr	s11, [r3, #4]
 800bcce:	edc3 6a07 	vstr	s13, [r3, #28]
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bcd8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bcdc:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bce0:	eeb0 7a45 	vmov.f32	s14, s10
 800bce4:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800bce8:	e7b2      	b.n	800bc50 <getRotationMatrix+0x98>
 800bcea:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800bcee:	eee5 5a05 	vfma.f32	s11, s10, s10
 800bcf2:	e7c2      	b.n	800bc7a <getRotationMatrix+0xc2>
 800bcf4:	00000000 	.word	0x00000000

0800bcf8 <b_dcm2q>:
 800bcf8:	ed90 5a08 	vldr	s10, [r0, #32]
 800bcfc:	edd0 7a00 	vldr	s15, [r0]
 800bd00:	edd0 6a04 	vldr	s13, [r0, #16]
 800bd04:	ee37 7a85 	vadd.f32	s14, s15, s10
 800bd08:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800bd0c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bd10:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bd14:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd1c:	bfc5      	ittet	gt
 800bd1e:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800bd22:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800bd26:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800be34 <b_dcm2q+0x13c>
 800bd2a:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800bd2e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bd32:	ee35 6a47 	vsub.f32	s12, s10, s14
 800bd36:	ee35 7a07 	vadd.f32	s14, s10, s14
 800bd3a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	bfc5      	ittet	gt
 800bd44:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800bd48:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800bd4c:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800be34 <b_dcm2q+0x13c>
 800bd50:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800bd54:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bd58:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800bd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd60:	dd5b      	ble.n	800be1a <b_dcm2q+0x122>
 800bd62:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800bd66:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bd6a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bd6e:	eef1 4ac7 	vsqrt.f32	s9, s14
 800bd72:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bd76:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bd7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd82:	edd0 6a07 	vldr	s13, [r0, #28]
 800bd86:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8e:	bf85      	ittet	hi
 800bd90:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800bd94:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800bd98:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800be34 <b_dcm2q+0x13c>
 800bd9c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800bda0:	edd0 7a05 	vldr	s15, [r0, #20]
 800bda4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bda8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdb0:	d43c      	bmi.n	800be2c <b_dcm2q+0x134>
 800bdb2:	bfd8      	it	le
 800bdb4:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800bdb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdc0:	ed81 7a00 	vstr	s14, [r1]
 800bdc4:	edd0 7a06 	vldr	s15, [r0, #24]
 800bdc8:	ed90 7a02 	vldr	s14, [r0, #8]
 800bdcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd8:	d425      	bmi.n	800be26 <b_dcm2q+0x12e>
 800bdda:	bfd8      	it	le
 800bddc:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800bde0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bde4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bde8:	edc1 5a01 	vstr	s11, [r1, #4]
 800bdec:	edd0 7a01 	vldr	s15, [r0, #4]
 800bdf0:	ed90 7a03 	vldr	s14, [r0, #12]
 800bdf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be00:	d40e      	bmi.n	800be20 <b_dcm2q+0x128>
 800be02:	bfd8      	it	le
 800be04:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800be08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800be0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 800be10:	edc1 4a03 	vstr	s9, [r1, #12]
 800be14:	ed81 6a02 	vstr	s12, [r1, #8]
 800be18:	4770      	bx	lr
 800be1a:	eddf 4a06 	vldr	s9, [pc, #24]	; 800be34 <b_dcm2q+0x13c>
 800be1e:	e7aa      	b.n	800bd76 <b_dcm2q+0x7e>
 800be20:	eeb1 6a46 	vneg.f32	s12, s12
 800be24:	e7f0      	b.n	800be08 <b_dcm2q+0x110>
 800be26:	eef1 5a65 	vneg.f32	s11, s11
 800be2a:	e7d9      	b.n	800bde0 <b_dcm2q+0xe8>
 800be2c:	eeb1 7a47 	vneg.f32	s14, s14
 800be30:	e7c2      	b.n	800bdb8 <b_dcm2q+0xc0>
 800be32:	bf00      	nop
 800be34:	00000000 	.word	0x00000000

0800be38 <q2hpr>:
 800be38:	b510      	push	{r4, lr}
 800be3a:	ed90 7a00 	vldr	s14, [r0]
 800be3e:	edd0 6a01 	vldr	s13, [r0, #4]
 800be42:	edd0 7a02 	vldr	s15, [r0, #8]
 800be46:	ed90 5a03 	vldr	s10, [r0, #12]
 800be4a:	ed2d 8b0a 	vpush	{d8-d12}
 800be4e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800be52:	ee27 8a26 	vmul.f32	s16, s14, s13
 800be56:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800be5a:	ee67 0a07 	vmul.f32	s1, s14, s14
 800be5e:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800be62:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800be66:	ee27 7a05 	vmul.f32	s14, s14, s10
 800be6a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800be6e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800be72:	ee78 aa08 	vadd.f32	s21, s16, s16
 800be76:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800be7a:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800be7e:	ee30 ca00 	vadd.f32	s24, s0, s0
 800be82:	ee36 ba06 	vadd.f32	s22, s12, s12
 800be86:	ee77 8a07 	vadd.f32	s17, s14, s14
 800be8a:	ee75 baa5 	vadd.f32	s23, s11, s11
 800be8e:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800be92:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800be96:	460c      	mov	r4, r1
 800be98:	bb8a      	cbnz	r2, 800befe <q2hpr+0xc6>
 800be9a:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800be9e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800bea2:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bea6:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800beaa:	f00a f833 	bl	8015f14 <atan2f>
 800beae:	eeb0 8a40 	vmov.f32	s16, s0
 800beb2:	ed84 8a00 	vstr	s16, [r4]
 800beb6:	ee38 0aab 	vadd.f32	s0, s17, s23
 800beba:	f009 fff9 	bl	8015eb0 <asinf>
 800bebe:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bec2:	eef0 8a40 	vmov.f32	s17, s0
 800bec6:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800beca:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bece:	f00a f821 	bl	8015f14 <atan2f>
 800bed2:	eef1 8a68 	vneg.f32	s17, s17
 800bed6:	eeb0 9a40 	vmov.f32	s18, s0
 800beda:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee2:	ed84 9a02 	vstr	s18, [r4, #8]
 800bee6:	edc4 8a01 	vstr	s17, [r4, #4]
 800beea:	d505      	bpl.n	800bef8 <q2hpr+0xc0>
 800beec:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bf44 <q2hpr+0x10c>
 800bef0:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bef4:	ed84 8a00 	vstr	s16, [r4]
 800bef8:	ecbd 8b0a 	vpop	{d8-d12}
 800befc:	bd10      	pop	{r4, pc}
 800befe:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bf02:	f009 ffd5 	bl	8015eb0 <asinf>
 800bf06:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bf0a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800bf0e:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bf12:	eeb0 9a40 	vmov.f32	s18, s0
 800bf16:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bf1a:	f009 fffb 	bl	8015f14 <atan2f>
 800bf1e:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bf22:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bf26:	eef0 8a40 	vmov.f32	s17, s0
 800bf2a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bf2e:	eeb1 0a48 	vneg.f32	s0, s16
 800bf32:	f009 ffef 	bl	8015f14 <atan2f>
 800bf36:	eef1 8a68 	vneg.f32	s17, s17
 800bf3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf3e:	ed84 0a00 	vstr	s0, [r4]
 800bf42:	e7ca      	b.n	800beda <q2hpr+0xa2>
 800bf44:	40c90fdb 	.word	0x40c90fdb

0800bf48 <llEvaluate.constprop.0>:
 800bf48:	edd2 0a00 	vldr	s1, [r2]
 800bf4c:	ed90 1a00 	vldr	s2, [r0]
 800bf50:	edd0 1a04 	vldr	s3, [r0, #16]
 800bf54:	edd2 5a01 	vldr	s11, [r2, #4]
 800bf58:	ed90 6a08 	vldr	s12, [r0, #32]
 800bf5c:	ed90 2a05 	vldr	s4, [r0, #20]
 800bf60:	ed92 7a02 	vldr	s14, [r2, #8]
 800bf64:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bf68:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bf6c:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bf70:	edd2 7a03 	vldr	s15, [r2, #12]
 800bf74:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bf78:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bf7c:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bf80:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bf84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	f10d 0810 	add.w	r8, sp, #16
 800bf8e:	2704      	movs	r7, #4
 800bf90:	f101 0510 	add.w	r5, r1, #16
 800bf94:	2f04      	cmp	r7, #4
 800bf96:	4686      	mov	lr, r0
 800bf98:	f04f 0c03 	mov.w	ip, #3
 800bf9c:	b27b      	sxtb	r3, r7
 800bf9e:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800bfa2:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800bfa6:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800bfaa:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800bfae:	eea6 7a43 	vfms.f32	s14, s12, s6
 800bfb2:	edcd 6a00 	vstr	s13, [sp]
 800bfb6:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800bfba:	eee6 7a63 	vfms.f32	s15, s12, s7
 800bfbe:	ed8d 6a01 	vstr	s12, [sp, #4]
 800bfc2:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800bfc6:	edcd 6a02 	vstr	s13, [sp, #8]
 800bfca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bfce:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bfd2:	ed78 7a01 	vldmdb	r8!, {s15}
 800bfd6:	ed65 7a01 	vstmdb	r5!, {s15}
 800bfda:	d029      	beq.n	800c030 <llEvaluate.constprop.0+0xe8>
 800bfdc:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800bfe0:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800bfe4:	4432      	add	r2, r6
 800bfe6:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800bfea:	edd2 6a00 	vldr	s13, [r2]
 800bfee:	ed94 7a00 	vldr	s14, [r4]
 800bff2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bff6:	3301      	adds	r3, #1
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	2a04      	cmp	r2, #4
 800bffc:	b25b      	sxtb	r3, r3
 800bffe:	edc5 7a00 	vstr	s15, [r5]
 800c002:	d1ed      	bne.n	800bfe0 <llEvaluate.constprop.0+0x98>
 800c004:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800c008:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c00c:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800c010:	ed85 7a00 	vstr	s14, [r5]
 800c014:	d013      	beq.n	800c03e <llEvaluate.constprop.0+0xf6>
 800c016:	3f01      	subs	r7, #1
 800c018:	b2ff      	uxtb	r7, r7
 800c01a:	ed78 7a01 	vldmdb	r8!, {s15}
 800c01e:	2f04      	cmp	r7, #4
 800c020:	f1ae 0e14 	sub.w	lr, lr, #20
 800c024:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c028:	b27b      	sxtb	r3, r7
 800c02a:	ed65 7a01 	vstmdb	r5!, {s15}
 800c02e:	d1d5      	bne.n	800bfdc <llEvaluate.constprop.0+0x94>
 800c030:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800c034:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c038:	ed85 7a00 	vstr	s14, [r5]
 800c03c:	e7eb      	b.n	800c016 <llEvaluate.constprop.0+0xce>
 800c03e:	b004      	add	sp, #16
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c044 <MEMS_updateMagBufferIndex>:
 800c044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c048:	ed2d 8b02 	vpush	{d8}
 800c04c:	7804      	ldrb	r4, [r0, #0]
 800c04e:	7842      	ldrb	r2, [r0, #1]
 800c050:	4606      	mov	r6, r0
 800c052:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800c056:	2300      	movs	r3, #0
 800c058:	4294      	cmp	r4, r2
 800c05a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c05e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800c062:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800c066:	b083      	sub	sp, #12
 800c068:	460d      	mov	r5, r1
 800c06a:	f100 0001 	add.w	r0, r0, #1
 800c06e:	f000 8083 	beq.w	800c178 <MEMS_updateMagBufferIndex+0x134>
 800c072:	1b00      	subs	r0, r0, r4
 800c074:	fb90 f8f2 	sdiv	r8, r0, r2
 800c078:	fb02 0018 	mls	r0, r2, r8, r0
 800c07c:	2800      	cmp	r0, #0
 800c07e:	bfb6      	itet	lt
 800c080:	eb02 0800 	addlt.w	r8, r2, r0
 800c084:	fa0f f880 	sxthge.w	r8, r0
 800c088:	fa0f f888 	sxthlt.w	r8, r8
 800c08c:	b934      	cbnz	r4, 800c09c <MEMS_updateMagBufferIndex+0x58>
 800c08e:	23ff      	movs	r3, #255	; 0xff
 800c090:	70b3      	strb	r3, [r6, #2]
 800c092:	b003      	add	sp, #12
 800c094:	ecbd 8b02 	vpop	{d8}
 800c098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c09c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c0a0:	2700      	movs	r7, #0
 800c0a2:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	e000      	b.n	800c0ac <MEMS_updateMagBufferIndex+0x68>
 800c0aa:	7872      	ldrb	r2, [r6, #1]
 800c0ac:	4443      	add	r3, r8
 800c0ae:	fb93 f4f2 	sdiv	r4, r3, r2
 800c0b2:	fb02 3314 	mls	r3, r2, r4, r3
 800c0b6:	b2dc      	uxtb	r4, r3
 800c0b8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800c0bc:	3701      	adds	r7, #1
 800c0be:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800c0c2:	fb92 f3f5 	sdiv	r3, r2, r5
 800c0c6:	fb05 2313 	mls	r3, r5, r3, r2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	bfb8      	it	lt
 800c0ce:	195b      	addlt	r3, r3, r5
 800c0d0:	b21b      	sxth	r3, r3
 800c0d2:	ee00 3a10 	vmov	s0, r3
 800c0d6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c0da:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c0de:	f009 fdef 	bl	8015cc0 <roundf>
 800c0e2:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800c0e6:	fb92 f3f5 	sdiv	r3, r2, r5
 800c0ea:	fb05 2313 	mls	r3, r5, r3, r2
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	bfb8      	it	lt
 800c0f2:	195b      	addlt	r3, r3, r5
 800c0f4:	b21b      	sxth	r3, r3
 800c0f6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c0fa:	ee00 3a10 	vmov	s0, r3
 800c0fe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c102:	edcd 7a01 	vstr	s15, [sp, #4]
 800c106:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c10a:	f009 fdd9 	bl	8015cc0 <roundf>
 800c10e:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800c112:	fb92 f3f5 	sdiv	r3, r2, r5
 800c116:	fb05 2313 	mls	r3, r5, r3, r2
 800c11a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c11e:	18ea      	adds	r2, r5, r3
 800c120:	b219      	sxth	r1, r3
 800c122:	b212      	sxth	r2, r2
 800c124:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800c128:	edcd 7a01 	vstr	s15, [sp, #4]
 800c12c:	ee00 1a10 	vmov	s0, r1
 800c130:	ee07 2a90 	vmov	s15, r2
 800c134:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c142:	bfb8      	it	lt
 800c144:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800c148:	f009 fdba 	bl	8015cc0 <roundf>
 800c14c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c150:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800c154:	edcd 7a01 	vstr	s15, [sp, #4]
 800c158:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c15c:	4622      	mov	r2, r4
 800c15e:	4649      	mov	r1, r9
 800c160:	4630      	mov	r0, r6
 800c162:	f7ff fce7 	bl	800bb34 <MEMS_setMagIndexToOne>
 800c166:	7832      	ldrb	r2, [r6, #0]
 800c168:	b2fb      	uxtb	r3, r7
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d89d      	bhi.n	800c0aa <MEMS_updateMagBufferIndex+0x66>
 800c16e:	b003      	add	sp, #12
 800c170:	ecbd 8b02 	vpop	{d8}
 800c174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c178:	fb90 f8f4 	sdiv	r8, r0, r4
 800c17c:	fb04 0018 	mls	r0, r4, r8, r0
 800c180:	fa0f f880 	sxth.w	r8, r0
 800c184:	e782      	b.n	800c08c <MEMS_updateMagBufferIndex+0x48>
 800c186:	bf00      	nop

0800c188 <getMagStats.constprop.0>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c18e:	2400      	movs	r4, #0
 800c190:	4607      	mov	r7, r0
 800c192:	6034      	str	r4, [r6, #0]
 800c194:	601c      	str	r4, [r3, #0]
 800c196:	7800      	ldrb	r0, [r0, #0]
 800c198:	787d      	ldrb	r5, [r7, #1]
 800c19a:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800c19e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c1a2:	42a8      	cmp	r0, r5
 800c1a4:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800c1a8:	f000 80c0 	beq.w	800c32c <getMagStats.constprop.0+0x1a4>
 800c1ac:	3401      	adds	r4, #1
 800c1ae:	eba4 0c00 	sub.w	ip, r4, r0
 800c1b2:	fb9c f4f5 	sdiv	r4, ip, r5
 800c1b6:	fb05 c414 	mls	r4, r5, r4, ip
 800c1ba:	2c00      	cmp	r4, #0
 800c1bc:	bfb8      	it	lt
 800c1be:	1964      	addlt	r4, r4, r5
 800c1c0:	b224      	sxth	r4, r4
 800c1c2:	ee04 0a90 	vmov	s9, r0
 800c1c6:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800c348 <getMagStats.constprop.0+0x1c0>
 800c1ca:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800c1ce:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c1d2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f000 80b2 	beq.w	800c340 <getMagStats.constprop.0+0x1b8>
 800c1dc:	3801      	subs	r0, #1
 800c1de:	fa54 fc80 	uxtab	ip, r4, r0
 800c1e2:	f8b1 9000 	ldrh.w	r9, [r1]
 800c1e6:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800c1ea:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800c1ee:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800c34c <getMagStats.constprop.0+0x1c4>
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	e002      	b.n	800c1fc <getMagStats.constprop.0+0x74>
 800c1f6:	ed93 3a00 	vldr	s6, [r3]
 800c1fa:	3401      	adds	r4, #1
 800c1fc:	fb94 f1f5 	sdiv	r1, r4, r5
 800c200:	fb05 4111 	mls	r1, r5, r1, r4
 800c204:	b2c9      	uxtb	r1, r1
 800c206:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800c20a:	edd2 3a00 	vldr	s7, [r2]
 800c20e:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800c212:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800c216:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800c218:	ed92 4a04 	vldr	s8, [r2, #16]
 800c21c:	ed92 6a08 	vldr	s12, [r2, #32]
 800c220:	ebaa 0a09 	sub.w	sl, sl, r9
 800c224:	ebab 0b08 	sub.w	fp, fp, r8
 800c228:	fa0f fa8a 	sxth.w	sl, sl
 800c22c:	ee07 aa10 	vmov	s14, sl
 800c230:	fa0f fa8b 	sxth.w	sl, fp
 800c234:	ee06 aa90 	vmov	s13, sl
 800c238:	eba1 010e 	sub.w	r1, r1, lr
 800c23c:	b209      	sxth	r1, r1
 800c23e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c242:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c246:	ee07 1a90 	vmov	s15, r1
 800c24a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c24e:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c256:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c25a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c25e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c262:	ee16 1a90 	vmov	r1, s13
 800c266:	ee17 aa10 	vmov	sl, s14
 800c26a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c26e:	fb11 f101 	smulbb	r1, r1, r1
 800c272:	fa0f fa8a 	sxth.w	sl, sl
 800c276:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800c27a:	ee17 1a90 	vmov	r1, s15
 800c27e:	b209      	sxth	r1, r1
 800c280:	fb01 a101 	mla	r1, r1, r1, sl
 800c284:	ee07 1a90 	vmov	s15, r1
 800c288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c28c:	f100 0a01 	add.w	sl, r0, #1
 800c290:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c294:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c298:	ee17 1a90 	vmov	r1, s15
 800c29c:	b209      	sxth	r1, r1
 800c29e:	ee07 1a10 	vmov	s14, r1
 800c2a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c2a6:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c2aa:	ee37 7a03 	vadd.f32	s14, s14, s6
 800c2ae:	eef0 7ae7 	vabs.f32	s15, s15
 800c2b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2b6:	ed83 7a00 	vstr	s14, [r3]
 800c2ba:	ee17 1a90 	vmov	r1, s15
 800c2be:	b209      	sxth	r1, r1
 800c2c0:	fb01 fb01 	mul.w	fp, r1, r1
 800c2c4:	ee07 ba90 	vmov	s15, fp
 800c2c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2cc:	ee07 1a90 	vmov	s15, r1
 800c2d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2d4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c2d8:	edd6 7a00 	vldr	s15, [r6]
 800c2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2e4:	bf48      	it	mi
 800c2e6:	fa5f f08a 	uxtbmi.w	r0, sl
 800c2ea:	45a4      	cmp	ip, r4
 800c2ec:	edc6 7a00 	vstr	s15, [r6]
 800c2f0:	d181      	bne.n	800c1f6 <getMagStats.constprop.0+0x6e>
 800c2f2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800c2f6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c350 <getMagStats.constprop.0+0x1c8>
 800c2fa:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800c2fe:	eef1 7ae6 	vsqrt.f32	s15, s13
 800c302:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30e:	bfb8      	it	lt
 800c310:	eef0 7a47 	vmovlt.f32	s15, s14
 800c314:	edc6 7a00 	vstr	s15, [r6]
 800c318:	edd3 7a00 	vldr	s15, [r3]
 800c31c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c320:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800c324:	edc3 7a00 	vstr	s15, [r3]
 800c328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32c:	1c65      	adds	r5, r4, #1
 800c32e:	fb95 f4f0 	sdiv	r4, r5, r0
 800c332:	fb00 5414 	mls	r4, r0, r4, r5
 800c336:	ee04 0a90 	vmov	s9, r0
 800c33a:	b224      	sxth	r4, r4
 800c33c:	4605      	mov	r5, r0
 800c33e:	e742      	b.n	800c1c6 <getMagStats.constprop.0+0x3e>
 800c340:	edd6 7a00 	vldr	s15, [r6]
 800c344:	e7d5      	b.n	800c2f2 <getMagStats.constprop.0+0x16a>
 800c346:	bf00      	nop
 800c348:	423c0000 	.word	0x423c0000
 800c34c:	00000000 	.word	0x00000000
 800c350:	3f59999a 	.word	0x3f59999a

0800c354 <MFX_emptyAttitude>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	ed2d 8b10 	vpush	{d8-d15}
 800c35c:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c360:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c364:	f04f 0a00 	mov.w	sl, #0
 800c368:	4fef      	ldr	r7, [pc, #956]	; (800c728 <MFX_emptyAttitude+0x3d4>)
 800c36a:	f8c4 a008 	str.w	sl, [r4, #8]
 800c36e:	e9c4 aa00 	strd	sl, sl, [r4]
 800c372:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c376:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c37a:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c37e:	4680      	mov	r8, r0
 800c380:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c384:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c388:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c38c:	0c1b      	lsrs	r3, r3, #16
 800c38e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c392:	ab27      	add	r3, sp, #156	; 0x9c
 800c394:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c398:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c39c:	ab2d      	add	r3, sp, #180	; 0xb4
 800c39e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c3a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3a6:	ab30      	add	r3, sp, #192	; 0xc0
 800c3a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3ac:	ab33      	add	r3, sp, #204	; 0xcc
 800c3ae:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c3b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3b6:	f04f 0c00 	mov.w	ip, #0
 800c3ba:	ab36      	add	r3, sp, #216	; 0xd8
 800c3bc:	f04f 0b00 	mov.w	fp, #0
 800c3c0:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c3c4:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c3c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	2224      	movs	r2, #36	; 0x24
 800c3d0:	f00b faa0 	bl	8017914 <memset>
 800c3d4:	4651      	mov	r1, sl
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c3dc:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c72c <MFX_emptyAttitude+0x3d8>
 800c3e0:	eddf ead3 	vldr	s29, [pc, #844]	; 800c730 <MFX_emptyAttitude+0x3dc>
 800c3e4:	f00b fa96 	bl	8017914 <memset>
 800c3e8:	edd5 4a00 	vldr	s9, [r5]
 800c3ec:	ed95 5a01 	vldr	s10, [r5, #4]
 800c3f0:	edd5 5a02 	vldr	s11, [r5, #8]
 800c3f4:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c3f8:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c3fc:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c400:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c404:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c408:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c40c:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c410:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c414:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c418:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c41c:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c420:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c424:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c428:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c42c:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c430:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c434:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c438:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c43c:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c440:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c444:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c448:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c44c:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c450:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c454:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c458:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c45c:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c460:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c464:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c468:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c46c:	ed95 6a03 	vldr	s12, [r5, #12]
 800c470:	edd5 6a04 	vldr	s13, [r5, #16]
 800c474:	ed95 7a05 	vldr	s14, [r5, #20]
 800c478:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c47c:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c480:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c484:	edcd 6a07 	vstr	s13, [sp, #28]
 800c488:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c48c:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c490:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c494:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c498:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c49c:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c4a0:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c4a4:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c4a8:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c4ac:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c4b0:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c4b4:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c4b8:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c4bc:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c4c0:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c4c4:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c4c8:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c4cc:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c4d0:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c4d4:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c4d8:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c4dc:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c4e0:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c4e4:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c4e8:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c4ec:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c4f0:	edd5 7a06 	vldr	s15, [r5, #24]
 800c4f4:	edd5 fa07 	vldr	s31, [r5, #28]
 800c4f8:	ed95 fa08 	vldr	s30, [r5, #32]
 800c4fc:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c500:	edcd 7a05 	vstr	s15, [sp, #20]
 800c504:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c508:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c50c:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c510:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c514:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c518:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c51c:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c520:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c524:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c528:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c52c:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c530:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c534:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c538:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c53c:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c540:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c544:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c548:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c54c:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c550:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c554:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c558:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c55c:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c560:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c564:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c568:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c56c:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c570:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c574:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c576:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c57a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c57e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	f8cc 3000 	str.w	r3, [ip]
 800c58a:	4651      	mov	r1, sl
 800c58c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c590:	4620      	mov	r0, r4
 800c592:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c596:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c59a:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c59e:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c5a2:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c5a6:	f00b f9b5 	bl	8017914 <memset>
 800c5aa:	4621      	mov	r1, r4
 800c5ac:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5b0:	a898      	add	r0, sp, #608	; 0x260
 800c5b2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c5b6:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c5ba:	f00b f983 	bl	80178c4 <memcpy>
 800c5be:	4651      	mov	r1, sl
 800c5c0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c5ca:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c5ce:	f00b f9a1 	bl	8017914 <memset>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5d8:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c5da:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c5de:	f00b f971 	bl	80178c4 <memcpy>
 800c5e2:	4651      	mov	r1, sl
 800c5e4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c5ee:	f00b f991 	bl	8017914 <memset>
 800c5f2:	4621      	mov	r1, r4
 800c5f4:	8037      	strh	r7, [r6, #0]
 800c5f6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5fa:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c5fe:	f00b f961 	bl	80178c4 <memcpy>
 800c602:	4651      	mov	r1, sl
 800c604:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c608:	4620      	mov	r0, r4
 800c60a:	ed86 8a01 	vstr	s16, [r6, #4]
 800c60e:	f00b f981 	bl	8017914 <memset>
 800c612:	4621      	mov	r1, r4
 800c614:	802f      	strh	r7, [r5, #0]
 800c616:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c61a:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c61e:	f00b f951 	bl	80178c4 <memcpy>
 800c622:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c626:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c62a:	2701      	movs	r7, #1
 800c62c:	9600      	str	r6, [sp, #0]
 800c62e:	9403      	str	r4, [sp, #12]
 800c630:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c734 <MFX_emptyAttitude+0x3e0>
 800c634:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c738 <MFX_emptyAttitude+0x3e4>
 800c638:	ed85 8a01 	vstr	s16, [r5, #4]
 800c63c:	483f      	ldr	r0, [pc, #252]	; (800c73c <MFX_emptyAttitude+0x3e8>)
 800c63e:	4d40      	ldr	r5, [pc, #256]	; (800c740 <MFX_emptyAttitude+0x3ec>)
 800c640:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c764 <MFX_emptyAttitude+0x410>
 800c644:	951c      	str	r5, [sp, #112]	; 0x70
 800c646:	abf2      	add	r3, sp, #968	; 0x3c8
 800c648:	aa96      	add	r2, sp, #600	; 0x258
 800c64a:	a90d      	add	r1, sp, #52	; 0x34
 800c64c:	9017      	str	r0, [sp, #92]	; 0x5c
 800c64e:	4d3d      	ldr	r5, [pc, #244]	; (800c744 <MFX_emptyAttitude+0x3f0>)
 800c650:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c654:	4638      	mov	r0, r7
 800c656:	ae27      	add	r6, sp, #156	; 0x9c
 800c658:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c65c:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c660:	951b      	str	r5, [sp, #108]	; 0x6c
 800c662:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c666:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c66a:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c66e:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c672:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c676:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c67a:	f7fe fecf 	bl	800b41c <DataHist_parameters>
 800c67e:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c680:	4b31      	ldr	r3, [pc, #196]	; (800c748 <MFX_emptyAttitude+0x3f4>)
 800c682:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c686:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c68a:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c68e:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c692:	f8c8 300c 	str.w	r3, [r8, #12]
 800c696:	4b2d      	ldr	r3, [pc, #180]	; (800c74c <MFX_emptyAttitude+0x3f8>)
 800c698:	f8c8 3014 	str.w	r3, [r8, #20]
 800c69c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c6a0:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c750 <MFX_emptyAttitude+0x3fc>
 800c6a4:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c754 <MFX_emptyAttitude+0x400>
 800c6a8:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c758 <MFX_emptyAttitude+0x404>
 800c6ac:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c75c <MFX_emptyAttitude+0x408>
 800c6b0:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c760 <MFX_emptyAttitude+0x40c>
 800c6b4:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c6b8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c768 <MFX_emptyAttitude+0x414>
 800c6bc:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c76c <MFX_emptyAttitude+0x418>
 800c6c0:	edc8 2a06 	vstr	s5, [r8, #24]
 800c6c4:	f04f 0b00 	mov.w	fp, #0
 800c6c8:	f04f 0c00 	mov.w	ip, #0
 800c6cc:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c6d0:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c6d4:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c6d8:	ad2d      	add	r5, sp, #180	; 0xb4
 800c6da:	469b      	mov	fp, r3
 800c6dc:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c770 <MFX_emptyAttitude+0x41c>
 800c6e0:	ed88 3a07 	vstr	s6, [r8, #28]
 800c6e4:	f240 1301 	movw	r3, #257	; 0x101
 800c6e8:	edc8 3a08 	vstr	s7, [r8, #32]
 800c6ec:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c6f0:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c6f4:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c6f8:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c6fc:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c700:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c704:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c708:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c70c:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c710:	f8c8 3000 	str.w	r3, [r8]
 800c714:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c718:	ed88 8a02 	vstr	s16, [r8, #8]
 800c71c:	ed88 8a04 	vstr	s16, [r8, #16]
 800c720:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c724:	e028      	b.n	800c778 <MFX_emptyAttitude+0x424>
 800c726:	bf00      	nop
 800c728:	0801a908 	.word	0x0801a908
 800c72c:	00000000 	.word	0x00000000
 800c730:	447a0000 	.word	0x447a0000
 800c734:	3e93ffa3 	.word	0x3e93ffa3
 800c738:	3e5cec8f 	.word	0x3e5cec8f
 800c73c:	3ea25c13 	.word	0x3ea25c13
 800c740:	40a00000 	.word	0x40a00000
 800c744:	3d57bb3d 	.word	0x3d57bb3d
 800c748:	01010100 	.word	0x01010100
 800c74c:	41200000 	.word	0x41200000
 800c750:	3a9d4952 	.word	0x3a9d4952
 800c754:	3ac49ba6 	.word	0x3ac49ba6
 800c758:	3b03126f 	.word	0x3b03126f
 800c75c:	402ab021 	.word	0x402ab021
 800c760:	3a83126f 	.word	0x3a83126f
 800c764:	3e006d36 	.word	0x3e006d36
 800c768:	3f639581 	.word	0x3f639581
 800c76c:	3f13f7cf 	.word	0x3f13f7cf
 800c770:	3f2ac083 	.word	0x3f2ac083
 800c774:	3f4ccccd 	.word	0x3f4ccccd
 800c778:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c77a:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c77e:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c782:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c786:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c78a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c78e:	ab33      	add	r3, sp, #204	; 0xcc
 800c790:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c794:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c798:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c79c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c79e:	ab36      	add	r3, sp, #216	; 0xd8
 800c7a0:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c7a4:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c7a8:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c7ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7ae:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c774 <MFX_emptyAttitude+0x420>
 800c7b2:	4bd6      	ldr	r3, [pc, #856]	; (800cb0c <MFX_emptyAttitude+0x7b8>)
 800c7b4:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c7b8:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c7bc:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c7c0:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c7c4:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c7c8:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c7cc:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c7d0:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c7d4:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c7d8:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c7dc:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c7e0:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c7e4:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c7e8:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c7ec:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c7f0:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c7f4:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c7f8:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c7fc:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c800:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c804:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c808:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c80c:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c810:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c814:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c818:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c81c:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c820:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c824:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c828:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c82c:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c830:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c834:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c838:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c83c:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c840:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c844:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c848:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c84c:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c850:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c854:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c858:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c85c:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c860:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c864:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c868:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c86c:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c870:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c874:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c878:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c87c:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c880:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c884:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c888:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c88c:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c890:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c894:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c898:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c89c:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c8a0:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c8a4:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c8a8:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c8ac:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c8b0:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c8b4:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c8b8:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c8bc:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c8c0:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c8c4:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c8c8:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c8cc:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c8d0:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c8d4:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c8d8:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c8dc:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c8e0:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c8e4:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c8e8:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c8ec:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c8f0:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c8f4:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c8f8:	eddd 6a07 	vldr	s13, [sp, #28]
 800c8fc:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c900:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c904:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c908:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c90c:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c910:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c914:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c918:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c91c:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c920:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c924:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c928:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c92c:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c930:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c934:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c938:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c93c:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c940:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c944:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c948:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c94c:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c950:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c954:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c958:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c95c:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c960:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c964:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c968:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c96c:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c970:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c974:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c978:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c97c:	eddd 7a05 	vldr	s15, [sp, #20]
 800c980:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c984:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c988:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c98c:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c990:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c994:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c998:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c99c:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c9a0:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c9a4:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c9a8:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c9ac:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c9b0:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c9b4:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c9b8:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c9bc:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c9c0:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c9c4:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c9c8:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c9cc:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c9d0:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c9d4:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c9d8:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c9dc:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c9e0:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c9e4:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c9e8:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c9ec:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c9f0:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c9f4:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c9f8:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c9fc:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800ca00:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800ca04:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800ca08:	7820      	ldrb	r0, [r4, #0]
 800ca0a:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800ca0e:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800ca12:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800ca16:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800ca1a:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800ca1e:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800ca22:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800ca26:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800ca2a:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800ca2e:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800ca32:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800ca36:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800ca3a:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800ca3e:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800ca42:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800ca46:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800ca4a:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800ca4e:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800ca52:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800ca56:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800ca5a:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800ca5e:	f8cd e00c 	str.w	lr, [sp, #12]
 800ca62:	9500      	str	r5, [sp, #0]
 800ca64:	f7fe fcda 	bl	800b41c <DataHist_parameters>
 800ca68:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800ca6c:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800ca70:	9205      	str	r2, [sp, #20]
 800ca72:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800ca76:	ed8b ba00 	vstr	s22, [fp]
 800ca7a:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800ca7e:	ed83 ba00 	vstr	s22, [r3]
 800ca82:	9b05      	ldr	r3, [sp, #20]
 800ca84:	9106      	str	r1, [sp, #24]
 800ca86:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800ca8a:	ed89 ba00 	vstr	s22, [r9]
 800ca8e:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800ca92:	ed83 8a00 	vstr	s16, [r3]
 800ca96:	9b06      	ldr	r3, [sp, #24]
 800ca98:	9207      	str	r2, [sp, #28]
 800ca9a:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800ca9e:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800caa2:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800caa6:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800caaa:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800caae:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800cab2:	ed8e ba00 	vstr	s22, [lr]
 800cab6:	ed8c ba00 	vstr	s22, [ip]
 800caba:	ed87 ba00 	vstr	s22, [r7]
 800cabe:	ed86 ba00 	vstr	s22, [r6]
 800cac2:	ed85 ba00 	vstr	s22, [r5]
 800cac6:	ed84 ba00 	vstr	s22, [r4]
 800caca:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800cace:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800cad2:	ed83 ba00 	vstr	s22, [r3]
 800cad6:	9b07      	ldr	r3, [sp, #28]
 800cad8:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800cadc:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800cae0:	ed80 8a00 	vstr	s16, [r0]
 800cae4:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800cae8:	ed81 ba00 	vstr	s22, [r1]
 800caec:	ed83 ba00 	vstr	s22, [r3]
 800caf0:	230a      	movs	r3, #10
 800caf2:	ed82 ba00 	vstr	s22, [r2]
 800caf6:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800cafa:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800cafe:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800cb02:	ecbd 8b10 	vpop	{d8-d15}
 800cb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0a:	bf00      	nop
 800cb0c:	3f333333 	.word	0x3f333333

0800cb10 <output_update>:
 800cb10:	ed90 7a00 	vldr	s14, [r0]
 800cb14:	edd0 7a01 	vldr	s15, [r0, #4]
 800cb18:	ed90 5a03 	vldr	s10, [r0, #12]
 800cb1c:	edd0 5a02 	vldr	s11, [r0, #8]
 800cb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb24:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cb28:	ee27 6a07 	vmul.f32	s12, s14, s14
 800cb2c:	ee67 6a05 	vmul.f32	s13, s14, s10
 800cb30:	ee36 6a24 	vadd.f32	s12, s12, s9
 800cb34:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800cb38:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cb3c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cb40:	ee36 6a06 	vadd.f32	s12, s12, s12
 800cb44:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800cb48:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800cb4c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cb50:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cb54:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800cb58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb5c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800cb60:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cb64:	460f      	mov	r7, r1
 800cb66:	4615      	mov	r5, r2
 800cb68:	461e      	mov	r6, r3
 800cb6a:	f1bc 0f00 	cmp.w	ip, #0
 800cb6e:	d146      	bne.n	800cbfe <output_update+0xee>
 800cb70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb74:	eef1 6a66 	vneg.f32	s13, s13
 800cb78:	edc3 7a01 	vstr	s15, [r3, #4]
 800cb7c:	edc3 6a00 	vstr	s13, [r3]
 800cb80:	ed83 5a02 	vstr	s10, [r3, #8]
 800cb84:	4662      	mov	r2, ip
 800cb86:	4629      	mov	r1, r5
 800cb88:	4604      	mov	r4, r0
 800cb8a:	f7ff f955 	bl	800be38 <q2hpr>
 800cb8e:	edd5 6a01 	vldr	s13, [r5, #4]
 800cb92:	ed95 7a00 	vldr	s14, [r5]
 800cb96:	edd5 7a02 	vldr	s15, [r5, #8]
 800cb9a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800ccac <output_update+0x19c>
 800cb9e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cba2:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800cba6:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800cbaa:	ed85 7a00 	vstr	s14, [r5]
 800cbae:	edc5 6a01 	vstr	s13, [r5, #4]
 800cbb2:	edc5 7a02 	vstr	s15, [r5, #8]
 800cbb6:	ed97 7a01 	vldr	s14, [r7, #4]
 800cbba:	edd6 7a00 	vldr	s15, [r6]
 800cbbe:	6822      	ldr	r2, [r4, #0]
 800cbc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbc4:	edc8 7a00 	vstr	s15, [r8]
 800cbc8:	ed97 7a00 	vldr	s14, [r7]
 800cbcc:	edd6 7a01 	vldr	s15, [r6, #4]
 800cbd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbd4:	edc8 7a01 	vstr	s15, [r8, #4]
 800cbd8:	edd6 7a02 	vldr	s15, [r6, #8]
 800cbdc:	ed97 7a02 	vldr	s14, [r7, #8]
 800cbe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbe4:	edc8 7a02 	vstr	s15, [r8, #8]
 800cbe8:	edd4 7a02 	vldr	s15, [r4, #8]
 800cbec:	6863      	ldr	r3, [r4, #4]
 800cbee:	6023      	str	r3, [r4, #0]
 800cbf0:	eef1 7a67 	vneg.f32	s15, s15
 800cbf4:	6062      	str	r2, [r4, #4]
 800cbf6:	edc4 7a02 	vstr	s15, [r4, #8]
 800cbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbfe:	f1bc 0f01 	cmp.w	ip, #1
 800cc02:	d015      	beq.n	800cc30 <output_update+0x120>
 800cc04:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800ccac <output_update+0x19c>
 800cc08:	edd2 6a00 	vldr	s13, [r2]
 800cc0c:	ed92 7a01 	vldr	s14, [r2, #4]
 800cc10:	edd2 7a02 	vldr	s15, [r2, #8]
 800cc14:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc18:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc20:	edc2 6a00 	vstr	s13, [r2]
 800cc24:	ed82 7a01 	vstr	s14, [r2, #4]
 800cc28:	edc2 7a02 	vstr	s15, [r2, #8]
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc34:	ee36 6a65 	vsub.f32	s12, s12, s11
 800cc38:	eef1 6a66 	vneg.f32	s13, s13
 800cc3c:	edc3 7a00 	vstr	s15, [r3]
 800cc40:	ed83 6a02 	vstr	s12, [r3, #8]
 800cc44:	edc3 6a01 	vstr	s13, [r3, #4]
 800cc48:	4662      	mov	r2, ip
 800cc4a:	4629      	mov	r1, r5
 800cc4c:	f7ff f8f4 	bl	800be38 <q2hpr>
 800cc50:	edd5 6a00 	vldr	s13, [r5]
 800cc54:	ed95 7a01 	vldr	s14, [r5, #4]
 800cc58:	edd5 7a02 	vldr	s15, [r5, #8]
 800cc5c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800ccac <output_update+0x19c>
 800cc60:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc64:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc68:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc6c:	ed85 7a01 	vstr	s14, [r5, #4]
 800cc70:	edc5 6a00 	vstr	s13, [r5]
 800cc74:	edc5 7a02 	vstr	s15, [r5, #8]
 800cc78:	ed97 7a00 	vldr	s14, [r7]
 800cc7c:	edd6 7a00 	vldr	s15, [r6]
 800cc80:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc84:	edc8 7a00 	vstr	s15, [r8]
 800cc88:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc8c:	edd6 7a01 	vldr	s15, [r6, #4]
 800cc90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc94:	edc8 7a01 	vstr	s15, [r8, #4]
 800cc98:	edd6 7a02 	vldr	s15, [r6, #8]
 800cc9c:	ed97 7a02 	vldr	s14, [r7, #8]
 800cca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cca4:	edc8 7a02 	vstr	s15, [r8, #8]
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	42652ee1 	.word	0x42652ee1

0800ccb0 <kalman_3gyro.constprop.0>:
 800ccb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb4:	ed2d 8b10 	vpush	{d8-d15}
 800ccb8:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800ccbc:	edd2 9a02 	vldr	s19, [r2, #8]
 800ccc0:	edd2 8a03 	vldr	s17, [r2, #12]
 800ccc4:	edd2 6a04 	vldr	s13, [r2, #16]
 800ccc8:	ed92 6a05 	vldr	s12, [r2, #20]
 800cccc:	6854      	ldr	r4, [r2, #4]
 800ccce:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800ccd2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ccd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccda:	4683      	mov	fp, r0
 800ccdc:	edd2 7a00 	vldr	s15, [r2]
 800cce0:	48e3      	ldr	r0, [pc, #908]	; (800d070 <kalman_3gyro.constprop.0+0x3c0>)
 800cce2:	9108      	str	r1, [sp, #32]
 800cce4:	904a      	str	r0, [sp, #296]	; 0x128
 800cce6:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800ccea:	460d      	mov	r5, r1
 800ccec:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	9328      	str	r3, [sp, #160]	; 0xa0
 800ccf4:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800ccf8:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800ccfc:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800cd00:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800cd04:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800cd08:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800cd0c:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800cd10:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800cd14:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800cd18:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800cd1c:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800cd20:	946f      	str	r4, [sp, #444]	; 0x1bc
 800cd22:	9470      	str	r4, [sp, #448]	; 0x1c0
 800cd24:	9471      	str	r4, [sp, #452]	; 0x1c4
 800cd26:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800cd2a:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800cd2e:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800cd32:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800cd36:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800cd3a:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800cd3e:	eeb0 8a60 	vmov.f32	s16, s1
 800cd42:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800cd46:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800cd4a:	ed8d 1a07 	vstr	s2, [sp, #28]
 800cd4e:	f00a fde1 	bl	8017914 <memset>
 800cd52:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800cd56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cd5a:	600b      	str	r3, [r1, #0]
 800cd5c:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800cd60:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800cd64:	600b      	str	r3, [r1, #0]
 800cd66:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800cd6a:	600b      	str	r3, [r1, #0]
 800cd6c:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800cd70:	600b      	str	r3, [r1, #0]
 800cd72:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800cd76:	600b      	str	r3, [r1, #0]
 800cd78:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800cd7c:	600b      	str	r3, [r1, #0]
 800cd7e:	2a00      	cmp	r2, #0
 800cd80:	f001 82c2 	beq.w	800e308 <kalman_3gyro.constprop.0+0x1658>
 800cd84:	ed95 5a02 	vldr	s10, [r5, #8]
 800cd88:	edd5 5a01 	vldr	s11, [r5, #4]
 800cd8c:	ed95 3a00 	vldr	s6, [r5]
 800cd90:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cd94:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800cd98:	ee35 4a05 	vadd.f32	s8, s10, s10
 800cd9c:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800cda0:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cda4:	ee63 7a27 	vmul.f32	s15, s6, s15
 800cda8:	ee33 3a03 	vadd.f32	s6, s6, s6
 800cdac:	9b08      	ldr	r3, [sp, #32]
 800cdae:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800cdb2:	ed82 4a00 	vstr	s8, [r2]
 800cdb6:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800cdba:	edc2 4a00 	vstr	s9, [r2]
 800cdbe:	ed93 6a05 	vldr	s12, [r3, #20]
 800cdc2:	edd3 6a04 	vldr	s13, [r3, #16]
 800cdc6:	ed93 7a03 	vldr	s14, [r3, #12]
 800cdca:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800cdce:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800cdd2:	ed82 5a00 	vstr	s10, [r2]
 800cdd6:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800cdda:	ed82 3a00 	vstr	s6, [r2]
 800cdde:	eef1 3a46 	vneg.f32	s7, s12
 800cde2:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800cde6:	edc2 5a00 	vstr	s11, [r2]
 800cdea:	eeb1 4a66 	vneg.f32	s8, s13
 800cdee:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800cdf2:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800cdf6:	edc2 7a00 	vstr	s15, [r2]
 800cdfa:	ee34 3a04 	vadd.f32	s6, s8, s8
 800cdfe:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800ce02:	eef1 4a47 	vneg.f32	s9, s14
 800ce06:	ed82 5a00 	vstr	s10, [r2]
 800ce0a:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800ce0e:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800ce12:	ed81 3a00 	vstr	s6, [r1]
 800ce16:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800ce1a:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800ce1e:	ed81 5a00 	vstr	s10, [r1]
 800ce22:	ee77 7a07 	vadd.f32	s15, s14, s14
 800ce26:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800ce2a:	edc1 5a00 	vstr	s11, [r1]
 800ce2e:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800ce32:	edc1 7a00 	vstr	s15, [r1]
 800ce36:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	600b      	str	r3, [r1, #0]
 800ce3e:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800ce42:	ee76 2a06 	vadd.f32	s5, s12, s12
 800ce46:	600b      	str	r3, [r1, #0]
 800ce48:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800ce4c:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800ce50:	600b      	str	r3, [r1, #0]
 800ce52:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800ce56:	edc2 2a00 	vstr	s5, [r2]
 800ce5a:	600b      	str	r3, [r1, #0]
 800ce5c:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800ce60:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800ce64:	600b      	str	r3, [r1, #0]
 800ce66:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800ce6a:	a87b      	add	r0, sp, #492	; 0x1ec
 800ce6c:	600b      	str	r3, [r1, #0]
 800ce6e:	2230      	movs	r2, #48	; 0x30
 800ce70:	2100      	movs	r1, #0
 800ce72:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ce76:	934b      	str	r3, [sp, #300]	; 0x12c
 800ce78:	934f      	str	r3, [sp, #316]	; 0x13c
 800ce7a:	9353      	str	r3, [sp, #332]	; 0x14c
 800ce7c:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800ce80:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800ce84:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800ce88:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800ce8c:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800ce90:	942c      	str	r4, [sp, #176]	; 0xb0
 800ce92:	f00a fd3f 	bl	8017914 <memset>
 800ce96:	eddb 6a06 	vldr	s13, [fp, #24]
 800ce9a:	ed9b 7a07 	vldr	s14, [fp, #28]
 800ce9e:	eddb 7a08 	vldr	s15, [fp, #32]
 800cea2:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800cea6:	ee68 6a26 	vmul.f32	s13, s16, s13
 800ceaa:	ee28 7a07 	vmul.f32	s14, s16, s14
 800ceae:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ceb2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800ceb6:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800ceba:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	f043 84a8 	bne.w	8010814 <kalman_3gyro.constprop.0+0x3b64>
 800cec4:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f043 81e7 	bne.w	801029c <kalman_3gyro.constprop.0+0x35ec>
 800cece:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800ced2:	9304      	str	r3, [sp, #16]
 800ced4:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800ced8:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800cedc:	9310      	str	r3, [sp, #64]	; 0x40
 800cede:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800cee2:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800cee6:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800ceea:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceec:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800cef0:	edd0 7a00 	vldr	s15, [r0]
 800cef4:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cef8:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cefc:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cf00:	ed93 6a00 	vldr	s12, [r3]
 800cf04:	ed91 7a00 	vldr	s14, [r1]
 800cf08:	edd2 6a00 	vldr	s13, [r2]
 800cf0c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cf10:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf14:	2300      	movs	r3, #0
 800cf16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf1a:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cf1e:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cf22:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cf26:	933a      	str	r3, [sp, #232]	; 0xe8
 800cf28:	933b      	str	r3, [sp, #236]	; 0xec
 800cf2a:	933c      	str	r3, [sp, #240]	; 0xf0
 800cf2c:	933d      	str	r3, [sp, #244]	; 0xf4
 800cf2e:	d14e      	bne.n	800cfce <kalman_3gyro.constprop.0+0x31e>
 800cf30:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf38:	d149      	bne.n	800cfce <kalman_3gyro.constprop.0+0x31e>
 800cf3a:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf42:	d144      	bne.n	800cfce <kalman_3gyro.constprop.0+0x31e>
 800cf44:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4c:	d13f      	bne.n	800cfce <kalman_3gyro.constprop.0+0x31e>
 800cf4e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cf50:	9336      	str	r3, [sp, #216]	; 0xd8
 800cf52:	7802      	ldrb	r2, [r0, #0]
 800cf54:	9337      	str	r3, [sp, #220]	; 0xdc
 800cf56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf5a:	9338      	str	r3, [sp, #224]	; 0xe0
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	ed90 7a03 	vldr	s14, [r0, #12]
 800cf62:	edd0 6a01 	vldr	s13, [r0, #4]
 800cf66:	edd0 7a02 	vldr	s15, [r0, #8]
 800cf6a:	9139      	str	r1, [sp, #228]	; 0xe4
 800cf6c:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cf70:	2a00      	cmp	r2, #0
 800cf72:	f003 8568 	beq.w	8010a46 <kalman_3gyro.constprop.0+0x3d96>
 800cf76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf7a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cf7e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cf82:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cf86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf8e:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cf92:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cf96:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800cfa0:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800cfa4:	f00a fcb6 	bl	8017914 <memset>
 800cfa8:	4b32      	ldr	r3, [pc, #200]	; (800d074 <kalman_3gyro.constprop.0+0x3c4>)
 800cfaa:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800cfae:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800cfb2:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800cfb6:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800cfba:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800cfbe:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800cfc2:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800cfc6:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800cfca:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800cfce:	9b08      	ldr	r3, [sp, #32]
 800cfd0:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800d078 <kalman_3gyro.constprop.0+0x3c8>
 800cfd4:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfd8:	edd3 5a00 	vldr	s11, [r3]
 800cfdc:	edd3 7a02 	vldr	s15, [r3, #8]
 800cfe0:	ee67 6a07 	vmul.f32	s13, s14, s14
 800cfe4:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cfe8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800cfec:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	f101 8127 	bmi.w	800e246 <kalman_3gyro.constprop.0+0x1596>
 800cff8:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800cffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d000:	ee79 6a66 	vsub.f32	s13, s18, s13
 800d004:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800d008:	eef0 6ae6 	vabs.f32	s13, s13
 800d00c:	ee76 aaea 	vsub.f32	s21, s13, s21
 800d010:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800d014:	ed93 5a04 	vldr	s10, [r3, #16]
 800d018:	ed93 3a03 	vldr	s6, [r3, #12]
 800d01c:	edd3 1a05 	vldr	s3, [r3, #20]
 800d020:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d078 <kalman_3gyro.constprop.0+0x3c8>
 800d024:	9b04      	ldr	r3, [sp, #16]
 800d026:	ed95 ca00 	vldr	s24, [r5]
 800d02a:	ed93 ba00 	vldr	s22, [r3]
 800d02e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d032:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800d036:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800d03a:	461e      	mov	r6, r3
 800d03c:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800d040:	9502      	str	r5, [sp, #8]
 800d042:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800d046:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800d04a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d04c:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800d050:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800d054:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800d058:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800d05c:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800d060:	9501      	str	r5, [sp, #4]
 800d062:	ee65 6a05 	vmul.f32	s13, s10, s10
 800d066:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800d06a:	eee3 6a03 	vfma.f32	s13, s6, s6
 800d06e:	e009      	b.n	800d084 <kalman_3gyro.constprop.0+0x3d4>
 800d070:	3a9d4952 	.word	0x3a9d4952
 800d074:	40a00000 	.word	0x40a00000
 800d078:	3c23d70a 	.word	0x3c23d70a
 800d07c:	3dcccccd 	.word	0x3dcccccd
 800d080:	4b000000 	.word	0x4b000000
 800d084:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800d088:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800d08c:	ee25 8a82 	vmul.f32	s16, s11, s4
 800d090:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800d094:	950c      	str	r5, [sp, #48]	; 0x30
 800d096:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800d09a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800d09e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a6:	bf58      	it	pl
 800d0a8:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800d0ac:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800d0b0:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800d0b4:	bf48      	it	mi
 800d0b6:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800d07c <kalman_3gyro.constprop.0+0x3cc>
 800d0ba:	ed96 6a00 	vldr	s12, [r6]
 800d0be:	edda 4a00 	vldr	s9, [sl]
 800d0c2:	ed93 fa00 	vldr	s30, [r3]
 800d0c6:	ed90 ea00 	vldr	s28, [r0]
 800d0ca:	edd4 3a00 	vldr	s7, [r4]
 800d0ce:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800d0d2:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800d0d6:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800d0da:	9617      	str	r6, [sp, #92]	; 0x5c
 800d0dc:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800d0e0:	961a      	str	r6, [sp, #104]	; 0x68
 800d0e2:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800d0e6:	9611      	str	r6, [sp, #68]	; 0x44
 800d0e8:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800d0ec:	9618      	str	r6, [sp, #96]	; 0x60
 800d0ee:	9e02      	ldr	r6, [sp, #8]
 800d0f0:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800d0f4:	9303      	str	r3, [sp, #12]
 800d0f6:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800d0fa:	ee27 2a82 	vmul.f32	s4, s15, s4
 800d0fe:	ee23 3a26 	vmul.f32	s6, s6, s13
 800d102:	ee25 5a26 	vmul.f32	s10, s10, s13
 800d106:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800d10a:	edd1 6a00 	vldr	s13, [r1]
 800d10e:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800d112:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800d116:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800d11a:	edcd 6a05 	vstr	s13, [sp, #20]
 800d11e:	ed8d 6a06 	vstr	s12, [sp, #24]
 800d122:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800d126:	ed92 6a00 	vldr	s12, [r2]
 800d12a:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800d12e:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800d132:	edd6 2a00 	vldr	s5, [r6]
 800d136:	eddc 4a00 	vldr	s9, [ip]
 800d13a:	9e01      	ldr	r6, [sp, #4]
 800d13c:	edd0 ca00 	vldr	s25, [r0]
 800d140:	ed96 1a00 	vldr	s2, [r6]
 800d144:	9803      	ldr	r0, [sp, #12]
 800d146:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d148:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800d14c:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800d150:	eddc 0a00 	vldr	s1, [ip]
 800d154:	ed96 da00 	vldr	s26, [r6]
 800d158:	edd0 4a00 	vldr	s9, [r0]
 800d15c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d15e:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800d162:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800d166:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800d16a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800d16e:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800d172:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800d176:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800d17a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800d17e:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800d182:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800d186:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800d18a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800d18e:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800d192:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800d196:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800d19a:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800d19e:	edd6 4a00 	vldr	s9, [r6]
 800d1a2:	edd9 6a00 	vldr	s13, [r9]
 800d1a6:	edde ba00 	vldr	s23, [lr]
 800d1aa:	ed95 4a00 	vldr	s8, [r5]
 800d1ae:	ed94 0a00 	vldr	s0, [r4]
 800d1b2:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800d1b6:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800d1ba:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800d1be:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800d1c2:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800d1c6:	edd9 ea00 	vldr	s29, [r9]
 800d1ca:	edd1 2a00 	vldr	s5, [r1]
 800d1ce:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800d1d2:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800d1d6:	ed92 1a00 	vldr	s2, [r2]
 800d1da:	edd3 ca00 	vldr	s25, [r3]
 800d1de:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800d1e2:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800d1e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1e8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d1ea:	edd3 4a00 	vldr	s9, [r3]
 800d1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1f0:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800d1f4:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800d1f8:	edd3 fa00 	vldr	s31, [r3]
 800d1fc:	eef0 4a6f 	vmov.f32	s9, s31
 800d200:	edd6 fa00 	vldr	s31, [r6]
 800d204:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d206:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800d20a:	eea3 5a08 	vfma.f32	s10, s6, s16
 800d20e:	ed96 3a00 	vldr	s6, [r6]
 800d212:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d214:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800d218:	ee25 8aad 	vmul.f32	s16, s11, s27
 800d21c:	eddd 5a06 	vldr	s11, [sp, #24]
 800d220:	edd6 fa00 	vldr	s31, [r6]
 800d224:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d226:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800d22a:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800d22e:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800d232:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800d236:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800d23a:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800d23e:	edd8 5a00 	vldr	s11, [r8]
 800d242:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800d246:	eef0 5a44 	vmov.f32	s11, s8
 800d24a:	ed97 4a00 	vldr	s8, [r7]
 800d24e:	ee76 6aae 	vadd.f32	s13, s13, s29
 800d252:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800d256:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800d25a:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800d25e:	eede 2a83 	vfnms.f32	s5, s29, s6
 800d262:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800d266:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800d26a:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800d26e:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800d272:	eede 4a03 	vfnms.f32	s9, s28, s6
 800d276:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800d27a:	ee72 2aac 	vadd.f32	s5, s5, s25
 800d27e:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800d282:	edd6 ca00 	vldr	s25, [r6]
 800d286:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800d28a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d28c:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800d290:	ed96 ea00 	vldr	s28, [r6]
 800d294:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d296:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800d29a:	ed96 da00 	vldr	s26, [r6]
 800d29e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d2a0:	ee7f faac 	vadd.f32	s31, s31, s25
 800d2a4:	edd6 ca00 	vldr	s25, [r6]
 800d2a8:	eedd ca03 	vfnms.f32	s25, s26, s6
 800d2ac:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800d2b0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d2b2:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800d2b6:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800d2ba:	eee0 5a03 	vfma.f32	s11, s0, s6
 800d2be:	eddd ba05 	vldr	s23, [sp, #20]
 800d2c2:	ed96 0a00 	vldr	s0, [r6]
 800d2c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d2c8:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800d2cc:	eeee fa03 	vfma.f32	s31, s28, s6
 800d2d0:	eead 6a03 	vfma.f32	s12, s26, s6
 800d2d4:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800d2d8:	eea0 4a03 	vfma.f32	s8, s0, s6
 800d2dc:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800d2e0:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800d07c <kalman_3gyro.constprop.0+0x3cc>
 800d2e4:	eee1 2a03 	vfma.f32	s5, s2, s6
 800d2e8:	ee2c ca00 	vmul.f32	s24, s24, s0
 800d2ec:	ee6b ba80 	vmul.f32	s23, s23, s0
 800d2f0:	ed96 1a00 	vldr	s2, [r6]
 800d2f4:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800d2f8:	eee0 4a83 	vfma.f32	s9, s1, s6
 800d2fc:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800d300:	ee6f faab 	vmul.f32	s31, s31, s23
 800d304:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800d308:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d30c:	eddc 0a00 	vldr	s1, [ip]
 800d310:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800d314:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800d318:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d31c:	eea0 1a83 	vfma.f32	s2, s1, s6
 800d320:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d324:	ee6f faaf 	vmul.f32	s31, s31, s31
 800d328:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d32c:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800d330:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d334:	eee4 fa04 	vfma.f32	s31, s8, s8
 800d338:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800d33c:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800d340:	ee60 2a22 	vmul.f32	s5, s0, s5
 800d344:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800d348:	eee1 fa01 	vfma.f32	s31, s2, s2
 800d34c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d350:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d354:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800d080 <kalman_3gyro.constprop.0+0x3d0>
 800d358:	eef0 4ac8 	vabs.f32	s9, s16
 800d35c:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d364:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d368:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d36c:	eef1 caef 	vsqrt.f32	s25, s31
 800d370:	eef1 bae6 	vsqrt.f32	s23, s13
 800d374:	ee67 daad 	vmul.f32	s27, s15, s27
 800d378:	eeb0 ca45 	vmov.f32	s24, s10
 800d37c:	d517      	bpl.n	800d3ae <kalman_3gyro.constprop.0+0x6fe>
 800d37e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d382:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d38a:	f2c1 806f 	blt.w	800e46c <kalman_3gyro.constprop.0+0x17bc>
 800d38e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d392:	ee17 0a90 	vmov	r0, s15
 800d396:	f7f3 f8d7 	bl	8000548 <__aeabi_f2d>
 800d39a:	ec41 0b10 	vmov	d0, r0, r1
 800d39e:	f008 fbcf 	bl	8015b40 <floor>
 800d3a2:	ec51 0b10 	vmov	r0, r1, d0
 800d3a6:	f7f3 fbff 	bl	8000ba8 <__aeabi_d2f>
 800d3aa:	ee08 0a10 	vmov	s16, r0
 800d3ae:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800d080 <kalman_3gyro.constprop.0+0x3d0>
 800d3b2:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d3b6:	eef0 6ace 	vabs.f32	s13, s28
 800d3ba:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c2:	d517      	bpl.n	800d3f4 <kalman_3gyro.constprop.0+0x744>
 800d3c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3c8:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d0:	f2c1 8040 	blt.w	800e454 <kalman_3gyro.constprop.0+0x17a4>
 800d3d4:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d3d8:	ee17 0a90 	vmov	r0, s15
 800d3dc:	f7f3 f8b4 	bl	8000548 <__aeabi_f2d>
 800d3e0:	ec41 0b10 	vmov	d0, r0, r1
 800d3e4:	f008 fbac 	bl	8015b40 <floor>
 800d3e8:	ec51 0b10 	vmov	r0, r1, d0
 800d3ec:	f7f3 fbdc 	bl	8000ba8 <__aeabi_d2f>
 800d3f0:	ee0e 0a10 	vmov	s28, r0
 800d3f4:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800d080 <kalman_3gyro.constprop.0+0x3d0>
 800d3f8:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d3fc:	eeb0 7aed 	vabs.f32	s14, s27
 800d400:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d408:	d517      	bpl.n	800d43a <kalman_3gyro.constprop.0+0x78a>
 800d40a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d40e:	eef4 dae7 	vcmpe.f32	s27, s15
 800d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d416:	f2c1 8011 	blt.w	800e43c <kalman_3gyro.constprop.0+0x178c>
 800d41a:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d41e:	ee17 0a90 	vmov	r0, s15
 800d422:	f7f3 f891 	bl	8000548 <__aeabi_f2d>
 800d426:	ec41 0b10 	vmov	d0, r0, r1
 800d42a:	f008 fb89 	bl	8015b40 <floor>
 800d42e:	ec51 0b10 	vmov	r0, r1, d0
 800d432:	f7f3 fbb9 	bl	8000ba8 <__aeabi_d2f>
 800d436:	ee0d 0a90 	vmov	s27, r0
 800d43a:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d43e:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d442:	1e61      	subs	r1, r4, #1
 800d444:	b249      	sxtb	r1, r1
 800d446:	2900      	cmp	r1, #0
 800d448:	dd1a      	ble.n	800d480 <kalman_3gyro.constprop.0+0x7d0>
 800d44a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d44e:	1ea0      	subs	r0, r4, #2
 800d450:	0089      	lsls	r1, r1, #2
 800d452:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d456:	b2c0      	uxtb	r0, r0
 800d458:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d45c:	440a      	add	r2, r1
 800d45e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d462:	445b      	add	r3, fp
 800d464:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d468:	6819      	ldr	r1, [r3, #0]
 800d46a:	6858      	ldr	r0, [r3, #4]
 800d46c:	60d9      	str	r1, [r3, #12]
 800d46e:	6899      	ldr	r1, [r3, #8]
 800d470:	6118      	str	r0, [r3, #16]
 800d472:	6159      	str	r1, [r3, #20]
 800d474:	3b0c      	subs	r3, #12
 800d476:	4293      	cmp	r3, r2
 800d478:	d1f6      	bne.n	800d468 <kalman_3gyro.constprop.0+0x7b8>
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	ed93 ba00 	vldr	s22, [r3]
 800d480:	ed88 8a00 	vstr	s16, [r8]
 800d484:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d488:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d48c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d48e:	ed83 ea00 	vstr	s28, [r3]
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d72c <kalman_3gyro.constprop.0+0xa7c>
 800d498:	edc3 da00 	vstr	s27, [r3]
 800d49c:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	b2db      	uxtb	r3, r3
 800d4a4:	429c      	cmp	r4, r3
 800d4a6:	bf28      	it	cs
 800d4a8:	461c      	movcs	r4, r3
 800d4aa:	9b08      	ldr	r3, [sp, #32]
 800d4ac:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d4b0:	edd3 da03 	vldr	s27, [r3, #12]
 800d4b4:	ed93 ba04 	vldr	s22, [r3, #16]
 800d4b8:	edd3 6a05 	vldr	s13, [r3, #20]
 800d4bc:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d4c0:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d4c4:	eeb0 7aed 	vabs.f32	s14, s27
 800d4c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d4d4:	d517      	bpl.n	800d506 <kalman_3gyro.constprop.0+0x856>
 800d4d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d4da:	eef4 dae7 	vcmpe.f32	s27, s15
 800d4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e2:	f2c0 879f 	blt.w	800e424 <kalman_3gyro.constprop.0+0x1774>
 800d4e6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d4ea:	ee17 0a90 	vmov	r0, s15
 800d4ee:	f7f3 f82b 	bl	8000548 <__aeabi_f2d>
 800d4f2:	ec41 0b10 	vmov	d0, r0, r1
 800d4f6:	f008 fb23 	bl	8015b40 <floor>
 800d4fa:	ec51 0b10 	vmov	r0, r1, d0
 800d4fe:	f7f3 fb53 	bl	8000ba8 <__aeabi_d2f>
 800d502:	ee0d 0a90 	vmov	s27, r0
 800d506:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d72c <kalman_3gyro.constprop.0+0xa7c>
 800d50a:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d50e:	eeb0 7acb 	vabs.f32	s14, s22
 800d512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51a:	d517      	bpl.n	800d54c <kalman_3gyro.constprop.0+0x89c>
 800d51c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d520:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d528:	f2c0 8770 	blt.w	800e40c <kalman_3gyro.constprop.0+0x175c>
 800d52c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d530:	ee17 0a90 	vmov	r0, s15
 800d534:	f7f3 f808 	bl	8000548 <__aeabi_f2d>
 800d538:	ec41 0b10 	vmov	d0, r0, r1
 800d53c:	f008 fb00 	bl	8015b40 <floor>
 800d540:	ec51 0b10 	vmov	r0, r1, d0
 800d544:	f7f3 fb30 	bl	8000ba8 <__aeabi_d2f>
 800d548:	ee0b 0a10 	vmov	s22, r0
 800d54c:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d72c <kalman_3gyro.constprop.0+0xa7c>
 800d550:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d554:	eeb0 7ac8 	vabs.f32	s14, s16
 800d558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d560:	d517      	bpl.n	800d592 <kalman_3gyro.constprop.0+0x8e2>
 800d562:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d566:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56e:	f2c0 8741 	blt.w	800e3f4 <kalman_3gyro.constprop.0+0x1744>
 800d572:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d576:	ee17 0a90 	vmov	r0, s15
 800d57a:	f7f2 ffe5 	bl	8000548 <__aeabi_f2d>
 800d57e:	ec41 0b10 	vmov	d0, r0, r1
 800d582:	f008 fadd 	bl	8015b40 <floor>
 800d586:	ec51 0b10 	vmov	r0, r1, d0
 800d58a:	f7f3 fb0d 	bl	8000ba8 <__aeabi_d2f>
 800d58e:	ee08 0a10 	vmov	s16, r0
 800d592:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d596:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d59a:	1e61      	subs	r1, r4, #1
 800d59c:	b249      	sxtb	r1, r1
 800d59e:	2900      	cmp	r1, #0
 800d5a0:	dd17      	ble.n	800d5d2 <kalman_3gyro.constprop.0+0x922>
 800d5a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d5a6:	1ea2      	subs	r2, r4, #2
 800d5a8:	0089      	lsls	r1, r1, #2
 800d5aa:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d5b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d5b8:	4401      	add	r1, r0
 800d5ba:	445b      	add	r3, fp
 800d5bc:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	6858      	ldr	r0, [r3, #4]
 800d5c4:	60da      	str	r2, [r3, #12]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	6118      	str	r0, [r3, #16]
 800d5ca:	615a      	str	r2, [r3, #20]
 800d5cc:	3b0c      	subs	r3, #12
 800d5ce:	4299      	cmp	r1, r3
 800d5d0:	d1f6      	bne.n	800d5c0 <kalman_3gyro.constprop.0+0x910>
 800d5d2:	9b02      	ldr	r3, [sp, #8]
 800d5d4:	edc7 da00 	vstr	s27, [r7]
 800d5d8:	ed83 ba00 	vstr	s22, [r3]
 800d5dc:	9b03      	ldr	r3, [sp, #12]
 800d5de:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d72c <kalman_3gyro.constprop.0+0xa7c>
 800d5e2:	ed83 8a00 	vstr	s16, [r3]
 800d5e6:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	429c      	cmp	r4, r3
 800d5f0:	bf28      	it	cs
 800d5f2:	461c      	movcs	r4, r3
 800d5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5f6:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d5fa:	ed93 7a00 	vldr	s14, [r3]
 800d5fe:	9b08      	ldr	r3, [sp, #32]
 800d600:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d604:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d608:	edd3 da06 	vldr	s27, [r3, #24]
 800d60c:	ed93 ba07 	vldr	s22, [r3, #28]
 800d610:	edd3 6a08 	vldr	s13, [r3, #32]
 800d614:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d618:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d61c:	eeb0 7aed 	vabs.f32	s14, s27
 800d620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d628:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d62c:	d517      	bpl.n	800d65e <kalman_3gyro.constprop.0+0x9ae>
 800d62e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d632:	eef4 dae7 	vcmpe.f32	s27, s15
 800d636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63a:	f2c0 86cf 	blt.w	800e3dc <kalman_3gyro.constprop.0+0x172c>
 800d63e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d642:	ee17 0a90 	vmov	r0, s15
 800d646:	f7f2 ff7f 	bl	8000548 <__aeabi_f2d>
 800d64a:	ec41 0b10 	vmov	d0, r0, r1
 800d64e:	f008 fa77 	bl	8015b40 <floor>
 800d652:	ec51 0b10 	vmov	r0, r1, d0
 800d656:	f7f3 faa7 	bl	8000ba8 <__aeabi_d2f>
 800d65a:	ee0d 0a90 	vmov	s27, r0
 800d65e:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d72c <kalman_3gyro.constprop.0+0xa7c>
 800d662:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d666:	eeb0 7acb 	vabs.f32	s14, s22
 800d66a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d672:	d517      	bpl.n	800d6a4 <kalman_3gyro.constprop.0+0x9f4>
 800d674:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d678:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d680:	f2c0 86a0 	blt.w	800e3c4 <kalman_3gyro.constprop.0+0x1714>
 800d684:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d688:	ee17 0a90 	vmov	r0, s15
 800d68c:	f7f2 ff5c 	bl	8000548 <__aeabi_f2d>
 800d690:	ec41 0b10 	vmov	d0, r0, r1
 800d694:	f008 fa54 	bl	8015b40 <floor>
 800d698:	ec51 0b10 	vmov	r0, r1, d0
 800d69c:	f7f3 fa84 	bl	8000ba8 <__aeabi_d2f>
 800d6a0:	ee0b 0a10 	vmov	s22, r0
 800d6a4:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d72c <kalman_3gyro.constprop.0+0xa7c>
 800d6a8:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d6ac:	eeb0 7ac8 	vabs.f32	s14, s16
 800d6b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b8:	d517      	bpl.n	800d6ea <kalman_3gyro.constprop.0+0xa3a>
 800d6ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d6be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c6:	f2c0 8671 	blt.w	800e3ac <kalman_3gyro.constprop.0+0x16fc>
 800d6ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d6ce:	ee17 0a90 	vmov	r0, s15
 800d6d2:	f7f2 ff39 	bl	8000548 <__aeabi_f2d>
 800d6d6:	ec41 0b10 	vmov	d0, r0, r1
 800d6da:	f008 fa31 	bl	8015b40 <floor>
 800d6de:	ec51 0b10 	vmov	r0, r1, d0
 800d6e2:	f7f3 fa61 	bl	8000ba8 <__aeabi_d2f>
 800d6e6:	ee08 0a10 	vmov	s16, r0
 800d6ea:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d6ee:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d6f2:	1e63      	subs	r3, r4, #1
 800d6f4:	b25b      	sxtb	r3, r3
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	dd1c      	ble.n	800d734 <kalman_3gyro.constprop.0+0xa84>
 800d6fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6fe:	1ea2      	subs	r2, r4, #2
 800d700:	0099      	lsls	r1, r3, #2
 800d702:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d706:	b2d2      	uxtb	r2, r2
 800d708:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d70c:	4408      	add	r0, r1
 800d70e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d712:	445b      	add	r3, fp
 800d714:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	6859      	ldr	r1, [r3, #4]
 800d71c:	60da      	str	r2, [r3, #12]
 800d71e:	689a      	ldr	r2, [r3, #8]
 800d720:	6119      	str	r1, [r3, #16]
 800d722:	615a      	str	r2, [r3, #20]
 800d724:	3b0c      	subs	r3, #12
 800d726:	4283      	cmp	r3, r0
 800d728:	d1f6      	bne.n	800d718 <kalman_3gyro.constprop.0+0xa68>
 800d72a:	e003      	b.n	800d734 <kalman_3gyro.constprop.0+0xa84>
 800d72c:	4b000000 	.word	0x4b000000
 800d730:	00000000 	.word	0x00000000
 800d734:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d736:	edc3 da00 	vstr	s27, [r3]
 800d73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d73c:	ed83 ba00 	vstr	s22, [r3]
 800d740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d742:	ed83 8a00 	vstr	s16, [r3]
 800d746:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d74a:	3301      	adds	r3, #1
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	429c      	cmp	r4, r3
 800d750:	bf28      	it	cs
 800d752:	461c      	movcs	r4, r3
 800d754:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d758:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d75c:	aa54      	add	r2, sp, #336	; 0x150
 800d75e:	a92d      	add	r1, sp, #180	; 0xb4
 800d760:	a830      	add	r0, sp, #192	; 0xc0
 800d762:	461c      	mov	r4, r3
 800d764:	9314      	str	r3, [sp, #80]	; 0x50
 800d766:	f7fe fa27 	bl	800bbb8 <getRotationMatrix>
 800d76a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d76e:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	6861      	ldr	r1, [r4, #4]
 800d776:	68a2      	ldr	r2, [r4, #8]
 800d778:	68e3      	ldr	r3, [r4, #12]
 800d77a:	4635      	mov	r5, r6
 800d77c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d77e:	3410      	adds	r4, #16
 800d780:	42bc      	cmp	r4, r7
 800d782:	462e      	mov	r6, r5
 800d784:	d1f5      	bne.n	800d772 <kalman_3gyro.constprop.0+0xac2>
 800d786:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d78a:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d78e:	6820      	ldr	r0, [r4, #0]
 800d790:	6028      	str	r0, [r5, #0]
 800d792:	eef0 7ae7 	vabs.f32	s15, s15
 800d796:	eeb0 7ac7 	vabs.f32	s14, s14
 800d79a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	f140 85a4 	bpl.w	800e2ee <kalman_3gyro.constprop.0+0x163e>
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	2706      	movs	r7, #6
 800d7aa:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d7ae:	2604      	movs	r6, #4
 800d7b0:	2400      	movs	r4, #0
 800d7b2:	eef0 7a47 	vmov.f32	s15, s14
 800d7b6:	4632      	mov	r2, r6
 800d7b8:	46a2      	mov	sl, r4
 800d7ba:	2107      	movs	r1, #7
 800d7bc:	f04f 0c01 	mov.w	ip, #1
 800d7c0:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d7c4:	eeb0 7ac7 	vabs.f32	s14, s14
 800d7c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d0:	f340 85ae 	ble.w	800e330 <kalman_3gyro.constprop.0+0x1680>
 800d7d4:	2304      	movs	r3, #4
 800d7d6:	2007      	movs	r0, #7
 800d7d8:	2108      	movs	r1, #8
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	461c      	mov	r4, r3
 800d7de:	9002      	str	r0, [sp, #8]
 800d7e0:	460a      	mov	r2, r1
 800d7e2:	2306      	movs	r3, #6
 800d7e4:	2003      	movs	r0, #3
 800d7e6:	2605      	movs	r6, #5
 800d7e8:	f04f 0800 	mov.w	r8, #0
 800d7ec:	f04f 0a01 	mov.w	sl, #1
 800d7f0:	f04f 0c02 	mov.w	ip, #2
 800d7f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d7f6:	442c      	add	r4, r5
 800d7f8:	442a      	add	r2, r5
 800d7fa:	edd4 6a00 	vldr	s13, [r4]
 800d7fe:	ed92 7a00 	vldr	s14, [r2]
 800d802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d806:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d80a:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d80e:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d812:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d816:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d81a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d81e:	970c      	str	r7, [sp, #48]	; 0x30
 800d820:	9f01      	ldr	r7, [sp, #4]
 800d822:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d826:	00b6      	lsls	r6, r6, #2
 800d828:	960a      	str	r6, [sp, #40]	; 0x28
 800d82a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d82e:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d832:	edc4 7a00 	vstr	s15, [r4]
 800d836:	edd2 7a00 	vldr	s15, [r2]
 800d83a:	ed99 7a00 	vldr	s14, [r9]
 800d83e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d842:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d846:	9204      	str	r2, [sp, #16]
 800d848:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d84c:	9205      	str	r2, [sp, #20]
 800d84e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d852:	9209      	str	r2, [sp, #36]	; 0x24
 800d854:	00ba      	lsls	r2, r7, #2
 800d856:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d858:	9206      	str	r2, [sp, #24]
 800d85a:	0080      	lsls	r0, r0, #2
 800d85c:	9003      	str	r0, [sp, #12]
 800d85e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d862:	0089      	lsls	r1, r1, #2
 800d864:	910b      	str	r1, [sp, #44]	; 0x2c
 800d866:	edc9 6a00 	vstr	s13, [r9]
 800d86a:	ed94 6a00 	vldr	s12, [r4]
 800d86e:	ed97 7a00 	vldr	s14, [r7]
 800d872:	edd5 7a00 	vldr	s15, [r5]
 800d876:	9902      	ldr	r1, [sp, #8]
 800d878:	9a02      	ldr	r2, [sp, #8]
 800d87a:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d87e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d882:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d886:	0092      	lsls	r2, r2, #2
 800d888:	edc5 7a00 	vstr	s15, [r5]
 800d88c:	ed97 7a00 	vldr	s14, [r7]
 800d890:	edde 7a00 	vldr	s15, [lr]
 800d894:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	edce 7a00 	vstr	s15, [lr]
 800d89e:	edd0 5a00 	vldr	s11, [r0]
 800d8a2:	ed91 7a00 	vldr	s14, [r1]
 800d8a6:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d8aa:	eef0 7ae7 	vabs.f32	s15, s15
 800d8ae:	ed81 7a00 	vstr	s14, [r1]
 800d8b2:	ed90 6a00 	vldr	s12, [r0]
 800d8b6:	ed96 7a00 	vldr	s14, [r6]
 800d8ba:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d8be:	ed86 7a00 	vstr	s14, [r6]
 800d8c2:	ed95 7a00 	vldr	s14, [r5]
 800d8c6:	eeb0 7ac7 	vabs.f32	s14, s14
 800d8ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d2:	dd10      	ble.n	800d8f6 <kalman_3gyro.constprop.0+0xc46>
 800d8d4:	4652      	mov	r2, sl
 800d8d6:	46c2      	mov	sl, r8
 800d8d8:	4690      	mov	r8, r2
 800d8da:	461a      	mov	r2, r3
 800d8dc:	9b01      	ldr	r3, [sp, #4]
 800d8de:	9902      	ldr	r1, [sp, #8]
 800d8e0:	9803      	ldr	r0, [sp, #12]
 800d8e2:	9006      	str	r0, [sp, #24]
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	9303      	str	r3, [sp, #12]
 800d8e8:	008b      	lsls	r3, r1, #2
 800d8ea:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d8ee:	9105      	str	r1, [sp, #20]
 800d8f0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d8f4:	9104      	str	r1, [sp, #16]
 800d8f6:	9903      	ldr	r1, [sp, #12]
 800d8f8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d8fc:	4401      	add	r1, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	9906      	ldr	r1, [sp, #24]
 800d902:	ed94 7a00 	vldr	s14, [r4]
 800d906:	4401      	add	r1, r0
 800d908:	edd1 7a00 	vldr	s15, [r1]
 800d90c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d910:	4608      	mov	r0, r1
 800d912:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d916:	440a      	add	r2, r1
 800d918:	440b      	add	r3, r1
 800d91a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d91c:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d920:	4429      	add	r1, r5
 800d922:	460d      	mov	r5, r1
 800d924:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d926:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d92a:	4431      	add	r1, r6
 800d92c:	468e      	mov	lr, r1
 800d92e:	ed84 3a00 	vstr	s6, [r4]
 800d932:	ed92 7a00 	vldr	s14, [r2]
 800d936:	edd3 7a00 	vldr	s15, [r3]
 800d93a:	9904      	ldr	r1, [sp, #16]
 800d93c:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d940:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d944:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d948:	440e      	add	r6, r1
 800d94a:	1879      	adds	r1, r7, r1
 800d94c:	edc3 7a00 	vstr	s15, [r3]
 800d950:	9101      	str	r1, [sp, #4]
 800d952:	9b05      	ldr	r3, [sp, #20]
 800d954:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d956:	edd2 0a00 	vldr	s1, [r2]
 800d95a:	ed95 1a00 	vldr	s2, [r5]
 800d95e:	ed9e 2a00 	vldr	s4, [lr]
 800d962:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d966:	edd6 6a00 	vldr	s13, [r6]
 800d96a:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d96e:	1874      	adds	r4, r6, r1
 800d970:	18f7      	adds	r7, r6, r3
 800d972:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d976:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d97a:	eb06 0903 	add.w	r9, r6, r3
 800d97e:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d982:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d986:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d98a:	4633      	mov	r3, r6
 800d98c:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d990:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d994:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d998:	448c      	add	ip, r1
 800d99a:	9901      	ldr	r1, [sp, #4]
 800d99c:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d9a0:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d9a4:	ed94 7a00 	vldr	s14, [r4]
 800d9a8:	ed93 6a00 	vldr	s12, [r3]
 800d9ac:	edd0 7a00 	vldr	s15, [r0]
 800d9b0:	ed99 8a00 	vldr	s16, [r9]
 800d9b4:	ed91 ba00 	vldr	s22, [r1]
 800d9b8:	ed97 4a00 	vldr	s8, [r7]
 800d9bc:	edd6 4a00 	vldr	s9, [r6]
 800d9c0:	eddc da00 	vldr	s27, [ip]
 800d9c4:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d9c8:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d9cc:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d9d0:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d9d4:	46a2      	mov	sl, r4
 800d9d6:	4613      	mov	r3, r2
 800d9d8:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d9dc:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d9e0:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d9e4:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d9e8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d9ec:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d9f0:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d9f4:	ed94 5a00 	vldr	s10, [r4]
 800d9f8:	edda 3a00 	vldr	s7, [sl]
 800d9fc:	edd2 5a00 	vldr	s11, [r2]
 800da00:	edd3 7a00 	vldr	s15, [r3]
 800da04:	eeab 5a64 	vfms.f32	s10, s22, s9
 800da08:	eee8 5a64 	vfms.f32	s11, s16, s9
 800da0c:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800da10:	eee6 7a48 	vfms.f32	s15, s12, s16
 800da14:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800da18:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800da1c:	eee3 5a45 	vfms.f32	s11, s6, s10
 800da20:	eee3 7a63 	vfms.f32	s15, s6, s7
 800da24:	ee20 4a04 	vmul.f32	s8, s0, s8
 800da28:	ee60 5a25 	vmul.f32	s11, s0, s11
 800da2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800da30:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800da34:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800da38:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800da3c:	eea1 7a44 	vfms.f32	s14, s2, s8
 800da40:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800da44:	eee1 4a65 	vfms.f32	s9, s2, s11
 800da48:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800da4c:	ee21 5a85 	vmul.f32	s10, s3, s10
 800da50:	eea2 7a66 	vfms.f32	s14, s4, s13
 800da54:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800da58:	eee2 4a45 	vfms.f32	s9, s4, s10
 800da5c:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800da60:	ee28 7a07 	vmul.f32	s14, s16, s14
 800da64:	ee37 3a85 	vadd.f32	s6, s15, s10
 800da68:	ee68 4a24 	vmul.f32	s9, s16, s9
 800da6c:	ee26 8a08 	vmul.f32	s16, s12, s16
 800da70:	ee37 6a43 	vsub.f32	s12, s14, s6
 800da74:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800da78:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800da84:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800da88:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800da8c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800da90:	bfc8      	it	gt
 800da92:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800da96:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800da9a:	bfcc      	ite	gt
 800da9c:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800daa0:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d730 <kalman_3gyro.constprop.0+0xa80>
 800daa4:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800daa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daac:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800dab0:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800dab4:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800dab8:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800dabc:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800dac0:	f100 84e4 	bmi.w	800e48c <kalman_3gyro.constprop.0+0x17dc>
 800dac4:	bfd8      	it	le
 800dac6:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800daca:	ee37 6a87 	vadd.f32	s12, s15, s14
 800dace:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800dad2:	ee35 6a46 	vsub.f32	s12, s10, s12
 800dad6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800dada:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae2:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800dae6:	ee38 4a44 	vsub.f32	s8, s16, s8
 800daea:	bf84      	itt	hi
 800daec:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800daf0:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800daf4:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800daf8:	bf8c      	ite	hi
 800dafa:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800dafe:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800de80 <kalman_3gyro.constprop.0+0x11d0>
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	f100 84bd 	bmi.w	800e484 <kalman_3gyro.constprop.0+0x17d4>
 800db0a:	bfd8      	it	le
 800db0c:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800db10:	ee37 7a05 	vadd.f32	s14, s14, s10
 800db14:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800db18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800db20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800db24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db28:	bf84      	itt	hi
 800db2a:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800db2e:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800db32:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800db36:	bf8c      	ite	hi
 800db38:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800db3c:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800de80 <kalman_3gyro.constprop.0+0x11d0>
 800db40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800db44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db48:	ee63 3a86 	vmul.f32	s7, s7, s12
 800db4c:	f102 8399 	bmi.w	8010282 <kalman_3gyro.constprop.0+0x35d2>
 800db50:	bfd8      	it	le
 800db52:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800db56:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800db5a:	1e53      	subs	r3, r2, #1
 800db5c:	b25b      	sxtb	r3, r3
 800db5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800db62:	2b00      	cmp	r3, #0
 800db64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db68:	dd1c      	ble.n	800dba4 <kalman_3gyro.constprop.0+0xef4>
 800db6a:	3a02      	subs	r2, #2
 800db6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db70:	b2d2      	uxtb	r2, r2
 800db72:	f1ab 000c 	sub.w	r0, fp, #12
 800db76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800db7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800db7e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800db82:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800db86:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800db8a:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800db8e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800db92:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800db96:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800db9a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800db9e:	3b0c      	subs	r3, #12
 800dba0:	4283      	cmp	r3, r0
 800dba2:	d1f0      	bne.n	800db86 <kalman_3gyro.constprop.0+0xed6>
 800dba4:	eddd 6a07 	vldr	s13, [sp, #28]
 800dba8:	4ab6      	ldr	r2, [pc, #728]	; (800de84 <kalman_3gyro.constprop.0+0x11d4>)
 800dbaa:	4bb7      	ldr	r3, [pc, #732]	; (800de88 <kalman_3gyro.constprop.0+0x11d8>)
 800dbac:	ed92 8a00 	vldr	s16, [r2]
 800dbb0:	ed93 ba00 	vldr	s22, [r3]
 800dbb4:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800dbb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dbbc:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dbc0:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800dbc4:	f1c1 0101 	rsb	r1, r1, #1
 800dbc8:	910c      	str	r1, [sp, #48]	; 0x30
 800dbca:	a92d      	add	r1, sp, #180	; 0xb4
 800dbcc:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800dbd0:	9123      	str	r1, [sp, #140]	; 0x8c
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	9109      	str	r1, [sp, #36]	; 0x24
 800dbd6:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800dbda:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800dbde:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800dbe2:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800dbe6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800dbea:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800dbee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dbf2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dbf6:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800dbfa:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800dbfe:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800dc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc06:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dc08:	3301      	adds	r3, #1
 800dc0a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc0c:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dc10:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800dc14:	18e0      	adds	r0, r4, r3
 800dc16:	f803 0f01 	strb.w	r0, [r3, #1]!
 800dc1a:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800dc1e:	f841 0b04 	str.w	r0, [r1], #4
 800dc22:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800dc26:	4298      	cmp	r0, r3
 800dc28:	f102 020c 	add.w	r2, r2, #12
 800dc2c:	d1f2      	bne.n	800dc14 <kalman_3gyro.constprop.0+0xf64>
 800dc2e:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dc32:	ed93 7a00 	vldr	s14, [r3]
 800dc36:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800dc3a:	edd3 7a00 	vldr	s15, [r3]
 800dc3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc46:	bf84      	itt	hi
 800dc48:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800dc4c:	f8a9 3000 	strhhi.w	r3, [r9]
 800dc50:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800dc54:	ed93 7a00 	vldr	s14, [r3]
 800dc58:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800dc5c:	edd3 7a00 	vldr	s15, [r3]
 800dc60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc68:	bf84      	itt	hi
 800dc6a:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800dc6e:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800dc72:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800dc76:	ed93 7a00 	vldr	s14, [r3]
 800dc7a:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800dc7e:	edd3 7a00 	vldr	s15, [r3]
 800dc82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8a:	bf84      	itt	hi
 800dc8c:	f240 5306 	movwhi	r3, #1286	; 0x506
 800dc90:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800dc94:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800dc98:	ed93 7a00 	vldr	s14, [r3]
 800dc9c:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800dca0:	edd3 7a00 	vldr	s15, [r3]
 800dca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcac:	bf84      	itt	hi
 800dcae:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800dcb2:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800dcb6:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800dcba:	ed93 7a00 	vldr	s14, [r3]
 800dcbe:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800dcc2:	edd3 7a00 	vldr	s15, [r3]
 800dcc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcce:	bf84      	itt	hi
 800dcd0:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800dcd4:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800dcd8:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800dcdc:	ed93 7a00 	vldr	s14, [r3]
 800dce0:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800dce4:	edd3 7a00 	vldr	s15, [r3]
 800dce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf0:	bf84      	itt	hi
 800dcf2:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800dcf6:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800dcfa:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800dcfe:	ed93 7a00 	vldr	s14, [r3]
 800dd02:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800dd06:	edd3 7a00 	vldr	s15, [r3]
 800dd0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd12:	bf84      	itt	hi
 800dd14:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800dd18:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800dd1c:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800dd20:	ed93 7a00 	vldr	s14, [r3]
 800dd24:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800dd28:	edd3 7a00 	vldr	s15, [r3]
 800dd2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd34:	bf84      	itt	hi
 800dd36:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800dd3a:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800dd3e:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800dd42:	ed93 7a00 	vldr	s14, [r3]
 800dd46:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800dd4a:	edd3 7a00 	vldr	s15, [r3]
 800dd4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd56:	bf84      	itt	hi
 800dd58:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800dd5c:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800dd60:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800dd64:	ed93 7a00 	vldr	s14, [r3]
 800dd68:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800dd6c:	edd3 7a00 	vldr	s15, [r3]
 800dd70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	bf84      	itt	hi
 800dd7a:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800dd7e:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800dd82:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800dd86:	ed93 7a00 	vldr	s14, [r3]
 800dd8a:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800dd8e:	edd3 7a00 	vldr	s15, [r3]
 800dd92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9a:	bf84      	itt	hi
 800dd9c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800dda0:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800dda4:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800dda8:	ed93 7a00 	vldr	s14, [r3]
 800ddac:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800ddb0:	edd3 7a00 	vldr	s15, [r3]
 800ddb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	bf84      	itt	hi
 800ddbe:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800ddc2:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800ddc6:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800ddca:	ed93 7a00 	vldr	s14, [r3]
 800ddce:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800ddd2:	edd3 7a00 	vldr	s15, [r3]
 800ddd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddde:	bf84      	itt	hi
 800dde0:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800dde4:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800dde8:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800ddec:	ed93 7a00 	vldr	s14, [r3]
 800ddf0:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800ddf4:	edd3 7a00 	vldr	s15, [r3]
 800ddf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de00:	bf84      	itt	hi
 800de02:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800de06:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800de0a:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800de0e:	ed93 7a00 	vldr	s14, [r3]
 800de12:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800de16:	edd3 7a00 	vldr	s15, [r3]
 800de1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de22:	bf84      	itt	hi
 800de24:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800de28:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800de2c:	221e      	movs	r2, #30
 800de2e:	2101      	movs	r1, #1
 800de30:	4650      	mov	r0, sl
 800de32:	f009 fd6f 	bl	8017914 <memset>
 800de36:	2304      	movs	r3, #4
 800de38:	9307      	str	r3, [sp, #28]
 800de3a:	2302      	movs	r3, #2
 800de3c:	9305      	str	r3, [sp, #20]
 800de3e:	9b05      	ldr	r3, [sp, #20]
 800de40:	9306      	str	r3, [sp, #24]
 800de42:	1c5f      	adds	r7, r3, #1
 800de44:	005b      	lsls	r3, r3, #1
 800de46:	9305      	str	r3, [sp, #20]
 800de48:	f04f 0b01 	mov.w	fp, #1
 800de4c:	9b05      	ldr	r3, [sp, #20]
 800de4e:	f8cd b004 	str.w	fp, [sp, #4]
 800de52:	445b      	add	r3, fp
 800de54:	2b1f      	cmp	r3, #31
 800de56:	bfa8      	it	ge
 800de58:	231f      	movge	r3, #31
 800de5a:	465a      	mov	r2, fp
 800de5c:	eba3 0802 	sub.w	r8, r3, r2
 800de60:	f1b8 0f00 	cmp.w	r8, #0
 800de64:	469b      	mov	fp, r3
 800de66:	f107 35ff 	add.w	r5, r7, #4294967295
 800de6a:	dd44      	ble.n	800def6 <kalman_3gyro.constprop.0+0x1246>
 800de6c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800de70:	9302      	str	r3, [sp, #8]
 800de72:	f1ab 0302 	sub.w	r3, fp, #2
 800de76:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800de7a:	4616      	mov	r6, r2
 800de7c:	2400      	movs	r4, #0
 800de7e:	e00f      	b.n	800dea0 <kalman_3gyro.constprop.0+0x11f0>
 800de80:	00000000 	.word	0x00000000
 800de84:	200019e4 	.word	0x200019e4
 800de88:	200019f4 	.word	0x200019f4
 800de8c:	3f333333 	.word	0x3f333333
 800de90:	3f4ccccd 	.word	0x3f4ccccd
 800de94:	3f666666 	.word	0x3f666666
 800de98:	3ecccccc 	.word	0x3ecccccc
 800de9c:	3dcccccd 	.word	0x3dcccccd
 800dea0:	1e71      	subs	r1, r6, #1
 800dea2:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800dea6:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800deaa:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800deae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800deb2:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800deb6:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800deba:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800debe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec6:	f105 0c02 	add.w	ip, r5, #2
 800deca:	f105 0801 	add.w	r8, r5, #1
 800dece:	f240 81d3 	bls.w	800e278 <kalman_3gyro.constprop.0+0x15c8>
 800ded2:	45e3      	cmp	fp, ip
 800ded4:	f80a 0004 	strb.w	r0, [sl, r4]
 800ded8:	f000 81bf 	beq.w	800e25a <kalman_3gyro.constprop.0+0x15aa>
 800dedc:	4645      	mov	r5, r8
 800dede:	9b03      	ldr	r3, [sp, #12]
 800dee0:	3401      	adds	r4, #1
 800dee2:	42a3      	cmp	r3, r4
 800dee4:	dcdc      	bgt.n	800dea0 <kalman_3gyro.constprop.0+0x11f0>
 800dee6:	4698      	mov	r8, r3
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	1e58      	subs	r0, r3, #1
 800deec:	4448      	add	r0, r9
 800deee:	4642      	mov	r2, r8
 800def0:	4651      	mov	r1, sl
 800def2:	f009 fce7 	bl	80178c4 <memcpy>
 800def6:	9b06      	ldr	r3, [sp, #24]
 800def8:	eb0b 0703 	add.w	r7, fp, r3
 800defc:	2f1e      	cmp	r7, #30
 800defe:	dda5      	ble.n	800de4c <kalman_3gyro.constprop.0+0x119c>
 800df00:	9b07      	ldr	r3, [sp, #28]
 800df02:	3b01      	subs	r3, #1
 800df04:	9307      	str	r3, [sp, #28]
 800df06:	d19a      	bne.n	800de3e <kalman_3gyro.constprop.0+0x118e>
 800df08:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800df0c:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800df10:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800df14:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800df18:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800df1c:	ed52 7a01 	vldr	s15, [r2, #-4]
 800df20:	ed13 7a01 	vldr	s14, [r3, #-4]
 800df24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800df30:	460a      	mov	r2, r1
 800df32:	bf4c      	ite	mi
 800df34:	2201      	movmi	r2, #1
 800df36:	2200      	movpl	r2, #0
 800df38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3c:	bf4c      	ite	mi
 800df3e:	2301      	movmi	r3, #1
 800df40:	2300      	movpl	r3, #0
 800df42:	429a      	cmp	r2, r3
 800df44:	f000 81b4 	beq.w	800e2b0 <kalman_3gyro.constprop.0+0x1600>
 800df48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800df50:	ee67 7a87 	vmul.f32	s15, s15, s14
 800df54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df56:	ece3 7a01 	vstmia	r3!, {s15}
 800df5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df5e:	3304      	adds	r3, #4
 800df60:	930a      	str	r3, [sp, #40]	; 0x28
 800df62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df64:	2b03      	cmp	r3, #3
 800df66:	f47f ae4c 	bne.w	800dc02 <kalman_3gyro.constprop.0+0xf52>
 800df6a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800df6e:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800df72:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800df76:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800de8c <kalman_3gyro.constprop.0+0x11dc>
 800df7a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800df7e:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800de90 <kalman_3gyro.constprop.0+0x11e0>
 800df82:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800df86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800df8a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800df8e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800df92:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800df96:	eee6 7a06 	vfma.f32	s15, s12, s12
 800df9a:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800df9e:	eeb0 6a67 	vmov.f32	s12, s15
 800dfa2:	edcd 7a03 	vstr	s15, [sp, #12]
 800dfa6:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800dfaa:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800dfae:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800dfb2:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800dfb6:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800dfba:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800dfbe:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dfc2:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800dfc6:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800dfca:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800dfce:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800dfd2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dfd6:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800dfda:	ee64 7a27 	vmul.f32	s15, s8, s15
 800dfde:	ee25 7a07 	vmul.f32	s14, s10, s14
 800dfe2:	ed8d 5a02 	vstr	s10, [sp, #8]
 800dfe6:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800dfea:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f040 81a4 	bne.w	800e33c <kalman_3gyro.constprop.0+0x168c>
 800dff4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dff8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800dffc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800e000:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800e004:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800e008:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800e00c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800e010:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800e014:	f8c8 3020 	str.w	r3, [r8, #32]
 800e018:	ed88 7a07 	vstr	s14, [r8, #28]
 800e01c:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800e020:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800e024:	ed93 7a00 	vldr	s14, [r3]
 800e028:	ed92 8a00 	vldr	s16, [r2]
 800e02c:	eddb ea02 	vldr	s29, [fp, #8]
 800e030:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800e034:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800e038:	ed92 5a00 	vldr	s10, [r2]
 800e03c:	ee28 8a07 	vmul.f32	s16, s16, s14
 800e040:	ed93 7a00 	vldr	s14, [r3]
 800e044:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e048:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800e04c:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800e050:	ed92 5a00 	vldr	s10, [r2]
 800e054:	ed93 7a00 	vldr	s14, [r3]
 800e058:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e05c:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800e060:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800e064:	ed92 5a00 	vldr	s10, [r2]
 800e068:	ed93 7a00 	vldr	s14, [r3]
 800e06c:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e070:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800e074:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800e078:	ed92 5a00 	vldr	s10, [r2]
 800e07c:	ed93 7a00 	vldr	s14, [r3]
 800e080:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e088:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e08c:	f340 8232 	ble.w	800e4f4 <kalman_3gyro.constprop.0+0x1844>
 800e090:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800e094:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09c:	f100 815e 	bmi.w	800e35c <kalman_3gyro.constprop.0+0x16ac>
 800e0a0:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800e0a4:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800e0a8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b0:	f142 84bd 	bpl.w	8010a2e <kalman_3gyro.constprop.0+0x3d7e>
 800e0b4:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800e0b8:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c0:	f342 850a 	ble.w	8010ad8 <kalman_3gyro.constprop.0+0x3e28>
 800e0c4:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800e0c8:	eef4 2ac8 	vcmpe.f32	s5, s16
 800e0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d0:	f342 86c5 	ble.w	8010e5e <kalman_3gyro.constprop.0+0x41ae>
 800e0d4:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800e0d8:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800e0dc:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800e0e0:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e0e4:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e0e8:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800e0ec:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e0f0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e0f4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0fc:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e100:	f202 86c5 	bhi.w	8010e8e <kalman_3gyro.constprop.0+0x41de>
 800e104:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800e108:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e110:	f342 86c5 	ble.w	8010e9e <kalman_3gyro.constprop.0+0x41ee>
 800e114:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800e118:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800e11c:	ee38 3a64 	vsub.f32	s6, s16, s9
 800e120:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e124:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e128:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e12c:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800e130:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e134:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800e138:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e140:	f202 86c5 	bhi.w	8010ece <kalman_3gyro.constprop.0+0x421e>
 800e144:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800e148:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e150:	f343 8371 	ble.w	8011836 <kalman_3gyro.constprop.0+0x4b86>
 800e154:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800e158:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800e15c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e160:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e164:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e168:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e16c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e170:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e174:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800e178:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e180:	f202 86c5 	bhi.w	8010f0e <kalman_3gyro.constprop.0+0x425e>
 800e184:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800e188:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e190:	f343 8359 	ble.w	8011846 <kalman_3gyro.constprop.0+0x4b96>
 800e194:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800e198:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800e19c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e1a0:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e1a4:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e1a8:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e1ac:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e1b0:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e1b4:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800e1b8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c0:	f2c2 86c5 	blt.w	8010f4e <kalman_3gyro.constprop.0+0x429e>
 800e1c4:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800e1c8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d0:	f143 832d 	bpl.w	801182e <kalman_3gyro.constprop.0+0x4b7e>
 800e1d4:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800e1d8:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800e1dc:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e1e0:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e1e4:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e1e8:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e1ec:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e1f0:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e1f4:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800e1f8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	f2c2 86c5 	blt.w	8010f8e <kalman_3gyro.constprop.0+0x42de>
 800e204:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800e208:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e210:	f142 86c5 	bpl.w	8010f9e <kalman_3gyro.constprop.0+0x42ee>
 800e214:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800e218:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800e21c:	ee78 3a64 	vsub.f32	s7, s16, s9
 800e220:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e224:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e228:	ee25 5a23 	vmul.f32	s10, s10, s7
 800e22c:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800e230:	ee3e ea04 	vadd.f32	s28, s28, s8
 800e234:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e238:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800e23c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800e240:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800e244:	e15a      	b.n	800e4fc <kalman_3gyro.constprop.0+0x184c>
 800e246:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800de94 <kalman_3gyro.constprop.0+0x11e4>
 800e24a:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800de98 <kalman_3gyro.constprop.0+0x11e8>
 800e24e:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800de9c <kalman_3gyro.constprop.0+0x11ec>
 800e252:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800e256:	f7fe bedd 	b.w	800d014 <kalman_3gyro.constprop.0+0x364>
 800e25a:	1c60      	adds	r0, r4, #1
 800e25c:	42be      	cmp	r6, r7
 800e25e:	eba7 0206 	sub.w	r2, r7, r6
 800e262:	4449      	add	r1, r9
 800e264:	4450      	add	r0, sl
 800e266:	f6bf ae39 	bge.w	800dedc <kalman_3gyro.constprop.0+0x122c>
 800e26a:	443c      	add	r4, r7
 800e26c:	1ba4      	subs	r4, r4, r6
 800e26e:	f009 fb29 	bl	80178c4 <memcpy>
 800e272:	463e      	mov	r6, r7
 800e274:	4645      	mov	r5, r8
 800e276:	e632      	b.n	800dede <kalman_3gyro.constprop.0+0x122e>
 800e278:	3601      	adds	r6, #1
 800e27a:	42be      	cmp	r6, r7
 800e27c:	f80a 2004 	strb.w	r2, [sl, r4]
 800e280:	f47f ae2d 	bne.w	800dede <kalman_3gyro.constprop.0+0x122e>
 800e284:	9b02      	ldr	r3, [sp, #8]
 800e286:	f105 0801 	add.w	r8, r5, #1
 800e28a:	1c60      	adds	r0, r4, #1
 800e28c:	45c3      	cmp	fp, r8
 800e28e:	eba3 0205 	sub.w	r2, r3, r5
 800e292:	eb09 0105 	add.w	r1, r9, r5
 800e296:	4450      	add	r0, sl
 800e298:	f77f ae21 	ble.w	800dede <kalman_3gyro.constprop.0+0x122e>
 800e29c:	f009 fb12 	bl	80178c4 <memcpy>
 800e2a0:	9b02      	ldr	r3, [sp, #8]
 800e2a2:	441c      	add	r4, r3
 800e2a4:	9b04      	ldr	r3, [sp, #16]
 800e2a6:	1b5a      	subs	r2, r3, r5
 800e2a8:	1b64      	subs	r4, r4, r5
 800e2aa:	eb02 0508 	add.w	r5, r2, r8
 800e2ae:	e616      	b.n	800dede <kalman_3gyro.constprop.0+0x122e>
 800e2b0:	eef4 7a48 	vcmp.f32	s15, s16
 800e2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b8:	f43f ae46 	beq.w	800df48 <kalman_3gyro.constprop.0+0x1298>
 800e2bc:	eef4 7a4b 	vcmp.f32	s15, s22
 800e2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c4:	f43f ae40 	beq.w	800df48 <kalman_3gyro.constprop.0+0x1298>
 800e2c8:	eeb4 7a48 	vcmp.f32	s14, s16
 800e2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d0:	f43f ae3a 	beq.w	800df48 <kalman_3gyro.constprop.0+0x1298>
 800e2d4:	eeb4 7a4b 	vcmp.f32	s14, s22
 800e2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2dc:	f43f ae34 	beq.w	800df48 <kalman_3gyro.constprop.0+0x1298>
 800e2e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e2e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e2e8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e2ec:	e632      	b.n	800df54 <kalman_3gyro.constprop.0+0x12a4>
 800e2ee:	2304      	movs	r3, #4
 800e2f0:	9301      	str	r3, [sp, #4]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	461c      	mov	r4, r3
 800e2f6:	2307      	movs	r3, #7
 800e2f8:	4694      	mov	ip, r2
 800e2fa:	2106      	movs	r1, #6
 800e2fc:	9302      	str	r3, [sp, #8]
 800e2fe:	2603      	movs	r6, #3
 800e300:	f04f 0a01 	mov.w	sl, #1
 800e304:	f7ff ba5c 	b.w	800d7c0 <kalman_3gyro.constprop.0+0xb10>
 800e308:	9a08      	ldr	r2, [sp, #32]
 800e30a:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e494 <kalman_3gyro.constprop.0+0x17e4>
 800e30e:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e498 <kalman_3gyro.constprop.0+0x17e8>
 800e312:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e49c <kalman_3gyro.constprop.0+0x17ec>
 800e316:	4b62      	ldr	r3, [pc, #392]	; (800e4a0 <kalman_3gyro.constprop.0+0x17f0>)
 800e318:	edc2 7a00 	vstr	s15, [r2]
 800e31c:	eeb0 4a65 	vmov.f32	s8, s11
 800e320:	eeb0 3a67 	vmov.f32	s6, s15
 800e324:	eef0 4a45 	vmov.f32	s9, s10
 800e328:	6053      	str	r3, [r2, #4]
 800e32a:	6093      	str	r3, [r2, #8]
 800e32c:	f7fe bd3e 	b.w	800cdac <kalman_3gyro.constprop.0+0xfc>
 800e330:	2308      	movs	r3, #8
 800e332:	2005      	movs	r0, #5
 800e334:	f04f 0802 	mov.w	r8, #2
 800e338:	f7ff ba5c 	b.w	800d7f4 <kalman_3gyro.constprop.0+0xb44>
 800e33c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e340:	2300      	movs	r3, #0
 800e342:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800e346:	ed88 7a07 	vstr	s14, [r8, #28]
 800e34a:	ed88 7a08 	vstr	s14, [r8, #32]
 800e34e:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e352:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e356:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e35a:	e65f      	b.n	800e01c <kalman_3gyro.constprop.0+0x136c>
 800e35c:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e360:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e368:	f342 83b2 	ble.w	8010ad0 <kalman_3gyro.constprop.0+0x3e20>
 800e36c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e374:	f2c2 86e9 	blt.w	801114a <kalman_3gyro.constprop.0+0x449a>
 800e378:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e37c:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e384:	f342 8712 	ble.w	80111ac <kalman_3gyro.constprop.0+0x44fc>
 800e388:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e38c:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e390:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e394:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e398:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e39c:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e3a0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e3a4:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e3a8:	f002 bed8 	b.w	801115c <kalman_3gyro.constprop.0+0x44ac>
 800e3ac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3b0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b8:	f342 84bd 	ble.w	8010d36 <kalman_3gyro.constprop.0+0x4086>
 800e3bc:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e3c0:	f7ff b993 	b.w	800d6ea <kalman_3gyro.constprop.0+0xa3a>
 800e3c4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3c8:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d0:	f342 849f 	ble.w	8010d12 <kalman_3gyro.constprop.0+0x4062>
 800e3d4:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e3d8:	f7ff b964 	b.w	800d6a4 <kalman_3gyro.constprop.0+0x9f4>
 800e3dc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3e0:	eef4 dac7 	vcmpe.f32	s27, s14
 800e3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e8:	f342 84b7 	ble.w	8010d5a <kalman_3gyro.constprop.0+0x40aa>
 800e3ec:	eddf da2d 	vldr	s27, [pc, #180]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e3f0:	f7ff b935 	b.w	800d65e <kalman_3gyro.constprop.0+0x9ae>
 800e3f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3f8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	f342 8475 	ble.w	8010cee <kalman_3gyro.constprop.0+0x403e>
 800e404:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e408:	f7ff b8c3 	b.w	800d592 <kalman_3gyro.constprop.0+0x8e2>
 800e40c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e410:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e418:	f342 83a0 	ble.w	8010b5c <kalman_3gyro.constprop.0+0x3eac>
 800e41c:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e420:	f7ff b894 	b.w	800d54c <kalman_3gyro.constprop.0+0x89c>
 800e424:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e428:	eef4 dac7 	vcmpe.f32	s27, s14
 800e42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e430:	f342 8382 	ble.w	8010b38 <kalman_3gyro.constprop.0+0x3e88>
 800e434:	eddf da1b 	vldr	s27, [pc, #108]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e438:	f7ff b865 	b.w	800d506 <kalman_3gyro.constprop.0+0x856>
 800e43c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e440:	eef4 dac7 	vcmpe.f32	s27, s14
 800e444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e448:	f342 8364 	ble.w	8010b14 <kalman_3gyro.constprop.0+0x3e64>
 800e44c:	eddf da15 	vldr	s27, [pc, #84]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e450:	f7fe bff3 	b.w	800d43a <kalman_3gyro.constprop.0+0x78a>
 800e454:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e458:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e460:	f342 8346 	ble.w	8010af0 <kalman_3gyro.constprop.0+0x3e40>
 800e464:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e468:	f7fe bfc4 	b.w	800d3f4 <kalman_3gyro.constprop.0+0x744>
 800e46c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e470:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e478:	f342 839e 	ble.w	8010bb8 <kalman_3gyro.constprop.0+0x3f08>
 800e47c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e4a4 <kalman_3gyro.constprop.0+0x17f4>
 800e480:	f7fe bf95 	b.w	800d3ae <kalman_3gyro.constprop.0+0x6fe>
 800e484:	eef1 3a63 	vneg.f32	s7, s7
 800e488:	f7ff bb42 	b.w	800db10 <kalman_3gyro.constprop.0+0xe60>
 800e48c:	eef1 3a63 	vneg.f32	s7, s7
 800e490:	f7ff bb1b 	b.w	800daca <kalman_3gyro.constprop.0+0xe1a>
 800e494:	00000000 	.word	0x00000000
 800e498:	3fb33333 	.word	0x3fb33333
 800e49c:	bfb33333 	.word	0xbfb33333
 800e4a0:	3f333333 	.word	0x3f333333
 800e4a4:	80000000 	.word	0x80000000
 800e4a8:	3fb77778 	.word	0x3fb77778
 800e4ac:	3f99999a 	.word	0x3f99999a
 800e4b0:	3f4ccccd 	.word	0x3f4ccccd
 800e4b4:	42d40000 	.word	0x42d40000
 800e4b8:	46979000 	.word	0x46979000
 800e4bc:	4415c000 	.word	0x4415c000
 800e4c0:	3ba3d70a 	.word	0x3ba3d70a
 800e4c4:	3b449ba6 	.word	0x3b449ba6
 800e4c8:	3c75c28f 	.word	0x3c75c28f
 800e4cc:	3c23d70a 	.word	0x3c23d70a
 800e4d0:	3d4cccc0 	.word	0x3d4cccc0
 800e4d4:	43480000 	.word	0x43480000
 800e4d8:	3d4ccccd 	.word	0x3d4ccccd
 800e4dc:	3cf5c28f 	.word	0x3cf5c28f
 800e4e0:	3eb33334 	.word	0x3eb33334
 800e4e4:	3f933333 	.word	0x3f933333
 800e4e8:	4247ffff 	.word	0x4247ffff
 800e4ec:	3dcccccd 	.word	0x3dcccccd
 800e4f0:	3e4ccccd 	.word	0x3e4ccccd
 800e4f4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e4f8:	eeb0 ba4e 	vmov.f32	s22, s28
 800e4fc:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e500:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e504:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e4ec <kalman_3gyro.constprop.0+0x183c>
 800e508:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e50c:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e510:	eef0 daed 	vabs.f32	s27, s27
 800e514:	eeb0 5ac5 	vabs.f32	s10, s10
 800e518:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e51c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e524:	f340 821c 	ble.w	800e960 <kalman_3gyro.constprop.0+0x1cb0>
 800e528:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e4a8 <kalman_3gyro.constprop.0+0x17f8>
 800e52c:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	f302 828b 	bgt.w	8010a4e <kalman_3gyro.constprop.0+0x3d9e>
 800e538:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e53c:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e540:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e544:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e548:	eeb0 5a64 	vmov.f32	s10, s9
 800e54c:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e554:	f89b 3000 	ldrb.w	r3, [fp]
 800e558:	bfb8      	it	lt
 800e55a:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e55e:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 81f9 	beq.w	800e95a <kalman_3gyro.constprop.0+0x1caa>
 800e568:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 81de 	beq.w	800e92e <kalman_3gyro.constprop.0+0x1c7e>
 800e572:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e576:	2300      	movs	r3, #0
 800e578:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e57c:	eeb0 6a61 	vmov.f32	s12, s3
 800e580:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e584:	9908      	ldr	r1, [sp, #32]
 800e586:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e58a:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e58e:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e592:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e596:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e59a:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e5a4:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e5a8:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e5ac:	9233      	str	r2, [sp, #204]	; 0xcc
 800e5ae:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e5b2:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e5b6:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e5ba:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e5be:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e5c2:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e5c6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e5ca:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e5ce:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e5d2:	eeb0 3a42 	vmov.f32	s6, s4
 800e5d6:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e5da:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e5de:	eef0 aa46 	vmov.f32	s21, s12
 800e5e2:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e5e6:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e5ea:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e5ee:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e5f2:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e5f6:	eef0 2a44 	vmov.f32	s5, s8
 800e5fa:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e5fe:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e602:	eeb0 fa64 	vmov.f32	s30, s9
 800e606:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e60a:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e60e:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e612:	eeb0 1a6a 	vmov.f32	s2, s21
 800e616:	eef0 aa66 	vmov.f32	s21, s13
 800e61a:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e61e:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e622:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e626:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e62a:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e62e:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e632:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e636:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e63a:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e63e:	eef0 3a64 	vmov.f32	s7, s9
 800e642:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e646:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e64a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e64e:	edd1 5a02 	vldr	s11, [r1, #8]
 800e652:	ed91 5a05 	vldr	s10, [r1, #20]
 800e656:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e65a:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e65e:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e662:	edd1 1a01 	vldr	s3, [r1, #4]
 800e666:	edd1 fa00 	vldr	s31, [r1]
 800e66a:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e66e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e672:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e676:	edd1 5a03 	vldr	s11, [r1, #12]
 800e67a:	edd1 1a04 	vldr	s3, [r1, #16]
 800e67e:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e4ac <kalman_3gyro.constprop.0+0x17fc>
 800e682:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e686:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e68a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e68e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e692:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e696:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e69e:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e6a2:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e6a6:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e6aa:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e6ae:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e6b2:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e6b6:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e6ba:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e6be:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e6c2:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e6c6:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e6ca:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e6ce:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e6d2:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e6d6:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e6da:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e6de:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e6e2:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e6e6:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e6ea:	d506      	bpl.n	800e6fa <kalman_3gyro.constprop.0+0x1a4a>
 800e6ec:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e4b0 <kalman_3gyro.constprop.0+0x1800>
 800e6f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f8:	dc01      	bgt.n	800e6fe <kalman_3gyro.constprop.0+0x1a4e>
 800e6fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6fe:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e702:	eef0 7ae7 	vabs.f32	s15, s15
 800e706:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e70a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e712:	f340 8141 	ble.w	800e998 <kalman_3gyro.constprop.0+0x1ce8>
 800e716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	f142 8198 	bpl.w	8010a56 <kalman_3gyro.constprop.0+0x3da6>
 800e726:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e4c0 <kalman_3gyro.constprop.0+0x1810>
 800e72a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e72e:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e4cc <kalman_3gyro.constprop.0+0x181c>
 800e732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e73a:	f102 8221 	bmi.w	8010b80 <kalman_3gyro.constprop.0+0x3ed0>
 800e73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e742:	f142 8221 	bpl.w	8010b88 <kalman_3gyro.constprop.0+0x3ed8>
 800e746:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e4c8 <kalman_3gyro.constprop.0+0x1818>
 800e74a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e752:	f282 84a4 	bge.w	801109e <kalman_3gyro.constprop.0+0x43ee>
 800e756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e75a:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e4dc <kalman_3gyro.constprop.0+0x182c>
 800e75e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e766:	f2c2 84b0 	blt.w	80110ca <kalman_3gyro.constprop.0+0x441a>
 800e76a:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e4d8 <kalman_3gyro.constprop.0+0x1828>
 800e76e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e776:	f142 84b0 	bpl.w	80110da <kalman_3gyro.constprop.0+0x442a>
 800e77a:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e4dc <kalman_3gyro.constprop.0+0x182c>
 800e77e:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e4e8 <kalman_3gyro.constprop.0+0x1838>
 800e782:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e786:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e78a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e78e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e792:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e796:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e4ec <kalman_3gyro.constprop.0+0x183c>
 800e79a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a2:	f2c2 84b0 	blt.w	8011106 <kalman_3gyro.constprop.0+0x4456>
 800e7a6:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e4f0 <kalman_3gyro.constprop.0+0x1840>
 800e7aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b2:	f142 84b0 	bpl.w	8011116 <kalman_3gyro.constprop.0+0x4466>
 800e7b6:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e4ec <kalman_3gyro.constprop.0+0x183c>
 800e7ba:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e4b4 <kalman_3gyro.constprop.0+0x1804>
 800e7be:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e7c2:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e7c6:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e7ca:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e7ce:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e7d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e7d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7de:	db0d      	blt.n	800e7fc <kalman_3gyro.constprop.0+0x1b4c>
 800e7e0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e7e4:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e4b8 <kalman_3gyro.constprop.0+0x1808>
 800e7e8:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e4bc <kalman_3gyro.constprop.0+0x180c>
 800e7ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e7f0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e7f4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e7f8:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e7fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e800:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e804:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e808:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e80c:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e4c8 <kalman_3gyro.constprop.0+0x1818>
 800e810:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e4c0 <kalman_3gyro.constprop.0+0x1810>
 800e814:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e4cc <kalman_3gyro.constprop.0+0x181c>
 800e818:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e4c4 <kalman_3gyro.constprop.0+0x1814>
 800e81c:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e824:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e828:	bfb8      	it	lt
 800e82a:	eef0 4a46 	vmovlt.f32	s9, s12
 800e82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e832:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e836:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e83a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e83e:	f142 841f 	bpl.w	8011080 <kalman_3gyro.constprop.0+0x43d0>
 800e842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e846:	f2c2 841f 	blt.w	8011088 <kalman_3gyro.constprop.0+0x43d8>
 800e84a:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e4c8 <kalman_3gyro.constprop.0+0x1818>
 800e84e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e856:	f142 83ba 	bpl.w	8010fce <kalman_3gyro.constprop.0+0x431e>
 800e85a:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e4cc <kalman_3gyro.constprop.0+0x181c>
 800e85e:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e4d0 <kalman_3gyro.constprop.0+0x1820>
 800e862:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e4d4 <kalman_3gyro.constprop.0+0x1824>
 800e866:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e86e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e872:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e876:	eeb0 ca66 	vmov.f32	s24, s13
 800e87a:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e4dc <kalman_3gyro.constprop.0+0x182c>
 800e87e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e886:	f2c2 83ba 	blt.w	8010ffe <kalman_3gyro.constprop.0+0x434e>
 800e88a:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e4d8 <kalman_3gyro.constprop.0+0x1828>
 800e88e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e896:	f142 83ba 	bpl.w	801100e <kalman_3gyro.constprop.0+0x435e>
 800e89a:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e4dc <kalman_3gyro.constprop.0+0x182c>
 800e89e:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e4e0 <kalman_3gyro.constprop.0+0x1830>
 800e8a2:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e4e8 <kalman_3gyro.constprop.0+0x1838>
 800e8a6:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e4e4 <kalman_3gyro.constprop.0+0x1834>
 800e8aa:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e8ae:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e8b2:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e8b6:	eeb0 ca66 	vmov.f32	s24, s13
 800e8ba:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e4ec <kalman_3gyro.constprop.0+0x183c>
 800e8be:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	f2c2 83ba 	blt.w	801103e <kalman_3gyro.constprop.0+0x438e>
 800e8ca:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e4f0 <kalman_3gyro.constprop.0+0x1840>
 800e8ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d6:	f142 83ba 	bpl.w	801104e <kalman_3gyro.constprop.0+0x439e>
 800e8da:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e968 <kalman_3gyro.constprop.0+0x1cb8>
 800e8de:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e96c <kalman_3gyro.constprop.0+0x1cbc>
 800e8e2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e8e6:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e8ea:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e8ee:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e8f2:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e8f6:	eeb0 ca66 	vmov.f32	s24, s13
 800e8fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e8fe:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e906:	f2c2 80b0 	blt.w	8010a6a <kalman_3gyro.constprop.0+0x3dba>
 800e90a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e90e:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e912:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e970 <kalman_3gyro.constprop.0+0x1cc0>
 800e916:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e974 <kalman_3gyro.constprop.0+0x1cc4>
 800e91a:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e91e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e922:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e926:	eeb0 ca66 	vmov.f32	s24, s13
 800e92a:	f002 b89e 	b.w	8010a6a <kalman_3gyro.constprop.0+0x3dba>
 800e92e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e932:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e936:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e93a:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e93e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e942:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e946:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e94a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e94e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e956:	f102 8246 	bmi.w	8010de6 <kalman_3gyro.constprop.0+0x4136>
 800e95a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e95e:	e60b      	b.n	800e578 <kalman_3gyro.constprop.0+0x18c8>
 800e960:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e964:	e5f2      	b.n	800e54c <kalman_3gyro.constprop.0+0x189c>
 800e966:	bf00      	nop
 800e968:	3dcccccd 	.word	0x3dcccccd
 800e96c:	410c0000 	.word	0x410c0000
 800e970:	42c80000 	.word	0x42c80000
 800e974:	424a0000 	.word	0x424a0000
 800e978:	3c23d70a 	.word	0x3c23d70a
 800e97c:	3b449ba6 	.word	0x3b449ba6
 800e980:	3fb33333 	.word	0x3fb33333
 800e984:	3ecccccd 	.word	0x3ecccccd
 800e988:	3f8f5c29 	.word	0x3f8f5c29
 800e98c:	3f59999a 	.word	0x3f59999a
 800e990:	3e4ccccd 	.word	0x3e4ccccd
 800e994:	3f99999a 	.word	0x3f99999a
 800e998:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e99c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e978 <kalman_3gyro.constprop.0+0x1cc8>
 800e9a0:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e97c <kalman_3gyro.constprop.0+0x1ccc>
 800e9a4:	eeb0 7a4c 	vmov.f32	s14, s24
 800e9a8:	eef0 4a4c 	vmov.f32	s9, s24
 800e9ac:	eddd 6a01 	vldr	s13, [sp, #4]
 800e9b0:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e9b4:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e9b8:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e9bc:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e9c0:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e9c4:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e9c8:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e9cc:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e9d0:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e9d4:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e9d8:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e9dc:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e9e0:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e9e4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e9e8:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e9ec:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e9f0:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e9f4:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e9f8:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e9fc:	ee2e ea02 	vmul.f32	s28, s28, s4
 800ea00:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800ea04:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800ea08:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800ea0c:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800ea10:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800ea14:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800ea18:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800ea1c:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800ea20:	2a00      	cmp	r2, #0
 800ea22:	f001 8411 	beq.w	8010248 <kalman_3gyro.constprop.0+0x3598>
 800ea26:	ee77 2a07 	vadd.f32	s5, s14, s14
 800ea2a:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800ea2e:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800ea32:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800ea36:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800ea3a:	ee24 4a24 	vmul.f32	s8, s8, s9
 800ea3e:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800ea42:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ea46:	ee29 7a87 	vmul.f32	s14, s19, s14
 800ea4a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ea4e:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800ea52:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800ea56:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800ea5a:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800ea5e:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800ea62:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800ea66:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800ea6a:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800ea6e:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800ea72:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800ea76:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800ea7a:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800ea7e:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800ea82:	b159      	cbz	r1, 800ea9c <kalman_3gyro.constprop.0+0x1dec>
 800ea84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea90:	dd04      	ble.n	800ea9c <kalman_3gyro.constprop.0+0x1dec>
 800ea92:	2000      	movs	r0, #0
 800ea94:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800ea98:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800ea9c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800eaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa4:	dd09      	ble.n	800eaba <kalman_3gyro.constprop.0+0x1e0a>
 800eaa6:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800eaaa:	eef4 7ac8 	vcmpe.f32	s15, s16
 800eaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab2:	db02      	blt.n	800eaba <kalman_3gyro.constprop.0+0x1e0a>
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f002 8001 	beq.w	8010abc <kalman_3gyro.constprop.0+0x3e0c>
 800eaba:	b132      	cbz	r2, 800eaca <kalman_3gyro.constprop.0+0x1e1a>
 800eabc:	f240 1001 	movw	r0, #257	; 0x101
 800eac0:	2301      	movs	r3, #1
 800eac2:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800eac6:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eaca:	2301      	movs	r3, #1
 800eacc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800ead0:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800ead4:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e980 <kalman_3gyro.constprop.0+0x1cd0>
 800ead8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae0:	dc09      	bgt.n	800eaf6 <kalman_3gyro.constprop.0+0x1e46>
 800eae2:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e984 <kalman_3gyro.constprop.0+0x1cd4>
 800eae6:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800eaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaee:	d402      	bmi.n	800eaf6 <kalman_3gyro.constprop.0+0x1e46>
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	f042 80e4 	bne.w	8010cbe <kalman_3gyro.constprop.0+0x400e>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eafc:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eb00:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eb04:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800eb08:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e988 <kalman_3gyro.constprop.0+0x1cd8>
 800eb0c:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	dc09      	bgt.n	800eb2a <kalman_3gyro.constprop.0+0x1e7a>
 800eb16:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e98c <kalman_3gyro.constprop.0+0x1cdc>
 800eb1a:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb22:	d402      	bmi.n	800eb2a <kalman_3gyro.constprop.0+0x1e7a>
 800eb24:	2900      	cmp	r1, #0
 800eb26:	f042 8097 	bne.w	8010c58 <kalman_3gyro.constprop.0+0x3fa8>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800eb30:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800eb34:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eb38:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800eb3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eb40:	eef4 dae7 	vcmpe.f32	s27, s15
 800eb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb48:	f341 836b 	ble.w	8010222 <kalman_3gyro.constprop.0+0x3572>
 800eb4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb50:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800eb54:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800eb58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800eb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb66:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800eb6a:	eef4 dac7 	vcmpe.f32	s27, s14
 800eb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb72:	bfc4      	itt	gt
 800eb74:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800eb78:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800eb7c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eb80:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eb84:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800eb88:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800eb8c:	2b0e      	cmp	r3, #14
 800eb8e:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800eb92:	dc02      	bgt.n	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 800eb94:	3305      	adds	r3, #5
 800eb96:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800eb9a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800eb9e:	eef4 7acd 	vcmpe.f32	s15, s26
 800eba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba6:	f340 82e9 	ble.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ebaa:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800ebae:	eef4 7aeb 	vcmpe.f32	s15, s23
 800ebb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb6:	f340 82e1 	ble.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ebba:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800ebbe:	eef4 7aec 	vcmpe.f32	s15, s25
 800ebc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc6:	f340 82d9 	ble.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ebca:	9b08      	ldr	r3, [sp, #32]
 800ebcc:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e990 <kalman_3gyro.constprop.0+0x1ce0>
 800ebd0:	ed93 7a06 	vldr	s14, [r3, #24]
 800ebd4:	eef0 6ac7 	vabs.f32	s13, s14
 800ebd8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ebdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe0:	f140 82cc 	bpl.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ebe4:	edd3 6a07 	vldr	s13, [r3, #28]
 800ebe8:	eeb0 6ae6 	vabs.f32	s12, s13
 800ebec:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf4:	f140 82c2 	bpl.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ebf8:	ed93 6a08 	vldr	s12, [r3, #32]
 800ebfc:	eef0 4ac6 	vabs.f32	s9, s12
 800ec00:	eef4 4ae7 	vcmpe.f32	s9, s15
 800ec04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec08:	f140 82b8 	bpl.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ec0c:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e994 <kalman_3gyro.constprop.0+0x1ce4>
 800ec10:	eef0 5ae5 	vabs.f32	s11, s11
 800ec14:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ec18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec1c:	f140 82ae 	bpl.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ec20:	eef0 1ae1 	vabs.f32	s3, s3
 800ec24:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ec28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2c:	f140 82a6 	bpl.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ec30:	eeb0 5ac5 	vabs.f32	s10, s10
 800ec34:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800ec38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3c:	f140 829e 	bpl.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ec40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec42:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800ec46:	edd3 5a00 	vldr	s11, [r3]
 800ec4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ec4c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ec4e:	ed93 5a00 	vldr	s10, [r3]
 800ec52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ec54:	eef4 5ac5 	vcmpe.f32	s11, s10
 800ec58:	2a09      	cmp	r2, #9
 800ec5a:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800ec5e:	ed93 4a00 	vldr	s8, [r3]
 800ec62:	edd4 3a00 	vldr	s7, [r4]
 800ec66:	bf8c      	ite	hi
 800ec68:	230a      	movhi	r3, #10
 800ec6a:	2305      	movls	r3, #5
 800ec6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec70:	bfb4      	ite	lt
 800ec72:	eef0 7a45 	vmovlt.f32	s15, s10
 800ec76:	eef0 7a65 	vmovge.f32	s15, s11
 800ec7a:	bf8c      	ite	hi
 800ec7c:	eef0 4a45 	vmovhi.f32	s9, s10
 800ec80:	eef0 4a65 	vmovls.f32	s9, s11
 800ec84:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ec88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8c:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ec90:	bfb8      	it	lt
 800ec92:	eef0 7a63 	vmovlt.f32	s15, s7
 800ec96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec9a:	bf88      	it	hi
 800ec9c:	eef0 4a63 	vmovhi.f32	s9, s7
 800eca0:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ecac:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ecb0:	edd1 5a00 	vldr	s11, [r1]
 800ecb4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ecb6:	bfb8      	it	lt
 800ecb8:	eef0 7a44 	vmovlt.f32	s15, s8
 800ecbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc0:	bf88      	it	hi
 800ecc2:	eef0 4a44 	vmovhi.f32	s9, s8
 800ecc6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ecca:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ecce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd2:	eef4 4ae5 	vcmpe.f32	s9, s11
 800ecd6:	bfb8      	it	lt
 800ecd8:	eef0 7a65 	vmovlt.f32	s15, s11
 800ecdc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ece0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece4:	bf88      	it	hi
 800ece6:	eef0 4a65 	vmovhi.f32	s9, s11
 800ecea:	2b05      	cmp	r3, #5
 800ecec:	ee35 5a25 	vadd.f32	s10, s10, s11
 800ecf0:	edd1 5a00 	vldr	s11, [r1]
 800ecf4:	d065      	beq.n	800edc2 <kalman_3gyro.constprop.0+0x2112>
 800ecf6:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800ecfa:	edd1 3a00 	vldr	s7, [r1]
 800ecfe:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800ed02:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed06:	ed91 4a00 	vldr	s8, [r1]
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed12:	bfb8      	it	lt
 800ed14:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1c:	bf88      	it	hi
 800ed1e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed22:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed26:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800ed2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed32:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed36:	edd1 3a00 	vldr	s7, [r1]
 800ed3a:	bfb8      	it	lt
 800ed3c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	bf88      	it	hi
 800ed46:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed4a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed4e:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800ed52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed56:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed5a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed5e:	ed91 4a00 	vldr	s8, [r1]
 800ed62:	bfb8      	it	lt
 800ed64:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	bf88      	it	hi
 800ed6e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed72:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed7e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed82:	bfb8      	it	lt
 800ed84:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8c:	bf88      	it	hi
 800ed8e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed92:	2b0a      	cmp	r3, #10
 800ed94:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed98:	d113      	bne.n	800edc2 <kalman_3gyro.constprop.0+0x2112>
 800ed9a:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ed9e:	ed91 4a00 	vldr	s8, [r1]
 800eda2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	eef4 4ac4 	vcmpe.f32	s9, s8
 800edae:	bfb8      	it	lt
 800edb0:	eef0 7a44 	vmovlt.f32	s15, s8
 800edb4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800edb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbc:	bf88      	it	hi
 800edbe:	eef0 4a44 	vmovhi.f32	s9, s8
 800edc2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800edc6:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800f164 <kalman_3gyro.constprop.0+0x24b4>
 800edca:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800f168 <kalman_3gyro.constprop.0+0x24b8>
 800edce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edd2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800edd6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800edda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edde:	f300 81cd 	bgt.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ede2:	eef0 7ac5 	vabs.f32	s15, s10
 800ede6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edea:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800f16c <kalman_3gyro.constprop.0+0x24bc>
 800edee:	eef4 7ac5 	vcmpe.f32	s15, s10
 800edf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf6:	f300 81c1 	bgt.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800edfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800edfc:	ed91 5a00 	vldr	s10, [r1]
 800ee00:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee02:	ed91 4a00 	vldr	s8, [r1]
 800ee06:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ee08:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ee0c:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800ee10:	ed90 3a00 	vldr	s6, [r0]
 800ee14:	edd1 3a00 	vldr	s7, [r1]
 800ee18:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ee1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1e:	bfb4      	ite	lt
 800ee20:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee24:	eef0 7a45 	vmovge.f32	s15, s10
 800ee28:	bf8c      	ite	hi
 800ee2a:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee2e:	eef0 4a45 	vmovls.f32	s9, s10
 800ee32:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ee36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ee3e:	bfb8      	it	lt
 800ee40:	eef0 7a43 	vmovlt.f32	s15, s6
 800ee44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee48:	bf88      	it	hi
 800ee4a:	eef0 4a43 	vmovhi.f32	s9, s6
 800ee4e:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ee52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee56:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee5a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ee5e:	ed91 4a00 	vldr	s8, [r1]
 800ee62:	bfb8      	it	lt
 800ee64:	eef0 7a63 	vmovlt.f32	s15, s7
 800ee68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6c:	bf88      	it	hi
 800ee6e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ee72:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ee76:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ee7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee7e:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ee82:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ee86:	bfb8      	it	lt
 800ee88:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee90:	bf88      	it	hi
 800ee92:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee9c:	d065      	beq.n	800ef6a <kalman_3gyro.constprop.0+0x22ba>
 800ee9e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800eea2:	edd1 3a00 	vldr	s7, [r1]
 800eea6:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800eeaa:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eeae:	ed91 4a00 	vldr	s8, [r1]
 800eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb6:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eeba:	bfb8      	it	lt
 800eebc:	eef0 7a63 	vmovlt.f32	s15, s7
 800eec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec4:	bf88      	it	hi
 800eec6:	eef0 4a63 	vmovhi.f32	s9, s7
 800eeca:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eece:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800eed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eeda:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eede:	edd1 3a00 	vldr	s7, [r1]
 800eee2:	bfb8      	it	lt
 800eee4:	eef0 7a44 	vmovlt.f32	s15, s8
 800eee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeec:	bf88      	it	hi
 800eeee:	eef0 4a44 	vmovhi.f32	s9, s8
 800eef2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eef6:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800eefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef02:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ef06:	ed91 4a00 	vldr	s8, [r1]
 800ef0a:	bfb8      	it	lt
 800ef0c:	eef0 7a63 	vmovlt.f32	s15, s7
 800ef10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef14:	bf88      	it	hi
 800ef16:	eef0 4a63 	vmovhi.f32	s9, s7
 800ef1a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef22:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ef26:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ef2a:	bfb8      	it	lt
 800ef2c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef34:	bf88      	it	hi
 800ef36:	eef0 4a44 	vmovhi.f32	s9, s8
 800ef3a:	2b0a      	cmp	r3, #10
 800ef3c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef40:	d113      	bne.n	800ef6a <kalman_3gyro.constprop.0+0x22ba>
 800ef42:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800ef46:	ed91 4a00 	vldr	s8, [r1]
 800ef4a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef52:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ef56:	bfb8      	it	lt
 800ef58:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef5c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef64:	bf88      	it	hi
 800ef66:	eef0 4a44 	vmovhi.f32	s9, s8
 800ef6a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ef6e:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800f164 <kalman_3gyro.constprop.0+0x24b4>
 800ef72:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800f168 <kalman_3gyro.constprop.0+0x24b8>
 800ef76:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef7a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ef7e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ef82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef86:	f300 80f9 	bgt.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800ef8a:	eef0 7ac5 	vabs.f32	s15, s10
 800ef8e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef92:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800f16c <kalman_3gyro.constprop.0+0x24bc>
 800ef96:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ef9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9e:	f300 80ed 	bgt.w	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800efa2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800efa4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800efa6:	edd1 4a00 	vldr	s9, [r1]
 800efaa:	9919      	ldr	r1, [sp, #100]	; 0x64
 800efac:	ed91 3a00 	vldr	s6, [r1]
 800efb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800efb2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800efb6:	ed91 4a00 	vldr	s8, [r1]
 800efba:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800efbe:	edd1 3a00 	vldr	s7, [r1]
 800efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc6:	bfb4      	ite	lt
 800efc8:	eef0 7a43 	vmovlt.f32	s15, s6
 800efcc:	eef0 7a64 	vmovge.f32	s15, s9
 800efd0:	bf8c      	ite	hi
 800efd2:	eeb0 5a43 	vmovhi.f32	s10, s6
 800efd6:	eeb0 5a64 	vmovls.f32	s10, s9
 800efda:	eef4 3ae7 	vcmpe.f32	s7, s15
 800efde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe2:	eef4 3ac5 	vcmpe.f32	s7, s10
 800efe6:	bfa8      	it	ge
 800efe8:	eef0 7a63 	vmovge.f32	s15, s7
 800efec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff0:	bf98      	it	ls
 800eff2:	eeb0 5a63 	vmovls.f32	s10, s7
 800eff6:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800effa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800effe:	ee34 3a83 	vadd.f32	s6, s9, s6
 800f002:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800f006:	edd5 4a00 	vldr	s9, [r5]
 800f00a:	bfa8      	it	ge
 800f00c:	eef0 7a44 	vmovge.f32	s15, s8
 800f010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f014:	bf98      	it	ls
 800f016:	eeb0 5a44 	vmovls.f32	s10, s8
 800f01a:	eef4 7ae4 	vcmpe.f32	s15, s9
 800f01e:	ee73 3a83 	vadd.f32	s7, s7, s6
 800f022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f026:	eef4 4ac5 	vcmpe.f32	s9, s10
 800f02a:	bfb8      	it	lt
 800f02c:	eef0 7a64 	vmovlt.f32	s15, s9
 800f030:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f038:	bf98      	it	ls
 800f03a:	eeb0 5a64 	vmovls.f32	s10, s9
 800f03e:	2b05      	cmp	r3, #5
 800f040:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f044:	d065      	beq.n	800f112 <kalman_3gyro.constprop.0+0x2462>
 800f046:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800f04a:	ed95 4a00 	vldr	s8, [r5]
 800f04e:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800f052:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f056:	ed95 3a00 	vldr	s6, [r5]
 800f05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f05e:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f062:	bfb8      	it	lt
 800f064:	eef0 7a44 	vmovlt.f32	s15, s8
 800f068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06c:	bf88      	it	hi
 800f06e:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f072:	eef4 7ac3 	vcmpe.f32	s15, s6
 800f076:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800f07a:	edd5 3a00 	vldr	s7, [r5]
 800f07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f082:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800f086:	bfb8      	it	lt
 800f088:	eef0 7a43 	vmovlt.f32	s15, s6
 800f08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f090:	bf88      	it	hi
 800f092:	eeb0 5a43 	vmovhi.f32	s10, s6
 800f096:	eef4 7ae3 	vcmpe.f32	s15, s7
 800f09a:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800f09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a2:	ee34 4a24 	vadd.f32	s8, s8, s9
 800f0a6:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800f0aa:	edd5 4a00 	vldr	s9, [r5]
 800f0ae:	bfb8      	it	lt
 800f0b0:	eef0 7a63 	vmovlt.f32	s15, s7
 800f0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b8:	bf88      	it	hi
 800f0ba:	eeb0 5a63 	vmovhi.f32	s10, s7
 800f0be:	eef4 7ae4 	vcmpe.f32	s15, s9
 800f0c2:	ee34 4a03 	vadd.f32	s8, s8, s6
 800f0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ca:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800f0ce:	bfb8      	it	lt
 800f0d0:	eef0 7a64 	vmovlt.f32	s15, s9
 800f0d4:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0dc:	bf88      	it	hi
 800f0de:	eeb0 5a64 	vmovhi.f32	s10, s9
 800f0e2:	2b0a      	cmp	r3, #10
 800f0e4:	ee74 4a24 	vadd.f32	s9, s8, s9
 800f0e8:	d113      	bne.n	800f112 <kalman_3gyro.constprop.0+0x2462>
 800f0ea:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800f0ee:	ed93 4a00 	vldr	s8, [r3]
 800f0f2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fa:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f0fe:	bfb8      	it	lt
 800f100:	eef0 7a44 	vmovlt.f32	s15, s8
 800f104:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10c:	bf88      	it	hi
 800f10e:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f112:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f116:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800f164 <kalman_3gyro.constprop.0+0x24b4>
 800f11a:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f168 <kalman_3gyro.constprop.0+0x24b8>
 800f11e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f122:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f126:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12e:	dc25      	bgt.n	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800f130:	eef0 7ae4 	vabs.f32	s15, s9
 800f134:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f138:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800f16c <kalman_3gyro.constprop.0+0x24bc>
 800f13c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f144:	dc1a      	bgt.n	800f17c <kalman_3gyro.constprop.0+0x24cc>
 800f146:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800f14a:	2d00      	cmp	r5, #0
 800f14c:	f000 80e0 	beq.w	800f310 <kalman_3gyro.constprop.0+0x2660>
 800f150:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800f154:	2b01      	cmp	r3, #1
 800f156:	f002 8439 	beq.w	80119cc <kalman_3gyro.constprop.0+0x4d1c>
 800f15a:	2201      	movs	r2, #1
 800f15c:	462b      	mov	r3, r5
 800f15e:	9201      	str	r2, [sp, #4]
 800f160:	e01c      	b.n	800f19c <kalman_3gyro.constprop.0+0x24ec>
 800f162:	bf00      	nop
 800f164:	3be56041 	.word	0x3be56041
 800f168:	3dcccccd 	.word	0x3dcccccd
 800f16c:	3e333333 	.word	0x3e333333
 800f170:	3d088889 	.word	0x3d088889
 800f174:	42480000 	.word	0x42480000
 800f178:	00000000 	.word	0x00000000
 800f17c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800f180:	2100      	movs	r1, #0
 800f182:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800f186:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f000 80c1 	beq.w	800f312 <kalman_3gyro.constprop.0+0x2662>
 800f190:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800f194:	2a01      	cmp	r2, #1
 800f196:	f001 8615 	beq.w	8010dc4 <kalman_3gyro.constprop.0+0x4114>
 800f19a:	9101      	str	r1, [sp, #4]
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	f041 87d2 	bne.w	8011146 <kalman_3gyro.constprop.0+0x4496>
 800f1a2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800f1a6:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800f1aa:	f240 1301 	movw	r3, #257	; 0x101
 800f1ae:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800f1b8:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800f1bc:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800f1c0:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800f1c4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800f1c8:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800f1cc:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800f1d0:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800f1d4:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800f1d8:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800f1dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f1e0:	eef4 7ac8 	vcmpe.f32	s15, s16
 800f1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e8:	f2c2 809a 	blt.w	8011320 <kalman_3gyro.constprop.0+0x4670>
 800f1ec:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800f1f0:	2a00      	cmp	r2, #0
 800f1f2:	f002 83db 	beq.w	80119ac <kalman_3gyro.constprop.0+0x4cfc>
 800f1f6:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800f200:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f204:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800f208:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f20c:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800f210:	f002 84da 	beq.w	8011bc8 <kalman_3gyro.constprop.0+0x4f18>
 800f214:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800f218:	f002 80d0 	beq.w	80113bc <kalman_3gyro.constprop.0+0x470c>
 800f21c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f220:	2a00      	cmp	r2, #0
 800f222:	f042 80d0 	bne.w	80113c6 <kalman_3gyro.constprop.0+0x4716>
 800f226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f228:	a830      	add	r0, sp, #192	; 0xc0
 800f22a:	f04f 31ff 	mov.w	r1, #4294967295
 800f22e:	4613      	mov	r3, r2
 800f230:	edd2 7a00 	vldr	s15, [r2]
 800f234:	3101      	adds	r1, #1
 800f236:	330c      	adds	r3, #12
 800f238:	3204      	adds	r2, #4
 800f23a:	461c      	mov	r4, r3
 800f23c:	ed94 7a00 	vldr	s14, [r4]
 800f240:	330c      	adds	r3, #12
 800f242:	4598      	cmp	r8, r3
 800f244:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f248:	d1f7      	bne.n	800f23a <kalman_3gyro.constprop.0+0x258a>
 800f24a:	2902      	cmp	r1, #2
 800f24c:	ece0 7a01 	vstmia	r0!, {s15}
 800f250:	f108 0804 	add.w	r8, r8, #4
 800f254:	d1eb      	bne.n	800f22e <kalman_3gyro.constprop.0+0x257e>
 800f256:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f170 <kalman_3gyro.constprop.0+0x24c0>
 800f25a:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800f25e:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f262:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800f266:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f268:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800f26c:	ee24 4a27 	vmul.f32	s8, s8, s15
 800f270:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f274:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f278:	460a      	mov	r2, r1
 800f27a:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800f27e:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f282:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f286:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f28a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f292:	f103 030c 	add.w	r3, r3, #12
 800f296:	bf88      	it	hi
 800f298:	eef0 7a47 	vmovhi.f32	s15, s14
 800f29c:	4293      	cmp	r3, r2
 800f29e:	d1f2      	bne.n	800f286 <kalman_3gyro.constprop.0+0x25d6>
 800f2a0:	1d1a      	adds	r2, r3, #4
 800f2a2:	4290      	cmp	r0, r2
 800f2a4:	ece4 7a01 	vstmia	r4!, {s15}
 800f2a8:	d1e9      	bne.n	800f27e <kalman_3gyro.constprop.0+0x25ce>
 800f2aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2ac:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800f2b0:	edd3 7a00 	vldr	s15, [r3]
 800f2b4:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800f2b8:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800f2bc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800f2c0:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800f2c4:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800f2c8:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800f2cc:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800f2d0:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f2d4:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800f2d8:	b14b      	cbz	r3, 800f2ee <kalman_3gyro.constprop.0+0x263e>
 800f2da:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f2de:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f2e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ea:	f102 8553 	bmi.w	8011d94 <kalman_3gyro.constprop.0+0x50e4>
 800f2ee:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800f2f2:	2a1e      	cmp	r2, #30
 800f2f4:	f002 84dd 	beq.w	8011cb2 <kalman_3gyro.constprop.0+0x5002>
 800f2f8:	1c53      	adds	r3, r2, #1
 800f2fa:	2aff      	cmp	r2, #255	; 0xff
 800f2fc:	bf14      	ite	ne
 800f2fe:	b2db      	uxtbne	r3, r3
 800f300:	23ff      	moveq	r3, #255	; 0xff
 800f302:	2200      	movs	r2, #0
 800f304:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800f308:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f30c:	9b01      	ldr	r3, [sp, #4]
 800f30e:	e012      	b.n	800f336 <kalman_3gyro.constprop.0+0x2686>
 800f310:	2301      	movs	r3, #1
 800f312:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800f316:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800f31a:	9181      	str	r1, [sp, #516]	; 0x204
 800f31c:	9282      	str	r2, [sp, #520]	; 0x208
 800f31e:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800f322:	9183      	str	r1, [sp, #524]	; 0x20c
 800f324:	2200      	movs	r2, #0
 800f326:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f32a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f32e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f332:	f88b 2001 	strb.w	r2, [fp, #1]
 800f336:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800f174 <kalman_3gyro.constprop.0+0x24c4>
 800f33a:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f342:	f2c0 875f 	blt.w	8010204 <kalman_3gyro.constprop.0+0x3554>
 800f346:	2200      	movs	r2, #0
 800f348:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f34c:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f350:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f354:	2b01      	cmp	r3, #1
 800f356:	d125      	bne.n	800f3a4 <kalman_3gyro.constprop.0+0x26f4>
 800f358:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f35c:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f360:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f364:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f368:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f36c:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f370:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f374:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f378:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f37c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f380:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f384:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f388:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f38c:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f390:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f394:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f398:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f39c:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f3a0:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f3a4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f3a8:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f3ac:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f3b0:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f3b4:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f3b8:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f3bc:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f3c0:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f3c4:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f3c8:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f3cc:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f3d0:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f3d4:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f3d8:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f3dc:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f3e0:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f3e4:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f3e8:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f3ec:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f3f0:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f3fa:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f3fe:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f402:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f406:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f40a:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f40e:	2500      	movs	r5, #0
 800f410:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f414:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f418:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f41c:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f420:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f424:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f428:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f42c:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f434:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f438:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f43c:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f440:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f444:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f448:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f44c:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f450:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f454:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f458:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f45c:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f460:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f464:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f468:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f46c:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f470:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f474:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f478:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f47c:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800f178 <kalman_3gyro.constprop.0+0x24c8>
 800f480:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f484:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f488:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f48c:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f490:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f494:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f498:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f49c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f4a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f4a4:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f4a8:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f4ac:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f4b0:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f4b4:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f4b8:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f4bc:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f4c0:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f4c4:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f4c8:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f4cc:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f4d0:	e005      	b.n	800f4de <kalman_3gyro.constprop.0+0x282e>
 800f4d2:	3501      	adds	r5, #1
 800f4d4:	2d0c      	cmp	r5, #12
 800f4d6:	f104 0404 	add.w	r4, r4, #4
 800f4da:	f000 84fe 	beq.w	800feda <kalman_3gyro.constprop.0+0x322a>
 800f4de:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d0f5      	beq.n	800f4d2 <kalman_3gyro.constprop.0+0x2822>
 800f4e6:	edd4 da00 	vldr	s27, [r4]
 800f4ea:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f4ee:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f4f2:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f4f6:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f4fa:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f4fe:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f502:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f506:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f50a:	9b01      	ldr	r3, [sp, #4]
 800f50c:	ed89 8a00 	vstr	s16, [r9]
 800f510:	ed89 8a01 	vstr	s16, [r9, #4]
 800f514:	ed89 8a02 	vstr	s16, [r9, #8]
 800f518:	ed89 8a03 	vstr	s16, [r9, #12]
 800f51c:	ed89 8a04 	vstr	s16, [r9, #16]
 800f520:	ed89 8a05 	vstr	s16, [r9, #20]
 800f524:	ed89 8a06 	vstr	s16, [r9, #24]
 800f528:	ed89 8a07 	vstr	s16, [r9, #28]
 800f52c:	ed89 8a08 	vstr	s16, [r9, #32]
 800f530:	464e      	mov	r6, r9
 800f532:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f536:	464a      	mov	r2, r9
 800f538:	ecb3 7a01 	vldmia	r3!, {s14}
 800f53c:	ecf2 7a01 	vldmia	r2!, {s15}
 800f540:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f548:	d006      	beq.n	800f558 <kalman_3gyro.constprop.0+0x28a8>
 800f54a:	eef5 da40 	vcmp.f32	s27, #0.0
 800f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f552:	bf18      	it	ne
 800f554:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f558:	ed93 7a08 	vldr	s14, [r3, #32]
 800f55c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f564:	d006      	beq.n	800f574 <kalman_3gyro.constprop.0+0x28c4>
 800f566:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56e:	bf18      	it	ne
 800f570:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f574:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f578:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f580:	d006      	beq.n	800f590 <kalman_3gyro.constprop.0+0x28e0>
 800f582:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58a:	bf18      	it	ne
 800f58c:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f590:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f594:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59c:	d006      	beq.n	800f5ac <kalman_3gyro.constprop.0+0x28fc>
 800f59e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a6:	bf18      	it	ne
 800f5a8:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f5ac:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f5b0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b8:	d006      	beq.n	800f5c8 <kalman_3gyro.constprop.0+0x2918>
 800f5ba:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c2:	bf18      	it	ne
 800f5c4:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f5c8:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f5cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d4:	d006      	beq.n	800f5e4 <kalman_3gyro.constprop.0+0x2934>
 800f5d6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5de:	bf18      	it	ne
 800f5e0:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f5e4:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f5e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f0:	d006      	beq.n	800f600 <kalman_3gyro.constprop.0+0x2950>
 800f5f2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fa:	bf18      	it	ne
 800f5fc:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f600:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f604:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60c:	d006      	beq.n	800f61c <kalman_3gyro.constprop.0+0x296c>
 800f60e:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f616:	bf18      	it	ne
 800f618:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f61c:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f620:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f628:	d006      	beq.n	800f638 <kalman_3gyro.constprop.0+0x2988>
 800f62a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f632:	bf18      	it	ne
 800f634:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f638:	428b      	cmp	r3, r1
 800f63a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f63e:	f47f af7b 	bne.w	800f538 <kalman_3gyro.constprop.0+0x2888>
 800f642:	eef5 da40 	vcmp.f32	s27, #0.0
 800f646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64a:	edd9 8a00 	vldr	s17, [r9]
 800f64e:	f040 8543 	bne.w	80100d8 <kalman_3gyro.constprop.0+0x3428>
 800f652:	eef0 7a6d 	vmov.f32	s15, s27
 800f656:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65e:	ed99 9a01 	vldr	s18, [r9, #4]
 800f662:	d006      	beq.n	800f672 <kalman_3gyro.constprop.0+0x29c2>
 800f664:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66c:	bf18      	it	ne
 800f66e:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f672:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67a:	edd9 aa02 	vldr	s21, [r9, #8]
 800f67e:	d006      	beq.n	800f68e <kalman_3gyro.constprop.0+0x29de>
 800f680:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f688:	bf18      	it	ne
 800f68a:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f68e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f696:	edd9 ba03 	vldr	s23, [r9, #12]
 800f69a:	d006      	beq.n	800f6aa <kalman_3gyro.constprop.0+0x29fa>
 800f69c:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a4:	bf18      	it	ne
 800f6a6:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f6aa:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b2:	edd9 ca04 	vldr	s25, [r9, #16]
 800f6b6:	d006      	beq.n	800f6c6 <kalman_3gyro.constprop.0+0x2a16>
 800f6b8:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c0:	bf18      	it	ne
 800f6c2:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f6c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ce:	ed99 ca05 	vldr	s24, [r9, #20]
 800f6d2:	d006      	beq.n	800f6e2 <kalman_3gyro.constprop.0+0x2a32>
 800f6d4:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6dc:	bf18      	it	ne
 800f6de:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f6e2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ea:	ed99 da06 	vldr	s26, [r9, #24]
 800f6ee:	d006      	beq.n	800f6fe <kalman_3gyro.constprop.0+0x2a4e>
 800f6f0:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f8:	bf18      	it	ne
 800f6fa:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f6fe:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f706:	ed99 aa07 	vldr	s20, [r9, #28]
 800f70a:	d006      	beq.n	800f71a <kalman_3gyro.constprop.0+0x2a6a>
 800f70c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f714:	bf18      	it	ne
 800f716:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f71a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f722:	ed99 ba08 	vldr	s22, [r9, #32]
 800f726:	d006      	beq.n	800f736 <kalman_3gyro.constprop.0+0x2a86>
 800f728:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f730:	bf18      	it	ne
 800f732:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f736:	ab87      	add	r3, sp, #540	; 0x21c
 800f738:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f73c:	ed92 7a00 	vldr	s14, [r2]
 800f740:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f744:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f748:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f74c:	2d05      	cmp	r5, #5
 800f74e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f752:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f756:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f75a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f75e:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f762:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f766:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f76a:	ee2d da27 	vmul.f32	s26, s26, s15
 800f76e:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f772:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f776:	edc9 8a00 	vstr	s17, [r9]
 800f77a:	ed89 9a01 	vstr	s18, [r9, #4]
 800f77e:	edc9 aa02 	vstr	s21, [r9, #8]
 800f782:	edc9 ba03 	vstr	s23, [r9, #12]
 800f786:	edc9 ca04 	vstr	s25, [r9, #16]
 800f78a:	ed89 ca05 	vstr	s24, [r9, #20]
 800f78e:	ed89 da06 	vstr	s26, [r9, #24]
 800f792:	ed89 aa07 	vstr	s20, [r9, #28]
 800f796:	ed89 ba08 	vstr	s22, [r9, #32]
 800f79a:	f340 8497 	ble.w	80100cc <kalman_3gyro.constprop.0+0x341c>
 800f79e:	eef5 da40 	vcmp.f32	s27, #0.0
 800f7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a6:	f000 8510 	beq.w	80101ca <kalman_3gyro.constprop.0+0x351a>
 800f7aa:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f7ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b6:	d001      	beq.n	800f7bc <kalman_3gyro.constprop.0+0x2b0c>
 800f7b8:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f7bc:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c4:	d008      	beq.n	800f7d8 <kalman_3gyro.constprop.0+0x2b28>
 800f7c6:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f7ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d2:	bf18      	it	ne
 800f7d4:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f7d8:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e0:	d008      	beq.n	800f7f4 <kalman_3gyro.constprop.0+0x2b44>
 800f7e2:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f7e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ee:	bf18      	it	ne
 800f7f0:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f7f4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fc:	d008      	beq.n	800f810 <kalman_3gyro.constprop.0+0x2b60>
 800f7fe:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f802:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80a:	bf18      	it	ne
 800f80c:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f810:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f818:	d008      	beq.n	800f82c <kalman_3gyro.constprop.0+0x2b7c>
 800f81a:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f81e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f826:	bf18      	it	ne
 800f828:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f82c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f834:	d008      	beq.n	800f848 <kalman_3gyro.constprop.0+0x2b98>
 800f836:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f83a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f842:	bf18      	it	ne
 800f844:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f848:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f850:	d008      	beq.n	800f864 <kalman_3gyro.constprop.0+0x2bb4>
 800f852:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f856:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85e:	bf18      	it	ne
 800f860:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f864:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f86c:	d008      	beq.n	800f880 <kalman_3gyro.constprop.0+0x2bd0>
 800f86e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f872:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87a:	bf18      	it	ne
 800f87c:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f880:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f888:	d008      	beq.n	800f89c <kalman_3gyro.constprop.0+0x2bec>
 800f88a:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f88e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f896:	bf18      	it	ne
 800f898:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f89c:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f89e:	4413      	add	r3, r2
 800f8a0:	edd3 9a00 	vldr	s19, [r3]
 800f8a4:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f8a8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	4650      	mov	r0, sl
 800f8b0:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f8b4:	edcd 5a04 	vstr	s11, [sp, #16]
 800f8b8:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f8bc:	edcd 6a02 	vstr	s13, [sp, #8]
 800f8c0:	f008 f828 	bl	8017914 <memset>
 800f8c4:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f8c8:	eddd 5a04 	vldr	s11, [sp, #16]
 800f8cc:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f8d0:	eddd 6a02 	vldr	s13, [sp, #8]
 800f8d4:	4651      	mov	r1, sl
 800f8d6:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f8da:	4653      	mov	r3, sl
 800f8dc:	ecf6 7a01 	vldmia	r6!, {s15}
 800f8e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	d062      	beq.n	800f9b0 <kalman_3gyro.constprop.0+0x2d00>
 800f8ea:	eef5 da40 	vcmp.f32	s27, #0.0
 800f8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f2:	d005      	beq.n	800f900 <kalman_3gyro.constprop.0+0x2c50>
 800f8f4:	ed93 7a00 	vldr	s14, [r3]
 800f8f8:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f8fc:	ed83 7a00 	vstr	s14, [r3]
 800f900:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f908:	d005      	beq.n	800f916 <kalman_3gyro.constprop.0+0x2c66>
 800f90a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f90e:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f912:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f916:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91e:	d005      	beq.n	800f92c <kalman_3gyro.constprop.0+0x2c7c>
 800f920:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f924:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f928:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f92c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f934:	d005      	beq.n	800f942 <kalman_3gyro.constprop.0+0x2c92>
 800f936:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f93a:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f93e:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f942:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94a:	d005      	beq.n	800f958 <kalman_3gyro.constprop.0+0x2ca8>
 800f94c:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f950:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f954:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f958:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f960:	d005      	beq.n	800f96e <kalman_3gyro.constprop.0+0x2cbe>
 800f962:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f966:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f96a:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f96e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f976:	d005      	beq.n	800f984 <kalman_3gyro.constprop.0+0x2cd4>
 800f978:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f97c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f980:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f984:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98c:	d005      	beq.n	800f99a <kalman_3gyro.constprop.0+0x2cea>
 800f98e:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f992:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f996:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f99a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9a2:	d005      	beq.n	800f9b0 <kalman_3gyro.constprop.0+0x2d00>
 800f9a4:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f9a8:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f9ac:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f9b0:	4296      	cmp	r6, r2
 800f9b2:	f103 0304 	add.w	r3, r3, #4
 800f9b6:	d191      	bne.n	800f8dc <kalman_3gyro.constprop.0+0x2c2c>
 800f9b8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f9bc:	4656      	mov	r6, sl
 800f9be:	463b      	mov	r3, r7
 800f9c0:	2208      	movs	r2, #8
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9c8:	e074      	b.n	800fab4 <kalman_3gyro.constprop.0+0x2e04>
 800f9ca:	edd6 7a00 	vldr	s15, [r6]
 800f9ce:	ed83 8a01 	vstr	s16, [r3, #4]
 800f9d2:	eef1 7a67 	vneg.f32	s15, s15
 800f9d6:	2801      	cmp	r0, #1
 800f9d8:	edc6 7a00 	vstr	s15, [r6]
 800f9dc:	f1a2 0c07 	sub.w	ip, r2, #7
 800f9e0:	f000 831e 	beq.w	8010020 <kalman_3gyro.constprop.0+0x3370>
 800f9e4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9e8:	eddc 7a00 	vldr	s15, [ip]
 800f9ec:	ed83 8a02 	vstr	s16, [r3, #8]
 800f9f0:	eef1 7a67 	vneg.f32	s15, s15
 800f9f4:	2802      	cmp	r0, #2
 800f9f6:	edcc 7a00 	vstr	s15, [ip]
 800f9fa:	f1a2 0c06 	sub.w	ip, r2, #6
 800f9fe:	f000 82f8 	beq.w	800fff2 <kalman_3gyro.constprop.0+0x3342>
 800fa02:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa06:	eddc 7a00 	vldr	s15, [ip]
 800fa0a:	ed83 8a03 	vstr	s16, [r3, #12]
 800fa0e:	eef1 7a67 	vneg.f32	s15, s15
 800fa12:	2803      	cmp	r0, #3
 800fa14:	edcc 7a00 	vstr	s15, [ip]
 800fa18:	f1a2 0c05 	sub.w	ip, r2, #5
 800fa1c:	d170      	bne.n	800fb00 <kalman_3gyro.constprop.0+0x2e50>
 800fa1e:	edd6 7a03 	vldr	s15, [r6, #12]
 800fa22:	ed83 8a04 	vstr	s16, [r3, #16]
 800fa26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa2a:	f1a2 0e04 	sub.w	lr, r2, #4
 800fa2e:	edc6 7a03 	vstr	s15, [r6, #12]
 800fa32:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fa36:	edde 7a00 	vldr	s15, [lr]
 800fa3a:	ed83 8a05 	vstr	s16, [r3, #20]
 800fa3e:	eef1 7a67 	vneg.f32	s15, s15
 800fa42:	f1a2 0c03 	sub.w	ip, r2, #3
 800fa46:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa4a:	edce 7a00 	vstr	s15, [lr]
 800fa4e:	eddc 7a00 	vldr	s15, [ip]
 800fa52:	ed83 8a06 	vstr	s16, [r3, #24]
 800fa56:	eef1 7a67 	vneg.f32	s15, s15
 800fa5a:	edcc 7a00 	vstr	s15, [ip]
 800fa5e:	f1a2 0c02 	sub.w	ip, r2, #2
 800fa62:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa66:	eddc 7a00 	vldr	s15, [ip]
 800fa6a:	ed83 8a07 	vstr	s16, [r3, #28]
 800fa6e:	eef1 7a67 	vneg.f32	s15, s15
 800fa72:	2807      	cmp	r0, #7
 800fa74:	edcc 7a00 	vstr	s15, [ip]
 800fa78:	f102 3cff 	add.w	ip, r2, #4294967295
 800fa7c:	f040 80a2 	bne.w	800fbc4 <kalman_3gyro.constprop.0+0x2f14>
 800fa80:	edd6 7a07 	vldr	s15, [r6, #28]
 800fa84:	ed83 8a08 	vstr	s16, [r3, #32]
 800fa88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa8c:	edc6 7a07 	vstr	s15, [r6, #28]
 800fa90:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800fa94:	eddc 7a00 	vldr	s15, [ip]
 800fa98:	3001      	adds	r0, #1
 800fa9a:	eef1 7a67 	vneg.f32	s15, s15
 800fa9e:	2809      	cmp	r0, #9
 800faa0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800faa4:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800faa8:	f102 0209 	add.w	r2, r2, #9
 800faac:	edcc 7a00 	vstr	s15, [ip]
 800fab0:	f000 809f 	beq.w	800fbf2 <kalman_3gyro.constprop.0+0x2f42>
 800fab4:	ed83 8a00 	vstr	s16, [r3]
 800fab8:	2800      	cmp	r0, #0
 800faba:	d186      	bne.n	800f9ca <kalman_3gyro.constprop.0+0x2d1a>
 800fabc:	edda 7a00 	vldr	s15, [sl]
 800fac0:	ed83 8a01 	vstr	s16, [r3, #4]
 800fac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fac8:	f1a2 0e07 	sub.w	lr, r2, #7
 800facc:	edc6 7a00 	vstr	s15, [r6]
 800fad0:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fad4:	edde 7a00 	vldr	s15, [lr]
 800fad8:	ed83 8a02 	vstr	s16, [r3, #8]
 800fadc:	eef1 7a67 	vneg.f32	s15, s15
 800fae0:	f1a2 0c06 	sub.w	ip, r2, #6
 800fae4:	edce 7a00 	vstr	s15, [lr]
 800fae8:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800faec:	eddc 7a00 	vldr	s15, [ip]
 800faf0:	ed83 8a03 	vstr	s16, [r3, #12]
 800faf4:	eef1 7a67 	vneg.f32	s15, s15
 800faf8:	edcc 7a00 	vstr	s15, [ip]
 800fafc:	f1a2 0c05 	sub.w	ip, r2, #5
 800fb00:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb04:	eddc 7a00 	vldr	s15, [ip]
 800fb08:	ed83 8a04 	vstr	s16, [r3, #16]
 800fb0c:	eef1 7a67 	vneg.f32	s15, s15
 800fb10:	2804      	cmp	r0, #4
 800fb12:	edcc 7a00 	vstr	s15, [ip]
 800fb16:	f1a2 0c04 	sub.w	ip, r2, #4
 800fb1a:	d031      	beq.n	800fb80 <kalman_3gyro.constprop.0+0x2ed0>
 800fb1c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb20:	eddc 7a00 	vldr	s15, [ip]
 800fb24:	ed83 8a05 	vstr	s16, [r3, #20]
 800fb28:	eef1 7a67 	vneg.f32	s15, s15
 800fb2c:	2805      	cmp	r0, #5
 800fb2e:	edcc 7a00 	vstr	s15, [ip]
 800fb32:	f1a2 0c03 	sub.w	ip, r2, #3
 800fb36:	f000 8245 	beq.w	800ffc4 <kalman_3gyro.constprop.0+0x3314>
 800fb3a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb3e:	eddc 7a00 	vldr	s15, [ip]
 800fb42:	ed83 8a06 	vstr	s16, [r3, #24]
 800fb46:	eef1 7a67 	vneg.f32	s15, s15
 800fb4a:	2806      	cmp	r0, #6
 800fb4c:	edcc 7a00 	vstr	s15, [ip]
 800fb50:	f1a2 0c02 	sub.w	ip, r2, #2
 800fb54:	d185      	bne.n	800fa62 <kalman_3gyro.constprop.0+0x2db2>
 800fb56:	edd6 7a06 	vldr	s15, [r6, #24]
 800fb5a:	ed83 8a07 	vstr	s16, [r3, #28]
 800fb5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb62:	f102 3cff 	add.w	ip, r2, #4294967295
 800fb66:	edc6 7a06 	vstr	s15, [r6, #24]
 800fb6a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb6e:	eddc 7a00 	vldr	s15, [ip]
 800fb72:	ed83 8a08 	vstr	s16, [r3, #32]
 800fb76:	eef1 7a67 	vneg.f32	s15, s15
 800fb7a:	edcc 7a00 	vstr	s15, [ip]
 800fb7e:	e787      	b.n	800fa90 <kalman_3gyro.constprop.0+0x2de0>
 800fb80:	edd6 7a04 	vldr	s15, [r6, #16]
 800fb84:	ed83 8a05 	vstr	s16, [r3, #20]
 800fb88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb8c:	f1a2 0e03 	sub.w	lr, r2, #3
 800fb90:	edc6 7a04 	vstr	s15, [r6, #16]
 800fb94:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fb98:	edde 7a00 	vldr	s15, [lr]
 800fb9c:	ed83 8a06 	vstr	s16, [r3, #24]
 800fba0:	eef1 7a67 	vneg.f32	s15, s15
 800fba4:	f1a2 0c02 	sub.w	ip, r2, #2
 800fba8:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fbac:	edce 7a00 	vstr	s15, [lr]
 800fbb0:	eddc 7a00 	vldr	s15, [ip]
 800fbb4:	ed83 8a07 	vstr	s16, [r3, #28]
 800fbb8:	eef1 7a67 	vneg.f32	s15, s15
 800fbbc:	edcc 7a00 	vstr	s15, [ip]
 800fbc0:	f102 3cff 	add.w	ip, r2, #4294967295
 800fbc4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fbc8:	eddc 7a00 	vldr	s15, [ip]
 800fbcc:	ed83 8a08 	vstr	s16, [r3, #32]
 800fbd0:	eef1 7a67 	vneg.f32	s15, s15
 800fbd4:	2808      	cmp	r0, #8
 800fbd6:	edcc 7a00 	vstr	s15, [ip]
 800fbda:	f47f af59 	bne.w	800fa90 <kalman_3gyro.constprop.0+0x2de0>
 800fbde:	ed96 7a08 	vldr	s14, [r6, #32]
 800fbe2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbea:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fbee:	edc2 7a00 	vstr	s15, [r2]
 800fbf2:	2000      	movs	r0, #0
 800fbf4:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800fbf8:	ecb1 3a01 	vldmia	r1!, {s6}
 800fbfc:	edd1 3a08 	vldr	s7, [r1, #32]
 800fc00:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800fc04:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800fc08:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800fc0c:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800fc10:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800fc14:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800fc18:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800fc1c:	465a      	mov	r2, fp
 800fc1e:	463b      	mov	r3, r7
 800fc20:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc28:	d00c      	beq.n	800fc44 <kalman_3gyro.constprop.0+0x2f94>
 800fc2a:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800fc2e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc36:	d005      	beq.n	800fc44 <kalman_3gyro.constprop.0+0x2f94>
 800fc38:	edd3 7a00 	vldr	s15, [r3]
 800fc3c:	eee3 7a22 	vfma.f32	s15, s6, s5
 800fc40:	edc3 7a00 	vstr	s15, [r3]
 800fc44:	eef5 3a40 	vcmp.f32	s7, #0.0
 800fc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4c:	d00c      	beq.n	800fc68 <kalman_3gyro.constprop.0+0x2fb8>
 800fc4e:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800fc52:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5a:	d005      	beq.n	800fc68 <kalman_3gyro.constprop.0+0x2fb8>
 800fc5c:	edd3 7a00 	vldr	s15, [r3]
 800fc60:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800fc64:	edc3 7a00 	vstr	s15, [r3]
 800fc68:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800fc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc70:	d00c      	beq.n	800fc8c <kalman_3gyro.constprop.0+0x2fdc>
 800fc72:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800fc76:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7e:	d005      	beq.n	800fc8c <kalman_3gyro.constprop.0+0x2fdc>
 800fc80:	edd3 7a00 	vldr	s15, [r3]
 800fc84:	eee4 7a22 	vfma.f32	s15, s8, s5
 800fc88:	edc3 7a00 	vstr	s15, [r3]
 800fc8c:	eef5 4a40 	vcmp.f32	s9, #0.0
 800fc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc94:	d00c      	beq.n	800fcb0 <kalman_3gyro.constprop.0+0x3000>
 800fc96:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800fc9a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca2:	d005      	beq.n	800fcb0 <kalman_3gyro.constprop.0+0x3000>
 800fca4:	edd3 7a00 	vldr	s15, [r3]
 800fca8:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fcac:	edc3 7a00 	vstr	s15, [r3]
 800fcb0:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fcb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb8:	d00c      	beq.n	800fcd4 <kalman_3gyro.constprop.0+0x3024>
 800fcba:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800fcbe:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc6:	d005      	beq.n	800fcd4 <kalman_3gyro.constprop.0+0x3024>
 800fcc8:	edd3 7a00 	vldr	s15, [r3]
 800fccc:	eee5 7a22 	vfma.f32	s15, s10, s5
 800fcd0:	edc3 7a00 	vstr	s15, [r3]
 800fcd4:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcdc:	d00c      	beq.n	800fcf8 <kalman_3gyro.constprop.0+0x3048>
 800fcde:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800fce2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcea:	d005      	beq.n	800fcf8 <kalman_3gyro.constprop.0+0x3048>
 800fcec:	edd3 7a00 	vldr	s15, [r3]
 800fcf0:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800fcf4:	edc3 7a00 	vstr	s15, [r3]
 800fcf8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	d00c      	beq.n	800fd1c <kalman_3gyro.constprop.0+0x306c>
 800fd02:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800fd06:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0e:	d005      	beq.n	800fd1c <kalman_3gyro.constprop.0+0x306c>
 800fd10:	edd3 7a00 	vldr	s15, [r3]
 800fd14:	eee6 7a22 	vfma.f32	s15, s12, s5
 800fd18:	edc3 7a00 	vstr	s15, [r3]
 800fd1c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd24:	d00c      	beq.n	800fd40 <kalman_3gyro.constprop.0+0x3090>
 800fd26:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800fd2a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd32:	d005      	beq.n	800fd40 <kalman_3gyro.constprop.0+0x3090>
 800fd34:	edd3 7a00 	vldr	s15, [r3]
 800fd38:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800fd3c:	edc3 7a00 	vstr	s15, [r3]
 800fd40:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd48:	d00c      	beq.n	800fd64 <kalman_3gyro.constprop.0+0x30b4>
 800fd4a:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800fd4e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	d005      	beq.n	800fd64 <kalman_3gyro.constprop.0+0x30b4>
 800fd58:	edd3 7a00 	vldr	s15, [r3]
 800fd5c:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fd60:	edc3 7a00 	vstr	s15, [r3]
 800fd64:	3224      	adds	r2, #36	; 0x24
 800fd66:	4296      	cmp	r6, r2
 800fd68:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fd6c:	f47f af58 	bne.w	800fc20 <kalman_3gyro.constprop.0+0x2f70>
 800fd70:	3001      	adds	r0, #1
 800fd72:	2809      	cmp	r0, #9
 800fd74:	f107 0704 	add.w	r7, r7, #4
 800fd78:	f47f af3e 	bne.w	800fbf8 <kalman_3gyro.constprop.0+0x2f48>
 800fd7c:	9801      	ldr	r0, [sp, #4]
 800fd7e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fd82:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fd86:	f007 fd9d 	bl	80178c4 <memcpy>
 800fd8a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd92:	f000 817c 	beq.w	801008e <kalman_3gyro.constprop.0+0x33de>
 800fd96:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	f000 8176 	beq.w	801008e <kalman_3gyro.constprop.0+0x33de>
 800fda2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdaa:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fdae:	f040 8212 	bne.w	80101d6 <kalman_3gyro.constprop.0+0x3526>
 800fdb2:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdba:	f000 8177 	beq.w	80100ac <kalman_3gyro.constprop.0+0x33fc>
 800fdbe:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fdca:	f040 81cb 	bne.w	8010164 <kalman_3gyro.constprop.0+0x34b4>
 800fdce:	eef0 ba47 	vmov.f32	s23, s14
 800fdd2:	eef0 aa49 	vmov.f32	s21, s18
 800fdd6:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdde:	f000 8138 	beq.w	8010052 <kalman_3gyro.constprop.0+0x33a2>
 800fde2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdea:	f000 824e 	beq.w	801028a <kalman_3gyro.constprop.0+0x35da>
 800fdee:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf6:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fdfa:	eef0 7a48 	vmov.f32	s15, s16
 800fdfe:	f040 81c5 	bne.w	801018c <kalman_3gyro.constprop.0+0x34dc>
 800fe02:	eeb0 ca47 	vmov.f32	s24, s14
 800fe06:	eef0 ca67 	vmov.f32	s25, s15
 800fe0a:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fe0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe12:	f000 8179 	beq.w	8010108 <kalman_3gyro.constprop.0+0x3458>
 800fe16:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1e:	f000 8125 	beq.w	801006c <kalman_3gyro.constprop.0+0x33bc>
 800fe22:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fe26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fe2e:	eef0 7a48 	vmov.f32	s15, s16
 800fe32:	f040 81be 	bne.w	80101b2 <kalman_3gyro.constprop.0+0x3502>
 800fe36:	eeb0 aa47 	vmov.f32	s20, s14
 800fe3a:	eeb0 da67 	vmov.f32	s26, s15
 800fe3e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	f000 811f 	beq.w	8010088 <kalman_3gyro.constprop.0+0x33d8>
 800fe4a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fe4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe52:	f000 821d 	beq.w	8010290 <kalman_3gyro.constprop.0+0x35e0>
 800fe56:	eef0 7a48 	vmov.f32	s15, s16
 800fe5a:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fe5e:	eef0 9a67 	vmov.f32	s19, s15
 800fe62:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fe66:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fe6a:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fe6e:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fe72:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fe76:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fe7a:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fe7e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800fe82:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800fe86:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fe8a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fe8e:	ee74 baab 	vadd.f32	s23, s9, s23
 800fe92:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fe96:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fe9a:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fe9e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800fea2:	ee77 9a29 	vadd.f32	s19, s14, s19
 800fea6:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800feaa:	3501      	adds	r5, #1
 800feac:	2d0c      	cmp	r5, #12
 800feae:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800feb2:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800feb6:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800feba:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800febe:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800fec2:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800fec6:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800feca:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800fece:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800fed2:	f104 0404 	add.w	r4, r4, #4
 800fed6:	f47f ab02 	bne.w	800f4de <kalman_3gyro.constprop.0+0x282e>
 800feda:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800fede:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fee2:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fee6:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800feea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800feee:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fef2:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fef6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefe:	f100 81b5 	bmi.w	801026c <kalman_3gyro.constprop.0+0x35bc>
 800ff02:	eef1 4ae7 	vsqrt.f32	s9, s15
 800ff06:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8010298 <kalman_3gyro.constprop.0+0x35e8>
 800ff0a:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800ff0e:	ee67 4a86 	vmul.f32	s9, s15, s12
 800ff12:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800ff16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff1a:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800ff1e:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800ff22:	aa36      	add	r2, sp, #216	; 0xd8
 800ff24:	edc3 4a00 	vstr	s9, [r3]
 800ff28:	edc3 5a01 	vstr	s11, [r3, #4]
 800ff2c:	edc3 7a02 	vstr	s15, [r3, #8]
 800ff30:	ed83 5a03 	vstr	s10, [r3, #12]
 800ff34:	4618      	mov	r0, r3
 800ff36:	4611      	mov	r1, r2
 800ff38:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800ff3c:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800ff40:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800ff44:	f7fb fdbc 	bl	800bac0 <qmult>
 800ff48:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800ff4c:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800ff50:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800ff54:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800ff58:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800ff5c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ff5e:	ee66 7a06 	vmul.f32	s15, s12, s12
 800ff62:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ff66:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ff6a:	ae54      	add	r6, sp, #336	; 0x150
 800ff6c:	af5c      	add	r7, sp, #368	; 0x170
 800ff6e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ff72:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ff76:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800ff7a:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800ff7e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff82:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ff86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ff8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff8e:	edc3 5a00 	vstr	s11, [r3]
 800ff92:	ed83 6a01 	vstr	s12, [r3, #4]
 800ff96:	edc3 6a02 	vstr	s13, [r3, #8]
 800ff9a:	ed83 7a03 	vstr	s14, [r3, #12]
 800ff9e:	4634      	mov	r4, r6
 800ffa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffa2:	42bc      	cmp	r4, r7
 800ffa4:	6028      	str	r0, [r5, #0]
 800ffa6:	6069      	str	r1, [r5, #4]
 800ffa8:	60aa      	str	r2, [r5, #8]
 800ffaa:	60eb      	str	r3, [r5, #12]
 800ffac:	4626      	mov	r6, r4
 800ffae:	f105 0510 	add.w	r5, r5, #16
 800ffb2:	d1f4      	bne.n	800ff9e <kalman_3gyro.constprop.0+0x32ee>
 800ffb4:	6820      	ldr	r0, [r4, #0]
 800ffb6:	6028      	str	r0, [r5, #0]
 800ffb8:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800ffbc:	ecbd 8b10 	vpop	{d8-d15}
 800ffc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc4:	edd6 7a05 	vldr	s15, [r6, #20]
 800ffc8:	ed83 8a06 	vstr	s16, [r3, #24]
 800ffcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffd0:	f1a2 0e02 	sub.w	lr, r2, #2
 800ffd4:	edc6 7a05 	vstr	s15, [r6, #20]
 800ffd8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800ffdc:	edde 7a00 	vldr	s15, [lr]
 800ffe0:	ed83 8a07 	vstr	s16, [r3, #28]
 800ffe4:	eef1 7a67 	vneg.f32	s15, s15
 800ffe8:	f102 3cff 	add.w	ip, r2, #4294967295
 800ffec:	edce 7a00 	vstr	s15, [lr]
 800fff0:	e5bb      	b.n	800fb6a <kalman_3gyro.constprop.0+0x2eba>
 800fff2:	edd6 7a02 	vldr	s15, [r6, #8]
 800fff6:	ed83 8a03 	vstr	s16, [r3, #12]
 800fffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fffe:	f1a2 0c05 	sub.w	ip, r2, #5
 8010002:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 8010006:	edc6 7a02 	vstr	s15, [r6, #8]
 801000a:	eddc 7a00 	vldr	s15, [ip]
 801000e:	ed83 8a04 	vstr	s16, [r3, #16]
 8010012:	eef1 7a67 	vneg.f32	s15, s15
 8010016:	edcc 7a00 	vstr	s15, [ip]
 801001a:	f1a2 0c04 	sub.w	ip, r2, #4
 801001e:	e57d      	b.n	800fb1c <kalman_3gyro.constprop.0+0x2e6c>
 8010020:	edd6 7a01 	vldr	s15, [r6, #4]
 8010024:	ed83 8a02 	vstr	s16, [r3, #8]
 8010028:	ee77 7a67 	vsub.f32	s15, s14, s15
 801002c:	f1a2 0c06 	sub.w	ip, r2, #6
 8010030:	edc6 7a01 	vstr	s15, [r6, #4]
 8010034:	e558      	b.n	800fae8 <kalman_3gyro.constprop.0+0x2e38>
 8010036:	eef5 ca40 	vcmp.f32	s25, #0.0
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	ee69 7aab 	vmul.f32	s15, s19, s23
 8010042:	eeb0 7a48 	vmov.f32	s14, s16
 8010046:	f040 8097 	bne.w	8010178 <kalman_3gyro.constprop.0+0x34c8>
 801004a:	eef0 ca67 	vmov.f32	s25, s15
 801004e:	eef0 ba47 	vmov.f32	s23, s14
 8010052:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8010056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005a:	f43f aed6 	beq.w	800fe0a <kalman_3gyro.constprop.0+0x315a>
 801005e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010066:	d142      	bne.n	80100ee <kalman_3gyro.constprop.0+0x343e>
 8010068:	eeb0 ca69 	vmov.f32	s24, s19
 801006c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8010070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010074:	f040 80ba 	bne.w	80101ec <kalman_3gyro.constprop.0+0x353c>
 8010078:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801007c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010080:	eeb0 da4a 	vmov.f32	s26, s20
 8010084:	f47f aee1 	bne.w	800fe4a <kalman_3gyro.constprop.0+0x319a>
 8010088:	eef0 9a4b 	vmov.f32	s19, s22
 801008c:	e6e9      	b.n	800fe62 <kalman_3gyro.constprop.0+0x31b2>
 801008e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010096:	d051      	beq.n	801013c <kalman_3gyro.constprop.0+0x348c>
 8010098:	eef5 9a40 	vcmp.f32	s19, #0.0
 801009c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a0:	f040 8097 	bne.w	80101d2 <kalman_3gyro.constprop.0+0x3522>
 80100a4:	eef0 aa69 	vmov.f32	s21, s19
 80100a8:	eef0 8a69 	vmov.f32	s17, s19
 80100ac:	eef5 ba40 	vcmp.f32	s23, #0.0
 80100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b4:	f43f ae8f 	beq.w	800fdd6 <kalman_3gyro.constprop.0+0x3126>
 80100b8:	eef5 9a40 	vcmp.f32	s19, #0.0
 80100bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c0:	d1b9      	bne.n	8010036 <kalman_3gyro.constprop.0+0x3386>
 80100c2:	eef0 ca69 	vmov.f32	s25, s19
 80100c6:	eef0 ba69 	vmov.f32	s23, s19
 80100ca:	e7c2      	b.n	8010052 <kalman_3gyro.constprop.0+0x33a2>
 80100cc:	aa7b      	add	r2, sp, #492	; 0x1ec
 80100ce:	4413      	add	r3, r2
 80100d0:	edd3 9a00 	vldr	s19, [r3]
 80100d4:	f7ff bbe8 	b.w	800f8a8 <kalman_3gyro.constprop.0+0x2bf8>
 80100d8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80100dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e0:	bf14      	ite	ne
 80100e2:	ee68 7aad 	vmulne.f32	s15, s17, s27
 80100e6:	eef0 7a68 	vmoveq.f32	s15, s17
 80100ea:	f7ff bab4 	b.w	800f656 <kalman_3gyro.constprop.0+0x29a6>
 80100ee:	eeb5 da40 	vcmp.f32	s26, #0.0
 80100f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f6:	ee69 7a8c 	vmul.f32	s15, s19, s24
 80100fa:	eeb0 7a48 	vmov.f32	s14, s16
 80100fe:	d14e      	bne.n	801019e <kalman_3gyro.constprop.0+0x34ee>
 8010100:	eeb0 da67 	vmov.f32	s26, s15
 8010104:	eeb0 ca47 	vmov.f32	s24, s14
 8010108:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010110:	f43f ae95 	beq.w	800fe3e <kalman_3gyro.constprop.0+0x318e>
 8010114:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011c:	f000 84bd 	beq.w	8010a9a <kalman_3gyro.constprop.0+0x3dea>
 8010120:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8010124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010128:	ee69 7a8a 	vmul.f32	s15, s19, s20
 801012c:	eeb0 7a48 	vmov.f32	s14, s16
 8010130:	d148      	bne.n	80101c4 <kalman_3gyro.constprop.0+0x3514>
 8010132:	eef0 9a67 	vmov.f32	s19, s15
 8010136:	eeb0 aa47 	vmov.f32	s20, s14
 801013a:	e692      	b.n	800fe62 <kalman_3gyro.constprop.0+0x31b2>
 801013c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8010140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010144:	d05b      	beq.n	80101fe <kalman_3gyro.constprop.0+0x354e>
 8010146:	eef5 9a40 	vcmp.f32	s19, #0.0
 801014a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014e:	d0a9      	beq.n	80100a4 <kalman_3gyro.constprop.0+0x33f4>
 8010150:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010158:	ee29 7aaa 	vmul.f32	s14, s19, s21
 801015c:	eef0 8a49 	vmov.f32	s17, s18
 8010160:	f43f ae35 	beq.w	800fdce <kalman_3gyro.constprop.0+0x311e>
 8010164:	eef5 ca40 	vcmp.f32	s25, #0.0
 8010168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016c:	ee69 7aab 	vmul.f32	s15, s19, s23
 8010170:	eef0 aa49 	vmov.f32	s21, s18
 8010174:	f43f af69 	beq.w	801004a <kalman_3gyro.constprop.0+0x339a>
 8010178:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801017c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010180:	eef0 ba47 	vmov.f32	s23, s14
 8010184:	ee29 7aac 	vmul.f32	s14, s19, s25
 8010188:	f43f ae3b 	beq.w	800fe02 <kalman_3gyro.constprop.0+0x3152>
 801018c:	eeb5 da40 	vcmp.f32	s26, #0.0
 8010190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010194:	eef0 ca67 	vmov.f32	s25, s15
 8010198:	ee69 7a8c 	vmul.f32	s15, s19, s24
 801019c:	d0b0      	beq.n	8010100 <kalman_3gyro.constprop.0+0x3450>
 801019e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80101a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a6:	eeb0 ca47 	vmov.f32	s24, s14
 80101aa:	ee29 7a8d 	vmul.f32	s14, s19, s26
 80101ae:	f43f ae42 	beq.w	800fe36 <kalman_3gyro.constprop.0+0x3186>
 80101b2:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80101b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ba:	eeb0 da67 	vmov.f32	s26, s15
 80101be:	ee69 7a8a 	vmul.f32	s15, s19, s20
 80101c2:	d0b6      	beq.n	8010132 <kalman_3gyro.constprop.0+0x3482>
 80101c4:	eeb0 aa47 	vmov.f32	s20, s14
 80101c8:	e647      	b.n	800fe5a <kalman_3gyro.constprop.0+0x31aa>
 80101ca:	eef0 7a6d 	vmov.f32	s15, s27
 80101ce:	f7ff baf5 	b.w	800f7bc <kalman_3gyro.constprop.0+0x2b0c>
 80101d2:	eef0 8a48 	vmov.f32	s17, s16
 80101d6:	eef5 aa40 	vcmp.f32	s21, #0.0
 80101da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101de:	ee29 9a29 	vmul.f32	s18, s18, s19
 80101e2:	f47f adec 	bne.w	800fdbe <kalman_3gyro.constprop.0+0x310e>
 80101e6:	eef0 aa49 	vmov.f32	s21, s18
 80101ea:	e75f      	b.n	80100ac <kalman_3gyro.constprop.0+0x33fc>
 80101ec:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8010298 <kalman_3gyro.constprop.0+0x35e8>
 80101f0:	eef0 9a48 	vmov.f32	s19, s16
 80101f4:	eeb0 aa48 	vmov.f32	s20, s16
 80101f8:	eeb0 da48 	vmov.f32	s26, s16
 80101fc:	e631      	b.n	800fe62 <kalman_3gyro.constprop.0+0x31b2>
 80101fe:	eef0 8a6a 	vmov.f32	s17, s21
 8010202:	e753      	b.n	80100ac <kalman_3gyro.constprop.0+0x33fc>
 8010204:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 8010208:	2a31      	cmp	r2, #49	; 0x31
 801020a:	f63f a8a3 	bhi.w	800f354 <kalman_3gyro.constprop.0+0x26a4>
 801020e:	2100      	movs	r1, #0
 8010210:	3201      	adds	r2, #1
 8010212:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8010216:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 801021a:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 801021e:	f7ff b899 	b.w	800f354 <kalman_3gyro.constprop.0+0x26a4>
 8010222:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 8010226:	2b00      	cmp	r3, #0
 8010228:	f340 8423 	ble.w	8010a72 <kalman_3gyro.constprop.0+0x3dc2>
 801022c:	3b01      	subs	r3, #1
 801022e:	2200      	movs	r2, #0
 8010230:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8010234:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 8010238:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 801023c:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 8010240:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 8010244:	f7fe bca9 	b.w	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 8010248:	f89b 200d 	ldrb.w	r2, [fp, #13]
 801024c:	f89b 100e 	ldrb.w	r1, [fp, #14]
 8010250:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8010254:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8010258:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 801025c:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8010260:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8010264:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8010268:	f7fe bc18 	b.w	800ea9c <kalman_3gyro.constprop.0+0x1dec>
 801026c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010270:	eef0 4a46 	vmov.f32	s9, s12
 8010274:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8010278:	eef0 7a47 	vmov.f32	s15, s14
 801027c:	eef0 5a66 	vmov.f32	s11, s13
 8010280:	e64b      	b.n	800ff1a <kalman_3gyro.constprop.0+0x326a>
 8010282:	eeb1 7a47 	vneg.f32	s14, s14
 8010286:	f7fd bc66 	b.w	800db56 <kalman_3gyro.constprop.0+0xea6>
 801028a:	eef0 ca69 	vmov.f32	s25, s19
 801028e:	e6e0      	b.n	8010052 <kalman_3gyro.constprop.0+0x33a2>
 8010290:	eeb0 ba69 	vmov.f32	s22, s19
 8010294:	e5e5      	b.n	800fe62 <kalman_3gyro.constprop.0+0x31b2>
 8010296:	bf00      	nop
 8010298:	00000000 	.word	0x00000000
 801029c:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 80102a0:	49dc      	ldr	r1, [pc, #880]	; (8010614 <kalman_3gyro.constprop.0+0x3964>)
 80102a2:	4bdd      	ldr	r3, [pc, #884]	; (8010618 <kalman_3gyro.constprop.0+0x3968>)
 80102a4:	4add      	ldr	r2, [pc, #884]	; (801061c <kalman_3gyro.constprop.0+0x396c>)
 80102a6:	2000      	movs	r0, #0
 80102a8:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 80102ac:	6029      	str	r1, [r5, #0]
 80102ae:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 80102b2:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 80102b6:	6002      	str	r2, [r0, #0]
 80102b8:	600b      	str	r3, [r1, #0]
 80102ba:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 80102be:	9004      	str	r0, [sp, #16]
 80102c0:	9110      	str	r1, [sp, #64]	; 0x40
 80102c2:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f000 80b4 	beq.w	8010434 <kalman_3gyro.constprop.0+0x3784>
 80102cc:	240c      	movs	r4, #12
 80102ce:	eddf bad4 	vldr	s23, [pc, #848]	; 8010620 <kalman_3gyro.constprop.0+0x3970>
 80102d2:	ed9f bad4 	vldr	s22, [pc, #848]	; 8010624 <kalman_3gyro.constprop.0+0x3974>
 80102d6:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8010628 <kalman_3gyro.constprop.0+0x3978>
 80102da:	ed9f aad4 	vldr	s20, [pc, #848]	; 801062c <kalman_3gyro.constprop.0+0x397c>
 80102de:	eddf aad4 	vldr	s21, [pc, #848]	; 8010630 <kalman_3gyro.constprop.0+0x3980>
 80102e2:	9f08      	ldr	r7, [sp, #32]
 80102e4:	fb14 8403 	smlabb	r4, r4, r3, r8
 80102e8:	4646      	mov	r6, r8
 80102ea:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80102ee:	e06b      	b.n	80103c8 <kalman_3gyro.constprop.0+0x3718>
 80102f0:	eeb4 7aca 	vcmpe.f32	s14, s20
 80102f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f8:	f300 815a 	bgt.w	80105b0 <kalman_3gyro.constprop.0+0x3900>
 80102fc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010300:	ee17 0a90 	vmov	r0, s15
 8010304:	f7f0 f920 	bl	8000548 <__aeabi_f2d>
 8010308:	ec41 0b10 	vmov	d0, r0, r1
 801030c:	f005 fb94 	bl	8015a38 <ceil>
 8010310:	ec51 0b10 	vmov	r0, r1, d0
 8010314:	f7f0 fc48 	bl	8000ba8 <__aeabi_d2f>
 8010318:	ee07 0a90 	vmov	s15, r0
 801031c:	edc6 7a00 	vstr	s15, [r6]
 8010320:	ed97 7a01 	vldr	s14, [r7, #4]
 8010324:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010328:	eef0 6ae7 	vabs.f32	s13, s15
 801032c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010334:	d51b      	bpl.n	801036e <kalman_3gyro.constprop.0+0x36be>
 8010336:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801033a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801033e:	f280 8120 	bge.w	8010582 <kalman_3gyro.constprop.0+0x38d2>
 8010342:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801034a:	f300 812e 	bgt.w	80105aa <kalman_3gyro.constprop.0+0x38fa>
 801034e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010352:	ee17 0a90 	vmov	r0, s15
 8010356:	f7f0 f8f7 	bl	8000548 <__aeabi_f2d>
 801035a:	ec41 0b10 	vmov	d0, r0, r1
 801035e:	f005 fb6b 	bl	8015a38 <ceil>
 8010362:	ec51 0b10 	vmov	r0, r1, d0
 8010366:	f7f0 fc1f 	bl	8000ba8 <__aeabi_d2f>
 801036a:	ee07 0a90 	vmov	s15, r0
 801036e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010372:	ed97 7a02 	vldr	s14, [r7, #8]
 8010376:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801037a:	eef0 6ae7 	vabs.f32	s13, s15
 801037e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010386:	d51a      	bpl.n	80103be <kalman_3gyro.constprop.0+0x370e>
 8010388:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801038c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010390:	da3b      	bge.n	801040a <kalman_3gyro.constprop.0+0x375a>
 8010392:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039a:	f300 8103 	bgt.w	80105a4 <kalman_3gyro.constprop.0+0x38f4>
 801039e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80103a2:	ee17 0a90 	vmov	r0, s15
 80103a6:	f7f0 f8cf 	bl	8000548 <__aeabi_f2d>
 80103aa:	ec41 0b10 	vmov	d0, r0, r1
 80103ae:	f005 fb43 	bl	8015a38 <ceil>
 80103b2:	ec51 0b10 	vmov	r0, r1, d0
 80103b6:	f7f0 fbf7 	bl	8000ba8 <__aeabi_d2f>
 80103ba:	ee07 0a90 	vmov	s15, r0
 80103be:	edc6 7a02 	vstr	s15, [r6, #8]
 80103c2:	360c      	adds	r6, #12
 80103c4:	42b4      	cmp	r4, r6
 80103c6:	d035      	beq.n	8010434 <kalman_3gyro.constprop.0+0x3784>
 80103c8:	ed97 7a00 	vldr	s14, [r7]
 80103cc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80103d0:	eef0 6ae7 	vabs.f32	s13, s15
 80103d4:	eef4 6acb 	vcmpe.f32	s13, s22
 80103d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103dc:	d59e      	bpl.n	801031c <kalman_3gyro.constprop.0+0x366c>
 80103de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80103e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e6:	db83      	blt.n	80102f0 <kalman_3gyro.constprop.0+0x3640>
 80103e8:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103ec:	ee17 0a90 	vmov	r0, s15
 80103f0:	f7f0 f8aa 	bl	8000548 <__aeabi_f2d>
 80103f4:	ec41 0b10 	vmov	d0, r0, r1
 80103f8:	f005 fba2 	bl	8015b40 <floor>
 80103fc:	ec51 0b10 	vmov	r0, r1, d0
 8010400:	f7f0 fbd2 	bl	8000ba8 <__aeabi_d2f>
 8010404:	ee07 0a90 	vmov	s15, r0
 8010408:	e788      	b.n	801031c <kalman_3gyro.constprop.0+0x366c>
 801040a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801040e:	360c      	adds	r6, #12
 8010410:	ee17 0a90 	vmov	r0, s15
 8010414:	f7f0 f898 	bl	8000548 <__aeabi_f2d>
 8010418:	ec41 0b10 	vmov	d0, r0, r1
 801041c:	f005 fb90 	bl	8015b40 <floor>
 8010420:	ec51 0b10 	vmov	r0, r1, d0
 8010424:	f7f0 fbc0 	bl	8000ba8 <__aeabi_d2f>
 8010428:	ee07 0a90 	vmov	s15, r0
 801042c:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010430:	42b4      	cmp	r4, r6
 8010432:	d1c9      	bne.n	80103c8 <kalman_3gyro.constprop.0+0x3718>
 8010434:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8010438:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 801043c:	2b00      	cmp	r3, #0
 801043e:	f000 80cf 	beq.w	80105e0 <kalman_3gyro.constprop.0+0x3930>
 8010442:	240c      	movs	r4, #12
 8010444:	eddf ba7b 	vldr	s23, [pc, #492]	; 8010634 <kalman_3gyro.constprop.0+0x3984>
 8010448:	ed9f ba76 	vldr	s22, [pc, #472]	; 8010624 <kalman_3gyro.constprop.0+0x3974>
 801044c:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8010638 <kalman_3gyro.constprop.0+0x3988>
 8010450:	ed9f aa7a 	vldr	s20, [pc, #488]	; 801063c <kalman_3gyro.constprop.0+0x398c>
 8010454:	eddf aa76 	vldr	s21, [pc, #472]	; 8010630 <kalman_3gyro.constprop.0+0x3980>
 8010458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801045c:	fb14 7403 	smlabb	r4, r4, r3, r7
 8010460:	463e      	mov	r6, r7
 8010462:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010466:	e06b      	b.n	8010540 <kalman_3gyro.constprop.0+0x3890>
 8010468:	eeb4 7aca 	vcmpe.f32	s14, s20
 801046c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010470:	f300 81a2 	bgt.w	80107b8 <kalman_3gyro.constprop.0+0x3b08>
 8010474:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010478:	ee17 0a90 	vmov	r0, s15
 801047c:	f7f0 f864 	bl	8000548 <__aeabi_f2d>
 8010480:	ec41 0b10 	vmov	d0, r0, r1
 8010484:	f005 fad8 	bl	8015a38 <ceil>
 8010488:	ec51 0b10 	vmov	r0, r1, d0
 801048c:	f7f0 fb8c 	bl	8000ba8 <__aeabi_d2f>
 8010490:	ee07 0a90 	vmov	s15, r0
 8010494:	edc6 7a00 	vstr	s15, [r6]
 8010498:	ed99 7a04 	vldr	s14, [r9, #16]
 801049c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80104a0:	eef0 6ae7 	vabs.f32	s13, s15
 80104a4:	eef4 6acb 	vcmpe.f32	s13, s22
 80104a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ac:	d51b      	bpl.n	80104e6 <kalman_3gyro.constprop.0+0x3836>
 80104ae:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80104b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b6:	f280 8168 	bge.w	801078a <kalman_3gyro.constprop.0+0x3ada>
 80104ba:	eeb4 7aca 	vcmpe.f32	s14, s20
 80104be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c2:	f300 8176 	bgt.w	80107b2 <kalman_3gyro.constprop.0+0x3b02>
 80104c6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104ca:	ee17 0a90 	vmov	r0, s15
 80104ce:	f7f0 f83b 	bl	8000548 <__aeabi_f2d>
 80104d2:	ec41 0b10 	vmov	d0, r0, r1
 80104d6:	f005 faaf 	bl	8015a38 <ceil>
 80104da:	ec51 0b10 	vmov	r0, r1, d0
 80104de:	f7f0 fb63 	bl	8000ba8 <__aeabi_d2f>
 80104e2:	ee07 0a90 	vmov	s15, r0
 80104e6:	edc6 7a01 	vstr	s15, [r6, #4]
 80104ea:	ed99 7a05 	vldr	s14, [r9, #20]
 80104ee:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80104f2:	eef0 6ae7 	vabs.f32	s13, s15
 80104f6:	eef4 6acb 	vcmpe.f32	s13, s22
 80104fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fe:	d51a      	bpl.n	8010536 <kalman_3gyro.constprop.0+0x3886>
 8010500:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010508:	da55      	bge.n	80105b6 <kalman_3gyro.constprop.0+0x3906>
 801050a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801050e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010512:	f300 814b 	bgt.w	80107ac <kalman_3gyro.constprop.0+0x3afc>
 8010516:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801051a:	ee17 0a90 	vmov	r0, s15
 801051e:	f7f0 f813 	bl	8000548 <__aeabi_f2d>
 8010522:	ec41 0b10 	vmov	d0, r0, r1
 8010526:	f005 fa87 	bl	8015a38 <ceil>
 801052a:	ec51 0b10 	vmov	r0, r1, d0
 801052e:	f7f0 fb3b 	bl	8000ba8 <__aeabi_d2f>
 8010532:	ee07 0a90 	vmov	s15, r0
 8010536:	edc6 7a02 	vstr	s15, [r6, #8]
 801053a:	360c      	adds	r6, #12
 801053c:	42b4      	cmp	r4, r6
 801053e:	d04f      	beq.n	80105e0 <kalman_3gyro.constprop.0+0x3930>
 8010540:	ed99 7a03 	vldr	s14, [r9, #12]
 8010544:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010548:	eef0 6ae7 	vabs.f32	s13, s15
 801054c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010554:	d59e      	bpl.n	8010494 <kalman_3gyro.constprop.0+0x37e4>
 8010556:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801055e:	db83      	blt.n	8010468 <kalman_3gyro.constprop.0+0x37b8>
 8010560:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010564:	ee17 0a90 	vmov	r0, s15
 8010568:	f7ef ffee 	bl	8000548 <__aeabi_f2d>
 801056c:	ec41 0b10 	vmov	d0, r0, r1
 8010570:	f005 fae6 	bl	8015b40 <floor>
 8010574:	ec51 0b10 	vmov	r0, r1, d0
 8010578:	f7f0 fb16 	bl	8000ba8 <__aeabi_d2f>
 801057c:	ee07 0a90 	vmov	s15, r0
 8010580:	e788      	b.n	8010494 <kalman_3gyro.constprop.0+0x37e4>
 8010582:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010586:	ee17 0a90 	vmov	r0, s15
 801058a:	f7ef ffdd 	bl	8000548 <__aeabi_f2d>
 801058e:	ec41 0b10 	vmov	d0, r0, r1
 8010592:	f005 fad5 	bl	8015b40 <floor>
 8010596:	ec51 0b10 	vmov	r0, r1, d0
 801059a:	f7f0 fb05 	bl	8000ba8 <__aeabi_d2f>
 801059e:	ee07 0a90 	vmov	s15, r0
 80105a2:	e6e4      	b.n	801036e <kalman_3gyro.constprop.0+0x36be>
 80105a4:	eef0 7a6a 	vmov.f32	s15, s21
 80105a8:	e709      	b.n	80103be <kalman_3gyro.constprop.0+0x370e>
 80105aa:	eef0 7a6a 	vmov.f32	s15, s21
 80105ae:	e6de      	b.n	801036e <kalman_3gyro.constprop.0+0x36be>
 80105b0:	eef0 7a6a 	vmov.f32	s15, s21
 80105b4:	e6b2      	b.n	801031c <kalman_3gyro.constprop.0+0x366c>
 80105b6:	ee77 7a89 	vadd.f32	s15, s15, s18
 80105ba:	360c      	adds	r6, #12
 80105bc:	ee17 0a90 	vmov	r0, s15
 80105c0:	f7ef ffc2 	bl	8000548 <__aeabi_f2d>
 80105c4:	ec41 0b10 	vmov	d0, r0, r1
 80105c8:	f005 faba 	bl	8015b40 <floor>
 80105cc:	ec51 0b10 	vmov	r0, r1, d0
 80105d0:	f7f0 faea 	bl	8000ba8 <__aeabi_d2f>
 80105d4:	ee07 0a90 	vmov	s15, r0
 80105d8:	ed46 7a01 	vstr	s15, [r6, #-4]
 80105dc:	42b4      	cmp	r4, r6
 80105de:	d1af      	bne.n	8010540 <kalman_3gyro.constprop.0+0x3890>
 80105e0:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f43c ac7e 	beq.w	800cee6 <kalman_3gyro.constprop.0+0x236>
 80105ea:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 80105ee:	240c      	movs	r4, #12
 80105f0:	eddf ba13 	vldr	s23, [pc, #76]	; 8010640 <kalman_3gyro.constprop.0+0x3990>
 80105f4:	ed9f ba0b 	vldr	s22, [pc, #44]	; 8010624 <kalman_3gyro.constprop.0+0x3974>
 80105f8:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8010644 <kalman_3gyro.constprop.0+0x3994>
 80105fc:	ed9f aa12 	vldr	s20, [pc, #72]	; 8010648 <kalman_3gyro.constprop.0+0x3998>
 8010600:	eddf aa0b 	vldr	s21, [pc, #44]	; 8010630 <kalman_3gyro.constprop.0+0x3980>
 8010604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010608:	960f      	str	r6, [sp, #60]	; 0x3c
 801060a:	fb14 6403 	smlabb	r4, r4, r3, r6
 801060e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010612:	e099      	b.n	8010748 <kalman_3gyro.constprop.0+0x3a98>
 8010614:	3a7001e0 	.word	0x3a7001e0
 8010618:	3a8c0118 	.word	0x3a8c0118
 801061c:	3a000100 	.word	0x3a000100
 8010620:	44888777 	.word	0x44888777
 8010624:	4b000000 	.word	0x4b000000
 8010628:	39f001e1 	.word	0x39f001e1
 801062c:	b9f001e1 	.word	0xb9f001e1
 8010630:	80000000 	.word	0x80000000
 8010634:	44fffe00 	.word	0x44fffe00
 8010638:	39800100 	.word	0x39800100
 801063c:	b9800100 	.word	0xb9800100
 8010640:	446a0ccd 	.word	0x446a0ccd
 8010644:	3a0c0118 	.word	0x3a0c0118
 8010648:	ba0c0118 	.word	0xba0c0118
 801064c:	bf666666 	.word	0xbf666666
 8010650:	3d072b02 	.word	0x3d072b02
 8010654:	3cb43958 	.word	0x3cb43958
 8010658:	3cf5c28f 	.word	0x3cf5c28f
 801065c:	3d75c28f 	.word	0x3d75c28f
 8010660:	3d23d70a 	.word	0x3d23d70a
 8010664:	3ca3d70a 	.word	0x3ca3d70a
 8010668:	3d4ccccd 	.word	0x3d4ccccd
 801066c:	3d8f5c29 	.word	0x3d8f5c29
 8010670:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010678:	f300 80c6 	bgt.w	8010808 <kalman_3gyro.constprop.0+0x3b58>
 801067c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010680:	ee17 0a90 	vmov	r0, s15
 8010684:	f7ef ff60 	bl	8000548 <__aeabi_f2d>
 8010688:	ec41 0b10 	vmov	d0, r0, r1
 801068c:	f005 f9d4 	bl	8015a38 <ceil>
 8010690:	ec51 0b10 	vmov	r0, r1, d0
 8010694:	f7f0 fa88 	bl	8000ba8 <__aeabi_d2f>
 8010698:	ee07 0a90 	vmov	s15, r0
 801069c:	edc6 7a00 	vstr	s15, [r6]
 80106a0:	ed99 7a07 	vldr	s14, [r9, #28]
 80106a4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80106a8:	eef0 6ae7 	vabs.f32	s13, s15
 80106ac:	eef4 6acb 	vcmpe.f32	s13, s22
 80106b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b4:	d51b      	bpl.n	80106ee <kalman_3gyro.constprop.0+0x3a3e>
 80106b6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80106ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106be:	f280 808f 	bge.w	80107e0 <kalman_3gyro.constprop.0+0x3b30>
 80106c2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80106c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ca:	f300 809a 	bgt.w	8010802 <kalman_3gyro.constprop.0+0x3b52>
 80106ce:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80106d2:	ee17 0a90 	vmov	r0, s15
 80106d6:	f7ef ff37 	bl	8000548 <__aeabi_f2d>
 80106da:	ec41 0b10 	vmov	d0, r0, r1
 80106de:	f005 f9ab 	bl	8015a38 <ceil>
 80106e2:	ec51 0b10 	vmov	r0, r1, d0
 80106e6:	f7f0 fa5f 	bl	8000ba8 <__aeabi_d2f>
 80106ea:	ee07 0a90 	vmov	s15, r0
 80106ee:	edc6 7a01 	vstr	s15, [r6, #4]
 80106f2:	ed99 7a08 	vldr	s14, [r9, #32]
 80106f6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80106fa:	eef0 6ae7 	vabs.f32	s13, s15
 80106fe:	eef4 6acb 	vcmpe.f32	s13, s22
 8010702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010706:	d519      	bpl.n	801073c <kalman_3gyro.constprop.0+0x3a8c>
 8010708:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010710:	da55      	bge.n	80107be <kalman_3gyro.constprop.0+0x3b0e>
 8010712:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071a:	dc78      	bgt.n	801080e <kalman_3gyro.constprop.0+0x3b5e>
 801071c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010720:	ee17 0a90 	vmov	r0, s15
 8010724:	f7ef ff10 	bl	8000548 <__aeabi_f2d>
 8010728:	ec41 0b10 	vmov	d0, r0, r1
 801072c:	f005 f984 	bl	8015a38 <ceil>
 8010730:	ec51 0b10 	vmov	r0, r1, d0
 8010734:	f7f0 fa38 	bl	8000ba8 <__aeabi_d2f>
 8010738:	ee07 0a90 	vmov	s15, r0
 801073c:	edc6 7a02 	vstr	s15, [r6, #8]
 8010740:	360c      	adds	r6, #12
 8010742:	42b4      	cmp	r4, r6
 8010744:	f43c abd2 	beq.w	800ceec <kalman_3gyro.constprop.0+0x23c>
 8010748:	ed99 7a06 	vldr	s14, [r9, #24]
 801074c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010750:	eef0 6ae7 	vabs.f32	s13, s15
 8010754:	eef4 6acb 	vcmpe.f32	s13, s22
 8010758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801075c:	d59e      	bpl.n	801069c <kalman_3gyro.constprop.0+0x39ec>
 801075e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010766:	db83      	blt.n	8010670 <kalman_3gyro.constprop.0+0x39c0>
 8010768:	ee77 7a89 	vadd.f32	s15, s15, s18
 801076c:	ee17 0a90 	vmov	r0, s15
 8010770:	f7ef feea 	bl	8000548 <__aeabi_f2d>
 8010774:	ec41 0b10 	vmov	d0, r0, r1
 8010778:	f005 f9e2 	bl	8015b40 <floor>
 801077c:	ec51 0b10 	vmov	r0, r1, d0
 8010780:	f7f0 fa12 	bl	8000ba8 <__aeabi_d2f>
 8010784:	ee07 0a90 	vmov	s15, r0
 8010788:	e788      	b.n	801069c <kalman_3gyro.constprop.0+0x39ec>
 801078a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801078e:	ee17 0a90 	vmov	r0, s15
 8010792:	f7ef fed9 	bl	8000548 <__aeabi_f2d>
 8010796:	ec41 0b10 	vmov	d0, r0, r1
 801079a:	f005 f9d1 	bl	8015b40 <floor>
 801079e:	ec51 0b10 	vmov	r0, r1, d0
 80107a2:	f7f0 fa01 	bl	8000ba8 <__aeabi_d2f>
 80107a6:	ee07 0a90 	vmov	s15, r0
 80107aa:	e69c      	b.n	80104e6 <kalman_3gyro.constprop.0+0x3836>
 80107ac:	eef0 7a6a 	vmov.f32	s15, s21
 80107b0:	e6c1      	b.n	8010536 <kalman_3gyro.constprop.0+0x3886>
 80107b2:	eef0 7a6a 	vmov.f32	s15, s21
 80107b6:	e696      	b.n	80104e6 <kalman_3gyro.constprop.0+0x3836>
 80107b8:	eef0 7a6a 	vmov.f32	s15, s21
 80107bc:	e66a      	b.n	8010494 <kalman_3gyro.constprop.0+0x37e4>
 80107be:	ee77 7a89 	vadd.f32	s15, s15, s18
 80107c2:	ee17 0a90 	vmov	r0, s15
 80107c6:	f7ef febf 	bl	8000548 <__aeabi_f2d>
 80107ca:	ec41 0b10 	vmov	d0, r0, r1
 80107ce:	f005 f9b7 	bl	8015b40 <floor>
 80107d2:	ec51 0b10 	vmov	r0, r1, d0
 80107d6:	f7f0 f9e7 	bl	8000ba8 <__aeabi_d2f>
 80107da:	ee07 0a90 	vmov	s15, r0
 80107de:	e7ad      	b.n	801073c <kalman_3gyro.constprop.0+0x3a8c>
 80107e0:	ee77 7a89 	vadd.f32	s15, s15, s18
 80107e4:	ee17 0a90 	vmov	r0, s15
 80107e8:	f7ef feae 	bl	8000548 <__aeabi_f2d>
 80107ec:	ec41 0b10 	vmov	d0, r0, r1
 80107f0:	f005 f9a6 	bl	8015b40 <floor>
 80107f4:	ec51 0b10 	vmov	r0, r1, d0
 80107f8:	f7f0 f9d6 	bl	8000ba8 <__aeabi_d2f>
 80107fc:	ee07 0a90 	vmov	s15, r0
 8010800:	e775      	b.n	80106ee <kalman_3gyro.constprop.0+0x3a3e>
 8010802:	eef0 7a6a 	vmov.f32	s15, s21
 8010806:	e772      	b.n	80106ee <kalman_3gyro.constprop.0+0x3a3e>
 8010808:	eef0 7a6a 	vmov.f32	s15, s21
 801080c:	e746      	b.n	801069c <kalman_3gyro.constprop.0+0x39ec>
 801080e:	eef0 7a6a 	vmov.f32	s15, s21
 8010812:	e793      	b.n	801073c <kalman_3gyro.constprop.0+0x3a8c>
 8010814:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8010816:	7813      	ldrb	r3, [r2, #0]
 8010818:	ed92 7a03 	vldr	s14, [r2, #12]
 801081c:	edd2 6a01 	vldr	s13, [r2, #4]
 8010820:	edd2 7a02 	vldr	s15, [r2, #8]
 8010824:	2200      	movs	r2, #0
 8010826:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 801082a:	2b00      	cmp	r3, #0
 801082c:	f040 813b 	bne.w	8010aa6 <kalman_3gyro.constprop.0+0x3df6>
 8010830:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 801064c <kalman_3gyro.constprop.0+0x399c>
 8010834:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8010838:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 801083c:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8010840:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 8010844:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010848:	2100      	movs	r1, #0
 801084a:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 801084e:	f007 f861 	bl	8017914 <memset>
 8010852:	eddb 7a02 	vldr	s15, [fp, #8]
 8010856:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 8010650 <kalman_3gyro.constprop.0+0x39a0>
 801085a:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 8010654 <kalman_3gyro.constprop.0+0x39a4>
 801085e:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8010658 <kalman_3gyro.constprop.0+0x39a8>
 8010862:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 801065c <kalman_3gyro.constprop.0+0x39ac>
 8010866:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8010660 <kalman_3gyro.constprop.0+0x39b0>
 801086a:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8010664 <kalman_3gyro.constprop.0+0x39b4>
 801086e:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8010668 <kalman_3gyro.constprop.0+0x39b8>
 8010872:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 801066c <kalman_3gyro.constprop.0+0x39bc>
 8010876:	4bd9      	ldr	r3, [pc, #868]	; (8010bdc <kalman_3gyro.constprop.0+0x3f2c>)
 8010878:	49d9      	ldr	r1, [pc, #868]	; (8010be0 <kalman_3gyro.constprop.0+0x3f30>)
 801087a:	4dda      	ldr	r5, [pc, #872]	; (8010be4 <kalman_3gyro.constprop.0+0x3f34>)
 801087c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010be8 <kalman_3gyro.constprop.0+0x3f38>
 8010880:	48da      	ldr	r0, [pc, #872]	; (8010bec <kalman_3gyro.constprop.0+0x3f3c>)
 8010882:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8010886:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801088a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801088e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010892:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 8010896:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010bf0 <kalman_3gyro.constprop.0+0x3f40>
 801089a:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 801089e:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80108a2:	ee67 3aa3 	vmul.f32	s7, s15, s7
 80108a6:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 80108aa:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8010bf4 <kalman_3gyro.constprop.0+0x3f44>
 80108ae:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010bf8 <kalman_3gyro.constprop.0+0x3f48>
 80108b2:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 80108b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80108ba:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80108be:	ee27 5a85 	vmul.f32	s10, s15, s10
 80108c2:	ee27 4a84 	vmul.f32	s8, s15, s8
 80108c6:	ee27 6a86 	vmul.f32	s12, s15, s12
 80108ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80108ce:	2200      	movs	r2, #0
 80108d0:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 80108d4:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 80108d8:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 80108dc:	4cc7      	ldr	r4, [pc, #796]	; (8010bfc <kalman_3gyro.constprop.0+0x3f4c>)
 80108de:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 80108e2:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 80108e6:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010c00 <kalman_3gyro.constprop.0+0x3f50>
 80108ea:	49c6      	ldr	r1, [pc, #792]	; (8010c04 <kalman_3gyro.constprop.0+0x3f54>)
 80108ec:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 80108f0:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 80108f4:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010c08 <kalman_3gyro.constprop.0+0x3f58>
 80108f8:	4bc4      	ldr	r3, [pc, #784]	; (8010c0c <kalman_3gyro.constprop.0+0x3f5c>)
 80108fa:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 80108fe:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 8010902:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 8010906:	4ac2      	ldr	r2, [pc, #776]	; (8010c10 <kalman_3gyro.constprop.0+0x3f60>)
 8010908:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 801090c:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8010910:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 8010914:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010918:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 801091c:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010920:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010924:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010928:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801092c:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010930:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010934:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010938:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 801093c:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8010940:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8010944:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8010948:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 801094c:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8010950:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8010954:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010958:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801095c:	4cad      	ldr	r4, [pc, #692]	; (8010c14 <kalman_3gyro.constprop.0+0x3f64>)
 801095e:	48ae      	ldr	r0, [pc, #696]	; (8010c18 <kalman_3gyro.constprop.0+0x3f68>)
 8010960:	49ae      	ldr	r1, [pc, #696]	; (8010c1c <kalman_3gyro.constprop.0+0x3f6c>)
 8010962:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8010966:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 801096a:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 801096e:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8010972:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8010976:	ee27 6a83 	vmul.f32	s12, s15, s6
 801097a:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 801097e:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 8010982:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010986:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 801098a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801098e:	4aa4      	ldr	r2, [pc, #656]	; (8010c20 <kalman_3gyro.constprop.0+0x3f70>)
 8010990:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 8010994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010998:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 801099c:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 80109a0:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 80109a4:	4e9f      	ldr	r6, [pc, #636]	; (8010c24 <kalman_3gyro.constprop.0+0x3f74>)
 80109a6:	4da0      	ldr	r5, [pc, #640]	; (8010c28 <kalman_3gyro.constprop.0+0x3f78>)
 80109a8:	49a0      	ldr	r1, [pc, #640]	; (8010c2c <kalman_3gyro.constprop.0+0x3f7c>)
 80109aa:	4aa1      	ldr	r2, [pc, #644]	; (8010c30 <kalman_3gyro.constprop.0+0x3f80>)
 80109ac:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 80109b0:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 80109b4:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80109b8:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 80109bc:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 80109c0:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 80109c4:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 80109c8:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 80109cc:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 80109d0:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 80109d4:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 80109d8:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 80109dc:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 80109e0:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 80109e4:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 80109e8:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 80109ec:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 80109f0:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 80109f4:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 80109f8:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 80109fc:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010a00:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8010a04:	b973      	cbnz	r3, 8010a24 <kalman_3gyro.constprop.0+0x3d74>
 8010a06:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8010a0a:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8010a0e:	6811      	ldr	r1, [r2, #0]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 8010a16:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010a20:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 8010a24:	2300      	movs	r3, #0
 8010a26:	f88b 3001 	strb.w	r3, [fp, #1]
 8010a2a:	f7fc ba4b 	b.w	800cec4 <kalman_3gyro.constprop.0+0x214>
 8010a2e:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010a32:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 8010a36:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010a3a:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010a3e:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010a42:	f7fd bd5b 	b.w	800e4fc <kalman_3gyro.constprop.0+0x184c>
 8010a46:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8010c34 <kalman_3gyro.constprop.0+0x3f84>
 8010a4a:	f7fc ba9e 	b.w	800cf8a <kalman_3gyro.constprop.0+0x2da>
 8010a4e:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8010a52:	f7fd bd7b 	b.w	800e54c <kalman_3gyro.constprop.0+0x189c>
 8010a56:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010c38 <kalman_3gyro.constprop.0+0x3f88>
 8010a5a:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010c3c <kalman_3gyro.constprop.0+0x3f8c>
 8010a5e:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010c40 <kalman_3gyro.constprop.0+0x3f90>
 8010a62:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8010c44 <kalman_3gyro.constprop.0+0x3f94>
 8010a66:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010c48 <kalman_3gyro.constprop.0+0x3f98>
 8010a6a:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010a6e:	f7fd bf9d 	b.w	800e9ac <kalman_3gyro.constprop.0+0x1cfc>
 8010a72:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8010a76:	2a00      	cmp	r2, #0
 8010a78:	f340 8181 	ble.w	8010d7e <kalman_3gyro.constprop.0+0x40ce>
 8010a7c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010a80:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8010a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	f340 8177 	ble.w	8010d7e <kalman_3gyro.constprop.0+0x40ce>
 8010a90:	3a01      	subs	r2, #1
 8010a92:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8010a96:	f7fe b880 	b.w	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 8010a9a:	eeb0 aa69 	vmov.f32	s20, s19
 8010a9e:	eeb0 ba69 	vmov.f32	s22, s19
 8010aa2:	f7ff b9de 	b.w	800fe62 <kalman_3gyro.constprop.0+0x31b2>
 8010aa6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010aaa:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010aae:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010ab2:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010aba:	e6bb      	b.n	8010834 <kalman_3gyro.constprop.0+0x3b84>
 8010abc:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010ac0:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8010ac4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010ac8:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010acc:	f7fe b802 	b.w	800ead4 <kalman_3gyro.constprop.0+0x1e24>
 8010ad0:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8010ad4:	f7fd bae6 	b.w	800e0a4 <kalman_3gyro.constprop.0+0x13f4>
 8010ad8:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010adc:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010ae0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010ae4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010ae8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010aec:	f7fd bd06 	b.w	800e4fc <kalman_3gyro.constprop.0+0x184c>
 8010af0:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8010af4:	ee17 0a90 	vmov	r0, s15
 8010af8:	f7ef fd26 	bl	8000548 <__aeabi_f2d>
 8010afc:	ec41 0b10 	vmov	d0, r0, r1
 8010b00:	f004 ff9a 	bl	8015a38 <ceil>
 8010b04:	ec51 0b10 	vmov	r0, r1, d0
 8010b08:	f7f0 f84e 	bl	8000ba8 <__aeabi_d2f>
 8010b0c:	ee0e 0a10 	vmov	s28, r0
 8010b10:	f7fc bc70 	b.w	800d3f4 <kalman_3gyro.constprop.0+0x744>
 8010b14:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010b18:	ee17 0a90 	vmov	r0, s15
 8010b1c:	f7ef fd14 	bl	8000548 <__aeabi_f2d>
 8010b20:	ec41 0b10 	vmov	d0, r0, r1
 8010b24:	f004 ff88 	bl	8015a38 <ceil>
 8010b28:	ec51 0b10 	vmov	r0, r1, d0
 8010b2c:	f7f0 f83c 	bl	8000ba8 <__aeabi_d2f>
 8010b30:	ee0d 0a90 	vmov	s27, r0
 8010b34:	f7fc bc81 	b.w	800d43a <kalman_3gyro.constprop.0+0x78a>
 8010b38:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010b3c:	ee17 0a90 	vmov	r0, s15
 8010b40:	f7ef fd02 	bl	8000548 <__aeabi_f2d>
 8010b44:	ec41 0b10 	vmov	d0, r0, r1
 8010b48:	f004 ff76 	bl	8015a38 <ceil>
 8010b4c:	ec51 0b10 	vmov	r0, r1, d0
 8010b50:	f7f0 f82a 	bl	8000ba8 <__aeabi_d2f>
 8010b54:	ee0d 0a90 	vmov	s27, r0
 8010b58:	f7fc bcd5 	b.w	800d506 <kalman_3gyro.constprop.0+0x856>
 8010b5c:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010b60:	ee17 0a90 	vmov	r0, s15
 8010b64:	f7ef fcf0 	bl	8000548 <__aeabi_f2d>
 8010b68:	ec41 0b10 	vmov	d0, r0, r1
 8010b6c:	f004 ff64 	bl	8015a38 <ceil>
 8010b70:	ec51 0b10 	vmov	r0, r1, d0
 8010b74:	f7f0 f818 	bl	8000ba8 <__aeabi_d2f>
 8010b78:	ee0b 0a10 	vmov	s22, r0
 8010b7c:	f7fc bce6 	b.w	800d54c <kalman_3gyro.constprop.0+0x89c>
 8010b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b84:	f6fd addf 	blt.w	800e746 <kalman_3gyro.constprop.0+0x1a96>
 8010b88:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010c40 <kalman_3gyro.constprop.0+0x3f90>
 8010b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b94:	f140 8283 	bpl.w	801109e <kalman_3gyro.constprop.0+0x43ee>
 8010b98:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010c4c <kalman_3gyro.constprop.0+0x3f9c>
 8010b9c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010c50 <kalman_3gyro.constprop.0+0x3fa0>
 8010ba0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010c54 <kalman_3gyro.constprop.0+0x3fa4>
 8010ba4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010ba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bac:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010bb0:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010bb4:	f7fd bdd1 	b.w	800e75a <kalman_3gyro.constprop.0+0x1aaa>
 8010bb8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010bbc:	ee17 0a90 	vmov	r0, s15
 8010bc0:	f7ef fcc2 	bl	8000548 <__aeabi_f2d>
 8010bc4:	ec41 0b10 	vmov	d0, r0, r1
 8010bc8:	f004 ff36 	bl	8015a38 <ceil>
 8010bcc:	ec51 0b10 	vmov	r0, r1, d0
 8010bd0:	f7ef ffea 	bl	8000ba8 <__aeabi_d2f>
 8010bd4:	ee08 0a10 	vmov	s16, r0
 8010bd8:	f7fc bbe9 	b.w	800d3ae <kalman_3gyro.constprop.0+0x6fe>
 8010bdc:	3eb33333 	.word	0x3eb33333
 8010be0:	3ee66666 	.word	0x3ee66666
 8010be4:	3f866666 	.word	0x3f866666
 8010be8:	3ecccccd 	.word	0x3ecccccd
 8010bec:	3f933333 	.word	0x3f933333
 8010bf0:	3dcccccd 	.word	0x3dcccccd
 8010bf4:	3e4ccccd 	.word	0x3e4ccccd
 8010bf8:	3e99999a 	.word	0x3e99999a
 8010bfc:	3f8ccccd 	.word	0x3f8ccccd
 8010c00:	3f4ccccd 	.word	0x3f4ccccd
 8010c04:	3ebd70a4 	.word	0x3ebd70a4
 8010c08:	3f666666 	.word	0x3f666666
 8010c0c:	40a00000 	.word	0x40a00000
 8010c10:	3f99999a 	.word	0x3f99999a
 8010c14:	3f19999a 	.word	0x3f19999a
 8010c18:	3fb9999a 	.word	0x3fb9999a
 8010c1c:	3fe66666 	.word	0x3fe66666
 8010c20:	3f333333 	.word	0x3f333333
 8010c24:	3fa66666 	.word	0x3fa66666
 8010c28:	3fcccccd 	.word	0x3fcccccd
 8010c2c:	40200000 	.word	0x40200000
 8010c30:	40400000 	.word	0x40400000
 8010c34:	bf666666 	.word	0xbf666666
 8010c38:	391d4951 	.word	0x391d4951
 8010c3c:	383cbe62 	.word	0x383cbe62
 8010c40:	3c75c28f 	.word	0x3c75c28f
 8010c44:	469c3e00 	.word	0x469c3e00
 8010c48:	43168000 	.word	0x43168000
 8010c4c:	3c23d70a 	.word	0x3c23d70a
 8010c50:	3f19999a 	.word	0x3f19999a
 8010c54:	43480000 	.word	0x43480000
 8010c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c5c:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010c60:	eef0 7aca 	vabs.f32	s15, s20
 8010c64:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010c68:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c70:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010c74:	bfb8      	it	lt
 8010c76:	eef0 7a66 	vmovlt.f32	s15, s13
 8010c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c7e:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010c82:	f77d af5b 	ble.w	800eb3c <kalman_3gyro.constprop.0+0x1e8c>
 8010c86:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010c8a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010c8e:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c96:	f77d af51 	ble.w	800eb3c <kalman_3gyro.constprop.0+0x1e8c>
 8010c9a:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010c9e:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010ca2:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010ca6:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010caa:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010cae:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010cb2:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010cb6:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010cba:	f7fd bf3f 	b.w	800eb3c <kalman_3gyro.constprop.0+0x1e8c>
 8010cbe:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010cc2:	2a01      	cmp	r2, #1
 8010cc4:	d002      	beq.n	8010ccc <kalman_3gyro.constprop.0+0x401c>
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	f47d af1e 	bne.w	800eb08 <kalman_3gyro.constprop.0+0x1e58>
 8010ccc:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010cd0:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cd8:	bfa8      	it	ge
 8010cda:	eeb0 3a67 	vmovge.f32	s6, s15
 8010cde:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010ce2:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010ce6:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010cea:	f7fd bf0d 	b.w	800eb08 <kalman_3gyro.constprop.0+0x1e58>
 8010cee:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010cf2:	ee17 0a90 	vmov	r0, s15
 8010cf6:	f7ef fc27 	bl	8000548 <__aeabi_f2d>
 8010cfa:	ec41 0b10 	vmov	d0, r0, r1
 8010cfe:	f004 fe9b 	bl	8015a38 <ceil>
 8010d02:	ec51 0b10 	vmov	r0, r1, d0
 8010d06:	f7ef ff4f 	bl	8000ba8 <__aeabi_d2f>
 8010d0a:	ee08 0a10 	vmov	s16, r0
 8010d0e:	f7fc bc40 	b.w	800d592 <kalman_3gyro.constprop.0+0x8e2>
 8010d12:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010d16:	ee17 0a90 	vmov	r0, s15
 8010d1a:	f7ef fc15 	bl	8000548 <__aeabi_f2d>
 8010d1e:	ec41 0b10 	vmov	d0, r0, r1
 8010d22:	f004 fe89 	bl	8015a38 <ceil>
 8010d26:	ec51 0b10 	vmov	r0, r1, d0
 8010d2a:	f7ef ff3d 	bl	8000ba8 <__aeabi_d2f>
 8010d2e:	ee0b 0a10 	vmov	s22, r0
 8010d32:	f7fc bcb7 	b.w	800d6a4 <kalman_3gyro.constprop.0+0x9f4>
 8010d36:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010d3a:	ee17 0a90 	vmov	r0, s15
 8010d3e:	f7ef fc03 	bl	8000548 <__aeabi_f2d>
 8010d42:	ec41 0b10 	vmov	d0, r0, r1
 8010d46:	f004 fe77 	bl	8015a38 <ceil>
 8010d4a:	ec51 0b10 	vmov	r0, r1, d0
 8010d4e:	f7ef ff2b 	bl	8000ba8 <__aeabi_d2f>
 8010d52:	ee08 0a10 	vmov	s16, r0
 8010d56:	f7fc bcc8 	b.w	800d6ea <kalman_3gyro.constprop.0+0xa3a>
 8010d5a:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010d5e:	ee17 0a90 	vmov	r0, s15
 8010d62:	f7ef fbf1 	bl	8000548 <__aeabi_f2d>
 8010d66:	ec41 0b10 	vmov	d0, r0, r1
 8010d6a:	f004 fe65 	bl	8015a38 <ceil>
 8010d6e:	ec51 0b10 	vmov	r0, r1, d0
 8010d72:	f7ef ff19 	bl	8000ba8 <__aeabi_d2f>
 8010d76:	ee0d 0a90 	vmov	s27, r0
 8010d7a:	f7fc bc70 	b.w	800d65e <kalman_3gyro.constprop.0+0x9ae>
 8010d7e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010d82:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d8a:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d92:	f77d af02 	ble.w	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 8010d96:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d9e:	eef4 7aec 	vcmpe.f32	s15, s25
 8010da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da6:	f77d aef8 	ble.w	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 8010daa:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010dae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010db2:	eef4 7acd 	vcmpe.f32	s15, s26
 8010db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dba:	f140 8711 	bpl.w	8011be0 <kalman_3gyro.constprop.0+0x4f30>
 8010dbe:	3303      	adds	r3, #3
 8010dc0:	f7ff ba35 	b.w	801022e <kalman_3gyro.constprop.0+0x357e>
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010dca:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010dce:	9181      	str	r1, [sp, #516]	; 0x204
 8010dd0:	9282      	str	r2, [sp, #520]	; 0x208
 8010dd2:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010dd6:	9183      	str	r1, [sp, #524]	; 0x20c
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010dde:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010de2:	f7fe baa8 	b.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 8010de6:	a936      	add	r1, sp, #216	; 0xd8
 8010de8:	a854      	add	r0, sp, #336	; 0x150
 8010dea:	f7fa ff85 	bl	800bcf8 <b_dcm2q>
 8010dee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010df2:	4619      	mov	r1, r3
 8010df4:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010df8:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010dfc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010e00:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010e04:	f006 fd86 	bl	8017914 <memset>
 8010e08:	4bd8      	ldr	r3, [pc, #864]	; (801116c <kalman_3gyro.constprop.0+0x44bc>)
 8010e0a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010e0e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010e12:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010e16:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010e1a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010e1e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010e22:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010e26:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010e2a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010e2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010e30:	781a      	ldrb	r2, [r3, #0]
 8010e32:	ee07 2a90 	vmov	s15, r2
 8010e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e42:	f040 84dc 	bne.w	80117fe <kalman_3gyro.constprop.0+0x4b4e>
 8010e46:	eeb0 7a4c 	vmov.f32	s14, s24
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	f88b 3000 	strb.w	r3, [fp]
 8010e50:	eddb ea02 	vldr	s29, [fp, #8]
 8010e54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010e58:	2301      	movs	r3, #1
 8010e5a:	f7fd bb8d 	b.w	800e578 <kalman_3gyro.constprop.0+0x18c8>
 8010e5e:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010e62:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e6a:	f340 85da 	ble.w	8011a22 <kalman_3gyro.constprop.0+0x4d72>
 8010e6e:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010e72:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010e76:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010e7a:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010e7e:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010e82:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010e86:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010e8a:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010e8e:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010e92:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9a:	f63d a94b 	bhi.w	800e134 <kalman_3gyro.constprop.0+0x1484>
 8010e9e:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010ea2:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eaa:	f340 84bc 	ble.w	8011826 <kalman_3gyro.constprop.0+0x4b76>
 8010eae:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010eb2:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010eb6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010eba:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ebe:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010ec2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010ec6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010eca:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010ece:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010ed2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eda:	f63d a94b 	bhi.w	800e174 <kalman_3gyro.constprop.0+0x14c4>
 8010ede:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010ee2:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eea:	f340 84a8 	ble.w	801183e <kalman_3gyro.constprop.0+0x4b8e>
 8010eee:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010ef2:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010ef6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010efa:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010efe:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f02:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f06:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010f0a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f0e:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010f12:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1a:	f63d a94b 	bhi.w	800e1b4 <kalman_3gyro.constprop.0+0x1504>
 8010f1e:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010f22:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2a:	f340 8490 	ble.w	801184e <kalman_3gyro.constprop.0+0x4b9e>
 8010f2e:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010f32:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010f36:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f3a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f3e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f42:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010f46:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010f4a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f4e:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010f52:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5a:	f6fd a94b 	blt.w	800e1f4 <kalman_3gyro.constprop.0+0x1544>
 8010f5e:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010f62:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6a:	f57d a94b 	bpl.w	800e204 <kalman_3gyro.constprop.0+0x1554>
 8010f6e:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010f72:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010f76:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f7a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f7e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010f82:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010f86:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010f8a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f8e:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010f92:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9a:	f6fd a94b 	blt.w	800e234 <kalman_3gyro.constprop.0+0x1584>
 8010f9e:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa6:	f57d a945 	bpl.w	800e234 <kalman_3gyro.constprop.0+0x1584>
 8010faa:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010fae:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010fb2:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010fb6:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010fba:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010fbe:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010fc2:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010fc6:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010fca:	f7fd b933 	b.w	800e234 <kalman_3gyro.constprop.0+0x1584>
 8010fce:	eddf 6a68 	vldr	s13, [pc, #416]	; 8011170 <kalman_3gyro.constprop.0+0x44c0>
 8010fd2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fda:	f57d ac56 	bpl.w	800e88a <kalman_3gyro.constprop.0+0x1bda>
 8010fde:	eddf 3a65 	vldr	s7, [pc, #404]	; 8011174 <kalman_3gyro.constprop.0+0x44c4>
 8010fe2:	eddf 2a65 	vldr	s5, [pc, #404]	; 8011178 <kalman_3gyro.constprop.0+0x44c8>
 8010fe6:	ed9f 3a65 	vldr	s6, [pc, #404]	; 801117c <kalman_3gyro.constprop.0+0x44cc>
 8010fea:	eddf 6a65 	vldr	s13, [pc, #404]	; 8011180 <kalman_3gyro.constprop.0+0x44d0>
 8010fee:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010ff2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010ff6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010ffa:	eeb0 ca66 	vmov.f32	s24, s13
 8010ffe:	eddf 6a61 	vldr	s13, [pc, #388]	; 8011184 <kalman_3gyro.constprop.0+0x44d4>
 8011002:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100a:	f6fd ac56 	blt.w	800e8ba <kalman_3gyro.constprop.0+0x1c0a>
 801100e:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011188 <kalman_3gyro.constprop.0+0x44d8>
 8011012:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101a:	f57d ac56 	bpl.w	800e8ca <kalman_3gyro.constprop.0+0x1c1a>
 801101e:	eddf 3a59 	vldr	s7, [pc, #356]	; 8011184 <kalman_3gyro.constprop.0+0x44d4>
 8011022:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8011026:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801102a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 801102e:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8011032:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8011036:	eee3 6a83 	vfma.f32	s13, s7, s6
 801103a:	eeb0 ca66 	vmov.f32	s24, s13
 801103e:	eddf 6a53 	vldr	s13, [pc, #332]	; 801118c <kalman_3gyro.constprop.0+0x44dc>
 8011042:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801104a:	f6fd ac56 	blt.w	800e8fa <kalman_3gyro.constprop.0+0x1c4a>
 801104e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011052:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105a:	f57d ac56 	bpl.w	800e90a <kalman_3gyro.constprop.0+0x1c5a>
 801105e:	eddf 3a4b 	vldr	s7, [pc, #300]	; 801118c <kalman_3gyro.constprop.0+0x44dc>
 8011062:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8011190 <kalman_3gyro.constprop.0+0x44e0>
 8011066:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8011194 <kalman_3gyro.constprop.0+0x44e4>
 801106a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801106e:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8011072:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011076:	eee3 6a83 	vfma.f32	s13, s7, s6
 801107a:	eeb0 ca66 	vmov.f32	s24, s13
 801107e:	e4f4      	b.n	8010a6a <kalman_3gyro.constprop.0+0x3dba>
 8011080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011084:	f57d abe1 	bpl.w	800e84a <kalman_3gyro.constprop.0+0x1b9a>
 8011088:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8011174 <kalman_3gyro.constprop.0+0x44c4>
 801108c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011094:	da9b      	bge.n	8010fce <kalman_3gyro.constprop.0+0x431e>
 8011096:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801109a:	f7fd bbee 	b.w	800e87a <kalman_3gyro.constprop.0+0x1bca>
 801109e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011170 <kalman_3gyro.constprop.0+0x44c0>
 80110a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110aa:	f57d ab5e 	bpl.w	800e76a <kalman_3gyro.constprop.0+0x1aba>
 80110ae:	eddf 6a31 	vldr	s13, [pc, #196]	; 8011174 <kalman_3gyro.constprop.0+0x44c4>
 80110b2:	eddf 4a39 	vldr	s9, [pc, #228]	; 8011198 <kalman_3gyro.constprop.0+0x44e8>
 80110b6:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801117c <kalman_3gyro.constprop.0+0x44cc>
 80110ba:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801119c <kalman_3gyro.constprop.0+0x44ec>
 80110be:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80110c2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80110c6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80110ca:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011184 <kalman_3gyro.constprop.0+0x44d4>
 80110ce:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d6:	f6fd ab5e 	blt.w	800e796 <kalman_3gyro.constprop.0+0x1ae6>
 80110da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8011188 <kalman_3gyro.constprop.0+0x44d8>
 80110de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e6:	f57d ab5e 	bpl.w	800e7a6 <kalman_3gyro.constprop.0+0x1af6>
 80110ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011184 <kalman_3gyro.constprop.0+0x44d4>
 80110ee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80110f2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80110f6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80110fa:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80110fe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011102:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011106:	eddf 6a21 	vldr	s13, [pc, #132]	; 801118c <kalman_3gyro.constprop.0+0x44dc>
 801110a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801110e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011112:	f6fd ab5e 	blt.w	800e7d2 <kalman_3gyro.constprop.0+0x1b22>
 8011116:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801111a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011122:	f57d ab5d 	bpl.w	800e7e0 <kalman_3gyro.constprop.0+0x1b30>
 8011126:	eddf 6a19 	vldr	s13, [pc, #100]	; 801118c <kalman_3gyro.constprop.0+0x44dc>
 801112a:	eddf 4a1d 	vldr	s9, [pc, #116]	; 80111a0 <kalman_3gyro.constprop.0+0x44f0>
 801112e:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8011194 <kalman_3gyro.constprop.0+0x44e4>
 8011132:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80111a4 <kalman_3gyro.constprop.0+0x44f4>
 8011136:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801113a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801113e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011142:	f7fd bb5b 	b.w	800e7fc <kalman_3gyro.constprop.0+0x1b4c>
 8011146:	9b01      	ldr	r3, [sp, #4]
 8011148:	e63d      	b.n	8010dc6 <kalman_3gyro.constprop.0+0x4116>
 801114a:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 801114e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011156:	da2b      	bge.n	80111b0 <kalman_3gyro.constprop.0+0x4500>
 8011158:	ed9f ba13 	vldr	s22, [pc, #76]	; 80111a8 <kalman_3gyro.constprop.0+0x44f8>
 801115c:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8011160:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011168:	db3a      	blt.n	80111e0 <kalman_3gyro.constprop.0+0x4530>
 801116a:	e386      	b.n	801187a <kalman_3gyro.constprop.0+0x4bca>
 801116c:	40a00000 	.word	0x40a00000
 8011170:	3cf5c28f 	.word	0x3cf5c28f
 8011174:	3c75c28f 	.word	0x3c75c28f
 8011178:	3dccccd0 	.word	0x3dccccd0
 801117c:	42855556 	.word	0x42855556
 8011180:	3f866666 	.word	0x3f866666
 8011184:	3d4ccccd 	.word	0x3d4ccccd
 8011188:	3dcccccd 	.word	0x3dcccccd
 801118c:	3e4ccccd 	.word	0x3e4ccccd
 8011190:	42200000 	.word	0x42200000
 8011194:	40555555 	.word	0x40555555
 8011198:	3ecccccc 	.word	0x3ecccccc
 801119c:	3fcccccd 	.word	0x3fcccccd
 80111a0:	43f00000 	.word	0x43f00000
 80111a4:	42ee0000 	.word	0x42ee0000
 80111a8:	00000000 	.word	0x00000000
 80111ac:	eeb0 7a64 	vmov.f32	s14, s9
 80111b0:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 80111b4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80111b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111bc:	f140 8359 	bpl.w	8011872 <kalman_3gyro.constprop.0+0x4bc2>
 80111c0:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 80111c4:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 80111c8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80111cc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80111d0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80111d4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80111d8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80111dc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80111e0:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 80111e4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80111e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ec:	f2c0 835d 	blt.w	80118aa <kalman_3gyro.constprop.0+0x4bfa>
 80111f0:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 80111f4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80111f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fc:	f140 8402 	bpl.w	8011a04 <kalman_3gyro.constprop.0+0x4d54>
 8011200:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8011204:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8011208:	ee38 3a47 	vsub.f32	s6, s16, s14
 801120c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011210:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011214:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011218:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801121c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011220:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8011224:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122c:	f200 835d 	bhi.w	80118ea <kalman_3gyro.constprop.0+0x4c3a>
 8011230:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8011234:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123c:	f340 83e8 	ble.w	8011a10 <kalman_3gyro.constprop.0+0x4d60>
 8011240:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8011244:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8011248:	ee38 3a47 	vsub.f32	s6, s16, s14
 801124c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011250:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011254:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011258:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801125c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011260:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8011264:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801126c:	f200 835d 	bhi.w	801192a <kalman_3gyro.constprop.0+0x4c7a>
 8011270:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8011274:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801127c:	f340 83b4 	ble.w	80119e8 <kalman_3gyro.constprop.0+0x4d38>
 8011280:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8011284:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8011288:	ee38 3a47 	vsub.f32	s6, s16, s14
 801128c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011290:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011294:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011298:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801129c:	ee3b ba23 	vadd.f32	s22, s22, s7
 80112a0:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 80112a4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80112a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ac:	f2c0 835c 	blt.w	8011968 <kalman_3gyro.constprop.0+0x4cb8>
 80112b0:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80112b4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80112b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112bc:	f140 835c 	bpl.w	8011978 <kalman_3gyro.constprop.0+0x4cc8>
 80112c0:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 80112c4:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80112c8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80112cc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80112d0:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80112d4:	ee24 7a03 	vmul.f32	s14, s8, s6
 80112d8:	ee87 ba24 	vdiv.f32	s22, s14, s9
 80112dc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80112e0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80112e4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ec:	f6fc aeda 	blt.w	800e0a4 <kalman_3gyro.constprop.0+0x13f4>
 80112f0:	eeb4 8ac5 	vcmpe.f32	s16, s10
 80112f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f8:	f57c aed4 	bpl.w	800e0a4 <kalman_3gyro.constprop.0+0x13f4>
 80112fc:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8011300:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8011304:	ee78 3a47 	vsub.f32	s7, s16, s14
 8011308:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801130c:	ee35 7a47 	vsub.f32	s14, s10, s14
 8011310:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8011314:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011318:	ee3b ba04 	vadd.f32	s22, s22, s8
 801131c:	f7fc bec2 	b.w	800e0a4 <kalman_3gyro.constprop.0+0x13f4>
 8011320:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8011324:	eef4 7acd 	vcmpe.f32	s15, s26
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	dd2c      	ble.n	8011388 <kalman_3gyro.constprop.0+0x46d8>
 801132e:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8011332:	eef4 7aeb 	vcmpe.f32	s15, s23
 8011336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133a:	dd25      	ble.n	8011388 <kalman_3gyro.constprop.0+0x46d8>
 801133c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011340:	eef4 7aec 	vcmpe.f32	s15, s25
 8011344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011348:	dd1e      	ble.n	8011388 <kalman_3gyro.constprop.0+0x46d8>
 801134a:	eddd 5a03 	vldr	s11, [sp, #12]
 801134e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011352:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135a:	d515      	bpl.n	8011388 <kalman_3gyro.constprop.0+0x46d8>
 801135c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011360:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011364:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011370:	d50a      	bpl.n	8011388 <kalman_3gyro.constprop.0+0x46d8>
 8011372:	2300      	movs	r3, #0
 8011374:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011378:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801137c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011380:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011384:	f7fd bf4c 	b.w	800f220 <kalman_3gyro.constprop.0+0x2570>
 8011388:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 801138c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011394:	dd0b      	ble.n	80113ae <kalman_3gyro.constprop.0+0x46fe>
 8011396:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801139a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a2:	f100 843f 	bmi.w	8011c24 <kalman_3gyro.constprop.0+0x4f74>
 80113a6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80113aa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80113ae:	2300      	movs	r3, #0
 80113b0:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80113b4:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80113b8:	f7fd bf32 	b.w	800f220 <kalman_3gyro.constprop.0+0x2570>
 80113bc:	2301      	movs	r3, #1
 80113be:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80113c2:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 80113c6:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 80113ca:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 80113ce:	edd2 5a00 	vldr	s11, [r2]
 80113d2:	ed93 7a00 	vldr	s14, [r3]
 80113d6:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 80113da:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 80113de:	ed92 5a00 	vldr	s10, [r2]
 80113e2:	edd3 6a00 	vldr	s13, [r3]
 80113e6:	ee25 4aa5 	vmul.f32	s8, s11, s11
 80113ea:	ee67 4a07 	vmul.f32	s9, s14, s14
 80113ee:	eea5 4a05 	vfma.f32	s8, s10, s10
 80113f2:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 80113f6:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 80113fa:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80113fe:	aa5d      	add	r2, sp, #372	; 0x174
 8011400:	a833      	add	r0, sp, #204	; 0xcc
 8011402:	ed91 6a00 	vldr	s12, [r1]
 8011406:	edd3 7a00 	vldr	s15, [r3]
 801140a:	eea6 4a06 	vfma.f32	s8, s12, s12
 801140e:	a92d      	add	r1, sp, #180	; 0xb4
 8011410:	ad5d      	add	r5, sp, #372	; 0x174
 8011412:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8011416:	ac66      	add	r4, sp, #408	; 0x198
 8011418:	eef1 2ac4 	vsqrt.f32	s5, s8
 801141c:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8011420:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8011424:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8011428:	eec3 4a83 	vdiv.f32	s9, s7, s6
 801142c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011430:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011434:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011438:	ee65 5a84 	vmul.f32	s11, s11, s8
 801143c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011440:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011444:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8011448:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 801144c:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8011450:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8011454:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011458:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 801145c:	f7fa fbac 	bl	800bbb8 <getRotationMatrix>
 8011460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011468:	682e      	ldr	r6, [r5, #0]
 801146a:	6026      	str	r6, [r4, #0]
 801146c:	ad66      	add	r5, sp, #408	; 0x198
 801146e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011470:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801147a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 801147e:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8011482:	6026      	str	r6, [r4, #0]
 8011484:	eef0 7ae7 	vabs.f32	s15, s15
 8011488:	eeb0 7ac7 	vabs.f32	s14, s14
 801148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011494:	f100 81df 	bmi.w	8011856 <kalman_3gyro.constprop.0+0x4ba6>
 8011498:	2307      	movs	r3, #7
 801149a:	f04f 0c04 	mov.w	ip, #4
 801149e:	9305      	str	r3, [sp, #20]
 80114a0:	2300      	movs	r3, #0
 80114a2:	4662      	mov	r2, ip
 80114a4:	2003      	movs	r0, #3
 80114a6:	2706      	movs	r7, #6
 80114a8:	f04f 0e01 	mov.w	lr, #1
 80114ac:	9304      	str	r3, [sp, #16]
 80114ae:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 80114b2:	eeb0 7ac7 	vabs.f32	s14, s14
 80114b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114be:	f340 8296 	ble.w	80119ee <kalman_3gyro.constprop.0+0x4d3e>
 80114c2:	2306      	movs	r3, #6
 80114c4:	930a      	str	r3, [sp, #40]	; 0x28
 80114c6:	2307      	movs	r3, #7
 80114c8:	9305      	str	r3, [sp, #20]
 80114ca:	2300      	movs	r3, #0
 80114cc:	2708      	movs	r7, #8
 80114ce:	f04f 0c04 	mov.w	ip, #4
 80114d2:	9302      	str	r3, [sp, #8]
 80114d4:	2302      	movs	r3, #2
 80114d6:	9707      	str	r7, [sp, #28]
 80114d8:	4662      	mov	r2, ip
 80114da:	2005      	movs	r0, #5
 80114dc:	f04f 0e01 	mov.w	lr, #1
 80114e0:	9304      	str	r3, [sp, #16]
 80114e2:	ab66      	add	r3, sp, #408	; 0x198
 80114e4:	441a      	add	r2, r3
 80114e6:	9b07      	ldr	r3, [sp, #28]
 80114e8:	edd2 6a00 	vldr	s13, [r2]
 80114ec:	9a02      	ldr	r2, [sp, #8]
 80114ee:	a966      	add	r1, sp, #408	; 0x198
 80114f0:	440b      	add	r3, r1
 80114f2:	ed93 7a00 	vldr	s14, [r3]
 80114f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114fa:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80114fe:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8011502:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8011506:	9a04      	ldr	r2, [sp, #16]
 8011508:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 801150c:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011510:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011514:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8011518:	0080      	lsls	r0, r0, #2
 801151a:	900e      	str	r0, [sp, #56]	; 0x38
 801151c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801151e:	940d      	str	r4, [sp, #52]	; 0x34
 8011520:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011524:	edc3 7a00 	vstr	s15, [r3]
 8011528:	ed96 7a00 	vldr	s14, [r6]
 801152c:	edd1 7a00 	vldr	s15, [r1]
 8011530:	930c      	str	r3, [sp, #48]	; 0x30
 8011532:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011536:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 801153a:	0080      	lsls	r0, r0, #2
 801153c:	9006      	str	r0, [sp, #24]
 801153e:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8011542:	00bf      	lsls	r7, r7, #2
 8011544:	9711      	str	r7, [sp, #68]	; 0x44
 8011546:	9f05      	ldr	r7, [sp, #20]
 8011548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801154a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 801154e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011552:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	9307      	str	r3, [sp, #28]
 801155a:	9b02      	ldr	r3, [sp, #8]
 801155c:	edc6 6a00 	vstr	s13, [r6]
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	930b      	str	r3, [sp, #44]	; 0x2c
 8011564:	9b04      	ldr	r3, [sp, #16]
 8011566:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	9312      	str	r3, [sp, #72]	; 0x48
 801156c:	9b05      	ldr	r3, [sp, #20]
 801156e:	ed96 7a00 	vldr	s14, [r6]
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	9309      	str	r3, [sp, #36]	; 0x24
 8011576:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801157a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801157c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011580:	ed93 6a00 	vldr	s12, [r3]
 8011584:	edd2 7a00 	vldr	s15, [r2]
 8011588:	eee6 7a47 	vfms.f32	s15, s12, s14
 801158c:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8011590:	950a      	str	r5, [sp, #40]	; 0x28
 8011592:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8011596:	edc2 7a00 	vstr	s15, [r2]
 801159a:	ed96 7a00 	vldr	s14, [r6]
 801159e:	edd4 7a00 	vldr	s15, [r4]
 80115a2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80115a6:	edc4 7a00 	vstr	s15, [r4]
 80115aa:	edd0 5a00 	vldr	s11, [r0]
 80115ae:	ed97 7a00 	vldr	s14, [r7]
 80115b2:	eea6 7a65 	vfms.f32	s14, s12, s11
 80115b6:	eef0 7ae7 	vabs.f32	s15, s15
 80115ba:	ed87 7a00 	vstr	s14, [r7]
 80115be:	ed90 6a00 	vldr	s12, [r0]
 80115c2:	ed91 7a00 	vldr	s14, [r1]
 80115c6:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80115ca:	ed81 7a00 	vstr	s14, [r1]
 80115ce:	ed92 7a00 	vldr	s14, [r2]
 80115d2:	eeb0 7ac7 	vabs.f32	s14, s14
 80115d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115de:	dd12      	ble.n	8011606 <kalman_3gyro.constprop.0+0x4956>
 80115e0:	9a07      	ldr	r2, [sp, #28]
 80115e2:	9f05      	ldr	r7, [sp, #20]
 80115e4:	9806      	ldr	r0, [sp, #24]
 80115e6:	9209      	str	r2, [sp, #36]	; 0x24
 80115e8:	4673      	mov	r3, lr
 80115ea:	f8dd e008 	ldr.w	lr, [sp, #8]
 80115ee:	9302      	str	r3, [sp, #8]
 80115f0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	9206      	str	r2, [sp, #24]
 80115f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80115fa:	00ba      	lsls	r2, r7, #2
 80115fc:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8011600:	4605      	mov	r5, r0
 8011602:	9207      	str	r2, [sp, #28]
 8011604:	930a      	str	r3, [sp, #40]	; 0x28
 8011606:	9b06      	ldr	r3, [sp, #24]
 8011608:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801160a:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801160e:	4413      	add	r3, r2
 8011610:	461c      	mov	r4, r3
 8011612:	462b      	mov	r3, r5
 8011614:	4413      	add	r3, r2
 8011616:	ed94 7a00 	vldr	s14, [r4]
 801161a:	edd3 7a00 	vldr	s15, [r3]
 801161e:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8011622:	4618      	mov	r0, r3
 8011624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011626:	4413      	add	r3, r2
 8011628:	461a      	mov	r2, r3
 801162a:	9b07      	ldr	r3, [sp, #28]
 801162c:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011630:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011634:	440b      	add	r3, r1
 8011636:	4619      	mov	r1, r3
 8011638:	442e      	add	r6, r5
 801163a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801163c:	9607      	str	r6, [sp, #28]
 801163e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011640:	ed84 2a00 	vstr	s4, [r4]
 8011644:	442b      	add	r3, r5
 8011646:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 801164a:	9306      	str	r3, [sp, #24]
 801164c:	19bb      	adds	r3, r7, r6
 801164e:	ed92 7a00 	vldr	s14, [r2]
 8011652:	edd1 7a00 	vldr	s15, [r1]
 8011656:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011658:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801165c:	edd3 3a00 	vldr	s7, [r3]
 8011660:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8011664:	eee2 7a47 	vfms.f32	s15, s4, s14
 8011668:	4423      	add	r3, r4
 801166a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801166e:	ed93 5a00 	vldr	s10, [r3]
 8011672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011674:	edc1 7a00 	vstr	s15, [r1]
 8011678:	462f      	mov	r7, r5
 801167a:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 801167e:	4629      	mov	r1, r5
 8011680:	eb05 0c03 	add.w	ip, r5, r3
 8011684:	9d04      	ldr	r5, [sp, #16]
 8011686:	ed92 1a00 	vldr	s2, [r2]
 801168a:	4437      	add	r7, r6
 801168c:	9705      	str	r7, [sp, #20]
 801168e:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8011692:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8011696:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801169a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801169e:	4419      	add	r1, r3
 80116a0:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80116a4:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 80116a8:	191c      	adds	r4, r3, r4
 80116aa:	9b02      	ldr	r3, [sp, #8]
 80116ac:	9104      	str	r1, [sp, #16]
 80116ae:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 80116b2:	9409      	str	r4, [sp, #36]	; 0x24
 80116b4:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80116b8:	463d      	mov	r5, r7
 80116ba:	9904      	ldr	r1, [sp, #16]
 80116bc:	46b6      	mov	lr, r6
 80116be:	4623      	mov	r3, r4
 80116c0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80116c4:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 80116c8:	edd0 7a00 	vldr	s15, [r0]
 80116cc:	9805      	ldr	r0, [sp, #20]
 80116ce:	ed91 0a00 	vldr	s0, [r1]
 80116d2:	ed90 8a00 	vldr	s16, [r0]
 80116d6:	eddc 4a00 	vldr	s9, [ip]
 80116da:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 80116de:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 80116e2:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 80116e6:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 80116ea:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 80116ee:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 80116f2:	a85d      	add	r0, sp, #372	; 0x174
 80116f4:	a93e      	add	r1, sp, #248	; 0xf8
 80116f6:	edd7 5a00 	vldr	s11, [r7]
 80116fa:	ed96 6a00 	vldr	s12, [r6]
 80116fe:	9a06      	ldr	r2, [sp, #24]
 8011700:	ed95 7a00 	vldr	s14, [r5]
 8011704:	edd4 6a00 	vldr	s13, [r4]
 8011708:	ed93 3a00 	vldr	s6, [r3]
 801170c:	edde 7a00 	vldr	s15, [lr]
 8011710:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011712:	edd2 1a00 	vldr	s3, [r2]
 8011716:	9e07      	ldr	r6, [sp, #28]
 8011718:	eee8 3a45 	vfms.f32	s7, s16, s10
 801171c:	eee0 4a45 	vfms.f32	s9, s0, s10
 8011720:	eea8 6a65 	vfms.f32	s12, s16, s11
 8011724:	eee7 7a48 	vfms.f32	s15, s14, s16
 8011728:	eee0 6a65 	vfms.f32	s13, s0, s11
 801172c:	eea7 3a40 	vfms.f32	s6, s14, s0
 8011730:	ed94 0a00 	vldr	s0, [r4]
 8011734:	eea2 3a67 	vfms.f32	s6, s4, s15
 8011738:	eee3 4ac2 	vfms.f32	s9, s7, s4
 801173c:	eee2 6a46 	vfms.f32	s13, s4, s12
 8011740:	ee80 2a80 	vdiv.f32	s4, s1, s0
 8011744:	ee64 6a26 	vmul.f32	s13, s8, s13
 8011748:	ee64 4a24 	vmul.f32	s9, s8, s9
 801174c:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011750:	eea1 6a66 	vfms.f32	s12, s2, s13
 8011754:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8011758:	eee4 7a41 	vfms.f32	s15, s8, s2
 801175c:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8011760:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8011764:	eea4 7a61 	vfms.f32	s14, s8, s3
 8011768:	ed96 3a00 	vldr	s6, [r6]
 801176c:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8011770:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011774:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011778:	ee22 6a86 	vmul.f32	s12, s5, s12
 801177c:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8011780:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8011784:	eee3 5a46 	vfms.f32	s11, s6, s12
 8011788:	ee27 7a02 	vmul.f32	s14, s14, s4
 801178c:	ee22 5a05 	vmul.f32	s10, s4, s10
 8011790:	ee62 5a25 	vmul.f32	s11, s4, s11
 8011794:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011798:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 801179c:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 80117a0:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 80117a4:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 80117a8:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 80117ac:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 80117b0:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 80117b4:	f7fa faa0 	bl	800bcf8 <b_dcm2q>
 80117b8:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 80117bc:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 80117c0:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 80117c4:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 80117c8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80117cc:	ee37 7a07 	vadd.f32	s14, s14, s14
 80117d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80117d4:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 80117d8:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 80117dc:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f43d ad20 	beq.w	800f226 <kalman_3gyro.constprop.0+0x2576>
 80117e6:	2200      	movs	r2, #0
 80117e8:	9b01      	ldr	r3, [sp, #4]
 80117ea:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80117ee:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 80117f2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 80117f6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80117fa:	f7fd bd9c 	b.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 80117fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8011802:	ed93 7a01 	vldr	s14, [r3, #4]
 8011806:	edd3 6a03 	vldr	s13, [r3, #12]
 801180a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801180e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011812:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011816:	eeb1 6ae7 	vsqrt.f32	s12, s15
 801181a:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801181e:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 8011822:	f7ff bb12 	b.w	8010e4a <kalman_3gyro.constprop.0+0x419a>
 8011826:	eeb0 7a64 	vmov.f32	s14, s9
 801182a:	f7fc bc8b 	b.w	800e144 <kalman_3gyro.constprop.0+0x1494>
 801182e:	eeb0 7a64 	vmov.f32	s14, s9
 8011832:	f7ff bb94 	b.w	8010f5e <kalman_3gyro.constprop.0+0x42ae>
 8011836:	eeb0 7a64 	vmov.f32	s14, s9
 801183a:	f7ff bb50 	b.w	8010ede <kalman_3gyro.constprop.0+0x422e>
 801183e:	eeb0 7a64 	vmov.f32	s14, s9
 8011842:	f7fc bc9f 	b.w	800e184 <kalman_3gyro.constprop.0+0x14d4>
 8011846:	eeb0 7a64 	vmov.f32	s14, s9
 801184a:	f7ff bb68 	b.w	8010f1e <kalman_3gyro.constprop.0+0x426e>
 801184e:	eeb0 7a64 	vmov.f32	s14, s9
 8011852:	f7fc bcb7 	b.w	800e1c4 <kalman_3gyro.constprop.0+0x1514>
 8011856:	2200      	movs	r2, #0
 8011858:	2004      	movs	r0, #4
 801185a:	2301      	movs	r3, #1
 801185c:	2406      	movs	r4, #6
 801185e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011862:	9007      	str	r0, [sp, #28]
 8011864:	eef0 7a47 	vmov.f32	s15, s14
 8011868:	4696      	mov	lr, r2
 801186a:	f04f 0c03 	mov.w	ip, #3
 801186e:	2707      	movs	r7, #7
 8011870:	e61d      	b.n	80114ae <kalman_3gyro.constprop.0+0x47fe>
 8011872:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011bfc <kalman_3gyro.constprop.0+0x4f4c>
 8011876:	eeb0 7a64 	vmov.f32	s14, s9
 801187a:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 801187e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011886:	f140 80b9 	bpl.w	80119fc <kalman_3gyro.constprop.0+0x4d4c>
 801188a:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 801188e:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8011892:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011896:	ee34 4a63 	vsub.f32	s8, s8, s7
 801189a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801189e:	ee64 4a03 	vmul.f32	s9, s8, s6
 80118a2:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80118a6:	ee3b ba23 	vadd.f32	s22, s22, s7
 80118aa:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 80118ae:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80118b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b6:	f6ff acb3 	blt.w	8011220 <kalman_3gyro.constprop.0+0x4570>
 80118ba:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 80118be:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80118c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c6:	f140 80a0 	bpl.w	8011a0a <kalman_3gyro.constprop.0+0x4d5a>
 80118ca:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 80118ce:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 80118d2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80118d6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80118da:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80118de:	ee64 4a03 	vmul.f32	s9, s8, s6
 80118e2:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80118e6:	ee3b ba23 	vadd.f32	s22, s22, s7
 80118ea:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 80118ee:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	f63f acb3 	bhi.w	8011260 <kalman_3gyro.constprop.0+0x45b0>
 80118fa:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 80118fe:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011906:	f340 8086 	ble.w	8011a16 <kalman_3gyro.constprop.0+0x4d66>
 801190a:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 801190e:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8011912:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011916:	ee34 4a63 	vsub.f32	s8, s8, s7
 801191a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801191e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011922:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011926:	ee3b ba23 	vadd.f32	s22, s22, s7
 801192a:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 801192e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011936:	f63f acb3 	bhi.w	80112a0 <kalman_3gyro.constprop.0+0x45f0>
 801193a:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 801193e:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011946:	dd69      	ble.n	8011a1c <kalman_3gyro.constprop.0+0x4d6c>
 8011948:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 801194c:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8011950:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011954:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011958:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801195c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011960:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011964:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011968:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801196c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011974:	f63f acb4 	bhi.w	80112e0 <kalman_3gyro.constprop.0+0x4630>
 8011978:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801197c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011984:	f77f acb4 	ble.w	80112f0 <kalman_3gyro.constprop.0+0x4640>
 8011988:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801198c:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8011990:	ee78 3a64 	vsub.f32	s7, s16, s9
 8011994:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011998:	ee37 7a64 	vsub.f32	s14, s14, s9
 801199c:	ee25 5a23 	vmul.f32	s10, s10, s7
 80119a0:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80119a4:	ee3b ba04 	vadd.f32	s22, s22, s8
 80119a8:	f7fc bb7c 	b.w	800e0a4 <kalman_3gyro.constprop.0+0x13f4>
 80119ac:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 80119b0:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011c00 <kalman_3gyro.constprop.0+0x4f50>
 80119b4:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011c04 <kalman_3gyro.constprop.0+0x4f54>
 80119b8:	3301      	adds	r3, #1
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	2b31      	cmp	r3, #49	; 0x31
 80119be:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80119c2:	bf98      	it	ls
 80119c4:	eef0 7a47 	vmovls.f32	s15, s14
 80119c8:	f7fd bc1c 	b.w	800f204 <kalman_3gyro.constprop.0+0x2554>
 80119cc:	2a0a      	cmp	r2, #10
 80119ce:	d02c      	beq.n	8011a2a <kalman_3gyro.constprop.0+0x4d7a>
 80119d0:	2100      	movs	r1, #0
 80119d2:	3201      	adds	r2, #1
 80119d4:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 80119d8:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80119dc:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80119e0:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 80119e4:	f7fd bca7 	b.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 80119e8:	eeb0 7a64 	vmov.f32	s14, s9
 80119ec:	e7a5      	b.n	801193a <kalman_3gyro.constprop.0+0x4c8a>
 80119ee:	2305      	movs	r3, #5
 80119f0:	2108      	movs	r1, #8
 80119f2:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 80119f6:	2302      	movs	r3, #2
 80119f8:	9302      	str	r3, [sp, #8]
 80119fa:	e572      	b.n	80114e2 <kalman_3gyro.constprop.0+0x4832>
 80119fc:	eeb0 7a64 	vmov.f32	s14, s9
 8011a00:	f7ff bbf6 	b.w	80111f0 <kalman_3gyro.constprop.0+0x4540>
 8011a04:	eeb0 7a64 	vmov.f32	s14, s9
 8011a08:	e757      	b.n	80118ba <kalman_3gyro.constprop.0+0x4c0a>
 8011a0a:	eeb0 7a64 	vmov.f32	s14, s9
 8011a0e:	e40f      	b.n	8011230 <kalman_3gyro.constprop.0+0x4580>
 8011a10:	eeb0 7a64 	vmov.f32	s14, s9
 8011a14:	e771      	b.n	80118fa <kalman_3gyro.constprop.0+0x4c4a>
 8011a16:	eeb0 7a64 	vmov.f32	s14, s9
 8011a1a:	e429      	b.n	8011270 <kalman_3gyro.constprop.0+0x45c0>
 8011a1c:	eeb0 7a64 	vmov.f32	s14, s9
 8011a20:	e446      	b.n	80112b0 <kalman_3gyro.constprop.0+0x4600>
 8011a22:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011bfc <kalman_3gyro.constprop.0+0x4f4c>
 8011a26:	f7fc bb6d 	b.w	800e104 <kalman_3gyro.constprop.0+0x1454>
 8011a2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a2c:	ed94 3a00 	vldr	s6, [r4]
 8011a30:	edd2 5a00 	vldr	s11, [r2]
 8011a34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a36:	edd0 3a00 	vldr	s7, [r0]
 8011a3a:	ed92 1a00 	vldr	s2, [r2]
 8011a3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011a40:	ed91 4a00 	vldr	s8, [r1]
 8011a44:	edd2 4a00 	vldr	s9, [r2]
 8011a48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011a4a:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 8011a4e:	ed92 2a00 	vldr	s4, [r2]
 8011a52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a54:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011a58:	edd2 7a00 	vldr	s15, [r2]
 8011a5c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011a5e:	edd2 2a00 	vldr	s5, [r2]
 8011a62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011a64:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011a68:	edd2 1a00 	vldr	s3, [r2]
 8011a6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011a6e:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011a72:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011a76:	ed92 3a00 	vldr	s6, [r2]
 8011a7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a7c:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011a80:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011a84:	edd2 3a00 	vldr	s7, [r2]
 8011a88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a8a:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011a8e:	ed92 4a00 	vldr	s8, [r2]
 8011a92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011a94:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011a98:	ed92 2a00 	vldr	s4, [r2]
 8011a9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011a9e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011aa2:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8011aa6:	edd2 2a00 	vldr	s5, [r2]
 8011aaa:	ed91 3a00 	vldr	s6, [r1]
 8011aae:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011ab2:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011ab6:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011aba:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011abe:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8011ac2:	ed90 4a00 	vldr	s8, [r0]
 8011ac6:	edd2 3a00 	vldr	s7, [r2]
 8011aca:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011ace:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011ad2:	ed91 2a00 	vldr	s4, [r1]
 8011ad6:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011ada:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011ade:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011ae2:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8011ae6:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011aea:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011aee:	ed90 4a00 	vldr	s8, [r0]
 8011af2:	edd2 2a00 	vldr	s5, [r2]
 8011af6:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011afa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011afe:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8011b02:	edd1 3a00 	vldr	s7, [r1]
 8011b06:	ed90 3a00 	vldr	s6, [r0]
 8011b0a:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011b0e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011b12:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8011b16:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011b1a:	ed92 4a00 	vldr	s8, [r2]
 8011b1e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011b22:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011b26:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011b2a:	edd0 3a00 	vldr	s7, [r0]
 8011b2e:	edd4 2a00 	vldr	s5, [r4]
 8011b32:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8011b36:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011b3a:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011b3e:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8011b42:	ed91 3a00 	vldr	s6, [r1]
 8011b46:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b4a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011b4e:	ed92 4a00 	vldr	s8, [r2]
 8011b52:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8011b56:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011b5a:	edd4 3a00 	vldr	s7, [r4]
 8011b5e:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8011b62:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011b66:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b6a:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011b6e:	ed91 4a00 	vldr	s8, [r1]
 8011b72:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8011b76:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b7a:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011b7e:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8011b82:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011b86:	edc1 4a00 	vstr	s9, [r1]
 8011b8a:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011b8e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011b92:	edc1 5a00 	vstr	s11, [r1]
 8011b96:	f240 1501 	movw	r5, #257	; 0x101
 8011b9a:	3201      	adds	r2, #1
 8011b9c:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011ba0:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8011ba4:	edc1 7a00 	vstr	s15, [r1]
 8011ba8:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011bac:	2800      	cmp	r0, #0
 8011bae:	f43d abc2 	beq.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011bb8:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011bbc:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011bc0:	f88b 2001 	strb.w	r2, [fp, #1]
 8011bc4:	f7fd bbb7 	b.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 8011bc8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011bcc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011bd0:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8011bd4:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011bd8:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011bdc:	f7fd bb20 	b.w	800f220 <kalman_3gyro.constprop.0+0x2570>
 8011be0:	2a00      	cmp	r2, #0
 8011be2:	f340 80c1 	ble.w	8011d68 <kalman_3gyro.constprop.0+0x50b8>
 8011be6:	2300      	movs	r3, #0
 8011be8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011bec:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011bf0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011bf4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011bf8:	f7fc bfcf 	b.w	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 8011bfc:	00000000 	.word	0x00000000
 8011c00:	3e4cccce 	.word	0x3e4cccce
 8011c04:	3eaaaaab 	.word	0x3eaaaaab
 8011c08:	3e999998 	.word	0x3e999998
 8011c0c:	3f99999a 	.word	0x3f99999a
 8011c10:	3dccccd0 	.word	0x3dccccd0
 8011c14:	3f8ccccd 	.word	0x3f8ccccd
 8011c18:	3e4ccccd 	.word	0x3e4ccccd
 8011c1c:	3d088889 	.word	0x3d088889
 8011c20:	3d0d3dcb 	.word	0x3d0d3dcb
 8011c24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c30:	d55b      	bpl.n	8011cea <kalman_3gyro.constprop.0+0x503a>
 8011c32:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011c10 <kalman_3gyro.constprop.0+0x4f60>
 8011c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011c3e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011c42:	eef0 5a66 	vmov.f32	s11, s13
 8011c46:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011c4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c52:	eeb0 7a65 	vmov.f32	s14, s11
 8011c56:	db5b      	blt.n	8011d10 <kalman_3gyro.constprop.0+0x5060>
 8011c58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	d55b      	bpl.n	8011d1e <kalman_3gyro.constprop.0+0x506e>
 8011c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c6a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011c6e:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011c08 <kalman_3gyro.constprop.0+0x4f58>
 8011c72:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011c0c <kalman_3gyro.constprop.0+0x4f5c>
 8011c76:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011c7a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011c7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c86:	db5b      	blt.n	8011d40 <kalman_3gyro.constprop.0+0x5090>
 8011c88:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c94:	d55b      	bpl.n	8011d4e <kalman_3gyro.constprop.0+0x509e>
 8011c96:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011c9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c9e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011ca2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011ca6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011caa:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011cae:	f7ff bb7e 	b.w	80113ae <kalman_3gyro.constprop.0+0x46fe>
 8011cb2:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011cb6:	2b27      	cmp	r3, #39	; 0x27
 8011cb8:	f200 80c3 	bhi.w	8011e42 <kalman_3gyro.constprop.0+0x5192>
 8011cbc:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011cc0:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011cc4:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011cc8:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011ccc:	2201      	movs	r2, #1
 8011cce:	4413      	add	r3, r2
 8011cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cd4:	bf14      	ite	ne
 8011cd6:	b29b      	uxthne	r3, r3
 8011cd8:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011cdc:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011ce0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011ce4:	9b01      	ldr	r3, [sp, #4]
 8011ce6:	f7fd bb26 	b.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 8011cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011cee:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf6:	d5af      	bpl.n	8011c58 <kalman_3gyro.constprop.0+0x4fa8>
 8011cf8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011cfc:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011c10 <kalman_3gyro.constprop.0+0x4f60>
 8011d00:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8011c14 <kalman_3gyro.constprop.0+0x4f64>
 8011d04:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d08:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011d0c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011d10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d14:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d1c:	dbad      	blt.n	8011c7a <kalman_3gyro.constprop.0+0x4fca>
 8011d1e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2a:	d5ad      	bpl.n	8011c88 <kalman_3gyro.constprop.0+0x4fd8>
 8011d2c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d30:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011d34:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011d38:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011d3c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011d40:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8011d44:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4c:	dbad      	blt.n	8011caa <kalman_3gyro.constprop.0+0x4ffa>
 8011d4e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d56:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011c18 <kalman_3gyro.constprop.0+0x4f68>
 8011d5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011d5e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d62:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011d66:	e7a0      	b.n	8011caa <kalman_3gyro.constprop.0+0x4ffa>
 8011d68:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011d6c:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011d70:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011d74:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011d78:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d7c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011d80:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d84:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011d88:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011d8c:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011d90:	f7fc bf03 	b.w	800eb9a <kalman_3gyro.constprop.0+0x1eea>
 8011d94:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011c1c <kalman_3gyro.constprop.0+0x4f6c>
 8011d98:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011c20 <kalman_3gyro.constprop.0+0x4f70>
 8011d9c:	ac33      	add	r4, sp, #204	; 0xcc
 8011d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8011da2:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011da6:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011daa:	eef0 7a66 	vmov.f32	s15, s13
 8011dae:	3001      	adds	r0, #1
 8011db0:	461a      	mov	r2, r3
 8011db2:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011db6:	320c      	adds	r2, #12
 8011db8:	428a      	cmp	r2, r1
 8011dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011dbe:	d1f8      	bne.n	8011db2 <kalman_3gyro.constprop.0+0x5102>
 8011dc0:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011dc4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011dc8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011dcc:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011dd0:	330c      	adds	r3, #12
 8011dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011dd6:	428b      	cmp	r3, r1
 8011dd8:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011ddc:	d1f6      	bne.n	8011dcc <kalman_3gyro.constprop.0+0x511c>
 8011dde:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011de2:	2802      	cmp	r0, #2
 8011de4:	f103 0104 	add.w	r1, r3, #4
 8011de8:	ece4 6a01 	vstmia	r4!, {s13}
 8011dec:	d1d9      	bne.n	8011da2 <kalman_3gyro.constprop.0+0x50f2>
 8011dee:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011df2:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011df6:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011dfa:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011dfe:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011e02:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e0a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e12:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011e16:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e1e:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011e22:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011e26:	f57d aa62 	bpl.w	800f2ee <kalman_3gyro.constprop.0+0x263e>
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	9b01      	ldr	r3, [sp, #4]
 8011e2e:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011e32:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011e36:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011e3a:	f88b 2001 	strb.w	r2, [fp, #1]
 8011e3e:	f7fd ba7a 	b.w	800f336 <kalman_3gyro.constprop.0+0x2686>
 8011e42:	9b08      	ldr	r3, [sp, #32]
 8011e44:	6999      	ldr	r1, [r3, #24]
 8011e46:	69da      	ldr	r2, [r3, #28]
 8011e48:	6a1b      	ldr	r3, [r3, #32]
 8011e4a:	9181      	str	r1, [sp, #516]	; 0x204
 8011e4c:	9282      	str	r2, [sp, #520]	; 0x208
 8011e4e:	9383      	str	r3, [sp, #524]	; 0x20c
 8011e50:	e73a      	b.n	8011cc8 <kalman_3gyro.constprop.0+0x5018>
 8011e52:	bf00      	nop
 8011e54:	0000      	movs	r0, r0
	...

08011e58 <iNemoEngine_API_Update>:
 8011e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e5c:	ed2d 8b0c 	vpush	{d8-d13}
 8011e60:	4604      	mov	r4, r0
 8011e62:	b0c1      	sub	sp, #260	; 0x104
 8011e64:	460d      	mov	r5, r1
 8011e66:	4617      	mov	r7, r2
 8011e68:	eeb0 8a40 	vmov.f32	s16, s0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 8253 	beq.w	8012318 <iNemoEngine_API_Update+0x4c0>
 8011e72:	461e      	mov	r6, r3
 8011e74:	463b      	mov	r3, r7
 8011e76:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011e7a:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011e7e:	6859      	ldr	r1, [r3, #4]
 8011e80:	689a      	ldr	r2, [r3, #8]
 8011e82:	ab33      	add	r3, sp, #204	; 0xcc
 8011e84:	c307      	stmia	r3!, {r0, r1, r2}
 8011e86:	6879      	ldr	r1, [r7, #4]
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	6838      	ldr	r0, [r7, #0]
 8011e8c:	ab30      	add	r3, sp, #192	; 0xc0
 8011e8e:	c307      	stmia	r3!, {r0, r1, r2}
 8011e90:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011e94:	6879      	ldr	r1, [r7, #4]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	ab36      	add	r3, sp, #216	; 0xd8
 8011e9a:	c307      	stmia	r3!, {r0, r1, r2}
 8011e9c:	f1bc 0f00 	cmp.w	ip, #0
 8011ea0:	d005      	beq.n	8011eae <iNemoEngine_API_Update+0x56>
 8011ea2:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011ea6:	7923      	ldrb	r3, [r4, #4]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	f080 829b 	bcs.w	80123e4 <iNemoEngine_API_Update+0x58c>
 8011eae:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011eb2:	f10d 0a14 	add.w	sl, sp, #20
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	4649      	mov	r1, r9
 8011eba:	4650      	mov	r0, sl
 8011ebc:	aa33      	add	r2, sp, #204	; 0xcc
 8011ebe:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011ec2:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011ec6:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011eca:	f7f9 fb63 	bl	800b594 <rotVect>
 8011ece:	aa36      	add	r2, sp, #216	; 0xd8
 8011ed0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011ed4:	a808      	add	r0, sp, #32
 8011ed6:	f7f9 fb5d 	bl	800b594 <rotVect>
 8011eda:	aa30      	add	r2, sp, #192	; 0xc0
 8011edc:	4640      	mov	r0, r8
 8011ede:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011ee2:	f7f9 fb57 	bl	800b594 <rotVect>
 8011ee6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011eea:	b923      	cbnz	r3, 8011ef6 <iNemoEngine_API_Update+0x9e>
 8011eec:	4b8c      	ldr	r3, [pc, #560]	; (8012120 <iNemoEngine_API_Update+0x2c8>)
 8011eee:	930c      	str	r3, [sp, #48]	; 0x30
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	920b      	str	r2, [sp, #44]	; 0x2c
 8011ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ef6:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011efa:	2f09      	cmp	r7, #9
 8011efc:	d851      	bhi.n	8011fa2 <iNemoEngine_API_Update+0x14a>
 8011efe:	ed9d ba06 	vldr	s22, [sp, #24]
 8011f02:	eddd ba05 	vldr	s23, [sp, #20]
 8011f06:	eddd aa07 	vldr	s21, [sp, #28]
 8011f0a:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011f0e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011f12:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011f16:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011f1a:	ee17 0a90 	vmov	r0, s15
 8011f1e:	f7ee fb13 	bl	8000548 <__aeabi_f2d>
 8011f22:	ec41 0b10 	vmov	d0, r0, r1
 8011f26:	f003 ff5d 	bl	8015de4 <sqrt>
 8011f2a:	ec51 0b10 	vmov	r0, r1, d0
 8011f2e:	f7ee fe3b 	bl	8000ba8 <__aeabi_d2f>
 8011f32:	ee07 0a90 	vmov	s15, r0
 8011f36:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011f3a:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011f3e:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011f42:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011f46:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011f4a:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011f4e:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011f52:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011f56:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011f5a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011f5e:	ee17 0a90 	vmov	r0, s15
 8011f62:	edcd ba05 	vstr	s23, [sp, #20]
 8011f66:	ed8d ba06 	vstr	s22, [sp, #24]
 8011f6a:	edcd aa07 	vstr	s21, [sp, #28]
 8011f6e:	f7ee faeb 	bl	8000548 <__aeabi_f2d>
 8011f72:	ec41 0b10 	vmov	d0, r0, r1
 8011f76:	f003 ff35 	bl	8015de4 <sqrt>
 8011f7a:	ec51 0b10 	vmov	r0, r1, d0
 8011f7e:	f7ee fe13 	bl	8000ba8 <__aeabi_d2f>
 8011f82:	ee07 0a90 	vmov	s15, r0
 8011f86:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011f8a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011f8e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011f92:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011f96:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011f9a:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011f9e:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011fa2:	7923      	ldrb	r3, [r4, #4]
 8011fa4:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	f080 80dd 	bcs.w	8012168 <iNemoEngine_API_Update+0x310>
 8011fae:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011fb2:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011fb6:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011fba:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011fbe:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011fc2:	3701      	adds	r7, #1
 8011fc4:	aa33      	add	r2, sp, #204	; 0xcc
 8011fc6:	4649      	mov	r1, r9
 8011fc8:	4640      	mov	r0, r8
 8011fca:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011fce:	9303      	str	r3, [sp, #12]
 8011fd0:	f7f9 fae0 	bl	800b594 <rotVect>
 8011fd4:	9b03      	ldr	r3, [sp, #12]
 8011fd6:	f8db 1000 	ldr.w	r1, [fp]
 8011fda:	6818      	ldr	r0, [r3, #0]
 8011fdc:	f8da 2000 	ldr.w	r2, [sl]
 8011fe0:	6833      	ldr	r3, [r6, #0]
 8011fe2:	61ab      	str	r3, [r5, #24]
 8011fe4:	60e8      	str	r0, [r5, #12]
 8011fe6:	6129      	str	r1, [r5, #16]
 8011fe8:	616a      	str	r2, [r5, #20]
 8011fea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011fee:	9301      	str	r3, [sp, #4]
 8011ff0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011ff4:	4641      	mov	r1, r8
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	462a      	mov	r2, r5
 8011ffa:	f105 031c 	add.w	r3, r5, #28
 8011ffe:	f105 000c 	add.w	r0, r5, #12
 8012002:	f7fa fd85 	bl	800cb10 <output_update>
 8012006:	ed95 8a00 	vldr	s16, [r5]
 801200a:	edd5 9a01 	vldr	s19, [r5, #4]
 801200e:	eeb0 0a48 	vmov.f32	s0, s16
 8012012:	f003 fe7b 	bl	8015d0c <sinf>
 8012016:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012124 <iNemoEngine_API_Update+0x2cc>
 801201a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8012128 <iNemoEngine_API_Update+0x2d0>
 801201e:	ee60 8a00 	vmul.f32	s17, s0, s0
 8012022:	eef0 6ae9 	vabs.f32	s13, s19
 8012026:	eee8 7aa7 	vfma.f32	s15, s17, s15
 801202a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012032:	eef0 8a67 	vmov.f32	s17, s15
 8012036:	d56e      	bpl.n	8012116 <iNemoEngine_API_Update+0x2be>
 8012038:	eeb0 0a69 	vmov.f32	s0, s19
 801203c:	f003 fea8 	bl	8015d90 <tanf>
 8012040:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012044:	eea0 9a28 	vfma.f32	s18, s0, s17
 8012048:	eef1 7ac9 	vsqrt.f32	s15, s18
 801204c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801212c <iNemoEngine_API_Update+0x2d4>
 8012050:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8012140 <iNemoEngine_API_Update+0x2e8>
 8012054:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8012058:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801205c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012064:	bf88      	it	hi
 8012066:	eef0 7a66 	vmovhi.f32	s15, s13
 801206a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012072:	bfb8      	it	lt
 8012074:	eef0 7a47 	vmovlt.f32	s15, s14
 8012078:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 801207c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012080:	4c2b      	ldr	r4, [pc, #172]	; (8012130 <iNemoEngine_API_Update+0x2d8>)
 8012082:	bba3      	cbnz	r3, 80120ee <iNemoEngine_API_Update+0x296>
 8012084:	6820      	ldr	r0, [r4, #0]
 8012086:	edd5 0a08 	vldr	s1, [r5, #32]
 801208a:	ed95 0a07 	vldr	s0, [r5, #28]
 801208e:	edd5 9a03 	vldr	s19, [r5, #12]
 8012092:	ed95 aa04 	vldr	s20, [r5, #16]
 8012096:	ed95 9a05 	vldr	s18, [r5, #20]
 801209a:	edd5 8a06 	vldr	s17, [r5, #24]
 801209e:	f7f9 fb4b 	bl	800b738 <findDirection>
 80120a2:	6020      	str	r0, [r4, #0]
 80120a4:	2805      	cmp	r0, #5
 80120a6:	f200 833d 	bhi.w	8012724 <iNemoEngine_API_Update+0x8cc>
 80120aa:	e8df f010 	tbh	[pc, r0, lsl #1]
 80120ae:	000a      	.short	0x000a
 80120b0:	00060137 	.word	0x00060137
 80120b4:	00060169 	.word	0x00060169
 80120b8:	000a      	.short	0x000a
 80120ba:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012134 <iNemoEngine_API_Update+0x2dc>
 80120be:	ee38 8a27 	vadd.f32	s16, s16, s15
 80120c2:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012164 <iNemoEngine_API_Update+0x30c>
 80120c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ce:	bfa8      	it	ge
 80120d0:	ee38 8a67 	vsubge.f32	s16, s16, s15
 80120d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80120d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120dc:	f100 8111 	bmi.w	8012302 <iNemoEngine_API_Update+0x4aa>
 80120e0:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80120e4:	b041      	add	sp, #260	; 0x104
 80120e6:	ecbd 8b0c 	vpop	{d8-d13}
 80120ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ee:	ed95 9a05 	vldr	s18, [r5, #20]
 80120f2:	6820      	ldr	r0, [r4, #0]
 80120f4:	edd5 0a07 	vldr	s1, [r5, #28]
 80120f8:	ed95 0a08 	vldr	s0, [r5, #32]
 80120fc:	edd5 9a04 	vldr	s19, [r5, #16]
 8012100:	ed95 aa03 	vldr	s20, [r5, #12]
 8012104:	edd5 8a06 	vldr	s17, [r5, #24]
 8012108:	eeb1 1a41 	vneg.f32	s2, s2
 801210c:	eeb1 9a49 	vneg.f32	s18, s18
 8012110:	f7f9 fb12 	bl	800b738 <findDirection>
 8012114:	e7c5      	b.n	80120a2 <iNemoEngine_API_Update+0x24a>
 8012116:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012138 <iNemoEngine_API_Update+0x2e0>
 801211a:	eea8 9aa7 	vfma.f32	s18, s17, s15
 801211e:	e793      	b.n	8012048 <iNemoEngine_API_Update+0x1f0>
 8012120:	3f333333 	.word	0x3f333333
 8012124:	00000000 	.word	0x00000000
 8012128:	3fbc430e 	.word	0x3fbc430e
 801212c:	40490fdb 	.word	0x40490fdb
 8012130:	200002e0 	.word	0x200002e0
 8012134:	43340000 	.word	0x43340000
 8012138:	42c6ab07 	.word	0x42c6ab07
 801213c:	3c03126f 	.word	0x3c03126f
 8012140:	3c8efa35 	.word	0x3c8efa35
 8012144:	3e4ccccd 	.word	0x3e4ccccd
 8012148:	3fb50481 	.word	0x3fb50481
 801214c:	3ed93dd9 	.word	0x3ed93dd9
 8012150:	3b656042 	.word	0x3b656042
 8012154:	42c80000 	.word	0x42c80000
 8012158:	3a83126f 	.word	0x3a83126f
 801215c:	3d4ccccd 	.word	0x3d4ccccd
 8012160:	3f333333 	.word	0x3f333333
 8012164:	43b40000 	.word	0x43b40000
 8012168:	ee07 3a90 	vmov	s15, r3
 801216c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012170:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 801213c <iNemoEngine_API_Update+0x2e4>
 8012174:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8012140 <iNemoEngine_API_Update+0x2e8>
 8012178:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8012150 <iNemoEngine_API_Update+0x2f8>
 801217c:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 801214c <iNemoEngine_API_Update+0x2f4>
 8012180:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8012148 <iNemoEngine_API_Update+0x2f0>
 8012184:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8012144 <iNemoEngine_API_Update+0x2ec>
 8012188:	ee27 1a88 	vmul.f32	s2, s15, s16
 801218c:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8012190:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8012194:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8012198:	2700      	movs	r7, #0
 801219a:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 801219e:	f04f 0c00 	mov.w	ip, #0
 80121a2:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 80121a6:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 80121aa:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80121ae:	edd3 5a00 	vldr	s11, [r3]
 80121b2:	f8c3 c000 	str.w	ip, [r3]
 80121b6:	eef1 7ac5 	vsqrt.f32	s15, s10
 80121ba:	f604 1364 	addw	r3, r4, #2404	; 0x964
 80121be:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80121c2:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 80121c6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 80121ca:	edd7 4a00 	vldr	s9, [r7]
 80121ce:	f8c7 c000 	str.w	ip, [r7]
 80121d2:	ed93 5a00 	vldr	s10, [r3]
 80121d6:	f8c3 c000 	str.w	ip, [r3]
 80121da:	7963      	ldrb	r3, [r4, #5]
 80121dc:	ee64 4a84 	vmul.f32	s9, s9, s8
 80121e0:	ee25 5a04 	vmul.f32	s10, s10, s8
 80121e4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	eec3 3a27 	vdiv.f32	s7, s6, s15
 80121ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80121f2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80121f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80121fa:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 80121fe:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8012202:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8012206:	f000 812e 	beq.w	8012466 <iNemoEngine_API_Update+0x60e>
 801220a:	2b02      	cmp	r3, #2
 801220c:	f000 8122 	beq.w	8012454 <iNemoEngine_API_Update+0x5fc>
 8012210:	2b00      	cmp	r3, #0
 8012212:	f000 80ef 	beq.w	80123f4 <iNemoEngine_API_Update+0x59c>
 8012216:	edd4 0a05 	vldr	s1, [r4, #20]
 801221a:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8012154 <iNemoEngine_API_Update+0x2fc>
 801221e:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8012158 <iNemoEngine_API_Update+0x300>
 8012222:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012226:	ee60 0a85 	vmul.f32	s1, s1, s10
 801222a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801222e:	8863      	ldrh	r3, [r4, #2]
 8012230:	1e5a      	subs	r2, r3, #1
 8012232:	2a12      	cmp	r2, #18
 8012234:	f200 80e7 	bhi.w	8012406 <iNemoEngine_API_Update+0x5ae>
 8012238:	3301      	adds	r3, #1
 801223a:	b21a      	sxth	r2, r3
 801223c:	b29b      	uxth	r3, r3
 801223e:	2b03      	cmp	r3, #3
 8012240:	8062      	strh	r2, [r4, #2]
 8012242:	f240 8115 	bls.w	8012470 <iNemoEngine_API_Update+0x618>
 8012246:	ee05 2a90 	vmov	s11, r2
 801224a:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 801215c <iNemoEngine_API_Update+0x304>
 801224e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012252:	ee65 5a85 	vmul.f32	s11, s11, s10
 8012256:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 801225a:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 801225e:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8012262:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8012160 <iNemoEngine_API_Update+0x308>
 8012266:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 801226a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801226e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012272:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012276:	ee27 7a05 	vmul.f32	s14, s14, s10
 801227a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801227e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8012282:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8012286:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801228a:	aa1a      	add	r2, sp, #104	; 0x68
 801228c:	af16      	add	r7, sp, #88	; 0x58
 801228e:	e9cd 7200 	strd	r7, r2, [sp]
 8012292:	ab12      	add	r3, sp, #72	; 0x48
 8012294:	aa1e      	add	r2, sp, #120	; 0x78
 8012296:	4641      	mov	r1, r8
 8012298:	4620      	mov	r0, r4
 801229a:	f7fa fd09 	bl	800ccb0 <kalman_3gyro.constprop.0>
 801229e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80122a0:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 80122a4:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 80122a8:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 80122ac:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 80122b0:	f8c7 a000 	str.w	sl, [r7]
 80122b4:	f604 1744 	addw	r7, r4, #2372	; 0x944
 80122b8:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80122bc:	f8c7 e000 	str.w	lr, [r7]
 80122c0:	f604 1748 	addw	r7, r4, #2376	; 0x948
 80122c4:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 80122c8:	f8c7 c000 	str.w	ip, [r7]
 80122cc:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 80122d0:	6030      	str	r0, [r6, #0]
 80122d2:	60f3      	str	r3, [r6, #12]
 80122d4:	6071      	str	r1, [r6, #4]
 80122d6:	60b2      	str	r2, [r6, #8]
 80122d8:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 80122dc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80122e0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80122e4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80122e6:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 80122ea:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 80122ee:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 80122f2:	edc3 7a00 	vstr	s15, [r3]
 80122f6:	f8cb e000 	str.w	lr, [fp]
 80122fa:	f8ca c000 	str.w	ip, [sl]
 80122fe:	6030      	str	r0, [r6, #0]
 8012300:	e65f      	b.n	8011fc2 <iNemoEngine_API_Update+0x16a>
 8012302:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8012164 <iNemoEngine_API_Update+0x30c>
 8012306:	ee38 8a27 	vadd.f32	s16, s16, s15
 801230a:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801230e:	b041      	add	sp, #260	; 0x104
 8012310:	ecbd 8b0c 	vpop	{d8-d13}
 8012314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012318:	ae0e      	add	r6, sp, #56	; 0x38
 801231a:	e5ab      	b.n	8011e74 <iNemoEngine_API_Update+0x1c>
 801231c:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012320:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012324:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012328:	eee9 8a8a 	vfma.f32	s17, s19, s20
 801232c:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012330:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012334:	ee17 0a90 	vmov	r0, s15
 8012338:	f7ee f906 	bl	8000548 <__aeabi_f2d>
 801233c:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	ee17 0a90 	vmov	r0, s15
 8012348:	ec43 2b18 	vmov	d8, r2, r3
 801234c:	f7ee f8fc 	bl	8000548 <__aeabi_f2d>
 8012350:	eeb0 1a48 	vmov.f32	s2, s16
 8012354:	eef0 1a68 	vmov.f32	s3, s17
 8012358:	ec41 0b10 	vmov	d0, r0, r1
 801235c:	f003 fd40 	bl	8015de0 <atan2>
 8012360:	a3f3      	add	r3, pc, #972	; (adr r3, 8012730 <iNemoEngine_API_Update+0x8d8>)
 8012362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012366:	ec51 0b10 	vmov	r0, r1, d0
 801236a:	f7ee f945 	bl	80005f8 <__aeabi_dmul>
 801236e:	4bf2      	ldr	r3, [pc, #968]	; (8012738 <iNemoEngine_API_Update+0x8e0>)
 8012370:	2200      	movs	r2, #0
 8012372:	f7ed ff89 	bl	8000288 <__aeabi_dsub>
 8012376:	f7ee fc17 	bl	8000ba8 <__aeabi_d2f>
 801237a:	ee08 0a10 	vmov	s16, r0
 801237e:	e6a0      	b.n	80120c2 <iNemoEngine_API_Update+0x26a>
 8012380:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012384:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012388:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801238c:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012390:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012394:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012398:	ee17 0a90 	vmov	r0, s15
 801239c:	f7ee f8d4 	bl	8000548 <__aeabi_f2d>
 80123a0:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80123a4:	4602      	mov	r2, r0
 80123a6:	460b      	mov	r3, r1
 80123a8:	ee17 0a90 	vmov	r0, s15
 80123ac:	ec43 2b18 	vmov	d8, r2, r3
 80123b0:	f7ee f8ca 	bl	8000548 <__aeabi_f2d>
 80123b4:	eeb0 1a48 	vmov.f32	s2, s16
 80123b8:	eef0 1a68 	vmov.f32	s3, s17
 80123bc:	ec41 0b10 	vmov	d0, r0, r1
 80123c0:	f003 fd0e 	bl	8015de0 <atan2>
 80123c4:	a3da      	add	r3, pc, #872	; (adr r3, 8012730 <iNemoEngine_API_Update+0x8d8>)
 80123c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ca:	ec51 0b10 	vmov	r0, r1, d0
 80123ce:	f7ee f913 	bl	80005f8 <__aeabi_dmul>
 80123d2:	4bd9      	ldr	r3, [pc, #868]	; (8012738 <iNemoEngine_API_Update+0x8e0>)
 80123d4:	2200      	movs	r2, #0
 80123d6:	f7ed ff59 	bl	800028c <__adddf3>
 80123da:	f7ee fbe5 	bl	8000ba8 <__aeabi_d2f>
 80123de:	ee08 0a10 	vmov	s16, r0
 80123e2:	e66e      	b.n	80120c2 <iNemoEngine_API_Update+0x26a>
 80123e4:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	dd44      	ble.n	8012476 <iNemoEngine_API_Update+0x61e>
 80123ec:	3b01      	subs	r3, #1
 80123ee:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 80123f2:	e55c      	b.n	8011eae <iNemoEngine_API_Update+0x56>
 80123f4:	8863      	ldrh	r3, [r4, #2]
 80123f6:	eddf 0ad1 	vldr	s1, [pc, #836]	; 801273c <iNemoEngine_API_Update+0x8e4>
 80123fa:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8012740 <iNemoEngine_API_Update+0x8e8>
 80123fe:	1e5a      	subs	r2, r3, #1
 8012400:	2a12      	cmp	r2, #18
 8012402:	f67f af19 	bls.w	8012238 <iNemoEngine_API_Update+0x3e0>
 8012406:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 801240a:	eddf 2ace 	vldr	s5, [pc, #824]	; 8012744 <iNemoEngine_API_Update+0x8ec>
 801240e:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8012412:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8012416:	ee34 4a22 	vadd.f32	s8, s8, s5
 801241a:	ee64 7aa6 	vmul.f32	s15, s9, s13
 801241e:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8012422:	2300      	movs	r3, #0
 8012424:	8063      	strh	r3, [r4, #2]
 8012426:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 801242a:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 801242e:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8012748 <iNemoEngine_API_Update+0x8f0>
 8012432:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8012436:	ee65 6a26 	vmul.f32	s13, s10, s13
 801243a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801243e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012442:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8012446:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801244a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801244e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8012452:	e71a      	b.n	801228a <iNemoEngine_API_Update+0x432>
 8012454:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8012458:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801245c:	edd4 0a05 	vldr	s1, [r4, #20]
 8012460:	ed9f 0aba 	vldr	s0, [pc, #744]	; 801274c <iNemoEngine_API_Update+0x8f4>
 8012464:	e6e3      	b.n	801222e <iNemoEngine_API_Update+0x3d6>
 8012466:	edd4 0a05 	vldr	s1, [r4, #20]
 801246a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8012750 <iNemoEngine_API_Update+0x8f8>
 801246e:	e6de      	b.n	801222e <iNemoEngine_API_Update+0x3d6>
 8012470:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8012754 <iNemoEngine_API_Update+0x8fc>
 8012474:	e6ef      	b.n	8012256 <iNemoEngine_API_Update+0x3fe>
 8012476:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 801247a:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 801247e:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8012482:	ed97 5a00 	vldr	s10, [r7]
 8012486:	ed92 da00 	vldr	s26, [r2]
 801248a:	ed93 6a00 	vldr	s12, [r3]
 801248e:	ed9f 0aab 	vldr	s0, [pc, #684]	; 801273c <iNemoEngine_API_Update+0x8e4>
 8012492:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8012496:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 801249a:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 801249e:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 80124a2:	ed91 3a00 	vldr	s6, [r1]
 80124a6:	ed92 1a00 	vldr	s2, [r2]
 80124aa:	ed97 7a00 	vldr	s14, [r7]
 80124ae:	edd3 3a00 	vldr	s7, [r3]
 80124b2:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 80124b6:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 80124ba:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 80124be:	ed91 ba00 	vldr	s22, [r1]
 80124c2:	edd0 6a00 	vldr	s13, [r0]
 80124c6:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 80124ca:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 80124ce:	edd1 aa00 	vldr	s21, [r1]
 80124d2:	ed92 2a00 	vldr	s4, [r2]
 80124d6:	ee96 7a04 	vfnms.f32	s14, s12, s8
 80124da:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 80124de:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 80124e2:	eed1 3a04 	vfnms.f32	s7, s2, s8
 80124e6:	f204 6234 	addw	r2, r4, #1588	; 0x634
 80124ea:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 80124ee:	edd0 7a00 	vldr	s15, [r0]
 80124f2:	edd2 1a00 	vldr	s3, [r2]
 80124f6:	ed93 ca00 	vldr	s24, [r3]
 80124fa:	eed5 6a04 	vfnms.f32	s13, s10, s8
 80124fe:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8012502:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 8012506:	ed91 5a00 	vldr	s10, [r1]
 801250a:	edd0 5a00 	vldr	s11, [r0]
 801250e:	edd7 9a00 	vldr	s19, [r7]
 8012512:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8012516:	eed5 1a04 	vfnms.f32	s3, s10, s8
 801251a:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 801251e:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8012522:	edd0 2a00 	vldr	s5, [r0]
 8012526:	edd3 0a00 	vldr	s1, [r3]
 801252a:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 801252e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012532:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8012536:	edd7 7a00 	vldr	s15, [r7]
 801253a:	edd0 5a00 	vldr	s11, [r0]
 801253e:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 8012542:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 8012546:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 801254a:	ed93 6a00 	vldr	s12, [r3]
 801254e:	edda ba00 	vldr	s23, [sl]
 8012552:	ed99 5a00 	vldr	s10, [r9]
 8012556:	ee76 6a83 	vadd.f32	s13, s13, s6
 801255a:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 801255e:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8012562:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8012566:	eed7 5a84 	vfnms.f32	s11, s15, s8
 801256a:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 801256e:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8012572:	eddc 4a00 	vldr	s9, [ip]
 8012576:	edd3 7a00 	vldr	s15, [r3]
 801257a:	ed98 1a00 	vldr	s2, [r8]
 801257e:	edde 8a00 	vldr	s17, [lr]
 8012582:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8012586:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 801258a:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 801258e:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8012592:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8012596:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 801259a:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 801259e:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 80125a2:	ed9c aa00 	vldr	s20, [ip]
 80125a6:	eeed 6a03 	vfma.f32	s13, s26, s6
 80125aa:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 80125ae:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 80125b2:	ed92 da00 	vldr	s26, [r2]
 80125b6:	eeab 7a03 	vfma.f32	s14, s22, s6
 80125ba:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 80125be:	ed91 ba00 	vldr	s22, [r1]
 80125c2:	eef0 ca61 	vmov.f32	s25, s3
 80125c6:	eddb 1a00 	vldr	s3, [fp]
 80125ca:	edd3 ba00 	vldr	s23, [r3]
 80125ce:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 80125d2:	eedb 7a84 	vfnms.f32	s15, s23, s8
 80125d6:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 80125da:	1c53      	adds	r3, r2, #1
 80125dc:	eeea 3a83 	vfma.f32	s7, s21, s6
 80125e0:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 80125e4:	edd8 aa00 	vldr	s21, [r8]
 80125e8:	eee6 1a03 	vfma.f32	s3, s12, s6
 80125ec:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80125f0:	ed9e 6a00 	vldr	s12, [lr]
 80125f4:	edd7 aa00 	vldr	s21, [r7]
 80125f8:	eee6 7a03 	vfma.f32	s15, s12, s6
 80125fc:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8012600:	ed9c 6a00 	vldr	s12, [ip]
 8012604:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8012608:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 801260c:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8012610:	ee2a 4a00 	vmul.f32	s8, s20, s0
 8012614:	ee22 2a00 	vmul.f32	s4, s4, s0
 8012618:	ee62 2a80 	vmul.f32	s5, s5, s0
 801261c:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8012620:	ed90 0a00 	vldr	s0, [r0]
 8012624:	ee64 7a27 	vmul.f32	s15, s8, s15
 8012628:	ee36 6a00 	vadd.f32	s12, s12, s0
 801262c:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8012630:	ed91 0a00 	vldr	s0, [r1]
 8012634:	ee35 5a28 	vadd.f32	s10, s10, s17
 8012638:	ee66 6a82 	vmul.f32	s13, s13, s4
 801263c:	ee22 7a87 	vmul.f32	s14, s5, s14
 8012640:	ee64 5a25 	vmul.f32	s11, s8, s11
 8012644:	eee0 4a83 	vfma.f32	s9, s1, s6
 8012648:	f604 1068 	addw	r0, r4, #2408	; 0x968
 801264c:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8012650:	eea1 5a03 	vfma.f32	s10, s2, s6
 8012654:	eea0 6a03 	vfma.f32	s12, s0, s6
 8012658:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801265c:	ee63 3a82 	vmul.f32	s7, s7, s4
 8012660:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012664:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8012668:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801266c:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8012670:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012674:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8012678:	ee24 6a06 	vmul.f32	s12, s8, s12
 801267c:	ee62 4a24 	vmul.f32	s9, s4, s9
 8012680:	ee22 5a85 	vmul.f32	s10, s5, s10
 8012684:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8012688:	eea5 7a05 	vfma.f32	s14, s10, s10
 801268c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012690:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8012694:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012698:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801269c:	ee07 3a90 	vmov	s15, r3
 80126a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80126a8:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 80126ac:	b21b      	sxth	r3, r3
 80126ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80126b2:	ee07 2a90 	vmov	s15, r2
 80126b6:	ed90 4a00 	vldr	s8, [r0]
 80126ba:	edd1 4a00 	vldr	s9, [r1]
 80126be:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80126c2:	edd7 7a00 	vldr	s15, [r7]
 80126c6:	eee5 6a84 	vfma.f32	s13, s11, s8
 80126ca:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80126ce:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80126d2:	ee66 7a05 	vmul.f32	s15, s12, s10
 80126d6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80126da:	ee27 7a05 	vmul.f32	s14, s14, s10
 80126de:	edc7 7a00 	vstr	s15, [r7]
 80126e2:	edc0 6a00 	vstr	s13, [r0]
 80126e6:	ed81 7a00 	vstr	s14, [r1]
 80126ea:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 80126ee:	f47f abde 	bne.w	8011eae <iNemoEngine_API_Update+0x56>
 80126f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80126f6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80126fa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80126fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012702:	2300      	movs	r3, #0
 8012704:	2200      	movs	r2, #0
 8012706:	edc4 6a07 	vstr	s13, [r4, #28]
 801270a:	ed84 7a08 	vstr	s14, [r4, #32]
 801270e:	edc4 7a06 	vstr	s15, [r4, #24]
 8012712:	603b      	str	r3, [r7, #0]
 8012714:	6003      	str	r3, [r0, #0]
 8012716:	600b      	str	r3, [r1, #0]
 8012718:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 801271c:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8012720:	f7ff bbc5 	b.w	8011eae <iNemoEngine_API_Update+0x56>
 8012724:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012758 <iNemoEngine_API_Update+0x900>
 8012728:	e4da      	b.n	80120e0 <iNemoEngine_API_Update+0x288>
 801272a:	bf00      	nop
 801272c:	f3af 8000 	nop.w
 8012730:	20000000 	.word	0x20000000
 8012734:	404ca5dc 	.word	0x404ca5dc
 8012738:	40568000 	.word	0x40568000
 801273c:	3dcccccd 	.word	0x3dcccccd
 8012740:	3a83126f 	.word	0x3a83126f
 8012744:	358637bd 	.word	0x358637bd
 8012748:	3f333333 	.word	0x3f333333
 801274c:	3727c5ac 	.word	0x3727c5ac
 8012750:	3ac49ba6 	.word	0x3ac49ba6
 8012754:	3e4ccccd 	.word	0x3e4ccccd
 8012758:	00000000 	.word	0x00000000

0801275c <MEMS_getSensorData_I16>:
 801275c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012760:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8012764:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012768:	68c5      	ldr	r5, [r0, #12]
 801276a:	4596      	cmp	lr, r2
 801276c:	fa1f f882 	uxth.w	r8, r2
 8012770:	d94d      	bls.n	801280e <MEMS_getSensorData_I16+0xb2>
 8012772:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012776:	fb04 5313 	mls	r3, r4, r3, r5
 801277a:	ebae 0c02 	sub.w	ip, lr, r2
 801277e:	f8a1 8004 	strh.w	r8, [r1, #4]
 8012782:	600b      	str	r3, [r1, #0]
 8012784:	fa5f fc8c 	uxtb.w	ip, ip
 8012788:	4647      	mov	r7, r8
 801278a:	f1b8 0f00 	cmp.w	r8, #0
 801278e:	d017      	beq.n	80127c0 <MEMS_getSensorData_I16+0x64>
 8012790:	688e      	ldr	r6, [r1, #8]
 8012792:	6905      	ldr	r5, [r0, #16]
 8012794:	2300      	movs	r3, #0
 8012796:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 801279a:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 801279e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 80127a2:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 80127a6:	f8d4 9002 	ldr.w	r9, [r4, #2]
 80127aa:	f8c1 9002 	str.w	r9, [r1, #2]
 80127ae:	3301      	adds	r3, #1
 80127b0:	88e4      	ldrh	r4, [r4, #6]
 80127b2:	80cc      	strh	r4, [r1, #6]
 80127b4:	b2d9      	uxtb	r1, r3
 80127b6:	42b9      	cmp	r1, r7
 80127b8:	460b      	mov	r3, r1
 80127ba:	d3ec      	bcc.n	8012796 <MEMS_getSensorData_I16+0x3a>
 80127bc:	45c6      	cmp	lr, r8
 80127be:	d934      	bls.n	801282a <MEMS_getSensorData_I16+0xce>
 80127c0:	ebae 0308 	sub.w	r3, lr, r8
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	8103      	strh	r3, [r0, #8]
 80127c8:	f1bc 0f00 	cmp.w	ip, #0
 80127cc:	d01d      	beq.n	801280a <MEMS_getSensorData_I16+0xae>
 80127ce:	6903      	ldr	r3, [r0, #16]
 80127d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80127d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80127d8:	f103 000a 	add.w	r0, r3, #10
 80127dc:	fa5f fc8c 	uxtb.w	ip, ip
 80127e0:	3202      	adds	r2, #2
 80127e2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80127e6:	3302      	adds	r3, #2
 80127e8:	2400      	movs	r4, #0
 80127ea:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80127ee:	f803 1c02 	strb.w	r1, [r3, #-2]
 80127f2:	6811      	ldr	r1, [r2, #0]
 80127f4:	6019      	str	r1, [r3, #0]
 80127f6:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80127fa:	8099      	strh	r1, [r3, #4]
 80127fc:	3308      	adds	r3, #8
 80127fe:	4283      	cmp	r3, r0
 8012800:	f802 4c02 	strb.w	r4, [r2, #-2]
 8012804:	f102 0208 	add.w	r2, r2, #8
 8012808:	d1ef      	bne.n	80127ea <MEMS_getSensorData_I16+0x8e>
 801280a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801280e:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012812:	fb04 5313 	mls	r3, r4, r3, r5
 8012816:	f8a1 e004 	strh.w	lr, [r1, #4]
 801281a:	600b      	str	r3, [r1, #0]
 801281c:	f1be 0f00 	cmp.w	lr, #0
 8012820:	d005      	beq.n	801282e <MEMS_getSensorData_I16+0xd2>
 8012822:	4677      	mov	r7, lr
 8012824:	f04f 0c00 	mov.w	ip, #0
 8012828:	e7b2      	b.n	8012790 <MEMS_getSensorData_I16+0x34>
 801282a:	2300      	movs	r3, #0
 801282c:	e7cb      	b.n	80127c6 <MEMS_getSensorData_I16+0x6a>
 801282e:	f8a0 e008 	strh.w	lr, [r0, #8]
 8012832:	e7ea      	b.n	801280a <MEMS_getSensorData_I16+0xae>

08012834 <MEMS_SolveLinearEq>:
 8012834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012838:	ed2d 8b0c 	vpush	{d8-d13}
 801283c:	4617      	mov	r7, r2
 801283e:	2400      	movs	r4, #0
 8012840:	b0a9      	sub	sp, #164	; 0xa4
 8012842:	2200      	movs	r2, #0
 8012844:	601a      	str	r2, [r3, #0]
 8012846:	460d      	mov	r5, r1
 8012848:	2240      	movs	r2, #64	; 0x40
 801284a:	4621      	mov	r1, r4
 801284c:	4680      	mov	r8, r0
 801284e:	603c      	str	r4, [r7, #0]
 8012850:	607c      	str	r4, [r7, #4]
 8012852:	60bc      	str	r4, [r7, #8]
 8012854:	60fc      	str	r4, [r7, #12]
 8012856:	a808      	add	r0, sp, #32
 8012858:	461e      	mov	r6, r3
 801285a:	eeb0 8a40 	vmov.f32	s16, s0
 801285e:	e9cd 4400 	strd	r4, r4, [sp]
 8012862:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012866:	f005 f855 	bl	8017914 <memset>
 801286a:	4621      	mov	r1, r4
 801286c:	a818      	add	r0, sp, #96	; 0x60
 801286e:	2240      	movs	r2, #64	; 0x40
 8012870:	f005 f850 	bl	8017914 <memset>
 8012874:	edd5 2a03 	vldr	s5, [r5, #12]
 8012878:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012c0c <MEMS_SolveLinearEq+0x3d8>
 801287c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012884:	d47e      	bmi.n	8012984 <MEMS_SolveLinearEq+0x150>
 8012886:	f898 1000 	ldrb.w	r1, [r8]
 801288a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801288e:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8012892:	4291      	cmp	r1, r2
 8012894:	d07c      	beq.n	8012990 <MEMS_SolveLinearEq+0x15c>
 8012896:	3301      	adds	r3, #1
 8012898:	1a58      	subs	r0, r3, r1
 801289a:	fb90 f3f2 	sdiv	r3, r0, r2
 801289e:	fb02 0313 	mls	r3, r2, r3, r0
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	bfb8      	it	lt
 80128a6:	189b      	addlt	r3, r3, r2
 80128a8:	b21b      	sxth	r3, r3
 80128aa:	2900      	cmp	r1, #0
 80128ac:	f000 81d6 	beq.w	8012c5c <MEMS_SolveLinearEq+0x428>
 80128b0:	3901      	subs	r1, #1
 80128b2:	b2c9      	uxtb	r1, r1
 80128b4:	3101      	adds	r1, #1
 80128b6:	edd5 3a00 	vldr	s7, [r5]
 80128ba:	ed95 4a01 	vldr	s8, [r5, #4]
 80128be:	edd5 4a02 	vldr	s9, [r5, #8]
 80128c2:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 80128c6:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012c10 <MEMS_SolveLinearEq+0x3dc>
 80128ca:	4419      	add	r1, r3
 80128cc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80128d0:	fb93 f4f2 	sdiv	r4, r3, r2
 80128d4:	fb02 3414 	mls	r4, r2, r4, r3
 80128d8:	b2e4      	uxtb	r4, r4
 80128da:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 80128de:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 80128e2:	ee07 0a90 	vmov	s15, r0
 80128e6:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80128ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128ee:	ee06 0a10 	vmov	s12, r0
 80128f2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80128f6:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 80128fa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80128fe:	ee77 6ac4 	vsub.f32	s13, s15, s8
 8012902:	ee26 6a08 	vmul.f32	s12, s12, s16
 8012906:	ee07 0a10 	vmov	s14, r0
 801290a:	ee36 5a63 	vsub.f32	s10, s12, s7
 801290e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012912:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012916:	eee5 6a05 	vfma.f32	s13, s10, s10
 801291a:	ee27 7a08 	vmul.f32	s14, s14, s16
 801291e:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8012922:	ee74 aac7 	vsub.f32	s21, s9, s14
 8012926:	ee37 7a64 	vsub.f32	s14, s14, s9
 801292a:	ee74 7a67 	vsub.f32	s15, s8, s15
 801292e:	eee7 6a07 	vfma.f32	s13, s14, s14
 8012932:	eef4 6ac2 	vcmpe.f32	s13, s4
 8012936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801293a:	d531      	bpl.n	80129a0 <MEMS_SolveLinearEq+0x16c>
 801293c:	3301      	adds	r3, #1
 801293e:	4299      	cmp	r1, r3
 8012940:	d1c6      	bne.n	80128d0 <MEMS_SolveLinearEq+0x9c>
 8012942:	eef0 7a65 	vmov.f32	s15, s11
 8012946:	2101      	movs	r1, #1
 8012948:	4608      	mov	r0, r1
 801294a:	2200      	movs	r2, #0
 801294c:	e006      	b.n	801295c <MEMS_SolveLinearEq+0x128>
 801294e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012952:	ac28      	add	r4, sp, #160	; 0xa0
 8012954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012958:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 801295c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012960:	3001      	adds	r0, #1
 8012962:	ac28      	add	r4, sp, #160	; 0xa0
 8012964:	b2c0      	uxtb	r0, r0
 8012966:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801296a:	2804      	cmp	r0, #4
 801296c:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012970:	4613      	mov	r3, r2
 8012972:	d1ec      	bne.n	801294e <MEMS_SolveLinearEq+0x11a>
 8012974:	1c48      	adds	r0, r1, #1
 8012976:	b2c0      	uxtb	r0, r0
 8012978:	2804      	cmp	r0, #4
 801297a:	d076      	beq.n	8012a6a <MEMS_SolveLinearEq+0x236>
 801297c:	460b      	mov	r3, r1
 801297e:	460a      	mov	r2, r1
 8012980:	4601      	mov	r1, r0
 8012982:	e7e4      	b.n	801294e <MEMS_SolveLinearEq+0x11a>
 8012984:	2000      	movs	r0, #0
 8012986:	b029      	add	sp, #164	; 0xa4
 8012988:	ecbd 8b0c 	vpop	{d8-d13}
 801298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012990:	1c5a      	adds	r2, r3, #1
 8012992:	fb92 f3f1 	sdiv	r3, r2, r1
 8012996:	fb01 2313 	mls	r3, r1, r3, r2
 801299a:	b21b      	sxth	r3, r3
 801299c:	460a      	mov	r2, r1
 801299e:	e784      	b.n	80128aa <MEMS_SolveLinearEq+0x76>
 80129a0:	eef1 cae6 	vsqrt.f32	s25, s13
 80129a4:	3301      	adds	r3, #1
 80129a6:	428b      	cmp	r3, r1
 80129a8:	ed9d ca00 	vldr	s24, [sp]
 80129ac:	eddd ba08 	vldr	s23, [sp, #32]
 80129b0:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 80129b4:	ed9d aa01 	vldr	s20, [sp, #4]
 80129b8:	eddd 9a02 	vldr	s19, [sp, #8]
 80129bc:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 80129c0:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 80129c4:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 80129c8:	ed9d 0a03 	vldr	s0, [sp, #12]
 80129cc:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 80129d0:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 80129d4:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 80129d8:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 80129dc:	eec1 6aac 	vdiv.f32	s13, s3, s25
 80129e0:	ee3d da21 	vadd.f32	s26, s26, s3
 80129e4:	ee26 7a26 	vmul.f32	s14, s12, s13
 80129e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129ec:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 80129f0:	ee72 aaec 	vsub.f32	s21, s5, s25
 80129f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80129f8:	eea7 ba26 	vfma.f32	s22, s14, s13
 80129fc:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012a00:	eeaa ca87 	vfma.f32	s24, s21, s14
 8012a04:	eee7 ba07 	vfma.f32	s23, s14, s14
 8012a08:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8012a0c:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8012a10:	eea7 9aa7 	vfma.f32	s18, s15, s15
 8012a14:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8012a18:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8012a1c:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012a20:	ee30 6a06 	vadd.f32	s12, s0, s12
 8012a24:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012a28:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012a2c:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012a30:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8012a34:	ed8d ca00 	vstr	s24, [sp]
 8012a38:	edcd ba08 	vstr	s23, [sp, #32]
 8012a3c:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 8012a40:	ed8d aa01 	vstr	s20, [sp, #4]
 8012a44:	edcd 9a02 	vstr	s19, [sp, #8]
 8012a48:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 8012a4c:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012a50:	ed8d 6a03 	vstr	s12, [sp, #12]
 8012a54:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012a58:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012a5c:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012a60:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8012a64:	f47f af34 	bne.w	80128d0 <MEMS_SolveLinearEq+0x9c>
 8012a68:	e76b      	b.n	8012942 <MEMS_SolveLinearEq+0x10e>
 8012a6a:	2240      	movs	r2, #64	; 0x40
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	a818      	add	r0, sp, #96	; 0x60
 8012a70:	f004 ff50 	bl	8017914 <memset>
 8012a74:	ab08      	add	r3, sp, #32
 8012a76:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8012c14 <MEMS_SolveLinearEq+0x3e0>
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	aa18      	add	r2, sp, #96	; 0x60
 8012a7e:	2100      	movs	r1, #0
 8012a80:	b24c      	sxtb	r4, r1
 8012a82:	2900      	cmp	r1, #0
 8012a84:	f000 80b5 	beq.w	8012bf2 <MEMS_SolveLinearEq+0x3be>
 8012a88:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012a8c:	eeb0 7ae7 	vabs.f32	s14, s15
 8012a90:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a98:	f53f af74 	bmi.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012a9c:	ed93 7a00 	vldr	s14, [r3]
 8012aa0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012aa4:	2c01      	cmp	r4, #1
 8012aa6:	edc2 6a00 	vstr	s13, [r2]
 8012aaa:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ab2:	f000 80b5 	beq.w	8012c20 <MEMS_SolveLinearEq+0x3ec>
 8012ab6:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012aba:	eeb0 7ac6 	vabs.f32	s14, s12
 8012abe:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac6:	f53f af5d 	bmi.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012aca:	ed93 7a01 	vldr	s14, [r3, #4]
 8012ace:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ad2:	2c02      	cmp	r4, #2
 8012ad4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012ad8:	edc2 7a01 	vstr	s15, [r2, #4]
 8012adc:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012ae0:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8012ae4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012ae8:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012aec:	f000 80a7 	beq.w	8012c3e <MEMS_SolveLinearEq+0x40a>
 8012af0:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8012af4:	eeb0 6ae4 	vabs.f32	s12, s9
 8012af8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b00:	f53f af40 	bmi.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012b04:	edd3 5a02 	vldr	s11, [r3, #8]
 8012b08:	ed90 6a00 	vldr	s12, [r0]
 8012b0c:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012b10:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8012b14:	edc2 5a02 	vstr	s11, [r2, #8]
 8012b18:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012b1c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012b20:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012b24:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012b28:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012b2c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012b30:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b38:	f77f af24 	ble.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012b3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012b40:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012b44:	ed82 7a03 	vstr	s14, [r2, #12]
 8012b48:	3101      	adds	r1, #1
 8012b4a:	2904      	cmp	r1, #4
 8012b4c:	f103 0310 	add.w	r3, r3, #16
 8012b50:	f102 0210 	add.w	r2, r2, #16
 8012b54:	f100 0014 	add.w	r0, r0, #20
 8012b58:	d192      	bne.n	8012a80 <MEMS_SolveLinearEq+0x24c>
 8012b5a:	466a      	mov	r2, sp
 8012b5c:	4639      	mov	r1, r7
 8012b5e:	a818      	add	r0, sp, #96	; 0x60
 8012b60:	f7f9 f9f2 	bl	800bf48 <llEvaluate.constprop.0>
 8012b64:	4b2c      	ldr	r3, [pc, #176]	; (8012c18 <MEMS_SolveLinearEq+0x3e4>)
 8012b66:	6033      	str	r3, [r6, #0]
 8012b68:	f10d 0910 	add.w	r9, sp, #16
 8012b6c:	46e8      	mov	r8, sp
 8012b6e:	f10d 0b0c 	add.w	fp, sp, #12
 8012b72:	2400      	movs	r4, #0
 8012b74:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012b78:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012b7c:	e9cd 4400 	strd	r4, r4, [sp]
 8012b80:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012b84:	466a      	mov	r2, sp
 8012b86:	f848 ab04 	str.w	sl, [r8], #4
 8012b8a:	a904      	add	r1, sp, #16
 8012b8c:	a818      	add	r0, sp, #96	; 0x60
 8012b8e:	f7f9 f9db 	bl	800bf48 <llEvaluate.constprop.0>
 8012b92:	ecf9 7a01 	vldmia	r9!, {s15}
 8012b96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9e:	dd23      	ble.n	8012be8 <MEMS_SolveLinearEq+0x3b4>
 8012ba0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012ba4:	edd6 7a00 	vldr	s15, [r6]
 8012ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb0:	bfb8      	it	lt
 8012bb2:	eef0 7a47 	vmovlt.f32	s15, s14
 8012bb6:	45c3      	cmp	fp, r8
 8012bb8:	edc6 7a00 	vstr	s15, [r6]
 8012bbc:	d1de      	bne.n	8012b7c <MEMS_SolveLinearEq+0x348>
 8012bbe:	edd5 7a03 	vldr	s15, [r5, #12]
 8012bc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8012bc6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012bca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bce:	2001      	movs	r0, #1
 8012bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd8:	bf48      	it	mi
 8012bda:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012bde:	b029      	add	sp, #164	; 0xa4
 8012be0:	ecbd 8b0c 	vpop	{d8-d13}
 8012be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be8:	45c3      	cmp	fp, r8
 8012bea:	ed86 0a00 	vstr	s0, [r6]
 8012bee:	d1c5      	bne.n	8012b7c <MEMS_SolveLinearEq+0x348>
 8012bf0:	e7e5      	b.n	8012bbe <MEMS_SolveLinearEq+0x38a>
 8012bf2:	edd0 7a00 	vldr	s15, [r0]
 8012bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	f77f aec1 	ble.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012c02:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c06:	ed82 7a00 	vstr	s14, [r2]
 8012c0a:	e79d      	b.n	8012b48 <MEMS_SolveLinearEq+0x314>
 8012c0c:	3dcccccd 	.word	0x3dcccccd
 8012c10:	2b8cbccb 	.word	0x2b8cbccb
 8012c14:	358637bd 	.word	0x358637bd
 8012c18:	3dcccccd 	.word	0x3dcccccd
 8012c1c:	00000000 	.word	0x00000000
 8012c20:	ed90 7a00 	vldr	s14, [r0]
 8012c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2c:	f77f aeaa 	ble.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012c30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c34:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c38:	ed82 7a01 	vstr	s14, [r2, #4]
 8012c3c:	e784      	b.n	8012b48 <MEMS_SolveLinearEq+0x314>
 8012c3e:	edd0 7a00 	vldr	s15, [r0]
 8012c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c4a:	f77f ae9b 	ble.w	8012984 <MEMS_SolveLinearEq+0x150>
 8012c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c52:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c56:	ed82 7a02 	vstr	s14, [r2, #8]
 8012c5a:	e775      	b.n	8012b48 <MEMS_SolveLinearEq+0x314>
 8012c5c:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012c1c <MEMS_SolveLinearEq+0x3e8>
 8012c60:	e671      	b.n	8012946 <MEMS_SolveLinearEq+0x112>
 8012c62:	bf00      	nop

08012c64 <MEMS_EIG3>:
 8012c64:	edd0 6a02 	vldr	s13, [r0, #8]
 8012c68:	ed90 7a01 	vldr	s14, [r0, #4]
 8012c6c:	edd0 4a04 	vldr	s9, [r0, #16]
 8012c70:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012dc0 <MEMS_EIG3+0x15c>
 8012c74:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012c78:	b510      	push	{r4, lr}
 8012c7a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012c7e:	460c      	mov	r4, r1
 8012c80:	ed2d 8b04 	vpush	{d8-d9}
 8012c84:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012c88:	b08a      	sub	sp, #40	; 0x28
 8012c8a:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c92:	d509      	bpl.n	8012ca8 <MEMS_EIG3+0x44>
 8012c94:	6803      	ldr	r3, [r0, #0]
 8012c96:	600b      	str	r3, [r1, #0]
 8012c98:	68c3      	ldr	r3, [r0, #12]
 8012c9a:	604b      	str	r3, [r1, #4]
 8012c9c:	6943      	ldr	r3, [r0, #20]
 8012c9e:	608b      	str	r3, [r1, #8]
 8012ca0:	b00a      	add	sp, #40	; 0x28
 8012ca2:	ecbd 8b04 	vpop	{d8-d9}
 8012ca6:	bd10      	pop	{r4, pc}
 8012ca8:	ed90 4a00 	vldr	s8, [r0]
 8012cac:	edd0 5a03 	vldr	s11, [r0, #12]
 8012cb0:	edd0 2a05 	vldr	s5, [r0, #20]
 8012cb4:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012dc4 <MEMS_EIG3+0x160>
 8012cb8:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012dc8 <MEMS_EIG3+0x164>
 8012cbc:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012cc0:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012cc4:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012cc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012ccc:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012cd0:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012cd4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012cd8:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012cdc:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012ce0:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012ce4:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012ce8:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012cec:	eef0 7a45 	vmov.f32	s15, s10
 8012cf0:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8012cf4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012cf8:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012cfc:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012d00:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8012d04:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012d08:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012d0c:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012d10:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012d14:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012d18:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012d1c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012d20:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8012d24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d28:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012d2c:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012d30:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012d34:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012d38:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012d3c:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d44:	d909      	bls.n	8012d5a <MEMS_EIG3+0xf6>
 8012d46:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4e:	db22      	blt.n	8012d96 <MEMS_EIG3+0x132>
 8012d50:	eeb0 9a40 	vmov.f32	s18, s0
 8012d54:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012dcc <MEMS_EIG3+0x168>
 8012d58:	e003      	b.n	8012d62 <MEMS_EIG3+0xfe>
 8012d5a:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012dd0 <MEMS_EIG3+0x16c>
 8012d5e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012d62:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012d66:	eef0 7a48 	vmov.f32	s15, s16
 8012d6a:	eeb0 7a48 	vmov.f32	s14, s16
 8012d6e:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012d72:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012d76:	edc4 7a00 	vstr	s15, [r4]
 8012d7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d7e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012d82:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012d86:	ed84 7a02 	vstr	s14, [r4, #8]
 8012d8a:	edc4 7a01 	vstr	s15, [r4, #4]
 8012d8e:	b00a      	add	sp, #40	; 0x28
 8012d90:	ecbd 8b04 	vpop	{d8-d9}
 8012d94:	bd10      	pop	{r4, pc}
 8012d96:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012d9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d9e:	f003 f855 	bl	8015e4c <acosf>
 8012da2:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012da6:	eeb0 0a69 	vmov.f32	s0, s19
 8012daa:	f002 ff49 	bl	8015c40 <cosf>
 8012dae:	eeb0 9a40 	vmov.f32	s18, s0
 8012db2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012dd4 <MEMS_EIG3+0x170>
 8012db6:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012dba:	f002 ff41 	bl	8015c40 <cosf>
 8012dbe:	e7d0      	b.n	8012d62 <MEMS_EIG3+0xfe>
 8012dc0:	358637bd 	.word	0x358637bd
 8012dc4:	3eaaaaab 	.word	0x3eaaaaab
 8012dc8:	3e2aaaab 	.word	0x3e2aaaab
 8012dcc:	bf000001 	.word	0xbf000001
 8012dd0:	3effffff 	.word	0x3effffff
 8012dd4:	40060a92 	.word	0x40060a92

08012dd8 <MEMS_runMagCal>:
 8012dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ddc:	ed2d 8b0a 	vpush	{d8-d12}
 8012de0:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012de4:	2282      	movs	r2, #130	; 0x82
 8012de6:	ab36      	add	r3, sp, #216	; 0xd8
 8012de8:	460c      	mov	r4, r1
 8012dea:	9105      	str	r1, [sp, #20]
 8012dec:	4683      	mov	fp, r0
 8012dee:	4608      	mov	r0, r1
 8012df0:	a917      	add	r1, sp, #92	; 0x5c
 8012df2:	9319      	str	r3, [sp, #100]	; 0x64
 8012df4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012df8:	f7ff fcb0 	bl	801275c <MEMS_getSensorData_I16>
 8012dfc:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012e00:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012e06:	9209      	str	r2, [sp, #36]	; 0x24
 8012e08:	f108 31ff 	add.w	r1, r8, #4294967295
 8012e0c:	9106      	str	r1, [sp, #24]
 8012e0e:	fb01 2103 	mla	r1, r1, r3, r2
 8012e12:	9108      	str	r1, [sp, #32]
 8012e14:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012e18:	f1b8 0f00 	cmp.w	r8, #0
 8012e1c:	f000 8417 	beq.w	801364e <MEMS_runMagCal+0x876>
 8012e20:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012e28:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012e2c:	fb02 f203 	mul.w	r2, r2, r3
 8012e30:	31a0      	adds	r1, #160	; 0xa0
 8012e32:	4291      	cmp	r1, r2
 8012e34:	f080 8411 	bcs.w	801365a <MEMS_runMagCal+0x882>
 8012e38:	3b00      	subs	r3, #0
 8012e3a:	bf18      	it	ne
 8012e3c:	2301      	movne	r3, #1
 8012e3e:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012e42:	2200      	movs	r2, #0
 8012e44:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012e48:	f8cb 200c 	str.w	r2, [fp, #12]
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012e52:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012e56:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012e5a:	22ff      	movs	r2, #255	; 0xff
 8012e5c:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012e60:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012e64:	4cd5      	ldr	r4, [pc, #852]	; (80131bc <MEMS_runMagCal+0x3e4>)
 8012e66:	eddf 7ad8 	vldr	s15, [pc, #864]	; 80131c8 <MEMS_runMagCal+0x3f0>
 8012e6a:	9b05      	ldr	r3, [sp, #20]
 8012e6c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012e70:	edd3 5a01 	vldr	s11, [r3, #4]
 8012e74:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012e78:	4652      	mov	r2, sl
 8012e7a:	2a03      	cmp	r2, #3
 8012e7c:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012e80:	bf28      	it	cs
 8012e82:	2203      	movcs	r2, #3
 8012e84:	2100      	movs	r1, #0
 8012e86:	9207      	str	r2, [sp, #28]
 8012e88:	eeb0 0a67 	vmov.f32	s0, s15
 8012e8c:	464b      	mov	r3, r9
 8012e8e:	9402      	str	r4, [sp, #8]
 8012e90:	4627      	mov	r7, r4
 8012e92:	9503      	str	r5, [sp, #12]
 8012e94:	462e      	mov	r6, r5
 8012e96:	460a      	mov	r2, r1
 8012e98:	9404      	str	r4, [sp, #16]
 8012e9a:	7818      	ldrb	r0, [r3, #0]
 8012e9c:	3201      	adds	r2, #1
 8012e9e:	b292      	uxth	r2, r2
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d04b      	beq.n	8012f3c <MEMS_runMagCal+0x164>
 8012ea4:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012ea8:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012eac:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012eb0:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012eb4:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012eb8:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012ebc:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012ec0:	9c02      	ldr	r4, [sp, #8]
 8012ec2:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012ec6:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012eca:	ee07 ea90 	vmov	s15, lr
 8012ece:	ee07 ca10 	vmov	s14, ip
 8012ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ed6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012eda:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012ede:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012ee2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012ee6:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012eee:	4574      	cmp	r4, lr
 8012ef0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ef4:	bfb8      	it	lt
 8012ef6:	4674      	movlt	r4, lr
 8012ef8:	9402      	str	r4, [sp, #8]
 8012efa:	ee07 0a10 	vmov	s14, r0
 8012efe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f02:	9c03      	ldr	r4, [sp, #12]
 8012f04:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012f08:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012f0c:	4574      	cmp	r4, lr
 8012f0e:	bfa8      	it	ge
 8012f10:	4674      	movge	r4, lr
 8012f12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012f16:	4567      	cmp	r7, ip
 8012f18:	9403      	str	r4, [sp, #12]
 8012f1a:	9c04      	ldr	r4, [sp, #16]
 8012f1c:	bfb8      	it	lt
 8012f1e:	4667      	movlt	r7, ip
 8012f20:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012f24:	4566      	cmp	r6, ip
 8012f26:	bfa8      	it	ge
 8012f28:	4666      	movge	r6, ip
 8012f2a:	4284      	cmp	r4, r0
 8012f2c:	bfb8      	it	lt
 8012f2e:	4604      	movlt	r4, r0
 8012f30:	3101      	adds	r1, #1
 8012f32:	4285      	cmp	r5, r0
 8012f34:	b249      	sxtb	r1, r1
 8012f36:	9404      	str	r4, [sp, #16]
 8012f38:	bfa8      	it	ge
 8012f3a:	4605      	movge	r5, r0
 8012f3c:	9807      	ldr	r0, [sp, #28]
 8012f3e:	4282      	cmp	r2, r0
 8012f40:	f103 0308 	add.w	r3, r3, #8
 8012f44:	d9a9      	bls.n	8012e9a <MEMS_runMagCal+0xc2>
 8012f46:	4590      	cmp	r8, r2
 8012f48:	9c04      	ldr	r4, [sp, #16]
 8012f4a:	f240 8767 	bls.w	8013e1c <MEMS_runMagCal+0x1044>
 8012f4e:	ebaa 0a02 	sub.w	sl, sl, r2
 8012f52:	fa12 fa8a 	uxtah	sl, r2, sl
 8012f56:	f109 0308 	add.w	r3, r9, #8
 8012f5a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f5e:	9307      	str	r3, [sp, #28]
 8012f60:	2300      	movs	r3, #0
 8012f62:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012f66:	9304      	str	r3, [sp, #16]
 8012f68:	7813      	ldrb	r3, [r2, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f000 8096 	beq.w	801309c <MEMS_runMagCal+0x2c4>
 8012f70:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012f74:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012f78:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012f7c:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012f80:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012f84:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012f88:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012f8c:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012f90:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012f94:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012f98:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012f9c:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012fa0:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012fa4:	ebae 0808 	sub.w	r8, lr, r8
 8012fa8:	eba0 000a 	sub.w	r0, r0, sl
 8012fac:	ee07 ca10 	vmov	s14, ip
 8012fb0:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012fb4:	ee07 0a90 	vmov	s15, r0
 8012fb8:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012fbc:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012fc0:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012fc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012fc8:	eba3 030a 	sub.w	r3, r3, sl
 8012fcc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fd4:	ee06 ea90 	vmov	s13, lr
 8012fd8:	ebac 0909 	sub.w	r9, ip, r9
 8012fdc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012fe0:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012fe4:	eef0 7ae7 	vabs.f32	s15, s15
 8012fe8:	ee06 9a90 	vmov	s13, r9
 8012fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ff0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ff8:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012ffc:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8013000:	eef0 6ae6 	vabs.f32	s13, s13
 8013004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013008:	eba0 0808 	sub.w	r8, r0, r8
 801300c:	ee06 0a90 	vmov	s13, r0
 8013010:	eba3 0309 	sub.w	r3, r3, r9
 8013014:	ee35 5a63 	vsub.f32	s10, s10, s7
 8013018:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 801301c:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013020:	9b02      	ldr	r3, [sp, #8]
 8013022:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8013026:	4577      	cmp	r7, lr
 8013028:	ee27 7a03 	vmul.f32	s14, s14, s6
 801302c:	ee06 8a90 	vmov	s13, r8
 8013030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013034:	bfb8      	it	lt
 8013036:	4677      	movlt	r7, lr
 8013038:	4576      	cmp	r6, lr
 801303a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801303e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013042:	bfa8      	it	ge
 8013044:	4676      	movge	r6, lr
 8013046:	4563      	cmp	r3, ip
 8013048:	bfb8      	it	lt
 801304a:	4663      	movlt	r3, ip
 801304c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013050:	eea5 7a05 	vfma.f32	s14, s10, s10
 8013054:	9302      	str	r3, [sp, #8]
 8013056:	9b03      	ldr	r3, [sp, #12]
 8013058:	eef0 6ae6 	vabs.f32	s13, s13
 801305c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013060:	4563      	cmp	r3, ip
 8013062:	ee36 6a44 	vsub.f32	s12, s12, s8
 8013066:	bfa8      	it	ge
 8013068:	4663      	movge	r3, ip
 801306a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801306e:	4284      	cmp	r4, r0
 8013070:	ee37 0a00 	vadd.f32	s0, s14, s0
 8013074:	bfb8      	it	lt
 8013076:	4604      	movlt	r4, r0
 8013078:	ee26 7a24 	vmul.f32	s14, s12, s9
 801307c:	4285      	cmp	r5, r0
 801307e:	bfa8      	it	ge
 8013080:	4605      	movge	r5, r0
 8013082:	9303      	str	r3, [sp, #12]
 8013084:	ee17 0a90 	vmov	r0, s15
 8013088:	9b04      	ldr	r3, [sp, #16]
 801308a:	eea7 0a07 	vfma.f32	s0, s14, s14
 801308e:	4283      	cmp	r3, r0
 8013090:	f101 0101 	add.w	r1, r1, #1
 8013094:	bf38      	it	cc
 8013096:	4603      	movcc	r3, r0
 8013098:	b249      	sxtb	r1, r1
 801309a:	9304      	str	r3, [sp, #16]
 801309c:	9b07      	ldr	r3, [sp, #28]
 801309e:	3208      	adds	r2, #8
 80130a0:	4293      	cmp	r3, r2
 80130a2:	f47f af61 	bne.w	8012f68 <MEMS_runMagCal+0x190>
 80130a6:	2900      	cmp	r1, #0
 80130a8:	f000 86b6 	beq.w	8013e18 <MEMS_runMagCal+0x1040>
 80130ac:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 80130b0:	f280 82df 	bge.w	8013672 <MEMS_runMagCal+0x89a>
 80130b4:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 80130b8:	f2c0 82db 	blt.w	8013672 <MEMS_runMagCal+0x89a>
 80130bc:	9b02      	ldr	r3, [sp, #8]
 80130be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80130c2:	f280 82d6 	bge.w	8013672 <MEMS_runMagCal+0x89a>
 80130c6:	9a03      	ldr	r2, [sp, #12]
 80130c8:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 80130cc:	f2c0 82d1 	blt.w	8013672 <MEMS_runMagCal+0x89a>
 80130d0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80130d4:	f280 82cd 	bge.w	8013672 <MEMS_runMagCal+0x89a>
 80130d8:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 80130dc:	f2c0 82c9 	blt.w	8013672 <MEMS_runMagCal+0x89a>
 80130e0:	ee07 1a90 	vmov	s15, r1
 80130e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80130e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80130ec:	eec0 7a26 	vdiv.f32	s15, s0, s13
 80130f0:	1bbe      	subs	r6, r7, r6
 80130f2:	1a9f      	subs	r7, r3, r2
 80130f4:	42be      	cmp	r6, r7
 80130f6:	4633      	mov	r3, r6
 80130f8:	eba4 0405 	sub.w	r4, r4, r5
 80130fc:	bfb8      	it	lt
 80130fe:	463b      	movlt	r3, r7
 8013100:	42a3      	cmp	r3, r4
 8013102:	bfb8      	it	lt
 8013104:	4623      	movlt	r3, r4
 8013106:	eec7 6a25 	vdiv.f32	s13, s14, s11
 801310a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801310e:	ee07 3a10 	vmov	s14, r3
 8013112:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80131c0 <MEMS_runMagCal+0x3e8>
 8013116:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801311a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801311e:	ee25 0a80 	vmul.f32	s0, s11, s0
 8013122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312a:	f100 82a2 	bmi.w	8013672 <MEMS_runMagCal+0x89a>
 801312e:	eddd 7a04 	vldr	s15, [sp, #16]
 8013132:	ed9f 6a24 	vldr	s12, [pc, #144]	; 80131c4 <MEMS_runMagCal+0x3ec>
 8013136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801313a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801313e:	eef4 5ac6 	vcmpe.f32	s11, s12
 8013142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013146:	f300 8294 	bgt.w	8013672 <MEMS_runMagCal+0x89a>
 801314a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801314e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013152:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801315a:	f301 81f8 	bgt.w	801454e <MEMS_runMagCal+0x1776>
 801315e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801316e:	f340 8552 	ble.w	8013c16 <MEMS_runMagCal+0xe3e>
 8013172:	ee07 6a90 	vmov	s15, r6
 8013176:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801317a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801317e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013186:	f340 8546 	ble.w	8013c16 <MEMS_runMagCal+0xe3e>
 801318a:	ee07 7a90 	vmov	s15, r7
 801318e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013192:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319a:	f140 853c 	bpl.w	8013c16 <MEMS_runMagCal+0xe3e>
 801319e:	ee07 4a90 	vmov	s15, r4
 80131a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131a6:	2300      	movs	r3, #0
 80131a8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80131ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b0:	9303      	str	r3, [sp, #12]
 80131b2:	bf48      	it	mi
 80131b4:	2301      	movmi	r3, #1
 80131b6:	9307      	str	r3, [sp, #28]
 80131b8:	f000 bd30 	b.w	8013c1c <MEMS_runMagCal+0xe44>
 80131bc:	ffff8000 	.word	0xffff8000
 80131c0:	43020000 	.word	0x43020000
 80131c4:	447a0000 	.word	0x447a0000
 80131c8:	00000000 	.word	0x00000000
 80131cc:	41f00001 	.word	0x41f00001
 80131d0:	400ccccd 	.word	0x400ccccd
 80131d4:	3dcccccd 	.word	0x3dcccccd
 80131d8:	423c0000 	.word	0x423c0000
 80131dc:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 80131c8 <MEMS_runMagCal+0x3f0>
 80131e0:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 80131cc <MEMS_runMagCal+0x3f4>
 80131e4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80131e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80131ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131f0:	dc10      	bgt.n	8013214 <MEMS_runMagCal+0x43c>
 80131f2:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80131d0 <MEMS_runMagCal+0x3f8>
 80131f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fe:	dc09      	bgt.n	8013214 <MEMS_runMagCal+0x43c>
 8013200:	ed94 9a03 	vldr	s18, [r4, #12]
 8013204:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 80131d4 <MEMS_runMagCal+0x3fc>
 8013208:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013210:	f201 8527 	bhi.w	8014c62 <MEMS_runMagCal+0x1e8a>
 8013214:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 80131d8 <MEMS_runMagCal+0x400>
 8013218:	edd4 6a03 	vldr	s13, [r4, #12]
 801321c:	ed94 5a00 	vldr	s10, [r4]
 8013220:	edd4 5a01 	vldr	s11, [r4, #4]
 8013224:	ed94 6a02 	vldr	s12, [r4, #8]
 8013228:	edc4 7a06 	vstr	s15, [r4, #24]
 801322c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013230:	ad2e      	add	r5, sp, #184	; 0xb8
 8013232:	2300      	movs	r3, #0
 8013234:	e9c5 3300 	strd	r3, r3, [r5]
 8013238:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801323c:	60ab      	str	r3, [r5, #8]
 801323e:	61ab      	str	r3, [r5, #24]
 8013240:	4be7      	ldr	r3, [pc, #924]	; (80135e0 <MEMS_runMagCal+0x808>)
 8013242:	9311      	str	r3, [sp, #68]	; 0x44
 8013244:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8013248:	eec5 9a88 	vdiv.f32	s19, s11, s16
 801324c:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8013250:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8013254:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013258:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801325c:	eef0 6a67 	vmov.f32	s13, s15
 8013260:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8013264:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013268:	ee39 9a46 	vsub.f32	s18, s18, s12
 801326c:	eddf 6add 	vldr	s13, [pc, #884]	; 80135e4 <MEMS_runMagCal+0x80c>
 8013270:	ed9f 6add 	vldr	s12, [pc, #884]	; 80135e8 <MEMS_runMagCal+0x810>
 8013274:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013278:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801327c:	eef0 6ae6 	vabs.f32	s13, s13
 8013280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013284:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328c:	eef0 7ae7 	vabs.f32	s15, s15
 8013290:	f101 84dd 	bmi.w	8014c4e <MEMS_runMagCal+0x1e76>
 8013294:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 80135ec <MEMS_runMagCal+0x814>
 8013298:	eef4 7ac7 	vcmpe.f32	s15, s14
 801329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a0:	f281 8438 	bge.w	8014b14 <MEMS_runMagCal+0x1d3c>
 80132a4:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80135f0 <MEMS_runMagCal+0x818>
 80132a8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80132ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b0:	f101 8430 	bmi.w	8014b14 <MEMS_runMagCal+0x1d3c>
 80132b4:	f002 fd04 	bl	8015cc0 <roundf>
 80132b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80132bc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80132c0:	ee17 3a90 	vmov	r3, s15
 80132c4:	eeb0 0a69 	vmov.f32	s0, s19
 80132c8:	f8a9 3000 	strh.w	r3, [r9]
 80132cc:	f002 fcf8 	bl	8015cc0 <roundf>
 80132d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80132d4:	eeb0 0a4a 	vmov.f32	s0, s20
 80132d8:	ee17 3a90 	vmov	r3, s15
 80132dc:	f8a9 3002 	strh.w	r3, [r9, #2]
 80132e0:	f002 fcee 	bl	8015cc0 <roundf>
 80132e4:	eddd 7a08 	vldr	s15, [sp, #32]
 80132e8:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 80132ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80132f0:	ee16 3a90 	vmov	r3, s13
 80132f4:	eddf 7abf 	vldr	s15, [pc, #764]	; 80135f4 <MEMS_runMagCal+0x81c>
 80132f8:	f8a9 3004 	strh.w	r3, [r9, #4]
 80132fc:	ee27 0a27 	vmul.f32	s0, s14, s15
 8013300:	f002 fcde 	bl	8015cc0 <roundf>
 8013304:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013308:	ae0f      	add	r6, sp, #60	; 0x3c
 801330a:	ed8b 0a01 	vstr	s0, [fp, #4]
 801330e:	ab10      	add	r3, sp, #64	; 0x40
 8013310:	ee1c 0a10 	vmov	r0, s24
 8013314:	eeb0 0a48 	vmov.f32	s0, s16
 8013318:	4649      	mov	r1, r9
 801331a:	9600      	str	r6, [sp, #0]
 801331c:	aa2d      	add	r2, sp, #180	; 0xb4
 801331e:	f7f8 ff33 	bl	800c188 <getMagStats.constprop.0>
 8013322:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013326:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80135f8 <MEMS_runMagCal+0x820>
 801332a:	461f      	mov	r7, r3
 801332c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	ee07 3a90 	vmov	s15, r3
 8013336:	ee07 0a10 	vmov	s14, r0
 801333a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801333e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013342:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	dc0f      	bgt.n	8013370 <MEMS_runMagCal+0x598>
 8013350:	ed96 7a00 	vldr	s14, [r6]
 8013354:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013360:	bfc3      	ittte	gt
 8013362:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8013366:	fab3 f383 	clzgt	r3, r3
 801336a:	095b      	lsrgt	r3, r3, #5
 801336c:	2301      	movle	r3, #1
 801336e:	9303      	str	r3, [sp, #12]
 8013370:	ed96 0a00 	vldr	s0, [r6]
 8013374:	f8db 6004 	ldr.w	r6, [fp, #4]
 8013378:	9620      	str	r6, [sp, #128]	; 0x80
 801337a:	ee28 0a80 	vmul.f32	s0, s17, s0
 801337e:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8013382:	f002 fc9d 	bl	8015cc0 <roundf>
 8013386:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 801338a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 801338e:	ee17 3a10 	vmov	r3, s14
 8013392:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8013396:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801339a:	f002 fc91 	bl	8015cc0 <roundf>
 801339e:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80135fc <MEMS_runMagCal+0x824>
 80133a2:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 80133a6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80133aa:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 80133ae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80133b2:	f8d9 0000 	ldr.w	r0, [r9]
 80133b6:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 80133ba:	ee66 6a86 	vmul.f32	s13, s13, s12
 80133be:	ee27 7a06 	vmul.f32	s14, s14, s12
 80133c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80133c6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80133ca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80133ce:	ee16 2a90 	vmov	r2, s13
 80133d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80133d6:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 80133da:	f1b8 0f01 	cmp.w	r8, #1
 80133de:	fa1f fc82 	uxth.w	ip, r2
 80133e2:	bf08      	it	eq
 80133e4:	23ff      	moveq	r3, #255	; 0xff
 80133e6:	ee17 2a10 	vmov	r2, s14
 80133ea:	ee17 1a90 	vmov	r1, s15
 80133ee:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 80133f2:	ee16 0a10 	vmov	r0, s12
 80133f6:	bf08      	it	eq
 80133f8:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 80133fc:	9b03      	ldr	r3, [sp, #12]
 80133fe:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 8013402:	b292      	uxth	r2, r2
 8013404:	b289      	uxth	r1, r1
 8013406:	2000      	movs	r0, #0
 8013408:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 801340c:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013410:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8013414:	f88b 0000 	strb.w	r0, [fp]
 8013418:	2b00      	cmp	r3, #0
 801341a:	f000 8118 	beq.w	801364e <MEMS_runMagCal+0x876>
 801341e:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013422:	f88b 0001 	strb.w	r0, [fp, #1]
 8013426:	2b00      	cmp	r3, #0
 8013428:	f041 80fd 	bne.w	8014626 <MEMS_runMagCal+0x184e>
 801342c:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013430:	ad0e      	add	r5, sp, #56	; 0x38
 8013432:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8013436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801343a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801343e:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8013442:	f8cb 6008 	str.w	r6, [fp, #8]
 8013446:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 801344a:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 801344e:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8013600 <MEMS_runMagCal+0x828>
 8013452:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8013456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801345a:	fb00 f404 	mul.w	r4, r0, r4
 801345e:	ee05 4a90 	vmov	s11, r4
 8013462:	fb00 f406 	mul.w	r4, r0, r6
 8013466:	fb00 f00e 	mul.w	r0, r0, lr
 801346a:	ee06 0a10 	vmov	s12, r0
 801346e:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8013472:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8013476:	ee03 0a90 	vmov	s7, r0
 801347a:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 801347e:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8013482:	ee05 4a10 	vmov	s10, r4
 8013486:	ee04 0a10 	vmov	s8, r0
 801348a:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 801348e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013492:	ee04 0a90 	vmov	s9, r0
 8013496:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801349a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801349e:	f8dc 0000 	ldr.w	r0, [ip]
 80134a2:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 80134a6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80134aa:	ee25 5a27 	vmul.f32	s10, s10, s15
 80134ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80134b2:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80134b6:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 80134ba:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80134be:	2001      	movs	r0, #1
 80134c0:	24ff      	movs	r4, #255	; 0xff
 80134c2:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 80134c6:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 80134ca:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 80134ce:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 80134d2:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 80134d6:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 80134da:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 80134de:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 80134e2:	f88b 4012 	strb.w	r4, [fp, #18]
 80134e6:	2f00      	cmp	r7, #0
 80134e8:	f001 82c8 	beq.w	8014a7c <MEMS_runMagCal+0x1ca4>
 80134ec:	9b05      	ldr	r3, [sp, #20]
 80134ee:	ed9f 3a47 	vldr	s6, [pc, #284]	; 801360c <MEMS_runMagCal+0x834>
 80134f2:	ed93 0a01 	vldr	s0, [r3, #4]
 80134f6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80134fa:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80134fe:	2200      	movs	r2, #0
 8013500:	ee20 3a03 	vmul.f32	s6, s0, s6
 8013504:	f04f 34ff 	mov.w	r4, #4294967295
 8013508:	4616      	mov	r6, r2
 801350a:	fb96 f3f0 	sdiv	r3, r6, r0
 801350e:	fb00 6313 	mls	r3, r0, r3, r6
 8013512:	b2db      	uxtb	r3, r3
 8013514:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013518:	1c66      	adds	r6, r4, #1
 801351a:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801351e:	ee07 4a90 	vmov	s15, r4
 8013522:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013526:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801352a:	ee06 4a90 	vmov	s13, r4
 801352e:	fb96 f4f1 	sdiv	r4, r6, r1
 8013532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013536:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801353a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801353e:	ee07 3a10 	vmov	s14, r3
 8013542:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8013546:	ee67 7a85 	vmul.f32	s15, s15, s10
 801354a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801354e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013552:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013556:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801355a:	fb01 6414 	mls	r4, r1, r4, r6
 801355e:	b264      	sxtb	r4, r4
 8013560:	ee37 7a64 	vsub.f32	s14, s14, s9
 8013564:	3201      	adds	r2, #1
 8013566:	ee27 7a06 	vmul.f32	s14, s14, s12
 801356a:	b212      	sxth	r2, r2
 801356c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013570:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8013574:	42ba      	cmp	r2, r7
 8013576:	4616      	mov	r6, r2
 8013578:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801357c:	ee67 7a03 	vmul.f32	s15, s14, s6
 8013580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013584:	ee17 ca90 	vmov	ip, s15
 8013588:	f8a3 c014 	strh.w	ip, [r3, #20]
 801358c:	dbbd      	blt.n	801350a <MEMS_runMagCal+0x732>
 801358e:	f88b 4012 	strb.w	r4, [fp, #18]
 8013592:	428f      	cmp	r7, r1
 8013594:	bf28      	it	cs
 8013596:	460f      	movcs	r7, r1
 8013598:	f88b 7010 	strb.w	r7, [fp, #16]
 801359c:	ee1c 0a10 	vmov	r0, s24
 80135a0:	9500      	str	r5, [sp, #0]
 80135a2:	4642      	mov	r2, r8
 80135a4:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80135a8:	ab0d      	add	r3, sp, #52	; 0x34
 80135aa:	f7f8 fded 	bl	800c188 <getMagStats.constprop.0>
 80135ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8013604 <MEMS_runMagCal+0x82c>
 80135b2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80135b6:	edd5 6a00 	vldr	s13, [r5]
 80135ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80135c2:	eef0 7ae7 	vabs.f32	s15, s15
 80135c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80135ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ce:	d525      	bpl.n	801361c <MEMS_runMagCal+0x844>
 80135d0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80135d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d8:	f101 8257 	bmi.w	8014a8a <MEMS_runMagCal+0x1cb2>
 80135dc:	e01e      	b.n	801361c <MEMS_runMagCal+0x844>
 80135de:	bf00      	nop
 80135e0:	41f00001 	.word	0x41f00001
 80135e4:	3f8ccccd 	.word	0x3f8ccccd
 80135e8:	3f266666 	.word	0x3f266666
 80135ec:	3eb33333 	.word	0x3eb33333
 80135f0:	3f19999a 	.word	0x3f19999a
 80135f4:	3a83126f 	.word	0x3a83126f
 80135f8:	3c23d70a 	.word	0x3c23d70a
 80135fc:	447a0000 	.word	0x447a0000
 8013600:	358637bd 	.word	0x358637bd
 8013604:	423c0000 	.word	0x423c0000
 8013608:	4423d666 	.word	0x4423d666
 801360c:	42c80000 	.word	0x42c80000
 8013610:	427c0000 	.word	0x427c0000
 8013614:	3f666666 	.word	0x3f666666
 8013618:	3eaaaaab 	.word	0x3eaaaaab
 801361c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8013620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013628:	d507      	bpl.n	801363a <MEMS_runMagCal+0x862>
 801362a:	eef4 6a47 	vcmp.f32	s13, s14
 801362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013632:	9b03      	ldr	r3, [sp, #12]
 8013634:	bf48      	it	mi
 8013636:	2302      	movmi	r3, #2
 8013638:	9303      	str	r3, [sp, #12]
 801363a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801363e:	9a03      	ldr	r2, [sp, #12]
 8013640:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 8013644:	2bc8      	cmp	r3, #200	; 0xc8
 8013646:	d902      	bls.n	801364e <MEMS_runMagCal+0x876>
 8013648:	2302      	movs	r3, #2
 801364a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801364e:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013652:	ecbd 8b0a 	vpop	{d8-d12}
 8013656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801365a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801365e:	4291      	cmp	r1, r2
 8013660:	f4ff abea 	bcc.w	8012e38 <MEMS_runMagCal+0x60>
 8013664:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013668:	2b00      	cmp	r3, #0
 801366a:	f47f abf9 	bne.w	8012e60 <MEMS_runMagCal+0x88>
 801366e:	f7ff bbed 	b.w	8012e4c <MEMS_runMagCal+0x74>
 8013672:	2702      	movs	r7, #2
 8013674:	2300      	movs	r3, #0
 8013676:	9307      	str	r3, [sp, #28]
 8013678:	9303      	str	r3, [sp, #12]
 801367a:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8013608 <MEMS_runMagCal+0x830>
 801367e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013686:	f140 8260 	bpl.w	8013b4a <MEMS_runMagCal+0xd72>
 801368a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 801360c <MEMS_runMagCal+0x834>
 801368e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013692:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013696:	2b01      	cmp	r3, #1
 8013698:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 801369c:	d911      	bls.n	80136c2 <MEMS_runMagCal+0x8ea>
 801369e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80136a2:	ee17 3a90 	vmov	r3, s15
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	2bc7      	cmp	r3, #199	; 0xc7
 80136aa:	f201 8359 	bhi.w	8014d60 <MEMS_runMagCal+0x1f88>
 80136ae:	2300      	movs	r3, #0
 80136b0:	22ff      	movs	r2, #255	; 0xff
 80136b2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80136b6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80136ba:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 80136be:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80136c2:	2f00      	cmp	r7, #0
 80136c4:	f040 824d 	bne.w	8013b62 <MEMS_runMagCal+0xd8a>
 80136c8:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f2c0 839e 	blt.w	8013e0e <MEMS_runMagCal+0x1036>
 80136d2:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80136d6:	1c5a      	adds	r2, r3, #1
 80136d8:	fbb2 f3f6 	udiv	r3, r2, r6
 80136dc:	fb06 2313 	mls	r3, r6, r3, r2
 80136e0:	b25b      	sxtb	r3, r3
 80136e2:	461d      	mov	r5, r3
 80136e4:	f89b 4010 	ldrb.w	r4, [fp, #16]
 80136e8:	f88b 3012 	strb.w	r3, [fp, #18]
 80136ec:	3401      	adds	r4, #1
 80136ee:	42b4      	cmp	r4, r6
 80136f0:	bfa8      	it	ge
 80136f2:	4634      	movge	r4, r6
 80136f4:	fa5f f884 	uxtb.w	r8, r4
 80136f8:	f88b 8010 	strb.w	r8, [fp, #16]
 80136fc:	f002 fae0 	bl	8015cc0 <roundf>
 8013700:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8013704:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8013708:	ee10 2a10 	vmov	r2, s0
 801370c:	829a      	strh	r2, [r3, #20]
 801370e:	2f00      	cmp	r7, #0
 8013710:	f040 8227 	bne.w	8013b62 <MEMS_runMagCal+0xd8a>
 8013714:	f8db 200c 	ldr.w	r2, [fp, #12]
 8013718:	b122      	cbz	r2, 8013724 <MEMS_runMagCal+0x94c>
 801371a:	9908      	ldr	r1, [sp, #32]
 801371c:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8013720:	4299      	cmp	r1, r3
 8013722:	d394      	bcc.n	801364e <MEMS_runMagCal+0x876>
 8013724:	9b03      	ldr	r3, [sp, #12]
 8013726:	2b01      	cmp	r3, #1
 8013728:	d091      	beq.n	801364e <MEMS_runMagCal+0x876>
 801372a:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 801372e:	1ebb      	subs	r3, r7, #2
 8013730:	2b01      	cmp	r3, #1
 8013732:	f240 8232 	bls.w	8013b9a <MEMS_runMagCal+0xdc2>
 8013736:	9b05      	ldr	r3, [sp, #20]
 8013738:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8013610 <MEMS_runMagCal+0x838>
 801373c:	ed93 8a01 	vldr	s16, [r3, #4]
 8013740:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8013744:	9a06      	ldr	r2, [sp, #24]
 8013746:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 801374a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801374c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013750:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8013754:	fb02 1404 	mla	r4, r2, r4, r1
 8013758:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801375c:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8013760:	3310      	adds	r3, #16
 8013762:	42a3      	cmp	r3, r4
 8013764:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013768:	ee28 9a89 	vmul.f32	s18, s17, s18
 801376c:	ee0c 2a10 	vmov	s24, r2
 8013770:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013778:	ee17 2a90 	vmov	r2, s15
 801377c:	fa1f f982 	uxth.w	r9, r2
 8013780:	f080 81fe 	bcs.w	8013b80 <MEMS_runMagCal+0xda8>
 8013784:	f242 3328 	movw	r3, #9000	; 0x2328
 8013788:	429c      	cmp	r4, r3
 801378a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801378e:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8013792:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8013796:	bf1a      	itte	ne
 8013798:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801379c:	3c28      	subne	r4, #40	; 0x28
 801379e:	2400      	moveq	r4, #0
 80137a0:	42a8      	cmp	r0, r5
 80137a2:	f102 0201 	add.w	r2, r2, #1
 80137a6:	f000 8727 	beq.w	80145f8 <MEMS_runMagCal+0x1820>
 80137aa:	1a12      	subs	r2, r2, r0
 80137ac:	fb92 f1f5 	sdiv	r1, r2, r5
 80137b0:	fb05 2211 	mls	r2, r5, r1, r2
 80137b4:	2a00      	cmp	r2, #0
 80137b6:	bfb8      	it	lt
 80137b8:	1952      	addlt	r2, r2, r5
 80137ba:	b211      	sxth	r1, r2
 80137bc:	b358      	cbz	r0, 8013816 <MEMS_runMagCal+0xa3e>
 80137be:	3801      	subs	r0, #1
 80137c0:	b280      	uxth	r0, r0
 80137c2:	3001      	adds	r0, #1
 80137c4:	1b36      	subs	r6, r6, r4
 80137c6:	9f03      	ldr	r7, [sp, #12]
 80137c8:	b2b6      	uxth	r6, r6
 80137ca:	4408      	add	r0, r1
 80137cc:	e002      	b.n	80137d4 <MEMS_runMagCal+0x9fc>
 80137ce:	3101      	adds	r1, #1
 80137d0:	4281      	cmp	r1, r0
 80137d2:	d01b      	beq.n	801380c <MEMS_runMagCal+0xa34>
 80137d4:	fb91 f3f5 	sdiv	r3, r1, r5
 80137d8:	fb05 1313 	mls	r3, r5, r3, r1
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80137e2:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 80137e6:	4432      	add	r2, r6
 80137e8:	b212      	sxth	r2, r2
 80137ea:	2a00      	cmp	r2, #0
 80137ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80137f0:	daed      	bge.n	80137ce <MEMS_runMagCal+0x9f6>
 80137f2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80137f6:	1e5a      	subs	r2, r3, #1
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f000 8306 	beq.w	8013e0a <MEMS_runMagCal+0x1032>
 80137fe:	3101      	adds	r1, #1
 8013800:	4281      	cmp	r1, r0
 8013802:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013806:	f04f 0701 	mov.w	r7, #1
 801380a:	d1e3      	bne.n	80137d4 <MEMS_runMagCal+0x9fc>
 801380c:	2f01      	cmp	r7, #1
 801380e:	f001 80ea 	beq.w	80149e6 <MEMS_runMagCal+0x1c0e>
 8013812:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013816:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 801381a:	2800      	cmp	r0, #0
 801381c:	f000 81b6 	beq.w	8013b8c <MEMS_runMagCal+0xdb4>
 8013820:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013824:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013826:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801382a:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 801382e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8013832:	3308      	adds	r3, #8
 8013834:	441c      	add	r4, r3
 8013836:	42a2      	cmp	r2, r4
 8013838:	f200 86e6 	bhi.w	8014608 <MEMS_runMagCal+0x1830>
 801383c:	9b07      	ldr	r3, [sp, #28]
 801383e:	b923      	cbnz	r3, 801384a <MEMS_runMagCal+0xa72>
 8013840:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013844:	2b0a      	cmp	r3, #10
 8013846:	f240 81a5 	bls.w	8013b94 <MEMS_runMagCal+0xdbc>
 801384a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801384e:	9302      	str	r3, [sp, #8]
 8013850:	2b00      	cmp	r3, #0
 8013852:	f000 819f 	beq.w	8013b94 <MEMS_runMagCal+0xdbc>
 8013856:	ee29 aa09 	vmul.f32	s20, s18, s18
 801385a:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 8013614 <MEMS_runMagCal+0x83c>
 801385e:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8013618 <MEMS_runMagCal+0x840>
 8013862:	9b03      	ldr	r3, [sp, #12]
 8013864:	9309      	str	r3, [sp, #36]	; 0x24
 8013866:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 801386a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801386e:	2100      	movs	r1, #0
 8013870:	ee2a aa26 	vmul.f32	s20, s20, s13
 8013874:	ee28 8a07 	vmul.f32	s16, s16, s14
 8013878:	ee69 9a29 	vmul.f32	s19, s18, s19
 801387c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013880:	468a      	mov	sl, r1
 8013882:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013884:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8013888:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 801388c:	2b00      	cmp	r3, #0
 801388e:	f000 80e2 	beq.w	8013a56 <MEMS_runMagCal+0xc7e>
 8013892:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8013896:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801389a:	ee07 4a90 	vmov	s15, r4
 801389e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138a2:	eef0 7ae7 	vabs.f32	s15, s15
 80138a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80138aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ae:	f100 820b 	bmi.w	8013cc8 <MEMS_runMagCal+0xef0>
 80138b2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80138b6:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80138ba:	2f00      	cmp	r7, #0
 80138bc:	f000 8223 	beq.w	8013d06 <MEMS_runMagCal+0xf2e>
 80138c0:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 80138c4:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 80138c8:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 80138cc:	1b52      	subs	r2, r2, r5
 80138ce:	fb02 f102 	mul.w	r1, r2, r2
 80138d2:	1b02      	subs	r2, r0, r4
 80138d4:	fb02 1202 	mla	r2, r2, r2, r1
 80138d8:	1b9b      	subs	r3, r3, r6
 80138da:	fb03 2303 	mla	r3, r3, r3, r2
 80138de:	ee07 3a90 	vmov	s15, r3
 80138e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138e6:	eeb4 aae7 	vcmpe.f32	s20, s15
 80138ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ee:	f300 80b2 	bgt.w	8013a56 <MEMS_runMagCal+0xc7e>
 80138f2:	fb94 f3f9 	sdiv	r3, r4, r9
 80138f6:	fb09 4313 	mls	r3, r9, r3, r4
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	bfb8      	it	lt
 80138fe:	444b      	addlt	r3, r9
 8013900:	b21b      	sxth	r3, r3
 8013902:	ee00 3a10 	vmov	s0, r3
 8013906:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801390a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801390e:	f002 f9d7 	bl	8015cc0 <roundf>
 8013912:	fb95 f3f9 	sdiv	r3, r5, r9
 8013916:	fb09 5313 	mls	r3, r9, r3, r5
 801391a:	2b00      	cmp	r3, #0
 801391c:	bfb8      	it	lt
 801391e:	444b      	addlt	r3, r9
 8013920:	b21b      	sxth	r3, r3
 8013922:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013926:	ee00 3a10 	vmov	s0, r3
 801392a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801392e:	edcd 7a04 	vstr	s15, [sp, #16]
 8013932:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013936:	f002 f9c3 	bl	8015cc0 <roundf>
 801393a:	fb96 f3f9 	sdiv	r3, r6, r9
 801393e:	fb09 6313 	mls	r3, r9, r3, r6
 8013942:	2b00      	cmp	r3, #0
 8013944:	bfb8      	it	lt
 8013946:	444b      	addlt	r3, r9
 8013948:	b21b      	sxth	r3, r3
 801394a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801394e:	ee00 3a10 	vmov	s0, r3
 8013952:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013956:	f89d 8010 	ldrb.w	r8, [sp, #16]
 801395a:	edcd 7a04 	vstr	s15, [sp, #16]
 801395e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8013962:	9204      	str	r2, [sp, #16]
 8013964:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013968:	f002 f9aa 	bl	8015cc0 <roundf>
 801396c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013970:	f1b8 0f1f 	cmp.w	r8, #31
 8013974:	edcd 7a06 	vstr	s15, [sp, #24]
 8013978:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801397c:	9106      	str	r1, [sp, #24]
 801397e:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 8013982:	f240 823d 	bls.w	8013e00 <MEMS_runMagCal+0x1028>
 8013986:	f1a8 0220 	sub.w	r2, r8, #32
 801398a:	2101      	movs	r1, #1
 801398c:	fa01 f202 	lsl.w	r2, r1, r2
 8013990:	401a      	ands	r2, r3
 8013992:	9804      	ldr	r0, [sp, #16]
 8013994:	281f      	cmp	r0, #31
 8013996:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 801399a:	f240 821f 	bls.w	8013ddc <MEMS_runMagCal+0x1004>
 801399e:	f1a0 0120 	sub.w	r1, r0, #32
 80139a2:	2001      	movs	r0, #1
 80139a4:	fa00 f101 	lsl.w	r1, r0, r1
 80139a8:	ea01 0c03 	and.w	ip, r1, r3
 80139ac:	9906      	ldr	r1, [sp, #24]
 80139ae:	291f      	cmp	r1, #31
 80139b0:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 80139b4:	f240 821e 	bls.w	8013df4 <MEMS_runMagCal+0x101c>
 80139b8:	f1a1 0020 	sub.w	r0, r1, #32
 80139bc:	2101      	movs	r1, #1
 80139be:	fa01 f000 	lsl.w	r0, r1, r0
 80139c2:	4003      	ands	r3, r0
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	f040 812b 	bne.w	8013c20 <MEMS_runMagCal+0xe48>
 80139ca:	ea52 030c 	orrs.w	r3, r2, ip
 80139ce:	f040 812c 	bne.w	8013c2a <MEMS_runMagCal+0xe52>
 80139d2:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80139d6:	930a      	str	r3, [sp, #40]	; 0x28
 80139d8:	461a      	mov	r2, r3
 80139da:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80139de:	3301      	adds	r3, #1
 80139e0:	4694      	mov	ip, r2
 80139e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80139e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139e6:	fb92 f3fc 	sdiv	r3, r2, ip
 80139ea:	3701      	adds	r7, #1
 80139ec:	4567      	cmp	r7, ip
 80139ee:	bfa8      	it	ge
 80139f0:	4667      	movge	r7, ip
 80139f2:	fb0c 2c13 	mls	ip, ip, r3, r2
 80139f6:	b2ff      	uxtb	r7, r7
 80139f8:	fa4f fc8c 	sxtb.w	ip, ip
 80139fc:	9905      	ldr	r1, [sp, #20]
 80139fe:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 8013a02:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8013a06:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 8013a0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a0c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013a10:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 8013a14:	1a9b      	subs	r3, r3, r2
 8013a16:	fb01 330a 	mla	r3, r1, sl, r3
 8013a1a:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8013a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a20:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 8013a24:	429f      	cmp	r7, r3
 8013a26:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013a2a:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013a2e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013a32:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013a36:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013a3a:	f000 8758 	beq.w	80148ee <MEMS_runMagCal+0x1b16>
 8013a3e:	9b06      	ldr	r3, [sp, #24]
 8013a40:	9a04      	ldr	r2, [sp, #16]
 8013a42:	ee1c 0a10 	vmov	r0, s24
 8013a46:	4641      	mov	r1, r8
 8013a48:	f7f8 f874 	bl	800bb34 <MEMS_setMagIndexToOne>
 8013a4c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013a50:	9302      	str	r3, [sp, #8]
 8013a52:	2301      	movs	r3, #1
 8013a54:	9309      	str	r3, [sp, #36]	; 0x24
 8013a56:	9b02      	ldr	r3, [sp, #8]
 8013a58:	f10a 0a01 	add.w	sl, sl, #1
 8013a5c:	fa0f fa8a 	sxth.w	sl, sl
 8013a60:	459a      	cmp	sl, r3
 8013a62:	4651      	mov	r1, sl
 8013a64:	f6ff af0d 	blt.w	8013882 <MEMS_runMagCal+0xaaa>
 8013a68:	f89b 3000 	ldrb.w	r3, [fp]
 8013a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a6e:	431a      	orrs	r2, r3
 8013a70:	b2d3      	uxtb	r3, r2
 8013a72:	f88b 3000 	strb.w	r3, [fp]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f43f ade9 	beq.w	801364e <MEMS_runMagCal+0x876>
 8013a7c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013a80:	9306      	str	r3, [sp, #24]
 8013a82:	2b19      	cmp	r3, #25
 8013a84:	f67f ade3 	bls.w	801364e <MEMS_runMagCal+0x876>
 8013a88:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8013a8e:	b123      	cbz	r3, 8013a9a <MEMS_runMagCal+0xcc2>
 8013a90:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	f040 8583 	bne.w	80145a0 <MEMS_runMagCal+0x17c8>
 8013a9a:	9b07      	ldr	r3, [sp, #28]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	f040 872f 	bne.w	8014900 <MEMS_runMagCal+0x1b28>
 8013aa2:	9b05      	ldr	r3, [sp, #20]
 8013aa4:	9903      	ldr	r1, [sp, #12]
 8013aa6:	ed93 8a01 	vldr	s16, [r3, #4]
 8013aaa:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013aae:	9302      	str	r3, [sp, #8]
 8013ab0:	2600      	movs	r6, #0
 8013ab2:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8013ab6:	9304      	str	r3, [sp, #16]
 8013ab8:	f04f 0a01 	mov.w	sl, #1
 8013abc:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013ac0:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8013ac4:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013ac8:	9624      	str	r6, [sp, #144]	; 0x90
 8013aca:	4657      	mov	r7, sl
 8013acc:	460b      	mov	r3, r1
 8013ace:	460c      	mov	r4, r1
 8013ad0:	e013      	b.n	8013afa <MEMS_runMagCal+0xd22>
 8013ad2:	f1b9 0f00 	cmp.w	r9, #0
 8013ad6:	bf18      	it	ne
 8013ad8:	3101      	addne	r1, #1
 8013ada:	2d00      	cmp	r5, #0
 8013adc:	bf18      	it	ne
 8013ade:	3401      	addne	r4, #1
 8013ae0:	2a00      	cmp	r2, #0
 8013ae2:	bf18      	it	ne
 8013ae4:	3301      	addne	r3, #1
 8013ae6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013aea:	b2c9      	uxtb	r1, r1
 8013aec:	b2e4      	uxtb	r4, r4
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	f000 81a2 	beq.w	8013e38 <MEMS_runMagCal+0x1060>
 8013af4:	3601      	adds	r6, #1
 8013af6:	fa5f fa8c 	uxtb.w	sl, ip
 8013afa:	9804      	ldr	r0, [sp, #16]
 8013afc:	f1a6 0220 	sub.w	r2, r6, #32
 8013b00:	fa07 f202 	lsl.w	r2, r7, r2
 8013b04:	ea02 0500 	and.w	r5, r2, r0
 8013b08:	9802      	ldr	r0, [sp, #8]
 8013b0a:	2e1f      	cmp	r6, #31
 8013b0c:	ea08 0902 	and.w	r9, r8, r2
 8013b10:	f10a 0c01 	add.w	ip, sl, #1
 8013b14:	ea02 0200 	and.w	r2, r2, r0
 8013b18:	fa07 f006 	lsl.w	r0, r7, r6
 8013b1c:	d8d9      	bhi.n	8013ad2 <MEMS_runMagCal+0xcfa>
 8013b1e:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 8013b22:	ea00 0902 	and.w	r9, r0, r2
 8013b26:	4005      	ands	r5, r0
 8013b28:	ea0e 0000 	and.w	r0, lr, r0
 8013b2c:	f1b9 0f00 	cmp.w	r9, #0
 8013b30:	bf18      	it	ne
 8013b32:	3401      	addne	r4, #1
 8013b34:	2d00      	cmp	r5, #0
 8013b36:	bf0c      	ite	eq
 8013b38:	461d      	moveq	r5, r3
 8013b3a:	1c5d      	addne	r5, r3, #1
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	bf18      	it	ne
 8013b40:	3101      	addne	r1, #1
 8013b42:	b2e4      	uxtb	r4, r4
 8013b44:	b2eb      	uxtb	r3, r5
 8013b46:	b2c9      	uxtb	r1, r1
 8013b48:	e7d4      	b.n	8013af4 <MEMS_runMagCal+0xd1c>
 8013b4a:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013b4e:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013e24 <MEMS_runMagCal+0x104c>
 8013b52:	2b01      	cmp	r3, #1
 8013b54:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013b58:	f63f ada9 	bhi.w	80136ae <MEMS_runMagCal+0x8d6>
 8013b5c:	2f00      	cmp	r7, #0
 8013b5e:	f43f adb3 	beq.w	80136c8 <MEMS_runMagCal+0x8f0>
 8013b62:	9908      	ldr	r1, [sp, #32]
 8013b64:	f8cb 100c 	str.w	r1, [fp, #12]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	23ff      	movs	r3, #255	; 0xff
 8013b6c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013b70:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013b74:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013b78:	ecbd 8b0a 	vpop	{d8-d12}
 8013b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b80:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013b84:	4634      	mov	r4, r6
 8013b86:	2800      	cmp	r0, #0
 8013b88:	f47f ae4a 	bne.w	8013820 <MEMS_runMagCal+0xa48>
 8013b8c:	9b07      	ldr	r3, [sp, #28]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f47f ae5b 	bne.w	801384a <MEMS_runMagCal+0xa72>
 8013b94:	9b03      	ldr	r3, [sp, #12]
 8013b96:	9309      	str	r3, [sp, #36]	; 0x24
 8013b98:	e766      	b.n	8013a68 <MEMS_runMagCal+0xc90>
 8013b9a:	45b0      	cmp	r8, r6
 8013b9c:	f000 86b9 	beq.w	8014912 <MEMS_runMagCal+0x1b3a>
 8013ba0:	2f03      	cmp	r7, #3
 8013ba2:	f47f adc8 	bne.w	8013736 <MEMS_runMagCal+0x95e>
 8013ba6:	ee07 2a90 	vmov	s15, r2
 8013baa:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013e28 <MEMS_runMagCal+0x1050>
 8013bae:	ed9b 7a01 	vldr	s14, [fp, #4]
 8013bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bb6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc6:	f77f adb6 	ble.w	8013736 <MEMS_runMagCal+0x95e>
 8013bca:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	f43f adb1 	beq.w	8013736 <MEMS_runMagCal+0x95e>
 8013bd4:	eddd 7a08 	vldr	s15, [sp, #32]
 8013bd8:	330a      	adds	r3, #10
 8013bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013bde:	ee07 3a90 	vmov	s15, r3
 8013be2:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bea:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf2:	f77f ada0 	ble.w	8013736 <MEMS_runMagCal+0x95e>
 8013bf6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	f47f ad9b 	bne.w	8013736 <MEMS_runMagCal+0x95e>
 8013c00:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f43f ad22 	beq.w	801364e <MEMS_runMagCal+0x876>
 8013c0a:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013c0e:	2bff      	cmp	r3, #255	; 0xff
 8013c10:	f47f ad1d 	bne.w	801364e <MEMS_runMagCal+0x876>
 8013c14:	e58f      	b.n	8013736 <MEMS_runMagCal+0x95e>
 8013c16:	2300      	movs	r3, #0
 8013c18:	9307      	str	r3, [sp, #28]
 8013c1a:	9303      	str	r3, [sp, #12]
 8013c1c:	2700      	movs	r7, #0
 8013c1e:	e52c      	b.n	801367a <MEMS_runMagCal+0x8a2>
 8013c20:	b11a      	cbz	r2, 8013c2a <MEMS_runMagCal+0xe52>
 8013c22:	f1bc 0f00 	cmp.w	ip, #0
 8013c26:	f47f af16 	bne.w	8013a56 <MEMS_runMagCal+0xc7e>
 8013c2a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8013c30:	461a      	mov	r2, r3
 8013c32:	4297      	cmp	r7, r2
 8013c34:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013c38:	f000 848f 	beq.w	801455a <MEMS_runMagCal+0x1782>
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	4611      	mov	r1, r2
 8013c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c42:	1bdb      	subs	r3, r3, r7
 8013c44:	fb93 f2f2 	sdiv	r2, r3, r2
 8013c48:	fb01 3212 	mls	r2, r1, r2, r3
 8013c4c:	2a00      	cmp	r2, #0
 8013c4e:	bfbc      	itt	lt
 8013c50:	460b      	movlt	r3, r1
 8013c52:	18d2      	addlt	r2, r2, r3
 8013c54:	468c      	mov	ip, r1
 8013c56:	b212      	sxth	r2, r2
 8013c58:	f107 3eff 	add.w	lr, r7, #4294967295
 8013c5c:	fa5f fe8e 	uxtb.w	lr, lr
 8013c60:	f10e 0e01 	add.w	lr, lr, #1
 8013c64:	4496      	add	lr, r2
 8013c66:	e002      	b.n	8013c6e <MEMS_runMagCal+0xe96>
 8013c68:	4572      	cmp	r2, lr
 8013c6a:	f43f aebb 	beq.w	80139e4 <MEMS_runMagCal+0xc0c>
 8013c6e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013c72:	fb0c 2313 	mls	r3, ip, r3, r2
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013c7c:	3201      	adds	r2, #1
 8013c7e:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013c82:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013c86:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013c8a:	1a20      	subs	r0, r4, r0
 8013c8c:	1a69      	subs	r1, r5, r1
 8013c8e:	ee07 0a90 	vmov	s15, r0
 8013c92:	ee06 1a90 	vmov	s13, r1
 8013c96:	1af3      	subs	r3, r6, r3
 8013c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ca0:	ee07 3a10 	vmov	s14, r3
 8013ca4:	eef0 7ae7 	vabs.f32	s15, s15
 8013ca8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cac:	eef0 6ae6 	vabs.f32	s13, s13
 8013cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013cb4:	eeb0 7ac7 	vabs.f32	s14, s14
 8013cb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cbc:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cc4:	ddd0      	ble.n	8013c68 <MEMS_runMagCal+0xe90>
 8013cc6:	e6c6      	b.n	8013a56 <MEMS_runMagCal+0xc7e>
 8013cc8:	ee07 5a90 	vmov	s15, r5
 8013ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cd0:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013cd4:	eef0 7ae7 	vabs.f32	s15, s15
 8013cd8:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce0:	f77f ade9 	ble.w	80138b6 <MEMS_runMagCal+0xade>
 8013ce4:	ee07 6a90 	vmov	s15, r6
 8013ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cec:	eef0 7ae7 	vabs.f32	s15, s15
 8013cf0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf8:	f73f aead 	bgt.w	8013a56 <MEMS_runMagCal+0xc7e>
 8013cfc:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013d00:	2f00      	cmp	r7, #0
 8013d02:	f47f addd 	bne.w	80138c0 <MEMS_runMagCal+0xae8>
 8013d06:	fb94 f2f9 	sdiv	r2, r4, r9
 8013d0a:	f04f 0301 	mov.w	r3, #1
 8013d0e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013d12:	9b05      	ldr	r3, [sp, #20]
 8013d14:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013d18:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d1e:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8013d22:	fb09 4212 	mls	r2, r9, r2, r4
 8013d26:	2a00      	cmp	r2, #0
 8013d28:	fb01 3300 	mla	r3, r1, r0, r3
 8013d2c:	bfb8      	it	lt
 8013d2e:	444a      	addlt	r2, r9
 8013d30:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8013d34:	b213      	sxth	r3, r2
 8013d36:	ee00 3a10 	vmov	s0, r3
 8013d3a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013d3e:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013d42:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8013d46:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013d4a:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013d4e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013d52:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d56:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013d5a:	f001 ffb1 	bl	8015cc0 <roundf>
 8013d5e:	fb95 f3f9 	sdiv	r3, r5, r9
 8013d62:	fb09 5513 	mls	r5, r9, r3, r5
 8013d66:	2d00      	cmp	r5, #0
 8013d68:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d6c:	bfb8      	it	lt
 8013d6e:	444d      	addlt	r5, r9
 8013d70:	b22d      	sxth	r5, r5
 8013d72:	edcd 7a02 	vstr	s15, [sp, #8]
 8013d76:	ee07 5a90 	vmov	s15, r5
 8013d7a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013d82:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d86:	f001 ff9b 	bl	8015cc0 <roundf>
 8013d8a:	fb96 f3f9 	sdiv	r3, r6, r9
 8013d8e:	fb09 6613 	mls	r6, r9, r3, r6
 8013d92:	2e00      	cmp	r6, #0
 8013d94:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d98:	bfb8      	it	lt
 8013d9a:	444e      	addlt	r6, r9
 8013d9c:	b236      	sxth	r6, r6
 8013d9e:	edcd 7a02 	vstr	s15, [sp, #8]
 8013da2:	ee07 6a90 	vmov	s15, r6
 8013da6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013daa:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013dae:	9204      	str	r2, [sp, #16]
 8013db0:	2301      	movs	r3, #1
 8013db2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013db6:	9309      	str	r3, [sp, #36]	; 0x24
 8013db8:	f001 ff82 	bl	8015cc0 <roundf>
 8013dbc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013dc0:	9a04      	ldr	r2, [sp, #16]
 8013dc2:	edcd 7a02 	vstr	s15, [sp, #8]
 8013dc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013dca:	ee1c 0a10 	vmov	r0, s24
 8013dce:	4621      	mov	r1, r4
 8013dd0:	f7f7 feb0 	bl	800bb34 <MEMS_setMagIndexToOne>
 8013dd4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013dd8:	9302      	str	r3, [sp, #8]
 8013dda:	e63c      	b.n	8013a56 <MEMS_runMagCal+0xc7e>
 8013ddc:	4603      	mov	r3, r0
 8013dde:	2001      	movs	r0, #1
 8013de0:	fa00 f303 	lsl.w	r3, r0, r3
 8013de4:	ea01 0c03 	and.w	ip, r1, r3
 8013de8:	9906      	ldr	r1, [sp, #24]
 8013dea:	291f      	cmp	r1, #31
 8013dec:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013df0:	f63f ade2 	bhi.w	80139b8 <MEMS_runMagCal+0xbe0>
 8013df4:	460b      	mov	r3, r1
 8013df6:	2101      	movs	r1, #1
 8013df8:	fa01 f303 	lsl.w	r3, r1, r3
 8013dfc:	4003      	ands	r3, r0
 8013dfe:	e5e1      	b.n	80139c4 <MEMS_runMagCal+0xbec>
 8013e00:	2301      	movs	r3, #1
 8013e02:	fa03 f308 	lsl.w	r3, r3, r8
 8013e06:	401a      	ands	r2, r3
 8013e08:	e5c3      	b.n	8013992 <MEMS_runMagCal+0xbba>
 8013e0a:	2701      	movs	r7, #1
 8013e0c:	e4df      	b.n	80137ce <MEMS_runMagCal+0x9f6>
 8013e0e:	2500      	movs	r5, #0
 8013e10:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013e14:	462b      	mov	r3, r5
 8013e16:	e465      	b.n	80136e4 <MEMS_runMagCal+0x90c>
 8013e18:	460f      	mov	r7, r1
 8013e1a:	e42b      	b.n	8013674 <MEMS_runMagCal+0x89c>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	9304      	str	r3, [sp, #16]
 8013e20:	f7ff b941 	b.w	80130a6 <MEMS_runMagCal+0x2ce>
 8013e24:	477fff00 	.word	0x477fff00
 8013e28:	3a83126f 	.word	0x3a83126f
 8013e2c:	42340000 	.word	0x42340000
 8013e30:	3faccccd 	.word	0x3faccccd
 8013e34:	00000000 	.word	0x00000000
 8013e38:	2905      	cmp	r1, #5
 8013e3a:	f240 8383 	bls.w	8014544 <MEMS_runMagCal+0x176c>
 8013e3e:	2c05      	cmp	r4, #5
 8013e40:	f240 8380 	bls.w	8014544 <MEMS_runMagCal+0x176c>
 8013e44:	2b05      	cmp	r3, #5
 8013e46:	f240 837d 	bls.w	8014544 <MEMS_runMagCal+0x176c>
 8013e4a:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013e4e:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013e52:	9302      	str	r3, [sp, #8]
 8013e54:	9b06      	ldr	r3, [sp, #24]
 8013e56:	4553      	cmp	r3, sl
 8013e58:	f000 85f1 	beq.w	8014a3e <MEMS_runMagCal+0x1c66>
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	9b02      	ldr	r3, [sp, #8]
 8013e60:	3301      	adds	r3, #1
 8013e62:	9304      	str	r3, [sp, #16]
 8013e64:	1a9b      	subs	r3, r3, r2
 8013e66:	fb93 f2fa 	sdiv	r2, r3, sl
 8013e6a:	fb0a 3212 	mls	r2, sl, r2, r3
 8013e6e:	2a00      	cmp	r2, #0
 8013e70:	bfb8      	it	lt
 8013e72:	4452      	addlt	r2, sl
 8013e74:	46d1      	mov	r9, sl
 8013e76:	b212      	sxth	r2, r2
 8013e78:	9906      	ldr	r1, [sp, #24]
 8013e7a:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013e7e:	f101 38ff 	add.w	r8, r1, #4294967295
 8013e82:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013e86:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013e8a:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013e8e:	fa5f f888 	uxtb.w	r8, r8
 8013e92:	f108 0801 	add.w	r8, r8, #1
 8013e96:	468e      	mov	lr, r1
 8013e98:	463e      	mov	r6, r7
 8013e9a:	46ac      	mov	ip, r5
 8013e9c:	4490      	add	r8, r2
 8013e9e:	fb92 f3f9 	sdiv	r3, r2, r9
 8013ea2:	fb09 2313 	mls	r3, r9, r3, r2
 8013ea6:	b2db      	uxtb	r3, r3
 8013ea8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013eac:	3201      	adds	r2, #1
 8013eae:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013eb2:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013eb6:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013eba:	42a1      	cmp	r1, r4
 8013ebc:	bfb8      	it	lt
 8013ebe:	4621      	movlt	r1, r4
 8013ec0:	45a6      	cmp	lr, r4
 8013ec2:	bfa8      	it	ge
 8013ec4:	46a6      	movge	lr, r4
 8013ec6:	4285      	cmp	r5, r0
 8013ec8:	bfb8      	it	lt
 8013eca:	4605      	movlt	r5, r0
 8013ecc:	4584      	cmp	ip, r0
 8013ece:	bfa8      	it	ge
 8013ed0:	4684      	movge	ip, r0
 8013ed2:	429f      	cmp	r7, r3
 8013ed4:	bfb8      	it	lt
 8013ed6:	461f      	movlt	r7, r3
 8013ed8:	429e      	cmp	r6, r3
 8013eda:	bfa8      	it	ge
 8013edc:	461e      	movge	r6, r3
 8013ede:	4542      	cmp	r2, r8
 8013ee0:	d1dd      	bne.n	8013e9e <MEMS_runMagCal+0x10c6>
 8013ee2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ee6:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013eea:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013eee:	eba1 010e 	sub.w	r1, r1, lr
 8013ef2:	eba5 050c 	sub.w	r5, r5, ip
 8013ef6:	1bbe      	subs	r6, r7, r6
 8013ef8:	b209      	sxth	r1, r1
 8013efa:	b22d      	sxth	r5, r5
 8013efc:	b236      	sxth	r6, r6
 8013efe:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013e2c <MEMS_runMagCal+0x1054>
 8013f02:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	f040 8593 	bne.w	8014a32 <MEMS_runMagCal+0x1c5a>
 8013f0c:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013f10:	fab3 f883 	clz	r8, r3
 8013f14:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013f18:	ee06 1a90 	vmov	s13, r1
 8013f1c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013f28:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f30:	f300 8562 	bgt.w	80149f8 <MEMS_runMagCal+0x1c20>
 8013f34:	ee06 5a10 	vmov	s12, r5
 8013f38:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013f3c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f44:	f100 8558 	bmi.w	80149f8 <MEMS_runMagCal+0x1c20>
 8013f48:	ee05 6a90 	vmov	s11, r6
 8013f4c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013f50:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f58:	f100 854e 	bmi.w	80149f8 <MEMS_runMagCal+0x1c20>
 8013f5c:	428d      	cmp	r5, r1
 8013f5e:	462b      	mov	r3, r5
 8013f60:	bfb8      	it	lt
 8013f62:	460b      	movlt	r3, r1
 8013f64:	42b3      	cmp	r3, r6
 8013f66:	461a      	mov	r2, r3
 8013f68:	bfb8      	it	lt
 8013f6a:	4632      	movlt	r2, r6
 8013f6c:	428e      	cmp	r6, r1
 8013f6e:	4633      	mov	r3, r6
 8013f70:	bfa8      	it	ge
 8013f72:	460b      	movge	r3, r1
 8013f74:	42ab      	cmp	r3, r5
 8013f76:	bfa8      	it	ge
 8013f78:	462b      	movge	r3, r5
 8013f7a:	428a      	cmp	r2, r1
 8013f7c:	9202      	str	r2, [sp, #8]
 8013f7e:	f340 8588 	ble.w	8014a92 <MEMS_runMagCal+0x1cba>
 8013f82:	4299      	cmp	r1, r3
 8013f84:	bfb8      	it	lt
 8013f86:	4619      	movlt	r1, r3
 8013f88:	42aa      	cmp	r2, r5
 8013f8a:	dd02      	ble.n	8013f92 <MEMS_runMagCal+0x11ba>
 8013f8c:	42ab      	cmp	r3, r5
 8013f8e:	bfb8      	it	lt
 8013f90:	4629      	movlt	r1, r5
 8013f92:	9a02      	ldr	r2, [sp, #8]
 8013f94:	4296      	cmp	r6, r2
 8013f96:	da02      	bge.n	8013f9e <MEMS_runMagCal+0x11c6>
 8013f98:	429e      	cmp	r6, r3
 8013f9a:	bfc8      	it	gt
 8013f9c:	4631      	movgt	r1, r6
 8013f9e:	f1b8 0f00 	cmp.w	r8, #0
 8013fa2:	f000 8299 	beq.w	80144d8 <MEMS_runMagCal+0x1700>
 8013fa6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	dc0d      	bgt.n	8013fcc <MEMS_runMagCal+0x11f4>
 8013fb0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb8:	dc08      	bgt.n	8013fcc <MEMS_runMagCal+0x11f4>
 8013fba:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc2:	bfcc      	ite	gt
 8013fc4:	f04f 0801 	movgt.w	r8, #1
 8013fc8:	f04f 0800 	movle.w	r8, #0
 8013fcc:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013e30 <MEMS_runMagCal+0x1058>
 8013fd0:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013fd8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013fdc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe4:	f2c0 8558 	blt.w	8014a98 <MEMS_runMagCal+0x1cc0>
 8013fe8:	ee07 1a90 	vmov	s15, r1
 8013fec:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013ff0:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ff8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014000:	f2c0 854a 	blt.w	8014a98 <MEMS_runMagCal+0x1cc0>
 8014004:	9a02      	ldr	r2, [sp, #8]
 8014006:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801400a:	f280 8545 	bge.w	8014a98 <MEMS_runMagCal+0x1cc0>
 801400e:	ee07 3a90 	vmov	s15, r3
 8014012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014016:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 801401a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801401e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014026:	f140 8537 	bpl.w	8014a98 <MEMS_runMagCal+0x1cc0>
 801402a:	9b06      	ldr	r3, [sp, #24]
 801402c:	4553      	cmp	r3, sl
 801402e:	f000 8569 	beq.w	8014b04 <MEMS_runMagCal+0x1d2c>
 8014032:	461a      	mov	r2, r3
 8014034:	9b04      	ldr	r3, [sp, #16]
 8014036:	1a9b      	subs	r3, r3, r2
 8014038:	fb93 f7f9 	sdiv	r7, r3, r9
 801403c:	fb09 3717 	mls	r7, r9, r7, r3
 8014040:	2f00      	cmp	r7, #0
 8014042:	bfb8      	it	lt
 8014044:	4457      	addlt	r7, sl
 8014046:	b23f      	sxth	r7, r7
 8014048:	9b03      	ldr	r3, [sp, #12]
 801404a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801404e:	b27f      	sxtb	r7, r7
 8014050:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014054:	9304      	str	r3, [sp, #16]
 8014056:	f1c7 0e01 	rsb	lr, r7, #1
 801405a:	469c      	mov	ip, r3
 801405c:	463b      	mov	r3, r7
 801405e:	fb93 f1f9 	sdiv	r1, r3, r9
 8014062:	fb09 3111 	mls	r1, r9, r1, r3
 8014066:	b24a      	sxtb	r2, r1
 8014068:	2a00      	cmp	r2, #0
 801406a:	f107 0701 	add.w	r7, r7, #1
 801406e:	bfb8      	it	lt
 8014070:	eb0a 0201 	addlt.w	r2, sl, r1
 8014074:	fb97 f3f9 	sdiv	r3, r7, r9
 8014078:	fb09 7313 	mls	r3, r9, r3, r7
 801407c:	bfb8      	it	lt
 801407e:	b252      	sxtblt	r2, r2
 8014080:	b25b      	sxtb	r3, r3
 8014082:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8014086:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 801408a:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801408e:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8014092:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8014096:	1a45      	subs	r5, r0, r1
 8014098:	bf48      	it	mi
 801409a:	1a09      	submi	r1, r1, r0
 801409c:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 80140a0:	bf4c      	ite	mi
 80140a2:	b20d      	sxthmi	r5, r1
 80140a4:	b22d      	sxthpl	r5, r5
 80140a6:	1a21      	subs	r1, r4, r0
 80140a8:	bf48      	it	mi
 80140aa:	1b01      	submi	r1, r0, r4
 80140ac:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 80140b0:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 80140b4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80140b8:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 80140bc:	1a9b      	subs	r3, r3, r2
 80140be:	1a26      	subs	r6, r4, r0
 80140c0:	b21b      	sxth	r3, r3
 80140c2:	bf48      	it	mi
 80140c4:	1b06      	submi	r6, r0, r4
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	b209      	sxth	r1, r1
 80140ca:	b236      	sxth	r6, r6
 80140cc:	dd20      	ble.n	8014110 <MEMS_runMagCal+0x1338>
 80140ce:	4429      	add	r1, r5
 80140d0:	440e      	add	r6, r1
 80140d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80140d6:	fb02 f606 	mul.w	r6, r2, r6
 80140da:	ee07 6a90 	vmov	s15, r6
 80140de:	ee07 3a10 	vmov	s14, r3
 80140e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80140ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80140ee:	f10c 0c01 	add.w	ip, ip, #1
 80140f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80140f6:	fa5f fc8c 	uxtb.w	ip, ip
 80140fa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80140fe:	ee17 3a90 	vmov	r3, s15
 8014102:	b21b      	sxth	r3, r3
 8014104:	2b96      	cmp	r3, #150	; 0x96
 8014106:	dd03      	ble.n	8014110 <MEMS_runMagCal+0x1338>
 8014108:	9b04      	ldr	r3, [sp, #16]
 801410a:	3301      	adds	r3, #1
 801410c:	b2db      	uxtb	r3, r3
 801410e:	9304      	str	r3, [sp, #16]
 8014110:	eb0e 0307 	add.w	r3, lr, r7
 8014114:	b2db      	uxtb	r3, r3
 8014116:	4598      	cmp	r8, r3
 8014118:	d8a0      	bhi.n	801405c <MEMS_runMagCal+0x1284>
 801411a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801411e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8014122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014126:	4563      	cmp	r3, ip
 8014128:	f340 820c 	ble.w	8014544 <MEMS_runMagCal+0x176c>
 801412c:	9b07      	ldr	r3, [sp, #28]
 801412e:	b92b      	cbnz	r3, 801413c <MEMS_runMagCal+0x1364>
 8014130:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8014134:	3b02      	subs	r3, #2
 8014136:	2b01      	cmp	r3, #1
 8014138:	f240 851e 	bls.w	8014b78 <MEMS_runMagCal+0x1da0>
 801413c:	ac25      	add	r4, sp, #148	; 0x94
 801413e:	2220      	movs	r2, #32
 8014140:	4620      	mov	r0, r4
 8014142:	2100      	movs	r1, #0
 8014144:	f003 fbe6 	bl	8017914 <memset>
 8014148:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 801414c:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8014150:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8014154:	2200      	movs	r2, #0
 8014156:	4286      	cmp	r6, r0
 8014158:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 801415c:	921f      	str	r2, [sp, #124]	; 0x7c
 801415e:	f103 0301 	add.w	r3, r3, #1
 8014162:	f000 8501 	beq.w	8014b68 <MEMS_runMagCal+0x1d90>
 8014166:	1b9b      	subs	r3, r3, r6
 8014168:	fb93 f2f0 	sdiv	r2, r3, r0
 801416c:	fb00 3312 	mls	r3, r0, r2, r3
 8014170:	2b00      	cmp	r3, #0
 8014172:	bfb8      	it	lt
 8014174:	181b      	addlt	r3, r3, r0
 8014176:	b21a      	sxth	r2, r3
 8014178:	2e00      	cmp	r6, #0
 801417a:	f000 854c 	beq.w	8014c16 <MEMS_runMagCal+0x1e3e>
 801417e:	1e77      	subs	r7, r6, #1
 8014180:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013e34 <MEMS_runMagCal+0x105c>
 8014184:	b2fd      	uxtb	r5, r7
 8014186:	3501      	adds	r5, #1
 8014188:	eeb0 5a65 	vmov.f32	s10, s11
 801418c:	eef0 4a65 	vmov.f32	s9, s11
 8014190:	4415      	add	r5, r2
 8014192:	4611      	mov	r1, r2
 8014194:	fb91 f3f0 	sdiv	r3, r1, r0
 8014198:	fb00 1313 	mls	r3, r0, r3, r1
 801419c:	b2db      	uxtb	r3, r3
 801419e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80141a2:	3101      	adds	r1, #1
 80141a4:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 80141a8:	ee06 ca90 	vmov	s13, ip
 80141ac:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 80141b0:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80141b4:	ee07 ca10 	vmov	s14, ip
 80141b8:	ee07 3a90 	vmov	s15, r3
 80141bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80141c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80141c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141c8:	42a9      	cmp	r1, r5
 80141ca:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80141ce:	ee35 5a07 	vadd.f32	s10, s10, s14
 80141d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80141d6:	d1dd      	bne.n	8014194 <MEMS_runMagCal+0x13bc>
 80141d8:	ee07 6a90 	vmov	s15, r6
 80141dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80141e4:	eec7 9a27 	vdiv.f32	s19, s14, s15
 80141e8:	b2f9      	uxtb	r1, r7
 80141ea:	3101      	adds	r1, #1
 80141ec:	4411      	add	r1, r2
 80141ee:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 801459c <MEMS_runMagCal+0x17c4>
 80141f2:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 80141f6:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80141fa:	ee29 aa85 	vmul.f32	s20, s19, s10
 80141fe:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8014202:	eef0 4a46 	vmov.f32	s9, s12
 8014206:	eeb0 4a46 	vmov.f32	s8, s12
 801420a:	eef0 3a46 	vmov.f32	s7, s12
 801420e:	eeb0 3a46 	vmov.f32	s6, s12
 8014212:	eef0 2a46 	vmov.f32	s5, s12
 8014216:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 801421a:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 801421e:	fb92 f3f0 	sdiv	r3, r2, r0
 8014222:	fb00 2313 	mls	r3, r0, r3, r2
 8014226:	b2db      	uxtb	r3, r3
 8014228:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801422c:	3201      	adds	r2, #1
 801422e:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8014232:	ee06 5a90 	vmov	s13, r5
 8014236:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801423a:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801423e:	ee07 5a10 	vmov	s14, r5
 8014242:	ee07 3a90 	vmov	s15, r3
 8014246:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801424a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801424e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014252:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8014256:	ee37 7a4a 	vsub.f32	s14, s14, s20
 801425a:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801425e:	4291      	cmp	r1, r2
 8014260:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8014264:	eea6 3a87 	vfma.f32	s6, s13, s14
 8014268:	eea7 4a07 	vfma.f32	s8, s14, s14
 801426c:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8014270:	eee7 4a27 	vfma.f32	s9, s14, s15
 8014274:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8014278:	d1d1      	bne.n	801421e <MEMS_runMagCal+0x1446>
 801427a:	edc4 2a00 	vstr	s5, [r4]
 801427e:	ed84 3a01 	vstr	s6, [r4, #4]
 8014282:	edc4 3a02 	vstr	s7, [r4, #8]
 8014286:	ed84 4a03 	vstr	s8, [r4, #12]
 801428a:	edc4 4a04 	vstr	s9, [r4, #16]
 801428e:	ed84 6a05 	vstr	s12, [r4, #20]
 8014292:	a91a      	add	r1, sp, #104	; 0x68
 8014294:	4620      	mov	r0, r4
 8014296:	f7fe fce5 	bl	8012c64 <MEMS_EIG3>
 801429a:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 801429e:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 80142a2:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 80142a6:	eef0 5ae4 	vabs.f32	s11, s9
 80142aa:	eef0 6ac6 	vabs.f32	s13, s12
 80142ae:	eef4 6ae5 	vcmpe.f32	s13, s11
 80142b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b6:	bf8c      	ite	hi
 80142b8:	eef0 7a65 	vmovhi.f32	s15, s11
 80142bc:	eef0 7a66 	vmovls.f32	s15, s13
 80142c0:	eeb0 7ac5 	vabs.f32	s14, s10
 80142c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142cc:	eef4 6ae5 	vcmpe.f32	s13, s11
 80142d0:	bf88      	it	hi
 80142d2:	eef0 7a47 	vmovhi.f32	s15, s14
 80142d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142da:	bfb8      	it	lt
 80142dc:	eef0 6a65 	vmovlt.f32	s13, s11
 80142e0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80142e4:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80142e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ec:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80142f0:	bfb8      	it	lt
 80142f2:	eeb0 7a66 	vmovlt.f32	s14, s13
 80142f6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80142fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fe:	f300 8420 	bgt.w	8014b42 <MEMS_runMagCal+0x1d6a>
 8014302:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8014306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801430a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801430e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014316:	dd02      	ble.n	801431e <MEMS_runMagCal+0x1546>
 8014318:	2b22      	cmp	r3, #34	; 0x22
 801431a:	f240 8412 	bls.w	8014b42 <MEMS_runMagCal+0x1d6a>
 801431e:	ee76 7a24 	vadd.f32	s15, s12, s9
 8014322:	ee07 3a10 	vmov	s14, r3
 8014326:	ee77 7a85 	vadd.f32	s15, s15, s10
 801432a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801432e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014570 <MEMS_runMagCal+0x1798>
 8014332:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8014336:	eef1 7ac6 	vsqrt.f32	s15, s12
 801433a:	ee68 7a27 	vmul.f32	s15, s16, s15
 801433e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014346:	f300 83fc 	bgt.w	8014b42 <MEMS_runMagCal+0x1d6a>
 801434a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801434e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014356:	f100 83f4 	bmi.w	8014b42 <MEMS_runMagCal+0x1d6a>
 801435a:	eddf 7a86 	vldr	s15, [pc, #536]	; 8014574 <MEMS_runMagCal+0x179c>
 801435e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8014362:	2300      	movs	r3, #0
 8014364:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8014368:	932c      	str	r3, [sp, #176]	; 0xb0
 801436a:	eddd 7a02 	vldr	s15, [sp, #8]
 801436e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437a:	d408      	bmi.n	801438e <MEMS_runMagCal+0x15b6>
 801437c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014380:	ee17 3a10 	vmov	r3, s14
 8014384:	b21b      	sxth	r3, r3
 8014386:	ee07 3a90 	vmov	s15, r3
 801438a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801438e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8014594 <MEMS_runMagCal+0x17bc>
 8014392:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8014396:	eef4 7ac7 	vcmpe.f32	s15, s14
 801439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801439e:	dc08      	bgt.n	80143b2 <MEMS_runMagCal+0x15da>
 80143a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80143a4:	ee17 3a10 	vmov	r3, s14
 80143a8:	b21b      	sxth	r3, r3
 80143aa:	ee07 3a90 	vmov	s15, r3
 80143ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80143b2:	ee27 7a88 	vmul.f32	s14, s15, s16
 80143b6:	eddf 7a70 	vldr	s15, [pc, #448]	; 8014578 <MEMS_runMagCal+0x17a0>
 80143ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143c2:	f340 8424 	ble.w	8014c0e <MEMS_runMagCal+0x1e36>
 80143c6:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801457c <MEMS_runMagCal+0x17a4>
 80143ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d2:	f140 841c 	bpl.w	8014c0e <MEMS_runMagCal+0x1e36>
 80143d6:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8014580 <MEMS_runMagCal+0x17a8>
 80143da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143de:	eee7 7a26 	vfma.f32	s15, s14, s13
 80143e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80143e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143ea:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8014594 <MEMS_runMagCal+0x17bc>
 80143ee:	eddf ba6b 	vldr	s23, [pc, #428]	; 801459c <MEMS_runMagCal+0x17c4>
 80143f2:	ed9f ba64 	vldr	s22, [pc, #400]	; 8014584 <MEMS_runMagCal+0x17ac>
 80143f6:	eddf aa64 	vldr	s21, [pc, #400]	; 8014588 <MEMS_runMagCal+0x17b0>
 80143fa:	9d03      	ldr	r5, [sp, #12]
 80143fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014400:	ee68 4a09 	vmul.f32	s9, s16, s18
 8014404:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8014408:	ee68 9a29 	vmul.f32	s19, s16, s19
 801440c:	edc4 4a00 	vstr	s9, [r4]
 8014410:	ed84 aa01 	vstr	s20, [r4, #4]
 8014414:	edc4 9a02 	vstr	s19, [r4, #8]
 8014418:	edc4 7a03 	vstr	s15, [r4, #12]
 801441c:	edc4 7a06 	vstr	s15, [r4, #24]
 8014420:	ab11      	add	r3, sp, #68	; 0x44
 8014422:	ee1c 0a10 	vmov	r0, s24
 8014426:	aa2d      	add	r2, sp, #180	; 0xb4
 8014428:	eeb0 0a48 	vmov.f32	s0, s16
 801442c:	4621      	mov	r1, r4
 801442e:	f7fe fa01 	bl	8012834 <MEMS_SolveLinearEq>
 8014432:	1c6b      	adds	r3, r5, #1
 8014434:	2800      	cmp	r0, #0
 8014436:	f43e aed1 	beq.w	80131dc <MEMS_runMagCal+0x404>
 801443a:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 801443e:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8014442:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8014446:	edd4 4a00 	vldr	s9, [r4]
 801444a:	ed94 5a01 	vldr	s10, [r4, #4]
 801444e:	edd4 5a02 	vldr	s11, [r4, #8]
 8014452:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8014456:	ed94 6a03 	vldr	s12, [r4, #12]
 801445a:	eef0 6ae3 	vabs.f32	s13, s7
 801445e:	eef0 7ac3 	vabs.f32	s15, s6
 8014462:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446a:	bfb8      	it	lt
 801446c:	eef0 7a66 	vmovlt.f32	s15, s13
 8014470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014478:	bfb8      	it	lt
 801447a:	eef0 7a6b 	vmovlt.f32	s15, s23
 801447e:	eef0 6ac4 	vabs.f32	s13, s8
 8014482:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801448a:	bfb8      	it	lt
 801448c:	eef0 6a67 	vmovlt.f32	s13, s15
 8014490:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014494:	ee35 5a23 	vadd.f32	s10, s10, s7
 8014498:	ee75 5a84 	vadd.f32	s11, s11, s8
 801449c:	ee36 6a07 	vadd.f32	s12, s12, s14
 80144a0:	eef4 6acb 	vcmpe.f32	s13, s22
 80144a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144a8:	edc4 4a00 	vstr	s9, [r4]
 80144ac:	ed84 5a01 	vstr	s10, [r4, #4]
 80144b0:	edc4 5a02 	vstr	s11, [r4, #8]
 80144b4:	ed84 6a03 	vstr	s12, [r4, #12]
 80144b8:	eef0 7ac7 	vabs.f32	s15, s14
 80144bc:	d507      	bpl.n	80144ce <MEMS_runMagCal+0x16f6>
 80144be:	eef4 7aea 	vcmpe.f32	s15, s21
 80144c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c6:	d502      	bpl.n	80144ce <MEMS_runMagCal+0x16f6>
 80144c8:	2d01      	cmp	r5, #1
 80144ca:	f63e ae8b 	bhi.w	80131e4 <MEMS_runMagCal+0x40c>
 80144ce:	b2dd      	uxtb	r5, r3
 80144d0:	2d05      	cmp	r5, #5
 80144d2:	d1a5      	bne.n	8014420 <MEMS_runMagCal+0x1648>
 80144d4:	f7fe be86 	b.w	80131e4 <MEMS_runMagCal+0x40c>
 80144d8:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 80144dc:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 80144e0:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 80144e4:	ed9f 4a29 	vldr	s8, [pc, #164]	; 801458c <MEMS_runMagCal+0x17b4>
 80144e8:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80144ec:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 80144f0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80144f4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80144f8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80144fc:	eef4 7ae4 	vcmpe.f32	s15, s9
 8014500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014504:	bf88      	it	hi
 8014506:	eef0 7a64 	vmovhi.f32	s15, s9
 801450a:	eef4 7ac5 	vcmpe.f32	s15, s10
 801450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014512:	bfb8      	it	lt
 8014514:	eef0 7a45 	vmovlt.f32	s15, s10
 8014518:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801451c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014524:	dc0e      	bgt.n	8014544 <MEMS_runMagCal+0x176c>
 8014526:	ee26 6a27 	vmul.f32	s12, s12, s15
 801452a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801452e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014532:	dc07      	bgt.n	8014544 <MEMS_runMagCal+0x176c>
 8014534:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8014538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014540:	f77f ad73 	ble.w	801402a <MEMS_runMagCal+0x1252>
 8014544:	2300      	movs	r3, #0
 8014546:	f88b 3000 	strb.w	r3, [fp]
 801454a:	f7ff b880 	b.w	801364e <MEMS_runMagCal+0x876>
 801454e:	2300      	movs	r3, #0
 8014550:	9307      	str	r3, [sp, #28]
 8014552:	2301      	movs	r3, #1
 8014554:	9303      	str	r3, [sp, #12]
 8014556:	f7ff bb61 	b.w	8013c1c <MEMS_runMagCal+0xe44>
 801455a:	3301      	adds	r3, #1
 801455c:	fb93 f2f7 	sdiv	r2, r3, r7
 8014560:	fb07 3212 	mls	r2, r7, r2, r3
 8014564:	930b      	str	r3, [sp, #44]	; 0x2c
 8014566:	b212      	sxth	r2, r2
 8014568:	46bc      	mov	ip, r7
 801456a:	f7ff bb75 	b.w	8013c58 <MEMS_runMagCal+0xe80>
 801456e:	bf00      	nop
 8014570:	42960000 	.word	0x42960000
 8014574:	430d0000 	.word	0x430d0000
 8014578:	41966667 	.word	0x41966667
 801457c:	433c0000 	.word	0x433c0000
 8014580:	3c2e4c41 	.word	0x3c2e4c41
 8014584:	3e99999a 	.word	0x3e99999a
 8014588:	3f666666 	.word	0x3f666666
 801458c:	3eaaaaab 	.word	0x3eaaaaab
 8014590:	358637bd 	.word	0x358637bd
 8014594:	423c0000 	.word	0x423c0000
 8014598:	3a83126f 	.word	0x3a83126f
 801459c:	00000000 	.word	0x00000000
 80145a0:	eddd 7a08 	vldr	s15, [sp, #32]
 80145a4:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8014598 <MEMS_runMagCal+0x17c0>
 80145a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145ac:	ee07 3a10 	vmov	s14, r3
 80145b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80145b4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80145b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80145bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80145c0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80145c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145c8:	f63f aa67 	bhi.w	8013a9a <MEMS_runMagCal+0xcc2>
 80145cc:	9b07      	ldr	r3, [sp, #28]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	f43f a83d 	beq.w	801364e <MEMS_runMagCal+0x876>
 80145d4:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 80145d8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80145dc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80145e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145e4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80145e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ec:	bf4c      	ite	mi
 80145ee:	2301      	movmi	r3, #1
 80145f0:	2300      	movpl	r3, #0
 80145f2:	9307      	str	r3, [sp, #28]
 80145f4:	f7ff ba55 	b.w	8013aa2 <MEMS_runMagCal+0xcca>
 80145f8:	fb92 f1f0 	sdiv	r1, r2, r0
 80145fc:	fb00 2211 	mls	r2, r0, r1, r2
 8014600:	b211      	sxth	r1, r2
 8014602:	4605      	mov	r5, r0
 8014604:	f7ff b8da 	b.w	80137bc <MEMS_runMagCal+0x9e4>
 8014608:	2200      	movs	r2, #0
 801460a:	23ff      	movs	r3, #255	; 0xff
 801460c:	ee1c 0a10 	vmov	r0, s24
 8014610:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8014614:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8014618:	eeb0 0a49 	vmov.f32	s0, s18
 801461c:	4649      	mov	r1, r9
 801461e:	f7f7 fd11 	bl	800c044 <MEMS_updateMagBufferIndex>
 8014622:	f7ff b90b 	b.w	801383c <MEMS_runMagCal+0xa64>
 8014626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801462a:	fb03 f60c 	mul.w	r6, r3, ip
 801462e:	fb03 f202 	mul.w	r2, r3, r2
 8014632:	fb03 f301 	mul.w	r3, r3, r1
 8014636:	ee06 6a90 	vmov	s13, r6
 801463a:	ee07 2a10 	vmov	s14, r2
 801463e:	ee07 3a90 	vmov	s15, r3
 8014642:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8014590 <MEMS_runMagCal+0x17b8>
 8014646:	9e05      	ldr	r6, [sp, #20]
 8014648:	9400      	str	r4, [sp, #0]
 801464a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801464e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014656:	ee66 6a86 	vmul.f32	s13, s13, s12
 801465a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801465e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014662:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8014666:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801466a:	e9c5 0003 	strd	r0, r0, [r5, #12]
 801466e:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8014672:	6028      	str	r0, [r5, #0]
 8014674:	ed96 0a01 	vldr	s0, [r6, #4]
 8014678:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801467c:	4642      	mov	r2, r8
 801467e:	ab0d      	add	r3, sp, #52	; 0x34
 8014680:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8014684:	ad0e      	add	r5, sp, #56	; 0x38
 8014686:	ee1c 0a10 	vmov	r0, s24
 801468a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801468e:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8014692:	f7f7 fd79 	bl	800c188 <getMagStats.constprop.0>
 8014696:	9500      	str	r5, [sp, #0]
 8014698:	ed96 0a01 	vldr	s0, [r6, #4]
 801469c:	ee1c 0a10 	vmov	r0, s24
 80146a0:	aa2d      	add	r2, sp, #180	; 0xb4
 80146a2:	ab0d      	add	r3, sp, #52	; 0x34
 80146a4:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 80146a8:	f7f7 fd6e 	bl	800c188 <getMagStats.constprop.0>
 80146ac:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8014594 <MEMS_runMagCal+0x17bc>
 80146b0:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80146b4:	ed95 7a00 	vldr	s14, [r5]
 80146b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80146bc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80146c0:	eef0 7ae7 	vabs.f32	s15, s15
 80146c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80146c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146cc:	d505      	bpl.n	80146da <MEMS_runMagCal+0x1902>
 80146ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d6:	f100 81fa 	bmi.w	8014ace <MEMS_runMagCal+0x1cf6>
 80146da:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80146de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80146e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e6:	f140 81a8 	bpl.w	8014a3a <MEMS_runMagCal+0x1c62>
 80146ea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80146ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f2:	9b03      	ldr	r3, [sp, #12]
 80146f4:	bfb8      	it	lt
 80146f6:	2302      	movlt	r3, #2
 80146f8:	edd4 6a00 	vldr	s13, [r4]
 80146fc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801470c:	f57e af9f 	bpl.w	801364e <MEMS_runMagCal+0x876>
 8014710:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8014714:	429a      	cmp	r2, r3
 8014716:	f63e af9a 	bhi.w	801364e <MEMS_runMagCal+0x876>
 801471a:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014722:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801472a:	d40e      	bmi.n	801474a <MEMS_runMagCal+0x1972>
 801472c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8014730:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014738:	f140 80d4 	bpl.w	80148e4 <MEMS_runMagCal+0x1b0c>
 801473c:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8014740:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8014744:	429a      	cmp	r2, r3
 8014746:	f080 80cd 	bcs.w	80148e4 <MEMS_runMagCal+0x1b0c>
 801474a:	9b05      	ldr	r3, [sp, #20]
 801474c:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8014750:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8014754:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8014758:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 801475c:	edd3 5a01 	vldr	s11, [r3, #4]
 8014760:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8014764:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8014768:	1b8b      	subs	r3, r1, r6
 801476a:	eba0 0c07 	sub.w	ip, r0, r7
 801476e:	2b00      	cmp	r3, #0
 8014770:	bfb8      	it	lt
 8014772:	425b      	neglt	r3, r3
 8014774:	f1bc 0f00 	cmp.w	ip, #0
 8014778:	bfb8      	it	lt
 801477a:	f1cc 0c00 	rsblt	ip, ip, #0
 801477e:	4563      	cmp	r3, ip
 8014780:	bfb8      	it	lt
 8014782:	4663      	movlt	r3, ip
 8014784:	eba2 0c04 	sub.w	ip, r2, r4
 8014788:	f1bc 0f00 	cmp.w	ip, #0
 801478c:	b21b      	sxth	r3, r3
 801478e:	bfb8      	it	lt
 8014790:	f1cc 0c00 	rsblt	ip, ip, #0
 8014794:	4563      	cmp	r3, ip
 8014796:	bfb8      	it	lt
 8014798:	4663      	movlt	r3, ip
 801479a:	b21b      	sxth	r3, r3
 801479c:	ee07 3a90 	vmov	s15, r3
 80147a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147a4:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80147a8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80147ac:	eef4 7ac6 	vcmpe.f32	s15, s12
 80147b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147b4:	f140 8096 	bpl.w	80148e4 <MEMS_runMagCal+0x1b0c>
 80147b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80147bc:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 80147c0:	ee86 2a87 	vdiv.f32	s4, s13, s14
 80147c4:	ee04 3a90 	vmov	s9, r3
 80147c8:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 80147cc:	ee05 3a10 	vmov	s10, r3
 80147d0:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 80147d4:	ee07 0a90 	vmov	s15, r0
 80147d8:	ee05 3a90 	vmov	s11, r3
 80147dc:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80147e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80147e4:	ee36 4a42 	vsub.f32	s8, s12, s4
 80147e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80147ec:	ee06 3a10 	vmov	s12, r3
 80147f0:	ee03 7a90 	vmov	s7, r7
 80147f4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80147f8:	ee07 1a90 	vmov	s15, r1
 80147fc:	ee00 3a90 	vmov	s1, r3
 8014800:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014804:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8014808:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801480c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8014810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014814:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014818:	ee03 6a90 	vmov	s7, r6
 801481c:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014820:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014824:	ee07 2a90 	vmov	s15, r2
 8014828:	ee01 3a10 	vmov	s2, r3
 801482c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014830:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8014834:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8014838:	eee2 4a20 	vfma.f32	s9, s4, s1
 801483c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8014840:	ee01 3a90 	vmov	s3, r3
 8014844:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014848:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 801484c:	eea2 7a03 	vfma.f32	s14, s4, s6
 8014850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014854:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014858:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801485c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014860:	ee03 4a90 	vmov	s7, r4
 8014864:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014868:	ee67 7a84 	vmul.f32	s15, s15, s8
 801486c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014870:	ee26 6a04 	vmul.f32	s12, s12, s8
 8014874:	ee16 2a90 	vmov	r2, s13
 8014878:	ee04 3a10 	vmov	s8, r3
 801487c:	eea2 5a01 	vfma.f32	s10, s4, s2
 8014880:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8014884:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8014888:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 801488c:	eee2 7a23 	vfma.f32	s15, s4, s7
 8014890:	ee14 2a90 	vmov	r2, s9
 8014894:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014898:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801489c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80148a0:	eee2 5a21 	vfma.f32	s11, s4, s3
 80148a4:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 80148a8:	eea2 6a04 	vfma.f32	s12, s4, s8
 80148ac:	ee17 2a10 	vmov	r2, s14
 80148b0:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 80148b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148b8:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 80148bc:	ee15 2a10 	vmov	r2, s10
 80148c0:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80148c4:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80148c8:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80148cc:	ee17 2a90 	vmov	r2, s15
 80148d0:	ee16 3a10 	vmov	r3, s12
 80148d4:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 80148d8:	ee15 2a90 	vmov	r2, s11
 80148dc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80148e0:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 80148e4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80148e6:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80148ea:	f7fe bda2 	b.w	8013432 <MEMS_runMagCal+0x65a>
 80148ee:	ee1c 0a10 	vmov	r0, s24
 80148f2:	eeb0 0a49 	vmov.f32	s0, s18
 80148f6:	4649      	mov	r1, r9
 80148f8:	f7f7 fba4 	bl	800c044 <MEMS_updateMagBufferIndex>
 80148fc:	f7ff b89f 	b.w	8013a3e <MEMS_runMagCal+0xc66>
 8014900:	eddd 7a08 	vldr	s15, [sp, #32]
 8014904:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8014598 <MEMS_runMagCal+0x17c0>
 8014908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801490c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014910:	e660      	b.n	80145d4 <MEMS_runMagCal+0x17fc>
 8014912:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 801459c <MEMS_runMagCal+0x17c4>
 8014916:	1c6b      	adds	r3, r5, #1
 8014918:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801491c:	ad0e      	add	r5, sp, #56	; 0x38
 801491e:	fb93 f1f6 	sdiv	r1, r3, r6
 8014922:	fa1f fc86 	uxth.w	ip, r6
 8014926:	fb06 3311 	mls	r3, r6, r1, r3
 801492a:	edc5 6a00 	vstr	s13, [r5]
 801492e:	2e00      	cmp	r6, #0
 8014930:	f000 80e1 	beq.w	8014af6 <MEMS_runMagCal+0x1d1e>
 8014934:	b29b      	uxth	r3, r3
 8014936:	f10c 3cff 	add.w	ip, ip, #4294967295
 801493a:	1c58      	adds	r0, r3, #1
 801493c:	eeb0 6a66 	vmov.f32	s12, s13
 8014940:	fa10 fc8c 	uxtah	ip, r0, ip
 8014944:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8014948:	4619      	mov	r1, r3
 801494a:	e000      	b.n	801494e <MEMS_runMagCal+0x1b76>
 801494c:	3001      	adds	r0, #1
 801494e:	fbb1 f3f6 	udiv	r3, r1, r6
 8014952:	fb06 1313 	mls	r3, r6, r3, r1
 8014956:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801495a:	8a99      	ldrh	r1, [r3, #20]
 801495c:	4571      	cmp	r1, lr
 801495e:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 8014962:	f1a3 031c 	sub.w	r3, r3, #28
 8014966:	bf98      	it	ls
 8014968:	ebae 0301 	subls.w	r3, lr, r1
 801496c:	b29b      	uxth	r3, r3
 801496e:	fb03 f303 	mul.w	r3, r3, r3
 8014972:	ee07 1a10 	vmov	s14, r1
 8014976:	ee07 3a90 	vmov	s15, r3
 801497a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801497e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014982:	4584      	cmp	ip, r0
 8014984:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014988:	ee36 6a07 	vadd.f32	s12, s12, s14
 801498c:	4601      	mov	r1, r0
 801498e:	d1dd      	bne.n	801494c <MEMS_runMagCal+0x1b74>
 8014990:	ee07 4a90 	vmov	s15, r4
 8014994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014998:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8014d34 <MEMS_runMagCal+0x1f5c>
 801499c:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014d38 <MEMS_runMagCal+0x1f60>
 80149a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80149a4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80149a8:	eef1 7ac7 	vsqrt.f32	s15, s14
 80149ac:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80149b0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80149b4:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80149b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149bc:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80149c0:	edc5 7a00 	vstr	s15, [r5]
 80149c4:	dd47      	ble.n	8014a56 <MEMS_runMagCal+0x1c7e>
 80149c6:	eddf 7add 	vldr	s15, [pc, #884]	; 8014d3c <MEMS_runMagCal+0x1f64>
 80149ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149ce:	2302      	movs	r3, #2
 80149d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d4:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80149d8:	f77e aead 	ble.w	8013736 <MEMS_runMagCal+0x95e>
 80149dc:	2301      	movs	r3, #1
 80149de:	f88b 3001 	strb.w	r3, [fp, #1]
 80149e2:	f7fe bea8 	b.w	8013736 <MEMS_runMagCal+0x95e>
 80149e6:	ee1c 0a10 	vmov	r0, s24
 80149ea:	eeb0 0a49 	vmov.f32	s0, s18
 80149ee:	4649      	mov	r1, r9
 80149f0:	f7f7 fb28 	bl	800c044 <MEMS_updateMagBufferIndex>
 80149f4:	f7fe bf0d 	b.w	8013812 <MEMS_runMagCal+0xa3a>
 80149f8:	9b02      	ldr	r3, [sp, #8]
 80149fa:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80149fe:	f8db 100c 	ldr.w	r1, [fp, #12]
 8014a02:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 8014a06:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8014a0a:	4413      	add	r3, r2
 8014a0c:	4299      	cmp	r1, r3
 8014a0e:	f4bf ad99 	bcs.w	8014544 <MEMS_runMagCal+0x176c>
 8014a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a18:	fb03 f301 	mul.w	r3, r3, r1
 8014a1c:	3364      	adds	r3, #100	; 0x64
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	bf38      	it	cc
 8014a22:	4613      	movcc	r3, r2
 8014a24:	2200      	movs	r2, #0
 8014a26:	f8cb 300c 	str.w	r3, [fp, #12]
 8014a2a:	f88b 2000 	strb.w	r2, [fp]
 8014a2e:	f7fe be0e 	b.w	801364e <MEMS_runMagCal+0x876>
 8014a32:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014a36:	f7ff ba6f 	b.w	8013f18 <MEMS_runMagCal+0x1140>
 8014a3a:	9b03      	ldr	r3, [sp, #12]
 8014a3c:	e65c      	b.n	80146f8 <MEMS_runMagCal+0x1920>
 8014a3e:	4619      	mov	r1, r3
 8014a40:	9b02      	ldr	r3, [sp, #8]
 8014a42:	3301      	adds	r3, #1
 8014a44:	fb93 f2f1 	sdiv	r2, r3, r1
 8014a48:	fb01 3212 	mls	r2, r1, r2, r3
 8014a4c:	9304      	str	r3, [sp, #16]
 8014a4e:	b212      	sxth	r2, r2
 8014a50:	4689      	mov	r9, r1
 8014a52:	f7ff ba11 	b.w	8013e78 <MEMS_runMagCal+0x10a0>
 8014a56:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014d40 <MEMS_runMagCal+0x1f68>
 8014a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a62:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014d3c <MEMS_runMagCal+0x1f64>
 8014a66:	d434      	bmi.n	8014ad2 <MEMS_runMagCal+0x1cfa>
 8014a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a70:	bfc4      	itt	gt
 8014a72:	2301      	movgt	r3, #1
 8014a74:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014a78:	f7ff b892 	b.w	8013ba0 <MEMS_runMagCal+0xdc8>
 8014a7c:	9b05      	ldr	r3, [sp, #20]
 8014a7e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8014a82:	ed93 0a01 	vldr	s0, [r3, #4]
 8014a86:	f7fe bd84 	b.w	8013592 <MEMS_runMagCal+0x7ba>
 8014a8a:	2303      	movs	r3, #3
 8014a8c:	9303      	str	r3, [sp, #12]
 8014a8e:	f7fe bdd4 	b.w	801363a <MEMS_runMagCal+0x862>
 8014a92:	4619      	mov	r1, r3
 8014a94:	f7ff ba78 	b.w	8013f88 <MEMS_runMagCal+0x11b0>
 8014a98:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014a9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014aa0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	f73f ad4c 	bgt.w	8014544 <MEMS_runMagCal+0x176c>
 8014aac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014ab0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab8:	f73f ad44 	bgt.w	8014544 <MEMS_runMagCal+0x176c>
 8014abc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014ac0:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ac8:	f77f aaaf 	ble.w	801402a <MEMS_runMagCal+0x1252>
 8014acc:	e53a      	b.n	8014544 <MEMS_runMagCal+0x176c>
 8014ace:	2303      	movs	r3, #3
 8014ad0:	e612      	b.n	80146f8 <MEMS_runMagCal+0x1920>
 8014ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014adc:	f88b 3001 	strb.w	r3, [fp, #1]
 8014ae0:	f04f 0103 	mov.w	r1, #3
 8014ae4:	bfc8      	it	gt
 8014ae6:	2301      	movgt	r3, #1
 8014ae8:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014aec:	bfc8      	it	gt
 8014aee:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014af2:	f7ff b858 	b.w	8013ba6 <MEMS_runMagCal+0xdce>
 8014af6:	2303      	movs	r3, #3
 8014af8:	f88b c001 	strb.w	ip, [fp, #1]
 8014afc:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014b00:	f7ff b851 	b.w	8013ba6 <MEMS_runMagCal+0xdce>
 8014b04:	9b04      	ldr	r3, [sp, #16]
 8014b06:	fb93 f7f9 	sdiv	r7, r3, r9
 8014b0a:	fb09 3717 	mls	r7, r9, r7, r3
 8014b0e:	b23f      	sxth	r7, r7
 8014b10:	f7ff ba9a 	b.w	8014048 <MEMS_runMagCal+0x1270>
 8014b14:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014d44 <MEMS_runMagCal+0x1f6c>
 8014b18:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014b1c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014b20:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b28:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014b2c:	ee17 2a90 	vmov	r2, s15
 8014b30:	b291      	uxth	r1, r2
 8014b32:	b113      	cbz	r3, 8014b3a <MEMS_runMagCal+0x1d62>
 8014b34:	3b01      	subs	r3, #1
 8014b36:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8014b3a:	ee1c 0a10 	vmov	r0, s24
 8014b3e:	f7f7 fa81 	bl	800c044 <MEMS_updateMagBufferIndex>
 8014b42:	eddd 7a08 	vldr	s15, [sp, #32]
 8014b46:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014b4a:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014d48 <MEMS_runMagCal+0x1f70>
 8014b4e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014b52:	f001 f8b5 	bl	8015cc0 <roundf>
 8014b56:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014b60:	f88b 3000 	strb.w	r3, [fp]
 8014b64:	f7fe bd73 	b.w	801364e <MEMS_runMagCal+0x876>
 8014b68:	fb93 f2f6 	sdiv	r2, r3, r6
 8014b6c:	fb06 3312 	mls	r3, r6, r2, r3
 8014b70:	b21a      	sxth	r2, r3
 8014b72:	4630      	mov	r0, r6
 8014b74:	f7ff bb00 	b.w	8014178 <MEMS_runMagCal+0x13a0>
 8014b78:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014b7c:	f001 f8a0 	bl	8015cc0 <roundf>
 8014b80:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b84:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014b88:	ee17 3a90 	vmov	r3, s15
 8014b8c:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014b90:	f8a9 3000 	strh.w	r3, [r9]
 8014b94:	f001 f894 	bl	8015cc0 <roundf>
 8014b98:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b9c:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014ba0:	ee17 3a90 	vmov	r3, s15
 8014ba4:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014ba8:	f001 f88a 	bl	8015cc0 <roundf>
 8014bac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014bb0:	ac0f      	add	r4, sp, #60	; 0x3c
 8014bb2:	ee17 5a90 	vmov	r5, s15
 8014bb6:	9400      	str	r4, [sp, #0]
 8014bb8:	ee1c 0a10 	vmov	r0, s24
 8014bbc:	4649      	mov	r1, r9
 8014bbe:	ab10      	add	r3, sp, #64	; 0x40
 8014bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8014bc4:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014bc8:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014bcc:	f7f7 fadc 	bl	800c188 <getMagStats.constprop.0>
 8014bd0:	ed94 7a00 	vldr	s14, [r4]
 8014bd4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014d4c <MEMS_runMagCal+0x1f74>
 8014bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be0:	d50e      	bpl.n	8014c00 <MEMS_runMagCal+0x1e28>
 8014be2:	b968      	cbnz	r0, 8014c00 <MEMS_runMagCal+0x1e28>
 8014be4:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014be8:	b32b      	cbz	r3, 8014c36 <MEMS_runMagCal+0x1e5e>
 8014bea:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014bee:	ee07 3a90 	vmov	s15, r3
 8014bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bf6:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfe:	dc1a      	bgt.n	8014c36 <MEMS_runMagCal+0x1e5e>
 8014c00:	2300      	movs	r3, #0
 8014c02:	f8c9 3000 	str.w	r3, [r9]
 8014c06:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014c0a:	f7ff ba97 	b.w	801413c <MEMS_runMagCal+0x1364>
 8014c0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c12:	f7ff bbea 	b.w	80143ea <MEMS_runMagCal+0x1612>
 8014c16:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014d50 <MEMS_runMagCal+0x1f78>
 8014c1a:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014c1e:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8014c22:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8014c26:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014c2a:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014c2e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014c32:	f7ff bb2e 	b.w	8014292 <MEMS_runMagCal+0x14ba>
 8014c36:	eddd 7a08 	vldr	s15, [sp, #32]
 8014c3a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014c3e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014d48 <MEMS_runMagCal+0x1f70>
 8014c42:	2303      	movs	r3, #3
 8014c44:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c48:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014c4c:	e781      	b.n	8014b52 <MEMS_runMagCal+0x1d7a>
 8014c4e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014d54 <MEMS_runMagCal+0x1f7c>
 8014c52:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5a:	f77e ab1b 	ble.w	8013294 <MEMS_runMagCal+0x4bc>
 8014c5e:	f7fe bb21 	b.w	80132a4 <MEMS_runMagCal+0x4cc>
 8014c62:	2224      	movs	r2, #36	; 0x24
 8014c64:	2100      	movs	r1, #0
 8014c66:	a82d      	add	r0, sp, #180	; 0xb4
 8014c68:	f002 fe54 	bl	8017914 <memset>
 8014c6c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014d58 <MEMS_runMagCal+0x1f80>
 8014c70:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014c74:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014c78:	4627      	mov	r7, r4
 8014c7a:	ae2d      	add	r6, sp, #180	; 0xb4
 8014c7c:	2500      	movs	r5, #0
 8014c7e:	3501      	adds	r5, #1
 8014c80:	ecb7 0a01 	vldmia	r7!, {s0}
 8014c84:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014c88:	f001 f81a 	bl	8015cc0 <roundf>
 8014c8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c90:	4633      	mov	r3, r6
 8014c92:	edc3 9a00 	vstr	s19, [r3]
 8014c96:	ee10 3a10 	vmov	r3, s0
 8014c9a:	2d03      	cmp	r5, #3
 8014c9c:	f829 3b02 	strh.w	r3, [r9], #2
 8014ca0:	f106 0610 	add.w	r6, r6, #16
 8014ca4:	d1eb      	bne.n	8014c7e <MEMS_runMagCal+0x1ea6>
 8014ca6:	ad12      	add	r5, sp, #72	; 0x48
 8014ca8:	9500      	str	r5, [sp, #0]
 8014caa:	ab2b      	add	r3, sp, #172	; 0xac
 8014cac:	eeb0 0a48 	vmov.f32	s0, s16
 8014cb0:	ee1c 0a10 	vmov	r0, s24
 8014cb4:	a915      	add	r1, sp, #84	; 0x54
 8014cb6:	aa2d      	add	r2, sp, #180	; 0xb4
 8014cb8:	f7f7 fa66 	bl	800c188 <getMagStats.constprop.0>
 8014cbc:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014d58 <MEMS_runMagCal+0x1f80>
 8014cc0:	ed94 4a03 	vldr	s8, [r4, #12]
 8014cc4:	edd5 7a00 	vldr	s15, [r5]
 8014cc8:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014ccc:	edd4 6a06 	vldr	s13, [r4, #24]
 8014cd0:	edd4 4a00 	vldr	s9, [r4]
 8014cd4:	ed94 5a01 	vldr	s10, [r4, #4]
 8014cd8:	edd4 5a02 	vldr	s11, [r4, #8]
 8014cdc:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014ce0:	ad2e      	add	r5, sp, #184	; 0xb8
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	e9c5 3300 	strd	r3, r3, [r5]
 8014ce8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014cec:	60ab      	str	r3, [r5, #8]
 8014cee:	61ab      	str	r3, [r5, #24]
 8014cf0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014cf4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cfc:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014d00:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8014d04:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014d08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014d0c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014d10:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014d14:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014d18:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014d1c:	d405      	bmi.n	8014d2a <MEMS_runMagCal+0x1f52>
 8014d1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d26:	f57e aa9b 	bpl.w	8013260 <MEMS_runMagCal+0x488>
 8014d2a:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014d5c <MEMS_runMagCal+0x1f84>
 8014d2e:	f7fe ba9d 	b.w	801326c <MEMS_runMagCal+0x494>
 8014d32:	bf00      	nop
 8014d34:	3c23d70a 	.word	0x3c23d70a
 8014d38:	4b095440 	.word	0x4b095440
 8014d3c:	481c4000 	.word	0x481c4000
 8014d40:	471c4000 	.word	0x471c4000
 8014d44:	433d0000 	.word	0x433d0000
 8014d48:	3a83126f 	.word	0x3a83126f
 8014d4c:	3ff4cccd 	.word	0x3ff4cccd
 8014d50:	7f800000 	.word	0x7f800000
 8014d54:	3ee66666 	.word	0x3ee66666
 8014d58:	423c0000 	.word	0x423c0000
 8014d5c:	00000000 	.word	0x00000000
 8014d60:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014d64:	4293      	cmp	r3, r2
 8014d66:	f67e acac 	bls.w	80136c2 <MEMS_runMagCal+0x8ea>
 8014d6a:	f7fe bca0 	b.w	80136ae <MEMS_runMagCal+0x8d6>
 8014d6e:	bf00      	nop

08014d70 <MotionFX_GetStateSize>:
 8014d70:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop

08014d78 <MotionFX_initialize>:
 8014d78:	4a3b      	ldr	r2, [pc, #236]	; (8014e68 <MotionFX_initialize+0xf0>)
 8014d7a:	493c      	ldr	r1, [pc, #240]	; (8014e6c <MotionFX_initialize+0xf4>)
 8014d7c:	6813      	ldr	r3, [r2, #0]
 8014d7e:	f023 0301 	bic.w	r3, r3, #1
 8014d82:	b530      	push	{r4, r5, lr}
 8014d84:	6013      	str	r3, [r2, #0]
 8014d86:	680b      	ldr	r3, [r1, #0]
 8014d88:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014d8c:	4013      	ands	r3, r2
 8014d8e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014d92:	42ab      	cmp	r3, r5
 8014d94:	b085      	sub	sp, #20
 8014d96:	4604      	mov	r4, r0
 8014d98:	d013      	beq.n	8014dc2 <MotionFX_initialize+0x4a>
 8014d9a:	680b      	ldr	r3, [r1, #0]
 8014d9c:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014da0:	4013      	ands	r3, r2
 8014da2:	428b      	cmp	r3, r1
 8014da4:	d00d      	beq.n	8014dc2 <MotionFX_initialize+0x4a>
 8014da6:	4b32      	ldr	r3, [pc, #200]	; (8014e70 <MotionFX_initialize+0xf8>)
 8014da8:	2201      	movs	r2, #1
 8014daa:	601a      	str	r2, [r3, #0]
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	2a00      	cmp	r2, #0
 8014db0:	d1fc      	bne.n	8014dac <MotionFX_initialize+0x34>
 8014db2:	4b30      	ldr	r3, [pc, #192]	; (8014e74 <MotionFX_initialize+0xfc>)
 8014db4:	4a30      	ldr	r2, [pc, #192]	; (8014e78 <MotionFX_initialize+0x100>)
 8014db6:	601a      	str	r2, [r3, #0]
 8014db8:	681a      	ldr	r2, [r3, #0]
 8014dba:	4b30      	ldr	r3, [pc, #192]	; (8014e7c <MotionFX_initialize+0x104>)
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d01f      	beq.n	8014e00 <MotionFX_initialize+0x88>
 8014dc0:	e7fe      	b.n	8014dc0 <MotionFX_initialize+0x48>
 8014dc2:	4b2f      	ldr	r3, [pc, #188]	; (8014e80 <MotionFX_initialize+0x108>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d1ed      	bne.n	8014da6 <MotionFX_initialize+0x2e>
 8014dca:	4a2e      	ldr	r2, [pc, #184]	; (8014e84 <MotionFX_initialize+0x10c>)
 8014dcc:	6813      	ldr	r3, [r2, #0]
 8014dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014dd2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014dd6:	d006      	beq.n	8014de6 <MotionFX_initialize+0x6e>
 8014dd8:	6813      	ldr	r3, [r2, #0]
 8014dda:	f240 4283 	movw	r2, #1155	; 0x483
 8014dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d1df      	bne.n	8014da6 <MotionFX_initialize+0x2e>
 8014de6:	4b28      	ldr	r3, [pc, #160]	; (8014e88 <MotionFX_initialize+0x110>)
 8014de8:	2201      	movs	r2, #1
 8014dea:	601a      	str	r2, [r3, #0]
 8014dec:	681a      	ldr	r2, [r3, #0]
 8014dee:	2a00      	cmp	r2, #0
 8014df0:	d1fc      	bne.n	8014dec <MotionFX_initialize+0x74>
 8014df2:	4b26      	ldr	r3, [pc, #152]	; (8014e8c <MotionFX_initialize+0x114>)
 8014df4:	4a20      	ldr	r2, [pc, #128]	; (8014e78 <MotionFX_initialize+0x100>)
 8014df6:	601a      	str	r2, [r3, #0]
 8014df8:	681a      	ldr	r2, [r3, #0]
 8014dfa:	4b20      	ldr	r3, [pc, #128]	; (8014e7c <MotionFX_initialize+0x104>)
 8014dfc:	429a      	cmp	r2, r3
 8014dfe:	d1df      	bne.n	8014dc0 <MotionFX_initialize+0x48>
 8014e00:	4b23      	ldr	r3, [pc, #140]	; (8014e90 <MotionFX_initialize+0x118>)
 8014e02:	4a24      	ldr	r2, [pc, #144]	; (8014e94 <MotionFX_initialize+0x11c>)
 8014e04:	9301      	str	r3, [sp, #4]
 8014e06:	2501      	movs	r5, #1
 8014e08:	4620      	mov	r0, r4
 8014e0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014e0e:	7115      	strb	r5, [r2, #4]
 8014e10:	f7f7 faa0 	bl	800c354 <MFX_emptyAttitude>
 8014e14:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014e18:	a901      	add	r1, sp, #4
 8014e1a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014e1e:	f7f6 fdc3 	bl	800b9a8 <updateOrientation>
 8014e22:	a903      	add	r1, sp, #12
 8014e24:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014e28:	f7f6 fdbe 	bl	800b9a8 <updateOrientation>
 8014e2c:	a902      	add	r1, sp, #8
 8014e2e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014e32:	f7f6 fdb9 	bl	800b9a8 <updateOrientation>
 8014e36:	4818      	ldr	r0, [pc, #96]	; (8014e98 <MotionFX_initialize+0x120>)
 8014e38:	4918      	ldr	r1, [pc, #96]	; (8014e9c <MotionFX_initialize+0x124>)
 8014e3a:	4a19      	ldr	r2, [pc, #100]	; (8014ea0 <MotionFX_initialize+0x128>)
 8014e3c:	4b19      	ldr	r3, [pc, #100]	; (8014ea4 <MotionFX_initialize+0x12c>)
 8014e3e:	7365      	strb	r5, [r4, #13]
 8014e40:	4d19      	ldr	r5, [pc, #100]	; (8014ea8 <MotionFX_initialize+0x130>)
 8014e42:	62a0      	str	r0, [r4, #40]	; 0x28
 8014e44:	6361      	str	r1, [r4, #52]	; 0x34
 8014e46:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014e4a:	2100      	movs	r1, #0
 8014e4c:	61a2      	str	r2, [r4, #24]
 8014e4e:	61e3      	str	r3, [r4, #28]
 8014e50:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014e54:	f240 1301 	movw	r3, #257	; 0x101
 8014e58:	6225      	str	r5, [r4, #32]
 8014e5a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014e5c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014e60:	80a2      	strh	r2, [r4, #4]
 8014e62:	81e3      	strh	r3, [r4, #14]
 8014e64:	b005      	add	sp, #20
 8014e66:	bd30      	pop	{r4, r5, pc}
 8014e68:	e0002000 	.word	0xe0002000
 8014e6c:	e000ed00 	.word	0xe000ed00
 8014e70:	40023008 	.word	0x40023008
 8014e74:	40023000 	.word	0x40023000
 8014e78:	f407a5c2 	.word	0xf407a5c2
 8014e7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8014e80:	e0042000 	.word	0xe0042000
 8014e84:	5c001000 	.word	0x5c001000
 8014e88:	58024c08 	.word	0x58024c08
 8014e8c:	58024c00 	.word	0x58024c00
 8014e90:	00756e65 	.word	0x00756e65
 8014e94:	200002e0 	.word	0x200002e0
 8014e98:	3f666666 	.word	0x3f666666
 8014e9c:	3f2ac083 	.word	0x3f2ac083
 8014ea0:	3a51b717 	.word	0x3a51b717
 8014ea4:	3a378034 	.word	0x3a378034
 8014ea8:	3b378034 	.word	0x3b378034

08014eac <MotionFX_setKnobs>:
 8014eac:	4b23      	ldr	r3, [pc, #140]	; (8014f3c <MotionFX_setKnobs+0x90>)
 8014eae:	791b      	ldrb	r3, [r3, #4]
 8014eb0:	b903      	cbnz	r3, 8014eb4 <MotionFX_setKnobs+0x8>
 8014eb2:	4770      	bx	lr
 8014eb4:	2900      	cmp	r1, #0
 8014eb6:	d0fc      	beq.n	8014eb2 <MotionFX_setKnobs+0x6>
 8014eb8:	b570      	push	{r4, r5, r6, lr}
 8014eba:	4604      	mov	r4, r0
 8014ebc:	684a      	ldr	r2, [r1, #4]
 8014ebe:	6808      	ldr	r0, [r1, #0]
 8014ec0:	688b      	ldr	r3, [r1, #8]
 8014ec2:	6363      	str	r3, [r4, #52]	; 0x34
 8014ec4:	62a0      	str	r0, [r4, #40]	; 0x28
 8014ec6:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014ec8:	7b0b      	ldrb	r3, [r1, #12]
 8014eca:	7163      	strb	r3, [r4, #5]
 8014ecc:	6908      	ldr	r0, [r1, #16]
 8014ece:	694a      	ldr	r2, [r1, #20]
 8014ed0:	698b      	ldr	r3, [r1, #24]
 8014ed2:	6223      	str	r3, [r4, #32]
 8014ed4:	61e2      	str	r2, [r4, #28]
 8014ed6:	61a0      	str	r0, [r4, #24]
 8014ed8:	7f0b      	ldrb	r3, [r1, #28]
 8014eda:	7123      	strb	r3, [r4, #4]
 8014edc:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014ee0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014ee4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014ee6:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014eea:	460a      	mov	r2, r1
 8014eec:	460b      	mov	r3, r1
 8014eee:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014ef2:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014ef6:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014efa:	7889      	ldrb	r1, [r1, #2]
 8014efc:	7892      	ldrb	r2, [r2, #2]
 8014efe:	789b      	ldrb	r3, [r3, #2]
 8014f00:	b084      	sub	sp, #16
 8014f02:	f88d 1006 	strb.w	r1, [sp, #6]
 8014f06:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014f0a:	a901      	add	r1, sp, #4
 8014f0c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014f10:	f88d 200a 	strb.w	r2, [sp, #10]
 8014f14:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014f18:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014f1c:	f88d 300e 	strb.w	r3, [sp, #14]
 8014f20:	f7f6 fd42 	bl	800b9a8 <updateOrientation>
 8014f24:	a903      	add	r1, sp, #12
 8014f26:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014f2a:	f7f6 fd3d 	bl	800b9a8 <updateOrientation>
 8014f2e:	a902      	add	r1, sp, #8
 8014f30:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014f34:	f7f6 fd38 	bl	800b9a8 <updateOrientation>
 8014f38:	b004      	add	sp, #16
 8014f3a:	bd70      	pop	{r4, r5, r6, pc}
 8014f3c:	200002e0 	.word	0x200002e0

08014f40 <MotionFX_getKnobs>:
 8014f40:	4b1c      	ldr	r3, [pc, #112]	; (8014fb4 <MotionFX_getKnobs+0x74>)
 8014f42:	791b      	ldrb	r3, [r3, #4]
 8014f44:	b903      	cbnz	r3, 8014f48 <MotionFX_getKnobs+0x8>
 8014f46:	4770      	bx	lr
 8014f48:	460a      	mov	r2, r1
 8014f4a:	2900      	cmp	r1, #0
 8014f4c:	d0fb      	beq.n	8014f46 <MotionFX_getKnobs+0x6>
 8014f4e:	b510      	push	{r4, lr}
 8014f50:	4604      	mov	r4, r0
 8014f52:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014f54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f58:	6093      	str	r3, [r2, #8]
 8014f5a:	6010      	str	r0, [r2, #0]
 8014f5c:	6051      	str	r1, [r2, #4]
 8014f5e:	7963      	ldrb	r3, [r4, #5]
 8014f60:	7313      	strb	r3, [r2, #12]
 8014f62:	69a0      	ldr	r0, [r4, #24]
 8014f64:	69e1      	ldr	r1, [r4, #28]
 8014f66:	6a23      	ldr	r3, [r4, #32]
 8014f68:	6193      	str	r3, [r2, #24]
 8014f6a:	6110      	str	r0, [r2, #16]
 8014f6c:	6151      	str	r1, [r2, #20]
 8014f6e:	7923      	ldrb	r3, [r4, #4]
 8014f70:	7713      	strb	r3, [r2, #28]
 8014f72:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f76:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014f7a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014f80:	f102 011d 	add.w	r1, r2, #29
 8014f84:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014f88:	f7f6 fb66 	bl	800b658 <findAxis>
 8014f8c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014f90:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014f94:	f7f6 fb60 	bl	800b658 <findAxis>
 8014f98:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014f9c:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014fa0:	f7f6 fb5a 	bl	800b658 <findAxis>
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	f882 3020 	strb.w	r3, [r2, #32]
 8014faa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014fae:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014fb2:	bd10      	pop	{r4, pc}
 8014fb4:	200002e0 	.word	0x200002e0

08014fb8 <MotionFX_enable_6X>:
 8014fb8:	4b0e      	ldr	r3, [pc, #56]	; (8014ff4 <MotionFX_enable_6X+0x3c>)
 8014fba:	791b      	ldrb	r3, [r3, #4]
 8014fbc:	b903      	cbnz	r3, 8014fc0 <MotionFX_enable_6X+0x8>
 8014fbe:	4770      	bx	lr
 8014fc0:	2900      	cmp	r1, #0
 8014fc2:	d0fc      	beq.n	8014fbe <MotionFX_enable_6X+0x6>
 8014fc4:	b530      	push	{r4, r5, lr}
 8014fc6:	1d05      	adds	r5, r0, #4
 8014fc8:	b099      	sub	sp, #100	; 0x64
 8014fca:	4604      	mov	r4, r0
 8014fcc:	4629      	mov	r1, r5
 8014fce:	225c      	movs	r2, #92	; 0x5c
 8014fd0:	a801      	add	r0, sp, #4
 8014fd2:	f002 fc77 	bl	80178c4 <memcpy>
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f7f7 f9bc 	bl	800c354 <MFX_emptyAttitude>
 8014fdc:	a901      	add	r1, sp, #4
 8014fde:	4628      	mov	r0, r5
 8014fe0:	225c      	movs	r2, #92	; 0x5c
 8014fe2:	f002 fc6f 	bl	80178c4 <memcpy>
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014fec:	7363      	strb	r3, [r4, #13]
 8014fee:	b019      	add	sp, #100	; 0x64
 8014ff0:	bd30      	pop	{r4, r5, pc}
 8014ff2:	bf00      	nop
 8014ff4:	200002e0 	.word	0x200002e0

08014ff8 <MotionFX_enable_9X>:
 8014ff8:	4b0e      	ldr	r3, [pc, #56]	; (8015034 <MotionFX_enable_9X+0x3c>)
 8014ffa:	791b      	ldrb	r3, [r3, #4]
 8014ffc:	b903      	cbnz	r3, 8015000 <MotionFX_enable_9X+0x8>
 8014ffe:	4770      	bx	lr
 8015000:	2900      	cmp	r1, #0
 8015002:	d0fc      	beq.n	8014ffe <MotionFX_enable_9X+0x6>
 8015004:	b530      	push	{r4, r5, lr}
 8015006:	1d05      	adds	r5, r0, #4
 8015008:	b099      	sub	sp, #100	; 0x64
 801500a:	4604      	mov	r4, r0
 801500c:	4629      	mov	r1, r5
 801500e:	225c      	movs	r2, #92	; 0x5c
 8015010:	a801      	add	r0, sp, #4
 8015012:	f002 fc57 	bl	80178c4 <memcpy>
 8015016:	4620      	mov	r0, r4
 8015018:	f7f7 f99c 	bl	800c354 <MFX_emptyAttitude>
 801501c:	a901      	add	r1, sp, #4
 801501e:	4628      	mov	r0, r5
 8015020:	225c      	movs	r2, #92	; 0x5c
 8015022:	f002 fc4f 	bl	80178c4 <memcpy>
 8015026:	2301      	movs	r3, #1
 8015028:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801502c:	7363      	strb	r3, [r4, #13]
 801502e:	b019      	add	sp, #100	; 0x64
 8015030:	bd30      	pop	{r4, r5, pc}
 8015032:	bf00      	nop
 8015034:	200002e0 	.word	0x200002e0

08015038 <MotionFX_update>:
 8015038:	b470      	push	{r4, r5, r6}
 801503a:	4c06      	ldr	r4, [pc, #24]	; (8015054 <MotionFX_update+0x1c>)
 801503c:	9e03      	ldr	r6, [sp, #12]
 801503e:	7925      	ldrb	r5, [r4, #4]
 8015040:	b90d      	cbnz	r5, 8015046 <MotionFX_update+0xe>
 8015042:	bc70      	pop	{r4, r5, r6}
 8015044:	4770      	bx	lr
 8015046:	461c      	mov	r4, r3
 8015048:	ed94 0a00 	vldr	s0, [r4]
 801504c:	4633      	mov	r3, r6
 801504e:	bc70      	pop	{r4, r5, r6}
 8015050:	f7fc bf02 	b.w	8011e58 <iNemoEngine_API_Update>
 8015054:	200002e0 	.word	0x200002e0

08015058 <MotionFX_propagate>:
 8015058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801505c:	ed2d 8b06 	vpush	{d8-d10}
 8015060:	4ca3      	ldr	r4, [pc, #652]	; (80152f0 <MotionFX_propagate+0x298>)
 8015062:	7927      	ldrb	r7, [r4, #4]
 8015064:	b0a0      	sub	sp, #128	; 0x80
 8015066:	b927      	cbnz	r7, 8015072 <MotionFX_propagate+0x1a>
 8015068:	b020      	add	sp, #128	; 0x80
 801506a:	ecbd 8b06 	vpop	{d8-d10}
 801506e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015072:	4616      	mov	r6, r2
 8015074:	4604      	mov	r4, r0
 8015076:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 801507a:	edd3 9a00 	vldr	s19, [r3]
 801507e:	460d      	mov	r5, r1
 8015080:	6851      	ldr	r1, [r2, #4]
 8015082:	6892      	ldr	r2, [r2, #8]
 8015084:	ab13      	add	r3, sp, #76	; 0x4c
 8015086:	c307      	stmia	r3!, {r0, r1, r2}
 8015088:	6830      	ldr	r0, [r6, #0]
 801508a:	6871      	ldr	r1, [r6, #4]
 801508c:	68b2      	ldr	r2, [r6, #8]
 801508e:	ab10      	add	r3, sp, #64	; 0x40
 8015090:	c307      	stmia	r3!, {r0, r1, r2}
 8015092:	4637      	mov	r7, r6
 8015094:	ab16      	add	r3, sp, #88	; 0x58
 8015096:	f857 0f18 	ldr.w	r0, [r7, #24]!
 801509a:	6879      	ldr	r1, [r7, #4]
 801509c:	68ba      	ldr	r2, [r7, #8]
 801509e:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 80150a2:	c307      	stmia	r3!, {r0, r1, r2}
 80150a4:	aa13      	add	r2, sp, #76	; 0x4c
 80150a6:	4651      	mov	r1, sl
 80150a8:	a803      	add	r0, sp, #12
 80150aa:	f7f6 fa73 	bl	800b594 <rotVect>
 80150ae:	aa16      	add	r2, sp, #88	; 0x58
 80150b0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80150b4:	a806      	add	r0, sp, #24
 80150b6:	f7f6 fa6d 	bl	800b594 <rotVect>
 80150ba:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 80150be:	2b09      	cmp	r3, #9
 80150c0:	d829      	bhi.n	8015116 <MotionFX_propagate+0xbe>
 80150c2:	eddd 8a04 	vldr	s17, [sp, #16]
 80150c6:	ed9d 9a03 	vldr	s18, [sp, #12]
 80150ca:	ed9d 8a05 	vldr	s16, [sp, #20]
 80150ce:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80150d2:	eee9 7a09 	vfma.f32	s15, s18, s18
 80150d6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80150da:	ee17 0a90 	vmov	r0, s15
 80150de:	f7eb fa33 	bl	8000548 <__aeabi_f2d>
 80150e2:	ec41 0b10 	vmov	d0, r0, r1
 80150e6:	f000 fe7d 	bl	8015de4 <sqrt>
 80150ea:	ec51 0b10 	vmov	r0, r1, d0
 80150ee:	f7eb fd5b 	bl	8000ba8 <__aeabi_d2f>
 80150f2:	ee07 0a90 	vmov	s15, r0
 80150f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80150fa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80150fe:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015102:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015106:	ee28 8a27 	vmul.f32	s16, s16, s15
 801510a:	ed8d 9a03 	vstr	s18, [sp, #12]
 801510e:	edcd 8a04 	vstr	s17, [sp, #16]
 8015112:	ed8d 8a05 	vstr	s16, [sp, #20]
 8015116:	7923      	ldrb	r3, [r4, #4]
 8015118:	2b00      	cmp	r3, #0
 801511a:	f000 80d3 	beq.w	80152c4 <MotionFX_propagate+0x26c>
 801511e:	ee07 3a90 	vmov	s15, r3
 8015122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801512a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801512e:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8015132:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8015136:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 801513a:	edd2 7a00 	vldr	s15, [r2]
 801513e:	eddd 8a06 	vldr	s17, [sp, #24]
 8015142:	ed9d 6a07 	vldr	s12, [sp, #28]
 8015146:	ed9d 8a08 	vldr	s16, [sp, #32]
 801514a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80152f4 <MotionFX_propagate+0x29c>
 801514e:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80152f8 <MotionFX_propagate+0x2a0>
 8015152:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8015156:	ee26 9a07 	vmul.f32	s18, s12, s14
 801515a:	edc2 7a00 	vstr	s15, [r2]
 801515e:	edd3 7a00 	vldr	s15, [r3]
 8015162:	ed8d 9a07 	vstr	s18, [sp, #28]
 8015166:	eee6 7a86 	vfma.f32	s15, s13, s12
 801516a:	f604 1264 	addw	r2, r4, #2404	; 0x964
 801516e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015172:	edc3 7a00 	vstr	s15, [r3]
 8015176:	edd2 7a00 	vldr	s15, [r2]
 801517a:	edcd 8a06 	vstr	s17, [sp, #24]
 801517e:	eee6 7a88 	vfma.f32	s15, s13, s16
 8015182:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8015186:	ee28 8a07 	vmul.f32	s16, s16, s14
 801518a:	edc2 7a00 	vstr	s15, [r2]
 801518e:	edd3 7a00 	vldr	s15, [r3]
 8015192:	ed8d 8a08 	vstr	s16, [sp, #32]
 8015196:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 801519a:	ed93 7a00 	vldr	s14, [r3]
 801519e:	ee39 9a67 	vsub.f32	s18, s18, s15
 80151a2:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80151a6:	ee69 7a09 	vmul.f32	s15, s18, s18
 80151aa:	f604 1348 	addw	r3, r4, #2376	; 0x948
 80151ae:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80151b2:	ed93 7a00 	vldr	s14, [r3]
 80151b6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80151ba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80151be:	eee8 7a08 	vfma.f32	s15, s16, s16
 80151c2:	ee29 0a80 	vmul.f32	s0, s19, s0
 80151c6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80151ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ce:	dd7e      	ble.n	80152ce <MotionFX_propagate+0x276>
 80151d0:	eeb1 aae7 	vsqrt.f32	s20, s15
 80151d4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 80151d8:	eeb0 0a69 	vmov.f32	s0, s19
 80151dc:	f000 fd96 	bl	8015d0c <sinf>
 80151e0:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 80151e4:	eeb0 0a69 	vmov.f32	s0, s19
 80151e8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80151ec:	ee29 9a27 	vmul.f32	s18, s18, s15
 80151f0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80151f4:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80151f8:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80151fc:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015200:	f000 fd1e 	bl	8015c40 <cosf>
 8015204:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8015208:	f604 1838 	addw	r8, r4, #2360	; 0x938
 801520c:	a809      	add	r0, sp, #36	; 0x24
 801520e:	4632      	mov	r2, r6
 8015210:	4631      	mov	r1, r6
 8015212:	f7f6 fc55 	bl	800bac0 <qmult>
 8015216:	edd8 7a00 	vldr	s15, [r8]
 801521a:	ed96 7a00 	vldr	s14, [r6]
 801521e:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8015222:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8015226:	edd9 6a00 	vldr	s13, [r9]
 801522a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801522e:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8015232:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015236:	3301      	adds	r3, #1
 8015238:	aa13      	add	r2, sp, #76	; 0x4c
 801523a:	edd7 6a00 	vldr	s13, [r7]
 801523e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8015242:	4651      	mov	r1, sl
 8015244:	a809      	add	r0, sp, #36	; 0x24
 8015246:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801524a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801524e:	eef1 6ae7 	vsqrt.f32	s13, s15
 8015252:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8015256:	ee27 7a27 	vmul.f32	s14, s14, s15
 801525a:	ed86 7a00 	vstr	s14, [r6]
 801525e:	ed99 7a00 	vldr	s14, [r9]
 8015262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015266:	ed89 7a00 	vstr	s14, [r9]
 801526a:	ed98 7a00 	vldr	s14, [r8]
 801526e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015272:	ed88 7a00 	vstr	s14, [r8]
 8015276:	ed97 7a00 	vldr	s14, [r7]
 801527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801527e:	edc7 7a00 	vstr	s15, [r7]
 8015282:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8015286:	f7f6 f985 	bl	800b594 <rotVect>
 801528a:	f8d9 0000 	ldr.w	r0, [r9]
 801528e:	f8d8 1000 	ldr.w	r1, [r8]
 8015292:	683a      	ldr	r2, [r7, #0]
 8015294:	6833      	ldr	r3, [r6, #0]
 8015296:	60eb      	str	r3, [r5, #12]
 8015298:	6128      	str	r0, [r5, #16]
 801529a:	6169      	str	r1, [r5, #20]
 801529c:	61aa      	str	r2, [r5, #24]
 801529e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80152a2:	9301      	str	r3, [sp, #4]
 80152a4:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80152a8:	9300      	str	r3, [sp, #0]
 80152aa:	a909      	add	r1, sp, #36	; 0x24
 80152ac:	f105 031c 	add.w	r3, r5, #28
 80152b0:	462a      	mov	r2, r5
 80152b2:	f105 000c 	add.w	r0, r5, #12
 80152b6:	f7f7 fc2b 	bl	800cb10 <output_update>
 80152ba:	b020      	add	sp, #128	; 0x80
 80152bc:	ecbd 8b06 	vpop	{d8-d10}
 80152c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152c4:	2301      	movs	r3, #1
 80152c6:	7123      	strb	r3, [r4, #4]
 80152c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80152cc:	e72f      	b.n	801512e <MotionFX_propagate+0xd6>
 80152ce:	ee68 8a80 	vmul.f32	s17, s17, s0
 80152d2:	ee29 9a00 	vmul.f32	s18, s18, s0
 80152d6:	ee28 8a00 	vmul.f32	s16, s16, s0
 80152da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80152de:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80152e2:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80152e6:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80152ea:	930c      	str	r3, [sp, #48]	; 0x30
 80152ec:	e78c      	b.n	8015208 <MotionFX_propagate+0x1b0>
 80152ee:	bf00      	nop
 80152f0:	200002e0 	.word	0x200002e0
 80152f4:	3c8efa35 	.word	0x3c8efa35
 80152f8:	38d1b718 	.word	0x38d1b718

080152fc <MotionFX_MagCal_init>:
 80152fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152fe:	4c44      	ldr	r4, [pc, #272]	; (8015410 <MotionFX_MagCal_init+0x114>)
 8015300:	7923      	ldrb	r3, [r4, #4]
 8015302:	b903      	cbnz	r3, 8015306 <MotionFX_MagCal_init+0xa>
 8015304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015306:	1e43      	subs	r3, r0, #1
 8015308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801530c:	4605      	mov	r5, r0
 801530e:	d2f9      	bcs.n	8015304 <MotionFX_MagCal_init+0x8>
 8015310:	2900      	cmp	r1, #0
 8015312:	d139      	bne.n	8015388 <MotionFX_MagCal_init+0x8c>
 8015314:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8015318:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801531c:	4a3d      	ldr	r2, [pc, #244]	; (8015414 <MotionFX_MagCal_init+0x118>)
 801531e:	1b5b      	subs	r3, r3, r5
 8015320:	ee07 3a90 	vmov	s15, r3
 8015324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015328:	23c8      	movs	r3, #200	; 0xc8
 801532a:	eef0 7ae7 	vabs.f32	s15, s15
 801532e:	fb93 f3f5 	sdiv	r3, r3, r5
 8015332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b0f      	cmp	r3, #15
 801533a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801533e:	bf28      	it	cs
 8015340:	230f      	movcs	r3, #15
 8015342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015346:	6015      	str	r5, [r2, #0]
 8015348:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801534c:	b22d      	sxth	r5, r5
 801534e:	dc0e      	bgt.n	801536e <MotionFX_MagCal_init+0x72>
 8015350:	edd4 7a03 	vldr	s15, [r4, #12]
 8015354:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015418 <MotionFX_MagCal_init+0x11c>
 8015358:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801541c <MotionFX_MagCal_init+0x120>
 801535c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015360:	eef0 7ae7 	vabs.f32	s15, s15
 8015364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801536c:	dd08      	ble.n	8015380 <MotionFX_MagCal_init+0x84>
 801536e:	2300      	movs	r3, #0
 8015370:	492b      	ldr	r1, [pc, #172]	; (8015420 <MotionFX_MagCal_init+0x124>)
 8015372:	8165      	strh	r5, [r4, #10]
 8015374:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8015378:	60e1      	str	r1, [r4, #12]
 801537a:	8223      	strh	r3, [r4, #16]
 801537c:	6163      	str	r3, [r4, #20]
 801537e:	8122      	strh	r2, [r4, #8]
 8015380:	2300      	movs	r3, #0
 8015382:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8015386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015388:	2600      	movs	r6, #0
 801538a:	4826      	ldr	r0, [pc, #152]	; (8015424 <MotionFX_MagCal_init+0x128>)
 801538c:	61a0      	str	r0, [r4, #24]
 801538e:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8015392:	4631      	mov	r1, r6
 8015394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015398:	6122      	str	r2, [r4, #16]
 801539a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801539e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80153a2:	6166      	str	r6, [r4, #20]
 80153a4:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 80153a8:	6566      	str	r6, [r4, #84]	; 0x54
 80153aa:	83a6      	strh	r6, [r4, #28]
 80153ac:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 80153b0:	f002 fab0 	bl	8017914 <memset>
 80153b4:	23ff      	movs	r3, #255	; 0xff
 80153b6:	225f      	movs	r2, #95	; 0x5f
 80153b8:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80153bc:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80153c0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80153c4:	2200      	movs	r2, #0
 80153c6:	2300      	movs	r3, #0
 80153c8:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80153cc:	f44f 7780 	mov.w	r7, #256	; 0x100
 80153d0:	4631      	mov	r1, r6
 80153d2:	62a6      	str	r6, [r4, #40]	; 0x28
 80153d4:	2230      	movs	r2, #48	; 0x30
 80153d6:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 80153da:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80153de:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80153e2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80153e4:	f002 fa96 	bl	8017914 <memset>
 80153e8:	f1a5 030a 	sub.w	r3, r5, #10
 80153ec:	b29b      	uxth	r3, r3
 80153ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80153f2:	2b32      	cmp	r3, #50	; 0x32
 80153f4:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 80153f8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 80153fc:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8015400:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8015404:	d888      	bhi.n	8015318 <MotionFX_MagCal_init+0x1c>
 8015406:	2301      	movs	r3, #1
 8015408:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 801540c:	e784      	b.n	8015318 <MotionFX_MagCal_init+0x1c>
 801540e:	bf00      	nop
 8015410:	200002e0 	.word	0x200002e0
 8015414:	20000000 	.word	0x20000000
 8015418:	3dcccccd 	.word	0x3dcccccd
 801541c:	3c23d70a 	.word	0x3c23d70a
 8015420:	3dcccccd 	.word	0x3dcccccd
 8015424:	200015d4 	.word	0x200015d4

08015428 <MotionFX_MagCal_run>:
 8015428:	4a3e      	ldr	r2, [pc, #248]	; (8015524 <MotionFX_MagCal_run+0xfc>)
 801542a:	7913      	ldrb	r3, [r2, #4]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d077      	beq.n	8015520 <MotionFX_MagCal_run+0xf8>
 8015430:	ed90 7a00 	vldr	s14, [r0]
 8015434:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8015528 <MotionFX_MagCal_run+0x100>
 8015438:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801543c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015440:	bfb4      	ite	lt
 8015442:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015446:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801544a:	eee7 7a26 	vfma.f32	s15, s14, s13
 801544e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015450:	ed90 7a01 	vldr	s14, [r0, #4]
 8015454:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015528 <MotionFX_MagCal_run+0x100>
 8015458:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 801545c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015460:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015468:	ee17 1a90 	vmov	r1, s15
 801546c:	bfb4      	ite	lt
 801546e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015472:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015476:	eee7 7a26 	vfma.f32	s15, s14, s13
 801547a:	ed90 7a02 	vldr	s14, [r0, #8]
 801547e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8015528 <MotionFX_MagCal_run+0x100>
 8015482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015486:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801548e:	ee17 4a90 	vmov	r4, s15
 8015492:	bfac      	ite	ge
 8015494:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015498:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801549c:	eee7 7a26 	vfma.f32	s15, s14, s13
 80154a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154a4:	ee17 7a90 	vmov	r7, s15
 80154a8:	b383      	cbz	r3, 801550c <MotionFX_MagCal_run+0xe4>
 80154aa:	4820      	ldr	r0, [pc, #128]	; (801552c <MotionFX_MagCal_run+0x104>)
 80154ac:	6805      	ldr	r5, [r0, #0]
 80154ae:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 80154b2:	fb15 f503 	smulbb	r5, r5, r3
 80154b6:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 80154ba:	00dd      	lsls	r5, r3, #3
 80154bc:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 80154c0:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8015530 <MotionFX_MagCal_run+0x108>
 80154c4:	42b1      	cmp	r1, r6
 80154c6:	bfa8      	it	ge
 80154c8:	4631      	movge	r1, r6
 80154ca:	42b7      	cmp	r7, r6
 80154cc:	bfa8      	it	ge
 80154ce:	4637      	movge	r7, r6
 80154d0:	4561      	cmp	r1, ip
 80154d2:	4608      	mov	r0, r1
 80154d4:	bfb8      	it	lt
 80154d6:	4660      	movlt	r0, ip
 80154d8:	4564      	cmp	r4, ip
 80154da:	db1f      	blt.n	801551c <MotionFX_MagCal_run+0xf4>
 80154dc:	42b4      	cmp	r4, r6
 80154de:	bfa8      	it	ge
 80154e0:	4634      	movge	r4, r6
 80154e2:	b224      	sxth	r4, r4
 80154e4:	4e12      	ldr	r6, [pc, #72]	; (8015530 <MotionFX_MagCal_run+0x108>)
 80154e6:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 80154ea:	3301      	adds	r3, #1
 80154ec:	4415      	add	r5, r2
 80154ee:	b2db      	uxtb	r3, r3
 80154f0:	42b7      	cmp	r7, r6
 80154f2:	bfb8      	it	lt
 80154f4:	4637      	movlt	r7, r6
 80154f6:	428b      	cmp	r3, r1
 80154f8:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 80154fc:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8015500:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 8015504:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8015508:	d014      	beq.n	8015534 <MotionFX_MagCal_run+0x10c>
 801550a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801550c:	68c0      	ldr	r0, [r0, #12]
 801550e:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 8015512:	2001      	movs	r0, #1
 8015514:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8015518:	461d      	mov	r5, r3
 801551a:	e7cf      	b.n	80154bc <MotionFX_MagCal_run+0x94>
 801551c:	4634      	mov	r4, r6
 801551e:	e7e1      	b.n	80154e4 <MotionFX_MagCal_run+0xbc>
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop
 8015524:	200002e0 	.word	0x200002e0
 8015528:	43fa0000 	.word	0x43fa0000
 801552c:	20000000 	.word	0x20000000
 8015530:	ffff8002 	.word	0xffff8002
 8015534:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8015538:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 801553c:	2000      	movs	r0, #0
 801553e:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8015542:	2b00      	cmp	r3, #0
 8015544:	f000 8159 	beq.w	80157fa <MotionFX_MagCal_run+0x3d2>
 8015548:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 801554c:	8a57      	ldrh	r7, [r2, #18]
 801554e:	8a13      	ldrh	r3, [r2, #16]
 8015550:	2900      	cmp	r1, #0
 8015552:	f000 8150 	beq.w	80157f6 <MotionFX_MagCal_run+0x3ce>
 8015556:	2f00      	cmp	r7, #0
 8015558:	f000 814d 	beq.w	80157f6 <MotionFX_MagCal_run+0x3ce>
 801555c:	42bb      	cmp	r3, r7
 801555e:	bf28      	it	cs
 8015560:	463b      	movcs	r3, r7
 8015562:	3301      	adds	r3, #1
 8015564:	b29b      	uxth	r3, r3
 8015566:	42bb      	cmp	r3, r7
 8015568:	bf28      	it	cs
 801556a:	463b      	movcs	r3, r7
 801556c:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015570:	191d      	adds	r5, r3, r4
 8015572:	f04f 0c01 	mov.w	ip, #1
 8015576:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 801557a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801557e:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8015582:	f8c5 e002 	str.w	lr, [r5, #2]
 8015586:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 801558a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801558e:	4561      	cmp	r1, ip
 8015590:	f000 812a 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 8015594:	4463      	add	r3, ip
 8015596:	b29b      	uxth	r3, r3
 8015598:	42bb      	cmp	r3, r7
 801559a:	bf28      	it	cs
 801559c:	463b      	movcs	r3, r7
 801559e:	eb03 0e04 	add.w	lr, r3, r4
 80155a2:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155a6:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80155aa:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 80155ae:	f8c5 e002 	str.w	lr, [r5, #2]
 80155b2:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 80155b6:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155ba:	2902      	cmp	r1, #2
 80155bc:	f000 8114 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 80155c0:	4463      	add	r3, ip
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	42bb      	cmp	r3, r7
 80155c6:	bf28      	it	cs
 80155c8:	463b      	movcs	r3, r7
 80155ca:	eb03 0e04 	add.w	lr, r3, r4
 80155ce:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155d2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80155d6:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 80155da:	f8c5 e002 	str.w	lr, [r5, #2]
 80155de:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 80155e2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155e6:	2903      	cmp	r1, #3
 80155e8:	f000 80fe 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 80155ec:	4463      	add	r3, ip
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	42bb      	cmp	r3, r7
 80155f2:	bf28      	it	cs
 80155f4:	463b      	movcs	r3, r7
 80155f6:	eb03 0e04 	add.w	lr, r3, r4
 80155fa:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155fe:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015602:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8015606:	f8c5 e002 	str.w	lr, [r5, #2]
 801560a:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 801560e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015612:	2904      	cmp	r1, #4
 8015614:	f000 80e8 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 8015618:	4463      	add	r3, ip
 801561a:	b29b      	uxth	r3, r3
 801561c:	42bb      	cmp	r3, r7
 801561e:	bf28      	it	cs
 8015620:	463b      	movcs	r3, r7
 8015622:	eb03 0e04 	add.w	lr, r3, r4
 8015626:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801562a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801562e:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8015632:	f8c5 e002 	str.w	lr, [r5, #2]
 8015636:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 801563a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801563e:	2905      	cmp	r1, #5
 8015640:	f000 80d2 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 8015644:	4463      	add	r3, ip
 8015646:	b29b      	uxth	r3, r3
 8015648:	42bb      	cmp	r3, r7
 801564a:	bf28      	it	cs
 801564c:	463b      	movcs	r3, r7
 801564e:	441c      	add	r4, r3
 8015650:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8015654:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8015658:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 801565c:	f8c5 4002 	str.w	r4, [r5, #2]
 8015660:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8015664:	80ec      	strh	r4, [r5, #6]
 8015666:	2906      	cmp	r1, #6
 8015668:	f000 80be 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 801566c:	4463      	add	r3, ip
 801566e:	b29b      	uxth	r3, r3
 8015670:	42bb      	cmp	r3, r7
 8015672:	bf28      	it	cs
 8015674:	463b      	movcs	r3, r7
 8015676:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801567a:	eb03 0c04 	add.w	ip, r3, r4
 801567e:	2501      	movs	r5, #1
 8015680:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8015684:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8015688:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 801568c:	f8cc e002 	str.w	lr, [ip, #2]
 8015690:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8015694:	f8ac e006 	strh.w	lr, [ip, #6]
 8015698:	2907      	cmp	r1, #7
 801569a:	f000 80a5 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 801569e:	442b      	add	r3, r5
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	42bb      	cmp	r3, r7
 80156a4:	bf28      	it	cs
 80156a6:	463b      	movcs	r3, r7
 80156a8:	eb03 0e04 	add.w	lr, r3, r4
 80156ac:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80156b0:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80156b4:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 80156b8:	f8cc e002 	str.w	lr, [ip, #2]
 80156bc:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 80156c0:	f8ac e006 	strh.w	lr, [ip, #6]
 80156c4:	2908      	cmp	r1, #8
 80156c6:	f000 808f 	beq.w	80157e8 <MotionFX_MagCal_run+0x3c0>
 80156ca:	442b      	add	r3, r5
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	42bb      	cmp	r3, r7
 80156d0:	bf28      	it	cs
 80156d2:	463b      	movcs	r3, r7
 80156d4:	eb03 0e04 	add.w	lr, r3, r4
 80156d8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80156dc:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80156e0:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 80156e4:	f8cc e002 	str.w	lr, [ip, #2]
 80156e8:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 80156ec:	f8ac e006 	strh.w	lr, [ip, #6]
 80156f0:	2909      	cmp	r1, #9
 80156f2:	d079      	beq.n	80157e8 <MotionFX_MagCal_run+0x3c0>
 80156f4:	442b      	add	r3, r5
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	42bb      	cmp	r3, r7
 80156fa:	bf28      	it	cs
 80156fc:	463b      	movcs	r3, r7
 80156fe:	eb03 0e04 	add.w	lr, r3, r4
 8015702:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015706:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801570a:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 801570e:	f8cc e002 	str.w	lr, [ip, #2]
 8015712:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8015716:	f8ac e006 	strh.w	lr, [ip, #6]
 801571a:	290a      	cmp	r1, #10
 801571c:	d064      	beq.n	80157e8 <MotionFX_MagCal_run+0x3c0>
 801571e:	442b      	add	r3, r5
 8015720:	b29b      	uxth	r3, r3
 8015722:	42bb      	cmp	r3, r7
 8015724:	bf28      	it	cs
 8015726:	463b      	movcs	r3, r7
 8015728:	eb03 0e04 	add.w	lr, r3, r4
 801572c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015730:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015734:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8015738:	f8cc e002 	str.w	lr, [ip, #2]
 801573c:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8015740:	f8ac e006 	strh.w	lr, [ip, #6]
 8015744:	290b      	cmp	r1, #11
 8015746:	d04f      	beq.n	80157e8 <MotionFX_MagCal_run+0x3c0>
 8015748:	442b      	add	r3, r5
 801574a:	b29b      	uxth	r3, r3
 801574c:	42bb      	cmp	r3, r7
 801574e:	bf28      	it	cs
 8015750:	463b      	movcs	r3, r7
 8015752:	eb03 0e04 	add.w	lr, r3, r4
 8015756:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801575a:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801575e:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8015762:	f8cc e002 	str.w	lr, [ip, #2]
 8015766:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801576a:	f8ac e006 	strh.w	lr, [ip, #6]
 801576e:	290c      	cmp	r1, #12
 8015770:	d03a      	beq.n	80157e8 <MotionFX_MagCal_run+0x3c0>
 8015772:	442b      	add	r3, r5
 8015774:	b29b      	uxth	r3, r3
 8015776:	42bb      	cmp	r3, r7
 8015778:	bf28      	it	cs
 801577a:	463b      	movcs	r3, r7
 801577c:	eb03 0e04 	add.w	lr, r3, r4
 8015780:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015784:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015788:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 801578c:	f8cc e002 	str.w	lr, [ip, #2]
 8015790:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8015794:	f8ac e006 	strh.w	lr, [ip, #6]
 8015798:	290d      	cmp	r1, #13
 801579a:	d025      	beq.n	80157e8 <MotionFX_MagCal_run+0x3c0>
 801579c:	442b      	add	r3, r5
 801579e:	b29b      	uxth	r3, r3
 80157a0:	42bb      	cmp	r3, r7
 80157a2:	bf28      	it	cs
 80157a4:	463b      	movcs	r3, r7
 80157a6:	eb03 0e04 	add.w	lr, r3, r4
 80157aa:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80157ae:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80157b2:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 80157b6:	f8cc e002 	str.w	lr, [ip, #2]
 80157ba:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 80157be:	f8ac e006 	strh.w	lr, [ip, #6]
 80157c2:	290e      	cmp	r1, #14
 80157c4:	d010      	beq.n	80157e8 <MotionFX_MagCal_run+0x3c0>
 80157c6:	442b      	add	r3, r5
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	42bb      	cmp	r3, r7
 80157cc:	bf28      	it	cs
 80157ce:	463b      	movcs	r3, r7
 80157d0:	441c      	add	r4, r3
 80157d2:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 80157d6:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 80157da:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 80157de:	f8c7 0002 	str.w	r0, [r7, #2]
 80157e2:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 80157e6:	80f8      	strh	r0, [r7, #6]
 80157e8:	3901      	subs	r1, #1
 80157ea:	b2c9      	uxtb	r1, r1
 80157ec:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80157f0:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 80157f4:	4434      	add	r4, r6
 80157f6:	8213      	strh	r3, [r2, #16]
 80157f8:	6154      	str	r4, [r2, #20]
 80157fa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80157fe:	2b00      	cmp	r3, #0
 8015800:	f43f ae83 	beq.w	801550a <MotionFX_MagCal_run+0xe2>
 8015804:	8a11      	ldrh	r1, [r2, #16]
 8015806:	8a53      	ldrh	r3, [r2, #18]
 8015808:	428b      	cmp	r3, r1
 801580a:	d022      	beq.n	8015852 <MotionFX_MagCal_run+0x42a>
 801580c:	b341      	cbz	r1, 8015860 <MotionFX_MagCal_run+0x438>
 801580e:	6953      	ldr	r3, [r2, #20]
 8015810:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8015814:	3301      	adds	r3, #1
 8015816:	4403      	add	r3, r0
 8015818:	1c58      	adds	r0, r3, #1
 801581a:	d021      	beq.n	8015860 <MotionFX_MagCal_run+0x438>
 801581c:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015820:	3410      	adds	r4, #16
 8015822:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8015824:	42a0      	cmp	r0, r4
 8015826:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 801582a:	bf84      	itt	hi
 801582c:	6553      	strhi	r3, [r2, #84]	; 0x54
 801582e:	4618      	movhi	r0, r3
 8015830:	4420      	add	r0, r4
 8015832:	4283      	cmp	r3, r0
 8015834:	f4ff ae69 	bcc.w	801550a <MotionFX_MagCal_run+0xe2>
 8015838:	b131      	cbz	r1, 8015848 <MotionFX_MagCal_run+0x420>
 801583a:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801583e:	6952      	ldr	r2, [r2, #20]
 8015840:	3901      	subs	r1, #1
 8015842:	fb00 2111 	mls	r1, r0, r1, r2
 8015846:	b289      	uxth	r1, r1
 8015848:	1a5b      	subs	r3, r3, r1
 801584a:	b21b      	sxth	r3, r3
 801584c:	42a3      	cmp	r3, r4
 801584e:	f6ff ae5c 	blt.w	801550a <MotionFX_MagCal_run+0xe2>
 8015852:	4905      	ldr	r1, [pc, #20]	; (8015868 <MotionFX_MagCal_run+0x440>)
 8015854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015858:	f101 0014 	add.w	r0, r1, #20
 801585c:	f7fd babc 	b.w	8012dd8 <MEMS_runMagCal>
 8015860:	f242 7410 	movw	r4, #10000	; 0x2710
 8015864:	2300      	movs	r3, #0
 8015866:	e7dc      	b.n	8015822 <MotionFX_MagCal_run+0x3fa>
 8015868:	200002e8 	.word	0x200002e8

0801586c <MotionFX_MagCal_getParams>:
 801586c:	b4f0      	push	{r4, r5, r6, r7}
 801586e:	4f1b      	ldr	r7, [pc, #108]	; (80158dc <MotionFX_MagCal_getParams+0x70>)
 8015870:	793b      	ldrb	r3, [r7, #4]
 8015872:	b08e      	sub	sp, #56	; 0x38
 8015874:	b373      	cbz	r3, 80158d4 <MotionFX_MagCal_getParams+0x68>
 8015876:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801587a:	4606      	mov	r6, r0
 801587c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801587e:	ac01      	add	r4, sp, #4
 8015880:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015888:	ed9d 7a03 	vldr	s14, [sp, #12]
 801588c:	eddd 6a02 	vldr	s13, [sp, #8]
 8015890:	eddd 7a04 	vldr	s15, [sp, #16]
 8015894:	ed9f 6a12 	vldr	s12, [pc, #72]	; 80158e0 <MotionFX_MagCal_getParams+0x74>
 8015898:	682d      	ldr	r5, [r5, #0]
 801589a:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 801589e:	7337      	strb	r7, [r6, #12]
 80158a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80158a4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80158a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80158ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80158ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80158b2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80158b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80158be:	ee66 6a86 	vmul.f32	s13, s13, s12
 80158c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80158c6:	6025      	str	r5, [r4, #0]
 80158c8:	edc6 6a00 	vstr	s13, [r6]
 80158cc:	ed86 7a01 	vstr	s14, [r6, #4]
 80158d0:	edc6 7a02 	vstr	s15, [r6, #8]
 80158d4:	b00e      	add	sp, #56	; 0x38
 80158d6:	bcf0      	pop	{r4, r5, r6, r7}
 80158d8:	4770      	bx	lr
 80158da:	bf00      	nop
 80158dc:	200002e0 	.word	0x200002e0
 80158e0:	3b03126f 	.word	0x3b03126f

080158e4 <_Znwj>:
 80158e4:	2801      	cmp	r0, #1
 80158e6:	bf38      	it	cc
 80158e8:	2001      	movcc	r0, #1
 80158ea:	b510      	push	{r4, lr}
 80158ec:	4604      	mov	r4, r0
 80158ee:	4620      	mov	r0, r4
 80158f0:	f001 ffd8 	bl	80178a4 <malloc>
 80158f4:	b930      	cbnz	r0, 8015904 <_Znwj+0x20>
 80158f6:	f000 f88b 	bl	8015a10 <_ZSt15get_new_handlerv>
 80158fa:	b908      	cbnz	r0, 8015900 <_Znwj+0x1c>
 80158fc:	f001 ffa0 	bl	8017840 <abort>
 8015900:	4780      	blx	r0
 8015902:	e7f4      	b.n	80158ee <_Znwj+0xa>
 8015904:	bd10      	pop	{r4, pc}

08015906 <_ZNSaIcEC1Ev>:
 8015906:	4770      	bx	lr

08015908 <_ZNSaIcED1Ev>:
 8015908:	4770      	bx	lr

0801590a <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 801590a:	b10a      	cbz	r2, 8015910 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 801590c:	f001 bfda 	b.w	80178c4 <memcpy>
 8015910:	4770      	bx	lr
	...

08015914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8015914:	b508      	push	{r3, lr}
 8015916:	680b      	ldr	r3, [r1, #0]
 8015918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801591c:	d302      	bcc.n	8015924 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801591e:	480d      	ldr	r0, [pc, #52]	; (8015954 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8015920:	f000 f884 	bl	8015a2c <_ZSt20__throw_length_errorPKc>
 8015924:	4293      	cmp	r3, r2
 8015926:	d90b      	bls.n	8015940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015928:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801592c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8015930:	d206      	bcs.n	8015940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8015932:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8015936:	bf2a      	itet	cs
 8015938:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 801593c:	6008      	strcc	r0, [r1, #0]
 801593e:	600b      	strcs	r3, [r1, #0]
 8015940:	6808      	ldr	r0, [r1, #0]
 8015942:	3001      	adds	r0, #1
 8015944:	d501      	bpl.n	801594a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8015946:	f000 f86b 	bl	8015a20 <_ZSt17__throw_bad_allocv>
 801594a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801594e:	f7ff bfc9 	b.w	80158e4 <_Znwj>
 8015952:	bf00      	nop
 8015954:	0801a99c 	.word	0x0801a99c

08015958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8015958:	f850 3b08 	ldr.w	r3, [r0], #8
 801595c:	4283      	cmp	r3, r0
 801595e:	d002      	beq.n	8015966 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8015960:	4618      	mov	r0, r3
 8015962:	f000 b853 	b.w	8015a0c <_ZdlPv>
 8015966:	4770      	bx	lr

08015968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8015968:	2a01      	cmp	r2, #1
 801596a:	b510      	push	{r4, lr}
 801596c:	d102      	bne.n	8015974 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 801596e:	780a      	ldrb	r2, [r1, #0]
 8015970:	7002      	strb	r2, [r0, #0]
 8015972:	bd10      	pop	{r4, pc}
 8015974:	f7ff ffc9 	bl	801590a <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015978:	e7fb      	b.n	8015972 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0801597a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 801597a:	b508      	push	{r3, lr}
 801597c:	1a52      	subs	r2, r2, r1
 801597e:	f7ff fff3 	bl	8015968 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8015982:	bd08      	pop	{r3, pc}

08015984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8015984:	b510      	push	{r4, lr}
 8015986:	4604      	mov	r4, r0
 8015988:	f7ff ffe6 	bl	8015958 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801598c:	4620      	mov	r0, r4
 801598e:	bd10      	pop	{r4, pc}

08015990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8015990:	6840      	ldr	r0, [r0, #4]
 8015992:	4770      	bx	lr

08015994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8015994:	6800      	ldr	r0, [r0, #0]
 8015996:	4770      	bx	lr

08015998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015998:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801599a:	4604      	mov	r4, r0
 801599c:	4616      	mov	r6, r2
 801599e:	460d      	mov	r5, r1
 80159a0:	b919      	cbnz	r1, 80159aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80159a2:	b112      	cbz	r2, 80159aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80159a4:	480d      	ldr	r0, [pc, #52]	; (80159dc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80159a6:	f000 f83e 	bl	8015a26 <_ZSt19__throw_logic_errorPKc>
 80159aa:	1b73      	subs	r3, r6, r5
 80159ac:	2b0f      	cmp	r3, #15
 80159ae:	9301      	str	r3, [sp, #4]
 80159b0:	d907      	bls.n	80159c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80159b2:	2200      	movs	r2, #0
 80159b4:	a901      	add	r1, sp, #4
 80159b6:	4620      	mov	r0, r4
 80159b8:	f7ff ffac 	bl	8015914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	6020      	str	r0, [r4, #0]
 80159c0:	60a3      	str	r3, [r4, #8]
 80159c2:	4632      	mov	r2, r6
 80159c4:	4629      	mov	r1, r5
 80159c6:	6820      	ldr	r0, [r4, #0]
 80159c8:	f7ff ffd7 	bl	801597a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80159cc:	9b01      	ldr	r3, [sp, #4]
 80159ce:	6822      	ldr	r2, [r4, #0]
 80159d0:	6063      	str	r3, [r4, #4]
 80159d2:	2100      	movs	r1, #0
 80159d4:	54d1      	strb	r1, [r2, r3]
 80159d6:	b002      	add	sp, #8
 80159d8:	bd70      	pop	{r4, r5, r6, pc}
 80159da:	bf00      	nop
 80159dc:	0801a9b4 	.word	0x0801a9b4

080159e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 80159e0:	b538      	push	{r3, r4, r5, lr}
 80159e2:	f100 0308 	add.w	r3, r0, #8
 80159e6:	4604      	mov	r4, r0
 80159e8:	6003      	str	r3, [r0, #0]
 80159ea:	460d      	mov	r5, r1
 80159ec:	b159      	cbz	r1, 8015a06 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 80159ee:	4608      	mov	r0, r1
 80159f0:	f7ea fc3e 	bl	8000270 <strlen>
 80159f4:	182a      	adds	r2, r5, r0
 80159f6:	4620      	mov	r0, r4
 80159f8:	f04f 0300 	mov.w	r3, #0
 80159fc:	4629      	mov	r1, r5
 80159fe:	f7ff ffcb 	bl	8015998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8015a02:	4620      	mov	r0, r4
 8015a04:	bd38      	pop	{r3, r4, r5, pc}
 8015a06:	f04f 32ff 	mov.w	r2, #4294967295
 8015a0a:	e7f4      	b.n	80159f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08015a0c <_ZdlPv>:
 8015a0c:	f001 bf52 	b.w	80178b4 <free>

08015a10 <_ZSt15get_new_handlerv>:
 8015a10:	4b02      	ldr	r3, [pc, #8]	; (8015a1c <_ZSt15get_new_handlerv+0xc>)
 8015a12:	6818      	ldr	r0, [r3, #0]
 8015a14:	f3bf 8f5b 	dmb	ish
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	200011b4 	.word	0x200011b4

08015a20 <_ZSt17__throw_bad_allocv>:
 8015a20:	b508      	push	{r3, lr}
 8015a22:	f001 ff0d 	bl	8017840 <abort>

08015a26 <_ZSt19__throw_logic_errorPKc>:
 8015a26:	b508      	push	{r3, lr}
 8015a28:	f001 ff0a 	bl	8017840 <abort>

08015a2c <_ZSt20__throw_length_errorPKc>:
 8015a2c:	b508      	push	{r3, lr}
 8015a2e:	f001 ff07 	bl	8017840 <abort>
 8015a32:	0000      	movs	r0, r0
 8015a34:	0000      	movs	r0, r0
	...

08015a38 <ceil>:
 8015a38:	ec51 0b10 	vmov	r0, r1, d0
 8015a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015a44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015a48:	2e13      	cmp	r6, #19
 8015a4a:	ee10 5a10 	vmov	r5, s0
 8015a4e:	ee10 8a10 	vmov	r8, s0
 8015a52:	460c      	mov	r4, r1
 8015a54:	dc30      	bgt.n	8015ab8 <ceil+0x80>
 8015a56:	2e00      	cmp	r6, #0
 8015a58:	da12      	bge.n	8015a80 <ceil+0x48>
 8015a5a:	a335      	add	r3, pc, #212	; (adr r3, 8015b30 <ceil+0xf8>)
 8015a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a60:	f7ea fc14 	bl	800028c <__adddf3>
 8015a64:	2200      	movs	r2, #0
 8015a66:	2300      	movs	r3, #0
 8015a68:	f7eb f856 	bl	8000b18 <__aeabi_dcmpgt>
 8015a6c:	b128      	cbz	r0, 8015a7a <ceil+0x42>
 8015a6e:	2c00      	cmp	r4, #0
 8015a70:	db55      	blt.n	8015b1e <ceil+0xe6>
 8015a72:	432c      	orrs	r4, r5
 8015a74:	d057      	beq.n	8015b26 <ceil+0xee>
 8015a76:	4c30      	ldr	r4, [pc, #192]	; (8015b38 <ceil+0x100>)
 8015a78:	2500      	movs	r5, #0
 8015a7a:	4621      	mov	r1, r4
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	e025      	b.n	8015acc <ceil+0x94>
 8015a80:	4f2e      	ldr	r7, [pc, #184]	; (8015b3c <ceil+0x104>)
 8015a82:	4137      	asrs	r7, r6
 8015a84:	ea01 0307 	and.w	r3, r1, r7
 8015a88:	4303      	orrs	r3, r0
 8015a8a:	d01f      	beq.n	8015acc <ceil+0x94>
 8015a8c:	a328      	add	r3, pc, #160	; (adr r3, 8015b30 <ceil+0xf8>)
 8015a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a92:	f7ea fbfb 	bl	800028c <__adddf3>
 8015a96:	2200      	movs	r2, #0
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f7eb f83d 	bl	8000b18 <__aeabi_dcmpgt>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d0eb      	beq.n	8015a7a <ceil+0x42>
 8015aa2:	2c00      	cmp	r4, #0
 8015aa4:	bfc2      	ittt	gt
 8015aa6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015aaa:	fa43 f606 	asrgt.w	r6, r3, r6
 8015aae:	19a4      	addgt	r4, r4, r6
 8015ab0:	ea24 0407 	bic.w	r4, r4, r7
 8015ab4:	2500      	movs	r5, #0
 8015ab6:	e7e0      	b.n	8015a7a <ceil+0x42>
 8015ab8:	2e33      	cmp	r6, #51	; 0x33
 8015aba:	dd0b      	ble.n	8015ad4 <ceil+0x9c>
 8015abc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015ac0:	d104      	bne.n	8015acc <ceil+0x94>
 8015ac2:	ee10 2a10 	vmov	r2, s0
 8015ac6:	460b      	mov	r3, r1
 8015ac8:	f7ea fbe0 	bl	800028c <__adddf3>
 8015acc:	ec41 0b10 	vmov	d0, r0, r1
 8015ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ad4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8015adc:	fa23 f707 	lsr.w	r7, r3, r7
 8015ae0:	4207      	tst	r7, r0
 8015ae2:	d0f3      	beq.n	8015acc <ceil+0x94>
 8015ae4:	a312      	add	r3, pc, #72	; (adr r3, 8015b30 <ceil+0xf8>)
 8015ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aea:	f7ea fbcf 	bl	800028c <__adddf3>
 8015aee:	2200      	movs	r2, #0
 8015af0:	2300      	movs	r3, #0
 8015af2:	f7eb f811 	bl	8000b18 <__aeabi_dcmpgt>
 8015af6:	2800      	cmp	r0, #0
 8015af8:	d0bf      	beq.n	8015a7a <ceil+0x42>
 8015afa:	2c00      	cmp	r4, #0
 8015afc:	dd02      	ble.n	8015b04 <ceil+0xcc>
 8015afe:	2e14      	cmp	r6, #20
 8015b00:	d103      	bne.n	8015b0a <ceil+0xd2>
 8015b02:	3401      	adds	r4, #1
 8015b04:	ea25 0507 	bic.w	r5, r5, r7
 8015b08:	e7b7      	b.n	8015a7a <ceil+0x42>
 8015b0a:	2301      	movs	r3, #1
 8015b0c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015b10:	fa03 f606 	lsl.w	r6, r3, r6
 8015b14:	4435      	add	r5, r6
 8015b16:	4545      	cmp	r5, r8
 8015b18:	bf38      	it	cc
 8015b1a:	18e4      	addcc	r4, r4, r3
 8015b1c:	e7f2      	b.n	8015b04 <ceil+0xcc>
 8015b1e:	2500      	movs	r5, #0
 8015b20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015b24:	e7a9      	b.n	8015a7a <ceil+0x42>
 8015b26:	4625      	mov	r5, r4
 8015b28:	e7a7      	b.n	8015a7a <ceil+0x42>
 8015b2a:	bf00      	nop
 8015b2c:	f3af 8000 	nop.w
 8015b30:	8800759c 	.word	0x8800759c
 8015b34:	7e37e43c 	.word	0x7e37e43c
 8015b38:	3ff00000 	.word	0x3ff00000
 8015b3c:	000fffff 	.word	0x000fffff

08015b40 <floor>:
 8015b40:	ec51 0b10 	vmov	r0, r1, d0
 8015b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015b4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015b50:	2e13      	cmp	r6, #19
 8015b52:	ee10 5a10 	vmov	r5, s0
 8015b56:	ee10 8a10 	vmov	r8, s0
 8015b5a:	460c      	mov	r4, r1
 8015b5c:	dc32      	bgt.n	8015bc4 <floor+0x84>
 8015b5e:	2e00      	cmp	r6, #0
 8015b60:	da14      	bge.n	8015b8c <floor+0x4c>
 8015b62:	a333      	add	r3, pc, #204	; (adr r3, 8015c30 <floor+0xf0>)
 8015b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b68:	f7ea fb90 	bl	800028c <__adddf3>
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	2300      	movs	r3, #0
 8015b70:	f7ea ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8015b74:	b138      	cbz	r0, 8015b86 <floor+0x46>
 8015b76:	2c00      	cmp	r4, #0
 8015b78:	da57      	bge.n	8015c2a <floor+0xea>
 8015b7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015b7e:	431d      	orrs	r5, r3
 8015b80:	d001      	beq.n	8015b86 <floor+0x46>
 8015b82:	4c2d      	ldr	r4, [pc, #180]	; (8015c38 <floor+0xf8>)
 8015b84:	2500      	movs	r5, #0
 8015b86:	4621      	mov	r1, r4
 8015b88:	4628      	mov	r0, r5
 8015b8a:	e025      	b.n	8015bd8 <floor+0x98>
 8015b8c:	4f2b      	ldr	r7, [pc, #172]	; (8015c3c <floor+0xfc>)
 8015b8e:	4137      	asrs	r7, r6
 8015b90:	ea01 0307 	and.w	r3, r1, r7
 8015b94:	4303      	orrs	r3, r0
 8015b96:	d01f      	beq.n	8015bd8 <floor+0x98>
 8015b98:	a325      	add	r3, pc, #148	; (adr r3, 8015c30 <floor+0xf0>)
 8015b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9e:	f7ea fb75 	bl	800028c <__adddf3>
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f7ea ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 8015baa:	2800      	cmp	r0, #0
 8015bac:	d0eb      	beq.n	8015b86 <floor+0x46>
 8015bae:	2c00      	cmp	r4, #0
 8015bb0:	bfbe      	ittt	lt
 8015bb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015bb6:	fa43 f606 	asrlt.w	r6, r3, r6
 8015bba:	19a4      	addlt	r4, r4, r6
 8015bbc:	ea24 0407 	bic.w	r4, r4, r7
 8015bc0:	2500      	movs	r5, #0
 8015bc2:	e7e0      	b.n	8015b86 <floor+0x46>
 8015bc4:	2e33      	cmp	r6, #51	; 0x33
 8015bc6:	dd0b      	ble.n	8015be0 <floor+0xa0>
 8015bc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015bcc:	d104      	bne.n	8015bd8 <floor+0x98>
 8015bce:	ee10 2a10 	vmov	r2, s0
 8015bd2:	460b      	mov	r3, r1
 8015bd4:	f7ea fb5a 	bl	800028c <__adddf3>
 8015bd8:	ec41 0b10 	vmov	d0, r0, r1
 8015bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015be4:	f04f 33ff 	mov.w	r3, #4294967295
 8015be8:	fa23 f707 	lsr.w	r7, r3, r7
 8015bec:	4207      	tst	r7, r0
 8015bee:	d0f3      	beq.n	8015bd8 <floor+0x98>
 8015bf0:	a30f      	add	r3, pc, #60	; (adr r3, 8015c30 <floor+0xf0>)
 8015bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf6:	f7ea fb49 	bl	800028c <__adddf3>
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	f7ea ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 8015c02:	2800      	cmp	r0, #0
 8015c04:	d0bf      	beq.n	8015b86 <floor+0x46>
 8015c06:	2c00      	cmp	r4, #0
 8015c08:	da02      	bge.n	8015c10 <floor+0xd0>
 8015c0a:	2e14      	cmp	r6, #20
 8015c0c:	d103      	bne.n	8015c16 <floor+0xd6>
 8015c0e:	3401      	adds	r4, #1
 8015c10:	ea25 0507 	bic.w	r5, r5, r7
 8015c14:	e7b7      	b.n	8015b86 <floor+0x46>
 8015c16:	2301      	movs	r3, #1
 8015c18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015c1c:	fa03 f606 	lsl.w	r6, r3, r6
 8015c20:	4435      	add	r5, r6
 8015c22:	4545      	cmp	r5, r8
 8015c24:	bf38      	it	cc
 8015c26:	18e4      	addcc	r4, r4, r3
 8015c28:	e7f2      	b.n	8015c10 <floor+0xd0>
 8015c2a:	2500      	movs	r5, #0
 8015c2c:	462c      	mov	r4, r5
 8015c2e:	e7aa      	b.n	8015b86 <floor+0x46>
 8015c30:	8800759c 	.word	0x8800759c
 8015c34:	7e37e43c 	.word	0x7e37e43c
 8015c38:	bff00000 	.word	0xbff00000
 8015c3c:	000fffff 	.word	0x000fffff

08015c40 <cosf>:
 8015c40:	ee10 3a10 	vmov	r3, s0
 8015c44:	b507      	push	{r0, r1, r2, lr}
 8015c46:	4a1c      	ldr	r2, [pc, #112]	; (8015cb8 <cosf+0x78>)
 8015c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	dc04      	bgt.n	8015c5a <cosf+0x1a>
 8015c50:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015cbc <cosf+0x7c>
 8015c54:	f000 fe9e 	bl	8016994 <__kernel_cosf>
 8015c58:	e004      	b.n	8015c64 <cosf+0x24>
 8015c5a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c5e:	db04      	blt.n	8015c6a <cosf+0x2a>
 8015c60:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015c64:	b003      	add	sp, #12
 8015c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c6a:	4668      	mov	r0, sp
 8015c6c:	f000 fd52 	bl	8016714 <__ieee754_rem_pio2f>
 8015c70:	f000 0003 	and.w	r0, r0, #3
 8015c74:	2801      	cmp	r0, #1
 8015c76:	d007      	beq.n	8015c88 <cosf+0x48>
 8015c78:	2802      	cmp	r0, #2
 8015c7a:	d00e      	beq.n	8015c9a <cosf+0x5a>
 8015c7c:	b9a0      	cbnz	r0, 8015ca8 <cosf+0x68>
 8015c7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c82:	ed9d 0a00 	vldr	s0, [sp]
 8015c86:	e7e5      	b.n	8015c54 <cosf+0x14>
 8015c88:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c8c:	ed9d 0a00 	vldr	s0, [sp]
 8015c90:	f001 f96a 	bl	8016f68 <__kernel_sinf>
 8015c94:	eeb1 0a40 	vneg.f32	s0, s0
 8015c98:	e7e4      	b.n	8015c64 <cosf+0x24>
 8015c9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c9e:	ed9d 0a00 	vldr	s0, [sp]
 8015ca2:	f000 fe77 	bl	8016994 <__kernel_cosf>
 8015ca6:	e7f5      	b.n	8015c94 <cosf+0x54>
 8015ca8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015cac:	ed9d 0a00 	vldr	s0, [sp]
 8015cb0:	2001      	movs	r0, #1
 8015cb2:	f001 f959 	bl	8016f68 <__kernel_sinf>
 8015cb6:	e7d5      	b.n	8015c64 <cosf+0x24>
 8015cb8:	3f490fd8 	.word	0x3f490fd8
 8015cbc:	00000000 	.word	0x00000000

08015cc0 <roundf>:
 8015cc0:	ee10 0a10 	vmov	r0, s0
 8015cc4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015cc8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015ccc:	2a16      	cmp	r2, #22
 8015cce:	dc15      	bgt.n	8015cfc <roundf+0x3c>
 8015cd0:	2a00      	cmp	r2, #0
 8015cd2:	da08      	bge.n	8015ce6 <roundf+0x26>
 8015cd4:	3201      	adds	r2, #1
 8015cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015cda:	d101      	bne.n	8015ce0 <roundf+0x20>
 8015cdc:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015ce0:	ee00 3a10 	vmov	s0, r3
 8015ce4:	4770      	bx	lr
 8015ce6:	4908      	ldr	r1, [pc, #32]	; (8015d08 <roundf+0x48>)
 8015ce8:	4111      	asrs	r1, r2
 8015cea:	4208      	tst	r0, r1
 8015cec:	d0fa      	beq.n	8015ce4 <roundf+0x24>
 8015cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015cf2:	4113      	asrs	r3, r2
 8015cf4:	4403      	add	r3, r0
 8015cf6:	ea23 0301 	bic.w	r3, r3, r1
 8015cfa:	e7f1      	b.n	8015ce0 <roundf+0x20>
 8015cfc:	2a80      	cmp	r2, #128	; 0x80
 8015cfe:	d1f1      	bne.n	8015ce4 <roundf+0x24>
 8015d00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015d04:	4770      	bx	lr
 8015d06:	bf00      	nop
 8015d08:	007fffff 	.word	0x007fffff

08015d0c <sinf>:
 8015d0c:	ee10 3a10 	vmov	r3, s0
 8015d10:	b507      	push	{r0, r1, r2, lr}
 8015d12:	4a1d      	ldr	r2, [pc, #116]	; (8015d88 <sinf+0x7c>)
 8015d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d18:	4293      	cmp	r3, r2
 8015d1a:	dc05      	bgt.n	8015d28 <sinf+0x1c>
 8015d1c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015d8c <sinf+0x80>
 8015d20:	2000      	movs	r0, #0
 8015d22:	f001 f921 	bl	8016f68 <__kernel_sinf>
 8015d26:	e004      	b.n	8015d32 <sinf+0x26>
 8015d28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d2c:	db04      	blt.n	8015d38 <sinf+0x2c>
 8015d2e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015d32:	b003      	add	sp, #12
 8015d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d38:	4668      	mov	r0, sp
 8015d3a:	f000 fceb 	bl	8016714 <__ieee754_rem_pio2f>
 8015d3e:	f000 0003 	and.w	r0, r0, #3
 8015d42:	2801      	cmp	r0, #1
 8015d44:	d008      	beq.n	8015d58 <sinf+0x4c>
 8015d46:	2802      	cmp	r0, #2
 8015d48:	d00d      	beq.n	8015d66 <sinf+0x5a>
 8015d4a:	b9b0      	cbnz	r0, 8015d7a <sinf+0x6e>
 8015d4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d50:	ed9d 0a00 	vldr	s0, [sp]
 8015d54:	2001      	movs	r0, #1
 8015d56:	e7e4      	b.n	8015d22 <sinf+0x16>
 8015d58:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d5c:	ed9d 0a00 	vldr	s0, [sp]
 8015d60:	f000 fe18 	bl	8016994 <__kernel_cosf>
 8015d64:	e7e5      	b.n	8015d32 <sinf+0x26>
 8015d66:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d6a:	ed9d 0a00 	vldr	s0, [sp]
 8015d6e:	2001      	movs	r0, #1
 8015d70:	f001 f8fa 	bl	8016f68 <__kernel_sinf>
 8015d74:	eeb1 0a40 	vneg.f32	s0, s0
 8015d78:	e7db      	b.n	8015d32 <sinf+0x26>
 8015d7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d7e:	ed9d 0a00 	vldr	s0, [sp]
 8015d82:	f000 fe07 	bl	8016994 <__kernel_cosf>
 8015d86:	e7f5      	b.n	8015d74 <sinf+0x68>
 8015d88:	3f490fd8 	.word	0x3f490fd8
 8015d8c:	00000000 	.word	0x00000000

08015d90 <tanf>:
 8015d90:	ee10 3a10 	vmov	r3, s0
 8015d94:	b507      	push	{r0, r1, r2, lr}
 8015d96:	4a10      	ldr	r2, [pc, #64]	; (8015dd8 <tanf+0x48>)
 8015d98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d9c:	4293      	cmp	r3, r2
 8015d9e:	dc05      	bgt.n	8015dac <tanf+0x1c>
 8015da0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015ddc <tanf+0x4c>
 8015da4:	2001      	movs	r0, #1
 8015da6:	f001 f927 	bl	8016ff8 <__kernel_tanf>
 8015daa:	e004      	b.n	8015db6 <tanf+0x26>
 8015dac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015db0:	db04      	blt.n	8015dbc <tanf+0x2c>
 8015db2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015db6:	b003      	add	sp, #12
 8015db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dbc:	4668      	mov	r0, sp
 8015dbe:	f000 fca9 	bl	8016714 <__ieee754_rem_pio2f>
 8015dc2:	0040      	lsls	r0, r0, #1
 8015dc4:	f000 0002 	and.w	r0, r0, #2
 8015dc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8015dcc:	ed9d 0a00 	vldr	s0, [sp]
 8015dd0:	f1c0 0001 	rsb	r0, r0, #1
 8015dd4:	e7e7      	b.n	8015da6 <tanf+0x16>
 8015dd6:	bf00      	nop
 8015dd8:	3f490fda 	.word	0x3f490fda
 8015ddc:	00000000 	.word	0x00000000

08015de0 <atan2>:
 8015de0:	f000 b89a 	b.w	8015f18 <__ieee754_atan2>

08015de4 <sqrt>:
 8015de4:	b538      	push	{r3, r4, r5, lr}
 8015de6:	ed2d 8b02 	vpush	{d8}
 8015dea:	ec55 4b10 	vmov	r4, r5, d0
 8015dee:	f000 f95d 	bl	80160ac <__ieee754_sqrt>
 8015df2:	4b15      	ldr	r3, [pc, #84]	; (8015e48 <sqrt+0x64>)
 8015df4:	eeb0 8a40 	vmov.f32	s16, s0
 8015df8:	eef0 8a60 	vmov.f32	s17, s1
 8015dfc:	f993 3000 	ldrsb.w	r3, [r3]
 8015e00:	3301      	adds	r3, #1
 8015e02:	d019      	beq.n	8015e38 <sqrt+0x54>
 8015e04:	4622      	mov	r2, r4
 8015e06:	462b      	mov	r3, r5
 8015e08:	4620      	mov	r0, r4
 8015e0a:	4629      	mov	r1, r5
 8015e0c:	f7ea fe8e 	bl	8000b2c <__aeabi_dcmpun>
 8015e10:	b990      	cbnz	r0, 8015e38 <sqrt+0x54>
 8015e12:	2200      	movs	r2, #0
 8015e14:	2300      	movs	r3, #0
 8015e16:	4620      	mov	r0, r4
 8015e18:	4629      	mov	r1, r5
 8015e1a:	f7ea fe5f 	bl	8000adc <__aeabi_dcmplt>
 8015e1e:	b158      	cbz	r0, 8015e38 <sqrt+0x54>
 8015e20:	f001 fd16 	bl	8017850 <__errno>
 8015e24:	2321      	movs	r3, #33	; 0x21
 8015e26:	6003      	str	r3, [r0, #0]
 8015e28:	2200      	movs	r2, #0
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	4619      	mov	r1, r3
 8015e30:	f7ea fd0c 	bl	800084c <__aeabi_ddiv>
 8015e34:	ec41 0b18 	vmov	d8, r0, r1
 8015e38:	eeb0 0a48 	vmov.f32	s0, s16
 8015e3c:	eef0 0a68 	vmov.f32	s1, s17
 8015e40:	ecbd 8b02 	vpop	{d8}
 8015e44:	bd38      	pop	{r3, r4, r5, pc}
 8015e46:	bf00      	nop
 8015e48:	200000ed 	.word	0x200000ed

08015e4c <acosf>:
 8015e4c:	b508      	push	{r3, lr}
 8015e4e:	ed2d 8b02 	vpush	{d8}
 8015e52:	eeb0 8a40 	vmov.f32	s16, s0
 8015e56:	f000 f9dd 	bl	8016214 <__ieee754_acosf>
 8015e5a:	4b13      	ldr	r3, [pc, #76]	; (8015ea8 <acosf+0x5c>)
 8015e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8015e60:	3301      	adds	r3, #1
 8015e62:	eef0 8a40 	vmov.f32	s17, s0
 8015e66:	d01a      	beq.n	8015e9e <acosf+0x52>
 8015e68:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e70:	d615      	bvs.n	8015e9e <acosf+0x52>
 8015e72:	eeb0 0a48 	vmov.f32	s0, s16
 8015e76:	f001 fc21 	bl	80176bc <fabsf>
 8015e7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e7e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e86:	dd0a      	ble.n	8015e9e <acosf+0x52>
 8015e88:	f001 fce2 	bl	8017850 <__errno>
 8015e8c:	ecbd 8b02 	vpop	{d8}
 8015e90:	2321      	movs	r3, #33	; 0x21
 8015e92:	6003      	str	r3, [r0, #0]
 8015e94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015e98:	4804      	ldr	r0, [pc, #16]	; (8015eac <acosf+0x60>)
 8015e9a:	f001 bc59 	b.w	8017750 <nanf>
 8015e9e:	eeb0 0a68 	vmov.f32	s0, s17
 8015ea2:	ecbd 8b02 	vpop	{d8}
 8015ea6:	bd08      	pop	{r3, pc}
 8015ea8:	200000ed 	.word	0x200000ed
 8015eac:	0801b130 	.word	0x0801b130

08015eb0 <asinf>:
 8015eb0:	b508      	push	{r3, lr}
 8015eb2:	ed2d 8b02 	vpush	{d8}
 8015eb6:	eeb0 8a40 	vmov.f32	s16, s0
 8015eba:	f000 faa5 	bl	8016408 <__ieee754_asinf>
 8015ebe:	4b13      	ldr	r3, [pc, #76]	; (8015f0c <asinf+0x5c>)
 8015ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	eef0 8a40 	vmov.f32	s17, s0
 8015eca:	d01a      	beq.n	8015f02 <asinf+0x52>
 8015ecc:	eeb4 8a48 	vcmp.f32	s16, s16
 8015ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed4:	d615      	bvs.n	8015f02 <asinf+0x52>
 8015ed6:	eeb0 0a48 	vmov.f32	s0, s16
 8015eda:	f001 fbef 	bl	80176bc <fabsf>
 8015ede:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015ee2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eea:	dd0a      	ble.n	8015f02 <asinf+0x52>
 8015eec:	f001 fcb0 	bl	8017850 <__errno>
 8015ef0:	ecbd 8b02 	vpop	{d8}
 8015ef4:	2321      	movs	r3, #33	; 0x21
 8015ef6:	6003      	str	r3, [r0, #0]
 8015ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015efc:	4804      	ldr	r0, [pc, #16]	; (8015f10 <asinf+0x60>)
 8015efe:	f001 bc27 	b.w	8017750 <nanf>
 8015f02:	eeb0 0a68 	vmov.f32	s0, s17
 8015f06:	ecbd 8b02 	vpop	{d8}
 8015f0a:	bd08      	pop	{r3, pc}
 8015f0c:	200000ed 	.word	0x200000ed
 8015f10:	0801b130 	.word	0x0801b130

08015f14 <atan2f>:
 8015f14:	f000 bb5e 	b.w	80165d4 <__ieee754_atan2f>

08015f18 <__ieee754_atan2>:
 8015f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f1c:	ec57 6b11 	vmov	r6, r7, d1
 8015f20:	4273      	negs	r3, r6
 8015f22:	f8df e184 	ldr.w	lr, [pc, #388]	; 80160a8 <__ieee754_atan2+0x190>
 8015f26:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015f2a:	4333      	orrs	r3, r6
 8015f2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015f30:	4573      	cmp	r3, lr
 8015f32:	ec51 0b10 	vmov	r0, r1, d0
 8015f36:	ee11 8a10 	vmov	r8, s2
 8015f3a:	d80a      	bhi.n	8015f52 <__ieee754_atan2+0x3a>
 8015f3c:	4244      	negs	r4, r0
 8015f3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f42:	4304      	orrs	r4, r0
 8015f44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015f48:	4574      	cmp	r4, lr
 8015f4a:	ee10 9a10 	vmov	r9, s0
 8015f4e:	468c      	mov	ip, r1
 8015f50:	d907      	bls.n	8015f62 <__ieee754_atan2+0x4a>
 8015f52:	4632      	mov	r2, r6
 8015f54:	463b      	mov	r3, r7
 8015f56:	f7ea f999 	bl	800028c <__adddf3>
 8015f5a:	ec41 0b10 	vmov	d0, r0, r1
 8015f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015f66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f6a:	4334      	orrs	r4, r6
 8015f6c:	d103      	bne.n	8015f76 <__ieee754_atan2+0x5e>
 8015f6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f72:	f001 b925 	b.w	80171c0 <atan>
 8015f76:	17bc      	asrs	r4, r7, #30
 8015f78:	f004 0402 	and.w	r4, r4, #2
 8015f7c:	ea53 0909 	orrs.w	r9, r3, r9
 8015f80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015f84:	d107      	bne.n	8015f96 <__ieee754_atan2+0x7e>
 8015f86:	2c02      	cmp	r4, #2
 8015f88:	d060      	beq.n	801604c <__ieee754_atan2+0x134>
 8015f8a:	2c03      	cmp	r4, #3
 8015f8c:	d1e5      	bne.n	8015f5a <__ieee754_atan2+0x42>
 8015f8e:	a142      	add	r1, pc, #264	; (adr r1, 8016098 <__ieee754_atan2+0x180>)
 8015f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f94:	e7e1      	b.n	8015f5a <__ieee754_atan2+0x42>
 8015f96:	ea52 0808 	orrs.w	r8, r2, r8
 8015f9a:	d106      	bne.n	8015faa <__ieee754_atan2+0x92>
 8015f9c:	f1bc 0f00 	cmp.w	ip, #0
 8015fa0:	da5f      	bge.n	8016062 <__ieee754_atan2+0x14a>
 8015fa2:	a13f      	add	r1, pc, #252	; (adr r1, 80160a0 <__ieee754_atan2+0x188>)
 8015fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fa8:	e7d7      	b.n	8015f5a <__ieee754_atan2+0x42>
 8015faa:	4572      	cmp	r2, lr
 8015fac:	d10f      	bne.n	8015fce <__ieee754_atan2+0xb6>
 8015fae:	4293      	cmp	r3, r2
 8015fb0:	f104 34ff 	add.w	r4, r4, #4294967295
 8015fb4:	d107      	bne.n	8015fc6 <__ieee754_atan2+0xae>
 8015fb6:	2c02      	cmp	r4, #2
 8015fb8:	d84c      	bhi.n	8016054 <__ieee754_atan2+0x13c>
 8015fba:	4b35      	ldr	r3, [pc, #212]	; (8016090 <__ieee754_atan2+0x178>)
 8015fbc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015fc0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015fc4:	e7c9      	b.n	8015f5a <__ieee754_atan2+0x42>
 8015fc6:	2c02      	cmp	r4, #2
 8015fc8:	d848      	bhi.n	801605c <__ieee754_atan2+0x144>
 8015fca:	4b32      	ldr	r3, [pc, #200]	; (8016094 <__ieee754_atan2+0x17c>)
 8015fcc:	e7f6      	b.n	8015fbc <__ieee754_atan2+0xa4>
 8015fce:	4573      	cmp	r3, lr
 8015fd0:	d0e4      	beq.n	8015f9c <__ieee754_atan2+0x84>
 8015fd2:	1a9b      	subs	r3, r3, r2
 8015fd4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015fd8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015fdc:	da1e      	bge.n	801601c <__ieee754_atan2+0x104>
 8015fde:	2f00      	cmp	r7, #0
 8015fe0:	da01      	bge.n	8015fe6 <__ieee754_atan2+0xce>
 8015fe2:	323c      	adds	r2, #60	; 0x3c
 8015fe4:	db1e      	blt.n	8016024 <__ieee754_atan2+0x10c>
 8015fe6:	4632      	mov	r2, r6
 8015fe8:	463b      	mov	r3, r7
 8015fea:	f7ea fc2f 	bl	800084c <__aeabi_ddiv>
 8015fee:	ec41 0b10 	vmov	d0, r0, r1
 8015ff2:	f001 fa85 	bl	8017500 <fabs>
 8015ff6:	f001 f8e3 	bl	80171c0 <atan>
 8015ffa:	ec51 0b10 	vmov	r0, r1, d0
 8015ffe:	2c01      	cmp	r4, #1
 8016000:	d013      	beq.n	801602a <__ieee754_atan2+0x112>
 8016002:	2c02      	cmp	r4, #2
 8016004:	d015      	beq.n	8016032 <__ieee754_atan2+0x11a>
 8016006:	2c00      	cmp	r4, #0
 8016008:	d0a7      	beq.n	8015f5a <__ieee754_atan2+0x42>
 801600a:	a319      	add	r3, pc, #100	; (adr r3, 8016070 <__ieee754_atan2+0x158>)
 801600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016010:	f7ea f93a 	bl	8000288 <__aeabi_dsub>
 8016014:	a318      	add	r3, pc, #96	; (adr r3, 8016078 <__ieee754_atan2+0x160>)
 8016016:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601a:	e014      	b.n	8016046 <__ieee754_atan2+0x12e>
 801601c:	a118      	add	r1, pc, #96	; (adr r1, 8016080 <__ieee754_atan2+0x168>)
 801601e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016022:	e7ec      	b.n	8015ffe <__ieee754_atan2+0xe6>
 8016024:	2000      	movs	r0, #0
 8016026:	2100      	movs	r1, #0
 8016028:	e7e9      	b.n	8015ffe <__ieee754_atan2+0xe6>
 801602a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801602e:	4619      	mov	r1, r3
 8016030:	e793      	b.n	8015f5a <__ieee754_atan2+0x42>
 8016032:	a30f      	add	r3, pc, #60	; (adr r3, 8016070 <__ieee754_atan2+0x158>)
 8016034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016038:	f7ea f926 	bl	8000288 <__aeabi_dsub>
 801603c:	4602      	mov	r2, r0
 801603e:	460b      	mov	r3, r1
 8016040:	a10d      	add	r1, pc, #52	; (adr r1, 8016078 <__ieee754_atan2+0x160>)
 8016042:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016046:	f7ea f91f 	bl	8000288 <__aeabi_dsub>
 801604a:	e786      	b.n	8015f5a <__ieee754_atan2+0x42>
 801604c:	a10a      	add	r1, pc, #40	; (adr r1, 8016078 <__ieee754_atan2+0x160>)
 801604e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016052:	e782      	b.n	8015f5a <__ieee754_atan2+0x42>
 8016054:	a10c      	add	r1, pc, #48	; (adr r1, 8016088 <__ieee754_atan2+0x170>)
 8016056:	e9d1 0100 	ldrd	r0, r1, [r1]
 801605a:	e77e      	b.n	8015f5a <__ieee754_atan2+0x42>
 801605c:	2000      	movs	r0, #0
 801605e:	2100      	movs	r1, #0
 8016060:	e77b      	b.n	8015f5a <__ieee754_atan2+0x42>
 8016062:	a107      	add	r1, pc, #28	; (adr r1, 8016080 <__ieee754_atan2+0x168>)
 8016064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016068:	e777      	b.n	8015f5a <__ieee754_atan2+0x42>
 801606a:	bf00      	nop
 801606c:	f3af 8000 	nop.w
 8016070:	33145c07 	.word	0x33145c07
 8016074:	3ca1a626 	.word	0x3ca1a626
 8016078:	54442d18 	.word	0x54442d18
 801607c:	400921fb 	.word	0x400921fb
 8016080:	54442d18 	.word	0x54442d18
 8016084:	3ff921fb 	.word	0x3ff921fb
 8016088:	54442d18 	.word	0x54442d18
 801608c:	3fe921fb 	.word	0x3fe921fb
 8016090:	0801a9e0 	.word	0x0801a9e0
 8016094:	0801a9f8 	.word	0x0801a9f8
 8016098:	54442d18 	.word	0x54442d18
 801609c:	c00921fb 	.word	0xc00921fb
 80160a0:	54442d18 	.word	0x54442d18
 80160a4:	bff921fb 	.word	0xbff921fb
 80160a8:	7ff00000 	.word	0x7ff00000

080160ac <__ieee754_sqrt>:
 80160ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b0:	ec55 4b10 	vmov	r4, r5, d0
 80160b4:	4e56      	ldr	r6, [pc, #344]	; (8016210 <__ieee754_sqrt+0x164>)
 80160b6:	43ae      	bics	r6, r5
 80160b8:	ee10 0a10 	vmov	r0, s0
 80160bc:	ee10 3a10 	vmov	r3, s0
 80160c0:	4629      	mov	r1, r5
 80160c2:	462a      	mov	r2, r5
 80160c4:	d110      	bne.n	80160e8 <__ieee754_sqrt+0x3c>
 80160c6:	ee10 2a10 	vmov	r2, s0
 80160ca:	462b      	mov	r3, r5
 80160cc:	f7ea fa94 	bl	80005f8 <__aeabi_dmul>
 80160d0:	4602      	mov	r2, r0
 80160d2:	460b      	mov	r3, r1
 80160d4:	4620      	mov	r0, r4
 80160d6:	4629      	mov	r1, r5
 80160d8:	f7ea f8d8 	bl	800028c <__adddf3>
 80160dc:	4604      	mov	r4, r0
 80160de:	460d      	mov	r5, r1
 80160e0:	ec45 4b10 	vmov	d0, r4, r5
 80160e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160e8:	2d00      	cmp	r5, #0
 80160ea:	dc10      	bgt.n	801610e <__ieee754_sqrt+0x62>
 80160ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80160f0:	4330      	orrs	r0, r6
 80160f2:	d0f5      	beq.n	80160e0 <__ieee754_sqrt+0x34>
 80160f4:	b15d      	cbz	r5, 801610e <__ieee754_sqrt+0x62>
 80160f6:	ee10 2a10 	vmov	r2, s0
 80160fa:	462b      	mov	r3, r5
 80160fc:	ee10 0a10 	vmov	r0, s0
 8016100:	f7ea f8c2 	bl	8000288 <__aeabi_dsub>
 8016104:	4602      	mov	r2, r0
 8016106:	460b      	mov	r3, r1
 8016108:	f7ea fba0 	bl	800084c <__aeabi_ddiv>
 801610c:	e7e6      	b.n	80160dc <__ieee754_sqrt+0x30>
 801610e:	1509      	asrs	r1, r1, #20
 8016110:	d076      	beq.n	8016200 <__ieee754_sqrt+0x154>
 8016112:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8016116:	07ce      	lsls	r6, r1, #31
 8016118:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801611c:	bf5e      	ittt	pl
 801611e:	0fda      	lsrpl	r2, r3, #31
 8016120:	005b      	lslpl	r3, r3, #1
 8016122:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8016126:	0fda      	lsrs	r2, r3, #31
 8016128:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801612c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016130:	2000      	movs	r0, #0
 8016132:	106d      	asrs	r5, r5, #1
 8016134:	005b      	lsls	r3, r3, #1
 8016136:	f04f 0e16 	mov.w	lr, #22
 801613a:	4684      	mov	ip, r0
 801613c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016140:	eb0c 0401 	add.w	r4, ip, r1
 8016144:	4294      	cmp	r4, r2
 8016146:	bfde      	ittt	le
 8016148:	1b12      	suble	r2, r2, r4
 801614a:	eb04 0c01 	addle.w	ip, r4, r1
 801614e:	1840      	addle	r0, r0, r1
 8016150:	0052      	lsls	r2, r2, #1
 8016152:	f1be 0e01 	subs.w	lr, lr, #1
 8016156:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801615a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801615e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016162:	d1ed      	bne.n	8016140 <__ieee754_sqrt+0x94>
 8016164:	4671      	mov	r1, lr
 8016166:	2720      	movs	r7, #32
 8016168:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801616c:	4562      	cmp	r2, ip
 801616e:	eb04 060e 	add.w	r6, r4, lr
 8016172:	dc02      	bgt.n	801617a <__ieee754_sqrt+0xce>
 8016174:	d113      	bne.n	801619e <__ieee754_sqrt+0xf2>
 8016176:	429e      	cmp	r6, r3
 8016178:	d811      	bhi.n	801619e <__ieee754_sqrt+0xf2>
 801617a:	2e00      	cmp	r6, #0
 801617c:	eb06 0e04 	add.w	lr, r6, r4
 8016180:	da43      	bge.n	801620a <__ieee754_sqrt+0x15e>
 8016182:	f1be 0f00 	cmp.w	lr, #0
 8016186:	db40      	blt.n	801620a <__ieee754_sqrt+0x15e>
 8016188:	f10c 0801 	add.w	r8, ip, #1
 801618c:	eba2 020c 	sub.w	r2, r2, ip
 8016190:	429e      	cmp	r6, r3
 8016192:	bf88      	it	hi
 8016194:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016198:	1b9b      	subs	r3, r3, r6
 801619a:	4421      	add	r1, r4
 801619c:	46c4      	mov	ip, r8
 801619e:	0052      	lsls	r2, r2, #1
 80161a0:	3f01      	subs	r7, #1
 80161a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80161a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80161aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80161ae:	d1dd      	bne.n	801616c <__ieee754_sqrt+0xc0>
 80161b0:	4313      	orrs	r3, r2
 80161b2:	d006      	beq.n	80161c2 <__ieee754_sqrt+0x116>
 80161b4:	1c4c      	adds	r4, r1, #1
 80161b6:	bf13      	iteet	ne
 80161b8:	3101      	addne	r1, #1
 80161ba:	3001      	addeq	r0, #1
 80161bc:	4639      	moveq	r1, r7
 80161be:	f021 0101 	bicne.w	r1, r1, #1
 80161c2:	1043      	asrs	r3, r0, #1
 80161c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80161c8:	0849      	lsrs	r1, r1, #1
 80161ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80161ce:	07c2      	lsls	r2, r0, #31
 80161d0:	bf48      	it	mi
 80161d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80161d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80161da:	460c      	mov	r4, r1
 80161dc:	463d      	mov	r5, r7
 80161de:	e77f      	b.n	80160e0 <__ieee754_sqrt+0x34>
 80161e0:	0ada      	lsrs	r2, r3, #11
 80161e2:	3815      	subs	r0, #21
 80161e4:	055b      	lsls	r3, r3, #21
 80161e6:	2a00      	cmp	r2, #0
 80161e8:	d0fa      	beq.n	80161e0 <__ieee754_sqrt+0x134>
 80161ea:	02d7      	lsls	r7, r2, #11
 80161ec:	d50a      	bpl.n	8016204 <__ieee754_sqrt+0x158>
 80161ee:	f1c1 0420 	rsb	r4, r1, #32
 80161f2:	fa23 f404 	lsr.w	r4, r3, r4
 80161f6:	1e4d      	subs	r5, r1, #1
 80161f8:	408b      	lsls	r3, r1
 80161fa:	4322      	orrs	r2, r4
 80161fc:	1b41      	subs	r1, r0, r5
 80161fe:	e788      	b.n	8016112 <__ieee754_sqrt+0x66>
 8016200:	4608      	mov	r0, r1
 8016202:	e7f0      	b.n	80161e6 <__ieee754_sqrt+0x13a>
 8016204:	0052      	lsls	r2, r2, #1
 8016206:	3101      	adds	r1, #1
 8016208:	e7ef      	b.n	80161ea <__ieee754_sqrt+0x13e>
 801620a:	46e0      	mov	r8, ip
 801620c:	e7be      	b.n	801618c <__ieee754_sqrt+0xe0>
 801620e:	bf00      	nop
 8016210:	7ff00000 	.word	0x7ff00000

08016214 <__ieee754_acosf>:
 8016214:	b508      	push	{r3, lr}
 8016216:	ee10 3a10 	vmov	r3, s0
 801621a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801621e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016222:	ed2d 8b0c 	vpush	{d8-d13}
 8016226:	d10a      	bne.n	801623e <__ieee754_acosf+0x2a>
 8016228:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80163c4 <__ieee754_acosf+0x1b0>
 801622c:	ed9f 8a66 	vldr	s16, [pc, #408]	; 80163c8 <__ieee754_acosf+0x1b4>
 8016230:	2b00      	cmp	r3, #0
 8016232:	bfd8      	it	le
 8016234:	eeb0 0a48 	vmovle.f32	s0, s16
 8016238:	ecbd 8b0c 	vpop	{d8-d13}
 801623c:	bd08      	pop	{r3, pc}
 801623e:	dd04      	ble.n	801624a <__ieee754_acosf+0x36>
 8016240:	ee30 8a40 	vsub.f32	s16, s0, s0
 8016244:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016248:	e7f6      	b.n	8016238 <__ieee754_acosf+0x24>
 801624a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 801624e:	da3e      	bge.n	80162ce <__ieee754_acosf+0xba>
 8016250:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8016254:	f340 80b3 	ble.w	80163be <__ieee754_acosf+0x1aa>
 8016258:	ee60 7a00 	vmul.f32	s15, s0, s0
 801625c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80163cc <__ieee754_acosf+0x1b8>
 8016260:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80163d0 <__ieee754_acosf+0x1bc>
 8016264:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 80163d4 <__ieee754_acosf+0x1c0>
 8016268:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 80163d8 <__ieee754_acosf+0x1c4>
 801626c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016270:	eddf 6a5a 	vldr	s13, [pc, #360]	; 80163dc <__ieee754_acosf+0x1c8>
 8016274:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016278:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80163e0 <__ieee754_acosf+0x1cc>
 801627c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016280:	eddf 6a58 	vldr	s13, [pc, #352]	; 80163e4 <__ieee754_acosf+0x1d0>
 8016284:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016288:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80163e8 <__ieee754_acosf+0x1d4>
 801628c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016290:	eddf 6a56 	vldr	s13, [pc, #344]	; 80163ec <__ieee754_acosf+0x1d8>
 8016294:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016298:	eddf 6a55 	vldr	s13, [pc, #340]	; 80163f0 <__ieee754_acosf+0x1dc>
 801629c:	eee6 6a27 	vfma.f32	s13, s12, s15
 80162a0:	ed9f 6a54 	vldr	s12, [pc, #336]	; 80163f4 <__ieee754_acosf+0x1e0>
 80162a4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80162a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80162ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80162b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162b4:	eef0 7a66 	vmov.f32	s15, s13
 80162b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80162bc:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80163f8 <__ieee754_acosf+0x1e4>
 80162c0:	eea0 8a66 	vfms.f32	s16, s0, s13
 80162c4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80162c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80162cc:	e7b4      	b.n	8016238 <__ieee754_acosf+0x24>
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	eddf da3e 	vldr	s27, [pc, #248]	; 80163cc <__ieee754_acosf+0x1b8>
 80162d4:	eddf ca3e 	vldr	s25, [pc, #248]	; 80163d0 <__ieee754_acosf+0x1bc>
 80162d8:	ed9f ca40 	vldr	s24, [pc, #256]	; 80163dc <__ieee754_acosf+0x1c8>
 80162dc:	eddf ba40 	vldr	s23, [pc, #256]	; 80163e0 <__ieee754_acosf+0x1cc>
 80162e0:	ed9f ba40 	vldr	s22, [pc, #256]	; 80163e4 <__ieee754_acosf+0x1d0>
 80162e4:	eddf 8a40 	vldr	s17, [pc, #256]	; 80163e8 <__ieee754_acosf+0x1d4>
 80162e8:	ed9f da40 	vldr	s26, [pc, #256]	; 80163ec <__ieee754_acosf+0x1d8>
 80162ec:	eddf aa39 	vldr	s21, [pc, #228]	; 80163d4 <__ieee754_acosf+0x1c0>
 80162f0:	ed9f aa3f 	vldr	s20, [pc, #252]	; 80163f0 <__ieee754_acosf+0x1dc>
 80162f4:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80163f4 <__ieee754_acosf+0x1e0>
 80162f8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80162fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016300:	da28      	bge.n	8016354 <__ieee754_acosf+0x140>
 8016302:	ee30 0a09 	vadd.f32	s0, s0, s18
 8016306:	ee20 0a27 	vmul.f32	s0, s0, s15
 801630a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801630e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8016312:	eeac ca80 	vfma.f32	s24, s25, s0
 8016316:	eeaa aa80 	vfma.f32	s20, s21, s0
 801631a:	eeec ba00 	vfma.f32	s23, s24, s0
 801631e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8016322:	eeab ba80 	vfma.f32	s22, s23, s0
 8016326:	eea9 9a80 	vfma.f32	s18, s19, s0
 801632a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801632e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8016332:	f000 fb2b 	bl	801698c <__ieee754_sqrtf>
 8016336:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801633a:	eddf 7a30 	vldr	s15, [pc, #192]	; 80163fc <__ieee754_acosf+0x1e8>
 801633e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016342:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016346:	ee77 7a80 	vadd.f32	s15, s15, s0
 801634a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016400 <__ieee754_acosf+0x1ec>
 801634e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016352:	e771      	b.n	8016238 <__ieee754_acosf+0x24>
 8016354:	ee39 8a40 	vsub.f32	s16, s18, s0
 8016358:	ee28 8a27 	vmul.f32	s16, s16, s15
 801635c:	eeb0 0a48 	vmov.f32	s0, s16
 8016360:	f000 fb14 	bl	801698c <__ieee754_sqrtf>
 8016364:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8016368:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801636c:	eeac ca88 	vfma.f32	s24, s25, s16
 8016370:	eeaa aa88 	vfma.f32	s20, s21, s16
 8016374:	eeec ba08 	vfma.f32	s23, s24, s16
 8016378:	ee10 3a10 	vmov	r3, s0
 801637c:	eeab ba88 	vfma.f32	s22, s23, s16
 8016380:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016384:	f023 030f 	bic.w	r3, r3, #15
 8016388:	eeea 9a08 	vfma.f32	s19, s20, s16
 801638c:	ee07 3a90 	vmov	s15, r3
 8016390:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8016394:	eeb0 6a48 	vmov.f32	s12, s16
 8016398:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801639c:	eea9 9a88 	vfma.f32	s18, s19, s16
 80163a0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80163a4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80163a8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80163ac:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80163b0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80163b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80163b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80163bc:	e73c      	b.n	8016238 <__ieee754_acosf+0x24>
 80163be:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8016404 <__ieee754_acosf+0x1f0>
 80163c2:	e739      	b.n	8016238 <__ieee754_acosf+0x24>
 80163c4:	00000000 	.word	0x00000000
 80163c8:	40490fdb 	.word	0x40490fdb
 80163cc:	3811ef08 	.word	0x3811ef08
 80163d0:	3a4f7f04 	.word	0x3a4f7f04
 80163d4:	bf303361 	.word	0xbf303361
 80163d8:	33a22168 	.word	0x33a22168
 80163dc:	bd241146 	.word	0xbd241146
 80163e0:	3e4e0aa8 	.word	0x3e4e0aa8
 80163e4:	bea6b090 	.word	0xbea6b090
 80163e8:	3e2aaaab 	.word	0x3e2aaaab
 80163ec:	3d9dc62e 	.word	0x3d9dc62e
 80163f0:	4001572d 	.word	0x4001572d
 80163f4:	c019d139 	.word	0xc019d139
 80163f8:	3fc90fda 	.word	0x3fc90fda
 80163fc:	b3a22168 	.word	0xb3a22168
 8016400:	40490fda 	.word	0x40490fda
 8016404:	3fc90fdb 	.word	0x3fc90fdb

08016408 <__ieee754_asinf>:
 8016408:	b538      	push	{r3, r4, r5, lr}
 801640a:	ee10 5a10 	vmov	r5, s0
 801640e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016412:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8016416:	ed2d 8b04 	vpush	{d8-d9}
 801641a:	d10c      	bne.n	8016436 <__ieee754_asinf+0x2e>
 801641c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8016594 <__ieee754_asinf+0x18c>
 8016420:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016598 <__ieee754_asinf+0x190>
 8016424:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016428:	eee0 7a07 	vfma.f32	s15, s0, s14
 801642c:	eeb0 0a67 	vmov.f32	s0, s15
 8016430:	ecbd 8b04 	vpop	{d8-d9}
 8016434:	bd38      	pop	{r3, r4, r5, pc}
 8016436:	dd04      	ble.n	8016442 <__ieee754_asinf+0x3a>
 8016438:	ee70 7a40 	vsub.f32	s15, s0, s0
 801643c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016440:	e7f6      	b.n	8016430 <__ieee754_asinf+0x28>
 8016442:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8016446:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801644a:	da0b      	bge.n	8016464 <__ieee754_asinf+0x5c>
 801644c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8016450:	da52      	bge.n	80164f8 <__ieee754_asinf+0xf0>
 8016452:	eddf 7a52 	vldr	s15, [pc, #328]	; 801659c <__ieee754_asinf+0x194>
 8016456:	ee70 7a27 	vadd.f32	s15, s0, s15
 801645a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016462:	dce5      	bgt.n	8016430 <__ieee754_asinf+0x28>
 8016464:	f001 f92a 	bl	80176bc <fabsf>
 8016468:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801646c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016470:	ee20 8a08 	vmul.f32	s16, s0, s16
 8016474:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80165a0 <__ieee754_asinf+0x198>
 8016478:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80165a4 <__ieee754_asinf+0x19c>
 801647c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80165a8 <__ieee754_asinf+0x1a0>
 8016480:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016484:	eddf 7a49 	vldr	s15, [pc, #292]	; 80165ac <__ieee754_asinf+0x1a4>
 8016488:	eee7 7a08 	vfma.f32	s15, s14, s16
 801648c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80165b0 <__ieee754_asinf+0x1a8>
 8016490:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016494:	eddf 7a47 	vldr	s15, [pc, #284]	; 80165b4 <__ieee754_asinf+0x1ac>
 8016498:	eee7 7a08 	vfma.f32	s15, s14, s16
 801649c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80165b8 <__ieee754_asinf+0x1b0>
 80164a0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80164a4:	eddf 7a45 	vldr	s15, [pc, #276]	; 80165bc <__ieee754_asinf+0x1b4>
 80164a8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80164ac:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80165c0 <__ieee754_asinf+0x1b8>
 80164b0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80164b4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80165c4 <__ieee754_asinf+0x1bc>
 80164b8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80164bc:	eeb0 0a48 	vmov.f32	s0, s16
 80164c0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80164c4:	f000 fa62 	bl	801698c <__ieee754_sqrtf>
 80164c8:	4b3f      	ldr	r3, [pc, #252]	; (80165c8 <__ieee754_asinf+0x1c0>)
 80164ca:	ee29 9a08 	vmul.f32	s18, s18, s16
 80164ce:	429c      	cmp	r4, r3
 80164d0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80164d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80164d8:	dd3d      	ble.n	8016556 <__ieee754_asinf+0x14e>
 80164da:	eea0 0a06 	vfma.f32	s0, s0, s12
 80164de:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80165cc <__ieee754_asinf+0x1c4>
 80164e2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80164e6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016598 <__ieee754_asinf+0x190>
 80164ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80164ee:	2d00      	cmp	r5, #0
 80164f0:	bfd8      	it	le
 80164f2:	eeb1 0a40 	vnegle.f32	s0, s0
 80164f6:	e79b      	b.n	8016430 <__ieee754_asinf+0x28>
 80164f8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80164fc:	eddf 6a28 	vldr	s13, [pc, #160]	; 80165a0 <__ieee754_asinf+0x198>
 8016500:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80165a4 <__ieee754_asinf+0x19c>
 8016504:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80165b8 <__ieee754_asinf+0x1b0>
 8016508:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801650c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80165ac <__ieee754_asinf+0x1a4>
 8016510:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016514:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80165b0 <__ieee754_asinf+0x1a8>
 8016518:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801651c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80165b4 <__ieee754_asinf+0x1ac>
 8016520:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016524:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80165a8 <__ieee754_asinf+0x1a0>
 8016528:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801652c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80165bc <__ieee754_asinf+0x1b4>
 8016530:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016534:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80165c0 <__ieee754_asinf+0x1b8>
 8016538:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801653c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80165c4 <__ieee754_asinf+0x1bc>
 8016540:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016548:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801654c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016550:	eea0 0a27 	vfma.f32	s0, s0, s15
 8016554:	e76c      	b.n	8016430 <__ieee754_asinf+0x28>
 8016556:	ee10 3a10 	vmov	r3, s0
 801655a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801655e:	f023 030f 	bic.w	r3, r3, #15
 8016562:	ee07 3a10 	vmov	s14, r3
 8016566:	eea7 8a47 	vfms.f32	s16, s14, s14
 801656a:	ee70 7a07 	vadd.f32	s15, s0, s14
 801656e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016572:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8016576:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016594 <__ieee754_asinf+0x18c>
 801657a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801657e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8016582:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80165d0 <__ieee754_asinf+0x1c8>
 8016586:	eeb0 6a40 	vmov.f32	s12, s0
 801658a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801658e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016592:	e7aa      	b.n	80164ea <__ieee754_asinf+0xe2>
 8016594:	b33bbd2e 	.word	0xb33bbd2e
 8016598:	3fc90fdb 	.word	0x3fc90fdb
 801659c:	7149f2ca 	.word	0x7149f2ca
 80165a0:	3811ef08 	.word	0x3811ef08
 80165a4:	3a4f7f04 	.word	0x3a4f7f04
 80165a8:	3e2aaaab 	.word	0x3e2aaaab
 80165ac:	bd241146 	.word	0xbd241146
 80165b0:	3e4e0aa8 	.word	0x3e4e0aa8
 80165b4:	bea6b090 	.word	0xbea6b090
 80165b8:	3d9dc62e 	.word	0x3d9dc62e
 80165bc:	bf303361 	.word	0xbf303361
 80165c0:	4001572d 	.word	0x4001572d
 80165c4:	c019d139 	.word	0xc019d139
 80165c8:	3f799999 	.word	0x3f799999
 80165cc:	333bbd2e 	.word	0x333bbd2e
 80165d0:	3f490fdb 	.word	0x3f490fdb

080165d4 <__ieee754_atan2f>:
 80165d4:	ee10 2a90 	vmov	r2, s1
 80165d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80165dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80165e0:	b510      	push	{r4, lr}
 80165e2:	eef0 7a40 	vmov.f32	s15, s0
 80165e6:	dc06      	bgt.n	80165f6 <__ieee754_atan2f+0x22>
 80165e8:	ee10 0a10 	vmov	r0, s0
 80165ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80165f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80165f4:	dd04      	ble.n	8016600 <__ieee754_atan2f+0x2c>
 80165f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80165fa:	eeb0 0a67 	vmov.f32	s0, s15
 80165fe:	bd10      	pop	{r4, pc}
 8016600:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016604:	d103      	bne.n	801660e <__ieee754_atan2f+0x3a>
 8016606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801660a:	f000 bf83 	b.w	8017514 <atanf>
 801660e:	1794      	asrs	r4, r2, #30
 8016610:	f004 0402 	and.w	r4, r4, #2
 8016614:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016618:	b943      	cbnz	r3, 801662c <__ieee754_atan2f+0x58>
 801661a:	2c02      	cmp	r4, #2
 801661c:	d05e      	beq.n	80166dc <__ieee754_atan2f+0x108>
 801661e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80166f0 <__ieee754_atan2f+0x11c>
 8016622:	2c03      	cmp	r4, #3
 8016624:	bf08      	it	eq
 8016626:	eef0 7a47 	vmoveq.f32	s15, s14
 801662a:	e7e6      	b.n	80165fa <__ieee754_atan2f+0x26>
 801662c:	b941      	cbnz	r1, 8016640 <__ieee754_atan2f+0x6c>
 801662e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80166f4 <__ieee754_atan2f+0x120>
 8016632:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80166f8 <__ieee754_atan2f+0x124>
 8016636:	2800      	cmp	r0, #0
 8016638:	bfb8      	it	lt
 801663a:	eef0 7a40 	vmovlt.f32	s15, s0
 801663e:	e7dc      	b.n	80165fa <__ieee754_atan2f+0x26>
 8016640:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016644:	d110      	bne.n	8016668 <__ieee754_atan2f+0x94>
 8016646:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801664a:	f104 34ff 	add.w	r4, r4, #4294967295
 801664e:	d107      	bne.n	8016660 <__ieee754_atan2f+0x8c>
 8016650:	2c02      	cmp	r4, #2
 8016652:	d846      	bhi.n	80166e2 <__ieee754_atan2f+0x10e>
 8016654:	4b29      	ldr	r3, [pc, #164]	; (80166fc <__ieee754_atan2f+0x128>)
 8016656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801665a:	edd4 7a00 	vldr	s15, [r4]
 801665e:	e7cc      	b.n	80165fa <__ieee754_atan2f+0x26>
 8016660:	2c02      	cmp	r4, #2
 8016662:	d841      	bhi.n	80166e8 <__ieee754_atan2f+0x114>
 8016664:	4b26      	ldr	r3, [pc, #152]	; (8016700 <__ieee754_atan2f+0x12c>)
 8016666:	e7f6      	b.n	8016656 <__ieee754_atan2f+0x82>
 8016668:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801666c:	d0df      	beq.n	801662e <__ieee754_atan2f+0x5a>
 801666e:	1a5b      	subs	r3, r3, r1
 8016670:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8016674:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016678:	da1a      	bge.n	80166b0 <__ieee754_atan2f+0xdc>
 801667a:	2a00      	cmp	r2, #0
 801667c:	da01      	bge.n	8016682 <__ieee754_atan2f+0xae>
 801667e:	313c      	adds	r1, #60	; 0x3c
 8016680:	db19      	blt.n	80166b6 <__ieee754_atan2f+0xe2>
 8016682:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8016686:	f001 f819 	bl	80176bc <fabsf>
 801668a:	f000 ff43 	bl	8017514 <atanf>
 801668e:	eef0 7a40 	vmov.f32	s15, s0
 8016692:	2c01      	cmp	r4, #1
 8016694:	d012      	beq.n	80166bc <__ieee754_atan2f+0xe8>
 8016696:	2c02      	cmp	r4, #2
 8016698:	d017      	beq.n	80166ca <__ieee754_atan2f+0xf6>
 801669a:	2c00      	cmp	r4, #0
 801669c:	d0ad      	beq.n	80165fa <__ieee754_atan2f+0x26>
 801669e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8016704 <__ieee754_atan2f+0x130>
 80166a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80166a6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016708 <__ieee754_atan2f+0x134>
 80166aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80166ae:	e7a4      	b.n	80165fa <__ieee754_atan2f+0x26>
 80166b0:	eddf 7a10 	vldr	s15, [pc, #64]	; 80166f4 <__ieee754_atan2f+0x120>
 80166b4:	e7ed      	b.n	8016692 <__ieee754_atan2f+0xbe>
 80166b6:	eddf 7a15 	vldr	s15, [pc, #84]	; 801670c <__ieee754_atan2f+0x138>
 80166ba:	e7ea      	b.n	8016692 <__ieee754_atan2f+0xbe>
 80166bc:	ee17 3a90 	vmov	r3, s15
 80166c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80166c4:	ee07 3a90 	vmov	s15, r3
 80166c8:	e797      	b.n	80165fa <__ieee754_atan2f+0x26>
 80166ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8016704 <__ieee754_atan2f+0x130>
 80166ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80166d2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016708 <__ieee754_atan2f+0x134>
 80166d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80166da:	e78e      	b.n	80165fa <__ieee754_atan2f+0x26>
 80166dc:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016708 <__ieee754_atan2f+0x134>
 80166e0:	e78b      	b.n	80165fa <__ieee754_atan2f+0x26>
 80166e2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016710 <__ieee754_atan2f+0x13c>
 80166e6:	e788      	b.n	80165fa <__ieee754_atan2f+0x26>
 80166e8:	eddf 7a08 	vldr	s15, [pc, #32]	; 801670c <__ieee754_atan2f+0x138>
 80166ec:	e785      	b.n	80165fa <__ieee754_atan2f+0x26>
 80166ee:	bf00      	nop
 80166f0:	c0490fdb 	.word	0xc0490fdb
 80166f4:	3fc90fdb 	.word	0x3fc90fdb
 80166f8:	bfc90fdb 	.word	0xbfc90fdb
 80166fc:	0801aa10 	.word	0x0801aa10
 8016700:	0801aa1c 	.word	0x0801aa1c
 8016704:	33bbbd2e 	.word	0x33bbbd2e
 8016708:	40490fdb 	.word	0x40490fdb
 801670c:	00000000 	.word	0x00000000
 8016710:	3f490fdb 	.word	0x3f490fdb

08016714 <__ieee754_rem_pio2f>:
 8016714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016716:	ee10 6a10 	vmov	r6, s0
 801671a:	4b8e      	ldr	r3, [pc, #568]	; (8016954 <__ieee754_rem_pio2f+0x240>)
 801671c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8016720:	429d      	cmp	r5, r3
 8016722:	b087      	sub	sp, #28
 8016724:	eef0 7a40 	vmov.f32	s15, s0
 8016728:	4604      	mov	r4, r0
 801672a:	dc05      	bgt.n	8016738 <__ieee754_rem_pio2f+0x24>
 801672c:	2300      	movs	r3, #0
 801672e:	ed80 0a00 	vstr	s0, [r0]
 8016732:	6043      	str	r3, [r0, #4]
 8016734:	2000      	movs	r0, #0
 8016736:	e01a      	b.n	801676e <__ieee754_rem_pio2f+0x5a>
 8016738:	4b87      	ldr	r3, [pc, #540]	; (8016958 <__ieee754_rem_pio2f+0x244>)
 801673a:	429d      	cmp	r5, r3
 801673c:	dc46      	bgt.n	80167cc <__ieee754_rem_pio2f+0xb8>
 801673e:	2e00      	cmp	r6, #0
 8016740:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801695c <__ieee754_rem_pio2f+0x248>
 8016744:	4b86      	ldr	r3, [pc, #536]	; (8016960 <__ieee754_rem_pio2f+0x24c>)
 8016746:	f025 050f 	bic.w	r5, r5, #15
 801674a:	dd1f      	ble.n	801678c <__ieee754_rem_pio2f+0x78>
 801674c:	429d      	cmp	r5, r3
 801674e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016752:	d00e      	beq.n	8016772 <__ieee754_rem_pio2f+0x5e>
 8016754:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8016964 <__ieee754_rem_pio2f+0x250>
 8016758:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801675c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016760:	ed80 0a00 	vstr	s0, [r0]
 8016764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016768:	2001      	movs	r0, #1
 801676a:	edc4 7a01 	vstr	s15, [r4, #4]
 801676e:	b007      	add	sp, #28
 8016770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016772:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016968 <__ieee754_rem_pio2f+0x254>
 8016776:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801696c <__ieee754_rem_pio2f+0x258>
 801677a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801677e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016786:	edc0 6a00 	vstr	s13, [r0]
 801678a:	e7eb      	b.n	8016764 <__ieee754_rem_pio2f+0x50>
 801678c:	429d      	cmp	r5, r3
 801678e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016792:	d00e      	beq.n	80167b2 <__ieee754_rem_pio2f+0x9e>
 8016794:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8016964 <__ieee754_rem_pio2f+0x250>
 8016798:	ee37 0a87 	vadd.f32	s0, s15, s14
 801679c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80167a0:	ed80 0a00 	vstr	s0, [r0]
 80167a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80167a8:	f04f 30ff 	mov.w	r0, #4294967295
 80167ac:	edc4 7a01 	vstr	s15, [r4, #4]
 80167b0:	e7dd      	b.n	801676e <__ieee754_rem_pio2f+0x5a>
 80167b2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016968 <__ieee754_rem_pio2f+0x254>
 80167b6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801696c <__ieee754_rem_pio2f+0x258>
 80167ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80167be:	ee77 6a87 	vadd.f32	s13, s15, s14
 80167c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80167c6:	edc0 6a00 	vstr	s13, [r0]
 80167ca:	e7eb      	b.n	80167a4 <__ieee754_rem_pio2f+0x90>
 80167cc:	4b68      	ldr	r3, [pc, #416]	; (8016970 <__ieee754_rem_pio2f+0x25c>)
 80167ce:	429d      	cmp	r5, r3
 80167d0:	dc72      	bgt.n	80168b8 <__ieee754_rem_pio2f+0x1a4>
 80167d2:	f000 ff73 	bl	80176bc <fabsf>
 80167d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016974 <__ieee754_rem_pio2f+0x260>
 80167da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80167de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80167e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80167e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80167ea:	ee17 0a90 	vmov	r0, s15
 80167ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801695c <__ieee754_rem_pio2f+0x248>
 80167f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80167f6:	281f      	cmp	r0, #31
 80167f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8016964 <__ieee754_rem_pio2f+0x250>
 80167fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016800:	eeb1 6a47 	vneg.f32	s12, s14
 8016804:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016808:	ee16 2a90 	vmov	r2, s13
 801680c:	dc1c      	bgt.n	8016848 <__ieee754_rem_pio2f+0x134>
 801680e:	495a      	ldr	r1, [pc, #360]	; (8016978 <__ieee754_rem_pio2f+0x264>)
 8016810:	1e47      	subs	r7, r0, #1
 8016812:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8016816:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801681a:	428b      	cmp	r3, r1
 801681c:	d014      	beq.n	8016848 <__ieee754_rem_pio2f+0x134>
 801681e:	6022      	str	r2, [r4, #0]
 8016820:	ed94 7a00 	vldr	s14, [r4]
 8016824:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016828:	2e00      	cmp	r6, #0
 801682a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801682e:	ed84 0a01 	vstr	s0, [r4, #4]
 8016832:	da9c      	bge.n	801676e <__ieee754_rem_pio2f+0x5a>
 8016834:	eeb1 7a47 	vneg.f32	s14, s14
 8016838:	eeb1 0a40 	vneg.f32	s0, s0
 801683c:	ed84 7a00 	vstr	s14, [r4]
 8016840:	ed84 0a01 	vstr	s0, [r4, #4]
 8016844:	4240      	negs	r0, r0
 8016846:	e792      	b.n	801676e <__ieee754_rem_pio2f+0x5a>
 8016848:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801684c:	15eb      	asrs	r3, r5, #23
 801684e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8016852:	2d08      	cmp	r5, #8
 8016854:	dde3      	ble.n	801681e <__ieee754_rem_pio2f+0x10a>
 8016856:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016968 <__ieee754_rem_pio2f+0x254>
 801685a:	eef0 6a40 	vmov.f32	s13, s0
 801685e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016862:	ee30 0a66 	vsub.f32	s0, s0, s13
 8016866:	eea6 0a27 	vfma.f32	s0, s12, s15
 801686a:	eddf 7a40 	vldr	s15, [pc, #256]	; 801696c <__ieee754_rem_pio2f+0x258>
 801686e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8016872:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8016876:	eef0 7a40 	vmov.f32	s15, s0
 801687a:	ee15 2a90 	vmov	r2, s11
 801687e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016882:	1a5b      	subs	r3, r3, r1
 8016884:	2b19      	cmp	r3, #25
 8016886:	dc04      	bgt.n	8016892 <__ieee754_rem_pio2f+0x17e>
 8016888:	edc4 5a00 	vstr	s11, [r4]
 801688c:	eeb0 0a66 	vmov.f32	s0, s13
 8016890:	e7c6      	b.n	8016820 <__ieee754_rem_pio2f+0x10c>
 8016892:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801697c <__ieee754_rem_pio2f+0x268>
 8016896:	eeb0 0a66 	vmov.f32	s0, s13
 801689a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801689e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80168a2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016980 <__ieee754_rem_pio2f+0x26c>
 80168a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80168aa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80168ae:	ee30 7a67 	vsub.f32	s14, s0, s15
 80168b2:	ed84 7a00 	vstr	s14, [r4]
 80168b6:	e7b3      	b.n	8016820 <__ieee754_rem_pio2f+0x10c>
 80168b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80168bc:	db06      	blt.n	80168cc <__ieee754_rem_pio2f+0x1b8>
 80168be:	ee70 7a40 	vsub.f32	s15, s0, s0
 80168c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80168c6:	edc0 7a00 	vstr	s15, [r0]
 80168ca:	e733      	b.n	8016734 <__ieee754_rem_pio2f+0x20>
 80168cc:	15ea      	asrs	r2, r5, #23
 80168ce:	3a86      	subs	r2, #134	; 0x86
 80168d0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80168d4:	ee07 3a90 	vmov	s15, r3
 80168d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80168dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016984 <__ieee754_rem_pio2f+0x270>
 80168e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168e8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80168ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80168f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80168f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168fc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016900:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016904:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690c:	edcd 7a05 	vstr	s15, [sp, #20]
 8016910:	d11e      	bne.n	8016950 <__ieee754_rem_pio2f+0x23c>
 8016912:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8016916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691a:	bf14      	ite	ne
 801691c:	2302      	movne	r3, #2
 801691e:	2301      	moveq	r3, #1
 8016920:	4919      	ldr	r1, [pc, #100]	; (8016988 <__ieee754_rem_pio2f+0x274>)
 8016922:	9101      	str	r1, [sp, #4]
 8016924:	2102      	movs	r1, #2
 8016926:	9100      	str	r1, [sp, #0]
 8016928:	a803      	add	r0, sp, #12
 801692a:	4621      	mov	r1, r4
 801692c:	f000 f892 	bl	8016a54 <__kernel_rem_pio2f>
 8016930:	2e00      	cmp	r6, #0
 8016932:	f6bf af1c 	bge.w	801676e <__ieee754_rem_pio2f+0x5a>
 8016936:	edd4 7a00 	vldr	s15, [r4]
 801693a:	eef1 7a67 	vneg.f32	s15, s15
 801693e:	edc4 7a00 	vstr	s15, [r4]
 8016942:	edd4 7a01 	vldr	s15, [r4, #4]
 8016946:	eef1 7a67 	vneg.f32	s15, s15
 801694a:	edc4 7a01 	vstr	s15, [r4, #4]
 801694e:	e779      	b.n	8016844 <__ieee754_rem_pio2f+0x130>
 8016950:	2303      	movs	r3, #3
 8016952:	e7e5      	b.n	8016920 <__ieee754_rem_pio2f+0x20c>
 8016954:	3f490fd8 	.word	0x3f490fd8
 8016958:	4016cbe3 	.word	0x4016cbe3
 801695c:	3fc90f80 	.word	0x3fc90f80
 8016960:	3fc90fd0 	.word	0x3fc90fd0
 8016964:	37354443 	.word	0x37354443
 8016968:	37354400 	.word	0x37354400
 801696c:	2e85a308 	.word	0x2e85a308
 8016970:	43490f80 	.word	0x43490f80
 8016974:	3f22f984 	.word	0x3f22f984
 8016978:	0801aa28 	.word	0x0801aa28
 801697c:	2e85a300 	.word	0x2e85a300
 8016980:	248d3132 	.word	0x248d3132
 8016984:	43800000 	.word	0x43800000
 8016988:	0801aaa8 	.word	0x0801aaa8

0801698c <__ieee754_sqrtf>:
 801698c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016990:	4770      	bx	lr
	...

08016994 <__kernel_cosf>:
 8016994:	ee10 3a10 	vmov	r3, s0
 8016998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801699c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80169a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80169a4:	da05      	bge.n	80169b2 <__kernel_cosf+0x1e>
 80169a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80169aa:	ee17 2a90 	vmov	r2, s15
 80169ae:	2a00      	cmp	r2, #0
 80169b0:	d03d      	beq.n	8016a2e <__kernel_cosf+0x9a>
 80169b2:	ee60 5a00 	vmul.f32	s11, s0, s0
 80169b6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016a34 <__kernel_cosf+0xa0>
 80169ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016a38 <__kernel_cosf+0xa4>
 80169be:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016a3c <__kernel_cosf+0xa8>
 80169c2:	4a1f      	ldr	r2, [pc, #124]	; (8016a40 <__kernel_cosf+0xac>)
 80169c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80169c8:	4293      	cmp	r3, r2
 80169ca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8016a44 <__kernel_cosf+0xb0>
 80169ce:	eee7 7a25 	vfma.f32	s15, s14, s11
 80169d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016a48 <__kernel_cosf+0xb4>
 80169d6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80169da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016a4c <__kernel_cosf+0xb8>
 80169de:	eee7 7a25 	vfma.f32	s15, s14, s11
 80169e2:	eeb0 7a66 	vmov.f32	s14, s13
 80169e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80169ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80169ee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80169f2:	ee67 6a25 	vmul.f32	s13, s14, s11
 80169f6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80169fa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80169fe:	dc04      	bgt.n	8016a0a <__kernel_cosf+0x76>
 8016a00:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016a04:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016a08:	4770      	bx	lr
 8016a0a:	4a11      	ldr	r2, [pc, #68]	; (8016a50 <__kernel_cosf+0xbc>)
 8016a0c:	4293      	cmp	r3, r2
 8016a0e:	bfda      	itte	le
 8016a10:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8016a14:	ee06 3a90 	vmovle	s13, r3
 8016a18:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016a1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016a20:	ee36 0a66 	vsub.f32	s0, s12, s13
 8016a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016a2c:	4770      	bx	lr
 8016a2e:	eeb0 0a46 	vmov.f32	s0, s12
 8016a32:	4770      	bx	lr
 8016a34:	ad47d74e 	.word	0xad47d74e
 8016a38:	310f74f6 	.word	0x310f74f6
 8016a3c:	3d2aaaab 	.word	0x3d2aaaab
 8016a40:	3e999999 	.word	0x3e999999
 8016a44:	b493f27c 	.word	0xb493f27c
 8016a48:	37d00d01 	.word	0x37d00d01
 8016a4c:	bab60b61 	.word	0xbab60b61
 8016a50:	3f480000 	.word	0x3f480000

08016a54 <__kernel_rem_pio2f>:
 8016a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a58:	ed2d 8b04 	vpush	{d8-d9}
 8016a5c:	b0d7      	sub	sp, #348	; 0x15c
 8016a5e:	4616      	mov	r6, r2
 8016a60:	4698      	mov	r8, r3
 8016a62:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016a64:	4bbb      	ldr	r3, [pc, #748]	; (8016d54 <__kernel_rem_pio2f+0x300>)
 8016a66:	9001      	str	r0, [sp, #4]
 8016a68:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016a6c:	1d33      	adds	r3, r6, #4
 8016a6e:	460d      	mov	r5, r1
 8016a70:	f108 39ff 	add.w	r9, r8, #4294967295
 8016a74:	db29      	blt.n	8016aca <__kernel_rem_pio2f+0x76>
 8016a76:	1ef1      	subs	r1, r6, #3
 8016a78:	bf48      	it	mi
 8016a7a:	1d31      	addmi	r1, r6, #4
 8016a7c:	10c9      	asrs	r1, r1, #3
 8016a7e:	1c4c      	adds	r4, r1, #1
 8016a80:	00e3      	lsls	r3, r4, #3
 8016a82:	9302      	str	r3, [sp, #8]
 8016a84:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016a86:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016a8a:	eba1 0009 	sub.w	r0, r1, r9
 8016a8e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8016a92:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8016a96:	eb07 0c09 	add.w	ip, r7, r9
 8016a9a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	4563      	cmp	r3, ip
 8016aa2:	dd14      	ble.n	8016ace <__kernel_rem_pio2f+0x7a>
 8016aa4:	ab1a      	add	r3, sp, #104	; 0x68
 8016aa6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016aaa:	46cc      	mov	ip, r9
 8016aac:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016ab0:	f1c8 0b01 	rsb	fp, r8, #1
 8016ab4:	eb0b 020c 	add.w	r2, fp, ip
 8016ab8:	4297      	cmp	r7, r2
 8016aba:	db27      	blt.n	8016b0c <__kernel_rem_pio2f+0xb8>
 8016abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016ac0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	2200      	movs	r2, #0
 8016ac8:	e016      	b.n	8016af8 <__kernel_rem_pio2f+0xa4>
 8016aca:	2100      	movs	r1, #0
 8016acc:	e7d7      	b.n	8016a7e <__kernel_rem_pio2f+0x2a>
 8016ace:	42d8      	cmn	r0, r3
 8016ad0:	bf5d      	ittte	pl
 8016ad2:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8016ad6:	ee07 2a90 	vmovpl	s15, r2
 8016ada:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016ade:	eef0 7a47 	vmovmi.f32	s15, s14
 8016ae2:	ecea 7a01 	vstmia	sl!, {s15}
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	e7da      	b.n	8016aa0 <__kernel_rem_pio2f+0x4c>
 8016aea:	ecfe 6a01 	vldmia	lr!, {s13}
 8016aee:	ed90 7a00 	vldr	s14, [r0]
 8016af2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016af6:	3201      	adds	r2, #1
 8016af8:	454a      	cmp	r2, r9
 8016afa:	f1a0 0004 	sub.w	r0, r0, #4
 8016afe:	ddf4      	ble.n	8016aea <__kernel_rem_pio2f+0x96>
 8016b00:	ecea 7a01 	vstmia	sl!, {s15}
 8016b04:	3304      	adds	r3, #4
 8016b06:	f10c 0c01 	add.w	ip, ip, #1
 8016b0a:	e7d3      	b.n	8016ab4 <__kernel_rem_pio2f+0x60>
 8016b0c:	ab06      	add	r3, sp, #24
 8016b0e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8016b12:	9304      	str	r3, [sp, #16]
 8016b14:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016b16:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016d60 <__kernel_rem_pio2f+0x30c>
 8016b1a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016d5c <__kernel_rem_pio2f+0x308>
 8016b1e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016b22:	9303      	str	r3, [sp, #12]
 8016b24:	46ba      	mov	sl, r7
 8016b26:	ab56      	add	r3, sp, #344	; 0x158
 8016b28:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016b2c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016b30:	ab06      	add	r3, sp, #24
 8016b32:	4618      	mov	r0, r3
 8016b34:	4652      	mov	r2, sl
 8016b36:	2a00      	cmp	r2, #0
 8016b38:	dc51      	bgt.n	8016bde <__kernel_rem_pio2f+0x18a>
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	9305      	str	r3, [sp, #20]
 8016b3e:	f000 fe0d 	bl	801775c <scalbnf>
 8016b42:	eeb0 8a40 	vmov.f32	s16, s0
 8016b46:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016b4a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016b4e:	f000 fdbd 	bl	80176cc <floorf>
 8016b52:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016b56:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016b5a:	2c00      	cmp	r4, #0
 8016b5c:	9b05      	ldr	r3, [sp, #20]
 8016b5e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016b62:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016b66:	edcd 7a00 	vstr	s15, [sp]
 8016b6a:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016b6e:	dd4b      	ble.n	8016c08 <__kernel_rem_pio2f+0x1b4>
 8016b70:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016b74:	aa06      	add	r2, sp, #24
 8016b76:	f1c4 0e08 	rsb	lr, r4, #8
 8016b7a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016b7e:	ee17 1a90 	vmov	r1, s15
 8016b82:	fa42 f00e 	asr.w	r0, r2, lr
 8016b86:	4401      	add	r1, r0
 8016b88:	9100      	str	r1, [sp, #0]
 8016b8a:	fa00 f00e 	lsl.w	r0, r0, lr
 8016b8e:	a906      	add	r1, sp, #24
 8016b90:	1a12      	subs	r2, r2, r0
 8016b92:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016b96:	f1c4 0007 	rsb	r0, r4, #7
 8016b9a:	fa42 fb00 	asr.w	fp, r2, r0
 8016b9e:	f1bb 0f00 	cmp.w	fp, #0
 8016ba2:	dd43      	ble.n	8016c2c <__kernel_rem_pio2f+0x1d8>
 8016ba4:	9a00      	ldr	r2, [sp, #0]
 8016ba6:	f04f 0e00 	mov.w	lr, #0
 8016baa:	3201      	adds	r2, #1
 8016bac:	9200      	str	r2, [sp, #0]
 8016bae:	4670      	mov	r0, lr
 8016bb0:	45f2      	cmp	sl, lr
 8016bb2:	dc6c      	bgt.n	8016c8e <__kernel_rem_pio2f+0x23a>
 8016bb4:	2c00      	cmp	r4, #0
 8016bb6:	dd04      	ble.n	8016bc2 <__kernel_rem_pio2f+0x16e>
 8016bb8:	2c01      	cmp	r4, #1
 8016bba:	d079      	beq.n	8016cb0 <__kernel_rem_pio2f+0x25c>
 8016bbc:	2c02      	cmp	r4, #2
 8016bbe:	f000 8082 	beq.w	8016cc6 <__kernel_rem_pio2f+0x272>
 8016bc2:	f1bb 0f02 	cmp.w	fp, #2
 8016bc6:	d131      	bne.n	8016c2c <__kernel_rem_pio2f+0x1d8>
 8016bc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016bcc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016bd0:	b360      	cbz	r0, 8016c2c <__kernel_rem_pio2f+0x1d8>
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	f000 fdc2 	bl	801775c <scalbnf>
 8016bd8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016bdc:	e026      	b.n	8016c2c <__kernel_rem_pio2f+0x1d8>
 8016bde:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016be2:	3a01      	subs	r2, #1
 8016be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016be8:	a942      	add	r1, sp, #264	; 0x108
 8016bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016bee:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8016bf2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016bf6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016bfa:	eca0 0a01 	vstmia	r0!, {s0}
 8016bfe:	ed9c 0a00 	vldr	s0, [ip]
 8016c02:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016c06:	e796      	b.n	8016b36 <__kernel_rem_pio2f+0xe2>
 8016c08:	d107      	bne.n	8016c1a <__kernel_rem_pio2f+0x1c6>
 8016c0a:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016c0e:	a906      	add	r1, sp, #24
 8016c10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016c14:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016c18:	e7c1      	b.n	8016b9e <__kernel_rem_pio2f+0x14a>
 8016c1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016c1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c26:	da2f      	bge.n	8016c88 <__kernel_rem_pio2f+0x234>
 8016c28:	f04f 0b00 	mov.w	fp, #0
 8016c2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c34:	f040 8098 	bne.w	8016d68 <__kernel_rem_pio2f+0x314>
 8016c38:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016c3c:	469c      	mov	ip, r3
 8016c3e:	2200      	movs	r2, #0
 8016c40:	45bc      	cmp	ip, r7
 8016c42:	da48      	bge.n	8016cd6 <__kernel_rem_pio2f+0x282>
 8016c44:	2a00      	cmp	r2, #0
 8016c46:	d05f      	beq.n	8016d08 <__kernel_rem_pio2f+0x2b4>
 8016c48:	aa06      	add	r2, sp, #24
 8016c4a:	3c08      	subs	r4, #8
 8016c4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016c50:	2900      	cmp	r1, #0
 8016c52:	d07d      	beq.n	8016d50 <__kernel_rem_pio2f+0x2fc>
 8016c54:	4620      	mov	r0, r4
 8016c56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016c5a:	9301      	str	r3, [sp, #4]
 8016c5c:	f000 fd7e 	bl	801775c <scalbnf>
 8016c60:	9b01      	ldr	r3, [sp, #4]
 8016c62:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016d60 <__kernel_rem_pio2f+0x30c>
 8016c66:	4619      	mov	r1, r3
 8016c68:	2900      	cmp	r1, #0
 8016c6a:	f280 80af 	bge.w	8016dcc <__kernel_rem_pio2f+0x378>
 8016c6e:	4618      	mov	r0, r3
 8016c70:	2400      	movs	r4, #0
 8016c72:	2800      	cmp	r0, #0
 8016c74:	f2c0 80d0 	blt.w	8016e18 <__kernel_rem_pio2f+0x3c4>
 8016c78:	a942      	add	r1, sp, #264	; 0x108
 8016c7a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016c7e:	4a36      	ldr	r2, [pc, #216]	; (8016d58 <__kernel_rem_pio2f+0x304>)
 8016c80:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016c84:	2100      	movs	r1, #0
 8016c86:	e0bb      	b.n	8016e00 <__kernel_rem_pio2f+0x3ac>
 8016c88:	f04f 0b02 	mov.w	fp, #2
 8016c8c:	e78a      	b.n	8016ba4 <__kernel_rem_pio2f+0x150>
 8016c8e:	681a      	ldr	r2, [r3, #0]
 8016c90:	b948      	cbnz	r0, 8016ca6 <__kernel_rem_pio2f+0x252>
 8016c92:	b11a      	cbz	r2, 8016c9c <__kernel_rem_pio2f+0x248>
 8016c94:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016c98:	601a      	str	r2, [r3, #0]
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	f10e 0e01 	add.w	lr, lr, #1
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	4610      	mov	r0, r2
 8016ca4:	e784      	b.n	8016bb0 <__kernel_rem_pio2f+0x15c>
 8016ca6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016caa:	601a      	str	r2, [r3, #0]
 8016cac:	4602      	mov	r2, r0
 8016cae:	e7f5      	b.n	8016c9c <__kernel_rem_pio2f+0x248>
 8016cb0:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016cb4:	ab06      	add	r3, sp, #24
 8016cb6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016cbe:	aa06      	add	r2, sp, #24
 8016cc0:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8016cc4:	e77d      	b.n	8016bc2 <__kernel_rem_pio2f+0x16e>
 8016cc6:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016cca:	ab06      	add	r3, sp, #24
 8016ccc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016cd4:	e7f3      	b.n	8016cbe <__kernel_rem_pio2f+0x26a>
 8016cd6:	a906      	add	r1, sp, #24
 8016cd8:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016cdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016ce0:	4302      	orrs	r2, r0
 8016ce2:	e7ad      	b.n	8016c40 <__kernel_rem_pio2f+0x1ec>
 8016ce4:	3001      	adds	r0, #1
 8016ce6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	d0fa      	beq.n	8016ce4 <__kernel_rem_pio2f+0x290>
 8016cee:	a91a      	add	r1, sp, #104	; 0x68
 8016cf0:	eb0a 0208 	add.w	r2, sl, r8
 8016cf4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016cf8:	f10a 0301 	add.w	r3, sl, #1
 8016cfc:	eb0a 0100 	add.w	r1, sl, r0
 8016d00:	4299      	cmp	r1, r3
 8016d02:	da04      	bge.n	8016d0e <__kernel_rem_pio2f+0x2ba>
 8016d04:	468a      	mov	sl, r1
 8016d06:	e70e      	b.n	8016b26 <__kernel_rem_pio2f+0xd2>
 8016d08:	9b04      	ldr	r3, [sp, #16]
 8016d0a:	2001      	movs	r0, #1
 8016d0c:	e7eb      	b.n	8016ce6 <__kernel_rem_pio2f+0x292>
 8016d0e:	9803      	ldr	r0, [sp, #12]
 8016d10:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016d14:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016d18:	9000      	str	r0, [sp, #0]
 8016d1a:	ee07 0a90 	vmov	s15, r0
 8016d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d22:	2000      	movs	r0, #0
 8016d24:	ece2 7a01 	vstmia	r2!, {s15}
 8016d28:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016d2c:	4696      	mov	lr, r2
 8016d2e:	4548      	cmp	r0, r9
 8016d30:	dd06      	ble.n	8016d40 <__kernel_rem_pio2f+0x2ec>
 8016d32:	a842      	add	r0, sp, #264	; 0x108
 8016d34:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016d38:	edc0 7a00 	vstr	s15, [r0]
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	e7df      	b.n	8016d00 <__kernel_rem_pio2f+0x2ac>
 8016d40:	ecfc 6a01 	vldmia	ip!, {s13}
 8016d44:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016d48:	3001      	adds	r0, #1
 8016d4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016d4e:	e7ee      	b.n	8016d2e <__kernel_rem_pio2f+0x2da>
 8016d50:	3b01      	subs	r3, #1
 8016d52:	e779      	b.n	8016c48 <__kernel_rem_pio2f+0x1f4>
 8016d54:	0801adec 	.word	0x0801adec
 8016d58:	0801adc0 	.word	0x0801adc0
 8016d5c:	43800000 	.word	0x43800000
 8016d60:	3b800000 	.word	0x3b800000
 8016d64:	00000000 	.word	0x00000000
 8016d68:	9b02      	ldr	r3, [sp, #8]
 8016d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8016d6e:	1b98      	subs	r0, r3, r6
 8016d70:	f000 fcf4 	bl	801775c <scalbnf>
 8016d74:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016d5c <__kernel_rem_pio2f+0x308>
 8016d78:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d80:	db1b      	blt.n	8016dba <__kernel_rem_pio2f+0x366>
 8016d82:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016d60 <__kernel_rem_pio2f+0x30c>
 8016d86:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d8a:	aa06      	add	r2, sp, #24
 8016d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d90:	a906      	add	r1, sp, #24
 8016d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d96:	3408      	adds	r4, #8
 8016d98:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016da0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016da4:	ee10 3a10 	vmov	r3, s0
 8016da8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016dac:	ee17 2a90 	vmov	r2, s15
 8016db0:	f10a 0301 	add.w	r3, sl, #1
 8016db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016db8:	e74c      	b.n	8016c54 <__kernel_rem_pio2f+0x200>
 8016dba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016dbe:	aa06      	add	r2, sp, #24
 8016dc0:	ee10 3a10 	vmov	r3, s0
 8016dc4:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016dc8:	4653      	mov	r3, sl
 8016dca:	e743      	b.n	8016c54 <__kernel_rem_pio2f+0x200>
 8016dcc:	aa42      	add	r2, sp, #264	; 0x108
 8016dce:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016dd2:	aa06      	add	r2, sp, #24
 8016dd4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016dd8:	9201      	str	r2, [sp, #4]
 8016dda:	ee07 2a90 	vmov	s15, r2
 8016dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016de2:	3901      	subs	r1, #1
 8016de4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016de8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016dec:	edc0 7a00 	vstr	s15, [r0]
 8016df0:	e73a      	b.n	8016c68 <__kernel_rem_pio2f+0x214>
 8016df2:	ecf2 6a01 	vldmia	r2!, {s13}
 8016df6:	ecb6 7a01 	vldmia	r6!, {s14}
 8016dfa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016dfe:	3101      	adds	r1, #1
 8016e00:	42b9      	cmp	r1, r7
 8016e02:	dc01      	bgt.n	8016e08 <__kernel_rem_pio2f+0x3b4>
 8016e04:	428c      	cmp	r4, r1
 8016e06:	daf4      	bge.n	8016df2 <__kernel_rem_pio2f+0x39e>
 8016e08:	aa56      	add	r2, sp, #344	; 0x158
 8016e0a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016e0e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016e12:	3801      	subs	r0, #1
 8016e14:	3401      	adds	r4, #1
 8016e16:	e72c      	b.n	8016c72 <__kernel_rem_pio2f+0x21e>
 8016e18:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e1a:	2a02      	cmp	r2, #2
 8016e1c:	dc0a      	bgt.n	8016e34 <__kernel_rem_pio2f+0x3e0>
 8016e1e:	2a00      	cmp	r2, #0
 8016e20:	dc61      	bgt.n	8016ee6 <__kernel_rem_pio2f+0x492>
 8016e22:	d03c      	beq.n	8016e9e <__kernel_rem_pio2f+0x44a>
 8016e24:	9b00      	ldr	r3, [sp, #0]
 8016e26:	f003 0007 	and.w	r0, r3, #7
 8016e2a:	b057      	add	sp, #348	; 0x15c
 8016e2c:	ecbd 8b04 	vpop	{d8-d9}
 8016e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e34:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016e36:	2a03      	cmp	r2, #3
 8016e38:	d1f4      	bne.n	8016e24 <__kernel_rem_pio2f+0x3d0>
 8016e3a:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e3c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016e40:	4608      	mov	r0, r1
 8016e42:	461c      	mov	r4, r3
 8016e44:	2c00      	cmp	r4, #0
 8016e46:	f1a0 0004 	sub.w	r0, r0, #4
 8016e4a:	dc59      	bgt.n	8016f00 <__kernel_rem_pio2f+0x4ac>
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	2801      	cmp	r0, #1
 8016e50:	f1a1 0104 	sub.w	r1, r1, #4
 8016e54:	dc64      	bgt.n	8016f20 <__kernel_rem_pio2f+0x4cc>
 8016e56:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016e5a:	2b01      	cmp	r3, #1
 8016e5c:	dc70      	bgt.n	8016f40 <__kernel_rem_pio2f+0x4ec>
 8016e5e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016e62:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016e66:	f1bb 0f00 	cmp.w	fp, #0
 8016e6a:	d172      	bne.n	8016f52 <__kernel_rem_pio2f+0x4fe>
 8016e6c:	edc5 6a00 	vstr	s13, [r5]
 8016e70:	ed85 7a01 	vstr	s14, [r5, #4]
 8016e74:	edc5 7a02 	vstr	s15, [r5, #8]
 8016e78:	e7d4      	b.n	8016e24 <__kernel_rem_pio2f+0x3d0>
 8016e7a:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e7c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016e80:	ed91 7a00 	vldr	s14, [r1]
 8016e84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e88:	3b01      	subs	r3, #1
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	daf5      	bge.n	8016e7a <__kernel_rem_pio2f+0x426>
 8016e8e:	f1bb 0f00 	cmp.w	fp, #0
 8016e92:	d001      	beq.n	8016e98 <__kernel_rem_pio2f+0x444>
 8016e94:	eef1 7a67 	vneg.f32	s15, s15
 8016e98:	edc5 7a00 	vstr	s15, [r5]
 8016e9c:	e7c2      	b.n	8016e24 <__kernel_rem_pio2f+0x3d0>
 8016e9e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016ea2:	e7f2      	b.n	8016e8a <__kernel_rem_pio2f+0x436>
 8016ea4:	aa2e      	add	r2, sp, #184	; 0xb8
 8016ea6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016eaa:	edd0 7a00 	vldr	s15, [r0]
 8016eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016eb2:	3901      	subs	r1, #1
 8016eb4:	2900      	cmp	r1, #0
 8016eb6:	daf5      	bge.n	8016ea4 <__kernel_rem_pio2f+0x450>
 8016eb8:	f1bb 0f00 	cmp.w	fp, #0
 8016ebc:	d017      	beq.n	8016eee <__kernel_rem_pio2f+0x49a>
 8016ebe:	eef1 7a47 	vneg.f32	s15, s14
 8016ec2:	edc5 7a00 	vstr	s15, [r5]
 8016ec6:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ece:	a82f      	add	r0, sp, #188	; 0xbc
 8016ed0:	2101      	movs	r1, #1
 8016ed2:	428b      	cmp	r3, r1
 8016ed4:	da0e      	bge.n	8016ef4 <__kernel_rem_pio2f+0x4a0>
 8016ed6:	f1bb 0f00 	cmp.w	fp, #0
 8016eda:	d001      	beq.n	8016ee0 <__kernel_rem_pio2f+0x48c>
 8016edc:	eef1 7a67 	vneg.f32	s15, s15
 8016ee0:	edc5 7a01 	vstr	s15, [r5, #4]
 8016ee4:	e79e      	b.n	8016e24 <__kernel_rem_pio2f+0x3d0>
 8016ee6:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016d64 <__kernel_rem_pio2f+0x310>
 8016eea:	4619      	mov	r1, r3
 8016eec:	e7e2      	b.n	8016eb4 <__kernel_rem_pio2f+0x460>
 8016eee:	eef0 7a47 	vmov.f32	s15, s14
 8016ef2:	e7e6      	b.n	8016ec2 <__kernel_rem_pio2f+0x46e>
 8016ef4:	ecb0 7a01 	vldmia	r0!, {s14}
 8016ef8:	3101      	adds	r1, #1
 8016efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016efe:	e7e8      	b.n	8016ed2 <__kernel_rem_pio2f+0x47e>
 8016f00:	edd0 7a00 	vldr	s15, [r0]
 8016f04:	edd0 6a01 	vldr	s13, [r0, #4]
 8016f08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016f0c:	3c01      	subs	r4, #1
 8016f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f12:	ed80 7a00 	vstr	s14, [r0]
 8016f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f1a:	edc0 7a01 	vstr	s15, [r0, #4]
 8016f1e:	e791      	b.n	8016e44 <__kernel_rem_pio2f+0x3f0>
 8016f20:	edd1 7a00 	vldr	s15, [r1]
 8016f24:	edd1 6a01 	vldr	s13, [r1, #4]
 8016f28:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016f2c:	3801      	subs	r0, #1
 8016f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f32:	ed81 7a00 	vstr	s14, [r1]
 8016f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016f3a:	edc1 7a01 	vstr	s15, [r1, #4]
 8016f3e:	e786      	b.n	8016e4e <__kernel_rem_pio2f+0x3fa>
 8016f40:	aa2e      	add	r2, sp, #184	; 0xb8
 8016f42:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016f46:	ed91 7a00 	vldr	s14, [r1]
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f50:	e783      	b.n	8016e5a <__kernel_rem_pio2f+0x406>
 8016f52:	eef1 6a66 	vneg.f32	s13, s13
 8016f56:	eeb1 7a47 	vneg.f32	s14, s14
 8016f5a:	edc5 6a00 	vstr	s13, [r5]
 8016f5e:	ed85 7a01 	vstr	s14, [r5, #4]
 8016f62:	eef1 7a67 	vneg.f32	s15, s15
 8016f66:	e785      	b.n	8016e74 <__kernel_rem_pio2f+0x420>

08016f68 <__kernel_sinf>:
 8016f68:	ee10 3a10 	vmov	r3, s0
 8016f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016f70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016f74:	da04      	bge.n	8016f80 <__kernel_sinf+0x18>
 8016f76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016f7a:	ee17 3a90 	vmov	r3, s15
 8016f7e:	b35b      	cbz	r3, 8016fd8 <__kernel_sinf+0x70>
 8016f80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016f84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016fdc <__kernel_sinf+0x74>
 8016f88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016fe0 <__kernel_sinf+0x78>
 8016f8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016f90:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016fe4 <__kernel_sinf+0x7c>
 8016f94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016fe8 <__kernel_sinf+0x80>
 8016f9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016fa0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016fec <__kernel_sinf+0x84>
 8016fa4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016fa8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016fac:	b930      	cbnz	r0, 8016fbc <__kernel_sinf+0x54>
 8016fae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016ff0 <__kernel_sinf+0x88>
 8016fb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016fb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016fba:	4770      	bx	lr
 8016fbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016fc0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016fc4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016fc8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016fcc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016ff4 <__kernel_sinf+0x8c>
 8016fd0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016fd4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016fd8:	4770      	bx	lr
 8016fda:	bf00      	nop
 8016fdc:	2f2ec9d3 	.word	0x2f2ec9d3
 8016fe0:	b2d72f34 	.word	0xb2d72f34
 8016fe4:	3638ef1b 	.word	0x3638ef1b
 8016fe8:	b9500d01 	.word	0xb9500d01
 8016fec:	3c088889 	.word	0x3c088889
 8016ff0:	be2aaaab 	.word	0xbe2aaaab
 8016ff4:	3e2aaaab 	.word	0x3e2aaaab

08016ff8 <__kernel_tanf>:
 8016ff8:	b508      	push	{r3, lr}
 8016ffa:	ee10 3a10 	vmov	r3, s0
 8016ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017002:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8017006:	eef0 7a40 	vmov.f32	s15, s0
 801700a:	da17      	bge.n	801703c <__kernel_tanf+0x44>
 801700c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8017010:	ee17 1a10 	vmov	r1, s14
 8017014:	bb41      	cbnz	r1, 8017068 <__kernel_tanf+0x70>
 8017016:	1c43      	adds	r3, r0, #1
 8017018:	4313      	orrs	r3, r2
 801701a:	d108      	bne.n	801702e <__kernel_tanf+0x36>
 801701c:	f000 fb4e 	bl	80176bc <fabsf>
 8017020:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017024:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017028:	eeb0 0a67 	vmov.f32	s0, s15
 801702c:	bd08      	pop	{r3, pc}
 801702e:	2801      	cmp	r0, #1
 8017030:	d0fa      	beq.n	8017028 <__kernel_tanf+0x30>
 8017032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017036:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801703a:	e7f5      	b.n	8017028 <__kernel_tanf+0x30>
 801703c:	494d      	ldr	r1, [pc, #308]	; (8017174 <__kernel_tanf+0x17c>)
 801703e:	428a      	cmp	r2, r1
 8017040:	db12      	blt.n	8017068 <__kernel_tanf+0x70>
 8017042:	2b00      	cmp	r3, #0
 8017044:	bfb8      	it	lt
 8017046:	eef1 7a40 	vneglt.f32	s15, s0
 801704a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8017178 <__kernel_tanf+0x180>
 801704e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017052:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801717c <__kernel_tanf+0x184>
 8017056:	bfb8      	it	lt
 8017058:	eef1 0a60 	vneglt.f32	s1, s1
 801705c:	ee70 0a60 	vsub.f32	s1, s0, s1
 8017060:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8017064:	eddf 0a46 	vldr	s1, [pc, #280]	; 8017180 <__kernel_tanf+0x188>
 8017068:	eddf 5a46 	vldr	s11, [pc, #280]	; 8017184 <__kernel_tanf+0x18c>
 801706c:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8017188 <__kernel_tanf+0x190>
 8017070:	ed9f 5a46 	vldr	s10, [pc, #280]	; 801718c <__kernel_tanf+0x194>
 8017074:	493f      	ldr	r1, [pc, #252]	; (8017174 <__kernel_tanf+0x17c>)
 8017076:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801707a:	428a      	cmp	r2, r1
 801707c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017080:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017084:	eddf 5a42 	vldr	s11, [pc, #264]	; 8017190 <__kernel_tanf+0x198>
 8017088:	eee6 5a07 	vfma.f32	s11, s12, s14
 801708c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8017194 <__kernel_tanf+0x19c>
 8017090:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017094:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017198 <__kernel_tanf+0x1a0>
 8017098:	eee6 5a07 	vfma.f32	s11, s12, s14
 801709c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801719c <__kernel_tanf+0x1a4>
 80170a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80170a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80171a0 <__kernel_tanf+0x1a8>
 80170a8:	eee7 5a05 	vfma.f32	s11, s14, s10
 80170ac:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80171a4 <__kernel_tanf+0x1ac>
 80170b0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80170b4:	eddf 5a3c 	vldr	s11, [pc, #240]	; 80171a8 <__kernel_tanf+0x1b0>
 80170b8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80170bc:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80171ac <__kernel_tanf+0x1b4>
 80170c0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80170c4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80171b0 <__kernel_tanf+0x1b8>
 80170c8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80170cc:	eeb0 7a65 	vmov.f32	s14, s11
 80170d0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80170d4:	ee67 5aa6 	vmul.f32	s11, s15, s13
 80170d8:	eeb0 7a46 	vmov.f32	s14, s12
 80170dc:	eeb0 6a60 	vmov.f32	s12, s1
 80170e0:	eea7 6a25 	vfma.f32	s12, s14, s11
 80170e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80171b4 <__kernel_tanf+0x1bc>
 80170e8:	eee6 0a26 	vfma.f32	s1, s12, s13
 80170ec:	eee5 0a87 	vfma.f32	s1, s11, s14
 80170f0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80170f4:	db1d      	blt.n	8017132 <__kernel_tanf+0x13a>
 80170f6:	ee06 0a90 	vmov	s13, r0
 80170fa:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80170fe:	ee27 6a07 	vmul.f32	s12, s14, s14
 8017102:	ee37 7a00 	vadd.f32	s14, s14, s0
 8017106:	179b      	asrs	r3, r3, #30
 8017108:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801710c:	f003 0302 	and.w	r3, r3, #2
 8017110:	f1c3 0301 	rsb	r3, r3, #1
 8017114:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8017118:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801711c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017120:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017124:	ee07 3a90 	vmov	s15, r3
 8017128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801712c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017130:	e77a      	b.n	8017028 <__kernel_tanf+0x30>
 8017132:	2801      	cmp	r0, #1
 8017134:	d01b      	beq.n	801716e <__kernel_tanf+0x176>
 8017136:	4b20      	ldr	r3, [pc, #128]	; (80171b8 <__kernel_tanf+0x1c0>)
 8017138:	ee17 2a10 	vmov	r2, s14
 801713c:	401a      	ands	r2, r3
 801713e:	ee06 2a10 	vmov	s12, r2
 8017142:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017146:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801714a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801714e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017156:	ee16 2a90 	vmov	r2, s13
 801715a:	4013      	ands	r3, r2
 801715c:	ee07 3a90 	vmov	s15, r3
 8017160:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017164:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8017168:	eee7 7a26 	vfma.f32	s15, s14, s13
 801716c:	e75c      	b.n	8017028 <__kernel_tanf+0x30>
 801716e:	eef0 7a47 	vmov.f32	s15, s14
 8017172:	e759      	b.n	8017028 <__kernel_tanf+0x30>
 8017174:	3f2ca140 	.word	0x3f2ca140
 8017178:	3f490fda 	.word	0x3f490fda
 801717c:	33222168 	.word	0x33222168
 8017180:	00000000 	.word	0x00000000
 8017184:	b79bae5f 	.word	0xb79bae5f
 8017188:	38a3f445 	.word	0x38a3f445
 801718c:	37d95384 	.word	0x37d95384
 8017190:	3a1a26c8 	.word	0x3a1a26c8
 8017194:	3b6b6916 	.word	0x3b6b6916
 8017198:	3cb327a4 	.word	0x3cb327a4
 801719c:	3e088889 	.word	0x3e088889
 80171a0:	3895c07a 	.word	0x3895c07a
 80171a4:	398137b9 	.word	0x398137b9
 80171a8:	3abede48 	.word	0x3abede48
 80171ac:	3c11371f 	.word	0x3c11371f
 80171b0:	3d5d0dd1 	.word	0x3d5d0dd1
 80171b4:	3eaaaaab 	.word	0x3eaaaaab
 80171b8:	fffff000 	.word	0xfffff000
 80171bc:	00000000 	.word	0x00000000

080171c0 <atan>:
 80171c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c4:	ec55 4b10 	vmov	r4, r5, d0
 80171c8:	4bc3      	ldr	r3, [pc, #780]	; (80174d8 <atan+0x318>)
 80171ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80171ce:	429e      	cmp	r6, r3
 80171d0:	46ab      	mov	fp, r5
 80171d2:	dd18      	ble.n	8017206 <atan+0x46>
 80171d4:	4bc1      	ldr	r3, [pc, #772]	; (80174dc <atan+0x31c>)
 80171d6:	429e      	cmp	r6, r3
 80171d8:	dc01      	bgt.n	80171de <atan+0x1e>
 80171da:	d109      	bne.n	80171f0 <atan+0x30>
 80171dc:	b144      	cbz	r4, 80171f0 <atan+0x30>
 80171de:	4622      	mov	r2, r4
 80171e0:	462b      	mov	r3, r5
 80171e2:	4620      	mov	r0, r4
 80171e4:	4629      	mov	r1, r5
 80171e6:	f7e9 f851 	bl	800028c <__adddf3>
 80171ea:	4604      	mov	r4, r0
 80171ec:	460d      	mov	r5, r1
 80171ee:	e006      	b.n	80171fe <atan+0x3e>
 80171f0:	f1bb 0f00 	cmp.w	fp, #0
 80171f4:	f300 8131 	bgt.w	801745a <atan+0x29a>
 80171f8:	a59b      	add	r5, pc, #620	; (adr r5, 8017468 <atan+0x2a8>)
 80171fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80171fe:	ec45 4b10 	vmov	d0, r4, r5
 8017202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017206:	4bb6      	ldr	r3, [pc, #728]	; (80174e0 <atan+0x320>)
 8017208:	429e      	cmp	r6, r3
 801720a:	dc14      	bgt.n	8017236 <atan+0x76>
 801720c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017210:	429e      	cmp	r6, r3
 8017212:	dc0d      	bgt.n	8017230 <atan+0x70>
 8017214:	a396      	add	r3, pc, #600	; (adr r3, 8017470 <atan+0x2b0>)
 8017216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721a:	ee10 0a10 	vmov	r0, s0
 801721e:	4629      	mov	r1, r5
 8017220:	f7e9 f834 	bl	800028c <__adddf3>
 8017224:	4baf      	ldr	r3, [pc, #700]	; (80174e4 <atan+0x324>)
 8017226:	2200      	movs	r2, #0
 8017228:	f7e9 fc76 	bl	8000b18 <__aeabi_dcmpgt>
 801722c:	2800      	cmp	r0, #0
 801722e:	d1e6      	bne.n	80171fe <atan+0x3e>
 8017230:	f04f 3aff 	mov.w	sl, #4294967295
 8017234:	e02b      	b.n	801728e <atan+0xce>
 8017236:	f000 f963 	bl	8017500 <fabs>
 801723a:	4bab      	ldr	r3, [pc, #684]	; (80174e8 <atan+0x328>)
 801723c:	429e      	cmp	r6, r3
 801723e:	ec55 4b10 	vmov	r4, r5, d0
 8017242:	f300 80bf 	bgt.w	80173c4 <atan+0x204>
 8017246:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801724a:	429e      	cmp	r6, r3
 801724c:	f300 80a0 	bgt.w	8017390 <atan+0x1d0>
 8017250:	ee10 2a10 	vmov	r2, s0
 8017254:	ee10 0a10 	vmov	r0, s0
 8017258:	462b      	mov	r3, r5
 801725a:	4629      	mov	r1, r5
 801725c:	f7e9 f816 	bl	800028c <__adddf3>
 8017260:	4ba0      	ldr	r3, [pc, #640]	; (80174e4 <atan+0x324>)
 8017262:	2200      	movs	r2, #0
 8017264:	f7e9 f810 	bl	8000288 <__aeabi_dsub>
 8017268:	2200      	movs	r2, #0
 801726a:	4606      	mov	r6, r0
 801726c:	460f      	mov	r7, r1
 801726e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017272:	4620      	mov	r0, r4
 8017274:	4629      	mov	r1, r5
 8017276:	f7e9 f809 	bl	800028c <__adddf3>
 801727a:	4602      	mov	r2, r0
 801727c:	460b      	mov	r3, r1
 801727e:	4630      	mov	r0, r6
 8017280:	4639      	mov	r1, r7
 8017282:	f7e9 fae3 	bl	800084c <__aeabi_ddiv>
 8017286:	f04f 0a00 	mov.w	sl, #0
 801728a:	4604      	mov	r4, r0
 801728c:	460d      	mov	r5, r1
 801728e:	4622      	mov	r2, r4
 8017290:	462b      	mov	r3, r5
 8017292:	4620      	mov	r0, r4
 8017294:	4629      	mov	r1, r5
 8017296:	f7e9 f9af 	bl	80005f8 <__aeabi_dmul>
 801729a:	4602      	mov	r2, r0
 801729c:	460b      	mov	r3, r1
 801729e:	4680      	mov	r8, r0
 80172a0:	4689      	mov	r9, r1
 80172a2:	f7e9 f9a9 	bl	80005f8 <__aeabi_dmul>
 80172a6:	a374      	add	r3, pc, #464	; (adr r3, 8017478 <atan+0x2b8>)
 80172a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ac:	4606      	mov	r6, r0
 80172ae:	460f      	mov	r7, r1
 80172b0:	f7e9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80172b4:	a372      	add	r3, pc, #456	; (adr r3, 8017480 <atan+0x2c0>)
 80172b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ba:	f7e8 ffe7 	bl	800028c <__adddf3>
 80172be:	4632      	mov	r2, r6
 80172c0:	463b      	mov	r3, r7
 80172c2:	f7e9 f999 	bl	80005f8 <__aeabi_dmul>
 80172c6:	a370      	add	r3, pc, #448	; (adr r3, 8017488 <atan+0x2c8>)
 80172c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172cc:	f7e8 ffde 	bl	800028c <__adddf3>
 80172d0:	4632      	mov	r2, r6
 80172d2:	463b      	mov	r3, r7
 80172d4:	f7e9 f990 	bl	80005f8 <__aeabi_dmul>
 80172d8:	a36d      	add	r3, pc, #436	; (adr r3, 8017490 <atan+0x2d0>)
 80172da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172de:	f7e8 ffd5 	bl	800028c <__adddf3>
 80172e2:	4632      	mov	r2, r6
 80172e4:	463b      	mov	r3, r7
 80172e6:	f7e9 f987 	bl	80005f8 <__aeabi_dmul>
 80172ea:	a36b      	add	r3, pc, #428	; (adr r3, 8017498 <atan+0x2d8>)
 80172ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f0:	f7e8 ffcc 	bl	800028c <__adddf3>
 80172f4:	4632      	mov	r2, r6
 80172f6:	463b      	mov	r3, r7
 80172f8:	f7e9 f97e 	bl	80005f8 <__aeabi_dmul>
 80172fc:	a368      	add	r3, pc, #416	; (adr r3, 80174a0 <atan+0x2e0>)
 80172fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017302:	f7e8 ffc3 	bl	800028c <__adddf3>
 8017306:	4642      	mov	r2, r8
 8017308:	464b      	mov	r3, r9
 801730a:	f7e9 f975 	bl	80005f8 <__aeabi_dmul>
 801730e:	a366      	add	r3, pc, #408	; (adr r3, 80174a8 <atan+0x2e8>)
 8017310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017314:	4680      	mov	r8, r0
 8017316:	4689      	mov	r9, r1
 8017318:	4630      	mov	r0, r6
 801731a:	4639      	mov	r1, r7
 801731c:	f7e9 f96c 	bl	80005f8 <__aeabi_dmul>
 8017320:	a363      	add	r3, pc, #396	; (adr r3, 80174b0 <atan+0x2f0>)
 8017322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017326:	f7e8 ffaf 	bl	8000288 <__aeabi_dsub>
 801732a:	4632      	mov	r2, r6
 801732c:	463b      	mov	r3, r7
 801732e:	f7e9 f963 	bl	80005f8 <__aeabi_dmul>
 8017332:	a361      	add	r3, pc, #388	; (adr r3, 80174b8 <atan+0x2f8>)
 8017334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017338:	f7e8 ffa6 	bl	8000288 <__aeabi_dsub>
 801733c:	4632      	mov	r2, r6
 801733e:	463b      	mov	r3, r7
 8017340:	f7e9 f95a 	bl	80005f8 <__aeabi_dmul>
 8017344:	a35e      	add	r3, pc, #376	; (adr r3, 80174c0 <atan+0x300>)
 8017346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734a:	f7e8 ff9d 	bl	8000288 <__aeabi_dsub>
 801734e:	4632      	mov	r2, r6
 8017350:	463b      	mov	r3, r7
 8017352:	f7e9 f951 	bl	80005f8 <__aeabi_dmul>
 8017356:	a35c      	add	r3, pc, #368	; (adr r3, 80174c8 <atan+0x308>)
 8017358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801735c:	f7e8 ff94 	bl	8000288 <__aeabi_dsub>
 8017360:	4632      	mov	r2, r6
 8017362:	463b      	mov	r3, r7
 8017364:	f7e9 f948 	bl	80005f8 <__aeabi_dmul>
 8017368:	4602      	mov	r2, r0
 801736a:	460b      	mov	r3, r1
 801736c:	4640      	mov	r0, r8
 801736e:	4649      	mov	r1, r9
 8017370:	f7e8 ff8c 	bl	800028c <__adddf3>
 8017374:	4622      	mov	r2, r4
 8017376:	462b      	mov	r3, r5
 8017378:	f7e9 f93e 	bl	80005f8 <__aeabi_dmul>
 801737c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017380:	4602      	mov	r2, r0
 8017382:	460b      	mov	r3, r1
 8017384:	d14b      	bne.n	801741e <atan+0x25e>
 8017386:	4620      	mov	r0, r4
 8017388:	4629      	mov	r1, r5
 801738a:	f7e8 ff7d 	bl	8000288 <__aeabi_dsub>
 801738e:	e72c      	b.n	80171ea <atan+0x2a>
 8017390:	ee10 0a10 	vmov	r0, s0
 8017394:	4b53      	ldr	r3, [pc, #332]	; (80174e4 <atan+0x324>)
 8017396:	2200      	movs	r2, #0
 8017398:	4629      	mov	r1, r5
 801739a:	f7e8 ff75 	bl	8000288 <__aeabi_dsub>
 801739e:	4b51      	ldr	r3, [pc, #324]	; (80174e4 <atan+0x324>)
 80173a0:	4606      	mov	r6, r0
 80173a2:	460f      	mov	r7, r1
 80173a4:	2200      	movs	r2, #0
 80173a6:	4620      	mov	r0, r4
 80173a8:	4629      	mov	r1, r5
 80173aa:	f7e8 ff6f 	bl	800028c <__adddf3>
 80173ae:	4602      	mov	r2, r0
 80173b0:	460b      	mov	r3, r1
 80173b2:	4630      	mov	r0, r6
 80173b4:	4639      	mov	r1, r7
 80173b6:	f7e9 fa49 	bl	800084c <__aeabi_ddiv>
 80173ba:	f04f 0a01 	mov.w	sl, #1
 80173be:	4604      	mov	r4, r0
 80173c0:	460d      	mov	r5, r1
 80173c2:	e764      	b.n	801728e <atan+0xce>
 80173c4:	4b49      	ldr	r3, [pc, #292]	; (80174ec <atan+0x32c>)
 80173c6:	429e      	cmp	r6, r3
 80173c8:	da1d      	bge.n	8017406 <atan+0x246>
 80173ca:	ee10 0a10 	vmov	r0, s0
 80173ce:	4b48      	ldr	r3, [pc, #288]	; (80174f0 <atan+0x330>)
 80173d0:	2200      	movs	r2, #0
 80173d2:	4629      	mov	r1, r5
 80173d4:	f7e8 ff58 	bl	8000288 <__aeabi_dsub>
 80173d8:	4b45      	ldr	r3, [pc, #276]	; (80174f0 <atan+0x330>)
 80173da:	4606      	mov	r6, r0
 80173dc:	460f      	mov	r7, r1
 80173de:	2200      	movs	r2, #0
 80173e0:	4620      	mov	r0, r4
 80173e2:	4629      	mov	r1, r5
 80173e4:	f7e9 f908 	bl	80005f8 <__aeabi_dmul>
 80173e8:	4b3e      	ldr	r3, [pc, #248]	; (80174e4 <atan+0x324>)
 80173ea:	2200      	movs	r2, #0
 80173ec:	f7e8 ff4e 	bl	800028c <__adddf3>
 80173f0:	4602      	mov	r2, r0
 80173f2:	460b      	mov	r3, r1
 80173f4:	4630      	mov	r0, r6
 80173f6:	4639      	mov	r1, r7
 80173f8:	f7e9 fa28 	bl	800084c <__aeabi_ddiv>
 80173fc:	f04f 0a02 	mov.w	sl, #2
 8017400:	4604      	mov	r4, r0
 8017402:	460d      	mov	r5, r1
 8017404:	e743      	b.n	801728e <atan+0xce>
 8017406:	462b      	mov	r3, r5
 8017408:	ee10 2a10 	vmov	r2, s0
 801740c:	4939      	ldr	r1, [pc, #228]	; (80174f4 <atan+0x334>)
 801740e:	2000      	movs	r0, #0
 8017410:	f7e9 fa1c 	bl	800084c <__aeabi_ddiv>
 8017414:	f04f 0a03 	mov.w	sl, #3
 8017418:	4604      	mov	r4, r0
 801741a:	460d      	mov	r5, r1
 801741c:	e737      	b.n	801728e <atan+0xce>
 801741e:	4b36      	ldr	r3, [pc, #216]	; (80174f8 <atan+0x338>)
 8017420:	4e36      	ldr	r6, [pc, #216]	; (80174fc <atan+0x33c>)
 8017422:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8017426:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801742a:	e9da 2300 	ldrd	r2, r3, [sl]
 801742e:	f7e8 ff2b 	bl	8000288 <__aeabi_dsub>
 8017432:	4622      	mov	r2, r4
 8017434:	462b      	mov	r3, r5
 8017436:	f7e8 ff27 	bl	8000288 <__aeabi_dsub>
 801743a:	4602      	mov	r2, r0
 801743c:	460b      	mov	r3, r1
 801743e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8017442:	f7e8 ff21 	bl	8000288 <__aeabi_dsub>
 8017446:	f1bb 0f00 	cmp.w	fp, #0
 801744a:	4604      	mov	r4, r0
 801744c:	460d      	mov	r5, r1
 801744e:	f6bf aed6 	bge.w	80171fe <atan+0x3e>
 8017452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017456:	461d      	mov	r5, r3
 8017458:	e6d1      	b.n	80171fe <atan+0x3e>
 801745a:	a51d      	add	r5, pc, #116	; (adr r5, 80174d0 <atan+0x310>)
 801745c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017460:	e6cd      	b.n	80171fe <atan+0x3e>
 8017462:	bf00      	nop
 8017464:	f3af 8000 	nop.w
 8017468:	54442d18 	.word	0x54442d18
 801746c:	bff921fb 	.word	0xbff921fb
 8017470:	8800759c 	.word	0x8800759c
 8017474:	7e37e43c 	.word	0x7e37e43c
 8017478:	e322da11 	.word	0xe322da11
 801747c:	3f90ad3a 	.word	0x3f90ad3a
 8017480:	24760deb 	.word	0x24760deb
 8017484:	3fa97b4b 	.word	0x3fa97b4b
 8017488:	a0d03d51 	.word	0xa0d03d51
 801748c:	3fb10d66 	.word	0x3fb10d66
 8017490:	c54c206e 	.word	0xc54c206e
 8017494:	3fb745cd 	.word	0x3fb745cd
 8017498:	920083ff 	.word	0x920083ff
 801749c:	3fc24924 	.word	0x3fc24924
 80174a0:	5555550d 	.word	0x5555550d
 80174a4:	3fd55555 	.word	0x3fd55555
 80174a8:	2c6a6c2f 	.word	0x2c6a6c2f
 80174ac:	bfa2b444 	.word	0xbfa2b444
 80174b0:	52defd9a 	.word	0x52defd9a
 80174b4:	3fadde2d 	.word	0x3fadde2d
 80174b8:	af749a6d 	.word	0xaf749a6d
 80174bc:	3fb3b0f2 	.word	0x3fb3b0f2
 80174c0:	fe231671 	.word	0xfe231671
 80174c4:	3fbc71c6 	.word	0x3fbc71c6
 80174c8:	9998ebc4 	.word	0x9998ebc4
 80174cc:	3fc99999 	.word	0x3fc99999
 80174d0:	54442d18 	.word	0x54442d18
 80174d4:	3ff921fb 	.word	0x3ff921fb
 80174d8:	440fffff 	.word	0x440fffff
 80174dc:	7ff00000 	.word	0x7ff00000
 80174e0:	3fdbffff 	.word	0x3fdbffff
 80174e4:	3ff00000 	.word	0x3ff00000
 80174e8:	3ff2ffff 	.word	0x3ff2ffff
 80174ec:	40038000 	.word	0x40038000
 80174f0:	3ff80000 	.word	0x3ff80000
 80174f4:	bff00000 	.word	0xbff00000
 80174f8:	0801ae18 	.word	0x0801ae18
 80174fc:	0801adf8 	.word	0x0801adf8

08017500 <fabs>:
 8017500:	ec51 0b10 	vmov	r0, r1, d0
 8017504:	ee10 2a10 	vmov	r2, s0
 8017508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801750c:	ec43 2b10 	vmov	d0, r2, r3
 8017510:	4770      	bx	lr
	...

08017514 <atanf>:
 8017514:	b538      	push	{r3, r4, r5, lr}
 8017516:	ee10 5a10 	vmov	r5, s0
 801751a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801751e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8017522:	eef0 7a40 	vmov.f32	s15, s0
 8017526:	db10      	blt.n	801754a <atanf+0x36>
 8017528:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801752c:	dd04      	ble.n	8017538 <atanf+0x24>
 801752e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017532:	eeb0 0a67 	vmov.f32	s0, s15
 8017536:	bd38      	pop	{r3, r4, r5, pc}
 8017538:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017670 <atanf+0x15c>
 801753c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8017674 <atanf+0x160>
 8017540:	2d00      	cmp	r5, #0
 8017542:	bfd8      	it	le
 8017544:	eef0 7a40 	vmovle.f32	s15, s0
 8017548:	e7f3      	b.n	8017532 <atanf+0x1e>
 801754a:	4b4b      	ldr	r3, [pc, #300]	; (8017678 <atanf+0x164>)
 801754c:	429c      	cmp	r4, r3
 801754e:	dc10      	bgt.n	8017572 <atanf+0x5e>
 8017550:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8017554:	da0a      	bge.n	801756c <atanf+0x58>
 8017556:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801767c <atanf+0x168>
 801755a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801755e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017562:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756a:	dce2      	bgt.n	8017532 <atanf+0x1e>
 801756c:	f04f 33ff 	mov.w	r3, #4294967295
 8017570:	e013      	b.n	801759a <atanf+0x86>
 8017572:	f000 f8a3 	bl	80176bc <fabsf>
 8017576:	4b42      	ldr	r3, [pc, #264]	; (8017680 <atanf+0x16c>)
 8017578:	429c      	cmp	r4, r3
 801757a:	dc4f      	bgt.n	801761c <atanf+0x108>
 801757c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017580:	429c      	cmp	r4, r3
 8017582:	dc41      	bgt.n	8017608 <atanf+0xf4>
 8017584:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017588:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801758c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017590:	2300      	movs	r3, #0
 8017592:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017596:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801759a:	1c5a      	adds	r2, r3, #1
 801759c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80175a0:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017684 <atanf+0x170>
 80175a4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8017688 <atanf+0x174>
 80175a8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801768c <atanf+0x178>
 80175ac:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8017690 <atanf+0x17c>
 80175b0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80175b4:	eea7 6a25 	vfma.f32	s12, s14, s11
 80175b8:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017694 <atanf+0x180>
 80175bc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80175c0:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017698 <atanf+0x184>
 80175c4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175c8:	eddf 5a34 	vldr	s11, [pc, #208]	; 801769c <atanf+0x188>
 80175cc:	eee6 5a07 	vfma.f32	s11, s12, s14
 80175d0:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80176a0 <atanf+0x18c>
 80175d4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175d8:	eddf 5a32 	vldr	s11, [pc, #200]	; 80176a4 <atanf+0x190>
 80175dc:	eee7 5a05 	vfma.f32	s11, s14, s10
 80175e0:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80176a8 <atanf+0x194>
 80175e4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80175e8:	eddf 5a30 	vldr	s11, [pc, #192]	; 80176ac <atanf+0x198>
 80175ec:	eee5 5a07 	vfma.f32	s11, s10, s14
 80175f0:	eea5 0a87 	vfma.f32	s0, s11, s14
 80175f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80175f8:	eea6 0a26 	vfma.f32	s0, s12, s13
 80175fc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017600:	d121      	bne.n	8017646 <atanf+0x132>
 8017602:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017606:	e794      	b.n	8017532 <atanf+0x1e>
 8017608:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801760c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017610:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017614:	2301      	movs	r3, #1
 8017616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801761a:	e7be      	b.n	801759a <atanf+0x86>
 801761c:	4b24      	ldr	r3, [pc, #144]	; (80176b0 <atanf+0x19c>)
 801761e:	429c      	cmp	r4, r3
 8017620:	dc0b      	bgt.n	801763a <atanf+0x126>
 8017622:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017626:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801762a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801762e:	2302      	movs	r3, #2
 8017630:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017638:	e7af      	b.n	801759a <atanf+0x86>
 801763a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801763e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017642:	2303      	movs	r3, #3
 8017644:	e7a9      	b.n	801759a <atanf+0x86>
 8017646:	4a1b      	ldr	r2, [pc, #108]	; (80176b4 <atanf+0x1a0>)
 8017648:	491b      	ldr	r1, [pc, #108]	; (80176b8 <atanf+0x1a4>)
 801764a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801764e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017652:	ed93 7a00 	vldr	s14, [r3]
 8017656:	ee30 0a47 	vsub.f32	s0, s0, s14
 801765a:	2d00      	cmp	r5, #0
 801765c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017660:	ed92 0a00 	vldr	s0, [r2]
 8017664:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017668:	bfb8      	it	lt
 801766a:	eef1 7a67 	vneglt.f32	s15, s15
 801766e:	e760      	b.n	8017532 <atanf+0x1e>
 8017670:	3fc90fdb 	.word	0x3fc90fdb
 8017674:	bfc90fdb 	.word	0xbfc90fdb
 8017678:	3edfffff 	.word	0x3edfffff
 801767c:	7149f2ca 	.word	0x7149f2ca
 8017680:	3f97ffff 	.word	0x3f97ffff
 8017684:	3c8569d7 	.word	0x3c8569d7
 8017688:	3d4bda59 	.word	0x3d4bda59
 801768c:	bd15a221 	.word	0xbd15a221
 8017690:	be4ccccd 	.word	0xbe4ccccd
 8017694:	3d886b35 	.word	0x3d886b35
 8017698:	3dba2e6e 	.word	0x3dba2e6e
 801769c:	3e124925 	.word	0x3e124925
 80176a0:	3eaaaaab 	.word	0x3eaaaaab
 80176a4:	bd6ef16b 	.word	0xbd6ef16b
 80176a8:	bd9d8795 	.word	0xbd9d8795
 80176ac:	bde38e38 	.word	0xbde38e38
 80176b0:	401bffff 	.word	0x401bffff
 80176b4:	0801ae38 	.word	0x0801ae38
 80176b8:	0801ae48 	.word	0x0801ae48

080176bc <fabsf>:
 80176bc:	ee10 3a10 	vmov	r3, s0
 80176c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80176c4:	ee00 3a10 	vmov	s0, r3
 80176c8:	4770      	bx	lr
	...

080176cc <floorf>:
 80176cc:	ee10 3a10 	vmov	r3, s0
 80176d0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80176d4:	3a7f      	subs	r2, #127	; 0x7f
 80176d6:	2a16      	cmp	r2, #22
 80176d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80176dc:	dc2a      	bgt.n	8017734 <floorf+0x68>
 80176de:	2a00      	cmp	r2, #0
 80176e0:	da11      	bge.n	8017706 <floorf+0x3a>
 80176e2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017744 <floorf+0x78>
 80176e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80176ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80176ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176f2:	dd05      	ble.n	8017700 <floorf+0x34>
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	da23      	bge.n	8017740 <floorf+0x74>
 80176f8:	4a13      	ldr	r2, [pc, #76]	; (8017748 <floorf+0x7c>)
 80176fa:	2900      	cmp	r1, #0
 80176fc:	bf18      	it	ne
 80176fe:	4613      	movne	r3, r2
 8017700:	ee00 3a10 	vmov	s0, r3
 8017704:	4770      	bx	lr
 8017706:	4911      	ldr	r1, [pc, #68]	; (801774c <floorf+0x80>)
 8017708:	4111      	asrs	r1, r2
 801770a:	420b      	tst	r3, r1
 801770c:	d0fa      	beq.n	8017704 <floorf+0x38>
 801770e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017744 <floorf+0x78>
 8017712:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017716:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801771a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801771e:	ddef      	ble.n	8017700 <floorf+0x34>
 8017720:	2b00      	cmp	r3, #0
 8017722:	bfbe      	ittt	lt
 8017724:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017728:	fa40 f202 	asrlt.w	r2, r0, r2
 801772c:	189b      	addlt	r3, r3, r2
 801772e:	ea23 0301 	bic.w	r3, r3, r1
 8017732:	e7e5      	b.n	8017700 <floorf+0x34>
 8017734:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017738:	d3e4      	bcc.n	8017704 <floorf+0x38>
 801773a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801773e:	4770      	bx	lr
 8017740:	2300      	movs	r3, #0
 8017742:	e7dd      	b.n	8017700 <floorf+0x34>
 8017744:	7149f2ca 	.word	0x7149f2ca
 8017748:	bf800000 	.word	0xbf800000
 801774c:	007fffff 	.word	0x007fffff

08017750 <nanf>:
 8017750:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017758 <nanf+0x8>
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	7fc00000 	.word	0x7fc00000

0801775c <scalbnf>:
 801775c:	ee10 3a10 	vmov	r3, s0
 8017760:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017764:	d025      	beq.n	80177b2 <scalbnf+0x56>
 8017766:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801776a:	d302      	bcc.n	8017772 <scalbnf+0x16>
 801776c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017770:	4770      	bx	lr
 8017772:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017776:	d122      	bne.n	80177be <scalbnf+0x62>
 8017778:	4b2a      	ldr	r3, [pc, #168]	; (8017824 <scalbnf+0xc8>)
 801777a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8017828 <scalbnf+0xcc>
 801777e:	4298      	cmp	r0, r3
 8017780:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017784:	db16      	blt.n	80177b4 <scalbnf+0x58>
 8017786:	ee10 3a10 	vmov	r3, s0
 801778a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801778e:	3a19      	subs	r2, #25
 8017790:	4402      	add	r2, r0
 8017792:	2afe      	cmp	r2, #254	; 0xfe
 8017794:	dd15      	ble.n	80177c2 <scalbnf+0x66>
 8017796:	ee10 3a10 	vmov	r3, s0
 801779a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801782c <scalbnf+0xd0>
 801779e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8017830 <scalbnf+0xd4>
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	eeb0 7a67 	vmov.f32	s14, s15
 80177a8:	bfb8      	it	lt
 80177aa:	eef0 7a66 	vmovlt.f32	s15, s13
 80177ae:	ee27 0a27 	vmul.f32	s0, s14, s15
 80177b2:	4770      	bx	lr
 80177b4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017834 <scalbnf+0xd8>
 80177b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80177bc:	4770      	bx	lr
 80177be:	0dd2      	lsrs	r2, r2, #23
 80177c0:	e7e6      	b.n	8017790 <scalbnf+0x34>
 80177c2:	2a00      	cmp	r2, #0
 80177c4:	dd06      	ble.n	80177d4 <scalbnf+0x78>
 80177c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80177ca:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80177ce:	ee00 3a10 	vmov	s0, r3
 80177d2:	4770      	bx	lr
 80177d4:	f112 0f16 	cmn.w	r2, #22
 80177d8:	da1a      	bge.n	8017810 <scalbnf+0xb4>
 80177da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80177de:	4298      	cmp	r0, r3
 80177e0:	ee10 3a10 	vmov	r3, s0
 80177e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80177e8:	dd0a      	ble.n	8017800 <scalbnf+0xa4>
 80177ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801782c <scalbnf+0xd0>
 80177ee:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017830 <scalbnf+0xd4>
 80177f2:	eef0 7a40 	vmov.f32	s15, s0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	bf18      	it	ne
 80177fa:	eeb0 0a47 	vmovne.f32	s0, s14
 80177fe:	e7db      	b.n	80177b8 <scalbnf+0x5c>
 8017800:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8017834 <scalbnf+0xd8>
 8017804:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017838 <scalbnf+0xdc>
 8017808:	eef0 7a40 	vmov.f32	s15, s0
 801780c:	2b00      	cmp	r3, #0
 801780e:	e7f3      	b.n	80177f8 <scalbnf+0x9c>
 8017810:	3219      	adds	r2, #25
 8017812:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017816:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801781a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801783c <scalbnf+0xe0>
 801781e:	ee07 3a10 	vmov	s14, r3
 8017822:	e7c4      	b.n	80177ae <scalbnf+0x52>
 8017824:	ffff3cb0 	.word	0xffff3cb0
 8017828:	4c000000 	.word	0x4c000000
 801782c:	7149f2ca 	.word	0x7149f2ca
 8017830:	f149f2ca 	.word	0xf149f2ca
 8017834:	0da24260 	.word	0x0da24260
 8017838:	8da24260 	.word	0x8da24260
 801783c:	33000000 	.word	0x33000000

08017840 <abort>:
 8017840:	b508      	push	{r3, lr}
 8017842:	2006      	movs	r0, #6
 8017844:	f000 fdd2 	bl	80183ec <raise>
 8017848:	2001      	movs	r0, #1
 801784a:	f7eb f8c3 	bl	80029d4 <_exit>
	...

08017850 <__errno>:
 8017850:	4b01      	ldr	r3, [pc, #4]	; (8017858 <__errno+0x8>)
 8017852:	6818      	ldr	r0, [r3, #0]
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	200000f0 	.word	0x200000f0

0801785c <__libc_init_array>:
 801785c:	b570      	push	{r4, r5, r6, lr}
 801785e:	4d0d      	ldr	r5, [pc, #52]	; (8017894 <__libc_init_array+0x38>)
 8017860:	4c0d      	ldr	r4, [pc, #52]	; (8017898 <__libc_init_array+0x3c>)
 8017862:	1b64      	subs	r4, r4, r5
 8017864:	10a4      	asrs	r4, r4, #2
 8017866:	2600      	movs	r6, #0
 8017868:	42a6      	cmp	r6, r4
 801786a:	d109      	bne.n	8017880 <__libc_init_array+0x24>
 801786c:	4d0b      	ldr	r5, [pc, #44]	; (801789c <__libc_init_array+0x40>)
 801786e:	4c0c      	ldr	r4, [pc, #48]	; (80178a0 <__libc_init_array+0x44>)
 8017870:	f002 ff02 	bl	801a678 <_init>
 8017874:	1b64      	subs	r4, r4, r5
 8017876:	10a4      	asrs	r4, r4, #2
 8017878:	2600      	movs	r6, #0
 801787a:	42a6      	cmp	r6, r4
 801787c:	d105      	bne.n	801788a <__libc_init_array+0x2e>
 801787e:	bd70      	pop	{r4, r5, r6, pc}
 8017880:	f855 3b04 	ldr.w	r3, [r5], #4
 8017884:	4798      	blx	r3
 8017886:	3601      	adds	r6, #1
 8017888:	e7ee      	b.n	8017868 <__libc_init_array+0xc>
 801788a:	f855 3b04 	ldr.w	r3, [r5], #4
 801788e:	4798      	blx	r3
 8017890:	3601      	adds	r6, #1
 8017892:	e7f2      	b.n	801787a <__libc_init_array+0x1e>
 8017894:	0801b244 	.word	0x0801b244
 8017898:	0801b244 	.word	0x0801b244
 801789c:	0801b244 	.word	0x0801b244
 80178a0:	0801b248 	.word	0x0801b248

080178a4 <malloc>:
 80178a4:	4b02      	ldr	r3, [pc, #8]	; (80178b0 <malloc+0xc>)
 80178a6:	4601      	mov	r1, r0
 80178a8:	6818      	ldr	r0, [r3, #0]
 80178aa:	f000 b88b 	b.w	80179c4 <_malloc_r>
 80178ae:	bf00      	nop
 80178b0:	200000f0 	.word	0x200000f0

080178b4 <free>:
 80178b4:	4b02      	ldr	r3, [pc, #8]	; (80178c0 <free+0xc>)
 80178b6:	4601      	mov	r1, r0
 80178b8:	6818      	ldr	r0, [r3, #0]
 80178ba:	f000 b833 	b.w	8017924 <_free_r>
 80178be:	bf00      	nop
 80178c0:	200000f0 	.word	0x200000f0

080178c4 <memcpy>:
 80178c4:	440a      	add	r2, r1
 80178c6:	4291      	cmp	r1, r2
 80178c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80178cc:	d100      	bne.n	80178d0 <memcpy+0xc>
 80178ce:	4770      	bx	lr
 80178d0:	b510      	push	{r4, lr}
 80178d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178da:	4291      	cmp	r1, r2
 80178dc:	d1f9      	bne.n	80178d2 <memcpy+0xe>
 80178de:	bd10      	pop	{r4, pc}

080178e0 <memmove>:
 80178e0:	4288      	cmp	r0, r1
 80178e2:	b510      	push	{r4, lr}
 80178e4:	eb01 0402 	add.w	r4, r1, r2
 80178e8:	d902      	bls.n	80178f0 <memmove+0x10>
 80178ea:	4284      	cmp	r4, r0
 80178ec:	4623      	mov	r3, r4
 80178ee:	d807      	bhi.n	8017900 <memmove+0x20>
 80178f0:	1e43      	subs	r3, r0, #1
 80178f2:	42a1      	cmp	r1, r4
 80178f4:	d008      	beq.n	8017908 <memmove+0x28>
 80178f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178fe:	e7f8      	b.n	80178f2 <memmove+0x12>
 8017900:	4402      	add	r2, r0
 8017902:	4601      	mov	r1, r0
 8017904:	428a      	cmp	r2, r1
 8017906:	d100      	bne.n	801790a <memmove+0x2a>
 8017908:	bd10      	pop	{r4, pc}
 801790a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801790e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017912:	e7f7      	b.n	8017904 <memmove+0x24>

08017914 <memset>:
 8017914:	4402      	add	r2, r0
 8017916:	4603      	mov	r3, r0
 8017918:	4293      	cmp	r3, r2
 801791a:	d100      	bne.n	801791e <memset+0xa>
 801791c:	4770      	bx	lr
 801791e:	f803 1b01 	strb.w	r1, [r3], #1
 8017922:	e7f9      	b.n	8017918 <memset+0x4>

08017924 <_free_r>:
 8017924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017926:	2900      	cmp	r1, #0
 8017928:	d048      	beq.n	80179bc <_free_r+0x98>
 801792a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801792e:	9001      	str	r0, [sp, #4]
 8017930:	2b00      	cmp	r3, #0
 8017932:	f1a1 0404 	sub.w	r4, r1, #4
 8017936:	bfb8      	it	lt
 8017938:	18e4      	addlt	r4, r4, r3
 801793a:	f001 fd3f 	bl	80193bc <__malloc_lock>
 801793e:	4a20      	ldr	r2, [pc, #128]	; (80179c0 <_free_r+0x9c>)
 8017940:	9801      	ldr	r0, [sp, #4]
 8017942:	6813      	ldr	r3, [r2, #0]
 8017944:	4615      	mov	r5, r2
 8017946:	b933      	cbnz	r3, 8017956 <_free_r+0x32>
 8017948:	6063      	str	r3, [r4, #4]
 801794a:	6014      	str	r4, [r2, #0]
 801794c:	b003      	add	sp, #12
 801794e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017952:	f001 bd39 	b.w	80193c8 <__malloc_unlock>
 8017956:	42a3      	cmp	r3, r4
 8017958:	d90b      	bls.n	8017972 <_free_r+0x4e>
 801795a:	6821      	ldr	r1, [r4, #0]
 801795c:	1862      	adds	r2, r4, r1
 801795e:	4293      	cmp	r3, r2
 8017960:	bf04      	itt	eq
 8017962:	681a      	ldreq	r2, [r3, #0]
 8017964:	685b      	ldreq	r3, [r3, #4]
 8017966:	6063      	str	r3, [r4, #4]
 8017968:	bf04      	itt	eq
 801796a:	1852      	addeq	r2, r2, r1
 801796c:	6022      	streq	r2, [r4, #0]
 801796e:	602c      	str	r4, [r5, #0]
 8017970:	e7ec      	b.n	801794c <_free_r+0x28>
 8017972:	461a      	mov	r2, r3
 8017974:	685b      	ldr	r3, [r3, #4]
 8017976:	b10b      	cbz	r3, 801797c <_free_r+0x58>
 8017978:	42a3      	cmp	r3, r4
 801797a:	d9fa      	bls.n	8017972 <_free_r+0x4e>
 801797c:	6811      	ldr	r1, [r2, #0]
 801797e:	1855      	adds	r5, r2, r1
 8017980:	42a5      	cmp	r5, r4
 8017982:	d10b      	bne.n	801799c <_free_r+0x78>
 8017984:	6824      	ldr	r4, [r4, #0]
 8017986:	4421      	add	r1, r4
 8017988:	1854      	adds	r4, r2, r1
 801798a:	42a3      	cmp	r3, r4
 801798c:	6011      	str	r1, [r2, #0]
 801798e:	d1dd      	bne.n	801794c <_free_r+0x28>
 8017990:	681c      	ldr	r4, [r3, #0]
 8017992:	685b      	ldr	r3, [r3, #4]
 8017994:	6053      	str	r3, [r2, #4]
 8017996:	4421      	add	r1, r4
 8017998:	6011      	str	r1, [r2, #0]
 801799a:	e7d7      	b.n	801794c <_free_r+0x28>
 801799c:	d902      	bls.n	80179a4 <_free_r+0x80>
 801799e:	230c      	movs	r3, #12
 80179a0:	6003      	str	r3, [r0, #0]
 80179a2:	e7d3      	b.n	801794c <_free_r+0x28>
 80179a4:	6825      	ldr	r5, [r4, #0]
 80179a6:	1961      	adds	r1, r4, r5
 80179a8:	428b      	cmp	r3, r1
 80179aa:	bf04      	itt	eq
 80179ac:	6819      	ldreq	r1, [r3, #0]
 80179ae:	685b      	ldreq	r3, [r3, #4]
 80179b0:	6063      	str	r3, [r4, #4]
 80179b2:	bf04      	itt	eq
 80179b4:	1949      	addeq	r1, r1, r5
 80179b6:	6021      	streq	r1, [r4, #0]
 80179b8:	6054      	str	r4, [r2, #4]
 80179ba:	e7c7      	b.n	801794c <_free_r+0x28>
 80179bc:	b003      	add	sp, #12
 80179be:	bd30      	pop	{r4, r5, pc}
 80179c0:	200011b8 	.word	0x200011b8

080179c4 <_malloc_r>:
 80179c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179c6:	1ccd      	adds	r5, r1, #3
 80179c8:	f025 0503 	bic.w	r5, r5, #3
 80179cc:	3508      	adds	r5, #8
 80179ce:	2d0c      	cmp	r5, #12
 80179d0:	bf38      	it	cc
 80179d2:	250c      	movcc	r5, #12
 80179d4:	2d00      	cmp	r5, #0
 80179d6:	4606      	mov	r6, r0
 80179d8:	db01      	blt.n	80179de <_malloc_r+0x1a>
 80179da:	42a9      	cmp	r1, r5
 80179dc:	d903      	bls.n	80179e6 <_malloc_r+0x22>
 80179de:	230c      	movs	r3, #12
 80179e0:	6033      	str	r3, [r6, #0]
 80179e2:	2000      	movs	r0, #0
 80179e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179e6:	f001 fce9 	bl	80193bc <__malloc_lock>
 80179ea:	4921      	ldr	r1, [pc, #132]	; (8017a70 <_malloc_r+0xac>)
 80179ec:	680a      	ldr	r2, [r1, #0]
 80179ee:	4614      	mov	r4, r2
 80179f0:	b99c      	cbnz	r4, 8017a1a <_malloc_r+0x56>
 80179f2:	4f20      	ldr	r7, [pc, #128]	; (8017a74 <_malloc_r+0xb0>)
 80179f4:	683b      	ldr	r3, [r7, #0]
 80179f6:	b923      	cbnz	r3, 8017a02 <_malloc_r+0x3e>
 80179f8:	4621      	mov	r1, r4
 80179fa:	4630      	mov	r0, r6
 80179fc:	f000 fcbe 	bl	801837c <_sbrk_r>
 8017a00:	6038      	str	r0, [r7, #0]
 8017a02:	4629      	mov	r1, r5
 8017a04:	4630      	mov	r0, r6
 8017a06:	f000 fcb9 	bl	801837c <_sbrk_r>
 8017a0a:	1c43      	adds	r3, r0, #1
 8017a0c:	d123      	bne.n	8017a56 <_malloc_r+0x92>
 8017a0e:	230c      	movs	r3, #12
 8017a10:	6033      	str	r3, [r6, #0]
 8017a12:	4630      	mov	r0, r6
 8017a14:	f001 fcd8 	bl	80193c8 <__malloc_unlock>
 8017a18:	e7e3      	b.n	80179e2 <_malloc_r+0x1e>
 8017a1a:	6823      	ldr	r3, [r4, #0]
 8017a1c:	1b5b      	subs	r3, r3, r5
 8017a1e:	d417      	bmi.n	8017a50 <_malloc_r+0x8c>
 8017a20:	2b0b      	cmp	r3, #11
 8017a22:	d903      	bls.n	8017a2c <_malloc_r+0x68>
 8017a24:	6023      	str	r3, [r4, #0]
 8017a26:	441c      	add	r4, r3
 8017a28:	6025      	str	r5, [r4, #0]
 8017a2a:	e004      	b.n	8017a36 <_malloc_r+0x72>
 8017a2c:	6863      	ldr	r3, [r4, #4]
 8017a2e:	42a2      	cmp	r2, r4
 8017a30:	bf0c      	ite	eq
 8017a32:	600b      	streq	r3, [r1, #0]
 8017a34:	6053      	strne	r3, [r2, #4]
 8017a36:	4630      	mov	r0, r6
 8017a38:	f001 fcc6 	bl	80193c8 <__malloc_unlock>
 8017a3c:	f104 000b 	add.w	r0, r4, #11
 8017a40:	1d23      	adds	r3, r4, #4
 8017a42:	f020 0007 	bic.w	r0, r0, #7
 8017a46:	1ac2      	subs	r2, r0, r3
 8017a48:	d0cc      	beq.n	80179e4 <_malloc_r+0x20>
 8017a4a:	1a1b      	subs	r3, r3, r0
 8017a4c:	50a3      	str	r3, [r4, r2]
 8017a4e:	e7c9      	b.n	80179e4 <_malloc_r+0x20>
 8017a50:	4622      	mov	r2, r4
 8017a52:	6864      	ldr	r4, [r4, #4]
 8017a54:	e7cc      	b.n	80179f0 <_malloc_r+0x2c>
 8017a56:	1cc4      	adds	r4, r0, #3
 8017a58:	f024 0403 	bic.w	r4, r4, #3
 8017a5c:	42a0      	cmp	r0, r4
 8017a5e:	d0e3      	beq.n	8017a28 <_malloc_r+0x64>
 8017a60:	1a21      	subs	r1, r4, r0
 8017a62:	4630      	mov	r0, r6
 8017a64:	f000 fc8a 	bl	801837c <_sbrk_r>
 8017a68:	3001      	adds	r0, #1
 8017a6a:	d1dd      	bne.n	8017a28 <_malloc_r+0x64>
 8017a6c:	e7cf      	b.n	8017a0e <_malloc_r+0x4a>
 8017a6e:	bf00      	nop
 8017a70:	200011b8 	.word	0x200011b8
 8017a74:	200011bc 	.word	0x200011bc

08017a78 <__cvt>:
 8017a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a7c:	ec55 4b10 	vmov	r4, r5, d0
 8017a80:	2d00      	cmp	r5, #0
 8017a82:	460e      	mov	r6, r1
 8017a84:	4619      	mov	r1, r3
 8017a86:	462b      	mov	r3, r5
 8017a88:	bfbb      	ittet	lt
 8017a8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017a8e:	461d      	movlt	r5, r3
 8017a90:	2300      	movge	r3, #0
 8017a92:	232d      	movlt	r3, #45	; 0x2d
 8017a94:	700b      	strb	r3, [r1, #0]
 8017a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017a9c:	4691      	mov	r9, r2
 8017a9e:	f023 0820 	bic.w	r8, r3, #32
 8017aa2:	bfbc      	itt	lt
 8017aa4:	4622      	movlt	r2, r4
 8017aa6:	4614      	movlt	r4, r2
 8017aa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017aac:	d005      	beq.n	8017aba <__cvt+0x42>
 8017aae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017ab2:	d100      	bne.n	8017ab6 <__cvt+0x3e>
 8017ab4:	3601      	adds	r6, #1
 8017ab6:	2102      	movs	r1, #2
 8017ab8:	e000      	b.n	8017abc <__cvt+0x44>
 8017aba:	2103      	movs	r1, #3
 8017abc:	ab03      	add	r3, sp, #12
 8017abe:	9301      	str	r3, [sp, #4]
 8017ac0:	ab02      	add	r3, sp, #8
 8017ac2:	9300      	str	r3, [sp, #0]
 8017ac4:	ec45 4b10 	vmov	d0, r4, r5
 8017ac8:	4653      	mov	r3, sl
 8017aca:	4632      	mov	r2, r6
 8017acc:	f000 fd8c 	bl	80185e8 <_dtoa_r>
 8017ad0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017ad4:	4607      	mov	r7, r0
 8017ad6:	d102      	bne.n	8017ade <__cvt+0x66>
 8017ad8:	f019 0f01 	tst.w	r9, #1
 8017adc:	d022      	beq.n	8017b24 <__cvt+0xac>
 8017ade:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017ae2:	eb07 0906 	add.w	r9, r7, r6
 8017ae6:	d110      	bne.n	8017b0a <__cvt+0x92>
 8017ae8:	783b      	ldrb	r3, [r7, #0]
 8017aea:	2b30      	cmp	r3, #48	; 0x30
 8017aec:	d10a      	bne.n	8017b04 <__cvt+0x8c>
 8017aee:	2200      	movs	r2, #0
 8017af0:	2300      	movs	r3, #0
 8017af2:	4620      	mov	r0, r4
 8017af4:	4629      	mov	r1, r5
 8017af6:	f7e8 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8017afa:	b918      	cbnz	r0, 8017b04 <__cvt+0x8c>
 8017afc:	f1c6 0601 	rsb	r6, r6, #1
 8017b00:	f8ca 6000 	str.w	r6, [sl]
 8017b04:	f8da 3000 	ldr.w	r3, [sl]
 8017b08:	4499      	add	r9, r3
 8017b0a:	2200      	movs	r2, #0
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	4620      	mov	r0, r4
 8017b10:	4629      	mov	r1, r5
 8017b12:	f7e8 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b16:	b108      	cbz	r0, 8017b1c <__cvt+0xa4>
 8017b18:	f8cd 900c 	str.w	r9, [sp, #12]
 8017b1c:	2230      	movs	r2, #48	; 0x30
 8017b1e:	9b03      	ldr	r3, [sp, #12]
 8017b20:	454b      	cmp	r3, r9
 8017b22:	d307      	bcc.n	8017b34 <__cvt+0xbc>
 8017b24:	9b03      	ldr	r3, [sp, #12]
 8017b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b28:	1bdb      	subs	r3, r3, r7
 8017b2a:	4638      	mov	r0, r7
 8017b2c:	6013      	str	r3, [r2, #0]
 8017b2e:	b004      	add	sp, #16
 8017b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b34:	1c59      	adds	r1, r3, #1
 8017b36:	9103      	str	r1, [sp, #12]
 8017b38:	701a      	strb	r2, [r3, #0]
 8017b3a:	e7f0      	b.n	8017b1e <__cvt+0xa6>

08017b3c <__exponent>:
 8017b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b3e:	4603      	mov	r3, r0
 8017b40:	2900      	cmp	r1, #0
 8017b42:	bfb8      	it	lt
 8017b44:	4249      	neglt	r1, r1
 8017b46:	f803 2b02 	strb.w	r2, [r3], #2
 8017b4a:	bfb4      	ite	lt
 8017b4c:	222d      	movlt	r2, #45	; 0x2d
 8017b4e:	222b      	movge	r2, #43	; 0x2b
 8017b50:	2909      	cmp	r1, #9
 8017b52:	7042      	strb	r2, [r0, #1]
 8017b54:	dd2a      	ble.n	8017bac <__exponent+0x70>
 8017b56:	f10d 0407 	add.w	r4, sp, #7
 8017b5a:	46a4      	mov	ip, r4
 8017b5c:	270a      	movs	r7, #10
 8017b5e:	46a6      	mov	lr, r4
 8017b60:	460a      	mov	r2, r1
 8017b62:	fb91 f6f7 	sdiv	r6, r1, r7
 8017b66:	fb07 1516 	mls	r5, r7, r6, r1
 8017b6a:	3530      	adds	r5, #48	; 0x30
 8017b6c:	2a63      	cmp	r2, #99	; 0x63
 8017b6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017b72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017b76:	4631      	mov	r1, r6
 8017b78:	dcf1      	bgt.n	8017b5e <__exponent+0x22>
 8017b7a:	3130      	adds	r1, #48	; 0x30
 8017b7c:	f1ae 0502 	sub.w	r5, lr, #2
 8017b80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017b84:	1c44      	adds	r4, r0, #1
 8017b86:	4629      	mov	r1, r5
 8017b88:	4561      	cmp	r1, ip
 8017b8a:	d30a      	bcc.n	8017ba2 <__exponent+0x66>
 8017b8c:	f10d 0209 	add.w	r2, sp, #9
 8017b90:	eba2 020e 	sub.w	r2, r2, lr
 8017b94:	4565      	cmp	r5, ip
 8017b96:	bf88      	it	hi
 8017b98:	2200      	movhi	r2, #0
 8017b9a:	4413      	add	r3, r2
 8017b9c:	1a18      	subs	r0, r3, r0
 8017b9e:	b003      	add	sp, #12
 8017ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017ba6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017baa:	e7ed      	b.n	8017b88 <__exponent+0x4c>
 8017bac:	2330      	movs	r3, #48	; 0x30
 8017bae:	3130      	adds	r1, #48	; 0x30
 8017bb0:	7083      	strb	r3, [r0, #2]
 8017bb2:	70c1      	strb	r1, [r0, #3]
 8017bb4:	1d03      	adds	r3, r0, #4
 8017bb6:	e7f1      	b.n	8017b9c <__exponent+0x60>

08017bb8 <_printf_float>:
 8017bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bbc:	ed2d 8b02 	vpush	{d8}
 8017bc0:	b08d      	sub	sp, #52	; 0x34
 8017bc2:	460c      	mov	r4, r1
 8017bc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017bc8:	4616      	mov	r6, r2
 8017bca:	461f      	mov	r7, r3
 8017bcc:	4605      	mov	r5, r0
 8017bce:	f001 fbed 	bl	80193ac <_localeconv_r>
 8017bd2:	f8d0 a000 	ldr.w	sl, [r0]
 8017bd6:	4650      	mov	r0, sl
 8017bd8:	f7e8 fb4a 	bl	8000270 <strlen>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	930a      	str	r3, [sp, #40]	; 0x28
 8017be0:	6823      	ldr	r3, [r4, #0]
 8017be2:	9305      	str	r3, [sp, #20]
 8017be4:	f8d8 3000 	ldr.w	r3, [r8]
 8017be8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017bec:	3307      	adds	r3, #7
 8017bee:	f023 0307 	bic.w	r3, r3, #7
 8017bf2:	f103 0208 	add.w	r2, r3, #8
 8017bf6:	f8c8 2000 	str.w	r2, [r8]
 8017bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017c02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017c06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017c0a:	9307      	str	r3, [sp, #28]
 8017c0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8017c10:	ee08 0a10 	vmov	s16, r0
 8017c14:	4b9f      	ldr	r3, [pc, #636]	; (8017e94 <_printf_float+0x2dc>)
 8017c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c1e:	f7e8 ff85 	bl	8000b2c <__aeabi_dcmpun>
 8017c22:	bb88      	cbnz	r0, 8017c88 <_printf_float+0xd0>
 8017c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c28:	4b9a      	ldr	r3, [pc, #616]	; (8017e94 <_printf_float+0x2dc>)
 8017c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c2e:	f7e8 ff5f 	bl	8000af0 <__aeabi_dcmple>
 8017c32:	bb48      	cbnz	r0, 8017c88 <_printf_float+0xd0>
 8017c34:	2200      	movs	r2, #0
 8017c36:	2300      	movs	r3, #0
 8017c38:	4640      	mov	r0, r8
 8017c3a:	4649      	mov	r1, r9
 8017c3c:	f7e8 ff4e 	bl	8000adc <__aeabi_dcmplt>
 8017c40:	b110      	cbz	r0, 8017c48 <_printf_float+0x90>
 8017c42:	232d      	movs	r3, #45	; 0x2d
 8017c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c48:	4b93      	ldr	r3, [pc, #588]	; (8017e98 <_printf_float+0x2e0>)
 8017c4a:	4894      	ldr	r0, [pc, #592]	; (8017e9c <_printf_float+0x2e4>)
 8017c4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017c50:	bf94      	ite	ls
 8017c52:	4698      	movls	r8, r3
 8017c54:	4680      	movhi	r8, r0
 8017c56:	2303      	movs	r3, #3
 8017c58:	6123      	str	r3, [r4, #16]
 8017c5a:	9b05      	ldr	r3, [sp, #20]
 8017c5c:	f023 0204 	bic.w	r2, r3, #4
 8017c60:	6022      	str	r2, [r4, #0]
 8017c62:	f04f 0900 	mov.w	r9, #0
 8017c66:	9700      	str	r7, [sp, #0]
 8017c68:	4633      	mov	r3, r6
 8017c6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8017c6c:	4621      	mov	r1, r4
 8017c6e:	4628      	mov	r0, r5
 8017c70:	f000 f9d8 	bl	8018024 <_printf_common>
 8017c74:	3001      	adds	r0, #1
 8017c76:	f040 8090 	bne.w	8017d9a <_printf_float+0x1e2>
 8017c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c7e:	b00d      	add	sp, #52	; 0x34
 8017c80:	ecbd 8b02 	vpop	{d8}
 8017c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c88:	4642      	mov	r2, r8
 8017c8a:	464b      	mov	r3, r9
 8017c8c:	4640      	mov	r0, r8
 8017c8e:	4649      	mov	r1, r9
 8017c90:	f7e8 ff4c 	bl	8000b2c <__aeabi_dcmpun>
 8017c94:	b140      	cbz	r0, 8017ca8 <_printf_float+0xf0>
 8017c96:	464b      	mov	r3, r9
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	bfbc      	itt	lt
 8017c9c:	232d      	movlt	r3, #45	; 0x2d
 8017c9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017ca2:	487f      	ldr	r0, [pc, #508]	; (8017ea0 <_printf_float+0x2e8>)
 8017ca4:	4b7f      	ldr	r3, [pc, #508]	; (8017ea4 <_printf_float+0x2ec>)
 8017ca6:	e7d1      	b.n	8017c4c <_printf_float+0x94>
 8017ca8:	6863      	ldr	r3, [r4, #4]
 8017caa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017cae:	9206      	str	r2, [sp, #24]
 8017cb0:	1c5a      	adds	r2, r3, #1
 8017cb2:	d13f      	bne.n	8017d34 <_printf_float+0x17c>
 8017cb4:	2306      	movs	r3, #6
 8017cb6:	6063      	str	r3, [r4, #4]
 8017cb8:	9b05      	ldr	r3, [sp, #20]
 8017cba:	6861      	ldr	r1, [r4, #4]
 8017cbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	9303      	str	r3, [sp, #12]
 8017cc4:	ab0a      	add	r3, sp, #40	; 0x28
 8017cc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017cca:	ab09      	add	r3, sp, #36	; 0x24
 8017ccc:	ec49 8b10 	vmov	d0, r8, r9
 8017cd0:	9300      	str	r3, [sp, #0]
 8017cd2:	6022      	str	r2, [r4, #0]
 8017cd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017cd8:	4628      	mov	r0, r5
 8017cda:	f7ff fecd 	bl	8017a78 <__cvt>
 8017cde:	9b06      	ldr	r3, [sp, #24]
 8017ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ce2:	2b47      	cmp	r3, #71	; 0x47
 8017ce4:	4680      	mov	r8, r0
 8017ce6:	d108      	bne.n	8017cfa <_printf_float+0x142>
 8017ce8:	1cc8      	adds	r0, r1, #3
 8017cea:	db02      	blt.n	8017cf2 <_printf_float+0x13a>
 8017cec:	6863      	ldr	r3, [r4, #4]
 8017cee:	4299      	cmp	r1, r3
 8017cf0:	dd41      	ble.n	8017d76 <_printf_float+0x1be>
 8017cf2:	f1ab 0b02 	sub.w	fp, fp, #2
 8017cf6:	fa5f fb8b 	uxtb.w	fp, fp
 8017cfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017cfe:	d820      	bhi.n	8017d42 <_printf_float+0x18a>
 8017d00:	3901      	subs	r1, #1
 8017d02:	465a      	mov	r2, fp
 8017d04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017d08:	9109      	str	r1, [sp, #36]	; 0x24
 8017d0a:	f7ff ff17 	bl	8017b3c <__exponent>
 8017d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d10:	1813      	adds	r3, r2, r0
 8017d12:	2a01      	cmp	r2, #1
 8017d14:	4681      	mov	r9, r0
 8017d16:	6123      	str	r3, [r4, #16]
 8017d18:	dc02      	bgt.n	8017d20 <_printf_float+0x168>
 8017d1a:	6822      	ldr	r2, [r4, #0]
 8017d1c:	07d2      	lsls	r2, r2, #31
 8017d1e:	d501      	bpl.n	8017d24 <_printf_float+0x16c>
 8017d20:	3301      	adds	r3, #1
 8017d22:	6123      	str	r3, [r4, #16]
 8017d24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d09c      	beq.n	8017c66 <_printf_float+0xae>
 8017d2c:	232d      	movs	r3, #45	; 0x2d
 8017d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d32:	e798      	b.n	8017c66 <_printf_float+0xae>
 8017d34:	9a06      	ldr	r2, [sp, #24]
 8017d36:	2a47      	cmp	r2, #71	; 0x47
 8017d38:	d1be      	bne.n	8017cb8 <_printf_float+0x100>
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d1bc      	bne.n	8017cb8 <_printf_float+0x100>
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e7b9      	b.n	8017cb6 <_printf_float+0xfe>
 8017d42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017d46:	d118      	bne.n	8017d7a <_printf_float+0x1c2>
 8017d48:	2900      	cmp	r1, #0
 8017d4a:	6863      	ldr	r3, [r4, #4]
 8017d4c:	dd0b      	ble.n	8017d66 <_printf_float+0x1ae>
 8017d4e:	6121      	str	r1, [r4, #16]
 8017d50:	b913      	cbnz	r3, 8017d58 <_printf_float+0x1a0>
 8017d52:	6822      	ldr	r2, [r4, #0]
 8017d54:	07d0      	lsls	r0, r2, #31
 8017d56:	d502      	bpl.n	8017d5e <_printf_float+0x1a6>
 8017d58:	3301      	adds	r3, #1
 8017d5a:	440b      	add	r3, r1
 8017d5c:	6123      	str	r3, [r4, #16]
 8017d5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8017d60:	f04f 0900 	mov.w	r9, #0
 8017d64:	e7de      	b.n	8017d24 <_printf_float+0x16c>
 8017d66:	b913      	cbnz	r3, 8017d6e <_printf_float+0x1b6>
 8017d68:	6822      	ldr	r2, [r4, #0]
 8017d6a:	07d2      	lsls	r2, r2, #31
 8017d6c:	d501      	bpl.n	8017d72 <_printf_float+0x1ba>
 8017d6e:	3302      	adds	r3, #2
 8017d70:	e7f4      	b.n	8017d5c <_printf_float+0x1a4>
 8017d72:	2301      	movs	r3, #1
 8017d74:	e7f2      	b.n	8017d5c <_printf_float+0x1a4>
 8017d76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d7c:	4299      	cmp	r1, r3
 8017d7e:	db05      	blt.n	8017d8c <_printf_float+0x1d4>
 8017d80:	6823      	ldr	r3, [r4, #0]
 8017d82:	6121      	str	r1, [r4, #16]
 8017d84:	07d8      	lsls	r0, r3, #31
 8017d86:	d5ea      	bpl.n	8017d5e <_printf_float+0x1a6>
 8017d88:	1c4b      	adds	r3, r1, #1
 8017d8a:	e7e7      	b.n	8017d5c <_printf_float+0x1a4>
 8017d8c:	2900      	cmp	r1, #0
 8017d8e:	bfd4      	ite	le
 8017d90:	f1c1 0202 	rsble	r2, r1, #2
 8017d94:	2201      	movgt	r2, #1
 8017d96:	4413      	add	r3, r2
 8017d98:	e7e0      	b.n	8017d5c <_printf_float+0x1a4>
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	055a      	lsls	r2, r3, #21
 8017d9e:	d407      	bmi.n	8017db0 <_printf_float+0x1f8>
 8017da0:	6923      	ldr	r3, [r4, #16]
 8017da2:	4642      	mov	r2, r8
 8017da4:	4631      	mov	r1, r6
 8017da6:	4628      	mov	r0, r5
 8017da8:	47b8      	blx	r7
 8017daa:	3001      	adds	r0, #1
 8017dac:	d12c      	bne.n	8017e08 <_printf_float+0x250>
 8017dae:	e764      	b.n	8017c7a <_printf_float+0xc2>
 8017db0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017db4:	f240 80e0 	bls.w	8017f78 <_printf_float+0x3c0>
 8017db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	f7e8 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8017dc4:	2800      	cmp	r0, #0
 8017dc6:	d034      	beq.n	8017e32 <_printf_float+0x27a>
 8017dc8:	4a37      	ldr	r2, [pc, #220]	; (8017ea8 <_printf_float+0x2f0>)
 8017dca:	2301      	movs	r3, #1
 8017dcc:	4631      	mov	r1, r6
 8017dce:	4628      	mov	r0, r5
 8017dd0:	47b8      	blx	r7
 8017dd2:	3001      	adds	r0, #1
 8017dd4:	f43f af51 	beq.w	8017c7a <_printf_float+0xc2>
 8017dd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017ddc:	429a      	cmp	r2, r3
 8017dde:	db02      	blt.n	8017de6 <_printf_float+0x22e>
 8017de0:	6823      	ldr	r3, [r4, #0]
 8017de2:	07d8      	lsls	r0, r3, #31
 8017de4:	d510      	bpl.n	8017e08 <_printf_float+0x250>
 8017de6:	ee18 3a10 	vmov	r3, s16
 8017dea:	4652      	mov	r2, sl
 8017dec:	4631      	mov	r1, r6
 8017dee:	4628      	mov	r0, r5
 8017df0:	47b8      	blx	r7
 8017df2:	3001      	adds	r0, #1
 8017df4:	f43f af41 	beq.w	8017c7a <_printf_float+0xc2>
 8017df8:	f04f 0800 	mov.w	r8, #0
 8017dfc:	f104 091a 	add.w	r9, r4, #26
 8017e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e02:	3b01      	subs	r3, #1
 8017e04:	4543      	cmp	r3, r8
 8017e06:	dc09      	bgt.n	8017e1c <_printf_float+0x264>
 8017e08:	6823      	ldr	r3, [r4, #0]
 8017e0a:	079b      	lsls	r3, r3, #30
 8017e0c:	f100 8105 	bmi.w	801801a <_printf_float+0x462>
 8017e10:	68e0      	ldr	r0, [r4, #12]
 8017e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e14:	4298      	cmp	r0, r3
 8017e16:	bfb8      	it	lt
 8017e18:	4618      	movlt	r0, r3
 8017e1a:	e730      	b.n	8017c7e <_printf_float+0xc6>
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	464a      	mov	r2, r9
 8017e20:	4631      	mov	r1, r6
 8017e22:	4628      	mov	r0, r5
 8017e24:	47b8      	blx	r7
 8017e26:	3001      	adds	r0, #1
 8017e28:	f43f af27 	beq.w	8017c7a <_printf_float+0xc2>
 8017e2c:	f108 0801 	add.w	r8, r8, #1
 8017e30:	e7e6      	b.n	8017e00 <_printf_float+0x248>
 8017e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e34:	2b00      	cmp	r3, #0
 8017e36:	dc39      	bgt.n	8017eac <_printf_float+0x2f4>
 8017e38:	4a1b      	ldr	r2, [pc, #108]	; (8017ea8 <_printf_float+0x2f0>)
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	4631      	mov	r1, r6
 8017e3e:	4628      	mov	r0, r5
 8017e40:	47b8      	blx	r7
 8017e42:	3001      	adds	r0, #1
 8017e44:	f43f af19 	beq.w	8017c7a <_printf_float+0xc2>
 8017e48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e4c:	4313      	orrs	r3, r2
 8017e4e:	d102      	bne.n	8017e56 <_printf_float+0x29e>
 8017e50:	6823      	ldr	r3, [r4, #0]
 8017e52:	07d9      	lsls	r1, r3, #31
 8017e54:	d5d8      	bpl.n	8017e08 <_printf_float+0x250>
 8017e56:	ee18 3a10 	vmov	r3, s16
 8017e5a:	4652      	mov	r2, sl
 8017e5c:	4631      	mov	r1, r6
 8017e5e:	4628      	mov	r0, r5
 8017e60:	47b8      	blx	r7
 8017e62:	3001      	adds	r0, #1
 8017e64:	f43f af09 	beq.w	8017c7a <_printf_float+0xc2>
 8017e68:	f04f 0900 	mov.w	r9, #0
 8017e6c:	f104 0a1a 	add.w	sl, r4, #26
 8017e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e72:	425b      	negs	r3, r3
 8017e74:	454b      	cmp	r3, r9
 8017e76:	dc01      	bgt.n	8017e7c <_printf_float+0x2c4>
 8017e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e7a:	e792      	b.n	8017da2 <_printf_float+0x1ea>
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	4652      	mov	r2, sl
 8017e80:	4631      	mov	r1, r6
 8017e82:	4628      	mov	r0, r5
 8017e84:	47b8      	blx	r7
 8017e86:	3001      	adds	r0, #1
 8017e88:	f43f aef7 	beq.w	8017c7a <_printf_float+0xc2>
 8017e8c:	f109 0901 	add.w	r9, r9, #1
 8017e90:	e7ee      	b.n	8017e70 <_printf_float+0x2b8>
 8017e92:	bf00      	nop
 8017e94:	7fefffff 	.word	0x7fefffff
 8017e98:	0801ae5c 	.word	0x0801ae5c
 8017e9c:	0801ae60 	.word	0x0801ae60
 8017ea0:	0801ae68 	.word	0x0801ae68
 8017ea4:	0801ae64 	.word	0x0801ae64
 8017ea8:	0801ae6c 	.word	0x0801ae6c
 8017eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017eae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	bfa8      	it	ge
 8017eb4:	461a      	movge	r2, r3
 8017eb6:	2a00      	cmp	r2, #0
 8017eb8:	4691      	mov	r9, r2
 8017eba:	dc37      	bgt.n	8017f2c <_printf_float+0x374>
 8017ebc:	f04f 0b00 	mov.w	fp, #0
 8017ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017ec4:	f104 021a 	add.w	r2, r4, #26
 8017ec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017eca:	9305      	str	r3, [sp, #20]
 8017ecc:	eba3 0309 	sub.w	r3, r3, r9
 8017ed0:	455b      	cmp	r3, fp
 8017ed2:	dc33      	bgt.n	8017f3c <_printf_float+0x384>
 8017ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	db3b      	blt.n	8017f54 <_printf_float+0x39c>
 8017edc:	6823      	ldr	r3, [r4, #0]
 8017ede:	07da      	lsls	r2, r3, #31
 8017ee0:	d438      	bmi.n	8017f54 <_printf_float+0x39c>
 8017ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ee4:	9b05      	ldr	r3, [sp, #20]
 8017ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ee8:	1ad3      	subs	r3, r2, r3
 8017eea:	eba2 0901 	sub.w	r9, r2, r1
 8017eee:	4599      	cmp	r9, r3
 8017ef0:	bfa8      	it	ge
 8017ef2:	4699      	movge	r9, r3
 8017ef4:	f1b9 0f00 	cmp.w	r9, #0
 8017ef8:	dc35      	bgt.n	8017f66 <_printf_float+0x3ae>
 8017efa:	f04f 0800 	mov.w	r8, #0
 8017efe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f02:	f104 0a1a 	add.w	sl, r4, #26
 8017f06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f0a:	1a9b      	subs	r3, r3, r2
 8017f0c:	eba3 0309 	sub.w	r3, r3, r9
 8017f10:	4543      	cmp	r3, r8
 8017f12:	f77f af79 	ble.w	8017e08 <_printf_float+0x250>
 8017f16:	2301      	movs	r3, #1
 8017f18:	4652      	mov	r2, sl
 8017f1a:	4631      	mov	r1, r6
 8017f1c:	4628      	mov	r0, r5
 8017f1e:	47b8      	blx	r7
 8017f20:	3001      	adds	r0, #1
 8017f22:	f43f aeaa 	beq.w	8017c7a <_printf_float+0xc2>
 8017f26:	f108 0801 	add.w	r8, r8, #1
 8017f2a:	e7ec      	b.n	8017f06 <_printf_float+0x34e>
 8017f2c:	4613      	mov	r3, r2
 8017f2e:	4631      	mov	r1, r6
 8017f30:	4642      	mov	r2, r8
 8017f32:	4628      	mov	r0, r5
 8017f34:	47b8      	blx	r7
 8017f36:	3001      	adds	r0, #1
 8017f38:	d1c0      	bne.n	8017ebc <_printf_float+0x304>
 8017f3a:	e69e      	b.n	8017c7a <_printf_float+0xc2>
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	4631      	mov	r1, r6
 8017f40:	4628      	mov	r0, r5
 8017f42:	9205      	str	r2, [sp, #20]
 8017f44:	47b8      	blx	r7
 8017f46:	3001      	adds	r0, #1
 8017f48:	f43f ae97 	beq.w	8017c7a <_printf_float+0xc2>
 8017f4c:	9a05      	ldr	r2, [sp, #20]
 8017f4e:	f10b 0b01 	add.w	fp, fp, #1
 8017f52:	e7b9      	b.n	8017ec8 <_printf_float+0x310>
 8017f54:	ee18 3a10 	vmov	r3, s16
 8017f58:	4652      	mov	r2, sl
 8017f5a:	4631      	mov	r1, r6
 8017f5c:	4628      	mov	r0, r5
 8017f5e:	47b8      	blx	r7
 8017f60:	3001      	adds	r0, #1
 8017f62:	d1be      	bne.n	8017ee2 <_printf_float+0x32a>
 8017f64:	e689      	b.n	8017c7a <_printf_float+0xc2>
 8017f66:	9a05      	ldr	r2, [sp, #20]
 8017f68:	464b      	mov	r3, r9
 8017f6a:	4442      	add	r2, r8
 8017f6c:	4631      	mov	r1, r6
 8017f6e:	4628      	mov	r0, r5
 8017f70:	47b8      	blx	r7
 8017f72:	3001      	adds	r0, #1
 8017f74:	d1c1      	bne.n	8017efa <_printf_float+0x342>
 8017f76:	e680      	b.n	8017c7a <_printf_float+0xc2>
 8017f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f7a:	2a01      	cmp	r2, #1
 8017f7c:	dc01      	bgt.n	8017f82 <_printf_float+0x3ca>
 8017f7e:	07db      	lsls	r3, r3, #31
 8017f80:	d538      	bpl.n	8017ff4 <_printf_float+0x43c>
 8017f82:	2301      	movs	r3, #1
 8017f84:	4642      	mov	r2, r8
 8017f86:	4631      	mov	r1, r6
 8017f88:	4628      	mov	r0, r5
 8017f8a:	47b8      	blx	r7
 8017f8c:	3001      	adds	r0, #1
 8017f8e:	f43f ae74 	beq.w	8017c7a <_printf_float+0xc2>
 8017f92:	ee18 3a10 	vmov	r3, s16
 8017f96:	4652      	mov	r2, sl
 8017f98:	4631      	mov	r1, r6
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	47b8      	blx	r7
 8017f9e:	3001      	adds	r0, #1
 8017fa0:	f43f ae6b 	beq.w	8017c7a <_printf_float+0xc2>
 8017fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017fa8:	2200      	movs	r2, #0
 8017faa:	2300      	movs	r3, #0
 8017fac:	f7e8 fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017fb0:	b9d8      	cbnz	r0, 8017fea <_printf_float+0x432>
 8017fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fb4:	f108 0201 	add.w	r2, r8, #1
 8017fb8:	3b01      	subs	r3, #1
 8017fba:	4631      	mov	r1, r6
 8017fbc:	4628      	mov	r0, r5
 8017fbe:	47b8      	blx	r7
 8017fc0:	3001      	adds	r0, #1
 8017fc2:	d10e      	bne.n	8017fe2 <_printf_float+0x42a>
 8017fc4:	e659      	b.n	8017c7a <_printf_float+0xc2>
 8017fc6:	2301      	movs	r3, #1
 8017fc8:	4652      	mov	r2, sl
 8017fca:	4631      	mov	r1, r6
 8017fcc:	4628      	mov	r0, r5
 8017fce:	47b8      	blx	r7
 8017fd0:	3001      	adds	r0, #1
 8017fd2:	f43f ae52 	beq.w	8017c7a <_printf_float+0xc2>
 8017fd6:	f108 0801 	add.w	r8, r8, #1
 8017fda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017fdc:	3b01      	subs	r3, #1
 8017fde:	4543      	cmp	r3, r8
 8017fe0:	dcf1      	bgt.n	8017fc6 <_printf_float+0x40e>
 8017fe2:	464b      	mov	r3, r9
 8017fe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017fe8:	e6dc      	b.n	8017da4 <_printf_float+0x1ec>
 8017fea:	f04f 0800 	mov.w	r8, #0
 8017fee:	f104 0a1a 	add.w	sl, r4, #26
 8017ff2:	e7f2      	b.n	8017fda <_printf_float+0x422>
 8017ff4:	2301      	movs	r3, #1
 8017ff6:	4642      	mov	r2, r8
 8017ff8:	e7df      	b.n	8017fba <_printf_float+0x402>
 8017ffa:	2301      	movs	r3, #1
 8017ffc:	464a      	mov	r2, r9
 8017ffe:	4631      	mov	r1, r6
 8018000:	4628      	mov	r0, r5
 8018002:	47b8      	blx	r7
 8018004:	3001      	adds	r0, #1
 8018006:	f43f ae38 	beq.w	8017c7a <_printf_float+0xc2>
 801800a:	f108 0801 	add.w	r8, r8, #1
 801800e:	68e3      	ldr	r3, [r4, #12]
 8018010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018012:	1a5b      	subs	r3, r3, r1
 8018014:	4543      	cmp	r3, r8
 8018016:	dcf0      	bgt.n	8017ffa <_printf_float+0x442>
 8018018:	e6fa      	b.n	8017e10 <_printf_float+0x258>
 801801a:	f04f 0800 	mov.w	r8, #0
 801801e:	f104 0919 	add.w	r9, r4, #25
 8018022:	e7f4      	b.n	801800e <_printf_float+0x456>

08018024 <_printf_common>:
 8018024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018028:	4616      	mov	r6, r2
 801802a:	4699      	mov	r9, r3
 801802c:	688a      	ldr	r2, [r1, #8]
 801802e:	690b      	ldr	r3, [r1, #16]
 8018030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018034:	4293      	cmp	r3, r2
 8018036:	bfb8      	it	lt
 8018038:	4613      	movlt	r3, r2
 801803a:	6033      	str	r3, [r6, #0]
 801803c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018040:	4607      	mov	r7, r0
 8018042:	460c      	mov	r4, r1
 8018044:	b10a      	cbz	r2, 801804a <_printf_common+0x26>
 8018046:	3301      	adds	r3, #1
 8018048:	6033      	str	r3, [r6, #0]
 801804a:	6823      	ldr	r3, [r4, #0]
 801804c:	0699      	lsls	r1, r3, #26
 801804e:	bf42      	ittt	mi
 8018050:	6833      	ldrmi	r3, [r6, #0]
 8018052:	3302      	addmi	r3, #2
 8018054:	6033      	strmi	r3, [r6, #0]
 8018056:	6825      	ldr	r5, [r4, #0]
 8018058:	f015 0506 	ands.w	r5, r5, #6
 801805c:	d106      	bne.n	801806c <_printf_common+0x48>
 801805e:	f104 0a19 	add.w	sl, r4, #25
 8018062:	68e3      	ldr	r3, [r4, #12]
 8018064:	6832      	ldr	r2, [r6, #0]
 8018066:	1a9b      	subs	r3, r3, r2
 8018068:	42ab      	cmp	r3, r5
 801806a:	dc26      	bgt.n	80180ba <_printf_common+0x96>
 801806c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018070:	1e13      	subs	r3, r2, #0
 8018072:	6822      	ldr	r2, [r4, #0]
 8018074:	bf18      	it	ne
 8018076:	2301      	movne	r3, #1
 8018078:	0692      	lsls	r2, r2, #26
 801807a:	d42b      	bmi.n	80180d4 <_printf_common+0xb0>
 801807c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018080:	4649      	mov	r1, r9
 8018082:	4638      	mov	r0, r7
 8018084:	47c0      	blx	r8
 8018086:	3001      	adds	r0, #1
 8018088:	d01e      	beq.n	80180c8 <_printf_common+0xa4>
 801808a:	6823      	ldr	r3, [r4, #0]
 801808c:	68e5      	ldr	r5, [r4, #12]
 801808e:	6832      	ldr	r2, [r6, #0]
 8018090:	f003 0306 	and.w	r3, r3, #6
 8018094:	2b04      	cmp	r3, #4
 8018096:	bf08      	it	eq
 8018098:	1aad      	subeq	r5, r5, r2
 801809a:	68a3      	ldr	r3, [r4, #8]
 801809c:	6922      	ldr	r2, [r4, #16]
 801809e:	bf0c      	ite	eq
 80180a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180a4:	2500      	movne	r5, #0
 80180a6:	4293      	cmp	r3, r2
 80180a8:	bfc4      	itt	gt
 80180aa:	1a9b      	subgt	r3, r3, r2
 80180ac:	18ed      	addgt	r5, r5, r3
 80180ae:	2600      	movs	r6, #0
 80180b0:	341a      	adds	r4, #26
 80180b2:	42b5      	cmp	r5, r6
 80180b4:	d11a      	bne.n	80180ec <_printf_common+0xc8>
 80180b6:	2000      	movs	r0, #0
 80180b8:	e008      	b.n	80180cc <_printf_common+0xa8>
 80180ba:	2301      	movs	r3, #1
 80180bc:	4652      	mov	r2, sl
 80180be:	4649      	mov	r1, r9
 80180c0:	4638      	mov	r0, r7
 80180c2:	47c0      	blx	r8
 80180c4:	3001      	adds	r0, #1
 80180c6:	d103      	bne.n	80180d0 <_printf_common+0xac>
 80180c8:	f04f 30ff 	mov.w	r0, #4294967295
 80180cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180d0:	3501      	adds	r5, #1
 80180d2:	e7c6      	b.n	8018062 <_printf_common+0x3e>
 80180d4:	18e1      	adds	r1, r4, r3
 80180d6:	1c5a      	adds	r2, r3, #1
 80180d8:	2030      	movs	r0, #48	; 0x30
 80180da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80180de:	4422      	add	r2, r4
 80180e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80180e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80180e8:	3302      	adds	r3, #2
 80180ea:	e7c7      	b.n	801807c <_printf_common+0x58>
 80180ec:	2301      	movs	r3, #1
 80180ee:	4622      	mov	r2, r4
 80180f0:	4649      	mov	r1, r9
 80180f2:	4638      	mov	r0, r7
 80180f4:	47c0      	blx	r8
 80180f6:	3001      	adds	r0, #1
 80180f8:	d0e6      	beq.n	80180c8 <_printf_common+0xa4>
 80180fa:	3601      	adds	r6, #1
 80180fc:	e7d9      	b.n	80180b2 <_printf_common+0x8e>
	...

08018100 <_printf_i>:
 8018100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018104:	460c      	mov	r4, r1
 8018106:	4691      	mov	r9, r2
 8018108:	7e27      	ldrb	r7, [r4, #24]
 801810a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801810c:	2f78      	cmp	r7, #120	; 0x78
 801810e:	4680      	mov	r8, r0
 8018110:	469a      	mov	sl, r3
 8018112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018116:	d807      	bhi.n	8018128 <_printf_i+0x28>
 8018118:	2f62      	cmp	r7, #98	; 0x62
 801811a:	d80a      	bhi.n	8018132 <_printf_i+0x32>
 801811c:	2f00      	cmp	r7, #0
 801811e:	f000 80d8 	beq.w	80182d2 <_printf_i+0x1d2>
 8018122:	2f58      	cmp	r7, #88	; 0x58
 8018124:	f000 80a3 	beq.w	801826e <_printf_i+0x16e>
 8018128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801812c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018130:	e03a      	b.n	80181a8 <_printf_i+0xa8>
 8018132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018136:	2b15      	cmp	r3, #21
 8018138:	d8f6      	bhi.n	8018128 <_printf_i+0x28>
 801813a:	a001      	add	r0, pc, #4	; (adr r0, 8018140 <_printf_i+0x40>)
 801813c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018140:	08018199 	.word	0x08018199
 8018144:	080181ad 	.word	0x080181ad
 8018148:	08018129 	.word	0x08018129
 801814c:	08018129 	.word	0x08018129
 8018150:	08018129 	.word	0x08018129
 8018154:	08018129 	.word	0x08018129
 8018158:	080181ad 	.word	0x080181ad
 801815c:	08018129 	.word	0x08018129
 8018160:	08018129 	.word	0x08018129
 8018164:	08018129 	.word	0x08018129
 8018168:	08018129 	.word	0x08018129
 801816c:	080182b9 	.word	0x080182b9
 8018170:	080181dd 	.word	0x080181dd
 8018174:	0801829b 	.word	0x0801829b
 8018178:	08018129 	.word	0x08018129
 801817c:	08018129 	.word	0x08018129
 8018180:	080182db 	.word	0x080182db
 8018184:	08018129 	.word	0x08018129
 8018188:	080181dd 	.word	0x080181dd
 801818c:	08018129 	.word	0x08018129
 8018190:	08018129 	.word	0x08018129
 8018194:	080182a3 	.word	0x080182a3
 8018198:	680b      	ldr	r3, [r1, #0]
 801819a:	1d1a      	adds	r2, r3, #4
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	600a      	str	r2, [r1, #0]
 80181a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80181a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181a8:	2301      	movs	r3, #1
 80181aa:	e0a3      	b.n	80182f4 <_printf_i+0x1f4>
 80181ac:	6825      	ldr	r5, [r4, #0]
 80181ae:	6808      	ldr	r0, [r1, #0]
 80181b0:	062e      	lsls	r6, r5, #24
 80181b2:	f100 0304 	add.w	r3, r0, #4
 80181b6:	d50a      	bpl.n	80181ce <_printf_i+0xce>
 80181b8:	6805      	ldr	r5, [r0, #0]
 80181ba:	600b      	str	r3, [r1, #0]
 80181bc:	2d00      	cmp	r5, #0
 80181be:	da03      	bge.n	80181c8 <_printf_i+0xc8>
 80181c0:	232d      	movs	r3, #45	; 0x2d
 80181c2:	426d      	negs	r5, r5
 80181c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181c8:	485e      	ldr	r0, [pc, #376]	; (8018344 <_printf_i+0x244>)
 80181ca:	230a      	movs	r3, #10
 80181cc:	e019      	b.n	8018202 <_printf_i+0x102>
 80181ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80181d2:	6805      	ldr	r5, [r0, #0]
 80181d4:	600b      	str	r3, [r1, #0]
 80181d6:	bf18      	it	ne
 80181d8:	b22d      	sxthne	r5, r5
 80181da:	e7ef      	b.n	80181bc <_printf_i+0xbc>
 80181dc:	680b      	ldr	r3, [r1, #0]
 80181de:	6825      	ldr	r5, [r4, #0]
 80181e0:	1d18      	adds	r0, r3, #4
 80181e2:	6008      	str	r0, [r1, #0]
 80181e4:	0628      	lsls	r0, r5, #24
 80181e6:	d501      	bpl.n	80181ec <_printf_i+0xec>
 80181e8:	681d      	ldr	r5, [r3, #0]
 80181ea:	e002      	b.n	80181f2 <_printf_i+0xf2>
 80181ec:	0669      	lsls	r1, r5, #25
 80181ee:	d5fb      	bpl.n	80181e8 <_printf_i+0xe8>
 80181f0:	881d      	ldrh	r5, [r3, #0]
 80181f2:	4854      	ldr	r0, [pc, #336]	; (8018344 <_printf_i+0x244>)
 80181f4:	2f6f      	cmp	r7, #111	; 0x6f
 80181f6:	bf0c      	ite	eq
 80181f8:	2308      	moveq	r3, #8
 80181fa:	230a      	movne	r3, #10
 80181fc:	2100      	movs	r1, #0
 80181fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018202:	6866      	ldr	r6, [r4, #4]
 8018204:	60a6      	str	r6, [r4, #8]
 8018206:	2e00      	cmp	r6, #0
 8018208:	bfa2      	ittt	ge
 801820a:	6821      	ldrge	r1, [r4, #0]
 801820c:	f021 0104 	bicge.w	r1, r1, #4
 8018210:	6021      	strge	r1, [r4, #0]
 8018212:	b90d      	cbnz	r5, 8018218 <_printf_i+0x118>
 8018214:	2e00      	cmp	r6, #0
 8018216:	d04d      	beq.n	80182b4 <_printf_i+0x1b4>
 8018218:	4616      	mov	r6, r2
 801821a:	fbb5 f1f3 	udiv	r1, r5, r3
 801821e:	fb03 5711 	mls	r7, r3, r1, r5
 8018222:	5dc7      	ldrb	r7, [r0, r7]
 8018224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018228:	462f      	mov	r7, r5
 801822a:	42bb      	cmp	r3, r7
 801822c:	460d      	mov	r5, r1
 801822e:	d9f4      	bls.n	801821a <_printf_i+0x11a>
 8018230:	2b08      	cmp	r3, #8
 8018232:	d10b      	bne.n	801824c <_printf_i+0x14c>
 8018234:	6823      	ldr	r3, [r4, #0]
 8018236:	07df      	lsls	r7, r3, #31
 8018238:	d508      	bpl.n	801824c <_printf_i+0x14c>
 801823a:	6923      	ldr	r3, [r4, #16]
 801823c:	6861      	ldr	r1, [r4, #4]
 801823e:	4299      	cmp	r1, r3
 8018240:	bfde      	ittt	le
 8018242:	2330      	movle	r3, #48	; 0x30
 8018244:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018248:	f106 36ff 	addle.w	r6, r6, #4294967295
 801824c:	1b92      	subs	r2, r2, r6
 801824e:	6122      	str	r2, [r4, #16]
 8018250:	f8cd a000 	str.w	sl, [sp]
 8018254:	464b      	mov	r3, r9
 8018256:	aa03      	add	r2, sp, #12
 8018258:	4621      	mov	r1, r4
 801825a:	4640      	mov	r0, r8
 801825c:	f7ff fee2 	bl	8018024 <_printf_common>
 8018260:	3001      	adds	r0, #1
 8018262:	d14c      	bne.n	80182fe <_printf_i+0x1fe>
 8018264:	f04f 30ff 	mov.w	r0, #4294967295
 8018268:	b004      	add	sp, #16
 801826a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801826e:	4835      	ldr	r0, [pc, #212]	; (8018344 <_printf_i+0x244>)
 8018270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018274:	6823      	ldr	r3, [r4, #0]
 8018276:	680e      	ldr	r6, [r1, #0]
 8018278:	061f      	lsls	r7, r3, #24
 801827a:	f856 5b04 	ldr.w	r5, [r6], #4
 801827e:	600e      	str	r6, [r1, #0]
 8018280:	d514      	bpl.n	80182ac <_printf_i+0x1ac>
 8018282:	07d9      	lsls	r1, r3, #31
 8018284:	bf44      	itt	mi
 8018286:	f043 0320 	orrmi.w	r3, r3, #32
 801828a:	6023      	strmi	r3, [r4, #0]
 801828c:	b91d      	cbnz	r5, 8018296 <_printf_i+0x196>
 801828e:	6823      	ldr	r3, [r4, #0]
 8018290:	f023 0320 	bic.w	r3, r3, #32
 8018294:	6023      	str	r3, [r4, #0]
 8018296:	2310      	movs	r3, #16
 8018298:	e7b0      	b.n	80181fc <_printf_i+0xfc>
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	f043 0320 	orr.w	r3, r3, #32
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	2378      	movs	r3, #120	; 0x78
 80182a4:	4828      	ldr	r0, [pc, #160]	; (8018348 <_printf_i+0x248>)
 80182a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80182aa:	e7e3      	b.n	8018274 <_printf_i+0x174>
 80182ac:	065e      	lsls	r6, r3, #25
 80182ae:	bf48      	it	mi
 80182b0:	b2ad      	uxthmi	r5, r5
 80182b2:	e7e6      	b.n	8018282 <_printf_i+0x182>
 80182b4:	4616      	mov	r6, r2
 80182b6:	e7bb      	b.n	8018230 <_printf_i+0x130>
 80182b8:	680b      	ldr	r3, [r1, #0]
 80182ba:	6826      	ldr	r6, [r4, #0]
 80182bc:	6960      	ldr	r0, [r4, #20]
 80182be:	1d1d      	adds	r5, r3, #4
 80182c0:	600d      	str	r5, [r1, #0]
 80182c2:	0635      	lsls	r5, r6, #24
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	d501      	bpl.n	80182cc <_printf_i+0x1cc>
 80182c8:	6018      	str	r0, [r3, #0]
 80182ca:	e002      	b.n	80182d2 <_printf_i+0x1d2>
 80182cc:	0671      	lsls	r1, r6, #25
 80182ce:	d5fb      	bpl.n	80182c8 <_printf_i+0x1c8>
 80182d0:	8018      	strh	r0, [r3, #0]
 80182d2:	2300      	movs	r3, #0
 80182d4:	6123      	str	r3, [r4, #16]
 80182d6:	4616      	mov	r6, r2
 80182d8:	e7ba      	b.n	8018250 <_printf_i+0x150>
 80182da:	680b      	ldr	r3, [r1, #0]
 80182dc:	1d1a      	adds	r2, r3, #4
 80182de:	600a      	str	r2, [r1, #0]
 80182e0:	681e      	ldr	r6, [r3, #0]
 80182e2:	6862      	ldr	r2, [r4, #4]
 80182e4:	2100      	movs	r1, #0
 80182e6:	4630      	mov	r0, r6
 80182e8:	f7e7 ff72 	bl	80001d0 <memchr>
 80182ec:	b108      	cbz	r0, 80182f2 <_printf_i+0x1f2>
 80182ee:	1b80      	subs	r0, r0, r6
 80182f0:	6060      	str	r0, [r4, #4]
 80182f2:	6863      	ldr	r3, [r4, #4]
 80182f4:	6123      	str	r3, [r4, #16]
 80182f6:	2300      	movs	r3, #0
 80182f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182fc:	e7a8      	b.n	8018250 <_printf_i+0x150>
 80182fe:	6923      	ldr	r3, [r4, #16]
 8018300:	4632      	mov	r2, r6
 8018302:	4649      	mov	r1, r9
 8018304:	4640      	mov	r0, r8
 8018306:	47d0      	blx	sl
 8018308:	3001      	adds	r0, #1
 801830a:	d0ab      	beq.n	8018264 <_printf_i+0x164>
 801830c:	6823      	ldr	r3, [r4, #0]
 801830e:	079b      	lsls	r3, r3, #30
 8018310:	d413      	bmi.n	801833a <_printf_i+0x23a>
 8018312:	68e0      	ldr	r0, [r4, #12]
 8018314:	9b03      	ldr	r3, [sp, #12]
 8018316:	4298      	cmp	r0, r3
 8018318:	bfb8      	it	lt
 801831a:	4618      	movlt	r0, r3
 801831c:	e7a4      	b.n	8018268 <_printf_i+0x168>
 801831e:	2301      	movs	r3, #1
 8018320:	4632      	mov	r2, r6
 8018322:	4649      	mov	r1, r9
 8018324:	4640      	mov	r0, r8
 8018326:	47d0      	blx	sl
 8018328:	3001      	adds	r0, #1
 801832a:	d09b      	beq.n	8018264 <_printf_i+0x164>
 801832c:	3501      	adds	r5, #1
 801832e:	68e3      	ldr	r3, [r4, #12]
 8018330:	9903      	ldr	r1, [sp, #12]
 8018332:	1a5b      	subs	r3, r3, r1
 8018334:	42ab      	cmp	r3, r5
 8018336:	dcf2      	bgt.n	801831e <_printf_i+0x21e>
 8018338:	e7eb      	b.n	8018312 <_printf_i+0x212>
 801833a:	2500      	movs	r5, #0
 801833c:	f104 0619 	add.w	r6, r4, #25
 8018340:	e7f5      	b.n	801832e <_printf_i+0x22e>
 8018342:	bf00      	nop
 8018344:	0801ae6e 	.word	0x0801ae6e
 8018348:	0801ae7f 	.word	0x0801ae7f

0801834c <iprintf>:
 801834c:	b40f      	push	{r0, r1, r2, r3}
 801834e:	4b0a      	ldr	r3, [pc, #40]	; (8018378 <iprintf+0x2c>)
 8018350:	b513      	push	{r0, r1, r4, lr}
 8018352:	681c      	ldr	r4, [r3, #0]
 8018354:	b124      	cbz	r4, 8018360 <iprintf+0x14>
 8018356:	69a3      	ldr	r3, [r4, #24]
 8018358:	b913      	cbnz	r3, 8018360 <iprintf+0x14>
 801835a:	4620      	mov	r0, r4
 801835c:	f000 ff88 	bl	8019270 <__sinit>
 8018360:	ab05      	add	r3, sp, #20
 8018362:	9a04      	ldr	r2, [sp, #16]
 8018364:	68a1      	ldr	r1, [r4, #8]
 8018366:	9301      	str	r3, [sp, #4]
 8018368:	4620      	mov	r0, r4
 801836a:	f001 fd45 	bl	8019df8 <_vfiprintf_r>
 801836e:	b002      	add	sp, #8
 8018370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018374:	b004      	add	sp, #16
 8018376:	4770      	bx	lr
 8018378:	200000f0 	.word	0x200000f0

0801837c <_sbrk_r>:
 801837c:	b538      	push	{r3, r4, r5, lr}
 801837e:	4d06      	ldr	r5, [pc, #24]	; (8018398 <_sbrk_r+0x1c>)
 8018380:	2300      	movs	r3, #0
 8018382:	4604      	mov	r4, r0
 8018384:	4608      	mov	r0, r1
 8018386:	602b      	str	r3, [r5, #0]
 8018388:	f7ea fb9c 	bl	8002ac4 <_sbrk>
 801838c:	1c43      	adds	r3, r0, #1
 801838e:	d102      	bne.n	8018396 <_sbrk_r+0x1a>
 8018390:	682b      	ldr	r3, [r5, #0]
 8018392:	b103      	cbz	r3, 8018396 <_sbrk_r+0x1a>
 8018394:	6023      	str	r3, [r4, #0]
 8018396:	bd38      	pop	{r3, r4, r5, pc}
 8018398:	20001a04 	.word	0x20001a04

0801839c <_raise_r>:
 801839c:	291f      	cmp	r1, #31
 801839e:	b538      	push	{r3, r4, r5, lr}
 80183a0:	4604      	mov	r4, r0
 80183a2:	460d      	mov	r5, r1
 80183a4:	d904      	bls.n	80183b0 <_raise_r+0x14>
 80183a6:	2316      	movs	r3, #22
 80183a8:	6003      	str	r3, [r0, #0]
 80183aa:	f04f 30ff 	mov.w	r0, #4294967295
 80183ae:	bd38      	pop	{r3, r4, r5, pc}
 80183b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80183b2:	b112      	cbz	r2, 80183ba <_raise_r+0x1e>
 80183b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183b8:	b94b      	cbnz	r3, 80183ce <_raise_r+0x32>
 80183ba:	4620      	mov	r0, r4
 80183bc:	f000 f830 	bl	8018420 <_getpid_r>
 80183c0:	462a      	mov	r2, r5
 80183c2:	4601      	mov	r1, r0
 80183c4:	4620      	mov	r0, r4
 80183c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183ca:	f000 b817 	b.w	80183fc <_kill_r>
 80183ce:	2b01      	cmp	r3, #1
 80183d0:	d00a      	beq.n	80183e8 <_raise_r+0x4c>
 80183d2:	1c59      	adds	r1, r3, #1
 80183d4:	d103      	bne.n	80183de <_raise_r+0x42>
 80183d6:	2316      	movs	r3, #22
 80183d8:	6003      	str	r3, [r0, #0]
 80183da:	2001      	movs	r0, #1
 80183dc:	e7e7      	b.n	80183ae <_raise_r+0x12>
 80183de:	2400      	movs	r4, #0
 80183e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80183e4:	4628      	mov	r0, r5
 80183e6:	4798      	blx	r3
 80183e8:	2000      	movs	r0, #0
 80183ea:	e7e0      	b.n	80183ae <_raise_r+0x12>

080183ec <raise>:
 80183ec:	4b02      	ldr	r3, [pc, #8]	; (80183f8 <raise+0xc>)
 80183ee:	4601      	mov	r1, r0
 80183f0:	6818      	ldr	r0, [r3, #0]
 80183f2:	f7ff bfd3 	b.w	801839c <_raise_r>
 80183f6:	bf00      	nop
 80183f8:	200000f0 	.word	0x200000f0

080183fc <_kill_r>:
 80183fc:	b538      	push	{r3, r4, r5, lr}
 80183fe:	4d07      	ldr	r5, [pc, #28]	; (801841c <_kill_r+0x20>)
 8018400:	2300      	movs	r3, #0
 8018402:	4604      	mov	r4, r0
 8018404:	4608      	mov	r0, r1
 8018406:	4611      	mov	r1, r2
 8018408:	602b      	str	r3, [r5, #0]
 801840a:	f7ea fad3 	bl	80029b4 <_kill>
 801840e:	1c43      	adds	r3, r0, #1
 8018410:	d102      	bne.n	8018418 <_kill_r+0x1c>
 8018412:	682b      	ldr	r3, [r5, #0]
 8018414:	b103      	cbz	r3, 8018418 <_kill_r+0x1c>
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	bd38      	pop	{r3, r4, r5, pc}
 801841a:	bf00      	nop
 801841c:	20001a04 	.word	0x20001a04

08018420 <_getpid_r>:
 8018420:	f7ea bac0 	b.w	80029a4 <_getpid>

08018424 <sniprintf>:
 8018424:	b40c      	push	{r2, r3}
 8018426:	b530      	push	{r4, r5, lr}
 8018428:	4b17      	ldr	r3, [pc, #92]	; (8018488 <sniprintf+0x64>)
 801842a:	1e0c      	subs	r4, r1, #0
 801842c:	681d      	ldr	r5, [r3, #0]
 801842e:	b09d      	sub	sp, #116	; 0x74
 8018430:	da08      	bge.n	8018444 <sniprintf+0x20>
 8018432:	238b      	movs	r3, #139	; 0x8b
 8018434:	602b      	str	r3, [r5, #0]
 8018436:	f04f 30ff 	mov.w	r0, #4294967295
 801843a:	b01d      	add	sp, #116	; 0x74
 801843c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018440:	b002      	add	sp, #8
 8018442:	4770      	bx	lr
 8018444:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018448:	f8ad 3014 	strh.w	r3, [sp, #20]
 801844c:	bf14      	ite	ne
 801844e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018452:	4623      	moveq	r3, r4
 8018454:	9304      	str	r3, [sp, #16]
 8018456:	9307      	str	r3, [sp, #28]
 8018458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801845c:	9002      	str	r0, [sp, #8]
 801845e:	9006      	str	r0, [sp, #24]
 8018460:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018464:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018466:	ab21      	add	r3, sp, #132	; 0x84
 8018468:	a902      	add	r1, sp, #8
 801846a:	4628      	mov	r0, r5
 801846c:	9301      	str	r3, [sp, #4]
 801846e:	f001 fb99 	bl	8019ba4 <_svfiprintf_r>
 8018472:	1c43      	adds	r3, r0, #1
 8018474:	bfbc      	itt	lt
 8018476:	238b      	movlt	r3, #139	; 0x8b
 8018478:	602b      	strlt	r3, [r5, #0]
 801847a:	2c00      	cmp	r4, #0
 801847c:	d0dd      	beq.n	801843a <sniprintf+0x16>
 801847e:	9b02      	ldr	r3, [sp, #8]
 8018480:	2200      	movs	r2, #0
 8018482:	701a      	strb	r2, [r3, #0]
 8018484:	e7d9      	b.n	801843a <sniprintf+0x16>
 8018486:	bf00      	nop
 8018488:	200000f0 	.word	0x200000f0

0801848c <siprintf>:
 801848c:	b40e      	push	{r1, r2, r3}
 801848e:	b500      	push	{lr}
 8018490:	b09c      	sub	sp, #112	; 0x70
 8018492:	ab1d      	add	r3, sp, #116	; 0x74
 8018494:	9002      	str	r0, [sp, #8]
 8018496:	9006      	str	r0, [sp, #24]
 8018498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801849c:	4809      	ldr	r0, [pc, #36]	; (80184c4 <siprintf+0x38>)
 801849e:	9107      	str	r1, [sp, #28]
 80184a0:	9104      	str	r1, [sp, #16]
 80184a2:	4909      	ldr	r1, [pc, #36]	; (80184c8 <siprintf+0x3c>)
 80184a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80184a8:	9105      	str	r1, [sp, #20]
 80184aa:	6800      	ldr	r0, [r0, #0]
 80184ac:	9301      	str	r3, [sp, #4]
 80184ae:	a902      	add	r1, sp, #8
 80184b0:	f001 fb78 	bl	8019ba4 <_svfiprintf_r>
 80184b4:	9b02      	ldr	r3, [sp, #8]
 80184b6:	2200      	movs	r2, #0
 80184b8:	701a      	strb	r2, [r3, #0]
 80184ba:	b01c      	add	sp, #112	; 0x70
 80184bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80184c0:	b003      	add	sp, #12
 80184c2:	4770      	bx	lr
 80184c4:	200000f0 	.word	0x200000f0
 80184c8:	ffff0208 	.word	0xffff0208

080184cc <quorem>:
 80184cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d0:	6903      	ldr	r3, [r0, #16]
 80184d2:	690c      	ldr	r4, [r1, #16]
 80184d4:	42a3      	cmp	r3, r4
 80184d6:	4607      	mov	r7, r0
 80184d8:	f2c0 8081 	blt.w	80185de <quorem+0x112>
 80184dc:	3c01      	subs	r4, #1
 80184de:	f101 0814 	add.w	r8, r1, #20
 80184e2:	f100 0514 	add.w	r5, r0, #20
 80184e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80184ea:	9301      	str	r3, [sp, #4]
 80184ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80184f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80184f4:	3301      	adds	r3, #1
 80184f6:	429a      	cmp	r2, r3
 80184f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80184fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018500:	fbb2 f6f3 	udiv	r6, r2, r3
 8018504:	d331      	bcc.n	801856a <quorem+0x9e>
 8018506:	f04f 0e00 	mov.w	lr, #0
 801850a:	4640      	mov	r0, r8
 801850c:	46ac      	mov	ip, r5
 801850e:	46f2      	mov	sl, lr
 8018510:	f850 2b04 	ldr.w	r2, [r0], #4
 8018514:	b293      	uxth	r3, r2
 8018516:	fb06 e303 	mla	r3, r6, r3, lr
 801851a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801851e:	b29b      	uxth	r3, r3
 8018520:	ebaa 0303 	sub.w	r3, sl, r3
 8018524:	0c12      	lsrs	r2, r2, #16
 8018526:	f8dc a000 	ldr.w	sl, [ip]
 801852a:	fb06 e202 	mla	r2, r6, r2, lr
 801852e:	fa13 f38a 	uxtah	r3, r3, sl
 8018532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018536:	fa1f fa82 	uxth.w	sl, r2
 801853a:	f8dc 2000 	ldr.w	r2, [ip]
 801853e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018542:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018546:	b29b      	uxth	r3, r3
 8018548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801854c:	4581      	cmp	r9, r0
 801854e:	f84c 3b04 	str.w	r3, [ip], #4
 8018552:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018556:	d2db      	bcs.n	8018510 <quorem+0x44>
 8018558:	f855 300b 	ldr.w	r3, [r5, fp]
 801855c:	b92b      	cbnz	r3, 801856a <quorem+0x9e>
 801855e:	9b01      	ldr	r3, [sp, #4]
 8018560:	3b04      	subs	r3, #4
 8018562:	429d      	cmp	r5, r3
 8018564:	461a      	mov	r2, r3
 8018566:	d32e      	bcc.n	80185c6 <quorem+0xfa>
 8018568:	613c      	str	r4, [r7, #16]
 801856a:	4638      	mov	r0, r7
 801856c:	f001 f9b0 	bl	80198d0 <__mcmp>
 8018570:	2800      	cmp	r0, #0
 8018572:	db24      	blt.n	80185be <quorem+0xf2>
 8018574:	3601      	adds	r6, #1
 8018576:	4628      	mov	r0, r5
 8018578:	f04f 0c00 	mov.w	ip, #0
 801857c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018580:	f8d0 e000 	ldr.w	lr, [r0]
 8018584:	b293      	uxth	r3, r2
 8018586:	ebac 0303 	sub.w	r3, ip, r3
 801858a:	0c12      	lsrs	r2, r2, #16
 801858c:	fa13 f38e 	uxtah	r3, r3, lr
 8018590:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018594:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018598:	b29b      	uxth	r3, r3
 801859a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801859e:	45c1      	cmp	r9, r8
 80185a0:	f840 3b04 	str.w	r3, [r0], #4
 80185a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80185a8:	d2e8      	bcs.n	801857c <quorem+0xb0>
 80185aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80185ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80185b2:	b922      	cbnz	r2, 80185be <quorem+0xf2>
 80185b4:	3b04      	subs	r3, #4
 80185b6:	429d      	cmp	r5, r3
 80185b8:	461a      	mov	r2, r3
 80185ba:	d30a      	bcc.n	80185d2 <quorem+0x106>
 80185bc:	613c      	str	r4, [r7, #16]
 80185be:	4630      	mov	r0, r6
 80185c0:	b003      	add	sp, #12
 80185c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c6:	6812      	ldr	r2, [r2, #0]
 80185c8:	3b04      	subs	r3, #4
 80185ca:	2a00      	cmp	r2, #0
 80185cc:	d1cc      	bne.n	8018568 <quorem+0x9c>
 80185ce:	3c01      	subs	r4, #1
 80185d0:	e7c7      	b.n	8018562 <quorem+0x96>
 80185d2:	6812      	ldr	r2, [r2, #0]
 80185d4:	3b04      	subs	r3, #4
 80185d6:	2a00      	cmp	r2, #0
 80185d8:	d1f0      	bne.n	80185bc <quorem+0xf0>
 80185da:	3c01      	subs	r4, #1
 80185dc:	e7eb      	b.n	80185b6 <quorem+0xea>
 80185de:	2000      	movs	r0, #0
 80185e0:	e7ee      	b.n	80185c0 <quorem+0xf4>
 80185e2:	0000      	movs	r0, r0
 80185e4:	0000      	movs	r0, r0
	...

080185e8 <_dtoa_r>:
 80185e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185ec:	ed2d 8b02 	vpush	{d8}
 80185f0:	ec57 6b10 	vmov	r6, r7, d0
 80185f4:	b095      	sub	sp, #84	; 0x54
 80185f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80185f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80185fc:	9105      	str	r1, [sp, #20]
 80185fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018602:	4604      	mov	r4, r0
 8018604:	9209      	str	r2, [sp, #36]	; 0x24
 8018606:	930f      	str	r3, [sp, #60]	; 0x3c
 8018608:	b975      	cbnz	r5, 8018628 <_dtoa_r+0x40>
 801860a:	2010      	movs	r0, #16
 801860c:	f7ff f94a 	bl	80178a4 <malloc>
 8018610:	4602      	mov	r2, r0
 8018612:	6260      	str	r0, [r4, #36]	; 0x24
 8018614:	b920      	cbnz	r0, 8018620 <_dtoa_r+0x38>
 8018616:	4bb2      	ldr	r3, [pc, #712]	; (80188e0 <_dtoa_r+0x2f8>)
 8018618:	21ea      	movs	r1, #234	; 0xea
 801861a:	48b2      	ldr	r0, [pc, #712]	; (80188e4 <_dtoa_r+0x2fc>)
 801861c:	f001 fe32 	bl	801a284 <__assert_func>
 8018620:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018624:	6005      	str	r5, [r0, #0]
 8018626:	60c5      	str	r5, [r0, #12]
 8018628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801862a:	6819      	ldr	r1, [r3, #0]
 801862c:	b151      	cbz	r1, 8018644 <_dtoa_r+0x5c>
 801862e:	685a      	ldr	r2, [r3, #4]
 8018630:	604a      	str	r2, [r1, #4]
 8018632:	2301      	movs	r3, #1
 8018634:	4093      	lsls	r3, r2
 8018636:	608b      	str	r3, [r1, #8]
 8018638:	4620      	mov	r0, r4
 801863a:	f000 ff0b 	bl	8019454 <_Bfree>
 801863e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018640:	2200      	movs	r2, #0
 8018642:	601a      	str	r2, [r3, #0]
 8018644:	1e3b      	subs	r3, r7, #0
 8018646:	bfb9      	ittee	lt
 8018648:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801864c:	9303      	strlt	r3, [sp, #12]
 801864e:	2300      	movge	r3, #0
 8018650:	f8c8 3000 	strge.w	r3, [r8]
 8018654:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018658:	4ba3      	ldr	r3, [pc, #652]	; (80188e8 <_dtoa_r+0x300>)
 801865a:	bfbc      	itt	lt
 801865c:	2201      	movlt	r2, #1
 801865e:	f8c8 2000 	strlt.w	r2, [r8]
 8018662:	ea33 0309 	bics.w	r3, r3, r9
 8018666:	d11b      	bne.n	80186a0 <_dtoa_r+0xb8>
 8018668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801866a:	f242 730f 	movw	r3, #9999	; 0x270f
 801866e:	6013      	str	r3, [r2, #0]
 8018670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018674:	4333      	orrs	r3, r6
 8018676:	f000 857a 	beq.w	801916e <_dtoa_r+0xb86>
 801867a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801867c:	b963      	cbnz	r3, 8018698 <_dtoa_r+0xb0>
 801867e:	4b9b      	ldr	r3, [pc, #620]	; (80188ec <_dtoa_r+0x304>)
 8018680:	e024      	b.n	80186cc <_dtoa_r+0xe4>
 8018682:	4b9b      	ldr	r3, [pc, #620]	; (80188f0 <_dtoa_r+0x308>)
 8018684:	9300      	str	r3, [sp, #0]
 8018686:	3308      	adds	r3, #8
 8018688:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801868a:	6013      	str	r3, [r2, #0]
 801868c:	9800      	ldr	r0, [sp, #0]
 801868e:	b015      	add	sp, #84	; 0x54
 8018690:	ecbd 8b02 	vpop	{d8}
 8018694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018698:	4b94      	ldr	r3, [pc, #592]	; (80188ec <_dtoa_r+0x304>)
 801869a:	9300      	str	r3, [sp, #0]
 801869c:	3303      	adds	r3, #3
 801869e:	e7f3      	b.n	8018688 <_dtoa_r+0xa0>
 80186a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80186a4:	2200      	movs	r2, #0
 80186a6:	ec51 0b17 	vmov	r0, r1, d7
 80186aa:	2300      	movs	r3, #0
 80186ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80186b0:	f7e8 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80186b4:	4680      	mov	r8, r0
 80186b6:	b158      	cbz	r0, 80186d0 <_dtoa_r+0xe8>
 80186b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186ba:	2301      	movs	r3, #1
 80186bc:	6013      	str	r3, [r2, #0]
 80186be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	f000 8551 	beq.w	8019168 <_dtoa_r+0xb80>
 80186c6:	488b      	ldr	r0, [pc, #556]	; (80188f4 <_dtoa_r+0x30c>)
 80186c8:	6018      	str	r0, [r3, #0]
 80186ca:	1e43      	subs	r3, r0, #1
 80186cc:	9300      	str	r3, [sp, #0]
 80186ce:	e7dd      	b.n	801868c <_dtoa_r+0xa4>
 80186d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80186d4:	aa12      	add	r2, sp, #72	; 0x48
 80186d6:	a913      	add	r1, sp, #76	; 0x4c
 80186d8:	4620      	mov	r0, r4
 80186da:	f001 f99d 	bl	8019a18 <__d2b>
 80186de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186e2:	4683      	mov	fp, r0
 80186e4:	2d00      	cmp	r5, #0
 80186e6:	d07c      	beq.n	80187e2 <_dtoa_r+0x1fa>
 80186e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80186ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80186f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80186f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80186fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80186fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018702:	4b7d      	ldr	r3, [pc, #500]	; (80188f8 <_dtoa_r+0x310>)
 8018704:	2200      	movs	r2, #0
 8018706:	4630      	mov	r0, r6
 8018708:	4639      	mov	r1, r7
 801870a:	f7e7 fdbd 	bl	8000288 <__aeabi_dsub>
 801870e:	a36e      	add	r3, pc, #440	; (adr r3, 80188c8 <_dtoa_r+0x2e0>)
 8018710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018714:	f7e7 ff70 	bl	80005f8 <__aeabi_dmul>
 8018718:	a36d      	add	r3, pc, #436	; (adr r3, 80188d0 <_dtoa_r+0x2e8>)
 801871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871e:	f7e7 fdb5 	bl	800028c <__adddf3>
 8018722:	4606      	mov	r6, r0
 8018724:	4628      	mov	r0, r5
 8018726:	460f      	mov	r7, r1
 8018728:	f7e7 fefc 	bl	8000524 <__aeabi_i2d>
 801872c:	a36a      	add	r3, pc, #424	; (adr r3, 80188d8 <_dtoa_r+0x2f0>)
 801872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018732:	f7e7 ff61 	bl	80005f8 <__aeabi_dmul>
 8018736:	4602      	mov	r2, r0
 8018738:	460b      	mov	r3, r1
 801873a:	4630      	mov	r0, r6
 801873c:	4639      	mov	r1, r7
 801873e:	f7e7 fda5 	bl	800028c <__adddf3>
 8018742:	4606      	mov	r6, r0
 8018744:	460f      	mov	r7, r1
 8018746:	f7e8 fa07 	bl	8000b58 <__aeabi_d2iz>
 801874a:	2200      	movs	r2, #0
 801874c:	4682      	mov	sl, r0
 801874e:	2300      	movs	r3, #0
 8018750:	4630      	mov	r0, r6
 8018752:	4639      	mov	r1, r7
 8018754:	f7e8 f9c2 	bl	8000adc <__aeabi_dcmplt>
 8018758:	b148      	cbz	r0, 801876e <_dtoa_r+0x186>
 801875a:	4650      	mov	r0, sl
 801875c:	f7e7 fee2 	bl	8000524 <__aeabi_i2d>
 8018760:	4632      	mov	r2, r6
 8018762:	463b      	mov	r3, r7
 8018764:	f7e8 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8018768:	b908      	cbnz	r0, 801876e <_dtoa_r+0x186>
 801876a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801876e:	f1ba 0f16 	cmp.w	sl, #22
 8018772:	d854      	bhi.n	801881e <_dtoa_r+0x236>
 8018774:	4b61      	ldr	r3, [pc, #388]	; (80188fc <_dtoa_r+0x314>)
 8018776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801877e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018782:	f7e8 f9ab 	bl	8000adc <__aeabi_dcmplt>
 8018786:	2800      	cmp	r0, #0
 8018788:	d04b      	beq.n	8018822 <_dtoa_r+0x23a>
 801878a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801878e:	2300      	movs	r3, #0
 8018790:	930e      	str	r3, [sp, #56]	; 0x38
 8018792:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018794:	1b5d      	subs	r5, r3, r5
 8018796:	1e6b      	subs	r3, r5, #1
 8018798:	9304      	str	r3, [sp, #16]
 801879a:	bf43      	ittte	mi
 801879c:	2300      	movmi	r3, #0
 801879e:	f1c5 0801 	rsbmi	r8, r5, #1
 80187a2:	9304      	strmi	r3, [sp, #16]
 80187a4:	f04f 0800 	movpl.w	r8, #0
 80187a8:	f1ba 0f00 	cmp.w	sl, #0
 80187ac:	db3b      	blt.n	8018826 <_dtoa_r+0x23e>
 80187ae:	9b04      	ldr	r3, [sp, #16]
 80187b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80187b4:	4453      	add	r3, sl
 80187b6:	9304      	str	r3, [sp, #16]
 80187b8:	2300      	movs	r3, #0
 80187ba:	9306      	str	r3, [sp, #24]
 80187bc:	9b05      	ldr	r3, [sp, #20]
 80187be:	2b09      	cmp	r3, #9
 80187c0:	d869      	bhi.n	8018896 <_dtoa_r+0x2ae>
 80187c2:	2b05      	cmp	r3, #5
 80187c4:	bfc4      	itt	gt
 80187c6:	3b04      	subgt	r3, #4
 80187c8:	9305      	strgt	r3, [sp, #20]
 80187ca:	9b05      	ldr	r3, [sp, #20]
 80187cc:	f1a3 0302 	sub.w	r3, r3, #2
 80187d0:	bfcc      	ite	gt
 80187d2:	2500      	movgt	r5, #0
 80187d4:	2501      	movle	r5, #1
 80187d6:	2b03      	cmp	r3, #3
 80187d8:	d869      	bhi.n	80188ae <_dtoa_r+0x2c6>
 80187da:	e8df f003 	tbb	[pc, r3]
 80187de:	4e2c      	.short	0x4e2c
 80187e0:	5a4c      	.short	0x5a4c
 80187e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80187e6:	441d      	add	r5, r3
 80187e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80187ec:	2b20      	cmp	r3, #32
 80187ee:	bfc1      	itttt	gt
 80187f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80187f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80187f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80187fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018800:	bfda      	itte	le
 8018802:	f1c3 0320 	rsble	r3, r3, #32
 8018806:	fa06 f003 	lslle.w	r0, r6, r3
 801880a:	4318      	orrgt	r0, r3
 801880c:	f7e7 fe7a 	bl	8000504 <__aeabi_ui2d>
 8018810:	2301      	movs	r3, #1
 8018812:	4606      	mov	r6, r0
 8018814:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018818:	3d01      	subs	r5, #1
 801881a:	9310      	str	r3, [sp, #64]	; 0x40
 801881c:	e771      	b.n	8018702 <_dtoa_r+0x11a>
 801881e:	2301      	movs	r3, #1
 8018820:	e7b6      	b.n	8018790 <_dtoa_r+0x1a8>
 8018822:	900e      	str	r0, [sp, #56]	; 0x38
 8018824:	e7b5      	b.n	8018792 <_dtoa_r+0x1aa>
 8018826:	f1ca 0300 	rsb	r3, sl, #0
 801882a:	9306      	str	r3, [sp, #24]
 801882c:	2300      	movs	r3, #0
 801882e:	eba8 080a 	sub.w	r8, r8, sl
 8018832:	930d      	str	r3, [sp, #52]	; 0x34
 8018834:	e7c2      	b.n	80187bc <_dtoa_r+0x1d4>
 8018836:	2300      	movs	r3, #0
 8018838:	9308      	str	r3, [sp, #32]
 801883a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801883c:	2b00      	cmp	r3, #0
 801883e:	dc39      	bgt.n	80188b4 <_dtoa_r+0x2cc>
 8018840:	f04f 0901 	mov.w	r9, #1
 8018844:	f8cd 9004 	str.w	r9, [sp, #4]
 8018848:	464b      	mov	r3, r9
 801884a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801884e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018850:	2200      	movs	r2, #0
 8018852:	6042      	str	r2, [r0, #4]
 8018854:	2204      	movs	r2, #4
 8018856:	f102 0614 	add.w	r6, r2, #20
 801885a:	429e      	cmp	r6, r3
 801885c:	6841      	ldr	r1, [r0, #4]
 801885e:	d92f      	bls.n	80188c0 <_dtoa_r+0x2d8>
 8018860:	4620      	mov	r0, r4
 8018862:	f000 fdb7 	bl	80193d4 <_Balloc>
 8018866:	9000      	str	r0, [sp, #0]
 8018868:	2800      	cmp	r0, #0
 801886a:	d14b      	bne.n	8018904 <_dtoa_r+0x31c>
 801886c:	4b24      	ldr	r3, [pc, #144]	; (8018900 <_dtoa_r+0x318>)
 801886e:	4602      	mov	r2, r0
 8018870:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018874:	e6d1      	b.n	801861a <_dtoa_r+0x32>
 8018876:	2301      	movs	r3, #1
 8018878:	e7de      	b.n	8018838 <_dtoa_r+0x250>
 801887a:	2300      	movs	r3, #0
 801887c:	9308      	str	r3, [sp, #32]
 801887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018880:	eb0a 0903 	add.w	r9, sl, r3
 8018884:	f109 0301 	add.w	r3, r9, #1
 8018888:	2b01      	cmp	r3, #1
 801888a:	9301      	str	r3, [sp, #4]
 801888c:	bfb8      	it	lt
 801888e:	2301      	movlt	r3, #1
 8018890:	e7dd      	b.n	801884e <_dtoa_r+0x266>
 8018892:	2301      	movs	r3, #1
 8018894:	e7f2      	b.n	801887c <_dtoa_r+0x294>
 8018896:	2501      	movs	r5, #1
 8018898:	2300      	movs	r3, #0
 801889a:	9305      	str	r3, [sp, #20]
 801889c:	9508      	str	r5, [sp, #32]
 801889e:	f04f 39ff 	mov.w	r9, #4294967295
 80188a2:	2200      	movs	r2, #0
 80188a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80188a8:	2312      	movs	r3, #18
 80188aa:	9209      	str	r2, [sp, #36]	; 0x24
 80188ac:	e7cf      	b.n	801884e <_dtoa_r+0x266>
 80188ae:	2301      	movs	r3, #1
 80188b0:	9308      	str	r3, [sp, #32]
 80188b2:	e7f4      	b.n	801889e <_dtoa_r+0x2b6>
 80188b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80188b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80188bc:	464b      	mov	r3, r9
 80188be:	e7c6      	b.n	801884e <_dtoa_r+0x266>
 80188c0:	3101      	adds	r1, #1
 80188c2:	6041      	str	r1, [r0, #4]
 80188c4:	0052      	lsls	r2, r2, #1
 80188c6:	e7c6      	b.n	8018856 <_dtoa_r+0x26e>
 80188c8:	636f4361 	.word	0x636f4361
 80188cc:	3fd287a7 	.word	0x3fd287a7
 80188d0:	8b60c8b3 	.word	0x8b60c8b3
 80188d4:	3fc68a28 	.word	0x3fc68a28
 80188d8:	509f79fb 	.word	0x509f79fb
 80188dc:	3fd34413 	.word	0x3fd34413
 80188e0:	0801ae9d 	.word	0x0801ae9d
 80188e4:	0801aeb4 	.word	0x0801aeb4
 80188e8:	7ff00000 	.word	0x7ff00000
 80188ec:	0801ae99 	.word	0x0801ae99
 80188f0:	0801ae90 	.word	0x0801ae90
 80188f4:	0801ae6d 	.word	0x0801ae6d
 80188f8:	3ff80000 	.word	0x3ff80000
 80188fc:	0801b010 	.word	0x0801b010
 8018900:	0801af13 	.word	0x0801af13
 8018904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018906:	9a00      	ldr	r2, [sp, #0]
 8018908:	601a      	str	r2, [r3, #0]
 801890a:	9b01      	ldr	r3, [sp, #4]
 801890c:	2b0e      	cmp	r3, #14
 801890e:	f200 80ad 	bhi.w	8018a6c <_dtoa_r+0x484>
 8018912:	2d00      	cmp	r5, #0
 8018914:	f000 80aa 	beq.w	8018a6c <_dtoa_r+0x484>
 8018918:	f1ba 0f00 	cmp.w	sl, #0
 801891c:	dd36      	ble.n	801898c <_dtoa_r+0x3a4>
 801891e:	4ac3      	ldr	r2, [pc, #780]	; (8018c2c <_dtoa_r+0x644>)
 8018920:	f00a 030f 	and.w	r3, sl, #15
 8018924:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018928:	ed93 7b00 	vldr	d7, [r3]
 801892c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018930:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018934:	eeb0 8a47 	vmov.f32	s16, s14
 8018938:	eef0 8a67 	vmov.f32	s17, s15
 801893c:	d016      	beq.n	801896c <_dtoa_r+0x384>
 801893e:	4bbc      	ldr	r3, [pc, #752]	; (8018c30 <_dtoa_r+0x648>)
 8018940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018948:	f7e7 ff80 	bl	800084c <__aeabi_ddiv>
 801894c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018950:	f007 070f 	and.w	r7, r7, #15
 8018954:	2503      	movs	r5, #3
 8018956:	4eb6      	ldr	r6, [pc, #728]	; (8018c30 <_dtoa_r+0x648>)
 8018958:	b957      	cbnz	r7, 8018970 <_dtoa_r+0x388>
 801895a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801895e:	ec53 2b18 	vmov	r2, r3, d8
 8018962:	f7e7 ff73 	bl	800084c <__aeabi_ddiv>
 8018966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801896a:	e029      	b.n	80189c0 <_dtoa_r+0x3d8>
 801896c:	2502      	movs	r5, #2
 801896e:	e7f2      	b.n	8018956 <_dtoa_r+0x36e>
 8018970:	07f9      	lsls	r1, r7, #31
 8018972:	d508      	bpl.n	8018986 <_dtoa_r+0x39e>
 8018974:	ec51 0b18 	vmov	r0, r1, d8
 8018978:	e9d6 2300 	ldrd	r2, r3, [r6]
 801897c:	f7e7 fe3c 	bl	80005f8 <__aeabi_dmul>
 8018980:	ec41 0b18 	vmov	d8, r0, r1
 8018984:	3501      	adds	r5, #1
 8018986:	107f      	asrs	r7, r7, #1
 8018988:	3608      	adds	r6, #8
 801898a:	e7e5      	b.n	8018958 <_dtoa_r+0x370>
 801898c:	f000 80a6 	beq.w	8018adc <_dtoa_r+0x4f4>
 8018990:	f1ca 0600 	rsb	r6, sl, #0
 8018994:	4ba5      	ldr	r3, [pc, #660]	; (8018c2c <_dtoa_r+0x644>)
 8018996:	4fa6      	ldr	r7, [pc, #664]	; (8018c30 <_dtoa_r+0x648>)
 8018998:	f006 020f 	and.w	r2, r6, #15
 801899c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80189a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80189a8:	f7e7 fe26 	bl	80005f8 <__aeabi_dmul>
 80189ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189b0:	1136      	asrs	r6, r6, #4
 80189b2:	2300      	movs	r3, #0
 80189b4:	2502      	movs	r5, #2
 80189b6:	2e00      	cmp	r6, #0
 80189b8:	f040 8085 	bne.w	8018ac6 <_dtoa_r+0x4de>
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d1d2      	bne.n	8018966 <_dtoa_r+0x37e>
 80189c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	f000 808c 	beq.w	8018ae0 <_dtoa_r+0x4f8>
 80189c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189cc:	4b99      	ldr	r3, [pc, #612]	; (8018c34 <_dtoa_r+0x64c>)
 80189ce:	2200      	movs	r2, #0
 80189d0:	4630      	mov	r0, r6
 80189d2:	4639      	mov	r1, r7
 80189d4:	f7e8 f882 	bl	8000adc <__aeabi_dcmplt>
 80189d8:	2800      	cmp	r0, #0
 80189da:	f000 8081 	beq.w	8018ae0 <_dtoa_r+0x4f8>
 80189de:	9b01      	ldr	r3, [sp, #4]
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d07d      	beq.n	8018ae0 <_dtoa_r+0x4f8>
 80189e4:	f1b9 0f00 	cmp.w	r9, #0
 80189e8:	dd3c      	ble.n	8018a64 <_dtoa_r+0x47c>
 80189ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80189ee:	9307      	str	r3, [sp, #28]
 80189f0:	2200      	movs	r2, #0
 80189f2:	4b91      	ldr	r3, [pc, #580]	; (8018c38 <_dtoa_r+0x650>)
 80189f4:	4630      	mov	r0, r6
 80189f6:	4639      	mov	r1, r7
 80189f8:	f7e7 fdfe 	bl	80005f8 <__aeabi_dmul>
 80189fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a00:	3501      	adds	r5, #1
 8018a02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018a06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018a0a:	4628      	mov	r0, r5
 8018a0c:	f7e7 fd8a 	bl	8000524 <__aeabi_i2d>
 8018a10:	4632      	mov	r2, r6
 8018a12:	463b      	mov	r3, r7
 8018a14:	f7e7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8018a18:	4b88      	ldr	r3, [pc, #544]	; (8018c3c <_dtoa_r+0x654>)
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	f7e7 fc36 	bl	800028c <__adddf3>
 8018a20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a28:	9303      	str	r3, [sp, #12]
 8018a2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d15c      	bne.n	8018aea <_dtoa_r+0x502>
 8018a30:	4b83      	ldr	r3, [pc, #524]	; (8018c40 <_dtoa_r+0x658>)
 8018a32:	2200      	movs	r2, #0
 8018a34:	4630      	mov	r0, r6
 8018a36:	4639      	mov	r1, r7
 8018a38:	f7e7 fc26 	bl	8000288 <__aeabi_dsub>
 8018a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a40:	4606      	mov	r6, r0
 8018a42:	460f      	mov	r7, r1
 8018a44:	f7e8 f868 	bl	8000b18 <__aeabi_dcmpgt>
 8018a48:	2800      	cmp	r0, #0
 8018a4a:	f040 8296 	bne.w	8018f7a <_dtoa_r+0x992>
 8018a4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018a52:	4630      	mov	r0, r6
 8018a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a58:	4639      	mov	r1, r7
 8018a5a:	f7e8 f83f 	bl	8000adc <__aeabi_dcmplt>
 8018a5e:	2800      	cmp	r0, #0
 8018a60:	f040 8288 	bne.w	8018f74 <_dtoa_r+0x98c>
 8018a64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018a6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	f2c0 8158 	blt.w	8018d24 <_dtoa_r+0x73c>
 8018a74:	f1ba 0f0e 	cmp.w	sl, #14
 8018a78:	f300 8154 	bgt.w	8018d24 <_dtoa_r+0x73c>
 8018a7c:	4b6b      	ldr	r3, [pc, #428]	; (8018c2c <_dtoa_r+0x644>)
 8018a7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018a82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f280 80e3 	bge.w	8018c54 <_dtoa_r+0x66c>
 8018a8e:	9b01      	ldr	r3, [sp, #4]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	f300 80df 	bgt.w	8018c54 <_dtoa_r+0x66c>
 8018a96:	f040 826d 	bne.w	8018f74 <_dtoa_r+0x98c>
 8018a9a:	4b69      	ldr	r3, [pc, #420]	; (8018c40 <_dtoa_r+0x658>)
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	4640      	mov	r0, r8
 8018aa0:	4649      	mov	r1, r9
 8018aa2:	f7e7 fda9 	bl	80005f8 <__aeabi_dmul>
 8018aa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018aaa:	f7e8 f82b 	bl	8000b04 <__aeabi_dcmpge>
 8018aae:	9e01      	ldr	r6, [sp, #4]
 8018ab0:	4637      	mov	r7, r6
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	f040 8243 	bne.w	8018f3e <_dtoa_r+0x956>
 8018ab8:	9d00      	ldr	r5, [sp, #0]
 8018aba:	2331      	movs	r3, #49	; 0x31
 8018abc:	f805 3b01 	strb.w	r3, [r5], #1
 8018ac0:	f10a 0a01 	add.w	sl, sl, #1
 8018ac4:	e23f      	b.n	8018f46 <_dtoa_r+0x95e>
 8018ac6:	07f2      	lsls	r2, r6, #31
 8018ac8:	d505      	bpl.n	8018ad6 <_dtoa_r+0x4ee>
 8018aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ace:	f7e7 fd93 	bl	80005f8 <__aeabi_dmul>
 8018ad2:	3501      	adds	r5, #1
 8018ad4:	2301      	movs	r3, #1
 8018ad6:	1076      	asrs	r6, r6, #1
 8018ad8:	3708      	adds	r7, #8
 8018ada:	e76c      	b.n	80189b6 <_dtoa_r+0x3ce>
 8018adc:	2502      	movs	r5, #2
 8018ade:	e76f      	b.n	80189c0 <_dtoa_r+0x3d8>
 8018ae0:	9b01      	ldr	r3, [sp, #4]
 8018ae2:	f8cd a01c 	str.w	sl, [sp, #28]
 8018ae6:	930c      	str	r3, [sp, #48]	; 0x30
 8018ae8:	e78d      	b.n	8018a06 <_dtoa_r+0x41e>
 8018aea:	9900      	ldr	r1, [sp, #0]
 8018aec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018af0:	4b4e      	ldr	r3, [pc, #312]	; (8018c2c <_dtoa_r+0x644>)
 8018af2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018af6:	4401      	add	r1, r0
 8018af8:	9102      	str	r1, [sp, #8]
 8018afa:	9908      	ldr	r1, [sp, #32]
 8018afc:	eeb0 8a47 	vmov.f32	s16, s14
 8018b00:	eef0 8a67 	vmov.f32	s17, s15
 8018b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018b0c:	2900      	cmp	r1, #0
 8018b0e:	d045      	beq.n	8018b9c <_dtoa_r+0x5b4>
 8018b10:	494c      	ldr	r1, [pc, #304]	; (8018c44 <_dtoa_r+0x65c>)
 8018b12:	2000      	movs	r0, #0
 8018b14:	f7e7 fe9a 	bl	800084c <__aeabi_ddiv>
 8018b18:	ec53 2b18 	vmov	r2, r3, d8
 8018b1c:	f7e7 fbb4 	bl	8000288 <__aeabi_dsub>
 8018b20:	9d00      	ldr	r5, [sp, #0]
 8018b22:	ec41 0b18 	vmov	d8, r0, r1
 8018b26:	4639      	mov	r1, r7
 8018b28:	4630      	mov	r0, r6
 8018b2a:	f7e8 f815 	bl	8000b58 <__aeabi_d2iz>
 8018b2e:	900c      	str	r0, [sp, #48]	; 0x30
 8018b30:	f7e7 fcf8 	bl	8000524 <__aeabi_i2d>
 8018b34:	4602      	mov	r2, r0
 8018b36:	460b      	mov	r3, r1
 8018b38:	4630      	mov	r0, r6
 8018b3a:	4639      	mov	r1, r7
 8018b3c:	f7e7 fba4 	bl	8000288 <__aeabi_dsub>
 8018b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b42:	3330      	adds	r3, #48	; 0x30
 8018b44:	f805 3b01 	strb.w	r3, [r5], #1
 8018b48:	ec53 2b18 	vmov	r2, r3, d8
 8018b4c:	4606      	mov	r6, r0
 8018b4e:	460f      	mov	r7, r1
 8018b50:	f7e7 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8018b54:	2800      	cmp	r0, #0
 8018b56:	d165      	bne.n	8018c24 <_dtoa_r+0x63c>
 8018b58:	4632      	mov	r2, r6
 8018b5a:	463b      	mov	r3, r7
 8018b5c:	4935      	ldr	r1, [pc, #212]	; (8018c34 <_dtoa_r+0x64c>)
 8018b5e:	2000      	movs	r0, #0
 8018b60:	f7e7 fb92 	bl	8000288 <__aeabi_dsub>
 8018b64:	ec53 2b18 	vmov	r2, r3, d8
 8018b68:	f7e7 ffb8 	bl	8000adc <__aeabi_dcmplt>
 8018b6c:	2800      	cmp	r0, #0
 8018b6e:	f040 80b9 	bne.w	8018ce4 <_dtoa_r+0x6fc>
 8018b72:	9b02      	ldr	r3, [sp, #8]
 8018b74:	429d      	cmp	r5, r3
 8018b76:	f43f af75 	beq.w	8018a64 <_dtoa_r+0x47c>
 8018b7a:	4b2f      	ldr	r3, [pc, #188]	; (8018c38 <_dtoa_r+0x650>)
 8018b7c:	ec51 0b18 	vmov	r0, r1, d8
 8018b80:	2200      	movs	r2, #0
 8018b82:	f7e7 fd39 	bl	80005f8 <__aeabi_dmul>
 8018b86:	4b2c      	ldr	r3, [pc, #176]	; (8018c38 <_dtoa_r+0x650>)
 8018b88:	ec41 0b18 	vmov	d8, r0, r1
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	4630      	mov	r0, r6
 8018b90:	4639      	mov	r1, r7
 8018b92:	f7e7 fd31 	bl	80005f8 <__aeabi_dmul>
 8018b96:	4606      	mov	r6, r0
 8018b98:	460f      	mov	r7, r1
 8018b9a:	e7c4      	b.n	8018b26 <_dtoa_r+0x53e>
 8018b9c:	ec51 0b17 	vmov	r0, r1, d7
 8018ba0:	f7e7 fd2a 	bl	80005f8 <__aeabi_dmul>
 8018ba4:	9b02      	ldr	r3, [sp, #8]
 8018ba6:	9d00      	ldr	r5, [sp, #0]
 8018ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8018baa:	ec41 0b18 	vmov	d8, r0, r1
 8018bae:	4639      	mov	r1, r7
 8018bb0:	4630      	mov	r0, r6
 8018bb2:	f7e7 ffd1 	bl	8000b58 <__aeabi_d2iz>
 8018bb6:	9011      	str	r0, [sp, #68]	; 0x44
 8018bb8:	f7e7 fcb4 	bl	8000524 <__aeabi_i2d>
 8018bbc:	4602      	mov	r2, r0
 8018bbe:	460b      	mov	r3, r1
 8018bc0:	4630      	mov	r0, r6
 8018bc2:	4639      	mov	r1, r7
 8018bc4:	f7e7 fb60 	bl	8000288 <__aeabi_dsub>
 8018bc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bca:	3330      	adds	r3, #48	; 0x30
 8018bcc:	f805 3b01 	strb.w	r3, [r5], #1
 8018bd0:	9b02      	ldr	r3, [sp, #8]
 8018bd2:	429d      	cmp	r5, r3
 8018bd4:	4606      	mov	r6, r0
 8018bd6:	460f      	mov	r7, r1
 8018bd8:	f04f 0200 	mov.w	r2, #0
 8018bdc:	d134      	bne.n	8018c48 <_dtoa_r+0x660>
 8018bde:	4b19      	ldr	r3, [pc, #100]	; (8018c44 <_dtoa_r+0x65c>)
 8018be0:	ec51 0b18 	vmov	r0, r1, d8
 8018be4:	f7e7 fb52 	bl	800028c <__adddf3>
 8018be8:	4602      	mov	r2, r0
 8018bea:	460b      	mov	r3, r1
 8018bec:	4630      	mov	r0, r6
 8018bee:	4639      	mov	r1, r7
 8018bf0:	f7e7 ff92 	bl	8000b18 <__aeabi_dcmpgt>
 8018bf4:	2800      	cmp	r0, #0
 8018bf6:	d175      	bne.n	8018ce4 <_dtoa_r+0x6fc>
 8018bf8:	ec53 2b18 	vmov	r2, r3, d8
 8018bfc:	4911      	ldr	r1, [pc, #68]	; (8018c44 <_dtoa_r+0x65c>)
 8018bfe:	2000      	movs	r0, #0
 8018c00:	f7e7 fb42 	bl	8000288 <__aeabi_dsub>
 8018c04:	4602      	mov	r2, r0
 8018c06:	460b      	mov	r3, r1
 8018c08:	4630      	mov	r0, r6
 8018c0a:	4639      	mov	r1, r7
 8018c0c:	f7e7 ff66 	bl	8000adc <__aeabi_dcmplt>
 8018c10:	2800      	cmp	r0, #0
 8018c12:	f43f af27 	beq.w	8018a64 <_dtoa_r+0x47c>
 8018c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c18:	1e6b      	subs	r3, r5, #1
 8018c1a:	930c      	str	r3, [sp, #48]	; 0x30
 8018c1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018c20:	2b30      	cmp	r3, #48	; 0x30
 8018c22:	d0f8      	beq.n	8018c16 <_dtoa_r+0x62e>
 8018c24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018c28:	e04a      	b.n	8018cc0 <_dtoa_r+0x6d8>
 8018c2a:	bf00      	nop
 8018c2c:	0801b010 	.word	0x0801b010
 8018c30:	0801afe8 	.word	0x0801afe8
 8018c34:	3ff00000 	.word	0x3ff00000
 8018c38:	40240000 	.word	0x40240000
 8018c3c:	401c0000 	.word	0x401c0000
 8018c40:	40140000 	.word	0x40140000
 8018c44:	3fe00000 	.word	0x3fe00000
 8018c48:	4baf      	ldr	r3, [pc, #700]	; (8018f08 <_dtoa_r+0x920>)
 8018c4a:	f7e7 fcd5 	bl	80005f8 <__aeabi_dmul>
 8018c4e:	4606      	mov	r6, r0
 8018c50:	460f      	mov	r7, r1
 8018c52:	e7ac      	b.n	8018bae <_dtoa_r+0x5c6>
 8018c54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c58:	9d00      	ldr	r5, [sp, #0]
 8018c5a:	4642      	mov	r2, r8
 8018c5c:	464b      	mov	r3, r9
 8018c5e:	4630      	mov	r0, r6
 8018c60:	4639      	mov	r1, r7
 8018c62:	f7e7 fdf3 	bl	800084c <__aeabi_ddiv>
 8018c66:	f7e7 ff77 	bl	8000b58 <__aeabi_d2iz>
 8018c6a:	9002      	str	r0, [sp, #8]
 8018c6c:	f7e7 fc5a 	bl	8000524 <__aeabi_i2d>
 8018c70:	4642      	mov	r2, r8
 8018c72:	464b      	mov	r3, r9
 8018c74:	f7e7 fcc0 	bl	80005f8 <__aeabi_dmul>
 8018c78:	4602      	mov	r2, r0
 8018c7a:	460b      	mov	r3, r1
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	4639      	mov	r1, r7
 8018c80:	f7e7 fb02 	bl	8000288 <__aeabi_dsub>
 8018c84:	9e02      	ldr	r6, [sp, #8]
 8018c86:	9f01      	ldr	r7, [sp, #4]
 8018c88:	3630      	adds	r6, #48	; 0x30
 8018c8a:	f805 6b01 	strb.w	r6, [r5], #1
 8018c8e:	9e00      	ldr	r6, [sp, #0]
 8018c90:	1bae      	subs	r6, r5, r6
 8018c92:	42b7      	cmp	r7, r6
 8018c94:	4602      	mov	r2, r0
 8018c96:	460b      	mov	r3, r1
 8018c98:	d137      	bne.n	8018d0a <_dtoa_r+0x722>
 8018c9a:	f7e7 faf7 	bl	800028c <__adddf3>
 8018c9e:	4642      	mov	r2, r8
 8018ca0:	464b      	mov	r3, r9
 8018ca2:	4606      	mov	r6, r0
 8018ca4:	460f      	mov	r7, r1
 8018ca6:	f7e7 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8018caa:	b9c8      	cbnz	r0, 8018ce0 <_dtoa_r+0x6f8>
 8018cac:	4642      	mov	r2, r8
 8018cae:	464b      	mov	r3, r9
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	4639      	mov	r1, r7
 8018cb4:	f7e7 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 8018cb8:	b110      	cbz	r0, 8018cc0 <_dtoa_r+0x6d8>
 8018cba:	9b02      	ldr	r3, [sp, #8]
 8018cbc:	07d9      	lsls	r1, r3, #31
 8018cbe:	d40f      	bmi.n	8018ce0 <_dtoa_r+0x6f8>
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	4659      	mov	r1, fp
 8018cc4:	f000 fbc6 	bl	8019454 <_Bfree>
 8018cc8:	2300      	movs	r3, #0
 8018cca:	702b      	strb	r3, [r5, #0]
 8018ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cce:	f10a 0001 	add.w	r0, sl, #1
 8018cd2:	6018      	str	r0, [r3, #0]
 8018cd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	f43f acd8 	beq.w	801868c <_dtoa_r+0xa4>
 8018cdc:	601d      	str	r5, [r3, #0]
 8018cde:	e4d5      	b.n	801868c <_dtoa_r+0xa4>
 8018ce0:	f8cd a01c 	str.w	sl, [sp, #28]
 8018ce4:	462b      	mov	r3, r5
 8018ce6:	461d      	mov	r5, r3
 8018ce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018cec:	2a39      	cmp	r2, #57	; 0x39
 8018cee:	d108      	bne.n	8018d02 <_dtoa_r+0x71a>
 8018cf0:	9a00      	ldr	r2, [sp, #0]
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	d1f7      	bne.n	8018ce6 <_dtoa_r+0x6fe>
 8018cf6:	9a07      	ldr	r2, [sp, #28]
 8018cf8:	9900      	ldr	r1, [sp, #0]
 8018cfa:	3201      	adds	r2, #1
 8018cfc:	9207      	str	r2, [sp, #28]
 8018cfe:	2230      	movs	r2, #48	; 0x30
 8018d00:	700a      	strb	r2, [r1, #0]
 8018d02:	781a      	ldrb	r2, [r3, #0]
 8018d04:	3201      	adds	r2, #1
 8018d06:	701a      	strb	r2, [r3, #0]
 8018d08:	e78c      	b.n	8018c24 <_dtoa_r+0x63c>
 8018d0a:	4b7f      	ldr	r3, [pc, #508]	; (8018f08 <_dtoa_r+0x920>)
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	f7e7 fc73 	bl	80005f8 <__aeabi_dmul>
 8018d12:	2200      	movs	r2, #0
 8018d14:	2300      	movs	r3, #0
 8018d16:	4606      	mov	r6, r0
 8018d18:	460f      	mov	r7, r1
 8018d1a:	f7e7 fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8018d1e:	2800      	cmp	r0, #0
 8018d20:	d09b      	beq.n	8018c5a <_dtoa_r+0x672>
 8018d22:	e7cd      	b.n	8018cc0 <_dtoa_r+0x6d8>
 8018d24:	9a08      	ldr	r2, [sp, #32]
 8018d26:	2a00      	cmp	r2, #0
 8018d28:	f000 80c4 	beq.w	8018eb4 <_dtoa_r+0x8cc>
 8018d2c:	9a05      	ldr	r2, [sp, #20]
 8018d2e:	2a01      	cmp	r2, #1
 8018d30:	f300 80a8 	bgt.w	8018e84 <_dtoa_r+0x89c>
 8018d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d36:	2a00      	cmp	r2, #0
 8018d38:	f000 80a0 	beq.w	8018e7c <_dtoa_r+0x894>
 8018d3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018d40:	9e06      	ldr	r6, [sp, #24]
 8018d42:	4645      	mov	r5, r8
 8018d44:	9a04      	ldr	r2, [sp, #16]
 8018d46:	2101      	movs	r1, #1
 8018d48:	441a      	add	r2, r3
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	4498      	add	r8, r3
 8018d4e:	9204      	str	r2, [sp, #16]
 8018d50:	f000 fc3c 	bl	80195cc <__i2b>
 8018d54:	4607      	mov	r7, r0
 8018d56:	2d00      	cmp	r5, #0
 8018d58:	dd0b      	ble.n	8018d72 <_dtoa_r+0x78a>
 8018d5a:	9b04      	ldr	r3, [sp, #16]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	dd08      	ble.n	8018d72 <_dtoa_r+0x78a>
 8018d60:	42ab      	cmp	r3, r5
 8018d62:	9a04      	ldr	r2, [sp, #16]
 8018d64:	bfa8      	it	ge
 8018d66:	462b      	movge	r3, r5
 8018d68:	eba8 0803 	sub.w	r8, r8, r3
 8018d6c:	1aed      	subs	r5, r5, r3
 8018d6e:	1ad3      	subs	r3, r2, r3
 8018d70:	9304      	str	r3, [sp, #16]
 8018d72:	9b06      	ldr	r3, [sp, #24]
 8018d74:	b1fb      	cbz	r3, 8018db6 <_dtoa_r+0x7ce>
 8018d76:	9b08      	ldr	r3, [sp, #32]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 809f 	beq.w	8018ebc <_dtoa_r+0x8d4>
 8018d7e:	2e00      	cmp	r6, #0
 8018d80:	dd11      	ble.n	8018da6 <_dtoa_r+0x7be>
 8018d82:	4639      	mov	r1, r7
 8018d84:	4632      	mov	r2, r6
 8018d86:	4620      	mov	r0, r4
 8018d88:	f000 fcdc 	bl	8019744 <__pow5mult>
 8018d8c:	465a      	mov	r2, fp
 8018d8e:	4601      	mov	r1, r0
 8018d90:	4607      	mov	r7, r0
 8018d92:	4620      	mov	r0, r4
 8018d94:	f000 fc30 	bl	80195f8 <__multiply>
 8018d98:	4659      	mov	r1, fp
 8018d9a:	9007      	str	r0, [sp, #28]
 8018d9c:	4620      	mov	r0, r4
 8018d9e:	f000 fb59 	bl	8019454 <_Bfree>
 8018da2:	9b07      	ldr	r3, [sp, #28]
 8018da4:	469b      	mov	fp, r3
 8018da6:	9b06      	ldr	r3, [sp, #24]
 8018da8:	1b9a      	subs	r2, r3, r6
 8018daa:	d004      	beq.n	8018db6 <_dtoa_r+0x7ce>
 8018dac:	4659      	mov	r1, fp
 8018dae:	4620      	mov	r0, r4
 8018db0:	f000 fcc8 	bl	8019744 <__pow5mult>
 8018db4:	4683      	mov	fp, r0
 8018db6:	2101      	movs	r1, #1
 8018db8:	4620      	mov	r0, r4
 8018dba:	f000 fc07 	bl	80195cc <__i2b>
 8018dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	4606      	mov	r6, r0
 8018dc4:	dd7c      	ble.n	8018ec0 <_dtoa_r+0x8d8>
 8018dc6:	461a      	mov	r2, r3
 8018dc8:	4601      	mov	r1, r0
 8018dca:	4620      	mov	r0, r4
 8018dcc:	f000 fcba 	bl	8019744 <__pow5mult>
 8018dd0:	9b05      	ldr	r3, [sp, #20]
 8018dd2:	2b01      	cmp	r3, #1
 8018dd4:	4606      	mov	r6, r0
 8018dd6:	dd76      	ble.n	8018ec6 <_dtoa_r+0x8de>
 8018dd8:	2300      	movs	r3, #0
 8018dda:	9306      	str	r3, [sp, #24]
 8018ddc:	6933      	ldr	r3, [r6, #16]
 8018dde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018de2:	6918      	ldr	r0, [r3, #16]
 8018de4:	f000 fba2 	bl	801952c <__hi0bits>
 8018de8:	f1c0 0020 	rsb	r0, r0, #32
 8018dec:	9b04      	ldr	r3, [sp, #16]
 8018dee:	4418      	add	r0, r3
 8018df0:	f010 001f 	ands.w	r0, r0, #31
 8018df4:	f000 8086 	beq.w	8018f04 <_dtoa_r+0x91c>
 8018df8:	f1c0 0320 	rsb	r3, r0, #32
 8018dfc:	2b04      	cmp	r3, #4
 8018dfe:	dd7f      	ble.n	8018f00 <_dtoa_r+0x918>
 8018e00:	f1c0 001c 	rsb	r0, r0, #28
 8018e04:	9b04      	ldr	r3, [sp, #16]
 8018e06:	4403      	add	r3, r0
 8018e08:	4480      	add	r8, r0
 8018e0a:	4405      	add	r5, r0
 8018e0c:	9304      	str	r3, [sp, #16]
 8018e0e:	f1b8 0f00 	cmp.w	r8, #0
 8018e12:	dd05      	ble.n	8018e20 <_dtoa_r+0x838>
 8018e14:	4659      	mov	r1, fp
 8018e16:	4642      	mov	r2, r8
 8018e18:	4620      	mov	r0, r4
 8018e1a:	f000 fced 	bl	80197f8 <__lshift>
 8018e1e:	4683      	mov	fp, r0
 8018e20:	9b04      	ldr	r3, [sp, #16]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	dd05      	ble.n	8018e32 <_dtoa_r+0x84a>
 8018e26:	4631      	mov	r1, r6
 8018e28:	461a      	mov	r2, r3
 8018e2a:	4620      	mov	r0, r4
 8018e2c:	f000 fce4 	bl	80197f8 <__lshift>
 8018e30:	4606      	mov	r6, r0
 8018e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d069      	beq.n	8018f0c <_dtoa_r+0x924>
 8018e38:	4631      	mov	r1, r6
 8018e3a:	4658      	mov	r0, fp
 8018e3c:	f000 fd48 	bl	80198d0 <__mcmp>
 8018e40:	2800      	cmp	r0, #0
 8018e42:	da63      	bge.n	8018f0c <_dtoa_r+0x924>
 8018e44:	2300      	movs	r3, #0
 8018e46:	4659      	mov	r1, fp
 8018e48:	220a      	movs	r2, #10
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	f000 fb24 	bl	8019498 <__multadd>
 8018e50:	9b08      	ldr	r3, [sp, #32]
 8018e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018e56:	4683      	mov	fp, r0
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	f000 818f 	beq.w	801917c <_dtoa_r+0xb94>
 8018e5e:	4639      	mov	r1, r7
 8018e60:	2300      	movs	r3, #0
 8018e62:	220a      	movs	r2, #10
 8018e64:	4620      	mov	r0, r4
 8018e66:	f000 fb17 	bl	8019498 <__multadd>
 8018e6a:	f1b9 0f00 	cmp.w	r9, #0
 8018e6e:	4607      	mov	r7, r0
 8018e70:	f300 808e 	bgt.w	8018f90 <_dtoa_r+0x9a8>
 8018e74:	9b05      	ldr	r3, [sp, #20]
 8018e76:	2b02      	cmp	r3, #2
 8018e78:	dc50      	bgt.n	8018f1c <_dtoa_r+0x934>
 8018e7a:	e089      	b.n	8018f90 <_dtoa_r+0x9a8>
 8018e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018e82:	e75d      	b.n	8018d40 <_dtoa_r+0x758>
 8018e84:	9b01      	ldr	r3, [sp, #4]
 8018e86:	1e5e      	subs	r6, r3, #1
 8018e88:	9b06      	ldr	r3, [sp, #24]
 8018e8a:	42b3      	cmp	r3, r6
 8018e8c:	bfbf      	itttt	lt
 8018e8e:	9b06      	ldrlt	r3, [sp, #24]
 8018e90:	9606      	strlt	r6, [sp, #24]
 8018e92:	1af2      	sublt	r2, r6, r3
 8018e94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018e96:	bfb6      	itet	lt
 8018e98:	189b      	addlt	r3, r3, r2
 8018e9a:	1b9e      	subge	r6, r3, r6
 8018e9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018e9e:	9b01      	ldr	r3, [sp, #4]
 8018ea0:	bfb8      	it	lt
 8018ea2:	2600      	movlt	r6, #0
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	bfb5      	itete	lt
 8018ea8:	eba8 0503 	sublt.w	r5, r8, r3
 8018eac:	9b01      	ldrge	r3, [sp, #4]
 8018eae:	2300      	movlt	r3, #0
 8018eb0:	4645      	movge	r5, r8
 8018eb2:	e747      	b.n	8018d44 <_dtoa_r+0x75c>
 8018eb4:	9e06      	ldr	r6, [sp, #24]
 8018eb6:	9f08      	ldr	r7, [sp, #32]
 8018eb8:	4645      	mov	r5, r8
 8018eba:	e74c      	b.n	8018d56 <_dtoa_r+0x76e>
 8018ebc:	9a06      	ldr	r2, [sp, #24]
 8018ebe:	e775      	b.n	8018dac <_dtoa_r+0x7c4>
 8018ec0:	9b05      	ldr	r3, [sp, #20]
 8018ec2:	2b01      	cmp	r3, #1
 8018ec4:	dc18      	bgt.n	8018ef8 <_dtoa_r+0x910>
 8018ec6:	9b02      	ldr	r3, [sp, #8]
 8018ec8:	b9b3      	cbnz	r3, 8018ef8 <_dtoa_r+0x910>
 8018eca:	9b03      	ldr	r3, [sp, #12]
 8018ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ed0:	b9a3      	cbnz	r3, 8018efc <_dtoa_r+0x914>
 8018ed2:	9b03      	ldr	r3, [sp, #12]
 8018ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ed8:	0d1b      	lsrs	r3, r3, #20
 8018eda:	051b      	lsls	r3, r3, #20
 8018edc:	b12b      	cbz	r3, 8018eea <_dtoa_r+0x902>
 8018ede:	9b04      	ldr	r3, [sp, #16]
 8018ee0:	3301      	adds	r3, #1
 8018ee2:	9304      	str	r3, [sp, #16]
 8018ee4:	f108 0801 	add.w	r8, r8, #1
 8018ee8:	2301      	movs	r3, #1
 8018eea:	9306      	str	r3, [sp, #24]
 8018eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	f47f af74 	bne.w	8018ddc <_dtoa_r+0x7f4>
 8018ef4:	2001      	movs	r0, #1
 8018ef6:	e779      	b.n	8018dec <_dtoa_r+0x804>
 8018ef8:	2300      	movs	r3, #0
 8018efa:	e7f6      	b.n	8018eea <_dtoa_r+0x902>
 8018efc:	9b02      	ldr	r3, [sp, #8]
 8018efe:	e7f4      	b.n	8018eea <_dtoa_r+0x902>
 8018f00:	d085      	beq.n	8018e0e <_dtoa_r+0x826>
 8018f02:	4618      	mov	r0, r3
 8018f04:	301c      	adds	r0, #28
 8018f06:	e77d      	b.n	8018e04 <_dtoa_r+0x81c>
 8018f08:	40240000 	.word	0x40240000
 8018f0c:	9b01      	ldr	r3, [sp, #4]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	dc38      	bgt.n	8018f84 <_dtoa_r+0x99c>
 8018f12:	9b05      	ldr	r3, [sp, #20]
 8018f14:	2b02      	cmp	r3, #2
 8018f16:	dd35      	ble.n	8018f84 <_dtoa_r+0x99c>
 8018f18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f1c:	f1b9 0f00 	cmp.w	r9, #0
 8018f20:	d10d      	bne.n	8018f3e <_dtoa_r+0x956>
 8018f22:	4631      	mov	r1, r6
 8018f24:	464b      	mov	r3, r9
 8018f26:	2205      	movs	r2, #5
 8018f28:	4620      	mov	r0, r4
 8018f2a:	f000 fab5 	bl	8019498 <__multadd>
 8018f2e:	4601      	mov	r1, r0
 8018f30:	4606      	mov	r6, r0
 8018f32:	4658      	mov	r0, fp
 8018f34:	f000 fccc 	bl	80198d0 <__mcmp>
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	f73f adbd 	bgt.w	8018ab8 <_dtoa_r+0x4d0>
 8018f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f40:	9d00      	ldr	r5, [sp, #0]
 8018f42:	ea6f 0a03 	mvn.w	sl, r3
 8018f46:	f04f 0800 	mov.w	r8, #0
 8018f4a:	4631      	mov	r1, r6
 8018f4c:	4620      	mov	r0, r4
 8018f4e:	f000 fa81 	bl	8019454 <_Bfree>
 8018f52:	2f00      	cmp	r7, #0
 8018f54:	f43f aeb4 	beq.w	8018cc0 <_dtoa_r+0x6d8>
 8018f58:	f1b8 0f00 	cmp.w	r8, #0
 8018f5c:	d005      	beq.n	8018f6a <_dtoa_r+0x982>
 8018f5e:	45b8      	cmp	r8, r7
 8018f60:	d003      	beq.n	8018f6a <_dtoa_r+0x982>
 8018f62:	4641      	mov	r1, r8
 8018f64:	4620      	mov	r0, r4
 8018f66:	f000 fa75 	bl	8019454 <_Bfree>
 8018f6a:	4639      	mov	r1, r7
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	f000 fa71 	bl	8019454 <_Bfree>
 8018f72:	e6a5      	b.n	8018cc0 <_dtoa_r+0x6d8>
 8018f74:	2600      	movs	r6, #0
 8018f76:	4637      	mov	r7, r6
 8018f78:	e7e1      	b.n	8018f3e <_dtoa_r+0x956>
 8018f7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f80:	4637      	mov	r7, r6
 8018f82:	e599      	b.n	8018ab8 <_dtoa_r+0x4d0>
 8018f84:	9b08      	ldr	r3, [sp, #32]
 8018f86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f8a:	2b00      	cmp	r3, #0
 8018f8c:	f000 80fd 	beq.w	801918a <_dtoa_r+0xba2>
 8018f90:	2d00      	cmp	r5, #0
 8018f92:	dd05      	ble.n	8018fa0 <_dtoa_r+0x9b8>
 8018f94:	4639      	mov	r1, r7
 8018f96:	462a      	mov	r2, r5
 8018f98:	4620      	mov	r0, r4
 8018f9a:	f000 fc2d 	bl	80197f8 <__lshift>
 8018f9e:	4607      	mov	r7, r0
 8018fa0:	9b06      	ldr	r3, [sp, #24]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d05c      	beq.n	8019060 <_dtoa_r+0xa78>
 8018fa6:	6879      	ldr	r1, [r7, #4]
 8018fa8:	4620      	mov	r0, r4
 8018faa:	f000 fa13 	bl	80193d4 <_Balloc>
 8018fae:	4605      	mov	r5, r0
 8018fb0:	b928      	cbnz	r0, 8018fbe <_dtoa_r+0x9d6>
 8018fb2:	4b80      	ldr	r3, [pc, #512]	; (80191b4 <_dtoa_r+0xbcc>)
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018fba:	f7ff bb2e 	b.w	801861a <_dtoa_r+0x32>
 8018fbe:	693a      	ldr	r2, [r7, #16]
 8018fc0:	3202      	adds	r2, #2
 8018fc2:	0092      	lsls	r2, r2, #2
 8018fc4:	f107 010c 	add.w	r1, r7, #12
 8018fc8:	300c      	adds	r0, #12
 8018fca:	f7fe fc7b 	bl	80178c4 <memcpy>
 8018fce:	2201      	movs	r2, #1
 8018fd0:	4629      	mov	r1, r5
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	f000 fc10 	bl	80197f8 <__lshift>
 8018fd8:	9b00      	ldr	r3, [sp, #0]
 8018fda:	3301      	adds	r3, #1
 8018fdc:	9301      	str	r3, [sp, #4]
 8018fde:	9b00      	ldr	r3, [sp, #0]
 8018fe0:	444b      	add	r3, r9
 8018fe2:	9307      	str	r3, [sp, #28]
 8018fe4:	9b02      	ldr	r3, [sp, #8]
 8018fe6:	f003 0301 	and.w	r3, r3, #1
 8018fea:	46b8      	mov	r8, r7
 8018fec:	9306      	str	r3, [sp, #24]
 8018fee:	4607      	mov	r7, r0
 8018ff0:	9b01      	ldr	r3, [sp, #4]
 8018ff2:	4631      	mov	r1, r6
 8018ff4:	3b01      	subs	r3, #1
 8018ff6:	4658      	mov	r0, fp
 8018ff8:	9302      	str	r3, [sp, #8]
 8018ffa:	f7ff fa67 	bl	80184cc <quorem>
 8018ffe:	4603      	mov	r3, r0
 8019000:	3330      	adds	r3, #48	; 0x30
 8019002:	9004      	str	r0, [sp, #16]
 8019004:	4641      	mov	r1, r8
 8019006:	4658      	mov	r0, fp
 8019008:	9308      	str	r3, [sp, #32]
 801900a:	f000 fc61 	bl	80198d0 <__mcmp>
 801900e:	463a      	mov	r2, r7
 8019010:	4681      	mov	r9, r0
 8019012:	4631      	mov	r1, r6
 8019014:	4620      	mov	r0, r4
 8019016:	f000 fc77 	bl	8019908 <__mdiff>
 801901a:	68c2      	ldr	r2, [r0, #12]
 801901c:	9b08      	ldr	r3, [sp, #32]
 801901e:	4605      	mov	r5, r0
 8019020:	bb02      	cbnz	r2, 8019064 <_dtoa_r+0xa7c>
 8019022:	4601      	mov	r1, r0
 8019024:	4658      	mov	r0, fp
 8019026:	f000 fc53 	bl	80198d0 <__mcmp>
 801902a:	9b08      	ldr	r3, [sp, #32]
 801902c:	4602      	mov	r2, r0
 801902e:	4629      	mov	r1, r5
 8019030:	4620      	mov	r0, r4
 8019032:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019036:	f000 fa0d 	bl	8019454 <_Bfree>
 801903a:	9b05      	ldr	r3, [sp, #20]
 801903c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801903e:	9d01      	ldr	r5, [sp, #4]
 8019040:	ea43 0102 	orr.w	r1, r3, r2
 8019044:	9b06      	ldr	r3, [sp, #24]
 8019046:	430b      	orrs	r3, r1
 8019048:	9b08      	ldr	r3, [sp, #32]
 801904a:	d10d      	bne.n	8019068 <_dtoa_r+0xa80>
 801904c:	2b39      	cmp	r3, #57	; 0x39
 801904e:	d029      	beq.n	80190a4 <_dtoa_r+0xabc>
 8019050:	f1b9 0f00 	cmp.w	r9, #0
 8019054:	dd01      	ble.n	801905a <_dtoa_r+0xa72>
 8019056:	9b04      	ldr	r3, [sp, #16]
 8019058:	3331      	adds	r3, #49	; 0x31
 801905a:	9a02      	ldr	r2, [sp, #8]
 801905c:	7013      	strb	r3, [r2, #0]
 801905e:	e774      	b.n	8018f4a <_dtoa_r+0x962>
 8019060:	4638      	mov	r0, r7
 8019062:	e7b9      	b.n	8018fd8 <_dtoa_r+0x9f0>
 8019064:	2201      	movs	r2, #1
 8019066:	e7e2      	b.n	801902e <_dtoa_r+0xa46>
 8019068:	f1b9 0f00 	cmp.w	r9, #0
 801906c:	db06      	blt.n	801907c <_dtoa_r+0xa94>
 801906e:	9905      	ldr	r1, [sp, #20]
 8019070:	ea41 0909 	orr.w	r9, r1, r9
 8019074:	9906      	ldr	r1, [sp, #24]
 8019076:	ea59 0101 	orrs.w	r1, r9, r1
 801907a:	d120      	bne.n	80190be <_dtoa_r+0xad6>
 801907c:	2a00      	cmp	r2, #0
 801907e:	ddec      	ble.n	801905a <_dtoa_r+0xa72>
 8019080:	4659      	mov	r1, fp
 8019082:	2201      	movs	r2, #1
 8019084:	4620      	mov	r0, r4
 8019086:	9301      	str	r3, [sp, #4]
 8019088:	f000 fbb6 	bl	80197f8 <__lshift>
 801908c:	4631      	mov	r1, r6
 801908e:	4683      	mov	fp, r0
 8019090:	f000 fc1e 	bl	80198d0 <__mcmp>
 8019094:	2800      	cmp	r0, #0
 8019096:	9b01      	ldr	r3, [sp, #4]
 8019098:	dc02      	bgt.n	80190a0 <_dtoa_r+0xab8>
 801909a:	d1de      	bne.n	801905a <_dtoa_r+0xa72>
 801909c:	07da      	lsls	r2, r3, #31
 801909e:	d5dc      	bpl.n	801905a <_dtoa_r+0xa72>
 80190a0:	2b39      	cmp	r3, #57	; 0x39
 80190a2:	d1d8      	bne.n	8019056 <_dtoa_r+0xa6e>
 80190a4:	9a02      	ldr	r2, [sp, #8]
 80190a6:	2339      	movs	r3, #57	; 0x39
 80190a8:	7013      	strb	r3, [r2, #0]
 80190aa:	462b      	mov	r3, r5
 80190ac:	461d      	mov	r5, r3
 80190ae:	3b01      	subs	r3, #1
 80190b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80190b4:	2a39      	cmp	r2, #57	; 0x39
 80190b6:	d050      	beq.n	801915a <_dtoa_r+0xb72>
 80190b8:	3201      	adds	r2, #1
 80190ba:	701a      	strb	r2, [r3, #0]
 80190bc:	e745      	b.n	8018f4a <_dtoa_r+0x962>
 80190be:	2a00      	cmp	r2, #0
 80190c0:	dd03      	ble.n	80190ca <_dtoa_r+0xae2>
 80190c2:	2b39      	cmp	r3, #57	; 0x39
 80190c4:	d0ee      	beq.n	80190a4 <_dtoa_r+0xabc>
 80190c6:	3301      	adds	r3, #1
 80190c8:	e7c7      	b.n	801905a <_dtoa_r+0xa72>
 80190ca:	9a01      	ldr	r2, [sp, #4]
 80190cc:	9907      	ldr	r1, [sp, #28]
 80190ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80190d2:	428a      	cmp	r2, r1
 80190d4:	d02a      	beq.n	801912c <_dtoa_r+0xb44>
 80190d6:	4659      	mov	r1, fp
 80190d8:	2300      	movs	r3, #0
 80190da:	220a      	movs	r2, #10
 80190dc:	4620      	mov	r0, r4
 80190de:	f000 f9db 	bl	8019498 <__multadd>
 80190e2:	45b8      	cmp	r8, r7
 80190e4:	4683      	mov	fp, r0
 80190e6:	f04f 0300 	mov.w	r3, #0
 80190ea:	f04f 020a 	mov.w	r2, #10
 80190ee:	4641      	mov	r1, r8
 80190f0:	4620      	mov	r0, r4
 80190f2:	d107      	bne.n	8019104 <_dtoa_r+0xb1c>
 80190f4:	f000 f9d0 	bl	8019498 <__multadd>
 80190f8:	4680      	mov	r8, r0
 80190fa:	4607      	mov	r7, r0
 80190fc:	9b01      	ldr	r3, [sp, #4]
 80190fe:	3301      	adds	r3, #1
 8019100:	9301      	str	r3, [sp, #4]
 8019102:	e775      	b.n	8018ff0 <_dtoa_r+0xa08>
 8019104:	f000 f9c8 	bl	8019498 <__multadd>
 8019108:	4639      	mov	r1, r7
 801910a:	4680      	mov	r8, r0
 801910c:	2300      	movs	r3, #0
 801910e:	220a      	movs	r2, #10
 8019110:	4620      	mov	r0, r4
 8019112:	f000 f9c1 	bl	8019498 <__multadd>
 8019116:	4607      	mov	r7, r0
 8019118:	e7f0      	b.n	80190fc <_dtoa_r+0xb14>
 801911a:	f1b9 0f00 	cmp.w	r9, #0
 801911e:	9a00      	ldr	r2, [sp, #0]
 8019120:	bfcc      	ite	gt
 8019122:	464d      	movgt	r5, r9
 8019124:	2501      	movle	r5, #1
 8019126:	4415      	add	r5, r2
 8019128:	f04f 0800 	mov.w	r8, #0
 801912c:	4659      	mov	r1, fp
 801912e:	2201      	movs	r2, #1
 8019130:	4620      	mov	r0, r4
 8019132:	9301      	str	r3, [sp, #4]
 8019134:	f000 fb60 	bl	80197f8 <__lshift>
 8019138:	4631      	mov	r1, r6
 801913a:	4683      	mov	fp, r0
 801913c:	f000 fbc8 	bl	80198d0 <__mcmp>
 8019140:	2800      	cmp	r0, #0
 8019142:	dcb2      	bgt.n	80190aa <_dtoa_r+0xac2>
 8019144:	d102      	bne.n	801914c <_dtoa_r+0xb64>
 8019146:	9b01      	ldr	r3, [sp, #4]
 8019148:	07db      	lsls	r3, r3, #31
 801914a:	d4ae      	bmi.n	80190aa <_dtoa_r+0xac2>
 801914c:	462b      	mov	r3, r5
 801914e:	461d      	mov	r5, r3
 8019150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019154:	2a30      	cmp	r2, #48	; 0x30
 8019156:	d0fa      	beq.n	801914e <_dtoa_r+0xb66>
 8019158:	e6f7      	b.n	8018f4a <_dtoa_r+0x962>
 801915a:	9a00      	ldr	r2, [sp, #0]
 801915c:	429a      	cmp	r2, r3
 801915e:	d1a5      	bne.n	80190ac <_dtoa_r+0xac4>
 8019160:	f10a 0a01 	add.w	sl, sl, #1
 8019164:	2331      	movs	r3, #49	; 0x31
 8019166:	e779      	b.n	801905c <_dtoa_r+0xa74>
 8019168:	4b13      	ldr	r3, [pc, #76]	; (80191b8 <_dtoa_r+0xbd0>)
 801916a:	f7ff baaf 	b.w	80186cc <_dtoa_r+0xe4>
 801916e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019170:	2b00      	cmp	r3, #0
 8019172:	f47f aa86 	bne.w	8018682 <_dtoa_r+0x9a>
 8019176:	4b11      	ldr	r3, [pc, #68]	; (80191bc <_dtoa_r+0xbd4>)
 8019178:	f7ff baa8 	b.w	80186cc <_dtoa_r+0xe4>
 801917c:	f1b9 0f00 	cmp.w	r9, #0
 8019180:	dc03      	bgt.n	801918a <_dtoa_r+0xba2>
 8019182:	9b05      	ldr	r3, [sp, #20]
 8019184:	2b02      	cmp	r3, #2
 8019186:	f73f aec9 	bgt.w	8018f1c <_dtoa_r+0x934>
 801918a:	9d00      	ldr	r5, [sp, #0]
 801918c:	4631      	mov	r1, r6
 801918e:	4658      	mov	r0, fp
 8019190:	f7ff f99c 	bl	80184cc <quorem>
 8019194:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019198:	f805 3b01 	strb.w	r3, [r5], #1
 801919c:	9a00      	ldr	r2, [sp, #0]
 801919e:	1aaa      	subs	r2, r5, r2
 80191a0:	4591      	cmp	r9, r2
 80191a2:	ddba      	ble.n	801911a <_dtoa_r+0xb32>
 80191a4:	4659      	mov	r1, fp
 80191a6:	2300      	movs	r3, #0
 80191a8:	220a      	movs	r2, #10
 80191aa:	4620      	mov	r0, r4
 80191ac:	f000 f974 	bl	8019498 <__multadd>
 80191b0:	4683      	mov	fp, r0
 80191b2:	e7eb      	b.n	801918c <_dtoa_r+0xba4>
 80191b4:	0801af13 	.word	0x0801af13
 80191b8:	0801ae6c 	.word	0x0801ae6c
 80191bc:	0801ae90 	.word	0x0801ae90

080191c0 <std>:
 80191c0:	2300      	movs	r3, #0
 80191c2:	b510      	push	{r4, lr}
 80191c4:	4604      	mov	r4, r0
 80191c6:	e9c0 3300 	strd	r3, r3, [r0]
 80191ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80191ce:	6083      	str	r3, [r0, #8]
 80191d0:	8181      	strh	r1, [r0, #12]
 80191d2:	6643      	str	r3, [r0, #100]	; 0x64
 80191d4:	81c2      	strh	r2, [r0, #14]
 80191d6:	6183      	str	r3, [r0, #24]
 80191d8:	4619      	mov	r1, r3
 80191da:	2208      	movs	r2, #8
 80191dc:	305c      	adds	r0, #92	; 0x5c
 80191de:	f7fe fb99 	bl	8017914 <memset>
 80191e2:	4b05      	ldr	r3, [pc, #20]	; (80191f8 <std+0x38>)
 80191e4:	6263      	str	r3, [r4, #36]	; 0x24
 80191e6:	4b05      	ldr	r3, [pc, #20]	; (80191fc <std+0x3c>)
 80191e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80191ea:	4b05      	ldr	r3, [pc, #20]	; (8019200 <std+0x40>)
 80191ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80191ee:	4b05      	ldr	r3, [pc, #20]	; (8019204 <std+0x44>)
 80191f0:	6224      	str	r4, [r4, #32]
 80191f2:	6323      	str	r3, [r4, #48]	; 0x30
 80191f4:	bd10      	pop	{r4, pc}
 80191f6:	bf00      	nop
 80191f8:	0801a059 	.word	0x0801a059
 80191fc:	0801a07b 	.word	0x0801a07b
 8019200:	0801a0b3 	.word	0x0801a0b3
 8019204:	0801a0d7 	.word	0x0801a0d7

08019208 <_cleanup_r>:
 8019208:	4901      	ldr	r1, [pc, #4]	; (8019210 <_cleanup_r+0x8>)
 801920a:	f000 b8af 	b.w	801936c <_fwalk_reent>
 801920e:	bf00      	nop
 8019210:	0801a3ed 	.word	0x0801a3ed

08019214 <__sfmoreglue>:
 8019214:	b570      	push	{r4, r5, r6, lr}
 8019216:	1e4a      	subs	r2, r1, #1
 8019218:	2568      	movs	r5, #104	; 0x68
 801921a:	4355      	muls	r5, r2
 801921c:	460e      	mov	r6, r1
 801921e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019222:	f7fe fbcf 	bl	80179c4 <_malloc_r>
 8019226:	4604      	mov	r4, r0
 8019228:	b140      	cbz	r0, 801923c <__sfmoreglue+0x28>
 801922a:	2100      	movs	r1, #0
 801922c:	e9c0 1600 	strd	r1, r6, [r0]
 8019230:	300c      	adds	r0, #12
 8019232:	60a0      	str	r0, [r4, #8]
 8019234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019238:	f7fe fb6c 	bl	8017914 <memset>
 801923c:	4620      	mov	r0, r4
 801923e:	bd70      	pop	{r4, r5, r6, pc}

08019240 <__sfp_lock_acquire>:
 8019240:	4801      	ldr	r0, [pc, #4]	; (8019248 <__sfp_lock_acquire+0x8>)
 8019242:	f000 b8b8 	b.w	80193b6 <__retarget_lock_acquire_recursive>
 8019246:	bf00      	nop
 8019248:	20001a00 	.word	0x20001a00

0801924c <__sfp_lock_release>:
 801924c:	4801      	ldr	r0, [pc, #4]	; (8019254 <__sfp_lock_release+0x8>)
 801924e:	f000 b8b3 	b.w	80193b8 <__retarget_lock_release_recursive>
 8019252:	bf00      	nop
 8019254:	20001a00 	.word	0x20001a00

08019258 <__sinit_lock_acquire>:
 8019258:	4801      	ldr	r0, [pc, #4]	; (8019260 <__sinit_lock_acquire+0x8>)
 801925a:	f000 b8ac 	b.w	80193b6 <__retarget_lock_acquire_recursive>
 801925e:	bf00      	nop
 8019260:	200019fb 	.word	0x200019fb

08019264 <__sinit_lock_release>:
 8019264:	4801      	ldr	r0, [pc, #4]	; (801926c <__sinit_lock_release+0x8>)
 8019266:	f000 b8a7 	b.w	80193b8 <__retarget_lock_release_recursive>
 801926a:	bf00      	nop
 801926c:	200019fb 	.word	0x200019fb

08019270 <__sinit>:
 8019270:	b510      	push	{r4, lr}
 8019272:	4604      	mov	r4, r0
 8019274:	f7ff fff0 	bl	8019258 <__sinit_lock_acquire>
 8019278:	69a3      	ldr	r3, [r4, #24]
 801927a:	b11b      	cbz	r3, 8019284 <__sinit+0x14>
 801927c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019280:	f7ff bff0 	b.w	8019264 <__sinit_lock_release>
 8019284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019288:	6523      	str	r3, [r4, #80]	; 0x50
 801928a:	4b13      	ldr	r3, [pc, #76]	; (80192d8 <__sinit+0x68>)
 801928c:	4a13      	ldr	r2, [pc, #76]	; (80192dc <__sinit+0x6c>)
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	62a2      	str	r2, [r4, #40]	; 0x28
 8019292:	42a3      	cmp	r3, r4
 8019294:	bf04      	itt	eq
 8019296:	2301      	moveq	r3, #1
 8019298:	61a3      	streq	r3, [r4, #24]
 801929a:	4620      	mov	r0, r4
 801929c:	f000 f820 	bl	80192e0 <__sfp>
 80192a0:	6060      	str	r0, [r4, #4]
 80192a2:	4620      	mov	r0, r4
 80192a4:	f000 f81c 	bl	80192e0 <__sfp>
 80192a8:	60a0      	str	r0, [r4, #8]
 80192aa:	4620      	mov	r0, r4
 80192ac:	f000 f818 	bl	80192e0 <__sfp>
 80192b0:	2200      	movs	r2, #0
 80192b2:	60e0      	str	r0, [r4, #12]
 80192b4:	2104      	movs	r1, #4
 80192b6:	6860      	ldr	r0, [r4, #4]
 80192b8:	f7ff ff82 	bl	80191c0 <std>
 80192bc:	68a0      	ldr	r0, [r4, #8]
 80192be:	2201      	movs	r2, #1
 80192c0:	2109      	movs	r1, #9
 80192c2:	f7ff ff7d 	bl	80191c0 <std>
 80192c6:	68e0      	ldr	r0, [r4, #12]
 80192c8:	2202      	movs	r2, #2
 80192ca:	2112      	movs	r1, #18
 80192cc:	f7ff ff78 	bl	80191c0 <std>
 80192d0:	2301      	movs	r3, #1
 80192d2:	61a3      	str	r3, [r4, #24]
 80192d4:	e7d2      	b.n	801927c <__sinit+0xc>
 80192d6:	bf00      	nop
 80192d8:	0801ae58 	.word	0x0801ae58
 80192dc:	08019209 	.word	0x08019209

080192e0 <__sfp>:
 80192e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e2:	4607      	mov	r7, r0
 80192e4:	f7ff ffac 	bl	8019240 <__sfp_lock_acquire>
 80192e8:	4b1e      	ldr	r3, [pc, #120]	; (8019364 <__sfp+0x84>)
 80192ea:	681e      	ldr	r6, [r3, #0]
 80192ec:	69b3      	ldr	r3, [r6, #24]
 80192ee:	b913      	cbnz	r3, 80192f6 <__sfp+0x16>
 80192f0:	4630      	mov	r0, r6
 80192f2:	f7ff ffbd 	bl	8019270 <__sinit>
 80192f6:	3648      	adds	r6, #72	; 0x48
 80192f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80192fc:	3b01      	subs	r3, #1
 80192fe:	d503      	bpl.n	8019308 <__sfp+0x28>
 8019300:	6833      	ldr	r3, [r6, #0]
 8019302:	b30b      	cbz	r3, 8019348 <__sfp+0x68>
 8019304:	6836      	ldr	r6, [r6, #0]
 8019306:	e7f7      	b.n	80192f8 <__sfp+0x18>
 8019308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801930c:	b9d5      	cbnz	r5, 8019344 <__sfp+0x64>
 801930e:	4b16      	ldr	r3, [pc, #88]	; (8019368 <__sfp+0x88>)
 8019310:	60e3      	str	r3, [r4, #12]
 8019312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019316:	6665      	str	r5, [r4, #100]	; 0x64
 8019318:	f000 f84c 	bl	80193b4 <__retarget_lock_init_recursive>
 801931c:	f7ff ff96 	bl	801924c <__sfp_lock_release>
 8019320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019328:	6025      	str	r5, [r4, #0]
 801932a:	61a5      	str	r5, [r4, #24]
 801932c:	2208      	movs	r2, #8
 801932e:	4629      	mov	r1, r5
 8019330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019334:	f7fe faee 	bl	8017914 <memset>
 8019338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801933c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019340:	4620      	mov	r0, r4
 8019342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019344:	3468      	adds	r4, #104	; 0x68
 8019346:	e7d9      	b.n	80192fc <__sfp+0x1c>
 8019348:	2104      	movs	r1, #4
 801934a:	4638      	mov	r0, r7
 801934c:	f7ff ff62 	bl	8019214 <__sfmoreglue>
 8019350:	4604      	mov	r4, r0
 8019352:	6030      	str	r0, [r6, #0]
 8019354:	2800      	cmp	r0, #0
 8019356:	d1d5      	bne.n	8019304 <__sfp+0x24>
 8019358:	f7ff ff78 	bl	801924c <__sfp_lock_release>
 801935c:	230c      	movs	r3, #12
 801935e:	603b      	str	r3, [r7, #0]
 8019360:	e7ee      	b.n	8019340 <__sfp+0x60>
 8019362:	bf00      	nop
 8019364:	0801ae58 	.word	0x0801ae58
 8019368:	ffff0001 	.word	0xffff0001

0801936c <_fwalk_reent>:
 801936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019370:	4606      	mov	r6, r0
 8019372:	4688      	mov	r8, r1
 8019374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019378:	2700      	movs	r7, #0
 801937a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801937e:	f1b9 0901 	subs.w	r9, r9, #1
 8019382:	d505      	bpl.n	8019390 <_fwalk_reent+0x24>
 8019384:	6824      	ldr	r4, [r4, #0]
 8019386:	2c00      	cmp	r4, #0
 8019388:	d1f7      	bne.n	801937a <_fwalk_reent+0xe>
 801938a:	4638      	mov	r0, r7
 801938c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019390:	89ab      	ldrh	r3, [r5, #12]
 8019392:	2b01      	cmp	r3, #1
 8019394:	d907      	bls.n	80193a6 <_fwalk_reent+0x3a>
 8019396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801939a:	3301      	adds	r3, #1
 801939c:	d003      	beq.n	80193a6 <_fwalk_reent+0x3a>
 801939e:	4629      	mov	r1, r5
 80193a0:	4630      	mov	r0, r6
 80193a2:	47c0      	blx	r8
 80193a4:	4307      	orrs	r7, r0
 80193a6:	3568      	adds	r5, #104	; 0x68
 80193a8:	e7e9      	b.n	801937e <_fwalk_reent+0x12>
	...

080193ac <_localeconv_r>:
 80193ac:	4800      	ldr	r0, [pc, #0]	; (80193b0 <_localeconv_r+0x4>)
 80193ae:	4770      	bx	lr
 80193b0:	20000244 	.word	0x20000244

080193b4 <__retarget_lock_init_recursive>:
 80193b4:	4770      	bx	lr

080193b6 <__retarget_lock_acquire_recursive>:
 80193b6:	4770      	bx	lr

080193b8 <__retarget_lock_release_recursive>:
 80193b8:	4770      	bx	lr
	...

080193bc <__malloc_lock>:
 80193bc:	4801      	ldr	r0, [pc, #4]	; (80193c4 <__malloc_lock+0x8>)
 80193be:	f7ff bffa 	b.w	80193b6 <__retarget_lock_acquire_recursive>
 80193c2:	bf00      	nop
 80193c4:	200019fc 	.word	0x200019fc

080193c8 <__malloc_unlock>:
 80193c8:	4801      	ldr	r0, [pc, #4]	; (80193d0 <__malloc_unlock+0x8>)
 80193ca:	f7ff bff5 	b.w	80193b8 <__retarget_lock_release_recursive>
 80193ce:	bf00      	nop
 80193d0:	200019fc 	.word	0x200019fc

080193d4 <_Balloc>:
 80193d4:	b570      	push	{r4, r5, r6, lr}
 80193d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80193d8:	4604      	mov	r4, r0
 80193da:	460d      	mov	r5, r1
 80193dc:	b976      	cbnz	r6, 80193fc <_Balloc+0x28>
 80193de:	2010      	movs	r0, #16
 80193e0:	f7fe fa60 	bl	80178a4 <malloc>
 80193e4:	4602      	mov	r2, r0
 80193e6:	6260      	str	r0, [r4, #36]	; 0x24
 80193e8:	b920      	cbnz	r0, 80193f4 <_Balloc+0x20>
 80193ea:	4b18      	ldr	r3, [pc, #96]	; (801944c <_Balloc+0x78>)
 80193ec:	4818      	ldr	r0, [pc, #96]	; (8019450 <_Balloc+0x7c>)
 80193ee:	2166      	movs	r1, #102	; 0x66
 80193f0:	f000 ff48 	bl	801a284 <__assert_func>
 80193f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80193f8:	6006      	str	r6, [r0, #0]
 80193fa:	60c6      	str	r6, [r0, #12]
 80193fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80193fe:	68f3      	ldr	r3, [r6, #12]
 8019400:	b183      	cbz	r3, 8019424 <_Balloc+0x50>
 8019402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019404:	68db      	ldr	r3, [r3, #12]
 8019406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801940a:	b9b8      	cbnz	r0, 801943c <_Balloc+0x68>
 801940c:	2101      	movs	r1, #1
 801940e:	fa01 f605 	lsl.w	r6, r1, r5
 8019412:	1d72      	adds	r2, r6, #5
 8019414:	0092      	lsls	r2, r2, #2
 8019416:	4620      	mov	r0, r4
 8019418:	f000 fb5a 	bl	8019ad0 <_calloc_r>
 801941c:	b160      	cbz	r0, 8019438 <_Balloc+0x64>
 801941e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019422:	e00e      	b.n	8019442 <_Balloc+0x6e>
 8019424:	2221      	movs	r2, #33	; 0x21
 8019426:	2104      	movs	r1, #4
 8019428:	4620      	mov	r0, r4
 801942a:	f000 fb51 	bl	8019ad0 <_calloc_r>
 801942e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019430:	60f0      	str	r0, [r6, #12]
 8019432:	68db      	ldr	r3, [r3, #12]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d1e4      	bne.n	8019402 <_Balloc+0x2e>
 8019438:	2000      	movs	r0, #0
 801943a:	bd70      	pop	{r4, r5, r6, pc}
 801943c:	6802      	ldr	r2, [r0, #0]
 801943e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019442:	2300      	movs	r3, #0
 8019444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019448:	e7f7      	b.n	801943a <_Balloc+0x66>
 801944a:	bf00      	nop
 801944c:	0801ae9d 	.word	0x0801ae9d
 8019450:	0801af84 	.word	0x0801af84

08019454 <_Bfree>:
 8019454:	b570      	push	{r4, r5, r6, lr}
 8019456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019458:	4605      	mov	r5, r0
 801945a:	460c      	mov	r4, r1
 801945c:	b976      	cbnz	r6, 801947c <_Bfree+0x28>
 801945e:	2010      	movs	r0, #16
 8019460:	f7fe fa20 	bl	80178a4 <malloc>
 8019464:	4602      	mov	r2, r0
 8019466:	6268      	str	r0, [r5, #36]	; 0x24
 8019468:	b920      	cbnz	r0, 8019474 <_Bfree+0x20>
 801946a:	4b09      	ldr	r3, [pc, #36]	; (8019490 <_Bfree+0x3c>)
 801946c:	4809      	ldr	r0, [pc, #36]	; (8019494 <_Bfree+0x40>)
 801946e:	218a      	movs	r1, #138	; 0x8a
 8019470:	f000 ff08 	bl	801a284 <__assert_func>
 8019474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019478:	6006      	str	r6, [r0, #0]
 801947a:	60c6      	str	r6, [r0, #12]
 801947c:	b13c      	cbz	r4, 801948e <_Bfree+0x3a>
 801947e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019480:	6862      	ldr	r2, [r4, #4]
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019488:	6021      	str	r1, [r4, #0]
 801948a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801948e:	bd70      	pop	{r4, r5, r6, pc}
 8019490:	0801ae9d 	.word	0x0801ae9d
 8019494:	0801af84 	.word	0x0801af84

08019498 <__multadd>:
 8019498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801949c:	690e      	ldr	r6, [r1, #16]
 801949e:	4607      	mov	r7, r0
 80194a0:	4698      	mov	r8, r3
 80194a2:	460c      	mov	r4, r1
 80194a4:	f101 0014 	add.w	r0, r1, #20
 80194a8:	2300      	movs	r3, #0
 80194aa:	6805      	ldr	r5, [r0, #0]
 80194ac:	b2a9      	uxth	r1, r5
 80194ae:	fb02 8101 	mla	r1, r2, r1, r8
 80194b2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80194b6:	0c2d      	lsrs	r5, r5, #16
 80194b8:	fb02 c505 	mla	r5, r2, r5, ip
 80194bc:	b289      	uxth	r1, r1
 80194be:	3301      	adds	r3, #1
 80194c0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80194c4:	429e      	cmp	r6, r3
 80194c6:	f840 1b04 	str.w	r1, [r0], #4
 80194ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80194ce:	dcec      	bgt.n	80194aa <__multadd+0x12>
 80194d0:	f1b8 0f00 	cmp.w	r8, #0
 80194d4:	d022      	beq.n	801951c <__multadd+0x84>
 80194d6:	68a3      	ldr	r3, [r4, #8]
 80194d8:	42b3      	cmp	r3, r6
 80194da:	dc19      	bgt.n	8019510 <__multadd+0x78>
 80194dc:	6861      	ldr	r1, [r4, #4]
 80194de:	4638      	mov	r0, r7
 80194e0:	3101      	adds	r1, #1
 80194e2:	f7ff ff77 	bl	80193d4 <_Balloc>
 80194e6:	4605      	mov	r5, r0
 80194e8:	b928      	cbnz	r0, 80194f6 <__multadd+0x5e>
 80194ea:	4602      	mov	r2, r0
 80194ec:	4b0d      	ldr	r3, [pc, #52]	; (8019524 <__multadd+0x8c>)
 80194ee:	480e      	ldr	r0, [pc, #56]	; (8019528 <__multadd+0x90>)
 80194f0:	21b5      	movs	r1, #181	; 0xb5
 80194f2:	f000 fec7 	bl	801a284 <__assert_func>
 80194f6:	6922      	ldr	r2, [r4, #16]
 80194f8:	3202      	adds	r2, #2
 80194fa:	f104 010c 	add.w	r1, r4, #12
 80194fe:	0092      	lsls	r2, r2, #2
 8019500:	300c      	adds	r0, #12
 8019502:	f7fe f9df 	bl	80178c4 <memcpy>
 8019506:	4621      	mov	r1, r4
 8019508:	4638      	mov	r0, r7
 801950a:	f7ff ffa3 	bl	8019454 <_Bfree>
 801950e:	462c      	mov	r4, r5
 8019510:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019514:	3601      	adds	r6, #1
 8019516:	f8c3 8014 	str.w	r8, [r3, #20]
 801951a:	6126      	str	r6, [r4, #16]
 801951c:	4620      	mov	r0, r4
 801951e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019522:	bf00      	nop
 8019524:	0801af13 	.word	0x0801af13
 8019528:	0801af84 	.word	0x0801af84

0801952c <__hi0bits>:
 801952c:	0c03      	lsrs	r3, r0, #16
 801952e:	041b      	lsls	r3, r3, #16
 8019530:	b9d3      	cbnz	r3, 8019568 <__hi0bits+0x3c>
 8019532:	0400      	lsls	r0, r0, #16
 8019534:	2310      	movs	r3, #16
 8019536:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801953a:	bf04      	itt	eq
 801953c:	0200      	lsleq	r0, r0, #8
 801953e:	3308      	addeq	r3, #8
 8019540:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019544:	bf04      	itt	eq
 8019546:	0100      	lsleq	r0, r0, #4
 8019548:	3304      	addeq	r3, #4
 801954a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801954e:	bf04      	itt	eq
 8019550:	0080      	lsleq	r0, r0, #2
 8019552:	3302      	addeq	r3, #2
 8019554:	2800      	cmp	r0, #0
 8019556:	db05      	blt.n	8019564 <__hi0bits+0x38>
 8019558:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801955c:	f103 0301 	add.w	r3, r3, #1
 8019560:	bf08      	it	eq
 8019562:	2320      	moveq	r3, #32
 8019564:	4618      	mov	r0, r3
 8019566:	4770      	bx	lr
 8019568:	2300      	movs	r3, #0
 801956a:	e7e4      	b.n	8019536 <__hi0bits+0xa>

0801956c <__lo0bits>:
 801956c:	6803      	ldr	r3, [r0, #0]
 801956e:	f013 0207 	ands.w	r2, r3, #7
 8019572:	4601      	mov	r1, r0
 8019574:	d00b      	beq.n	801958e <__lo0bits+0x22>
 8019576:	07da      	lsls	r2, r3, #31
 8019578:	d424      	bmi.n	80195c4 <__lo0bits+0x58>
 801957a:	0798      	lsls	r0, r3, #30
 801957c:	bf49      	itett	mi
 801957e:	085b      	lsrmi	r3, r3, #1
 8019580:	089b      	lsrpl	r3, r3, #2
 8019582:	2001      	movmi	r0, #1
 8019584:	600b      	strmi	r3, [r1, #0]
 8019586:	bf5c      	itt	pl
 8019588:	600b      	strpl	r3, [r1, #0]
 801958a:	2002      	movpl	r0, #2
 801958c:	4770      	bx	lr
 801958e:	b298      	uxth	r0, r3
 8019590:	b9b0      	cbnz	r0, 80195c0 <__lo0bits+0x54>
 8019592:	0c1b      	lsrs	r3, r3, #16
 8019594:	2010      	movs	r0, #16
 8019596:	f013 0fff 	tst.w	r3, #255	; 0xff
 801959a:	bf04      	itt	eq
 801959c:	0a1b      	lsreq	r3, r3, #8
 801959e:	3008      	addeq	r0, #8
 80195a0:	071a      	lsls	r2, r3, #28
 80195a2:	bf04      	itt	eq
 80195a4:	091b      	lsreq	r3, r3, #4
 80195a6:	3004      	addeq	r0, #4
 80195a8:	079a      	lsls	r2, r3, #30
 80195aa:	bf04      	itt	eq
 80195ac:	089b      	lsreq	r3, r3, #2
 80195ae:	3002      	addeq	r0, #2
 80195b0:	07da      	lsls	r2, r3, #31
 80195b2:	d403      	bmi.n	80195bc <__lo0bits+0x50>
 80195b4:	085b      	lsrs	r3, r3, #1
 80195b6:	f100 0001 	add.w	r0, r0, #1
 80195ba:	d005      	beq.n	80195c8 <__lo0bits+0x5c>
 80195bc:	600b      	str	r3, [r1, #0]
 80195be:	4770      	bx	lr
 80195c0:	4610      	mov	r0, r2
 80195c2:	e7e8      	b.n	8019596 <__lo0bits+0x2a>
 80195c4:	2000      	movs	r0, #0
 80195c6:	4770      	bx	lr
 80195c8:	2020      	movs	r0, #32
 80195ca:	4770      	bx	lr

080195cc <__i2b>:
 80195cc:	b510      	push	{r4, lr}
 80195ce:	460c      	mov	r4, r1
 80195d0:	2101      	movs	r1, #1
 80195d2:	f7ff feff 	bl	80193d4 <_Balloc>
 80195d6:	4602      	mov	r2, r0
 80195d8:	b928      	cbnz	r0, 80195e6 <__i2b+0x1a>
 80195da:	4b05      	ldr	r3, [pc, #20]	; (80195f0 <__i2b+0x24>)
 80195dc:	4805      	ldr	r0, [pc, #20]	; (80195f4 <__i2b+0x28>)
 80195de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80195e2:	f000 fe4f 	bl	801a284 <__assert_func>
 80195e6:	2301      	movs	r3, #1
 80195e8:	6144      	str	r4, [r0, #20]
 80195ea:	6103      	str	r3, [r0, #16]
 80195ec:	bd10      	pop	{r4, pc}
 80195ee:	bf00      	nop
 80195f0:	0801af13 	.word	0x0801af13
 80195f4:	0801af84 	.word	0x0801af84

080195f8 <__multiply>:
 80195f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195fc:	4614      	mov	r4, r2
 80195fe:	690a      	ldr	r2, [r1, #16]
 8019600:	6923      	ldr	r3, [r4, #16]
 8019602:	429a      	cmp	r2, r3
 8019604:	bfb8      	it	lt
 8019606:	460b      	movlt	r3, r1
 8019608:	460d      	mov	r5, r1
 801960a:	bfbc      	itt	lt
 801960c:	4625      	movlt	r5, r4
 801960e:	461c      	movlt	r4, r3
 8019610:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019614:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019618:	68ab      	ldr	r3, [r5, #8]
 801961a:	6869      	ldr	r1, [r5, #4]
 801961c:	eb0a 0709 	add.w	r7, sl, r9
 8019620:	42bb      	cmp	r3, r7
 8019622:	b085      	sub	sp, #20
 8019624:	bfb8      	it	lt
 8019626:	3101      	addlt	r1, #1
 8019628:	f7ff fed4 	bl	80193d4 <_Balloc>
 801962c:	b930      	cbnz	r0, 801963c <__multiply+0x44>
 801962e:	4602      	mov	r2, r0
 8019630:	4b42      	ldr	r3, [pc, #264]	; (801973c <__multiply+0x144>)
 8019632:	4843      	ldr	r0, [pc, #268]	; (8019740 <__multiply+0x148>)
 8019634:	f240 115d 	movw	r1, #349	; 0x15d
 8019638:	f000 fe24 	bl	801a284 <__assert_func>
 801963c:	f100 0614 	add.w	r6, r0, #20
 8019640:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019644:	4633      	mov	r3, r6
 8019646:	2200      	movs	r2, #0
 8019648:	4543      	cmp	r3, r8
 801964a:	d31e      	bcc.n	801968a <__multiply+0x92>
 801964c:	f105 0c14 	add.w	ip, r5, #20
 8019650:	f104 0314 	add.w	r3, r4, #20
 8019654:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019658:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801965c:	9202      	str	r2, [sp, #8]
 801965e:	ebac 0205 	sub.w	r2, ip, r5
 8019662:	3a15      	subs	r2, #21
 8019664:	f022 0203 	bic.w	r2, r2, #3
 8019668:	3204      	adds	r2, #4
 801966a:	f105 0115 	add.w	r1, r5, #21
 801966e:	458c      	cmp	ip, r1
 8019670:	bf38      	it	cc
 8019672:	2204      	movcc	r2, #4
 8019674:	9201      	str	r2, [sp, #4]
 8019676:	9a02      	ldr	r2, [sp, #8]
 8019678:	9303      	str	r3, [sp, #12]
 801967a:	429a      	cmp	r2, r3
 801967c:	d808      	bhi.n	8019690 <__multiply+0x98>
 801967e:	2f00      	cmp	r7, #0
 8019680:	dc55      	bgt.n	801972e <__multiply+0x136>
 8019682:	6107      	str	r7, [r0, #16]
 8019684:	b005      	add	sp, #20
 8019686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801968a:	f843 2b04 	str.w	r2, [r3], #4
 801968e:	e7db      	b.n	8019648 <__multiply+0x50>
 8019690:	f8b3 a000 	ldrh.w	sl, [r3]
 8019694:	f1ba 0f00 	cmp.w	sl, #0
 8019698:	d020      	beq.n	80196dc <__multiply+0xe4>
 801969a:	f105 0e14 	add.w	lr, r5, #20
 801969e:	46b1      	mov	r9, r6
 80196a0:	2200      	movs	r2, #0
 80196a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80196a6:	f8d9 b000 	ldr.w	fp, [r9]
 80196aa:	b2a1      	uxth	r1, r4
 80196ac:	fa1f fb8b 	uxth.w	fp, fp
 80196b0:	fb0a b101 	mla	r1, sl, r1, fp
 80196b4:	4411      	add	r1, r2
 80196b6:	f8d9 2000 	ldr.w	r2, [r9]
 80196ba:	0c24      	lsrs	r4, r4, #16
 80196bc:	0c12      	lsrs	r2, r2, #16
 80196be:	fb0a 2404 	mla	r4, sl, r4, r2
 80196c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80196c6:	b289      	uxth	r1, r1
 80196c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80196cc:	45f4      	cmp	ip, lr
 80196ce:	f849 1b04 	str.w	r1, [r9], #4
 80196d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80196d6:	d8e4      	bhi.n	80196a2 <__multiply+0xaa>
 80196d8:	9901      	ldr	r1, [sp, #4]
 80196da:	5072      	str	r2, [r6, r1]
 80196dc:	9a03      	ldr	r2, [sp, #12]
 80196de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80196e2:	3304      	adds	r3, #4
 80196e4:	f1b9 0f00 	cmp.w	r9, #0
 80196e8:	d01f      	beq.n	801972a <__multiply+0x132>
 80196ea:	6834      	ldr	r4, [r6, #0]
 80196ec:	f105 0114 	add.w	r1, r5, #20
 80196f0:	46b6      	mov	lr, r6
 80196f2:	f04f 0a00 	mov.w	sl, #0
 80196f6:	880a      	ldrh	r2, [r1, #0]
 80196f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80196fc:	fb09 b202 	mla	r2, r9, r2, fp
 8019700:	4492      	add	sl, r2
 8019702:	b2a4      	uxth	r4, r4
 8019704:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019708:	f84e 4b04 	str.w	r4, [lr], #4
 801970c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019710:	f8be 2000 	ldrh.w	r2, [lr]
 8019714:	0c24      	lsrs	r4, r4, #16
 8019716:	fb09 2404 	mla	r4, r9, r4, r2
 801971a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801971e:	458c      	cmp	ip, r1
 8019720:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019724:	d8e7      	bhi.n	80196f6 <__multiply+0xfe>
 8019726:	9a01      	ldr	r2, [sp, #4]
 8019728:	50b4      	str	r4, [r6, r2]
 801972a:	3604      	adds	r6, #4
 801972c:	e7a3      	b.n	8019676 <__multiply+0x7e>
 801972e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019732:	2b00      	cmp	r3, #0
 8019734:	d1a5      	bne.n	8019682 <__multiply+0x8a>
 8019736:	3f01      	subs	r7, #1
 8019738:	e7a1      	b.n	801967e <__multiply+0x86>
 801973a:	bf00      	nop
 801973c:	0801af13 	.word	0x0801af13
 8019740:	0801af84 	.word	0x0801af84

08019744 <__pow5mult>:
 8019744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019748:	4615      	mov	r5, r2
 801974a:	f012 0203 	ands.w	r2, r2, #3
 801974e:	4606      	mov	r6, r0
 8019750:	460f      	mov	r7, r1
 8019752:	d007      	beq.n	8019764 <__pow5mult+0x20>
 8019754:	4c25      	ldr	r4, [pc, #148]	; (80197ec <__pow5mult+0xa8>)
 8019756:	3a01      	subs	r2, #1
 8019758:	2300      	movs	r3, #0
 801975a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801975e:	f7ff fe9b 	bl	8019498 <__multadd>
 8019762:	4607      	mov	r7, r0
 8019764:	10ad      	asrs	r5, r5, #2
 8019766:	d03d      	beq.n	80197e4 <__pow5mult+0xa0>
 8019768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801976a:	b97c      	cbnz	r4, 801978c <__pow5mult+0x48>
 801976c:	2010      	movs	r0, #16
 801976e:	f7fe f899 	bl	80178a4 <malloc>
 8019772:	4602      	mov	r2, r0
 8019774:	6270      	str	r0, [r6, #36]	; 0x24
 8019776:	b928      	cbnz	r0, 8019784 <__pow5mult+0x40>
 8019778:	4b1d      	ldr	r3, [pc, #116]	; (80197f0 <__pow5mult+0xac>)
 801977a:	481e      	ldr	r0, [pc, #120]	; (80197f4 <__pow5mult+0xb0>)
 801977c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019780:	f000 fd80 	bl	801a284 <__assert_func>
 8019784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019788:	6004      	str	r4, [r0, #0]
 801978a:	60c4      	str	r4, [r0, #12]
 801978c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019794:	b94c      	cbnz	r4, 80197aa <__pow5mult+0x66>
 8019796:	f240 2171 	movw	r1, #625	; 0x271
 801979a:	4630      	mov	r0, r6
 801979c:	f7ff ff16 	bl	80195cc <__i2b>
 80197a0:	2300      	movs	r3, #0
 80197a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80197a6:	4604      	mov	r4, r0
 80197a8:	6003      	str	r3, [r0, #0]
 80197aa:	f04f 0900 	mov.w	r9, #0
 80197ae:	07eb      	lsls	r3, r5, #31
 80197b0:	d50a      	bpl.n	80197c8 <__pow5mult+0x84>
 80197b2:	4639      	mov	r1, r7
 80197b4:	4622      	mov	r2, r4
 80197b6:	4630      	mov	r0, r6
 80197b8:	f7ff ff1e 	bl	80195f8 <__multiply>
 80197bc:	4639      	mov	r1, r7
 80197be:	4680      	mov	r8, r0
 80197c0:	4630      	mov	r0, r6
 80197c2:	f7ff fe47 	bl	8019454 <_Bfree>
 80197c6:	4647      	mov	r7, r8
 80197c8:	106d      	asrs	r5, r5, #1
 80197ca:	d00b      	beq.n	80197e4 <__pow5mult+0xa0>
 80197cc:	6820      	ldr	r0, [r4, #0]
 80197ce:	b938      	cbnz	r0, 80197e0 <__pow5mult+0x9c>
 80197d0:	4622      	mov	r2, r4
 80197d2:	4621      	mov	r1, r4
 80197d4:	4630      	mov	r0, r6
 80197d6:	f7ff ff0f 	bl	80195f8 <__multiply>
 80197da:	6020      	str	r0, [r4, #0]
 80197dc:	f8c0 9000 	str.w	r9, [r0]
 80197e0:	4604      	mov	r4, r0
 80197e2:	e7e4      	b.n	80197ae <__pow5mult+0x6a>
 80197e4:	4638      	mov	r0, r7
 80197e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ea:	bf00      	nop
 80197ec:	0801b0d8 	.word	0x0801b0d8
 80197f0:	0801ae9d 	.word	0x0801ae9d
 80197f4:	0801af84 	.word	0x0801af84

080197f8 <__lshift>:
 80197f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197fc:	460c      	mov	r4, r1
 80197fe:	6849      	ldr	r1, [r1, #4]
 8019800:	6923      	ldr	r3, [r4, #16]
 8019802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019806:	68a3      	ldr	r3, [r4, #8]
 8019808:	4607      	mov	r7, r0
 801980a:	4691      	mov	r9, r2
 801980c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019810:	f108 0601 	add.w	r6, r8, #1
 8019814:	42b3      	cmp	r3, r6
 8019816:	db0b      	blt.n	8019830 <__lshift+0x38>
 8019818:	4638      	mov	r0, r7
 801981a:	f7ff fddb 	bl	80193d4 <_Balloc>
 801981e:	4605      	mov	r5, r0
 8019820:	b948      	cbnz	r0, 8019836 <__lshift+0x3e>
 8019822:	4602      	mov	r2, r0
 8019824:	4b28      	ldr	r3, [pc, #160]	; (80198c8 <__lshift+0xd0>)
 8019826:	4829      	ldr	r0, [pc, #164]	; (80198cc <__lshift+0xd4>)
 8019828:	f240 11d9 	movw	r1, #473	; 0x1d9
 801982c:	f000 fd2a 	bl	801a284 <__assert_func>
 8019830:	3101      	adds	r1, #1
 8019832:	005b      	lsls	r3, r3, #1
 8019834:	e7ee      	b.n	8019814 <__lshift+0x1c>
 8019836:	2300      	movs	r3, #0
 8019838:	f100 0114 	add.w	r1, r0, #20
 801983c:	f100 0210 	add.w	r2, r0, #16
 8019840:	4618      	mov	r0, r3
 8019842:	4553      	cmp	r3, sl
 8019844:	db33      	blt.n	80198ae <__lshift+0xb6>
 8019846:	6920      	ldr	r0, [r4, #16]
 8019848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801984c:	f104 0314 	add.w	r3, r4, #20
 8019850:	f019 091f 	ands.w	r9, r9, #31
 8019854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019858:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801985c:	d02b      	beq.n	80198b6 <__lshift+0xbe>
 801985e:	f1c9 0e20 	rsb	lr, r9, #32
 8019862:	468a      	mov	sl, r1
 8019864:	2200      	movs	r2, #0
 8019866:	6818      	ldr	r0, [r3, #0]
 8019868:	fa00 f009 	lsl.w	r0, r0, r9
 801986c:	4302      	orrs	r2, r0
 801986e:	f84a 2b04 	str.w	r2, [sl], #4
 8019872:	f853 2b04 	ldr.w	r2, [r3], #4
 8019876:	459c      	cmp	ip, r3
 8019878:	fa22 f20e 	lsr.w	r2, r2, lr
 801987c:	d8f3      	bhi.n	8019866 <__lshift+0x6e>
 801987e:	ebac 0304 	sub.w	r3, ip, r4
 8019882:	3b15      	subs	r3, #21
 8019884:	f023 0303 	bic.w	r3, r3, #3
 8019888:	3304      	adds	r3, #4
 801988a:	f104 0015 	add.w	r0, r4, #21
 801988e:	4584      	cmp	ip, r0
 8019890:	bf38      	it	cc
 8019892:	2304      	movcc	r3, #4
 8019894:	50ca      	str	r2, [r1, r3]
 8019896:	b10a      	cbz	r2, 801989c <__lshift+0xa4>
 8019898:	f108 0602 	add.w	r6, r8, #2
 801989c:	3e01      	subs	r6, #1
 801989e:	4638      	mov	r0, r7
 80198a0:	612e      	str	r6, [r5, #16]
 80198a2:	4621      	mov	r1, r4
 80198a4:	f7ff fdd6 	bl	8019454 <_Bfree>
 80198a8:	4628      	mov	r0, r5
 80198aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80198b2:	3301      	adds	r3, #1
 80198b4:	e7c5      	b.n	8019842 <__lshift+0x4a>
 80198b6:	3904      	subs	r1, #4
 80198b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80198bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80198c0:	459c      	cmp	ip, r3
 80198c2:	d8f9      	bhi.n	80198b8 <__lshift+0xc0>
 80198c4:	e7ea      	b.n	801989c <__lshift+0xa4>
 80198c6:	bf00      	nop
 80198c8:	0801af13 	.word	0x0801af13
 80198cc:	0801af84 	.word	0x0801af84

080198d0 <__mcmp>:
 80198d0:	b530      	push	{r4, r5, lr}
 80198d2:	6902      	ldr	r2, [r0, #16]
 80198d4:	690c      	ldr	r4, [r1, #16]
 80198d6:	1b12      	subs	r2, r2, r4
 80198d8:	d10e      	bne.n	80198f8 <__mcmp+0x28>
 80198da:	f100 0314 	add.w	r3, r0, #20
 80198de:	3114      	adds	r1, #20
 80198e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80198e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80198e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80198ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80198f0:	42a5      	cmp	r5, r4
 80198f2:	d003      	beq.n	80198fc <__mcmp+0x2c>
 80198f4:	d305      	bcc.n	8019902 <__mcmp+0x32>
 80198f6:	2201      	movs	r2, #1
 80198f8:	4610      	mov	r0, r2
 80198fa:	bd30      	pop	{r4, r5, pc}
 80198fc:	4283      	cmp	r3, r0
 80198fe:	d3f3      	bcc.n	80198e8 <__mcmp+0x18>
 8019900:	e7fa      	b.n	80198f8 <__mcmp+0x28>
 8019902:	f04f 32ff 	mov.w	r2, #4294967295
 8019906:	e7f7      	b.n	80198f8 <__mcmp+0x28>

08019908 <__mdiff>:
 8019908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990c:	460c      	mov	r4, r1
 801990e:	4606      	mov	r6, r0
 8019910:	4611      	mov	r1, r2
 8019912:	4620      	mov	r0, r4
 8019914:	4617      	mov	r7, r2
 8019916:	f7ff ffdb 	bl	80198d0 <__mcmp>
 801991a:	1e05      	subs	r5, r0, #0
 801991c:	d110      	bne.n	8019940 <__mdiff+0x38>
 801991e:	4629      	mov	r1, r5
 8019920:	4630      	mov	r0, r6
 8019922:	f7ff fd57 	bl	80193d4 <_Balloc>
 8019926:	b930      	cbnz	r0, 8019936 <__mdiff+0x2e>
 8019928:	4b39      	ldr	r3, [pc, #228]	; (8019a10 <__mdiff+0x108>)
 801992a:	4602      	mov	r2, r0
 801992c:	f240 2132 	movw	r1, #562	; 0x232
 8019930:	4838      	ldr	r0, [pc, #224]	; (8019a14 <__mdiff+0x10c>)
 8019932:	f000 fca7 	bl	801a284 <__assert_func>
 8019936:	2301      	movs	r3, #1
 8019938:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801993c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019940:	bfa4      	itt	ge
 8019942:	463b      	movge	r3, r7
 8019944:	4627      	movge	r7, r4
 8019946:	4630      	mov	r0, r6
 8019948:	6879      	ldr	r1, [r7, #4]
 801994a:	bfa6      	itte	ge
 801994c:	461c      	movge	r4, r3
 801994e:	2500      	movge	r5, #0
 8019950:	2501      	movlt	r5, #1
 8019952:	f7ff fd3f 	bl	80193d4 <_Balloc>
 8019956:	b920      	cbnz	r0, 8019962 <__mdiff+0x5a>
 8019958:	4b2d      	ldr	r3, [pc, #180]	; (8019a10 <__mdiff+0x108>)
 801995a:	4602      	mov	r2, r0
 801995c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019960:	e7e6      	b.n	8019930 <__mdiff+0x28>
 8019962:	693e      	ldr	r6, [r7, #16]
 8019964:	60c5      	str	r5, [r0, #12]
 8019966:	6925      	ldr	r5, [r4, #16]
 8019968:	f107 0114 	add.w	r1, r7, #20
 801996c:	f104 0914 	add.w	r9, r4, #20
 8019970:	f100 0e14 	add.w	lr, r0, #20
 8019974:	f107 0210 	add.w	r2, r7, #16
 8019978:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801997c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019980:	46f2      	mov	sl, lr
 8019982:	2700      	movs	r7, #0
 8019984:	f859 3b04 	ldr.w	r3, [r9], #4
 8019988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801998c:	fa1f f883 	uxth.w	r8, r3
 8019990:	fa17 f78b 	uxtah	r7, r7, fp
 8019994:	0c1b      	lsrs	r3, r3, #16
 8019996:	eba7 0808 	sub.w	r8, r7, r8
 801999a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801999e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80199a2:	fa1f f888 	uxth.w	r8, r8
 80199a6:	141f      	asrs	r7, r3, #16
 80199a8:	454d      	cmp	r5, r9
 80199aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80199ae:	f84a 3b04 	str.w	r3, [sl], #4
 80199b2:	d8e7      	bhi.n	8019984 <__mdiff+0x7c>
 80199b4:	1b2b      	subs	r3, r5, r4
 80199b6:	3b15      	subs	r3, #21
 80199b8:	f023 0303 	bic.w	r3, r3, #3
 80199bc:	3304      	adds	r3, #4
 80199be:	3415      	adds	r4, #21
 80199c0:	42a5      	cmp	r5, r4
 80199c2:	bf38      	it	cc
 80199c4:	2304      	movcc	r3, #4
 80199c6:	4419      	add	r1, r3
 80199c8:	4473      	add	r3, lr
 80199ca:	469e      	mov	lr, r3
 80199cc:	460d      	mov	r5, r1
 80199ce:	4565      	cmp	r5, ip
 80199d0:	d30e      	bcc.n	80199f0 <__mdiff+0xe8>
 80199d2:	f10c 0203 	add.w	r2, ip, #3
 80199d6:	1a52      	subs	r2, r2, r1
 80199d8:	f022 0203 	bic.w	r2, r2, #3
 80199dc:	3903      	subs	r1, #3
 80199de:	458c      	cmp	ip, r1
 80199e0:	bf38      	it	cc
 80199e2:	2200      	movcc	r2, #0
 80199e4:	441a      	add	r2, r3
 80199e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80199ea:	b17b      	cbz	r3, 8019a0c <__mdiff+0x104>
 80199ec:	6106      	str	r6, [r0, #16]
 80199ee:	e7a5      	b.n	801993c <__mdiff+0x34>
 80199f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80199f4:	fa17 f488 	uxtah	r4, r7, r8
 80199f8:	1422      	asrs	r2, r4, #16
 80199fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80199fe:	b2a4      	uxth	r4, r4
 8019a00:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019a04:	f84e 4b04 	str.w	r4, [lr], #4
 8019a08:	1417      	asrs	r7, r2, #16
 8019a0a:	e7e0      	b.n	80199ce <__mdiff+0xc6>
 8019a0c:	3e01      	subs	r6, #1
 8019a0e:	e7ea      	b.n	80199e6 <__mdiff+0xde>
 8019a10:	0801af13 	.word	0x0801af13
 8019a14:	0801af84 	.word	0x0801af84

08019a18 <__d2b>:
 8019a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019a1c:	4689      	mov	r9, r1
 8019a1e:	2101      	movs	r1, #1
 8019a20:	ec57 6b10 	vmov	r6, r7, d0
 8019a24:	4690      	mov	r8, r2
 8019a26:	f7ff fcd5 	bl	80193d4 <_Balloc>
 8019a2a:	4604      	mov	r4, r0
 8019a2c:	b930      	cbnz	r0, 8019a3c <__d2b+0x24>
 8019a2e:	4602      	mov	r2, r0
 8019a30:	4b25      	ldr	r3, [pc, #148]	; (8019ac8 <__d2b+0xb0>)
 8019a32:	4826      	ldr	r0, [pc, #152]	; (8019acc <__d2b+0xb4>)
 8019a34:	f240 310a 	movw	r1, #778	; 0x30a
 8019a38:	f000 fc24 	bl	801a284 <__assert_func>
 8019a3c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019a44:	bb35      	cbnz	r5, 8019a94 <__d2b+0x7c>
 8019a46:	2e00      	cmp	r6, #0
 8019a48:	9301      	str	r3, [sp, #4]
 8019a4a:	d028      	beq.n	8019a9e <__d2b+0x86>
 8019a4c:	4668      	mov	r0, sp
 8019a4e:	9600      	str	r6, [sp, #0]
 8019a50:	f7ff fd8c 	bl	801956c <__lo0bits>
 8019a54:	9900      	ldr	r1, [sp, #0]
 8019a56:	b300      	cbz	r0, 8019a9a <__d2b+0x82>
 8019a58:	9a01      	ldr	r2, [sp, #4]
 8019a5a:	f1c0 0320 	rsb	r3, r0, #32
 8019a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8019a62:	430b      	orrs	r3, r1
 8019a64:	40c2      	lsrs	r2, r0
 8019a66:	6163      	str	r3, [r4, #20]
 8019a68:	9201      	str	r2, [sp, #4]
 8019a6a:	9b01      	ldr	r3, [sp, #4]
 8019a6c:	61a3      	str	r3, [r4, #24]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	bf14      	ite	ne
 8019a72:	2202      	movne	r2, #2
 8019a74:	2201      	moveq	r2, #1
 8019a76:	6122      	str	r2, [r4, #16]
 8019a78:	b1d5      	cbz	r5, 8019ab0 <__d2b+0x98>
 8019a7a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019a7e:	4405      	add	r5, r0
 8019a80:	f8c9 5000 	str.w	r5, [r9]
 8019a84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019a88:	f8c8 0000 	str.w	r0, [r8]
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	b003      	add	sp, #12
 8019a90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019a98:	e7d5      	b.n	8019a46 <__d2b+0x2e>
 8019a9a:	6161      	str	r1, [r4, #20]
 8019a9c:	e7e5      	b.n	8019a6a <__d2b+0x52>
 8019a9e:	a801      	add	r0, sp, #4
 8019aa0:	f7ff fd64 	bl	801956c <__lo0bits>
 8019aa4:	9b01      	ldr	r3, [sp, #4]
 8019aa6:	6163      	str	r3, [r4, #20]
 8019aa8:	2201      	movs	r2, #1
 8019aaa:	6122      	str	r2, [r4, #16]
 8019aac:	3020      	adds	r0, #32
 8019aae:	e7e3      	b.n	8019a78 <__d2b+0x60>
 8019ab0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019ab4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ab8:	f8c9 0000 	str.w	r0, [r9]
 8019abc:	6918      	ldr	r0, [r3, #16]
 8019abe:	f7ff fd35 	bl	801952c <__hi0bits>
 8019ac2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019ac6:	e7df      	b.n	8019a88 <__d2b+0x70>
 8019ac8:	0801af13 	.word	0x0801af13
 8019acc:	0801af84 	.word	0x0801af84

08019ad0 <_calloc_r>:
 8019ad0:	b513      	push	{r0, r1, r4, lr}
 8019ad2:	434a      	muls	r2, r1
 8019ad4:	4611      	mov	r1, r2
 8019ad6:	9201      	str	r2, [sp, #4]
 8019ad8:	f7fd ff74 	bl	80179c4 <_malloc_r>
 8019adc:	4604      	mov	r4, r0
 8019ade:	b118      	cbz	r0, 8019ae8 <_calloc_r+0x18>
 8019ae0:	9a01      	ldr	r2, [sp, #4]
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	f7fd ff16 	bl	8017914 <memset>
 8019ae8:	4620      	mov	r0, r4
 8019aea:	b002      	add	sp, #8
 8019aec:	bd10      	pop	{r4, pc}

08019aee <__ssputs_r>:
 8019aee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019af2:	688e      	ldr	r6, [r1, #8]
 8019af4:	429e      	cmp	r6, r3
 8019af6:	4682      	mov	sl, r0
 8019af8:	460c      	mov	r4, r1
 8019afa:	4690      	mov	r8, r2
 8019afc:	461f      	mov	r7, r3
 8019afe:	d838      	bhi.n	8019b72 <__ssputs_r+0x84>
 8019b00:	898a      	ldrh	r2, [r1, #12]
 8019b02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019b06:	d032      	beq.n	8019b6e <__ssputs_r+0x80>
 8019b08:	6825      	ldr	r5, [r4, #0]
 8019b0a:	6909      	ldr	r1, [r1, #16]
 8019b0c:	eba5 0901 	sub.w	r9, r5, r1
 8019b10:	6965      	ldr	r5, [r4, #20]
 8019b12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019b1a:	3301      	adds	r3, #1
 8019b1c:	444b      	add	r3, r9
 8019b1e:	106d      	asrs	r5, r5, #1
 8019b20:	429d      	cmp	r5, r3
 8019b22:	bf38      	it	cc
 8019b24:	461d      	movcc	r5, r3
 8019b26:	0553      	lsls	r3, r2, #21
 8019b28:	d531      	bpl.n	8019b8e <__ssputs_r+0xa0>
 8019b2a:	4629      	mov	r1, r5
 8019b2c:	f7fd ff4a 	bl	80179c4 <_malloc_r>
 8019b30:	4606      	mov	r6, r0
 8019b32:	b950      	cbnz	r0, 8019b4a <__ssputs_r+0x5c>
 8019b34:	230c      	movs	r3, #12
 8019b36:	f8ca 3000 	str.w	r3, [sl]
 8019b3a:	89a3      	ldrh	r3, [r4, #12]
 8019b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019b40:	81a3      	strh	r3, [r4, #12]
 8019b42:	f04f 30ff 	mov.w	r0, #4294967295
 8019b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b4a:	6921      	ldr	r1, [r4, #16]
 8019b4c:	464a      	mov	r2, r9
 8019b4e:	f7fd feb9 	bl	80178c4 <memcpy>
 8019b52:	89a3      	ldrh	r3, [r4, #12]
 8019b54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b5c:	81a3      	strh	r3, [r4, #12]
 8019b5e:	6126      	str	r6, [r4, #16]
 8019b60:	6165      	str	r5, [r4, #20]
 8019b62:	444e      	add	r6, r9
 8019b64:	eba5 0509 	sub.w	r5, r5, r9
 8019b68:	6026      	str	r6, [r4, #0]
 8019b6a:	60a5      	str	r5, [r4, #8]
 8019b6c:	463e      	mov	r6, r7
 8019b6e:	42be      	cmp	r6, r7
 8019b70:	d900      	bls.n	8019b74 <__ssputs_r+0x86>
 8019b72:	463e      	mov	r6, r7
 8019b74:	4632      	mov	r2, r6
 8019b76:	6820      	ldr	r0, [r4, #0]
 8019b78:	4641      	mov	r1, r8
 8019b7a:	f7fd feb1 	bl	80178e0 <memmove>
 8019b7e:	68a3      	ldr	r3, [r4, #8]
 8019b80:	6822      	ldr	r2, [r4, #0]
 8019b82:	1b9b      	subs	r3, r3, r6
 8019b84:	4432      	add	r2, r6
 8019b86:	60a3      	str	r3, [r4, #8]
 8019b88:	6022      	str	r2, [r4, #0]
 8019b8a:	2000      	movs	r0, #0
 8019b8c:	e7db      	b.n	8019b46 <__ssputs_r+0x58>
 8019b8e:	462a      	mov	r2, r5
 8019b90:	f000 fd02 	bl	801a598 <_realloc_r>
 8019b94:	4606      	mov	r6, r0
 8019b96:	2800      	cmp	r0, #0
 8019b98:	d1e1      	bne.n	8019b5e <__ssputs_r+0x70>
 8019b9a:	6921      	ldr	r1, [r4, #16]
 8019b9c:	4650      	mov	r0, sl
 8019b9e:	f7fd fec1 	bl	8017924 <_free_r>
 8019ba2:	e7c7      	b.n	8019b34 <__ssputs_r+0x46>

08019ba4 <_svfiprintf_r>:
 8019ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ba8:	4698      	mov	r8, r3
 8019baa:	898b      	ldrh	r3, [r1, #12]
 8019bac:	061b      	lsls	r3, r3, #24
 8019bae:	b09d      	sub	sp, #116	; 0x74
 8019bb0:	4607      	mov	r7, r0
 8019bb2:	460d      	mov	r5, r1
 8019bb4:	4614      	mov	r4, r2
 8019bb6:	d50e      	bpl.n	8019bd6 <_svfiprintf_r+0x32>
 8019bb8:	690b      	ldr	r3, [r1, #16]
 8019bba:	b963      	cbnz	r3, 8019bd6 <_svfiprintf_r+0x32>
 8019bbc:	2140      	movs	r1, #64	; 0x40
 8019bbe:	f7fd ff01 	bl	80179c4 <_malloc_r>
 8019bc2:	6028      	str	r0, [r5, #0]
 8019bc4:	6128      	str	r0, [r5, #16]
 8019bc6:	b920      	cbnz	r0, 8019bd2 <_svfiprintf_r+0x2e>
 8019bc8:	230c      	movs	r3, #12
 8019bca:	603b      	str	r3, [r7, #0]
 8019bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8019bd0:	e0d1      	b.n	8019d76 <_svfiprintf_r+0x1d2>
 8019bd2:	2340      	movs	r3, #64	; 0x40
 8019bd4:	616b      	str	r3, [r5, #20]
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8019bda:	2320      	movs	r3, #32
 8019bdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8019be4:	2330      	movs	r3, #48	; 0x30
 8019be6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019d90 <_svfiprintf_r+0x1ec>
 8019bea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019bee:	f04f 0901 	mov.w	r9, #1
 8019bf2:	4623      	mov	r3, r4
 8019bf4:	469a      	mov	sl, r3
 8019bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bfa:	b10a      	cbz	r2, 8019c00 <_svfiprintf_r+0x5c>
 8019bfc:	2a25      	cmp	r2, #37	; 0x25
 8019bfe:	d1f9      	bne.n	8019bf4 <_svfiprintf_r+0x50>
 8019c00:	ebba 0b04 	subs.w	fp, sl, r4
 8019c04:	d00b      	beq.n	8019c1e <_svfiprintf_r+0x7a>
 8019c06:	465b      	mov	r3, fp
 8019c08:	4622      	mov	r2, r4
 8019c0a:	4629      	mov	r1, r5
 8019c0c:	4638      	mov	r0, r7
 8019c0e:	f7ff ff6e 	bl	8019aee <__ssputs_r>
 8019c12:	3001      	adds	r0, #1
 8019c14:	f000 80aa 	beq.w	8019d6c <_svfiprintf_r+0x1c8>
 8019c18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c1a:	445a      	add	r2, fp
 8019c1c:	9209      	str	r2, [sp, #36]	; 0x24
 8019c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	f000 80a2 	beq.w	8019d6c <_svfiprintf_r+0x1c8>
 8019c28:	2300      	movs	r3, #0
 8019c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8019c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c32:	f10a 0a01 	add.w	sl, sl, #1
 8019c36:	9304      	str	r3, [sp, #16]
 8019c38:	9307      	str	r3, [sp, #28]
 8019c3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019c3e:	931a      	str	r3, [sp, #104]	; 0x68
 8019c40:	4654      	mov	r4, sl
 8019c42:	2205      	movs	r2, #5
 8019c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c48:	4851      	ldr	r0, [pc, #324]	; (8019d90 <_svfiprintf_r+0x1ec>)
 8019c4a:	f7e6 fac1 	bl	80001d0 <memchr>
 8019c4e:	9a04      	ldr	r2, [sp, #16]
 8019c50:	b9d8      	cbnz	r0, 8019c8a <_svfiprintf_r+0xe6>
 8019c52:	06d0      	lsls	r0, r2, #27
 8019c54:	bf44      	itt	mi
 8019c56:	2320      	movmi	r3, #32
 8019c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c5c:	0711      	lsls	r1, r2, #28
 8019c5e:	bf44      	itt	mi
 8019c60:	232b      	movmi	r3, #43	; 0x2b
 8019c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c66:	f89a 3000 	ldrb.w	r3, [sl]
 8019c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8019c6c:	d015      	beq.n	8019c9a <_svfiprintf_r+0xf6>
 8019c6e:	9a07      	ldr	r2, [sp, #28]
 8019c70:	4654      	mov	r4, sl
 8019c72:	2000      	movs	r0, #0
 8019c74:	f04f 0c0a 	mov.w	ip, #10
 8019c78:	4621      	mov	r1, r4
 8019c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c7e:	3b30      	subs	r3, #48	; 0x30
 8019c80:	2b09      	cmp	r3, #9
 8019c82:	d94e      	bls.n	8019d22 <_svfiprintf_r+0x17e>
 8019c84:	b1b0      	cbz	r0, 8019cb4 <_svfiprintf_r+0x110>
 8019c86:	9207      	str	r2, [sp, #28]
 8019c88:	e014      	b.n	8019cb4 <_svfiprintf_r+0x110>
 8019c8a:	eba0 0308 	sub.w	r3, r0, r8
 8019c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8019c92:	4313      	orrs	r3, r2
 8019c94:	9304      	str	r3, [sp, #16]
 8019c96:	46a2      	mov	sl, r4
 8019c98:	e7d2      	b.n	8019c40 <_svfiprintf_r+0x9c>
 8019c9a:	9b03      	ldr	r3, [sp, #12]
 8019c9c:	1d19      	adds	r1, r3, #4
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	9103      	str	r1, [sp, #12]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	bfbb      	ittet	lt
 8019ca6:	425b      	neglt	r3, r3
 8019ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8019cac:	9307      	strge	r3, [sp, #28]
 8019cae:	9307      	strlt	r3, [sp, #28]
 8019cb0:	bfb8      	it	lt
 8019cb2:	9204      	strlt	r2, [sp, #16]
 8019cb4:	7823      	ldrb	r3, [r4, #0]
 8019cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8019cb8:	d10c      	bne.n	8019cd4 <_svfiprintf_r+0x130>
 8019cba:	7863      	ldrb	r3, [r4, #1]
 8019cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8019cbe:	d135      	bne.n	8019d2c <_svfiprintf_r+0x188>
 8019cc0:	9b03      	ldr	r3, [sp, #12]
 8019cc2:	1d1a      	adds	r2, r3, #4
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	9203      	str	r2, [sp, #12]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	bfb8      	it	lt
 8019ccc:	f04f 33ff 	movlt.w	r3, #4294967295
 8019cd0:	3402      	adds	r4, #2
 8019cd2:	9305      	str	r3, [sp, #20]
 8019cd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019da0 <_svfiprintf_r+0x1fc>
 8019cd8:	7821      	ldrb	r1, [r4, #0]
 8019cda:	2203      	movs	r2, #3
 8019cdc:	4650      	mov	r0, sl
 8019cde:	f7e6 fa77 	bl	80001d0 <memchr>
 8019ce2:	b140      	cbz	r0, 8019cf6 <_svfiprintf_r+0x152>
 8019ce4:	2340      	movs	r3, #64	; 0x40
 8019ce6:	eba0 000a 	sub.w	r0, r0, sl
 8019cea:	fa03 f000 	lsl.w	r0, r3, r0
 8019cee:	9b04      	ldr	r3, [sp, #16]
 8019cf0:	4303      	orrs	r3, r0
 8019cf2:	3401      	adds	r4, #1
 8019cf4:	9304      	str	r3, [sp, #16]
 8019cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cfa:	4826      	ldr	r0, [pc, #152]	; (8019d94 <_svfiprintf_r+0x1f0>)
 8019cfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019d00:	2206      	movs	r2, #6
 8019d02:	f7e6 fa65 	bl	80001d0 <memchr>
 8019d06:	2800      	cmp	r0, #0
 8019d08:	d038      	beq.n	8019d7c <_svfiprintf_r+0x1d8>
 8019d0a:	4b23      	ldr	r3, [pc, #140]	; (8019d98 <_svfiprintf_r+0x1f4>)
 8019d0c:	bb1b      	cbnz	r3, 8019d56 <_svfiprintf_r+0x1b2>
 8019d0e:	9b03      	ldr	r3, [sp, #12]
 8019d10:	3307      	adds	r3, #7
 8019d12:	f023 0307 	bic.w	r3, r3, #7
 8019d16:	3308      	adds	r3, #8
 8019d18:	9303      	str	r3, [sp, #12]
 8019d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d1c:	4433      	add	r3, r6
 8019d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8019d20:	e767      	b.n	8019bf2 <_svfiprintf_r+0x4e>
 8019d22:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d26:	460c      	mov	r4, r1
 8019d28:	2001      	movs	r0, #1
 8019d2a:	e7a5      	b.n	8019c78 <_svfiprintf_r+0xd4>
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	3401      	adds	r4, #1
 8019d30:	9305      	str	r3, [sp, #20]
 8019d32:	4619      	mov	r1, r3
 8019d34:	f04f 0c0a 	mov.w	ip, #10
 8019d38:	4620      	mov	r0, r4
 8019d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d3e:	3a30      	subs	r2, #48	; 0x30
 8019d40:	2a09      	cmp	r2, #9
 8019d42:	d903      	bls.n	8019d4c <_svfiprintf_r+0x1a8>
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d0c5      	beq.n	8019cd4 <_svfiprintf_r+0x130>
 8019d48:	9105      	str	r1, [sp, #20]
 8019d4a:	e7c3      	b.n	8019cd4 <_svfiprintf_r+0x130>
 8019d4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d50:	4604      	mov	r4, r0
 8019d52:	2301      	movs	r3, #1
 8019d54:	e7f0      	b.n	8019d38 <_svfiprintf_r+0x194>
 8019d56:	ab03      	add	r3, sp, #12
 8019d58:	9300      	str	r3, [sp, #0]
 8019d5a:	462a      	mov	r2, r5
 8019d5c:	4b0f      	ldr	r3, [pc, #60]	; (8019d9c <_svfiprintf_r+0x1f8>)
 8019d5e:	a904      	add	r1, sp, #16
 8019d60:	4638      	mov	r0, r7
 8019d62:	f7fd ff29 	bl	8017bb8 <_printf_float>
 8019d66:	1c42      	adds	r2, r0, #1
 8019d68:	4606      	mov	r6, r0
 8019d6a:	d1d6      	bne.n	8019d1a <_svfiprintf_r+0x176>
 8019d6c:	89ab      	ldrh	r3, [r5, #12]
 8019d6e:	065b      	lsls	r3, r3, #25
 8019d70:	f53f af2c 	bmi.w	8019bcc <_svfiprintf_r+0x28>
 8019d74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d76:	b01d      	add	sp, #116	; 0x74
 8019d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d7c:	ab03      	add	r3, sp, #12
 8019d7e:	9300      	str	r3, [sp, #0]
 8019d80:	462a      	mov	r2, r5
 8019d82:	4b06      	ldr	r3, [pc, #24]	; (8019d9c <_svfiprintf_r+0x1f8>)
 8019d84:	a904      	add	r1, sp, #16
 8019d86:	4638      	mov	r0, r7
 8019d88:	f7fe f9ba 	bl	8018100 <_printf_i>
 8019d8c:	e7eb      	b.n	8019d66 <_svfiprintf_r+0x1c2>
 8019d8e:	bf00      	nop
 8019d90:	0801b0e4 	.word	0x0801b0e4
 8019d94:	0801b0ee 	.word	0x0801b0ee
 8019d98:	08017bb9 	.word	0x08017bb9
 8019d9c:	08019aef 	.word	0x08019aef
 8019da0:	0801b0ea 	.word	0x0801b0ea

08019da4 <__sfputc_r>:
 8019da4:	6893      	ldr	r3, [r2, #8]
 8019da6:	3b01      	subs	r3, #1
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	b410      	push	{r4}
 8019dac:	6093      	str	r3, [r2, #8]
 8019dae:	da08      	bge.n	8019dc2 <__sfputc_r+0x1e>
 8019db0:	6994      	ldr	r4, [r2, #24]
 8019db2:	42a3      	cmp	r3, r4
 8019db4:	db01      	blt.n	8019dba <__sfputc_r+0x16>
 8019db6:	290a      	cmp	r1, #10
 8019db8:	d103      	bne.n	8019dc2 <__sfputc_r+0x1e>
 8019dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dbe:	f000 b98f 	b.w	801a0e0 <__swbuf_r>
 8019dc2:	6813      	ldr	r3, [r2, #0]
 8019dc4:	1c58      	adds	r0, r3, #1
 8019dc6:	6010      	str	r0, [r2, #0]
 8019dc8:	7019      	strb	r1, [r3, #0]
 8019dca:	4608      	mov	r0, r1
 8019dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dd0:	4770      	bx	lr

08019dd2 <__sfputs_r>:
 8019dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dd4:	4606      	mov	r6, r0
 8019dd6:	460f      	mov	r7, r1
 8019dd8:	4614      	mov	r4, r2
 8019dda:	18d5      	adds	r5, r2, r3
 8019ddc:	42ac      	cmp	r4, r5
 8019dde:	d101      	bne.n	8019de4 <__sfputs_r+0x12>
 8019de0:	2000      	movs	r0, #0
 8019de2:	e007      	b.n	8019df4 <__sfputs_r+0x22>
 8019de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019de8:	463a      	mov	r2, r7
 8019dea:	4630      	mov	r0, r6
 8019dec:	f7ff ffda 	bl	8019da4 <__sfputc_r>
 8019df0:	1c43      	adds	r3, r0, #1
 8019df2:	d1f3      	bne.n	8019ddc <__sfputs_r+0xa>
 8019df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019df8 <_vfiprintf_r>:
 8019df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dfc:	460d      	mov	r5, r1
 8019dfe:	b09d      	sub	sp, #116	; 0x74
 8019e00:	4614      	mov	r4, r2
 8019e02:	4698      	mov	r8, r3
 8019e04:	4606      	mov	r6, r0
 8019e06:	b118      	cbz	r0, 8019e10 <_vfiprintf_r+0x18>
 8019e08:	6983      	ldr	r3, [r0, #24]
 8019e0a:	b90b      	cbnz	r3, 8019e10 <_vfiprintf_r+0x18>
 8019e0c:	f7ff fa30 	bl	8019270 <__sinit>
 8019e10:	4b89      	ldr	r3, [pc, #548]	; (801a038 <_vfiprintf_r+0x240>)
 8019e12:	429d      	cmp	r5, r3
 8019e14:	d11b      	bne.n	8019e4e <_vfiprintf_r+0x56>
 8019e16:	6875      	ldr	r5, [r6, #4]
 8019e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e1a:	07d9      	lsls	r1, r3, #31
 8019e1c:	d405      	bmi.n	8019e2a <_vfiprintf_r+0x32>
 8019e1e:	89ab      	ldrh	r3, [r5, #12]
 8019e20:	059a      	lsls	r2, r3, #22
 8019e22:	d402      	bmi.n	8019e2a <_vfiprintf_r+0x32>
 8019e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e26:	f7ff fac6 	bl	80193b6 <__retarget_lock_acquire_recursive>
 8019e2a:	89ab      	ldrh	r3, [r5, #12]
 8019e2c:	071b      	lsls	r3, r3, #28
 8019e2e:	d501      	bpl.n	8019e34 <_vfiprintf_r+0x3c>
 8019e30:	692b      	ldr	r3, [r5, #16]
 8019e32:	b9eb      	cbnz	r3, 8019e70 <_vfiprintf_r+0x78>
 8019e34:	4629      	mov	r1, r5
 8019e36:	4630      	mov	r0, r6
 8019e38:	f000 f9b6 	bl	801a1a8 <__swsetup_r>
 8019e3c:	b1c0      	cbz	r0, 8019e70 <_vfiprintf_r+0x78>
 8019e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e40:	07dc      	lsls	r4, r3, #31
 8019e42:	d50e      	bpl.n	8019e62 <_vfiprintf_r+0x6a>
 8019e44:	f04f 30ff 	mov.w	r0, #4294967295
 8019e48:	b01d      	add	sp, #116	; 0x74
 8019e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e4e:	4b7b      	ldr	r3, [pc, #492]	; (801a03c <_vfiprintf_r+0x244>)
 8019e50:	429d      	cmp	r5, r3
 8019e52:	d101      	bne.n	8019e58 <_vfiprintf_r+0x60>
 8019e54:	68b5      	ldr	r5, [r6, #8]
 8019e56:	e7df      	b.n	8019e18 <_vfiprintf_r+0x20>
 8019e58:	4b79      	ldr	r3, [pc, #484]	; (801a040 <_vfiprintf_r+0x248>)
 8019e5a:	429d      	cmp	r5, r3
 8019e5c:	bf08      	it	eq
 8019e5e:	68f5      	ldreq	r5, [r6, #12]
 8019e60:	e7da      	b.n	8019e18 <_vfiprintf_r+0x20>
 8019e62:	89ab      	ldrh	r3, [r5, #12]
 8019e64:	0598      	lsls	r0, r3, #22
 8019e66:	d4ed      	bmi.n	8019e44 <_vfiprintf_r+0x4c>
 8019e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e6a:	f7ff faa5 	bl	80193b8 <__retarget_lock_release_recursive>
 8019e6e:	e7e9      	b.n	8019e44 <_vfiprintf_r+0x4c>
 8019e70:	2300      	movs	r3, #0
 8019e72:	9309      	str	r3, [sp, #36]	; 0x24
 8019e74:	2320      	movs	r3, #32
 8019e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e7e:	2330      	movs	r3, #48	; 0x30
 8019e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a044 <_vfiprintf_r+0x24c>
 8019e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e88:	f04f 0901 	mov.w	r9, #1
 8019e8c:	4623      	mov	r3, r4
 8019e8e:	469a      	mov	sl, r3
 8019e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e94:	b10a      	cbz	r2, 8019e9a <_vfiprintf_r+0xa2>
 8019e96:	2a25      	cmp	r2, #37	; 0x25
 8019e98:	d1f9      	bne.n	8019e8e <_vfiprintf_r+0x96>
 8019e9a:	ebba 0b04 	subs.w	fp, sl, r4
 8019e9e:	d00b      	beq.n	8019eb8 <_vfiprintf_r+0xc0>
 8019ea0:	465b      	mov	r3, fp
 8019ea2:	4622      	mov	r2, r4
 8019ea4:	4629      	mov	r1, r5
 8019ea6:	4630      	mov	r0, r6
 8019ea8:	f7ff ff93 	bl	8019dd2 <__sfputs_r>
 8019eac:	3001      	adds	r0, #1
 8019eae:	f000 80aa 	beq.w	801a006 <_vfiprintf_r+0x20e>
 8019eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019eb4:	445a      	add	r2, fp
 8019eb6:	9209      	str	r2, [sp, #36]	; 0x24
 8019eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	f000 80a2 	beq.w	801a006 <_vfiprintf_r+0x20e>
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8019ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019ecc:	f10a 0a01 	add.w	sl, sl, #1
 8019ed0:	9304      	str	r3, [sp, #16]
 8019ed2:	9307      	str	r3, [sp, #28]
 8019ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019ed8:	931a      	str	r3, [sp, #104]	; 0x68
 8019eda:	4654      	mov	r4, sl
 8019edc:	2205      	movs	r2, #5
 8019ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ee2:	4858      	ldr	r0, [pc, #352]	; (801a044 <_vfiprintf_r+0x24c>)
 8019ee4:	f7e6 f974 	bl	80001d0 <memchr>
 8019ee8:	9a04      	ldr	r2, [sp, #16]
 8019eea:	b9d8      	cbnz	r0, 8019f24 <_vfiprintf_r+0x12c>
 8019eec:	06d1      	lsls	r1, r2, #27
 8019eee:	bf44      	itt	mi
 8019ef0:	2320      	movmi	r3, #32
 8019ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ef6:	0713      	lsls	r3, r2, #28
 8019ef8:	bf44      	itt	mi
 8019efa:	232b      	movmi	r3, #43	; 0x2b
 8019efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f00:	f89a 3000 	ldrb.w	r3, [sl]
 8019f04:	2b2a      	cmp	r3, #42	; 0x2a
 8019f06:	d015      	beq.n	8019f34 <_vfiprintf_r+0x13c>
 8019f08:	9a07      	ldr	r2, [sp, #28]
 8019f0a:	4654      	mov	r4, sl
 8019f0c:	2000      	movs	r0, #0
 8019f0e:	f04f 0c0a 	mov.w	ip, #10
 8019f12:	4621      	mov	r1, r4
 8019f14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f18:	3b30      	subs	r3, #48	; 0x30
 8019f1a:	2b09      	cmp	r3, #9
 8019f1c:	d94e      	bls.n	8019fbc <_vfiprintf_r+0x1c4>
 8019f1e:	b1b0      	cbz	r0, 8019f4e <_vfiprintf_r+0x156>
 8019f20:	9207      	str	r2, [sp, #28]
 8019f22:	e014      	b.n	8019f4e <_vfiprintf_r+0x156>
 8019f24:	eba0 0308 	sub.w	r3, r0, r8
 8019f28:	fa09 f303 	lsl.w	r3, r9, r3
 8019f2c:	4313      	orrs	r3, r2
 8019f2e:	9304      	str	r3, [sp, #16]
 8019f30:	46a2      	mov	sl, r4
 8019f32:	e7d2      	b.n	8019eda <_vfiprintf_r+0xe2>
 8019f34:	9b03      	ldr	r3, [sp, #12]
 8019f36:	1d19      	adds	r1, r3, #4
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	9103      	str	r1, [sp, #12]
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	bfbb      	ittet	lt
 8019f40:	425b      	neglt	r3, r3
 8019f42:	f042 0202 	orrlt.w	r2, r2, #2
 8019f46:	9307      	strge	r3, [sp, #28]
 8019f48:	9307      	strlt	r3, [sp, #28]
 8019f4a:	bfb8      	it	lt
 8019f4c:	9204      	strlt	r2, [sp, #16]
 8019f4e:	7823      	ldrb	r3, [r4, #0]
 8019f50:	2b2e      	cmp	r3, #46	; 0x2e
 8019f52:	d10c      	bne.n	8019f6e <_vfiprintf_r+0x176>
 8019f54:	7863      	ldrb	r3, [r4, #1]
 8019f56:	2b2a      	cmp	r3, #42	; 0x2a
 8019f58:	d135      	bne.n	8019fc6 <_vfiprintf_r+0x1ce>
 8019f5a:	9b03      	ldr	r3, [sp, #12]
 8019f5c:	1d1a      	adds	r2, r3, #4
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	9203      	str	r2, [sp, #12]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	bfb8      	it	lt
 8019f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f6a:	3402      	adds	r4, #2
 8019f6c:	9305      	str	r3, [sp, #20]
 8019f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a054 <_vfiprintf_r+0x25c>
 8019f72:	7821      	ldrb	r1, [r4, #0]
 8019f74:	2203      	movs	r2, #3
 8019f76:	4650      	mov	r0, sl
 8019f78:	f7e6 f92a 	bl	80001d0 <memchr>
 8019f7c:	b140      	cbz	r0, 8019f90 <_vfiprintf_r+0x198>
 8019f7e:	2340      	movs	r3, #64	; 0x40
 8019f80:	eba0 000a 	sub.w	r0, r0, sl
 8019f84:	fa03 f000 	lsl.w	r0, r3, r0
 8019f88:	9b04      	ldr	r3, [sp, #16]
 8019f8a:	4303      	orrs	r3, r0
 8019f8c:	3401      	adds	r4, #1
 8019f8e:	9304      	str	r3, [sp, #16]
 8019f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f94:	482c      	ldr	r0, [pc, #176]	; (801a048 <_vfiprintf_r+0x250>)
 8019f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f9a:	2206      	movs	r2, #6
 8019f9c:	f7e6 f918 	bl	80001d0 <memchr>
 8019fa0:	2800      	cmp	r0, #0
 8019fa2:	d03f      	beq.n	801a024 <_vfiprintf_r+0x22c>
 8019fa4:	4b29      	ldr	r3, [pc, #164]	; (801a04c <_vfiprintf_r+0x254>)
 8019fa6:	bb1b      	cbnz	r3, 8019ff0 <_vfiprintf_r+0x1f8>
 8019fa8:	9b03      	ldr	r3, [sp, #12]
 8019faa:	3307      	adds	r3, #7
 8019fac:	f023 0307 	bic.w	r3, r3, #7
 8019fb0:	3308      	adds	r3, #8
 8019fb2:	9303      	str	r3, [sp, #12]
 8019fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fb6:	443b      	add	r3, r7
 8019fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8019fba:	e767      	b.n	8019e8c <_vfiprintf_r+0x94>
 8019fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8019fc0:	460c      	mov	r4, r1
 8019fc2:	2001      	movs	r0, #1
 8019fc4:	e7a5      	b.n	8019f12 <_vfiprintf_r+0x11a>
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	3401      	adds	r4, #1
 8019fca:	9305      	str	r3, [sp, #20]
 8019fcc:	4619      	mov	r1, r3
 8019fce:	f04f 0c0a 	mov.w	ip, #10
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019fd8:	3a30      	subs	r2, #48	; 0x30
 8019fda:	2a09      	cmp	r2, #9
 8019fdc:	d903      	bls.n	8019fe6 <_vfiprintf_r+0x1ee>
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d0c5      	beq.n	8019f6e <_vfiprintf_r+0x176>
 8019fe2:	9105      	str	r1, [sp, #20]
 8019fe4:	e7c3      	b.n	8019f6e <_vfiprintf_r+0x176>
 8019fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fea:	4604      	mov	r4, r0
 8019fec:	2301      	movs	r3, #1
 8019fee:	e7f0      	b.n	8019fd2 <_vfiprintf_r+0x1da>
 8019ff0:	ab03      	add	r3, sp, #12
 8019ff2:	9300      	str	r3, [sp, #0]
 8019ff4:	462a      	mov	r2, r5
 8019ff6:	4b16      	ldr	r3, [pc, #88]	; (801a050 <_vfiprintf_r+0x258>)
 8019ff8:	a904      	add	r1, sp, #16
 8019ffa:	4630      	mov	r0, r6
 8019ffc:	f7fd fddc 	bl	8017bb8 <_printf_float>
 801a000:	4607      	mov	r7, r0
 801a002:	1c78      	adds	r0, r7, #1
 801a004:	d1d6      	bne.n	8019fb4 <_vfiprintf_r+0x1bc>
 801a006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a008:	07d9      	lsls	r1, r3, #31
 801a00a:	d405      	bmi.n	801a018 <_vfiprintf_r+0x220>
 801a00c:	89ab      	ldrh	r3, [r5, #12]
 801a00e:	059a      	lsls	r2, r3, #22
 801a010:	d402      	bmi.n	801a018 <_vfiprintf_r+0x220>
 801a012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a014:	f7ff f9d0 	bl	80193b8 <__retarget_lock_release_recursive>
 801a018:	89ab      	ldrh	r3, [r5, #12]
 801a01a:	065b      	lsls	r3, r3, #25
 801a01c:	f53f af12 	bmi.w	8019e44 <_vfiprintf_r+0x4c>
 801a020:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a022:	e711      	b.n	8019e48 <_vfiprintf_r+0x50>
 801a024:	ab03      	add	r3, sp, #12
 801a026:	9300      	str	r3, [sp, #0]
 801a028:	462a      	mov	r2, r5
 801a02a:	4b09      	ldr	r3, [pc, #36]	; (801a050 <_vfiprintf_r+0x258>)
 801a02c:	a904      	add	r1, sp, #16
 801a02e:	4630      	mov	r0, r6
 801a030:	f7fe f866 	bl	8018100 <_printf_i>
 801a034:	e7e4      	b.n	801a000 <_vfiprintf_r+0x208>
 801a036:	bf00      	nop
 801a038:	0801af44 	.word	0x0801af44
 801a03c:	0801af64 	.word	0x0801af64
 801a040:	0801af24 	.word	0x0801af24
 801a044:	0801b0e4 	.word	0x0801b0e4
 801a048:	0801b0ee 	.word	0x0801b0ee
 801a04c:	08017bb9 	.word	0x08017bb9
 801a050:	08019dd3 	.word	0x08019dd3
 801a054:	0801b0ea 	.word	0x0801b0ea

0801a058 <__sread>:
 801a058:	b510      	push	{r4, lr}
 801a05a:	460c      	mov	r4, r1
 801a05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a060:	f000 fac0 	bl	801a5e4 <_read_r>
 801a064:	2800      	cmp	r0, #0
 801a066:	bfab      	itete	ge
 801a068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a06a:	89a3      	ldrhlt	r3, [r4, #12]
 801a06c:	181b      	addge	r3, r3, r0
 801a06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a072:	bfac      	ite	ge
 801a074:	6563      	strge	r3, [r4, #84]	; 0x54
 801a076:	81a3      	strhlt	r3, [r4, #12]
 801a078:	bd10      	pop	{r4, pc}

0801a07a <__swrite>:
 801a07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a07e:	461f      	mov	r7, r3
 801a080:	898b      	ldrh	r3, [r1, #12]
 801a082:	05db      	lsls	r3, r3, #23
 801a084:	4605      	mov	r5, r0
 801a086:	460c      	mov	r4, r1
 801a088:	4616      	mov	r6, r2
 801a08a:	d505      	bpl.n	801a098 <__swrite+0x1e>
 801a08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a090:	2302      	movs	r3, #2
 801a092:	2200      	movs	r2, #0
 801a094:	f000 f9f8 	bl	801a488 <_lseek_r>
 801a098:	89a3      	ldrh	r3, [r4, #12]
 801a09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a0a2:	81a3      	strh	r3, [r4, #12]
 801a0a4:	4632      	mov	r2, r6
 801a0a6:	463b      	mov	r3, r7
 801a0a8:	4628      	mov	r0, r5
 801a0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ae:	f000 b869 	b.w	801a184 <_write_r>

0801a0b2 <__sseek>:
 801a0b2:	b510      	push	{r4, lr}
 801a0b4:	460c      	mov	r4, r1
 801a0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0ba:	f000 f9e5 	bl	801a488 <_lseek_r>
 801a0be:	1c43      	adds	r3, r0, #1
 801a0c0:	89a3      	ldrh	r3, [r4, #12]
 801a0c2:	bf15      	itete	ne
 801a0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a0ce:	81a3      	strheq	r3, [r4, #12]
 801a0d0:	bf18      	it	ne
 801a0d2:	81a3      	strhne	r3, [r4, #12]
 801a0d4:	bd10      	pop	{r4, pc}

0801a0d6 <__sclose>:
 801a0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0da:	f000 b8f1 	b.w	801a2c0 <_close_r>
	...

0801a0e0 <__swbuf_r>:
 801a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0e2:	460e      	mov	r6, r1
 801a0e4:	4614      	mov	r4, r2
 801a0e6:	4605      	mov	r5, r0
 801a0e8:	b118      	cbz	r0, 801a0f2 <__swbuf_r+0x12>
 801a0ea:	6983      	ldr	r3, [r0, #24]
 801a0ec:	b90b      	cbnz	r3, 801a0f2 <__swbuf_r+0x12>
 801a0ee:	f7ff f8bf 	bl	8019270 <__sinit>
 801a0f2:	4b21      	ldr	r3, [pc, #132]	; (801a178 <__swbuf_r+0x98>)
 801a0f4:	429c      	cmp	r4, r3
 801a0f6:	d12b      	bne.n	801a150 <__swbuf_r+0x70>
 801a0f8:	686c      	ldr	r4, [r5, #4]
 801a0fa:	69a3      	ldr	r3, [r4, #24]
 801a0fc:	60a3      	str	r3, [r4, #8]
 801a0fe:	89a3      	ldrh	r3, [r4, #12]
 801a100:	071a      	lsls	r2, r3, #28
 801a102:	d52f      	bpl.n	801a164 <__swbuf_r+0x84>
 801a104:	6923      	ldr	r3, [r4, #16]
 801a106:	b36b      	cbz	r3, 801a164 <__swbuf_r+0x84>
 801a108:	6923      	ldr	r3, [r4, #16]
 801a10a:	6820      	ldr	r0, [r4, #0]
 801a10c:	1ac0      	subs	r0, r0, r3
 801a10e:	6963      	ldr	r3, [r4, #20]
 801a110:	b2f6      	uxtb	r6, r6
 801a112:	4283      	cmp	r3, r0
 801a114:	4637      	mov	r7, r6
 801a116:	dc04      	bgt.n	801a122 <__swbuf_r+0x42>
 801a118:	4621      	mov	r1, r4
 801a11a:	4628      	mov	r0, r5
 801a11c:	f000 f966 	bl	801a3ec <_fflush_r>
 801a120:	bb30      	cbnz	r0, 801a170 <__swbuf_r+0x90>
 801a122:	68a3      	ldr	r3, [r4, #8]
 801a124:	3b01      	subs	r3, #1
 801a126:	60a3      	str	r3, [r4, #8]
 801a128:	6823      	ldr	r3, [r4, #0]
 801a12a:	1c5a      	adds	r2, r3, #1
 801a12c:	6022      	str	r2, [r4, #0]
 801a12e:	701e      	strb	r6, [r3, #0]
 801a130:	6963      	ldr	r3, [r4, #20]
 801a132:	3001      	adds	r0, #1
 801a134:	4283      	cmp	r3, r0
 801a136:	d004      	beq.n	801a142 <__swbuf_r+0x62>
 801a138:	89a3      	ldrh	r3, [r4, #12]
 801a13a:	07db      	lsls	r3, r3, #31
 801a13c:	d506      	bpl.n	801a14c <__swbuf_r+0x6c>
 801a13e:	2e0a      	cmp	r6, #10
 801a140:	d104      	bne.n	801a14c <__swbuf_r+0x6c>
 801a142:	4621      	mov	r1, r4
 801a144:	4628      	mov	r0, r5
 801a146:	f000 f951 	bl	801a3ec <_fflush_r>
 801a14a:	b988      	cbnz	r0, 801a170 <__swbuf_r+0x90>
 801a14c:	4638      	mov	r0, r7
 801a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a150:	4b0a      	ldr	r3, [pc, #40]	; (801a17c <__swbuf_r+0x9c>)
 801a152:	429c      	cmp	r4, r3
 801a154:	d101      	bne.n	801a15a <__swbuf_r+0x7a>
 801a156:	68ac      	ldr	r4, [r5, #8]
 801a158:	e7cf      	b.n	801a0fa <__swbuf_r+0x1a>
 801a15a:	4b09      	ldr	r3, [pc, #36]	; (801a180 <__swbuf_r+0xa0>)
 801a15c:	429c      	cmp	r4, r3
 801a15e:	bf08      	it	eq
 801a160:	68ec      	ldreq	r4, [r5, #12]
 801a162:	e7ca      	b.n	801a0fa <__swbuf_r+0x1a>
 801a164:	4621      	mov	r1, r4
 801a166:	4628      	mov	r0, r5
 801a168:	f000 f81e 	bl	801a1a8 <__swsetup_r>
 801a16c:	2800      	cmp	r0, #0
 801a16e:	d0cb      	beq.n	801a108 <__swbuf_r+0x28>
 801a170:	f04f 37ff 	mov.w	r7, #4294967295
 801a174:	e7ea      	b.n	801a14c <__swbuf_r+0x6c>
 801a176:	bf00      	nop
 801a178:	0801af44 	.word	0x0801af44
 801a17c:	0801af64 	.word	0x0801af64
 801a180:	0801af24 	.word	0x0801af24

0801a184 <_write_r>:
 801a184:	b538      	push	{r3, r4, r5, lr}
 801a186:	4d07      	ldr	r5, [pc, #28]	; (801a1a4 <_write_r+0x20>)
 801a188:	4604      	mov	r4, r0
 801a18a:	4608      	mov	r0, r1
 801a18c:	4611      	mov	r1, r2
 801a18e:	2200      	movs	r2, #0
 801a190:	602a      	str	r2, [r5, #0]
 801a192:	461a      	mov	r2, r3
 801a194:	f7e8 fc45 	bl	8002a22 <_write>
 801a198:	1c43      	adds	r3, r0, #1
 801a19a:	d102      	bne.n	801a1a2 <_write_r+0x1e>
 801a19c:	682b      	ldr	r3, [r5, #0]
 801a19e:	b103      	cbz	r3, 801a1a2 <_write_r+0x1e>
 801a1a0:	6023      	str	r3, [r4, #0]
 801a1a2:	bd38      	pop	{r3, r4, r5, pc}
 801a1a4:	20001a04 	.word	0x20001a04

0801a1a8 <__swsetup_r>:
 801a1a8:	4b32      	ldr	r3, [pc, #200]	; (801a274 <__swsetup_r+0xcc>)
 801a1aa:	b570      	push	{r4, r5, r6, lr}
 801a1ac:	681d      	ldr	r5, [r3, #0]
 801a1ae:	4606      	mov	r6, r0
 801a1b0:	460c      	mov	r4, r1
 801a1b2:	b125      	cbz	r5, 801a1be <__swsetup_r+0x16>
 801a1b4:	69ab      	ldr	r3, [r5, #24]
 801a1b6:	b913      	cbnz	r3, 801a1be <__swsetup_r+0x16>
 801a1b8:	4628      	mov	r0, r5
 801a1ba:	f7ff f859 	bl	8019270 <__sinit>
 801a1be:	4b2e      	ldr	r3, [pc, #184]	; (801a278 <__swsetup_r+0xd0>)
 801a1c0:	429c      	cmp	r4, r3
 801a1c2:	d10f      	bne.n	801a1e4 <__swsetup_r+0x3c>
 801a1c4:	686c      	ldr	r4, [r5, #4]
 801a1c6:	89a3      	ldrh	r3, [r4, #12]
 801a1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1cc:	0719      	lsls	r1, r3, #28
 801a1ce:	d42c      	bmi.n	801a22a <__swsetup_r+0x82>
 801a1d0:	06dd      	lsls	r5, r3, #27
 801a1d2:	d411      	bmi.n	801a1f8 <__swsetup_r+0x50>
 801a1d4:	2309      	movs	r3, #9
 801a1d6:	6033      	str	r3, [r6, #0]
 801a1d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1dc:	81a3      	strh	r3, [r4, #12]
 801a1de:	f04f 30ff 	mov.w	r0, #4294967295
 801a1e2:	e03e      	b.n	801a262 <__swsetup_r+0xba>
 801a1e4:	4b25      	ldr	r3, [pc, #148]	; (801a27c <__swsetup_r+0xd4>)
 801a1e6:	429c      	cmp	r4, r3
 801a1e8:	d101      	bne.n	801a1ee <__swsetup_r+0x46>
 801a1ea:	68ac      	ldr	r4, [r5, #8]
 801a1ec:	e7eb      	b.n	801a1c6 <__swsetup_r+0x1e>
 801a1ee:	4b24      	ldr	r3, [pc, #144]	; (801a280 <__swsetup_r+0xd8>)
 801a1f0:	429c      	cmp	r4, r3
 801a1f2:	bf08      	it	eq
 801a1f4:	68ec      	ldreq	r4, [r5, #12]
 801a1f6:	e7e6      	b.n	801a1c6 <__swsetup_r+0x1e>
 801a1f8:	0758      	lsls	r0, r3, #29
 801a1fa:	d512      	bpl.n	801a222 <__swsetup_r+0x7a>
 801a1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1fe:	b141      	cbz	r1, 801a212 <__swsetup_r+0x6a>
 801a200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a204:	4299      	cmp	r1, r3
 801a206:	d002      	beq.n	801a20e <__swsetup_r+0x66>
 801a208:	4630      	mov	r0, r6
 801a20a:	f7fd fb8b 	bl	8017924 <_free_r>
 801a20e:	2300      	movs	r3, #0
 801a210:	6363      	str	r3, [r4, #52]	; 0x34
 801a212:	89a3      	ldrh	r3, [r4, #12]
 801a214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a218:	81a3      	strh	r3, [r4, #12]
 801a21a:	2300      	movs	r3, #0
 801a21c:	6063      	str	r3, [r4, #4]
 801a21e:	6923      	ldr	r3, [r4, #16]
 801a220:	6023      	str	r3, [r4, #0]
 801a222:	89a3      	ldrh	r3, [r4, #12]
 801a224:	f043 0308 	orr.w	r3, r3, #8
 801a228:	81a3      	strh	r3, [r4, #12]
 801a22a:	6923      	ldr	r3, [r4, #16]
 801a22c:	b94b      	cbnz	r3, 801a242 <__swsetup_r+0x9a>
 801a22e:	89a3      	ldrh	r3, [r4, #12]
 801a230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a238:	d003      	beq.n	801a242 <__swsetup_r+0x9a>
 801a23a:	4621      	mov	r1, r4
 801a23c:	4630      	mov	r0, r6
 801a23e:	f000 f959 	bl	801a4f4 <__smakebuf_r>
 801a242:	89a0      	ldrh	r0, [r4, #12]
 801a244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a248:	f010 0301 	ands.w	r3, r0, #1
 801a24c:	d00a      	beq.n	801a264 <__swsetup_r+0xbc>
 801a24e:	2300      	movs	r3, #0
 801a250:	60a3      	str	r3, [r4, #8]
 801a252:	6963      	ldr	r3, [r4, #20]
 801a254:	425b      	negs	r3, r3
 801a256:	61a3      	str	r3, [r4, #24]
 801a258:	6923      	ldr	r3, [r4, #16]
 801a25a:	b943      	cbnz	r3, 801a26e <__swsetup_r+0xc6>
 801a25c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a260:	d1ba      	bne.n	801a1d8 <__swsetup_r+0x30>
 801a262:	bd70      	pop	{r4, r5, r6, pc}
 801a264:	0781      	lsls	r1, r0, #30
 801a266:	bf58      	it	pl
 801a268:	6963      	ldrpl	r3, [r4, #20]
 801a26a:	60a3      	str	r3, [r4, #8]
 801a26c:	e7f4      	b.n	801a258 <__swsetup_r+0xb0>
 801a26e:	2000      	movs	r0, #0
 801a270:	e7f7      	b.n	801a262 <__swsetup_r+0xba>
 801a272:	bf00      	nop
 801a274:	200000f0 	.word	0x200000f0
 801a278:	0801af44 	.word	0x0801af44
 801a27c:	0801af64 	.word	0x0801af64
 801a280:	0801af24 	.word	0x0801af24

0801a284 <__assert_func>:
 801a284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a286:	4614      	mov	r4, r2
 801a288:	461a      	mov	r2, r3
 801a28a:	4b09      	ldr	r3, [pc, #36]	; (801a2b0 <__assert_func+0x2c>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4605      	mov	r5, r0
 801a290:	68d8      	ldr	r0, [r3, #12]
 801a292:	b14c      	cbz	r4, 801a2a8 <__assert_func+0x24>
 801a294:	4b07      	ldr	r3, [pc, #28]	; (801a2b4 <__assert_func+0x30>)
 801a296:	9100      	str	r1, [sp, #0]
 801a298:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a29c:	4906      	ldr	r1, [pc, #24]	; (801a2b8 <__assert_func+0x34>)
 801a29e:	462b      	mov	r3, r5
 801a2a0:	f000 f8e0 	bl	801a464 <fiprintf>
 801a2a4:	f7fd facc 	bl	8017840 <abort>
 801a2a8:	4b04      	ldr	r3, [pc, #16]	; (801a2bc <__assert_func+0x38>)
 801a2aa:	461c      	mov	r4, r3
 801a2ac:	e7f3      	b.n	801a296 <__assert_func+0x12>
 801a2ae:	bf00      	nop
 801a2b0:	200000f0 	.word	0x200000f0
 801a2b4:	0801b0f5 	.word	0x0801b0f5
 801a2b8:	0801b102 	.word	0x0801b102
 801a2bc:	0801b130 	.word	0x0801b130

0801a2c0 <_close_r>:
 801a2c0:	b538      	push	{r3, r4, r5, lr}
 801a2c2:	4d06      	ldr	r5, [pc, #24]	; (801a2dc <_close_r+0x1c>)
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	4608      	mov	r0, r1
 801a2ca:	602b      	str	r3, [r5, #0]
 801a2cc:	f7e8 fbc5 	bl	8002a5a <_close>
 801a2d0:	1c43      	adds	r3, r0, #1
 801a2d2:	d102      	bne.n	801a2da <_close_r+0x1a>
 801a2d4:	682b      	ldr	r3, [r5, #0]
 801a2d6:	b103      	cbz	r3, 801a2da <_close_r+0x1a>
 801a2d8:	6023      	str	r3, [r4, #0]
 801a2da:	bd38      	pop	{r3, r4, r5, pc}
 801a2dc:	20001a04 	.word	0x20001a04

0801a2e0 <__sflush_r>:
 801a2e0:	898a      	ldrh	r2, [r1, #12]
 801a2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2e6:	4605      	mov	r5, r0
 801a2e8:	0710      	lsls	r0, r2, #28
 801a2ea:	460c      	mov	r4, r1
 801a2ec:	d458      	bmi.n	801a3a0 <__sflush_r+0xc0>
 801a2ee:	684b      	ldr	r3, [r1, #4]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	dc05      	bgt.n	801a300 <__sflush_r+0x20>
 801a2f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	dc02      	bgt.n	801a300 <__sflush_r+0x20>
 801a2fa:	2000      	movs	r0, #0
 801a2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a302:	2e00      	cmp	r6, #0
 801a304:	d0f9      	beq.n	801a2fa <__sflush_r+0x1a>
 801a306:	2300      	movs	r3, #0
 801a308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a30c:	682f      	ldr	r7, [r5, #0]
 801a30e:	602b      	str	r3, [r5, #0]
 801a310:	d032      	beq.n	801a378 <__sflush_r+0x98>
 801a312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a314:	89a3      	ldrh	r3, [r4, #12]
 801a316:	075a      	lsls	r2, r3, #29
 801a318:	d505      	bpl.n	801a326 <__sflush_r+0x46>
 801a31a:	6863      	ldr	r3, [r4, #4]
 801a31c:	1ac0      	subs	r0, r0, r3
 801a31e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a320:	b10b      	cbz	r3, 801a326 <__sflush_r+0x46>
 801a322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a324:	1ac0      	subs	r0, r0, r3
 801a326:	2300      	movs	r3, #0
 801a328:	4602      	mov	r2, r0
 801a32a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a32c:	6a21      	ldr	r1, [r4, #32]
 801a32e:	4628      	mov	r0, r5
 801a330:	47b0      	blx	r6
 801a332:	1c43      	adds	r3, r0, #1
 801a334:	89a3      	ldrh	r3, [r4, #12]
 801a336:	d106      	bne.n	801a346 <__sflush_r+0x66>
 801a338:	6829      	ldr	r1, [r5, #0]
 801a33a:	291d      	cmp	r1, #29
 801a33c:	d82c      	bhi.n	801a398 <__sflush_r+0xb8>
 801a33e:	4a2a      	ldr	r2, [pc, #168]	; (801a3e8 <__sflush_r+0x108>)
 801a340:	40ca      	lsrs	r2, r1
 801a342:	07d6      	lsls	r6, r2, #31
 801a344:	d528      	bpl.n	801a398 <__sflush_r+0xb8>
 801a346:	2200      	movs	r2, #0
 801a348:	6062      	str	r2, [r4, #4]
 801a34a:	04d9      	lsls	r1, r3, #19
 801a34c:	6922      	ldr	r2, [r4, #16]
 801a34e:	6022      	str	r2, [r4, #0]
 801a350:	d504      	bpl.n	801a35c <__sflush_r+0x7c>
 801a352:	1c42      	adds	r2, r0, #1
 801a354:	d101      	bne.n	801a35a <__sflush_r+0x7a>
 801a356:	682b      	ldr	r3, [r5, #0]
 801a358:	b903      	cbnz	r3, 801a35c <__sflush_r+0x7c>
 801a35a:	6560      	str	r0, [r4, #84]	; 0x54
 801a35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a35e:	602f      	str	r7, [r5, #0]
 801a360:	2900      	cmp	r1, #0
 801a362:	d0ca      	beq.n	801a2fa <__sflush_r+0x1a>
 801a364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a368:	4299      	cmp	r1, r3
 801a36a:	d002      	beq.n	801a372 <__sflush_r+0x92>
 801a36c:	4628      	mov	r0, r5
 801a36e:	f7fd fad9 	bl	8017924 <_free_r>
 801a372:	2000      	movs	r0, #0
 801a374:	6360      	str	r0, [r4, #52]	; 0x34
 801a376:	e7c1      	b.n	801a2fc <__sflush_r+0x1c>
 801a378:	6a21      	ldr	r1, [r4, #32]
 801a37a:	2301      	movs	r3, #1
 801a37c:	4628      	mov	r0, r5
 801a37e:	47b0      	blx	r6
 801a380:	1c41      	adds	r1, r0, #1
 801a382:	d1c7      	bne.n	801a314 <__sflush_r+0x34>
 801a384:	682b      	ldr	r3, [r5, #0]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d0c4      	beq.n	801a314 <__sflush_r+0x34>
 801a38a:	2b1d      	cmp	r3, #29
 801a38c:	d001      	beq.n	801a392 <__sflush_r+0xb2>
 801a38e:	2b16      	cmp	r3, #22
 801a390:	d101      	bne.n	801a396 <__sflush_r+0xb6>
 801a392:	602f      	str	r7, [r5, #0]
 801a394:	e7b1      	b.n	801a2fa <__sflush_r+0x1a>
 801a396:	89a3      	ldrh	r3, [r4, #12]
 801a398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a39c:	81a3      	strh	r3, [r4, #12]
 801a39e:	e7ad      	b.n	801a2fc <__sflush_r+0x1c>
 801a3a0:	690f      	ldr	r7, [r1, #16]
 801a3a2:	2f00      	cmp	r7, #0
 801a3a4:	d0a9      	beq.n	801a2fa <__sflush_r+0x1a>
 801a3a6:	0793      	lsls	r3, r2, #30
 801a3a8:	680e      	ldr	r6, [r1, #0]
 801a3aa:	bf08      	it	eq
 801a3ac:	694b      	ldreq	r3, [r1, #20]
 801a3ae:	600f      	str	r7, [r1, #0]
 801a3b0:	bf18      	it	ne
 801a3b2:	2300      	movne	r3, #0
 801a3b4:	eba6 0807 	sub.w	r8, r6, r7
 801a3b8:	608b      	str	r3, [r1, #8]
 801a3ba:	f1b8 0f00 	cmp.w	r8, #0
 801a3be:	dd9c      	ble.n	801a2fa <__sflush_r+0x1a>
 801a3c0:	6a21      	ldr	r1, [r4, #32]
 801a3c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3c4:	4643      	mov	r3, r8
 801a3c6:	463a      	mov	r2, r7
 801a3c8:	4628      	mov	r0, r5
 801a3ca:	47b0      	blx	r6
 801a3cc:	2800      	cmp	r0, #0
 801a3ce:	dc06      	bgt.n	801a3de <__sflush_r+0xfe>
 801a3d0:	89a3      	ldrh	r3, [r4, #12]
 801a3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3d6:	81a3      	strh	r3, [r4, #12]
 801a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3dc:	e78e      	b.n	801a2fc <__sflush_r+0x1c>
 801a3de:	4407      	add	r7, r0
 801a3e0:	eba8 0800 	sub.w	r8, r8, r0
 801a3e4:	e7e9      	b.n	801a3ba <__sflush_r+0xda>
 801a3e6:	bf00      	nop
 801a3e8:	20400001 	.word	0x20400001

0801a3ec <_fflush_r>:
 801a3ec:	b538      	push	{r3, r4, r5, lr}
 801a3ee:	690b      	ldr	r3, [r1, #16]
 801a3f0:	4605      	mov	r5, r0
 801a3f2:	460c      	mov	r4, r1
 801a3f4:	b913      	cbnz	r3, 801a3fc <_fflush_r+0x10>
 801a3f6:	2500      	movs	r5, #0
 801a3f8:	4628      	mov	r0, r5
 801a3fa:	bd38      	pop	{r3, r4, r5, pc}
 801a3fc:	b118      	cbz	r0, 801a406 <_fflush_r+0x1a>
 801a3fe:	6983      	ldr	r3, [r0, #24]
 801a400:	b90b      	cbnz	r3, 801a406 <_fflush_r+0x1a>
 801a402:	f7fe ff35 	bl	8019270 <__sinit>
 801a406:	4b14      	ldr	r3, [pc, #80]	; (801a458 <_fflush_r+0x6c>)
 801a408:	429c      	cmp	r4, r3
 801a40a:	d11b      	bne.n	801a444 <_fflush_r+0x58>
 801a40c:	686c      	ldr	r4, [r5, #4]
 801a40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d0ef      	beq.n	801a3f6 <_fflush_r+0xa>
 801a416:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a418:	07d0      	lsls	r0, r2, #31
 801a41a:	d404      	bmi.n	801a426 <_fflush_r+0x3a>
 801a41c:	0599      	lsls	r1, r3, #22
 801a41e:	d402      	bmi.n	801a426 <_fflush_r+0x3a>
 801a420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a422:	f7fe ffc8 	bl	80193b6 <__retarget_lock_acquire_recursive>
 801a426:	4628      	mov	r0, r5
 801a428:	4621      	mov	r1, r4
 801a42a:	f7ff ff59 	bl	801a2e0 <__sflush_r>
 801a42e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a430:	07da      	lsls	r2, r3, #31
 801a432:	4605      	mov	r5, r0
 801a434:	d4e0      	bmi.n	801a3f8 <_fflush_r+0xc>
 801a436:	89a3      	ldrh	r3, [r4, #12]
 801a438:	059b      	lsls	r3, r3, #22
 801a43a:	d4dd      	bmi.n	801a3f8 <_fflush_r+0xc>
 801a43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a43e:	f7fe ffbb 	bl	80193b8 <__retarget_lock_release_recursive>
 801a442:	e7d9      	b.n	801a3f8 <_fflush_r+0xc>
 801a444:	4b05      	ldr	r3, [pc, #20]	; (801a45c <_fflush_r+0x70>)
 801a446:	429c      	cmp	r4, r3
 801a448:	d101      	bne.n	801a44e <_fflush_r+0x62>
 801a44a:	68ac      	ldr	r4, [r5, #8]
 801a44c:	e7df      	b.n	801a40e <_fflush_r+0x22>
 801a44e:	4b04      	ldr	r3, [pc, #16]	; (801a460 <_fflush_r+0x74>)
 801a450:	429c      	cmp	r4, r3
 801a452:	bf08      	it	eq
 801a454:	68ec      	ldreq	r4, [r5, #12]
 801a456:	e7da      	b.n	801a40e <_fflush_r+0x22>
 801a458:	0801af44 	.word	0x0801af44
 801a45c:	0801af64 	.word	0x0801af64
 801a460:	0801af24 	.word	0x0801af24

0801a464 <fiprintf>:
 801a464:	b40e      	push	{r1, r2, r3}
 801a466:	b503      	push	{r0, r1, lr}
 801a468:	4601      	mov	r1, r0
 801a46a:	ab03      	add	r3, sp, #12
 801a46c:	4805      	ldr	r0, [pc, #20]	; (801a484 <fiprintf+0x20>)
 801a46e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a472:	6800      	ldr	r0, [r0, #0]
 801a474:	9301      	str	r3, [sp, #4]
 801a476:	f7ff fcbf 	bl	8019df8 <_vfiprintf_r>
 801a47a:	b002      	add	sp, #8
 801a47c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a480:	b003      	add	sp, #12
 801a482:	4770      	bx	lr
 801a484:	200000f0 	.word	0x200000f0

0801a488 <_lseek_r>:
 801a488:	b538      	push	{r3, r4, r5, lr}
 801a48a:	4d07      	ldr	r5, [pc, #28]	; (801a4a8 <_lseek_r+0x20>)
 801a48c:	4604      	mov	r4, r0
 801a48e:	4608      	mov	r0, r1
 801a490:	4611      	mov	r1, r2
 801a492:	2200      	movs	r2, #0
 801a494:	602a      	str	r2, [r5, #0]
 801a496:	461a      	mov	r2, r3
 801a498:	f7e8 fb06 	bl	8002aa8 <_lseek>
 801a49c:	1c43      	adds	r3, r0, #1
 801a49e:	d102      	bne.n	801a4a6 <_lseek_r+0x1e>
 801a4a0:	682b      	ldr	r3, [r5, #0]
 801a4a2:	b103      	cbz	r3, 801a4a6 <_lseek_r+0x1e>
 801a4a4:	6023      	str	r3, [r4, #0]
 801a4a6:	bd38      	pop	{r3, r4, r5, pc}
 801a4a8:	20001a04 	.word	0x20001a04

0801a4ac <__swhatbuf_r>:
 801a4ac:	b570      	push	{r4, r5, r6, lr}
 801a4ae:	460e      	mov	r6, r1
 801a4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4b4:	2900      	cmp	r1, #0
 801a4b6:	b096      	sub	sp, #88	; 0x58
 801a4b8:	4614      	mov	r4, r2
 801a4ba:	461d      	mov	r5, r3
 801a4bc:	da07      	bge.n	801a4ce <__swhatbuf_r+0x22>
 801a4be:	2300      	movs	r3, #0
 801a4c0:	602b      	str	r3, [r5, #0]
 801a4c2:	89b3      	ldrh	r3, [r6, #12]
 801a4c4:	061a      	lsls	r2, r3, #24
 801a4c6:	d410      	bmi.n	801a4ea <__swhatbuf_r+0x3e>
 801a4c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4cc:	e00e      	b.n	801a4ec <__swhatbuf_r+0x40>
 801a4ce:	466a      	mov	r2, sp
 801a4d0:	f000 f8a8 	bl	801a624 <_fstat_r>
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	dbf2      	blt.n	801a4be <__swhatbuf_r+0x12>
 801a4d8:	9a01      	ldr	r2, [sp, #4]
 801a4da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a4de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a4e2:	425a      	negs	r2, r3
 801a4e4:	415a      	adcs	r2, r3
 801a4e6:	602a      	str	r2, [r5, #0]
 801a4e8:	e7ee      	b.n	801a4c8 <__swhatbuf_r+0x1c>
 801a4ea:	2340      	movs	r3, #64	; 0x40
 801a4ec:	2000      	movs	r0, #0
 801a4ee:	6023      	str	r3, [r4, #0]
 801a4f0:	b016      	add	sp, #88	; 0x58
 801a4f2:	bd70      	pop	{r4, r5, r6, pc}

0801a4f4 <__smakebuf_r>:
 801a4f4:	898b      	ldrh	r3, [r1, #12]
 801a4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4f8:	079d      	lsls	r5, r3, #30
 801a4fa:	4606      	mov	r6, r0
 801a4fc:	460c      	mov	r4, r1
 801a4fe:	d507      	bpl.n	801a510 <__smakebuf_r+0x1c>
 801a500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a504:	6023      	str	r3, [r4, #0]
 801a506:	6123      	str	r3, [r4, #16]
 801a508:	2301      	movs	r3, #1
 801a50a:	6163      	str	r3, [r4, #20]
 801a50c:	b002      	add	sp, #8
 801a50e:	bd70      	pop	{r4, r5, r6, pc}
 801a510:	ab01      	add	r3, sp, #4
 801a512:	466a      	mov	r2, sp
 801a514:	f7ff ffca 	bl	801a4ac <__swhatbuf_r>
 801a518:	9900      	ldr	r1, [sp, #0]
 801a51a:	4605      	mov	r5, r0
 801a51c:	4630      	mov	r0, r6
 801a51e:	f7fd fa51 	bl	80179c4 <_malloc_r>
 801a522:	b948      	cbnz	r0, 801a538 <__smakebuf_r+0x44>
 801a524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a528:	059a      	lsls	r2, r3, #22
 801a52a:	d4ef      	bmi.n	801a50c <__smakebuf_r+0x18>
 801a52c:	f023 0303 	bic.w	r3, r3, #3
 801a530:	f043 0302 	orr.w	r3, r3, #2
 801a534:	81a3      	strh	r3, [r4, #12]
 801a536:	e7e3      	b.n	801a500 <__smakebuf_r+0xc>
 801a538:	4b0d      	ldr	r3, [pc, #52]	; (801a570 <__smakebuf_r+0x7c>)
 801a53a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a53c:	89a3      	ldrh	r3, [r4, #12]
 801a53e:	6020      	str	r0, [r4, #0]
 801a540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a544:	81a3      	strh	r3, [r4, #12]
 801a546:	9b00      	ldr	r3, [sp, #0]
 801a548:	6163      	str	r3, [r4, #20]
 801a54a:	9b01      	ldr	r3, [sp, #4]
 801a54c:	6120      	str	r0, [r4, #16]
 801a54e:	b15b      	cbz	r3, 801a568 <__smakebuf_r+0x74>
 801a550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a554:	4630      	mov	r0, r6
 801a556:	f000 f877 	bl	801a648 <_isatty_r>
 801a55a:	b128      	cbz	r0, 801a568 <__smakebuf_r+0x74>
 801a55c:	89a3      	ldrh	r3, [r4, #12]
 801a55e:	f023 0303 	bic.w	r3, r3, #3
 801a562:	f043 0301 	orr.w	r3, r3, #1
 801a566:	81a3      	strh	r3, [r4, #12]
 801a568:	89a0      	ldrh	r0, [r4, #12]
 801a56a:	4305      	orrs	r5, r0
 801a56c:	81a5      	strh	r5, [r4, #12]
 801a56e:	e7cd      	b.n	801a50c <__smakebuf_r+0x18>
 801a570:	08019209 	.word	0x08019209

0801a574 <__ascii_mbtowc>:
 801a574:	b082      	sub	sp, #8
 801a576:	b901      	cbnz	r1, 801a57a <__ascii_mbtowc+0x6>
 801a578:	a901      	add	r1, sp, #4
 801a57a:	b142      	cbz	r2, 801a58e <__ascii_mbtowc+0x1a>
 801a57c:	b14b      	cbz	r3, 801a592 <__ascii_mbtowc+0x1e>
 801a57e:	7813      	ldrb	r3, [r2, #0]
 801a580:	600b      	str	r3, [r1, #0]
 801a582:	7812      	ldrb	r2, [r2, #0]
 801a584:	1e10      	subs	r0, r2, #0
 801a586:	bf18      	it	ne
 801a588:	2001      	movne	r0, #1
 801a58a:	b002      	add	sp, #8
 801a58c:	4770      	bx	lr
 801a58e:	4610      	mov	r0, r2
 801a590:	e7fb      	b.n	801a58a <__ascii_mbtowc+0x16>
 801a592:	f06f 0001 	mvn.w	r0, #1
 801a596:	e7f8      	b.n	801a58a <__ascii_mbtowc+0x16>

0801a598 <_realloc_r>:
 801a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a59a:	4607      	mov	r7, r0
 801a59c:	4614      	mov	r4, r2
 801a59e:	460e      	mov	r6, r1
 801a5a0:	b921      	cbnz	r1, 801a5ac <_realloc_r+0x14>
 801a5a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a5a6:	4611      	mov	r1, r2
 801a5a8:	f7fd ba0c 	b.w	80179c4 <_malloc_r>
 801a5ac:	b922      	cbnz	r2, 801a5b8 <_realloc_r+0x20>
 801a5ae:	f7fd f9b9 	bl	8017924 <_free_r>
 801a5b2:	4625      	mov	r5, r4
 801a5b4:	4628      	mov	r0, r5
 801a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5b8:	f000 f856 	bl	801a668 <_malloc_usable_size_r>
 801a5bc:	42a0      	cmp	r0, r4
 801a5be:	d20f      	bcs.n	801a5e0 <_realloc_r+0x48>
 801a5c0:	4621      	mov	r1, r4
 801a5c2:	4638      	mov	r0, r7
 801a5c4:	f7fd f9fe 	bl	80179c4 <_malloc_r>
 801a5c8:	4605      	mov	r5, r0
 801a5ca:	2800      	cmp	r0, #0
 801a5cc:	d0f2      	beq.n	801a5b4 <_realloc_r+0x1c>
 801a5ce:	4631      	mov	r1, r6
 801a5d0:	4622      	mov	r2, r4
 801a5d2:	f7fd f977 	bl	80178c4 <memcpy>
 801a5d6:	4631      	mov	r1, r6
 801a5d8:	4638      	mov	r0, r7
 801a5da:	f7fd f9a3 	bl	8017924 <_free_r>
 801a5de:	e7e9      	b.n	801a5b4 <_realloc_r+0x1c>
 801a5e0:	4635      	mov	r5, r6
 801a5e2:	e7e7      	b.n	801a5b4 <_realloc_r+0x1c>

0801a5e4 <_read_r>:
 801a5e4:	b538      	push	{r3, r4, r5, lr}
 801a5e6:	4d07      	ldr	r5, [pc, #28]	; (801a604 <_read_r+0x20>)
 801a5e8:	4604      	mov	r4, r0
 801a5ea:	4608      	mov	r0, r1
 801a5ec:	4611      	mov	r1, r2
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	602a      	str	r2, [r5, #0]
 801a5f2:	461a      	mov	r2, r3
 801a5f4:	f7e8 f9f8 	bl	80029e8 <_read>
 801a5f8:	1c43      	adds	r3, r0, #1
 801a5fa:	d102      	bne.n	801a602 <_read_r+0x1e>
 801a5fc:	682b      	ldr	r3, [r5, #0]
 801a5fe:	b103      	cbz	r3, 801a602 <_read_r+0x1e>
 801a600:	6023      	str	r3, [r4, #0]
 801a602:	bd38      	pop	{r3, r4, r5, pc}
 801a604:	20001a04 	.word	0x20001a04

0801a608 <__ascii_wctomb>:
 801a608:	b149      	cbz	r1, 801a61e <__ascii_wctomb+0x16>
 801a60a:	2aff      	cmp	r2, #255	; 0xff
 801a60c:	bf85      	ittet	hi
 801a60e:	238a      	movhi	r3, #138	; 0x8a
 801a610:	6003      	strhi	r3, [r0, #0]
 801a612:	700a      	strbls	r2, [r1, #0]
 801a614:	f04f 30ff 	movhi.w	r0, #4294967295
 801a618:	bf98      	it	ls
 801a61a:	2001      	movls	r0, #1
 801a61c:	4770      	bx	lr
 801a61e:	4608      	mov	r0, r1
 801a620:	4770      	bx	lr
	...

0801a624 <_fstat_r>:
 801a624:	b538      	push	{r3, r4, r5, lr}
 801a626:	4d07      	ldr	r5, [pc, #28]	; (801a644 <_fstat_r+0x20>)
 801a628:	2300      	movs	r3, #0
 801a62a:	4604      	mov	r4, r0
 801a62c:	4608      	mov	r0, r1
 801a62e:	4611      	mov	r1, r2
 801a630:	602b      	str	r3, [r5, #0]
 801a632:	f7e8 fa1e 	bl	8002a72 <_fstat>
 801a636:	1c43      	adds	r3, r0, #1
 801a638:	d102      	bne.n	801a640 <_fstat_r+0x1c>
 801a63a:	682b      	ldr	r3, [r5, #0]
 801a63c:	b103      	cbz	r3, 801a640 <_fstat_r+0x1c>
 801a63e:	6023      	str	r3, [r4, #0]
 801a640:	bd38      	pop	{r3, r4, r5, pc}
 801a642:	bf00      	nop
 801a644:	20001a04 	.word	0x20001a04

0801a648 <_isatty_r>:
 801a648:	b538      	push	{r3, r4, r5, lr}
 801a64a:	4d06      	ldr	r5, [pc, #24]	; (801a664 <_isatty_r+0x1c>)
 801a64c:	2300      	movs	r3, #0
 801a64e:	4604      	mov	r4, r0
 801a650:	4608      	mov	r0, r1
 801a652:	602b      	str	r3, [r5, #0]
 801a654:	f7e8 fa1d 	bl	8002a92 <_isatty>
 801a658:	1c43      	adds	r3, r0, #1
 801a65a:	d102      	bne.n	801a662 <_isatty_r+0x1a>
 801a65c:	682b      	ldr	r3, [r5, #0]
 801a65e:	b103      	cbz	r3, 801a662 <_isatty_r+0x1a>
 801a660:	6023      	str	r3, [r4, #0]
 801a662:	bd38      	pop	{r3, r4, r5, pc}
 801a664:	20001a04 	.word	0x20001a04

0801a668 <_malloc_usable_size_r>:
 801a668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a66c:	1f18      	subs	r0, r3, #4
 801a66e:	2b00      	cmp	r3, #0
 801a670:	bfbc      	itt	lt
 801a672:	580b      	ldrlt	r3, [r1, r0]
 801a674:	18c0      	addlt	r0, r0, r3
 801a676:	4770      	bx	lr

0801a678 <_init>:
 801a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a67a:	bf00      	nop
 801a67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a67e:	bc08      	pop	{r3}
 801a680:	469e      	mov	lr, r3
 801a682:	4770      	bx	lr

0801a684 <_fini>:
 801a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a686:	bf00      	nop
 801a688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a68a:	bc08      	pop	{r3}
 801a68c:	469e      	mov	lr, r3
 801a68e:	4770      	bx	lr
