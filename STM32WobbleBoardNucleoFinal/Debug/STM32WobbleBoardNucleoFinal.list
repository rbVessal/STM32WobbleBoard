
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  08016fe8  08016fe8  00026fe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017540  08017540  00030154  2**0
                  CONTENTS
  4 .ARM          00000008  08017540  08017540  00027540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017548  08017548  00030154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017548  08017548  00027548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801754c  0801754c  0002754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08017550  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018f8  20000158  080176a4  00030158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a50  080176a4  00031a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a462  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005be7  00000000  00000000  0007a5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b68  00000000  00000000  000801d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002938  00000000  00000000  00082d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003029d  00000000  00000000  00085670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a5fe  00000000  00000000  000b590d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f269  00000000  00000000  000dff0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ef174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c31c  00000000  00000000  001ef1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08016fd0 	.word	0x08016fd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	08016fd0 	.word	0x08016fd0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	// TODO Auto-generated constructor stub

}
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	/* Initialize Virtual COM Port */
	BSP_COM_Init(COM1);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f004 fdbd 	bl	8005a10 <BSP_COM_Init>

	/* Initialize Timer */
	BSP_IP_TIM_Init();
 8000e96:	f001 fa41 	bl	800231c <MX_TIM3_Init>

	/* Configure Timer to run with desired algorithm frequency */
	TIM_Config(ALGO_FREQ);
 8000e9a:	2164      	movs	r1, #100	; 0x64
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fb51 	bl	8001544 <_ZN14WobbleBoardApp10TIM_ConfigEm>

	InitInertialSensors();
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f856 	bl	8000f54 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ea8:	f000 fdf6 	bl	8001a98 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000eac:	200a      	movs	r0, #10
 8000eae:	f000 fe9a 	bl	8001be6 <MotionFX_manager_MagCal_start>

	/* Test if calibration data are available */
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f014 f824 	bl	8014f04 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000ebc:	7e3b      	ldrb	r3, [r7, #24]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d132      	bne.n	8000f28 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000f50 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000eca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ece:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8000ed2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eda:	ee17 2a90 	vmov	r2, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000ee2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ee6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000f50 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eee:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8000ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000efa:	ee17 2a90 	vmov	r2, s15
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8000f02:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f06:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f50 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0e:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1a:	ee17 2a90 	vmov	r2, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
	}

	DWT_Init();
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fa75 	bl	8001418 <_ZN14WobbleBoardApp8DWT_InitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8000f2e:	f000 fb63 	bl	80015f8 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Enable9AxisMotionFusion();
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 faf6 	bl	800152c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>

	StartDataStreaming();
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fadb 	bl	80014fc <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	43fa0000 	.word	0x43fa0000

08000f54 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 8000f5c:	f000 fc34 	bl	80017c8 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8000f60:	f000 fc3a 	bl	80017d8 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 8000f64:	f000 fc40 	bl	80017e8 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f68:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000f80 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 8000f6c:	f000 fc83 	bl	8001876 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f70:	2004      	movs	r0, #4
 8000f72:	f000 fc8f 	bl	8001894 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	42c80000 	.word	0x42c80000

08000f84 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	6018      	str	r0, [r3, #0]
//		}
//	}
//
//	HandleMSG((TMsg *)&msg_cmd);

	if (MagCalRequest == 1U)
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d017      	beq.n	8000fd8 <_ZN14WobbleBoardApp7ProcessEv+0x54>
	{
		MagCalRequest = 0;
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f000 fe07 	bl	8001be6 <MotionFX_manager_MagCal_start>
	}

	// When the timer counter reaches 0 then read the
	// motion sensor data
	// TODO:  Figure out why the timer elapsed callback wasn't working
	if(__HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <_ZN14WobbleBoardApp7ProcessEv+0xf8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <_ZN14WobbleBoardApp7ProcessEv+0x72>
	{
		SensorReadRequest = 1;
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if (SensorReadRequest == 1U)
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b01      	cmp	r3, #1
 8001002:	bf0c      	ite	eq
 8001004:	2301      	moveq	r3, #1
 8001006:	2300      	movne	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d030      	beq.n	8001070 <_ZN14WobbleBoardApp7ProcessEv+0xec>
	{
		SensorReadRequest = 0;
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		/* Acquire data from enabled sensors and fill Msg stream */
		Accelero_Sensor_Handler(&msg_dat);
 8001018:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4611      	mov	r1, r2
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f000 f82d 	bl	8001080 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEP4TMsg>
		Gyro_Sensor_Handler(&msg_dat);
 8001026:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4611      	mov	r1, r2
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	f000 f84e 	bl	80010d0 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEP4TMsg>
		Magneto_Sensor_Handler(&msg_dat);
 8001034:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4611      	mov	r1, r2
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f000 f871 	bl	8001124 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg>

		/* Sensor Fusion specific part */
		FX_Data_Handler(&msg_dat);
 8001042:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4611      	mov	r1, r2
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f000 f91e 	bl	800128c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg>

		/* Send data stream */
		Init_Streaming_Header(&msg_dat);
 8001050:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4611      	mov	r1, r2
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f000 fa35 	bl	80014c8 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>
		// Message length is taken from last index of msg data
		// in FX_Data Handler and add 4 to that
		msg_dat.Len = STREAMING_MSG_LENGTH;
 800105e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001062:	226b      	movs	r2, #107	; 0x6b
 8001064:	601a      	str	r2, [r3, #0]

		UART_SendMsg(&msg_dat);
 8001066:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800106a:	4618      	mov	r0, r3
 800106c:	f000 faa8 	bl	80015c0 <UART_SendMsg>
	}
}
 8001070:	bf00      	nop
 8001072:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200014f0 	.word	0x200014f0

08001080 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEP4TMsg>:
//    SensorReadRequest = 1;
//  }
//}

void WobbleBoardApp::Accelero_Sensor_Handler(TMsg* Msg)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3310      	adds	r3, #16
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fbca 	bl	8001828 <BSP_SENSOR_ACC_GetAxes>

	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	1dd8      	adds	r0, r3, #7
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2204      	movs	r2, #4
 800109e:	4619      	mov	r1, r3
 80010a0:	f000 fecb 	bl	8001e3a <Serialize_s32>
	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f103 000b 	add.w	r0, r3, #11
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	2204      	movs	r2, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	f000 fec2 	bl	8001e3a <Serialize_s32>
	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f103 000f 	add.w	r0, r3, #15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2204      	movs	r2, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	f000 feb9 	bl	8001e3a <Serialize_s32>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEP4TMsg>:

void WobbleBoardApp::Gyro_Sensor_Handler(TMsg* Msg)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	331c      	adds	r3, #28
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fbaf 	bl	8001842 <BSP_SENSOR_GYR_GetAxes>

	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f103 0013 	add.w	r0, r3, #19
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	f000 fea2 	bl	8001e3a <Serialize_s32>
	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f103 0017 	add.w	r0, r3, #23
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	f000 fe99 	bl	8001e3a <Serialize_s32>
	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f103 001b 	add.w	r0, r3, #27
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	2204      	movs	r2, #4
 8001114:	4619      	mov	r1, r3
 8001116:	f000 fe90 	bl	8001e3a <Serialize_s32>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg>:

void WobbleBoardApp::Magneto_Sensor_Handler(TMsg* Msg)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3328      	adds	r3, #40	; 0x28
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fb92 	bl	800185c <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d16d      	bne.n	800121c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0xf8>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001284 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x160>
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	f103 020a 	add.w	r2, r3, #10
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800119a:	f107 020c 	add.w	r2, r7, #12
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fd0f 	bl	8001bc8 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80011aa:	7e3b      	ldrb	r3, [r7, #24]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d135      	bne.n	800121c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0xf8>
		{
			MagCalStatus = 1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 80011b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 80011c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ce:	ee17 2a90 	vmov	r2, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80011d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011da:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 80011e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 2a90 	vmov	r2, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 80011f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001288 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEP4TMsg+0x164>
 80011fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001202:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120e:	ee17 2a90 	vmov	r2, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	60da      	str	r2, [r3, #12]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 fcf1 	bl	8001bfe <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	1ad2      	subs	r2, r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	629a      	str	r2, [r3, #40]	; 0x28
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	1ad2      	subs	r2, r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	631a      	str	r2, [r3, #48]	; 0x30

	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f103 001f 	add.w	r0, r3, #31
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	2204      	movs	r2, #4
 8001252:	4619      	mov	r1, r3
 8001254:	f000 fdf1 	bl	8001e3a <Serialize_s32>
	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f103 0023 	add.w	r0, r3, #35	; 0x23
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001262:	2204      	movs	r2, #4
 8001264:	4619      	mov	r1, r3
 8001266:	f000 fde8 	bl	8001e3a <Serialize_s32>
	Serialize_s32(&Msg->Data[35], MagValue.z, 4);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f103 0027 	add.w	r0, r3, #39	; 0x27
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	2204      	movs	r2, #4
 8001276:	4619      	mov	r1, r3
 8001278:	f000 fddf 	bl	8001e3a <Serialize_s32>
}
 800127c:	bf00      	nop
 800127e:	3730      	adds	r7, #48	; 0x30
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	3b03126f 	.word	0x3b03126f
 8001288:	43fa0000 	.word	0x43fa0000

0800128c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg>:

void WobbleBoardApp::FX_Data_Handler(TMsg* Msg)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09e      	sub	sp, #120	; 0x78
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	uint32_t elapsed_time_us = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 800129a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800129e:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	/* Convert acceleration from [mg] to [g] */
	data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001312:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 8001316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800140c <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x180>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 8001346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 800135e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001362:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001372:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001410 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x184>
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/* Run Sensor Fusion algorithm */
	DWT_Start();
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f864 	bl	800144c <_ZN14WobbleBoardApp9DWT_StartEv>
	MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 8001384:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001414 <_ZN14WobbleBoardApp15FX_Data_HandlerEP4TMsg+0x188>
 8001388:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800138a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800138c:	f000 fbdc 	bl	8001b48 <MotionFX_manager_run>
	elapsed_time_us = DWT_Stop();
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f871 	bl	8001478 <_ZN14WobbleBoardApp8DWT_StopEv>
 8001396:	6778      	str	r0, [r7, #116]	; 0x74

	(void)memcpy(&Msg->Data[39], (void *)pdata_out->quaternion, 4U * sizeof(float));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 800139e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a0:	330c      	adds	r3, #12
 80013a2:	2210      	movs	r2, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	f015 fd41 	bl	8016e2c <memcpy>
	(void)memcpy(&Msg->Data[55], (void *)pdata_out->rotation, 3U * sizeof(float));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	333b      	adds	r3, #59	; 0x3b
 80013ae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013b0:	220c      	movs	r2, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f015 fd3a 	bl	8016e2c <memcpy>
	(void)memcpy(&Msg->Data[71], (void *)pdata_out->gravity, 3U * sizeof(float));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	f103 004b 	add.w	r0, r3, #75	; 0x4b
 80013be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013c0:	331c      	adds	r3, #28
 80013c2:	220c      	movs	r2, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	f015 fd31 	bl	8016e2c <memcpy>
	(void)memcpy(&Msg->Data[83], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80013d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013d2:	3328      	adds	r3, #40	; 0x28
 80013d4:	220c      	movs	r2, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	f015 fd28 	bl	8016e2c <memcpy>

	(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3363      	adds	r3, #99	; 0x63
 80013e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013e2:	3234      	adds	r2, #52	; 0x34
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	601a      	str	r2, [r3, #0]
	(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3367      	adds	r3, #103	; 0x67
 80013ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013ee:	3238      	adds	r2, #56	; 0x38
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]

	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	336b      	adds	r3, #107	; 0x6b
 80013f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013fa:	2204      	movs	r2, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fd1c 	bl	8001e3a <Serialize_s32>
}
 8001402:	bf00      	nop
 8001404:	3778      	adds	r7, #120	; 0x78
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	3a83126f 	.word	0x3a83126f
 8001410:	3b03126f 	.word	0x3b03126f
 8001414:	3c23d70a 	.word	0x3c23d70a

08001418 <_ZN14WobbleBoardApp8DWT_InitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWT_Init()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800142a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000edf0 	.word	0xe000edf0
 8001448:	e0001000 	.word	0xe0001000

0800144c <_ZN14WobbleBoardApp9DWT_StartEv>:

void WobbleBoardApp::DWT_Start()
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001456:	2200      	movs	r2, #0
 8001458:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e0001000 	.word	0xe0001000

08001478 <_ZN14WobbleBoardApp8DWT_StopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWT_Stop()
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <_ZN14WobbleBoardApp8DWT_StopEv+0x48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <_ZN14WobbleBoardApp8DWT_StopEv+0x4c>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e0001000 	.word	0xe0001000
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>:

void WobbleBoardApp::Init_Streaming_Header(TMsg* Msg)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2232      	movs	r2, #50	; 0x32
 80014e2:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2208      	movs	r2, #8
 80014e8:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2203      	movs	r2, #3
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 8001504:	f000 f978 	bl	80017f8 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 8001508:	f000 f97e 	bl	8001808 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 800150c:	f000 f984 	bl	8001818 <BSP_SENSOR_MAG_Enable>

	HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x2c>)
 8001512:	f007 feab 	bl	800926c <HAL_TIM_Base_Start_IT>

	DataLoggerActive = 1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200014f0 	.word	0x200014f0

0800152c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:
	MotionFX_manager_stop_9X();
	MotionFX_manager_start_6X();
}

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001534:	f000 fb34 	bl	8001ba0 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001538:	f000 fb3c 	bl	8001bb4 <MotionFX_manager_start_9X>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <_ZN14WobbleBoardApp10TIM_ConfigEm>:

void WobbleBoardApp::TIM_Config(uint32_t Freq)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800154e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001552:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x70>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x74>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	09db      	lsrs	r3, r3, #7
 8001560:	3b01      	subs	r3, #1
 8001562:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001564:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	3b01      	subs	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 8001592:	f007 fe13 	bl	80091bc <HAL_TIM_Base_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZN14WobbleBoardApp10TIM_ConfigEm+0x66>
  {
    Error_Handler();
 80015a6:	f000 fa71 	bl	8001a8c <Error_Handler>
  }
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000000c 	.word	0x2000000c
 80015b8:	10624dd3 	.word	0x10624dd3
 80015bc:	200014f0 	.word	0x200014f0

080015c0 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fc0c 	bl	8001de6 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <UART_SendMsg+0x30>)
 80015d2:	f000 fbda 	bl	8001d8a <ByteStuffCopy>
 80015d6:	4603      	mov	r3, r0
 80015d8:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80015da:	89fa      	ldrh	r2, [r7, #14]
 80015dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80015e0:	4903      	ldr	r1, [pc, #12]	; (80015f0 <UART_SendMsg+0x30>)
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <UART_SendMsg+0x34>)
 80015e4:	f008 fafe 	bl	8009be4 <HAL_UART_Transmit>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200005c4 	.word	0x200005c4
 80015f4:	20001590 	.word	0x20001590

080015f8 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <UART_StartReceiveMsg+0x2c>)
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <UART_StartReceiveMsg+0x30>)
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <UART_StartReceiveMsg+0x2c>)
 8001604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001608:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <UART_StartReceiveMsg+0x2c>)
 800160e:	2200      	movs	r2, #0
 8001610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	4903      	ldr	r1, [pc, #12]	; (8001628 <UART_StartReceiveMsg+0x30>)
 800161a:	4802      	ldr	r0, [pc, #8]	; (8001624 <UART_StartReceiveMsg+0x2c>)
 800161c:	f008 fb76 	bl	8009d0c <HAL_UART_Receive_DMA>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20001590 	.word	0x20001590
 8001628:	20001254 	.word	0x20001254

0800162c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001630:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <MX_CRC_Init+0x3c>)
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <MX_CRC_Init+0x40>)
 8001634:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_CRC_Init+0x3c>)
 8001638:	2200      	movs	r2, #0
 800163a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <MX_CRC_Init+0x3c>)
 800163e:	2200      	movs	r2, #0
 8001640:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_CRC_Init+0x3c>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <MX_CRC_Init+0x3c>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800164e:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_CRC_Init+0x3c>)
 8001650:	2201      	movs	r2, #1
 8001652:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_CRC_Init+0x3c>)
 8001656:	f004 fc47 	bl	8005ee8 <HAL_CRC_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001660:	f000 fa14 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000145c 	.word	0x2000145c
 800166c:	40023000 	.word	0x40023000

08001670 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_CRC_MspInit+0x38>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10b      	bne.n	800169a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_CRC_MspInit+0x3c>)
 8001684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_CRC_MspInit+0x3c>)
 8001688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800168c:	6493      	str	r3, [r2, #72]	; 0x48
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_CRC_MspInit+0x3c>)
 8001690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023000 	.word	0x40023000
 80016ac:	40021000 	.word	0x40021000

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_DMA_Init+0x38>)
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <MX_DMA_Init+0x38>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6493      	str	r3, [r2, #72]	; 0x48
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_DMA_Init+0x38>)
 80016c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2010      	movs	r0, #16
 80016d4:	f004 fbd1 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80016d8:	2010      	movs	r0, #16
 80016da:	f004 fbea 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000

080016ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a2e      	ldr	r2, [pc, #184]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <MX_GPIO_Init+0xd4>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_GPIO_Init+0xd4>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_GPIO_Init+0xd4>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2120      	movs	r1, #32
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f005 f93d 	bl	80069e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 800176e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001774:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	480f      	ldr	r0, [pc, #60]	; (80017c4 <MX_GPIO_Init+0xd8>)
 8001786:	f004 fe91 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800178a:	2320      	movs	r3, #32
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0314 	add.w	r3, r7, #20
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f004 fe82 	bl	80064ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2028      	movs	r0, #40	; 0x28
 80017ae:	f004 fb64 	bl	8005e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f004 fb7d 	bl	8005eb2 <HAL_NVIC_EnableIRQ>

}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48000800 	.word	0x48000800

080017c8 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80017cc:	2102      	movs	r1, #2
 80017ce:	2000      	movs	r0, #0
 80017d0:	f003 fd0e 	bl	80051f0 <IKS01A2_MOTION_SENSOR_Init>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80017dc:	2101      	movs	r1, #1
 80017de:	2000      	movs	r0, #0
 80017e0:	f003 fd06 	bl	80051f0 <IKS01A2_MOTION_SENSOR_Init>
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80017ec:	2104      	movs	r1, #4
 80017ee:	2002      	movs	r0, #2
 80017f0:	f003 fcfe 	bl	80051f0 <IKS01A2_MOTION_SENSOR_Init>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80017fc:	2102      	movs	r1, #2
 80017fe:	2000      	movs	r0, #0
 8001800:	f003 fdf2 	bl	80053e8 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 800180c:	2101      	movs	r1, #1
 800180e:	2000      	movs	r0, #0
 8001810:	f003 fdea 	bl	80053e8 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 800181c:	2104      	movs	r1, #4
 800181e:	2002      	movs	r0, #2
 8001820:	f003 fde2 	bl	80053e8 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	2102      	movs	r1, #2
 8001834:	2000      	movs	r0, #0
 8001836:	f003 fe19 	bl	800546c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	2101      	movs	r1, #1
 800184e:	2000      	movs	r0, #0
 8001850:	f003 fe0c 	bl	800546c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	2104      	movs	r1, #4
 8001868:	2002      	movs	r0, #2
 800186a:	f003 fdff 	bl	800546c <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8001880:	ed97 0a01 	vldr	s0, [r7, #4]
 8001884:	2102      	movs	r1, #2
 8001886:	2000      	movs	r0, #0
 8001888:	f003 fe34 	bl	80054f4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	2102      	movs	r1, #2
 80018a0:	2000      	movs	r0, #0
 80018a2:	f003 fe6d 	bl	8005580 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	226e      	movs	r2, #110	; 0x6e
 80018ba:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3301      	adds	r3, #1
 80018c0:	2277      	movs	r2, #119	; 0x77
 80018c2:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3302      	adds	r3, #2
 80018c8:	2275      	movs	r2, #117	; 0x75
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	226e      	movs	r2, #110	; 0x6e
 80018e4:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	2277      	movs	r2, #119	; 0x77
 80018ec:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3302      	adds	r3, #2
 80018f2:	2275      	movs	r2, #117	; 0x75
 80018f4:	701a      	strb	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	226e      	movs	r2, #110	; 0x6e
 800190e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3301      	adds	r3, #1
 8001914:	2265      	movs	r2, #101	; 0x65
 8001916:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3302      	adds	r3, #2
 800191c:	2275      	movs	r2, #117	; 0x75
 800191e:	701a      	strb	r2, [r3, #0]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001932:	f004 f94b 	bl	8005bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001936:	f000 f818 	bl	800196a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193a:	f7ff fed7 	bl	80016ec <MX_GPIO_Init>
  MX_DMA_Init();
 800193e:	f7ff feb7 	bl	80016b0 <MX_DMA_Init>
  MX_CRC_Init();
 8001942:	f7ff fe73 	bl	800162c <MX_CRC_Init>
  MX_RTC_Init();
 8001946:	f000 f967 	bl	8001c18 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  WobbleBoardApp* wobbleBoard = new WobbleBoardApp();
 800194a:	2044      	movs	r0, #68	; 0x44
 800194c:	f013 fb16 	bl	8014f7c <_Znwj>
 8001950:	4603      	mov	r3, r0
 8001952:	461c      	mov	r4, r3
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff fa6f 	bl	8000e38 <_ZN14WobbleBoardAppC1Ev>
 800195a:	607c      	str	r4, [r7, #4]
  wobbleBoard->Init();
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff fa93 	bl	8000e88 <_ZN14WobbleBoardApp4InitEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //MX_MEMS_Process();
	  wobbleBoard->Process();
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fb0e 	bl	8000f84 <_ZN14WobbleBoardApp7ProcessEv>
 8001968:	e7fb      	b.n	8001962 <main+0x36>

0800196a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b096      	sub	sp, #88	; 0x58
 800196e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2244      	movs	r2, #68	; 0x44
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f015 fa65 	bl	8016e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197e:	463b      	mov	r3, r7
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800198c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001990:	f005 fec0 	bl	8007714 <HAL_PWREx_ControlVoltageScaling>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	bf14      	ite	ne
 800199a:	2301      	movne	r3, #1
 800199c:	2300      	moveq	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80019a4:	f000 f872 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80019a8:	230a      	movs	r3, #10
 80019aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b2:	2310      	movs	r3, #16
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019b6:	2301      	movs	r3, #1
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019be:	2302      	movs	r3, #2
 80019c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019c6:	230a      	movs	r3, #10
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019ca:	2307      	movs	r3, #7
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019d2:	2302      	movs	r3, #2
 80019d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 fef0 	bl	80077c0 <HAL_RCC_OscConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	bf14      	ite	ne
 80019e6:	2301      	movne	r3, #1
 80019e8:	2300      	moveq	r3, #0
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80019f0:	f000 f84c 	bl	8001a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2303      	movs	r3, #3
 80019fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 fabd 	bl	8007f8c <HAL_RCC_ClockConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001a22:	f000 f833 	bl	8001a8c <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3758      	adds	r7, #88	; 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a40:	d115      	bne.n	8001a6e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a44:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_GPIO_EXTI_Callback+0x34>
		{
			iIsUserCalibrationLEDOn = 1;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x54>)
 8001a60:	60fb      	str	r3, [r7, #12]
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_EXTI_Callback+0x3e>
			iIsUserCalibrationLEDOn = 0;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x58>)
 8001a6c:	60fb      	str	r3, [r7, #12]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	08016fe8 	.word	0x08016fe8
 8001a80:	200007c4 	.word	0x200007c4
 8001a84:	08016fec 	.word	0x08016fec
 8001a88:	0801700c 	.word	0x0801700c

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8001a9c:	f012 fcb4 	bl	8014408 <MotionFX_GetStateSize>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8001aa6:	d901      	bls.n	8001aac <MotionFX_manager_init+0x14>
    Error_Handler();
 8001aa8:	f7ff fff0 	bl	8001a8c <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8001aac:	4821      	ldr	r0, [pc, #132]	; (8001b34 <MotionFX_manager_init+0x9c>)
 8001aae:	f012 fcaf 	bl	8014410 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481e      	ldr	r0, [pc, #120]	; (8001b34 <MotionFX_manager_init+0x9c>)
 8001aba:	f012 fd8d 	bl	80145d8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8001abe:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	331d      	adds	r3, #29
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fef2 	bl	80018ae <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3321      	adds	r3, #33	; 0x21
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff01 	bl	80018d8 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8001ad6:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3325      	adds	r3, #37	; 0x25
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff10 	bl	8001902 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <MotionFX_manager_init+0xa4>)
 8001ae8:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <MotionFX_manager_init+0xa8>)
 8001af0:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <MotionFX_manager_init+0xac>)
 8001af8:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <MotionFX_manager_init+0xa0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MotionFX_manager_init+0x9c>)
 8001b1c:	f012 fd12 	bl	8014544 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001b20:	2100      	movs	r1, #0
 8001b22:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MotionFX_manager_init+0x9c>)
 8001b24:	f012 fd94 	bl	8014650 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4802      	ldr	r0, [pc, #8]	; (8001b34 <MotionFX_manager_init+0x9c>)
 8001b2c:	f012 fdb0 	bl	8014690 <MotionFX_enable_9X>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200007fc 	.word	0x200007fc
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	3ac88a48 	.word	0x3ac88a48
 8001b40:	3b83126f 	.word	0x3b83126f
 8001b44:	3b449ba6 	.word	0x3b449ba6

08001b48 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MotionFX_manager_run+0x4c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <MotionFX_manager_run+0x50>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d10e      	bne.n	8001b80 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MotionFX_manager_run+0x54>)
 8001b6a:	f012 fdc1 	bl	80146f0 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <MotionFX_manager_run+0x54>)
 8001b7a:	f012 fda9 	bl	80146d0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8001b7e:	e004      	b.n	8001b8a <MotionFX_manager_run+0x42>
    discardedCount++;
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <MotionFX_manager_run+0x4c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <MotionFX_manager_run+0x4c>)
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200007f8 	.word	0x200007f8
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	200007fc 	.word	0x200007fc

08001ba0 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <MotionFX_manager_stop_6X+0x10>)
 8001ba8:	f012 fd52 	bl	8014650 <MotionFX_enable_6X>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200007fc 	.word	0x200007fc

08001bb4 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <MotionFX_manager_start_9X+0x10>)
 8001bbc:	f012 fd68 	bl	8014690 <MotionFX_enable_9X>
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200007fc 	.word	0x200007fc

08001bc8 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f012 ff74 	bl	8014ac0 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	f013 f993 	bl	8014f04 <MotionFX_MagCal_getParams>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f012 fecf 	bl	8014994 <MotionFX_MagCal_init>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8001c06:	2100      	movs	r1, #0
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f012 fec3 	bl	8014994 <MotionFX_MagCal_init>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <MX_RTC_Init+0xb4>)
 8001c34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c3e:	227f      	movs	r2, #127	; 0x7f
 8001c40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c60:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c62:	f007 f855 	bl	8008d10 <HAL_RTC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001c6c:	f7ff ff0e 	bl	8001a8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	2201      	movs	r2, #1
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480f      	ldr	r0, [pc, #60]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001c8c:	f007 f8bb 	bl	8008e06 <HAL_RTC_SetTime>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001c96:	f7ff fef9 	bl	8001a8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	2201      	movs	r2, #1
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_RTC_Init+0xb0>)
 8001cb2:	f007 f945 	bl	8008f40 <HAL_RTC_SetDate>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001cbc:	f7ff fee6 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20001480 	.word	0x20001480
 8001ccc:	40002800 	.word	0x40002800

08001cd0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0a4      	sub	sp, #144	; 0x90
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	f107 0308 	add.w	r3, r7, #8
 8001cdc:	2288      	movs	r2, #136	; 0x88
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f015 f8b1 	bl	8016e48 <memset>
  if(rtcHandle->Instance==RTC)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_RTC_MspInit+0x5c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d118      	bne.n	8001d22 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4618      	mov	r0, r3
 8001d04:	f006 fb48 	bl	8008398 <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d0e:	f7ff febd 	bl	8001a8c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RTC_MspInit+0x60>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_RTC_MspInit+0x60>)
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d22:	bf00      	nop
 8001d24:	3790      	adds	r7, #144	; 0x90
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40002800 	.word	0x40002800
 8001d30:	40021000 	.word	0x40021000

08001d34 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8001d40:	2302      	movs	r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	2bf0      	cmp	r3, #240	; 0xf0
 8001d48:	d002      	beq.n	8001d50 <ByteStuffCopyByte+0x1c>
 8001d4a:	2bf1      	cmp	r3, #241	; 0xf1
 8001d4c:	d008      	beq.n	8001d60 <ByteStuffCopyByte+0x2c>
 8001d4e:	e00f      	b.n	8001d70 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	22f1      	movs	r2, #241	; 0xf1
 8001d54:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	22f2      	movs	r2, #242	; 0xf2
 8001d5c:	701a      	strb	r2, [r3, #0]
      break;
 8001d5e:	e00d      	b.n	8001d7c <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	22f1      	movs	r2, #241	; 0xf1
 8001d64:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	22f1      	movs	r2, #241	; 0xf1
 8001d6c:	701a      	strb	r2, [r3, #0]
      break;
 8001d6e:	e005      	b.n	8001d7c <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
      break;
 8001d7a:	bf00      	nop
  }

  return ret;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e011      	b.n	8001dc2 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	18d0      	adds	r0, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7ff ffc0 	bl	8001d34 <ByteStuffCopyByte>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4413      	add	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d3e8      	bcc.n	8001d9e <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	22f0      	movs	r2, #240	; 0xf0
 8001dd4:	701a      	strb	r2, [r3, #0]
  count++;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
  return count;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	e00a      	b.n	8001e0e <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d3ef      	bcc.n	8001df8 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	601a      	str	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e00f      	b.n	8001e6c <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4413      	add	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d3eb      	bcc.n	8001e4c <Serialize_s32+0x12>
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_MspInit+0x44>)
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_MspInit+0x44>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6613      	str	r3, [r2, #96]	; 0x60
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_MspInit+0x44>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_MspInit+0x44>)
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_MspInit+0x44>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6593      	str	r3, [r2, #88]	; 0x58
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_MspInit+0x44>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <HardFault_Handler+0x4>

08001ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <MemManage_Handler+0x4>

08001ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <BusFault_Handler+0x4>

08001ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <UsageFault_Handler+0x4>

08001eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f18:	f003 feb4 	bl	8005c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <DMA1_Channel6_IRQHandler+0x10>)
 8001f26:	f004 f9e1 	bl	80062ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001548 	.word	0x20001548

08001f34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <TIM3_IRQHandler+0x10>)
 8001f3a:	f007 fa07 	bl	800934c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200014f0 	.word	0x200014f0

08001f48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8001f4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f50:	f004 fd62 	bl	8006a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001f62:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <BSP_I2C1_Init+0x70>)
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <BSP_I2C1_Init+0x74>)
 8001f66:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <BSP_I2C1_Init+0x78>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	4918      	ldr	r1, [pc, #96]	; (8001fd0 <BSP_I2C1_Init+0x78>)
 8001f70:	600a      	str	r2, [r1, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d122      	bne.n	8001fbc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <BSP_I2C1_Init+0x70>)
 8001f78:	f005 f866 	bl	8007048 <HAL_I2C_GetState>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d11c      	bne.n	8001fbc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001f82:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <BSP_I2C1_Init+0x70>)
 8001f84:	f000 f8fe 	bl	8002184 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001f8e:	480e      	ldr	r0, [pc, #56]	; (8001fc8 <BSP_I2C1_Init+0x70>)
 8001f90:	f000 f8b4 	bl	80020fc <MX_I2C1_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001f9a:	f06f 0307 	mvn.w	r3, #7
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	e00c      	b.n	8001fbc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4808      	ldr	r0, [pc, #32]	; (8001fc8 <BSP_I2C1_Init+0x70>)
 8001fa6:	f005 fb0f 	bl	80075c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001fb0:	f06f 0307 	mvn.w	r3, #7
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	e001      	b.n	8001fbc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200014a4 	.word	0x200014a4
 8001fcc:	40005400 	.word	0x40005400
 8001fd0:	2000117c 	.word	0x2000117c

08001fd4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <BSP_I2C1_DeInit+0x48>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d014      	beq.n	8002010 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <BSP_I2C1_DeInit+0x48>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <BSP_I2C1_DeInit+0x48>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <BSP_I2C1_DeInit+0x48>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10b      	bne.n	8002010 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001ff8:	4809      	ldr	r0, [pc, #36]	; (8002020 <BSP_I2C1_DeInit+0x4c>)
 8001ffa:	f000 f909 	bl	8002210 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001ffe:	4808      	ldr	r0, [pc, #32]	; (8002020 <BSP_I2C1_DeInit+0x4c>)
 8002000:	f004 fdb1 	bl	8006b66 <HAL_I2C_DeInit>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d002      	beq.n	8002010 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800200a:	f06f 0307 	mvn.w	r3, #7
 800200e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000117c 	.word	0x2000117c
 8002020:	200014a4 	.word	0x200014a4

08002024 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af04      	add	r7, sp, #16
 800202a:	60ba      	str	r2, [r7, #8]
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	81fb      	strh	r3, [r7, #14]
 8002032:	460b      	mov	r3, r1
 8002034:	81bb      	strh	r3, [r7, #12]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800203e:	89ba      	ldrh	r2, [r7, #12]
 8002040:	89f9      	ldrh	r1, [r7, #14]
 8002042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2301      	movs	r3, #1
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <BSP_I2C1_WriteReg+0x60>)
 8002054:	f004 fdca 	bl	8006bec <HAL_I2C_Mem_Write>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800205e:	4809      	ldr	r0, [pc, #36]	; (8002084 <BSP_I2C1_WriteReg+0x60>)
 8002060:	f005 f800 	bl	8007064 <HAL_I2C_GetError>
 8002064:	4603      	mov	r3, r0
 8002066:	2b04      	cmp	r3, #4
 8002068:	d103      	bne.n	8002072 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800206a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	e002      	b.n	8002078 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002072:	f06f 0303 	mvn.w	r3, #3
 8002076:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002078:	697b      	ldr	r3, [r7, #20]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200014a4 	.word	0x200014a4

08002088 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af04      	add	r7, sp, #16
 800208e:	60ba      	str	r2, [r7, #8]
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	81fb      	strh	r3, [r7, #14]
 8002096:	460b      	mov	r3, r1
 8002098:	81bb      	strh	r3, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020a2:	89ba      	ldrh	r2, [r7, #12]
 80020a4:	89f9      	ldrh	r1, [r7, #14]
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	480c      	ldr	r0, [pc, #48]	; (80020e8 <BSP_I2C1_ReadReg+0x60>)
 80020b8:	f004 feac 	bl	8006e14 <HAL_I2C_Mem_Read>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00c      	beq.n	80020dc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80020c2:	4809      	ldr	r0, [pc, #36]	; (80020e8 <BSP_I2C1_ReadReg+0x60>)
 80020c4:	f004 ffce 	bl	8007064 <HAL_I2C_GetError>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d103      	bne.n	80020d6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020ce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e002      	b.n	80020dc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80020d6:	f06f 0303 	mvn.w	r3, #3
 80020da:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80020dc:	697b      	ldr	r3, [r7, #20]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200014a4 	.word	0x200014a4

080020ec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80020f0:	f003 fddc 	bl	8005cac <HAL_GetTick>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a1c      	ldr	r2, [pc, #112]	; (800217c <MX_I2C1_Init+0x80>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <MX_I2C1_Init+0x84>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f004 fc82 	bl	8006a48 <HAL_I2C_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f005 fa39 	bl	80075c8 <HAL_I2CEx_ConfigAnalogFilter>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f005 fa7b 	bl	800765e <HAL_I2CEx_ConfigDigitalFilter>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40005400 	.word	0x40005400
 8002180:	10909cec 	.word	0x10909cec

08002184 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <I2C1_MspInit+0x84>)
 800218e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <I2C1_MspInit+0x84>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <I2C1_MspInit+0x84>)
 800219a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80021a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021aa:	2312      	movs	r3, #18
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80021b6:	2304      	movs	r3, #4
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4812      	ldr	r0, [pc, #72]	; (800220c <I2C1_MspInit+0x88>)
 80021c2:	f004 f973 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80021c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021cc:	2312      	movs	r3, #18
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80021d8:	2304      	movs	r3, #4
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	480a      	ldr	r0, [pc, #40]	; (800220c <I2C1_MspInit+0x88>)
 80021e4:	f004 f962 	bl	80064ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <I2C1_MspInit+0x84>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a06      	ldr	r2, [pc, #24]	; (8002208 <I2C1_MspInit+0x84>)
 80021ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b04      	ldr	r3, [pc, #16]	; (8002208 <I2C1_MspInit+0x84>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	48000400 	.word	0x48000400

08002210 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <I2C1_MspDeInit+0x30>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a08      	ldr	r2, [pc, #32]	; (8002240 <I2C1_MspDeInit+0x30>)
 800221e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002228:	4806      	ldr	r0, [pc, #24]	; (8002244 <I2C1_MspDeInit+0x34>)
 800222a:	f004 fae9 	bl	8006800 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800222e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002232:	4804      	ldr	r0, [pc, #16]	; (8002244 <I2C1_MspDeInit+0x34>)
 8002234:	f004 fae4 	bl	8006800 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000
 8002244:	48000400 	.word	0x48000400

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
	return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002262:	f014 fdb1 	bl	8016dc8 <__errno>
 8002266:	4603      	mov	r3, r0
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
	return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_exit>:

void _exit (int status)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002280:	f04f 31ff 	mov.w	r1, #4294967295
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ffe7 	bl	8002258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800228a:	e7fe      	b.n	800228a <_exit+0x12>

0800228c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002294:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <_sbrk+0x5c>)
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <_sbrk+0x60>)
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <_sbrk+0x64>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <_sbrk+0x64>)
 80022aa:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <_sbrk+0x68>)
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d207      	bcs.n	80022cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022bc:	f014 fd84 	bl	8016dc8 <__errno>
 80022c0:	4603      	mov	r3, r0
 80022c2:	220c      	movs	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ca:	e009      	b.n	80022e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <_sbrk+0x64>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4413      	add	r3, r2
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <_sbrk+0x64>)
 80022dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20018000 	.word	0x20018000
 80022ec:	00000400 	.word	0x00000400
 80022f0:	20001180 	.word	0x20001180
 80022f4:	20001a50 	.word	0x20001a50

080022f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SystemInit+0x20>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <SystemInit+0x20>)
 8002304:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002308:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <MX_TIM3_Init+0x94>)
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <MX_TIM3_Init+0x98>)
 800233e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002342:	2200      	movs	r2, #0
 8002344:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <MX_TIM3_Init+0x94>)
 800234e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002352:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <MX_TIM3_Init+0x94>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <MX_TIM3_Init+0x94>)
 8002362:	f006 ff2b 	bl	80091bc <HAL_TIM_Base_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800236c:	f7ff fb8e 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002374:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	4619      	mov	r1, r3
 800237c:	480c      	ldr	r0, [pc, #48]	; (80023b0 <MX_TIM3_Init+0x94>)
 800237e:	f007 f904 	bl	800958a <HAL_TIM_ConfigClockSource>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002388:	f7ff fb80 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_TIM3_Init+0x94>)
 800239a:	f007 fb25 	bl	80099e8 <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023a4:	f7ff fb72 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	200014f0 	.word	0x200014f0
 80023b4:	40000400 	.word	0x40000400

080023b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_TIM_Base_MspInit+0x44>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d113      	bne.n	80023f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <HAL_TIM_Base_MspInit+0x48>)
 80023cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ce:	4a0c      	ldr	r2, [pc, #48]	; (8002400 <HAL_TIM_Base_MspInit+0x48>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6593      	str	r3, [r2, #88]	; 0x58
 80023d6:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <HAL_TIM_Base_MspInit+0x48>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	201d      	movs	r0, #29
 80023e8:	f003 fd47 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023ec:	201d      	movs	r0, #29
 80023ee:	f003 fd60 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40000400 	.word	0x40000400
 8002400:	40021000 	.word	0x40021000

08002404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800243c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002408:	f7ff ff76 	bl	80022f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480c      	ldr	r0, [pc, #48]	; (8002440 <LoopForever+0x6>)
  ldr r1, =_edata
 800240e:	490d      	ldr	r1, [pc, #52]	; (8002444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <LoopForever+0xe>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002424:	4c0a      	ldr	r4, [pc, #40]	; (8002450 <LoopForever+0x16>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002432:	f014 fccf 	bl	8016dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002436:	f7ff fa79 	bl	800192c <main>

0800243a <LoopForever>:

LoopForever:
    b LoopForever
 800243a:	e7fe      	b.n	800243a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800243c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002448:	08017550 	.word	0x08017550
  ldr r2, =_sbss
 800244c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002450:	20001a50 	.word	0x20001a50

08002454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC1_2_IRQHandler>
	...

08002458 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e04d      	b.n	8002510 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	7b1a      	ldrb	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a1b      	ldr	r2, [pc, #108]	; (800251c <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80024b0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80024b6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e020      	b.n	8002510 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4798      	blx	r3
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	e016      	b.n	8002510 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d112      	bne.n	8002510 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80024f4:	2301      	movs	r3, #1
 80024f6:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	461a      	mov	r2, r3
 80024fc:	2123      	movs	r1, #35	; 0x23
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fb55 	bl	8002bae <LSM303AGR_ACC_Write_Reg>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e000      	b.n	8002512 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	080033bd 	.word	0x080033bd
 8002520:	0800341f 	.word	0x0800341f

08002524 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	331c      	adds	r3, #28
 8002530:	2101      	movs	r1, #1
 8002532:	4618      	mov	r0, r3
 8002534:	f001 f94a 	bl	80037cc <lsm303agr_xl_block_data_update_set>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800253e:	f04f 33ff 	mov.w	r3, #4294967295
 8002542:	e02c      	b.n	800259e <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	331c      	adds	r3, #28
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f001 faed 	bl	8003b2a <lsm303agr_xl_fifo_mode_set>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e020      	b.n	800259e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2205      	movs	r2, #5
 8002560:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	331c      	adds	r3, #28
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f001 f84e 	bl	800360c <lsm303agr_xl_data_rate_set>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e010      	b.n	800259e <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	331c      	adds	r3, #28
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f8c4 	bl	8003710 <lsm303agr_xl_full_scale_set>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e004      	b.n	800259e <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f87c 	bl	80026ac <LSM303AGR_ACC_Disable>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	e008      	b.n	80025d2 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	331c      	adds	r3, #28
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 fa55 	bl	8003a9a <lsm303agr_xl_device_id_get>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d002      	beq.n	80025fc <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	e000      	b.n	80025fe <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2210      	movs	r2, #16
 8002634:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002648:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	43c80000 	.word	0x43c80000

08002664 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e014      	b.n	80026a4 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f103 021c 	add.w	r2, r3, #28
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f000 ffbf 	bl	800360c <lsm303agr_xl_data_rate_set>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002694:	f04f 33ff 	mov.w	r3, #4294967295
 8002698:	e004      	b.n	80026a4 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e01f      	b.n	8002702 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 021c 	add.w	r2, r3, #28
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	332a      	adds	r3, #42	; 0x2a
 80026cc:	4619      	mov	r1, r3
 80026ce:	4610      	mov	r0, r2
 80026d0:	f000 ffc2 	bl	8003658 <lsm303agr_xl_data_rate_get>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e010      	b.n	8002702 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	331c      	adds	r3, #28
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 ff90 	bl	800360c <lsm303agr_xl_data_rate_set>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e004      	b.n	8002702 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b084      	sub	sp, #16
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	331c      	adds	r3, #28
 800271c:	f107 020b 	add.w	r2, r7, #11
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f000 ff3e 	bl	80035a4 <lsm303agr_xl_operating_mode_get>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e031      	b.n	8002798 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d01a      	beq.n	8002770 <LSM303AGR_ACC_GetSensitivity+0x66>
 800273a:	2b02      	cmp	r3, #2
 800273c:	dc22      	bgt.n	8002784 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002742:	2b01      	cmp	r3, #1
 8002744:	d00a      	beq.n	800275c <LSM303AGR_ACC_GetSensitivity+0x52>
 8002746:	e01d      	b.n	8002784 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fca8 	bl	80030a0 <LSM303AGR_ACC_GetSensitivityHR>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01a      	beq.n	800278c <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e01d      	b.n	8002798 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fce4 	bl	800312c <LSM303AGR_ACC_GetSensitivityNM>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d012      	beq.n	8002790 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e013      	b.n	8002798 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fd20 	bl	80031b8 <LSM303AGR_ACC_GetSensitivityLP>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	60fb      	str	r3, [r7, #12]
      break;
 800278a:	e004      	b.n	8002796 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800278c:	bf00      	nop
 800278e:	e002      	b.n	8002796 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002794:	bf00      	nop
  }

  return ret;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	331c      	adds	r3, #28
 80027b2:	f107 020b 	add.w	r2, r7, #11
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fef3 	bl	80035a4 <lsm303agr_xl_operating_mode_get>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80027c4:	f04f 33ff 	mov.w	r3, #4294967295
 80027c8:	e09d      	b.n	8002906 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	331c      	adds	r3, #28
 80027ce:	f107 020a 	add.w	r2, r7, #10
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 ff3f 	bl	8003658 <lsm303agr_xl_data_rate_get>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	e08f      	b.n	8002906 <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d147      	bne.n	800287c <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 80027ec:	7abb      	ldrb	r3, [r7, #10]
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	d840      	bhi.n	8002874 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002821 	.word	0x08002821
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	08002835 	.word	0x08002835
 8002804:	0800283d 	.word	0x0800283d
 8002808:	08002845 	.word	0x08002845
 800280c:	0800284d 	.word	0x0800284d
 8002810:	08002855 	.word	0x08002855
 8002814:	0800285d 	.word	0x0800285d
 8002818:	08002865 	.word	0x08002865
 800281c:	0800286d 	.word	0x0800286d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
        break;
 8002828:	e06c      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002830:	601a      	str	r2, [r3, #0]
        break;
 8002832:	e067      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4a36      	ldr	r2, [pc, #216]	; (8002910 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002838:	601a      	str	r2, [r3, #0]
        break;
 800283a:	e063      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4a35      	ldr	r2, [pc, #212]	; (8002914 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002840:	601a      	str	r2, [r3, #0]
        break;
 8002842:	e05f      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	4a34      	ldr	r2, [pc, #208]	; (8002918 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002848:	601a      	str	r2, [r3, #0]
        break;
 800284a:	e05b      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4a33      	ldr	r2, [pc, #204]	; (800291c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002850:	601a      	str	r2, [r3, #0]
        break;
 8002852:	e057      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4a32      	ldr	r2, [pc, #200]	; (8002920 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002858:	601a      	str	r2, [r3, #0]
        break;
 800285a:	e053      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4a31      	ldr	r2, [pc, #196]	; (8002924 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002860:	601a      	str	r2, [r3, #0]
        break;
 8002862:	e04f      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4a30      	ldr	r2, [pc, #192]	; (8002928 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002868:	601a      	str	r2, [r3, #0]
        break;
 800286a:	e04b      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4a2f      	ldr	r2, [pc, #188]	; (800292c <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002870:	601a      	str	r2, [r3, #0]
        break;
 8002872:	e047      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
 8002878:	60fb      	str	r3, [r7, #12]
        break;
 800287a:	e043      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 800287c:	7abb      	ldrb	r3, [r7, #10]
 800287e:	2b09      	cmp	r3, #9
 8002880:	d83c      	bhi.n	80028fc <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002882:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002888:	080028b1 	.word	0x080028b1
 800288c:	080028bb 	.word	0x080028bb
 8002890:	080028c5 	.word	0x080028c5
 8002894:	080028cd 	.word	0x080028cd
 8002898:	080028d5 	.word	0x080028d5
 800289c:	080028dd 	.word	0x080028dd
 80028a0:	080028e5 	.word	0x080028e5
 80028a4:	080028ed 	.word	0x080028ed
 80028a8:	080028fd 	.word	0x080028fd
 80028ac:	080028f5 	.word	0x080028f5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
        break;
 80028b8:	e024      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028c0:	601a      	str	r2, [r3, #0]
        break;
 80028c2:	e01f      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80028c8:	601a      	str	r2, [r3, #0]
        break;
 80028ca:	e01b      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4a11      	ldr	r2, [pc, #68]	; (8002914 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80028d0:	601a      	str	r2, [r3, #0]
        break;
 80028d2:	e017      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80028d8:	601a      	str	r2, [r3, #0]
        break;
 80028da:	e013      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4a0f      	ldr	r2, [pc, #60]	; (800291c <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80028e0:	601a      	str	r2, [r3, #0]
        break;
 80028e2:	e00f      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80028e8:	601a      	str	r2, [r3, #0]
        break;
 80028ea:	e00b      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80028f0:	601a      	str	r2, [r3, #0]
        break;
 80028f2:	e007      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 80028f8:	601a      	str	r2, [r3, #0]
        break;
 80028fa:	e003      	b.n	8002904 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	60fb      	str	r3, [r7, #12]
        break;
 8002902:	bf00      	nop
    }
  }

  return ret;
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	41200000 	.word	0x41200000
 8002914:	41c80000 	.word	0x41c80000
 8002918:	42480000 	.word	0x42480000
 800291c:	42c80000 	.word	0x42c80000
 8002920:	43480000 	.word	0x43480000
 8002924:	43c80000 	.word	0x43c80000
 8002928:	44ca8000 	.word	0x44ca8000
 800292c:	45a80000 	.word	0x45a80000
 8002930:	44a80000 	.word	0x44a80000

08002934 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002946:	2b01      	cmp	r3, #1
 8002948:	d106      	bne.n	8002958 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800294a:	ed97 0a00 	vldr	s0, [r7]
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fc78 	bl	8003244 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002954:	4603      	mov	r3, r0
 8002956:	e005      	b.n	8002964 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002958:	ed97 0a00 	vldr	s0, [r7]
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fcd3 	bl	8003308 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002962:	4603      	mov	r3, r0
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	331c      	adds	r3, #28
 800297e:	f107 020b 	add.w	r2, r7, #11
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f000 fee9 	bl	800375c <lsm303agr_xl_full_scale_get>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002990:	f04f 33ff 	mov.w	r3, #4294967295
 8002994:	e023      	b.n	80029de <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d81b      	bhi.n	80029d4 <LSM303AGR_ACC_GetFullScale+0x68>
 800299c:	a201      	add	r2, pc, #4	; (adr r2, 80029a4 <LSM303AGR_ACC_GetFullScale+0x38>)
 800299e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a2:	bf00      	nop
 80029a4:	080029b5 	.word	0x080029b5
 80029a8:	080029bd 	.word	0x080029bd
 80029ac:	080029c5 	.word	0x080029c5
 80029b0:	080029cd 	.word	0x080029cd
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2202      	movs	r2, #2
 80029b8:	601a      	str	r2, [r3, #0]
      break;
 80029ba:	e00f      	b.n	80029dc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2204      	movs	r2, #4
 80029c0:	601a      	str	r2, [r3, #0]
      break;
 80029c2:	e00b      	b.n	80029dc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2208      	movs	r2, #8
 80029c8:	601a      	str	r2, [r3, #0]
      break;
 80029ca:	e007      	b.n	80029dc <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	601a      	str	r2, [r3, #0]
      break;
 80029d2:	e003      	b.n	80029dc <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	60fb      	str	r3, [r7, #12]
      break;
 80029da:	bf00      	nop
  }

  return ret;
 80029dc:	68fb      	ldr	r3, [r7, #12]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	dd0b      	ble.n	8002a10 <LSM303AGR_ACC_SetFullScale+0x28>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	dd06      	ble.n	8002a0c <LSM303AGR_ACC_SetFullScale+0x24>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	dc01      	bgt.n	8002a08 <LSM303AGR_ACC_SetFullScale+0x20>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e004      	b.n	8002a12 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e002      	b.n	8002a12 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002a10:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002a12:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	331c      	adds	r3, #28
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fe77 	bl	8003710 <lsm303agr_xl_full_scale_set>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	e000      	b.n	8002a30 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	331c      	adds	r3, #28
 8002a4e:	f107 020f 	add.w	r2, r7, #15
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fda5 	bl	80035a4 <lsm303agr_xl_operating_mode_get>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d002      	beq.n	8002a66 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
 8002a64:	e04a      	b.n	8002afc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d00c      	beq.n	8002a86 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	dc0e      	bgt.n	8002a8e <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d003      	beq.n	8002a80 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002a78:	e009      	b.n	8002a8e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	83fb      	strh	r3, [r7, #30]
      break;
 8002a7e:	e00a      	b.n	8002a96 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002a80:	2340      	movs	r3, #64	; 0x40
 8002a82:	83fb      	strh	r3, [r7, #30]
      break;
 8002a84:	e007      	b.n	8002a96 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8a:	83fb      	strh	r3, [r7, #30]
      break;
 8002a8c:	e003      	b.n	8002a96 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a92:	61bb      	str	r3, [r7, #24]
      break;
 8002a94:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d101      	bne.n	8002aa2 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	e02c      	b.n	8002afc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	331c      	adds	r3, #28
 8002aa6:	f107 0210 	add.w	r2, r7, #16
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 feb3 	bl	8003818 <lsm303agr_acceleration_raw_get>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8002abc:	e01e      	b.n	8002afc <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002abe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ac8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ae0:	b21a      	sxth	r2, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002ae6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002aea:	461a      	mov	r2, r3
 8002aec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002af0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002af4:	b21a      	sxth	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	809a      	strh	r2, [r3, #4]

  return ret;
 8002afa:	69bb      	ldr	r3, [r7, #24]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002b14:	f107 0310 	add.w	r3, r7, #16
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff ff8c 	bl	8002a38 <LSM303AGR_ACC_GetAxesRaw>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e03c      	b.n	8002ba6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fde9 	bl	800270a <LSM303AGR_ACC_GetSensitivity>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e030      	b.n	8002ba6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002b44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5c:	ee17 2a90 	vmov	r2, s15
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002b68:	ee07 3a90 	vmov	s15, r3
 8002b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 2a90 	vmov	r2, s15
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002b84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9c:	ee17 2a90 	vmov	r2, s15
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	70fb      	strb	r3, [r7, #3]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f103 001c 	add.w	r0, r3, #28
 8002bc4:	1cba      	adds	r2, r7, #2
 8002bc6:	78f9      	ldrb	r1, [r7, #3]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f000 fcd3 	bl	8003574 <lsm303agr_write_reg>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	e000      	b.n	8002bdc <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e04b      	b.n	8002c98 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7b1a      	ldrb	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002c3c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a19      	ldr	r2, [pc, #100]	; (8002ca8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002c42:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	e01e      	b.n	8002c98 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4798      	blx	r3
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	e014      	b.n	8002c98 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	331c      	adds	r3, #28
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 ff75 	bl	8003b76 <lsm303agr_mag_i2c_interface_set>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e000      	b.n	8002c9a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002c98:	68fb      	ldr	r3, [r7, #12]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08003481 	.word	0x08003481
 8002ca8:	080034e3 	.word	0x080034e3

08002cac <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	331c      	adds	r3, #28
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fe7c 	bl	80039b8 <lsm303agr_mag_block_data_update_set>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	e028      	b.n	8002d1e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	331c      	adds	r3, #28
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fdeb 	bl	80038ae <lsm303agr_mag_operating_mode_set>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce2:	e01c      	b.n	8002d1e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	331c      	adds	r3, #28
 8002ce8:	2103      	movs	r1, #3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 fe05 	bl	80038fa <lsm303agr_mag_data_rate_set>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	e010      	b.n	8002d1e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	331c      	adds	r3, #28
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 feeb 	bl	8003ade <lsm303agr_mag_self_test_set>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	e004      	b.n	8002d1e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f874 	bl	8002e1c <LSM303AGR_MAG_Disable>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	e004      	b.n	8002d4a <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	331c      	adds	r3, #28
 8002d60:	6839      	ldr	r1, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 feaa 	bl	8003abc <lsm303agr_mag_device_id_get>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	e000      	b.n	8002d76 <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
	...

08002d80 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2200      	movs	r2, #0
 8002dac:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2232      	movs	r2, #50	; 0x32
 8002db2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002dc8:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	42c80000 	.word	0x42c80000

08002ddc <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e010      	b.n	8002e14 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	331c      	adds	r3, #28
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fd58 	bl	80038ae <lsm303agr_mag_operating_mode_set>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	e004      	b.n	8002e14 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e010      	b.n	8002e54 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	331c      	adds	r3, #28
 8002e36:	2102      	movs	r1, #2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fd38 	bl	80038ae <lsm303agr_mag_operating_mode_set>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295
 8002e48:	e004      	b.n	8002e54 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002e6c:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	331c      	adds	r3, #28
 8002e8e:	f107 020b 	add.w	r2, r7, #11
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fd57 	bl	8003948 <lsm303agr_mag_data_rate_get>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	e023      	b.n	8002eee <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002ea6:	7afb      	ldrb	r3, [r7, #11]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d81b      	bhi.n	8002ee4 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8002eac:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8002eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb2:	bf00      	nop
 8002eb4:	08002ec5 	.word	0x08002ec5
 8002eb8:	08002ecd 	.word	0x08002ecd
 8002ebc:	08002ed5 	.word	0x08002ed5
 8002ec0:	08002edd 	.word	0x08002edd
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8002ec8:	601a      	str	r2, [r3, #0]
      break;
 8002eca:	e00f      	b.n	8002eec <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8002ed0:	601a      	str	r2, [r3, #0]
      break;
 8002ed2:	e00b      	b.n	8002eec <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8002ed8:	601a      	str	r2, [r3, #0]
      break;
 8002eda:	e007      	b.n	8002eec <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8002ee0:	601a      	str	r2, [r3, #0]
      break;
 8002ee2:	e003      	b.n	8002eec <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	60fb      	str	r3, [r7, #12]
      break;
 8002eea:	bf00      	nop
  }

  return ret;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	41200000 	.word	0x41200000
 8002efc:	41a00000 	.word	0x41a00000
 8002f00:	42480000 	.word	0x42480000
 8002f04:	42c80000 	.word	0x42c80000

08002f08 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8002f14:	edd7 7a00 	vldr	s15, [r7]
 8002f18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	d801      	bhi.n	8002f2a <LSM303AGR_MAG_SetOutputDataRate+0x22>
 8002f26:	2300      	movs	r3, #0
 8002f28:	e016      	b.n	8002f58 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f2a:	edd7 7a00 	vldr	s15, [r7]
 8002f2e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	d801      	bhi.n	8002f40 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e00b      	b.n	8002f58 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f40:	edd7 7a00 	vldr	s15, [r7]
 8002f44:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002f80 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8002f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	d801      	bhi.n	8002f56 <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e000      	b.n	8002f58 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8002f56:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8002f58:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	331c      	adds	r3, #28
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fcc9 	bl	80038fa <lsm303agr_mag_data_rate_set>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	e000      	b.n	8002f76 <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	42480000 	.word	0x42480000

08002f84 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2232      	movs	r2, #50	; 0x32
 8002f92:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	331c      	adds	r3, #28
 8002fc8:	f107 0208 	add.w	r2, r7, #8
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fd18 	bl	8003a04 <lsm303agr_magnetic_raw_get>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	e00c      	b.n	8002ffa <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002fe0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002fe8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002ff0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	331c      	adds	r3, #28
 8003010:	f107 0210 	add.w	r2, r7, #16
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fcf4 	bl	8003a04 <lsm303agr_magnetic_raw_get>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e036      	b.n	8003096 <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff ff14 	bl	8002e5c <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003034:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003038:	ee07 3a90 	vmov	s15, r3
 800303c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003040:	edd7 7a03 	vldr	s15, [r7, #12]
 8003044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304c:	ee17 2a90 	vmov	r2, s15
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003058:	ee07 3a90 	vmov	s15, r3
 800305c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003060:	edd7 7a03 	vldr	s15, [r7, #12]
 8003064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306c:	ee17 2a90 	vmov	r2, s15
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003074:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003080:	edd7 7a03 	vldr	s15, [r7, #12]
 8003084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800308c:	ee17 2a90 	vmov	r2, s15
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	331c      	adds	r3, #28
 80030b2:	f107 020b 	add.w	r2, r7, #11
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fb4f 	bl	800375c <lsm303agr_xl_full_scale_get>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80030c4:	f04f 33ff 	mov.w	r3, #4294967295
 80030c8:	e023      	b.n	8003112 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d81b      	bhi.n	8003108 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030f1 	.word	0x080030f1
 80030e0:	080030f9 	.word	0x080030f9
 80030e4:	08003101 	.word	0x08003101
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	4a0c      	ldr	r2, [pc, #48]	; (800311c <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80030ec:	601a      	str	r2, [r3, #0]
      break;
 80030ee:	e00f      	b.n	8003110 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80030f4:	601a      	str	r2, [r3, #0]
      break;
 80030f6:	e00b      	b.n	8003110 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80030fc:	601a      	str	r2, [r3, #0]
      break;
 80030fe:	e007      	b.n	8003110 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003104:	601a      	str	r2, [r3, #0]
      break;
 8003106:	e003      	b.n	8003110 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	60fb      	str	r3, [r7, #12]
      break;
 800310e:	bf00      	nop
  }

  return ret;
 8003110:	68fb      	ldr	r3, [r7, #12]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	3f7ae148 	.word	0x3f7ae148
 8003120:	3ff9999a 	.word	0x3ff9999a
 8003124:	4079999a 	.word	0x4079999a
 8003128:	413b851f 	.word	0x413b851f

0800312c <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	331c      	adds	r3, #28
 800313e:	f107 020b 	add.w	r2, r7, #11
 8003142:	4611      	mov	r1, r2
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fb09 	bl	800375c <lsm303agr_xl_full_scale_get>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003150:	f04f 33ff 	mov.w	r3, #4294967295
 8003154:	e023      	b.n	800319e <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003156:	7afb      	ldrb	r3, [r7, #11]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d81b      	bhi.n	8003194 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003175 	.word	0x08003175
 8003168:	0800317d 	.word	0x0800317d
 800316c:	08003185 	.word	0x08003185
 8003170:	0800318d 	.word	0x0800318d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8003178:	601a      	str	r2, [r3, #0]
      break;
 800317a:	e00f      	b.n	800319c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003180:	601a      	str	r2, [r3, #0]
      break;
 8003182:	e00b      	b.n	800319c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8003188:	601a      	str	r2, [r3, #0]
      break;
 800318a:	e007      	b.n	800319c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003190:	601a      	str	r2, [r3, #0]
      break;
 8003192:	e003      	b.n	800319c <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295
 8003198:	60fb      	str	r3, [r7, #12]
      break;
 800319a:	bf00      	nop
  }

  return ret;
 800319c:	68fb      	ldr	r3, [r7, #12]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	4079999a 	.word	0x4079999a
 80031ac:	40fa3d71 	.word	0x40fa3d71
 80031b0:	417a147b 	.word	0x417a147b
 80031b4:	423b999a 	.word	0x423b999a

080031b8 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	331c      	adds	r3, #28
 80031ca:	f107 020b 	add.w	r2, r7, #11
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fac3 	bl	800375c <lsm303agr_xl_full_scale_get>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80031dc:	f04f 33ff 	mov.w	r3, #4294967295
 80031e0:	e023      	b.n	800322a <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d81b      	bhi.n	8003220 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003201 	.word	0x08003201
 80031f4:	08003209 	.word	0x08003209
 80031f8:	08003211 	.word	0x08003211
 80031fc:	08003219 	.word	0x08003219
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4a0c      	ldr	r2, [pc, #48]	; (8003234 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003204:	601a      	str	r2, [r3, #0]
      break;
 8003206:	e00f      	b.n	8003228 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 800320c:	601a      	str	r2, [r3, #0]
      break;
 800320e:	e00b      	b.n	8003228 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003214:	601a      	str	r2, [r3, #0]
      break;
 8003216:	e007      	b.n	8003228 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4a09      	ldr	r2, [pc, #36]	; (8003240 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 800321c:	601a      	str	r2, [r3, #0]
      break;
 800321e:	e003      	b.n	8003228 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295
 8003224:	60fb      	str	r3, [r7, #12]
      break;
 8003226:	bf00      	nop
  }

  return ret;
 8003228:	68fb      	ldr	r3, [r7, #12]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	417a147b 	.word	0x417a147b
 8003238:	41fa147b 	.word	0x41fa147b
 800323c:	427a147b 	.word	0x427a147b
 8003240:	433b947b 	.word	0x433b947b

08003244 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003250:	edd7 7a00 	vldr	s15, [r7]
 8003254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	d801      	bhi.n	8003266 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003262:	2301      	movs	r3, #1
 8003264:	e037      	b.n	80032d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003266:	edd7 7a00 	vldr	s15, [r7]
 800326a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800326e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	d801      	bhi.n	800327c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003278:	2302      	movs	r3, #2
 800327a:	e02c      	b.n	80032d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800327c:	edd7 7a00 	vldr	s15, [r7]
 8003280:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d801      	bhi.n	8003292 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800328e:	2303      	movs	r3, #3
 8003290:	e021      	b.n	80032d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003292:	edd7 7a00 	vldr	s15, [r7]
 8003296:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032fc <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 800329a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a2:	d801      	bhi.n	80032a8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80032a4:	2304      	movs	r3, #4
 80032a6:	e016      	b.n	80032d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032a8:	edd7 7a00 	vldr	s15, [r7]
 80032ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003300 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80032b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	d801      	bhi.n	80032be <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80032ba:	2305      	movs	r3, #5
 80032bc:	e00b      	b.n	80032d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032be:	edd7 7a00 	vldr	s15, [r7]
 80032c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003304 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80032c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ce:	d801      	bhi.n	80032d4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80032d0:	2306      	movs	r3, #6
 80032d2:	e000      	b.n	80032d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80032d4:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80032d6:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	331c      	adds	r3, #28
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f993 	bl	800360c <lsm303agr_xl_data_rate_set>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	e000      	b.n	80032f4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	42480000 	.word	0x42480000
 8003300:	42c80000 	.word	0x42c80000
 8003304:	43480000 	.word	0x43480000

08003308 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003314:	edd7 7a00 	vldr	s15, [r7]
 8003318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800331c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	d801      	bhi.n	800332a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003326:	2301      	movs	r3, #1
 8003328:	e037      	b.n	800339a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800332a:	edd7 7a00 	vldr	s15, [r7]
 800332e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d801      	bhi.n	8003340 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 800333c:	2302      	movs	r3, #2
 800333e:	e02c      	b.n	800339a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003340:	edd7 7a00 	vldr	s15, [r7]
 8003344:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003350:	d801      	bhi.n	8003356 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003352:	2303      	movs	r3, #3
 8003354:	e021      	b.n	800339a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003356:	edd7 7a00 	vldr	s15, [r7]
 800335a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80033b0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 800335e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	d801      	bhi.n	800336c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003368:	2304      	movs	r3, #4
 800336a:	e016      	b.n	800339a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800336c:	edd7 7a00 	vldr	s15, [r7]
 8003370:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80033b4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003374:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337c:	d801      	bhi.n	8003382 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800337e:	2305      	movs	r3, #5
 8003380:	e00b      	b.n	800339a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003382:	edd7 7a00 	vldr	s15, [r7]
 8003386:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80033b8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800338a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	d801      	bhi.n	8003398 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003394:	2306      	movs	r3, #6
 8003396:	e000      	b.n	800339a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003398:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	42480000 	.word	0x42480000
 80033b4:	42c80000 	.word	0x42c80000
 80033b8:	43480000 	.word	0x43480000

080033bc <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	461a      	mov	r2, r3
 80033c8:	460b      	mov	r3, r1
 80033ca:	72fb      	strb	r3, [r7, #11]
 80033cc:	4613      	mov	r3, r2
 80033ce:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10e      	bne.n	80033fa <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	695c      	ldr	r4, [r3, #20]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	7b1b      	ldrb	r3, [r3, #12]
 80033e4:	b298      	uxth	r0, r3
 80033e6:	7afb      	ldrb	r3, [r7, #11]
 80033e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	b299      	uxth	r1, r3
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	47a0      	blx	r4
 80033f6:	4603      	mov	r3, r0
 80033f8:	e00d      	b.n	8003416 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	695c      	ldr	r4, [r3, #20]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	7b1b      	ldrb	r3, [r3, #12]
 8003402:	b298      	uxth	r0, r3
 8003404:	7afb      	ldrb	r3, [r7, #11]
 8003406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340a:	b2db      	uxtb	r3, r3
 800340c:	b299      	uxth	r1, r3
 800340e:	893b      	ldrh	r3, [r7, #8]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	47a0      	blx	r4
 8003414:	4603      	mov	r3, r0
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}

0800341e <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800341e:	b590      	push	{r4, r7, lr}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	461a      	mov	r2, r3
 800342a:	460b      	mov	r3, r1
 800342c:	72fb      	strb	r3, [r7, #11]
 800342e:	4613      	mov	r3, r2
 8003430:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	691c      	ldr	r4, [r3, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	7b1b      	ldrb	r3, [r3, #12]
 8003446:	b298      	uxth	r0, r3
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800344e:	b2db      	uxtb	r3, r3
 8003450:	b299      	uxth	r1, r3
 8003452:	893b      	ldrh	r3, [r7, #8]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	47a0      	blx	r4
 8003458:	4603      	mov	r3, r0
 800345a:	e00d      	b.n	8003478 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	691c      	ldr	r4, [r3, #16]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	7b1b      	ldrb	r3, [r3, #12]
 8003464:	b298      	uxth	r0, r3
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b299      	uxth	r1, r3
 8003470:	893b      	ldrh	r3, [r7, #8]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	47a0      	blx	r4
 8003476:	4603      	mov	r3, r0
  }
}
 8003478:	4618      	mov	r0, r3
 800347a:	371c      	adds	r7, #28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}

08003480 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	460b      	mov	r3, r1
 800348e:	72fb      	strb	r3, [r7, #11]
 8003490:	4613      	mov	r3, r2
 8003492:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10e      	bne.n	80034be <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	695c      	ldr	r4, [r3, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	7b1b      	ldrb	r3, [r3, #12]
 80034a8:	b298      	uxth	r0, r3
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	b299      	uxth	r1, r3
 80034b4:	893b      	ldrh	r3, [r7, #8]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	47a0      	blx	r4
 80034ba:	4603      	mov	r3, r0
 80034bc:	e00d      	b.n	80034da <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	695c      	ldr	r4, [r3, #20]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	7b1b      	ldrb	r3, [r3, #12]
 80034c6:	b298      	uxth	r0, r3
 80034c8:	7afb      	ldrb	r3, [r7, #11]
 80034ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	b299      	uxth	r1, r3
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	47a0      	blx	r4
 80034d8:	4603      	mov	r3, r0
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}

080034e2 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80034e2:	b590      	push	{r4, r7, lr}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	461a      	mov	r2, r3
 80034ee:	460b      	mov	r3, r1
 80034f0:	72fb      	strb	r3, [r7, #11]
 80034f2:	4613      	mov	r3, r2
 80034f4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	691c      	ldr	r4, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	7b1b      	ldrb	r3, [r3, #12]
 800350a:	b298      	uxth	r0, r3
 800350c:	7afb      	ldrb	r3, [r7, #11]
 800350e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003512:	b2db      	uxtb	r3, r3
 8003514:	b299      	uxth	r1, r3
 8003516:	893b      	ldrh	r3, [r7, #8]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	47a0      	blx	r4
 800351c:	4603      	mov	r3, r0
 800351e:	e00d      	b.n	800353c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	691c      	ldr	r4, [r3, #16]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	7b1b      	ldrb	r3, [r3, #12]
 8003528:	b298      	uxth	r0, r3
 800352a:	7afb      	ldrb	r3, [r7, #11]
 800352c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003530:	b2db      	uxtb	r3, r3
 8003532:	b299      	uxth	r1, r3
 8003534:	893b      	ldrh	r3, [r7, #8]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	47a0      	blx	r4
 800353a:	4603      	mov	r3, r0
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd90      	pop	{r4, r7, pc}

08003544 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003544:	b590      	push	{r4, r7, lr}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	461a      	mov	r2, r3
 8003550:	460b      	mov	r3, r1
 8003552:	72fb      	strb	r3, [r7, #11]
 8003554:	4613      	mov	r3, r2
 8003556:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685c      	ldr	r4, [r3, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6898      	ldr	r0, [r3, #8]
 8003560:	893b      	ldrh	r3, [r7, #8]
 8003562:	7af9      	ldrb	r1, [r7, #11]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	47a0      	blx	r4
 8003568:	6178      	str	r0, [r7, #20]
  return ret;
 800356a:	697b      	ldr	r3, [r7, #20]
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	460b      	mov	r3, r1
 8003582:	72fb      	strb	r3, [r7, #11]
 8003584:	4613      	mov	r3, r2
 8003586:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6898      	ldr	r0, [r3, #8]
 8003590:	893b      	ldrh	r3, [r7, #8]
 8003592:	7af9      	ldrb	r1, [r7, #11]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	47a0      	blx	r4
 8003598:	6178      	str	r0, [r7, #20]
  return ret;
 800359a:	697b      	ldr	r3, [r7, #20]
}
 800359c:	4618      	mov	r0, r3
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd90      	pop	{r4, r7, pc}

080035a4 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80035ae:	f107 020c 	add.w	r2, r7, #12
 80035b2:	2301      	movs	r3, #1
 80035b4:	2120      	movs	r1, #32
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffc4 	bl	8003544 <lsm303agr_read_reg>
 80035bc:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d107      	bne.n	80035d4 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80035c4:	f107 0210 	add.w	r2, r7, #16
 80035c8:	2301      	movs	r3, #1
 80035ca:	2123      	movs	r1, #35	; 0x23
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ffb9 	bl	8003544 <lsm303agr_read_reg>
 80035d2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 80035d4:	7b3b      	ldrb	r3, [r7, #12]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e00c      	b.n	8003602 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 80035e8:	7c3b      	ldrb	r3, [r7, #16]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
 80035fa:	e002      	b.n	8003602 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003602:	697b      	ldr	r3, [r7, #20]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003618:	f107 0208 	add.w	r2, r7, #8
 800361c:	2301      	movs	r3, #1
 800361e:	2120      	movs	r1, #32
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff8f 	bl	8003544 <lsm303agr_read_reg>
 8003626:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f003 030f 	and.w	r3, r3, #15
 8003634:	b2da      	uxtb	r2, r3
 8003636:	7a3b      	ldrb	r3, [r7, #8]
 8003638:	f362 1307 	bfi	r3, r2, #4, #4
 800363c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800363e:	f107 0208 	add.w	r2, r7, #8
 8003642:	2301      	movs	r3, #1
 8003644:	2120      	movs	r1, #32
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff94 	bl	8003574 <lsm303agr_write_reg>
 800364c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003662:	f107 0208 	add.w	r2, r7, #8
 8003666:	2301      	movs	r3, #1
 8003668:	2120      	movs	r1, #32
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff ff6a 	bl	8003544 <lsm303agr_read_reg>
 8003670:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003672:	7a3b      	ldrb	r3, [r7, #8]
 8003674:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b09      	cmp	r3, #9
 800367c:	d83e      	bhi.n	80036fc <lsm303agr_xl_data_rate_get+0xa4>
 800367e:	a201      	add	r2, pc, #4	; (adr r2, 8003684 <lsm303agr_xl_data_rate_get+0x2c>)
 8003680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003684:	080036ad 	.word	0x080036ad
 8003688:	080036b5 	.word	0x080036b5
 800368c:	080036bd 	.word	0x080036bd
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036cd 	.word	0x080036cd
 8003698:	080036d5 	.word	0x080036d5
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036e5 	.word	0x080036e5
 80036a4:	080036ed 	.word	0x080036ed
 80036a8:	080036f5 	.word	0x080036f5
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
      break;
 80036b2:	e027      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e023      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2202      	movs	r2, #2
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	e01f      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2203      	movs	r2, #3
 80036c8:	701a      	strb	r2, [r3, #0]
      break;
 80036ca:	e01b      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2204      	movs	r2, #4
 80036d0:	701a      	strb	r2, [r3, #0]
      break;
 80036d2:	e017      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2205      	movs	r2, #5
 80036d8:	701a      	strb	r2, [r3, #0]
      break;
 80036da:	e013      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2206      	movs	r2, #6
 80036e0:	701a      	strb	r2, [r3, #0]
      break;
 80036e2:	e00f      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2207      	movs	r2, #7
 80036e8:	701a      	strb	r2, [r3, #0]
      break;
 80036ea:	e00b      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2208      	movs	r2, #8
 80036f0:	701a      	strb	r2, [r3, #0]
      break;
 80036f2:	e007      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2209      	movs	r2, #9
 80036f8:	701a      	strb	r2, [r3, #0]
      break;
 80036fa:	e003      	b.n	8003704 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2200      	movs	r2, #0
 8003700:	701a      	strb	r2, [r3, #0]
      break;
 8003702:	bf00      	nop
  }

  return ret;
 8003704:	68fb      	ldr	r3, [r7, #12]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop

08003710 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800371c:	f107 0208 	add.w	r2, r7, #8
 8003720:	2301      	movs	r3, #1
 8003722:	2123      	movs	r1, #35	; 0x23
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff0d 	bl	8003544 <lsm303agr_read_reg>
 800372a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10f      	bne.n	8003752 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	b2da      	uxtb	r2, r3
 800373a:	7a3b      	ldrb	r3, [r7, #8]
 800373c:	f362 1305 	bfi	r3, r2, #4, #2
 8003740:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003742:	f107 0208 	add.w	r2, r7, #8
 8003746:	2301      	movs	r3, #1
 8003748:	2123      	movs	r1, #35	; 0x23
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ff12 	bl	8003574 <lsm303agr_write_reg>
 8003750:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003752:	68fb      	ldr	r3, [r7, #12]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003766:	f107 0208 	add.w	r2, r7, #8
 800376a:	2301      	movs	r3, #1
 800376c:	2123      	movs	r1, #35	; 0x23
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff fee8 	bl	8003544 <lsm303agr_read_reg>
 8003774:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003776:	7a3b      	ldrb	r3, [r7, #8]
 8003778:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b03      	cmp	r3, #3
 8003780:	d81a      	bhi.n	80037b8 <lsm303agr_xl_full_scale_get+0x5c>
 8003782:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <lsm303agr_xl_full_scale_get+0x2c>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a1 	.word	0x080037a1
 8003790:	080037a9 	.word	0x080037a9
 8003794:	080037b1 	.word	0x080037b1
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
      break;
 800379e:	e00f      	b.n	80037c0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
      break;
 80037a6:	e00b      	b.n	80037c0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2202      	movs	r2, #2
 80037ac:	701a      	strb	r2, [r3, #0]
      break;
 80037ae:	e007      	b.n	80037c0 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2203      	movs	r2, #3
 80037b4:	701a      	strb	r2, [r3, #0]
      break;
 80037b6:	e003      	b.n	80037c0 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
      break;
 80037be:	bf00      	nop
  }

  return ret;
 80037c0:	68fb      	ldr	r3, [r7, #12]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop

080037cc <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80037d8:	f107 0208 	add.w	r2, r7, #8
 80037dc:	2301      	movs	r3, #1
 80037de:	2123      	movs	r1, #35	; 0x23
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff feaf 	bl	8003544 <lsm303agr_read_reg>
 80037e6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	7a3b      	ldrb	r3, [r7, #8]
 80037f8:	f362 13c7 	bfi	r3, r2, #7, #1
 80037fc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80037fe:	f107 0208 	add.w	r2, r7, #8
 8003802:	2301      	movs	r3, #1
 8003804:	2123      	movs	r1, #35	; 0x23
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff feb4 	bl	8003574 <lsm303agr_write_reg>
 800380c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003822:	f107 020c 	add.w	r2, r7, #12
 8003826:	2306      	movs	r3, #6
 8003828:	2128      	movs	r1, #40	; 0x28
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fe8a 	bl	8003544 <lsm303agr_read_reg>
 8003830:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003832:	7b7b      	ldrb	r3, [r7, #13]
 8003834:	b21a      	sxth	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003840:	b29b      	uxth	r3, r3
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	b29a      	uxth	r2, r3
 8003846:	7b3b      	ldrb	r3, [r7, #12]
 8003848:	b29b      	uxth	r3, r3
 800384a:	4413      	add	r3, r2
 800384c:	b29b      	uxth	r3, r3
 800384e:	b21a      	sxth	r2, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003854:	7bfa      	ldrb	r2, [r7, #15]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	3302      	adds	r3, #2
 800385a:	b212      	sxth	r2, r2
 800385c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	3302      	adds	r3, #2
 8003862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003866:	b29b      	uxth	r3, r3
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	b29a      	uxth	r2, r3
 800386c:	7bbb      	ldrb	r3, [r7, #14]
 800386e:	b29b      	uxth	r3, r3
 8003870:	4413      	add	r3, r2
 8003872:	b29a      	uxth	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	3302      	adds	r3, #2
 8003878:	b212      	sxth	r2, r2
 800387a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800387c:	7c7a      	ldrb	r2, [r7, #17]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	3304      	adds	r3, #4
 8003882:	b212      	sxth	r2, r2
 8003884:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	3304      	adds	r3, #4
 800388a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800388e:	b29b      	uxth	r3, r3
 8003890:	021b      	lsls	r3, r3, #8
 8003892:	b29a      	uxth	r2, r3
 8003894:	7c3b      	ldrb	r3, [r7, #16]
 8003896:	b29b      	uxth	r3, r3
 8003898:	4413      	add	r3, r2
 800389a:	b29a      	uxth	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	3304      	adds	r3, #4
 80038a0:	b212      	sxth	r2, r2
 80038a2:	801a      	strh	r2, [r3, #0]
  return ret;
 80038a4:	697b      	ldr	r3, [r7, #20]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b084      	sub	sp, #16
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80038ba:	f107 0208 	add.w	r2, r7, #8
 80038be:	2301      	movs	r3, #1
 80038c0:	2160      	movs	r1, #96	; 0x60
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff fe3e 	bl	8003544 <lsm303agr_read_reg>
 80038c8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10f      	bne.n	80038f0 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	7a3b      	ldrb	r3, [r7, #8]
 80038da:	f362 0301 	bfi	r3, r2, #0, #2
 80038de:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80038e0:	f107 0208 	add.w	r2, r7, #8
 80038e4:	2301      	movs	r3, #1
 80038e6:	2160      	movs	r1, #96	; 0x60
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fe43 	bl	8003574 <lsm303agr_write_reg>
 80038ee:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80038f0:	68fb      	ldr	r3, [r7, #12]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003906:	f107 0208 	add.w	r2, r7, #8
 800390a:	2301      	movs	r3, #1
 800390c:	2160      	movs	r1, #96	; 0x60
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fe18 	bl	8003544 <lsm303agr_read_reg>
 8003914:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	b2da      	uxtb	r2, r3
 8003924:	7a3b      	ldrb	r3, [r7, #8]
 8003926:	f362 0383 	bfi	r3, r2, #2, #2
 800392a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800392c:	f107 0208 	add.w	r2, r7, #8
 8003930:	2301      	movs	r3, #1
 8003932:	2160      	movs	r1, #96	; 0x60
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fe1d 	bl	8003574 <lsm303agr_write_reg>
 800393a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 800393c:	68fb      	ldr	r3, [r7, #12]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003952:	f107 0208 	add.w	r2, r7, #8
 8003956:	2301      	movs	r3, #1
 8003958:	2160      	movs	r1, #96	; 0x60
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fdf2 	bl	8003544 <lsm303agr_read_reg>
 8003960:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003962:	7a3b      	ldrb	r3, [r7, #8]
 8003964:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b03      	cmp	r3, #3
 800396c:	d81a      	bhi.n	80039a4 <lsm303agr_mag_data_rate_get+0x5c>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <lsm303agr_mag_data_rate_get+0x2c>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	08003985 	.word	0x08003985
 8003978:	0800398d 	.word	0x0800398d
 800397c:	08003995 	.word	0x08003995
 8003980:	0800399d 	.word	0x0800399d
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
      break;
 800398a:	e00f      	b.n	80039ac <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
      break;
 8003992:	e00b      	b.n	80039ac <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e007      	b.n	80039ac <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2203      	movs	r2, #3
 80039a0:	701a      	strb	r2, [r3, #0]
      break;
 80039a2:	e003      	b.n	80039ac <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
      break;
 80039aa:	bf00      	nop
  }

  return ret;
 80039ac:	68fb      	ldr	r3, [r7, #12]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop

080039b8 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80039c4:	f107 0208 	add.w	r2, r7, #8
 80039c8:	2301      	movs	r3, #1
 80039ca:	2162      	movs	r1, #98	; 0x62
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fdb9 	bl	8003544 <lsm303agr_read_reg>
 80039d2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	7a3b      	ldrb	r3, [r7, #8]
 80039e4:	f362 1304 	bfi	r3, r2, #4, #1
 80039e8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80039ea:	f107 0208 	add.w	r2, r7, #8
 80039ee:	2301      	movs	r3, #1
 80039f0:	2162      	movs	r1, #98	; 0x62
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fdbe 	bl	8003574 <lsm303agr_write_reg>
 80039f8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80039fa:	68fb      	ldr	r3, [r7, #12]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003a0e:	f107 020c 	add.w	r2, r7, #12
 8003a12:	2306      	movs	r3, #6
 8003a14:	2168      	movs	r1, #104	; 0x68
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fd94 	bl	8003544 <lsm303agr_read_reg>
 8003a1c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003a1e:	7b7b      	ldrb	r3, [r7, #13]
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	7b3b      	ldrb	r3, [r7, #12]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	3302      	adds	r3, #2
 8003a46:	b212      	sxth	r2, r2
 8003a48:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	3302      	adds	r3, #2
 8003a64:	b212      	sxth	r2, r2
 8003a66:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a68:	7c7a      	ldrb	r2, [r7, #17]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	b212      	sxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	3304      	adds	r3, #4
 8003a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	7c3b      	ldrb	r3, [r7, #16]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	b212      	sxth	r2, r2
 8003a8e:	801a      	strh	r2, [r3, #0]
  return ret;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	210f      	movs	r1, #15
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fd4a 	bl	8003544 <lsm303agr_read_reg>
 8003ab0:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	214f      	movs	r1, #79	; 0x4f
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fd39 	bl	8003544 <lsm303agr_read_reg>
 8003ad2:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b084      	sub	sp, #16
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003aea:	f107 0208 	add.w	r2, r7, #8
 8003aee:	2301      	movs	r3, #1
 8003af0:	2162      	movs	r1, #98	; 0x62
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fd26 	bl	8003544 <lsm303agr_read_reg>
 8003af8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	7a3b      	ldrb	r3, [r7, #8]
 8003b0a:	f362 0341 	bfi	r3, r2, #1, #1
 8003b0e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b10:	f107 0208 	add.w	r2, r7, #8
 8003b14:	2301      	movs	r3, #1
 8003b16:	2162      	movs	r1, #98	; 0x62
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fd2b 	bl	8003574 <lsm303agr_write_reg>
 8003b1e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003b36:	f107 0208 	add.w	r2, r7, #8
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	212e      	movs	r1, #46	; 0x2e
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fd00 	bl	8003544 <lsm303agr_read_reg>
 8003b44:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10f      	bne.n	8003b6c <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	7a3b      	ldrb	r3, [r7, #8]
 8003b56:	f362 1387 	bfi	r3, r2, #6, #2
 8003b5a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003b5c:	f107 0208 	add.w	r2, r7, #8
 8003b60:	2301      	movs	r3, #1
 8003b62:	212e      	movs	r1, #46	; 0x2e
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fd05 	bl	8003574 <lsm303agr_write_reg>
 8003b6a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b82:	f107 0208 	add.w	r2, r7, #8
 8003b86:	2301      	movs	r3, #1
 8003b88:	2162      	movs	r1, #98	; 0x62
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fcda 	bl	8003544 <lsm303agr_read_reg>
 8003b90:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	7a3b      	ldrb	r3, [r7, #8]
 8003ba2:	f362 1345 	bfi	r3, r2, #5, #1
 8003ba6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ba8:	f107 0208 	add.w	r2, r7, #8
 8003bac:	2301      	movs	r3, #1
 8003bae:	2162      	movs	r1, #98	; 0x62
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fcdf 	bl	8003574 <lsm303agr_write_reg>
 8003bb6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e04d      	b.n	8003c7c <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	7b1a      	ldrb	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699a      	ldr	r2, [r3, #24]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1b      	ldr	r2, [pc, #108]	; (8003c88 <LSM6DSL_RegisterBusIO+0xc4>)
 8003c1c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <LSM6DSL_RegisterBusIO+0xc8>)
 8003c22:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e020      	b.n	8003c7c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4798      	blx	r3
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003c46:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e016      	b.n	8003c7c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d112      	bne.n	8003c7c <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10d      	bne.n	8003c7c <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003c60:	230c      	movs	r3, #12
 8003c62:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003c64:	7afb      	ldrb	r3, [r7, #11]
 8003c66:	461a      	mov	r2, r3
 8003c68:	2112      	movs	r1, #18
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fd2d 	bl	80046ca <LSM6DSL_Write_Reg>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	08004b39 	.word	0x08004b39
 8003c8c:	08004b6f 	.word	0x08004b6f

08003c90 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	331c      	adds	r3, #28
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 fa59 	bl	8005156 <lsm6dsl_auto_increment_set>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e054      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	331c      	adds	r3, #28
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 f980 	bl	8004fbc <lsm6dsl_block_data_update_set>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc6:	e048      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	331c      	adds	r3, #28
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fa67 	bl	80051a2 <lsm6dsl_fifo_mode_set>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
 8003cde:	e03c      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	331c      	adds	r3, #28
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 ffe6 	bl	8004cc0 <lsm6dsl_xl_data_rate_set>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e02c      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	331c      	adds	r3, #28
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 ff7c 	bl	8004c04 <lsm6dsl_xl_full_scale_set>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
 8003d16:	e020      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	331c      	adds	r3, #28
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f8c0 	bl	8004eac <lsm6dsl_gy_data_rate_set>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	e010      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	331c      	adds	r3, #28
 8003d3c:	2106      	movs	r1, #6
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 f84c 	bl	8004ddc <lsm6dsl_gy_full_scale_set>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	e004      	b.n	8003d5a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f888 	bl	8003e80 <LSM6DSL_ACC_Disable>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7a:	e015      	b.n	8003da8 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa9a 	bl	80042b6 <LSM6DSL_GYRO_Disable>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e00c      	b.n	8003da8 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	331c      	adds	r3, #28
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f9b7 	bl	8005134 <lsm6dsl_device_id_get>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd0:	e000      	b.n	8003dd4 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2200      	movs	r2, #0
 8003df6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e04:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <LSM6DSL_GetCapabilities+0x58>)
 8003e16:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	4a06      	ldr	r2, [pc, #24]	; (8003e34 <LSM6DSL_GetCapabilities+0x58>)
 8003e1c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	45d02000 	.word	0x45d02000

08003e38 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e014      	b.n	8003e78 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f103 021c 	add.w	r2, r3, #28
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 ff2f 	bl	8004cc0 <lsm6dsl_xl_data_rate_set>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003e68:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6c:	e004      	b.n	8003e78 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	e01f      	b.n	8003ed6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f103 021c 	add.w	r2, r3, #28
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	332b      	adds	r3, #43	; 0x2b
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 ff32 	bl	8004d0c <lsm6dsl_xl_data_rate_get>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8003eae:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb2:	e010      	b.n	8003ed6 <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	331c      	adds	r3, #28
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ff00 	bl	8004cc0 <lsm6dsl_xl_data_rate_set>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e004      	b.n	8003ed6 <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	331c      	adds	r3, #28
 8003ef2:	f107 020b 	add.w	r2, r7, #11
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fea9 	bl	8004c50 <lsm6dsl_xl_full_scale_get>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295
 8003f08:	e023      	b.n	8003f52 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d81b      	bhi.n	8003f48 <LSM6DSL_ACC_GetSensitivity+0x68>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f31 	.word	0x08003f31
 8003f24:	08003f39 	.word	0x08003f39
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4a0c      	ldr	r2, [pc, #48]	; (8003f5c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8003f2c:	601a      	str	r2, [r3, #0]
      break;
 8003f2e:	e00f      	b.n	8003f50 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	4a0b      	ldr	r2, [pc, #44]	; (8003f60 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8003f34:	601a      	str	r2, [r3, #0]
      break;
 8003f36:	e00b      	b.n	8003f50 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8003f3c:	601a      	str	r2, [r3, #0]
      break;
 8003f3e:	e007      	b.n	8003f50 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8003f44:	601a      	str	r2, [r3, #0]
      break;
 8003f46:	e003      	b.n	8003f50 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8003f48:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4c:	60fb      	str	r3, [r7, #12]
      break;
 8003f4e:	bf00      	nop
  }

  return ret;
 8003f50:	68fb      	ldr	r3, [r7, #12]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	3d79db23 	.word	0x3d79db23
 8003f60:	3df9db23 	.word	0x3df9db23
 8003f64:	3e79db23 	.word	0x3e79db23
 8003f68:	3ef9db23 	.word	0x3ef9db23

08003f6c <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	331c      	adds	r3, #28
 8003f7e:	f107 020b 	add.w	r2, r7, #11
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fec1 	bl	8004d0c <lsm6dsl_xl_data_rate_get>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8003f90:	f04f 33ff 	mov.w	r3, #4294967295
 8003f94:	e054      	b.n	8004040 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8003f96:	7afb      	ldrb	r3, [r7, #11]
 8003f98:	2b0b      	cmp	r3, #11
 8003f9a:	d84c      	bhi.n	8004036 <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08003fe7 	.word	0x08003fe7
 8003fac:	08003fef 	.word	0x08003fef
 8003fb0:	08003ff7 	.word	0x08003ff7
 8003fb4:	08003fff 	.word	0x08003fff
 8003fb8:	08004007 	.word	0x08004007
 8003fbc:	0800400f 	.word	0x0800400f
 8003fc0:	08004017 	.word	0x08004017
 8003fc4:	0800401f 	.word	0x0800401f
 8003fc8:	08004027 	.word	0x08004027
 8003fcc:	0800402f 	.word	0x0800402f
 8003fd0:	08003fdf 	.word	0x08003fdf
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
      break;
 8003fdc:	e02f      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8003fe2:	601a      	str	r2, [r3, #0]
      break;
 8003fe4:	e02b      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8003fea:	601a      	str	r2, [r3, #0]
      break;
 8003fec:	e027      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8003ff2:	601a      	str	r2, [r3, #0]
      break;
 8003ff4:	e023      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	4a16      	ldr	r2, [pc, #88]	; (8004054 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8003ffa:	601a      	str	r2, [r3, #0]
      break;
 8003ffc:	e01f      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004002:	601a      	str	r2, [r3, #0]
      break;
 8004004:	e01b      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800400a:	601a      	str	r2, [r3, #0]
      break;
 800400c:	e017      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	4a13      	ldr	r2, [pc, #76]	; (8004060 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004012:	601a      	str	r2, [r3, #0]
      break;
 8004014:	e013      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	4a12      	ldr	r2, [pc, #72]	; (8004064 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800401a:	601a      	str	r2, [r3, #0]
      break;
 800401c:	e00f      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004022:	601a      	str	r2, [r3, #0]
      break;
 8004024:	e00b      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	4a10      	ldr	r2, [pc, #64]	; (800406c <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800402a:	601a      	str	r2, [r3, #0]
      break;
 800402c:	e007      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4a0f      	ldr	r2, [pc, #60]	; (8004070 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004032:	601a      	str	r2, [r3, #0]
      break;
 8004034:	e003      	b.n	800403e <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	60fb      	str	r3, [r7, #12]
      break;
 800403c:	bf00      	nop
  }

  return ret;
 800403e:	68fb      	ldr	r3, [r7, #12]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	3fcccccd 	.word	0x3fcccccd
 800404c:	41480000 	.word	0x41480000
 8004050:	41d00000 	.word	0x41d00000
 8004054:	42500000 	.word	0x42500000
 8004058:	42d00000 	.word	0x42d00000
 800405c:	43500000 	.word	0x43500000
 8004060:	43d00000 	.word	0x43d00000
 8004064:	44504000 	.word	0x44504000
 8004068:	44cf8000 	.word	0x44cf8000
 800406c:	45502000 	.word	0x45502000
 8004070:	45d02000 	.word	0x45d02000

08004074 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004086:	2b01      	cmp	r3, #1
 8004088:	d106      	bne.n	8004098 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800408a:	ed97 0a00 	vldr	s0, [r7]
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fb36 	bl	8004700 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004094:	4603      	mov	r3, r0
 8004096:	e005      	b.n	80040a4 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004098:	ed97 0a00 	vldr	s0, [r7]
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fbbb 	bl	8004818 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80040a2:	4603      	mov	r3, r0
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	331c      	adds	r3, #28
 80040be:	f107 020b 	add.w	r2, r7, #11
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fdc3 	bl	8004c50 <lsm6dsl_xl_full_scale_get>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80040d0:	f04f 33ff 	mov.w	r3, #4294967295
 80040d4:	e023      	b.n	800411e <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80040d6:	7afb      	ldrb	r3, [r7, #11]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d81b      	bhi.n	8004114 <LSM6DSL_ACC_GetFullScale+0x68>
 80040dc:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <LSM6DSL_ACC_GetFullScale+0x38>)
 80040de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e2:	bf00      	nop
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004105 	.word	0x08004105
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2202      	movs	r2, #2
 80040f8:	601a      	str	r2, [r3, #0]
      break;
 80040fa:	e00f      	b.n	800411c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2204      	movs	r2, #4
 8004100:	601a      	str	r2, [r3, #0]
      break;
 8004102:	e00b      	b.n	800411c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2208      	movs	r2, #8
 8004108:	601a      	str	r2, [r3, #0]
      break;
 800410a:	e007      	b.n	800411c <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2210      	movs	r2, #16
 8004110:	601a      	str	r2, [r3, #0]
      break;
 8004112:	e003      	b.n	800411c <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004114:	f04f 33ff 	mov.w	r3, #4294967295
 8004118:	60fb      	str	r3, [r7, #12]
      break;
 800411a:	bf00      	nop
  }

  return ret;
 800411c:	68fb      	ldr	r3, [r7, #12]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop

08004128 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	dd0b      	ble.n	8004150 <LSM6DSL_ACC_SetFullScale+0x28>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b04      	cmp	r3, #4
 800413c:	dd06      	ble.n	800414c <LSM6DSL_ACC_SetFullScale+0x24>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b08      	cmp	r3, #8
 8004142:	dc01      	bgt.n	8004148 <LSM6DSL_ACC_SetFullScale+0x20>
 8004144:	2303      	movs	r3, #3
 8004146:	e004      	b.n	8004152 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004148:	2301      	movs	r3, #1
 800414a:	e002      	b.n	8004152 <LSM6DSL_ACC_SetFullScale+0x2a>
 800414c:	2302      	movs	r3, #2
 800414e:	e000      	b.n	8004152 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004150:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004152:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	331c      	adds	r3, #28
 8004158:	7bfa      	ldrb	r2, [r7, #15]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd51 	bl	8004c04 <lsm6dsl_xl_full_scale_set>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8004168:	f04f 33ff 	mov.w	r3, #4294967295
 800416c:	e000      	b.n	8004170 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	331c      	adds	r3, #28
 8004186:	f107 0208 	add.w	r2, r7, #8
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 ff86 	bl	800509e <lsm6dsl_acceleration_raw_get>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004198:	f04f 33ff 	mov.w	r3, #4294967295
 800419c:	e00c      	b.n	80041b8 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800419e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	331c      	adds	r3, #28
 80041d4:	f107 0210 	add.w	r2, r7, #16
 80041d8:	4611      	mov	r1, r2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 ff5f 	bl	800509e <lsm6dsl_acceleration_raw_get>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e03c      	b.n	8004266 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7ff fe74 	bl	8003ee0 <LSM6DSL_ACC_GetSensitivity>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	e030      	b.n	8004266 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004204:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004208:	ee07 3a90 	vmov	s15, r3
 800420c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004210:	edd7 7a03 	vldr	s15, [r7, #12]
 8004214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800421c:	ee17 2a90 	vmov	r2, s15
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004224:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004230:	edd7 7a03 	vldr	s15, [r7, #12]
 8004234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800423c:	ee17 2a90 	vmov	r2, s15
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004244:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004250:	edd7 7a03 	vldr	s15, [r7, #12]
 8004254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800425c:	ee17 2a90 	vmov	r2, s15
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e014      	b.n	80042ae <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f103 021c 	add.w	r2, r3, #28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f000 fe0a 	bl	8004eac <lsm6dsl_gy_data_rate_set>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	e004      	b.n	80042ae <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e01f      	b.n	800430c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f103 021c 	add.w	r2, r3, #28
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	332c      	adds	r3, #44	; 0x2c
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f000 fe0d 	bl	8004ef8 <lsm6dsl_gy_data_rate_get>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80042e4:	f04f 33ff 	mov.w	r3, #4294967295
 80042e8:	e010      	b.n	800430c <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	331c      	adds	r3, #28
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fddb 	bl	8004eac <lsm6dsl_gy_data_rate_set>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004300:	e004      	b.n	800430c <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	331c      	adds	r3, #28
 8004326:	f107 020b 	add.w	r2, r7, #11
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fd7b 	bl	8004e28 <lsm6dsl_gy_full_scale_get>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004338:	f04f 33ff 	mov.w	r3, #4294967295
 800433c:	e02d      	b.n	800439a <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	2b06      	cmp	r3, #6
 8004342:	d825      	bhi.n	8004390 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	08004371 	.word	0x08004371
 8004350:	08004369 	.word	0x08004369
 8004354:	08004379 	.word	0x08004379
 8004358:	08004391 	.word	0x08004391
 800435c:	08004381 	.word	0x08004381
 8004360:	08004391 	.word	0x08004391
 8004364:	08004389 	.word	0x08004389
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 800436c:	601a      	str	r2, [r3, #0]
      break;
 800436e:	e013      	b.n	8004398 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004374:	601a      	str	r2, [r3, #0]
      break;
 8004376:	e00f      	b.n	8004398 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	4a0c      	ldr	r2, [pc, #48]	; (80043ac <LSM6DSL_GYRO_GetSensitivity+0x98>)
 800437c:	601a      	str	r2, [r3, #0]
      break;
 800437e:	e00b      	b.n	8004398 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4a0b      	ldr	r2, [pc, #44]	; (80043b0 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004384:	601a      	str	r2, [r3, #0]
      break;
 8004386:	e007      	b.n	8004398 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 800438c:	601a      	str	r2, [r3, #0]
      break;
 800438e:	e003      	b.n	8004398 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	60fb      	str	r3, [r7, #12]
      break;
 8004396:	bf00      	nop
  }

  return ret;
 8004398:	68fb      	ldr	r3, [r7, #12]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	408c0000 	.word	0x408c0000
 80043a8:	410c0000 	.word	0x410c0000
 80043ac:	418c0000 	.word	0x418c0000
 80043b0:	420c0000 	.word	0x420c0000
 80043b4:	428c0000 	.word	0x428c0000

080043b8 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	331c      	adds	r3, #28
 80043ca:	f107 020b 	add.w	r2, r7, #11
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fd91 	bl	8004ef8 <lsm6dsl_gy_data_rate_get>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	e04e      	b.n	8004480 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	2b0a      	cmp	r3, #10
 80043e6:	d846      	bhi.n	8004476 <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	08004427 	.word	0x08004427
 80043f8:	0800442f 	.word	0x0800442f
 80043fc:	08004437 	.word	0x08004437
 8004400:	0800443f 	.word	0x0800443f
 8004404:	08004447 	.word	0x08004447
 8004408:	0800444f 	.word	0x0800444f
 800440c:	08004457 	.word	0x08004457
 8004410:	0800445f 	.word	0x0800445f
 8004414:	08004467 	.word	0x08004467
 8004418:	0800446f 	.word	0x0800446f
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
      break;
 8004424:	e02b      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800442a:	601a      	str	r2, [r3, #0]
      break;
 800442c:	e027      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	4a16      	ldr	r2, [pc, #88]	; (800448c <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004432:	601a      	str	r2, [r3, #0]
      break;
 8004434:	e023      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	4a15      	ldr	r2, [pc, #84]	; (8004490 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800443a:	601a      	str	r2, [r3, #0]
      break;
 800443c:	e01f      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	4a14      	ldr	r2, [pc, #80]	; (8004494 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004442:	601a      	str	r2, [r3, #0]
      break;
 8004444:	e01b      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4a13      	ldr	r2, [pc, #76]	; (8004498 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800444a:	601a      	str	r2, [r3, #0]
      break;
 800444c:	e017      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	4a12      	ldr	r2, [pc, #72]	; (800449c <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004452:	601a      	str	r2, [r3, #0]
      break;
 8004454:	e013      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800445a:	601a      	str	r2, [r3, #0]
      break;
 800445c:	e00f      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004462:	601a      	str	r2, [r3, #0]
      break;
 8004464:	e00b      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	4a0f      	ldr	r2, [pc, #60]	; (80044a8 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 800446a:	601a      	str	r2, [r3, #0]
      break;
 800446c:	e007      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4a0e      	ldr	r2, [pc, #56]	; (80044ac <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004472:	601a      	str	r2, [r3, #0]
      break;
 8004474:	e003      	b.n	800447e <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004476:	f04f 33ff 	mov.w	r3, #4294967295
 800447a:	60fb      	str	r3, [r7, #12]
      break;
 800447c:	bf00      	nop
  }

  return ret;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	41480000 	.word	0x41480000
 800448c:	41d00000 	.word	0x41d00000
 8004490:	42500000 	.word	0x42500000
 8004494:	42d00000 	.word	0x42d00000
 8004498:	43500000 	.word	0x43500000
 800449c:	43d00000 	.word	0x43d00000
 80044a0:	44504000 	.word	0x44504000
 80044a4:	44cf8000 	.word	0x44cf8000
 80044a8:	45502000 	.word	0x45502000
 80044ac:	45d02000 	.word	0x45d02000

080044b0 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d106      	bne.n	80044d4 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80044c6:	ed97 0a00 	vldr	s0, [r7]
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa26 	bl	800491c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 80044d0:	4603      	mov	r3, r0
 80044d2:	e005      	b.n	80044e0 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80044d4:	ed97 0a00 	vldr	s0, [r7]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 faab 	bl	8004a34 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 80044de:	4603      	mov	r3, r0
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	331c      	adds	r3, #28
 80044fa:	f107 020b 	add.w	r2, r7, #11
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fc91 	bl	8004e28 <lsm6dsl_gy_full_scale_get>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	e030      	b.n	8004574 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004512:	7afb      	ldrb	r3, [r7, #11]
 8004514:	2b06      	cmp	r3, #6
 8004516:	d828      	bhi.n	800456a <LSM6DSL_GYRO_GetFullScale+0x82>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <LSM6DSL_GYRO_GetFullScale+0x38>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004545 	.word	0x08004545
 8004524:	0800453d 	.word	0x0800453d
 8004528:	0800454d 	.word	0x0800454d
 800452c:	0800456b 	.word	0x0800456b
 8004530:	08004557 	.word	0x08004557
 8004534:	0800456b 	.word	0x0800456b
 8004538:	08004561 	.word	0x08004561
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	227d      	movs	r2, #125	; 0x7d
 8004540:	601a      	str	r2, [r3, #0]
      break;
 8004542:	e016      	b.n	8004572 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	22fa      	movs	r2, #250	; 0xfa
 8004548:	601a      	str	r2, [r3, #0]
      break;
 800454a:	e012      	b.n	8004572 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004552:	601a      	str	r2, [r3, #0]
      break;
 8004554:	e00d      	b.n	8004572 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800455c:	601a      	str	r2, [r3, #0]
      break;
 800455e:	e008      	b.n	8004572 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004566:	601a      	str	r2, [r3, #0]
      break;
 8004568:	e003      	b.n	8004572 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	60fb      	str	r3, [r7, #12]
      break;
 8004570:	bf00      	nop
  }

  return ret;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b7d      	cmp	r3, #125	; 0x7d
 800458a:	dd12      	ble.n	80045b2 <LSM6DSL_GYRO_SetFullScale+0x36>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	2bfa      	cmp	r3, #250	; 0xfa
 8004590:	dd0d      	ble.n	80045ae <LSM6DSL_GYRO_SetFullScale+0x32>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004598:	dd07      	ble.n	80045aa <LSM6DSL_GYRO_SetFullScale+0x2e>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045a0:	dc01      	bgt.n	80045a6 <LSM6DSL_GYRO_SetFullScale+0x2a>
 80045a2:	2304      	movs	r3, #4
 80045a4:	e006      	b.n	80045b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045a6:	2306      	movs	r3, #6
 80045a8:	e004      	b.n	80045b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e002      	b.n	80045b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <LSM6DSL_GYRO_SetFullScale+0x38>
 80045b2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 80045b4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	331c      	adds	r3, #28
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fc0c 	bl	8004ddc <lsm6dsl_gy_full_scale_set>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	e000      	b.n	80045d2 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	331c      	adds	r3, #28
 80045e8:	f107 0208 	add.w	r2, r7, #8
 80045ec:	4611      	mov	r1, r2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fd0a 	bl	8005008 <lsm6dsl_angular_rate_raw_get>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	e00c      	b.n	800461a <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004600:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004608:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004610:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	331c      	adds	r3, #28
 8004630:	f107 0210 	add.w	r2, r7, #16
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fce6 	bl	8005008 <lsm6dsl_angular_rate_raw_get>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	e03c      	b.n	80046c2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff fe60 	bl	8004314 <LSM6DSL_GYRO_GetSensitivity>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	e030      	b.n	80046c2 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004660:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800466c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004678:	ee17 2a90 	vmov	r2, s15
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800468c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004698:	ee17 2a90 	vmov	r2, s15
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80046a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80046b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046b8:	ee17 2a90 	vmov	r2, s15
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	460b      	mov	r3, r1
 80046d4:	70fb      	strb	r3, [r7, #3]
 80046d6:	4613      	mov	r3, r2
 80046d8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f103 001c 	add.w	r0, r3, #28
 80046e0:	1cba      	adds	r2, r7, #2
 80046e2:	78f9      	ldrb	r1, [r7, #3]
 80046e4:	2301      	movs	r3, #1
 80046e6:	f000 fa75 	bl	8004bd4 <lsm6dsl_write_reg>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80046f0:	f04f 33ff 	mov.w	r3, #4294967295
 80046f4:	e000      	b.n	80046f8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800470c:	edd7 7a00 	vldr	s15, [r7]
 8004710:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	d801      	bhi.n	8004722 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 800471e:	2301      	movs	r3, #1
 8004720:	e058      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004722:	edd7 7a00 	vldr	s15, [r7]
 8004726:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800472a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004732:	d801      	bhi.n	8004738 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004734:	2302      	movs	r3, #2
 8004736:	e04d      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004738:	edd7 7a00 	vldr	s15, [r7]
 800473c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80047fc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004748:	d801      	bhi.n	800474e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800474a:	2303      	movs	r3, #3
 800474c:	e042      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800474e:	edd7 7a00 	vldr	s15, [r7]
 8004752:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004800 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	d801      	bhi.n	8004764 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004760:	2304      	movs	r3, #4
 8004762:	e037      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004764:	edd7 7a00 	vldr	s15, [r7]
 8004768:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004804 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 800476c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004774:	d801      	bhi.n	800477a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004776:	2305      	movs	r3, #5
 8004778:	e02c      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800477a:	edd7 7a00 	vldr	s15, [r7]
 800477e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004808 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478a:	d801      	bhi.n	8004790 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 800478c:	2306      	movs	r3, #6
 800478e:	e021      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004790:	edd7 7a00 	vldr	s15, [r7]
 8004794:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800480c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800479c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a0:	d801      	bhi.n	80047a6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80047a2:	2307      	movs	r3, #7
 80047a4:	e016      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047a6:	edd7 7a00 	vldr	s15, [r7]
 80047aa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004810 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 80047ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b6:	d801      	bhi.n	80047bc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80047b8:	2308      	movs	r3, #8
 80047ba:	e00b      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047bc:	edd7 7a00 	vldr	s15, [r7]
 80047c0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004814 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 80047c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d801      	bhi.n	80047d2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80047ce:	2309      	movs	r3, #9
 80047d0:	e000      	b.n	80047d4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80047d2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80047d4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	331c      	adds	r3, #28
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fa6e 	bl	8004cc0 <lsm6dsl_xl_data_rate_set>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 80047ea:	f04f 33ff 	mov.w	r3, #4294967295
 80047ee:	e000      	b.n	80047f2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	42500000 	.word	0x42500000
 8004800:	42d00000 	.word	0x42d00000
 8004804:	43500000 	.word	0x43500000
 8004808:	43d00000 	.word	0x43d00000
 800480c:	44504000 	.word	0x44504000
 8004810:	44cf8000 	.word	0x44cf8000
 8004814:	45502000 	.word	0x45502000

08004818 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004824:	edd7 7a00 	vldr	s15, [r7]
 8004828:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800482c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004834:	d801      	bhi.n	800483a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004836:	2301      	movs	r3, #1
 8004838:	e058      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800483a:	edd7 7a00 	vldr	s15, [r7]
 800483e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	d801      	bhi.n	8004850 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 800484c:	2302      	movs	r3, #2
 800484e:	e04d      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004850:	edd7 7a00 	vldr	s15, [r7]
 8004854:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004900 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	d801      	bhi.n	8004866 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004862:	2303      	movs	r3, #3
 8004864:	e042      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004866:	edd7 7a00 	vldr	s15, [r7]
 800486a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004904 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 800486e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004876:	d801      	bhi.n	800487c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004878:	2304      	movs	r3, #4
 800487a:	e037      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800487c:	edd7 7a00 	vldr	s15, [r7]
 8004880:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004908 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488c:	d801      	bhi.n	8004892 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800488e:	2305      	movs	r3, #5
 8004890:	e02c      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004892:	edd7 7a00 	vldr	s15, [r7]
 8004896:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800490c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800489a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	d801      	bhi.n	80048a8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80048a4:	2306      	movs	r3, #6
 80048a6:	e021      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048a8:	edd7 7a00 	vldr	s15, [r7]
 80048ac:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004910 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80048b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	d801      	bhi.n	80048be <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80048ba:	2307      	movs	r3, #7
 80048bc:	e016      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048be:	edd7 7a00 	vldr	s15, [r7]
 80048c2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004914 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80048c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	d801      	bhi.n	80048d4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80048d0:	2308      	movs	r3, #8
 80048d2:	e00b      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048d4:	edd7 7a00 	vldr	s15, [r7]
 80048d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004918 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 80048dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e4:	d801      	bhi.n	80048ea <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80048e6:	2309      	movs	r3, #9
 80048e8:	e000      	b.n	80048ec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80048ea:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	42500000 	.word	0x42500000
 8004904:	42d00000 	.word	0x42d00000
 8004908:	43500000 	.word	0x43500000
 800490c:	43d00000 	.word	0x43d00000
 8004910:	44504000 	.word	0x44504000
 8004914:	44cf8000 	.word	0x44cf8000
 8004918:	45502000 	.word	0x45502000

0800491c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004928:	edd7 7a00 	vldr	s15, [r7]
 800492c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d801      	bhi.n	800493e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800493a:	2301      	movs	r3, #1
 800493c:	e058      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800493e:	edd7 7a00 	vldr	s15, [r7]
 8004942:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	d801      	bhi.n	8004954 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004950:	2302      	movs	r3, #2
 8004952:	e04d      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004954:	edd7 7a00 	vldr	s15, [r7]
 8004958:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004a18 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800495c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d801      	bhi.n	800496a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004966:	2303      	movs	r3, #3
 8004968:	e042      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800496a:	edd7 7a00 	vldr	s15, [r7]
 800496e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004a1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	d801      	bhi.n	8004980 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 800497c:	2304      	movs	r3, #4
 800497e:	e037      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004980:	edd7 7a00 	vldr	s15, [r7]
 8004984:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a20 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004990:	d801      	bhi.n	8004996 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004992:	2305      	movs	r3, #5
 8004994:	e02c      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004996:	edd7 7a00 	vldr	s15, [r7]
 800499a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004a24 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800499e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a6:	d801      	bhi.n	80049ac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80049a8:	2306      	movs	r3, #6
 80049aa:	e021      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049ac:	edd7 7a00 	vldr	s15, [r7]
 80049b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a28 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80049b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049bc:	d801      	bhi.n	80049c2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80049be:	2307      	movs	r3, #7
 80049c0:	e016      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049c2:	edd7 7a00 	vldr	s15, [r7]
 80049c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004a2c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80049ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	d801      	bhi.n	80049d8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80049d4:	2308      	movs	r3, #8
 80049d6:	e00b      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049d8:	edd7 7a00 	vldr	s15, [r7]
 80049dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004a30 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80049e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e8:	d801      	bhi.n	80049ee <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80049ea:	2309      	movs	r3, #9
 80049ec:	e000      	b.n	80049f0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80049ee:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 80049f0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	331c      	adds	r3, #28
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fa56 	bl	8004eac <lsm6dsl_gy_data_rate_set>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0a:	e000      	b.n	8004a0e <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	42500000 	.word	0x42500000
 8004a1c:	42d00000 	.word	0x42d00000
 8004a20:	43500000 	.word	0x43500000
 8004a24:	43d00000 	.word	0x43d00000
 8004a28:	44504000 	.word	0x44504000
 8004a2c:	44cf8000 	.word	0x44cf8000
 8004a30:	45502000 	.word	0x45502000

08004a34 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004a40:	edd7 7a00 	vldr	s15, [r7]
 8004a44:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	d801      	bhi.n	8004a56 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e058      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a56:	edd7 7a00 	vldr	s15, [r7]
 8004a5a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a66:	d801      	bhi.n	8004a6c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e04d      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a6c:	edd7 7a00 	vldr	s15, [r7]
 8004a70:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004b1c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7c:	d801      	bhi.n	8004a82 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e042      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a82:	edd7 7a00 	vldr	s15, [r7]
 8004a86:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004b20 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a92:	d801      	bhi.n	8004a98 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004a94:	2304      	movs	r3, #4
 8004a96:	e037      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004a98:	edd7 7a00 	vldr	s15, [r7]
 8004a9c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004b24 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aa8:	d801      	bhi.n	8004aae <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004aaa:	2305      	movs	r3, #5
 8004aac:	e02c      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004aae:	edd7 7a00 	vldr	s15, [r7]
 8004ab2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004b28 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004abe:	d801      	bhi.n	8004ac4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004ac0:	2306      	movs	r3, #6
 8004ac2:	e021      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ac4:	edd7 7a00 	vldr	s15, [r7]
 8004ac8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004b2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad4:	d801      	bhi.n	8004ada <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	e016      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ada:	edd7 7a00 	vldr	s15, [r7]
 8004ade:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b30 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d801      	bhi.n	8004af0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004aec:	2308      	movs	r3, #8
 8004aee:	e00b      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004af0:	edd7 7a00 	vldr	s15, [r7]
 8004af4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b34 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	d801      	bhi.n	8004b06 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004b02:	2309      	movs	r3, #9
 8004b04:	e000      	b.n	8004b08 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004b06:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	42500000 	.word	0x42500000
 8004b20:	42d00000 	.word	0x42d00000
 8004b24:	43500000 	.word	0x43500000
 8004b28:	43d00000 	.word	0x43d00000
 8004b2c:	44504000 	.word	0x44504000
 8004b30:	44cf8000 	.word	0x44cf8000
 8004b34:	45502000 	.word	0x45502000

08004b38 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	461a      	mov	r2, r3
 8004b44:	460b      	mov	r3, r1
 8004b46:	72fb      	strb	r3, [r7, #11]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	695c      	ldr	r4, [r3, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	7b1b      	ldrb	r3, [r3, #12]
 8004b58:	b298      	uxth	r0, r3
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	b299      	uxth	r1, r3
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	47a0      	blx	r4
 8004b64:	4603      	mov	r3, r0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd90      	pop	{r4, r7, pc}

08004b6e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b6e:	b590      	push	{r4, r7, lr}
 8004b70:	b087      	sub	sp, #28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	72fb      	strb	r3, [r7, #11]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	691c      	ldr	r4, [r3, #16]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	7b1b      	ldrb	r3, [r3, #12]
 8004b8e:	b298      	uxth	r0, r3
 8004b90:	7afb      	ldrb	r3, [r7, #11]
 8004b92:	b299      	uxth	r1, r3
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	47a0      	blx	r4
 8004b9a:	4603      	mov	r3, r0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd90      	pop	{r4, r7, pc}

08004ba4 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	72fb      	strb	r3, [r7, #11]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685c      	ldr	r4, [r3, #4]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6898      	ldr	r0, [r3, #8]
 8004bc0:	893b      	ldrh	r3, [r7, #8]
 8004bc2:	7af9      	ldrb	r1, [r7, #11]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	47a0      	blx	r4
 8004bc8:	6178      	str	r0, [r7, #20]
  return ret;
 8004bca:	697b      	ldr	r3, [r7, #20]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd90      	pop	{r4, r7, pc}

08004bd4 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	461a      	mov	r2, r3
 8004be0:	460b      	mov	r3, r1
 8004be2:	72fb      	strb	r3, [r7, #11]
 8004be4:	4613      	mov	r3, r2
 8004be6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681c      	ldr	r4, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6898      	ldr	r0, [r3, #8]
 8004bf0:	893b      	ldrh	r3, [r7, #8]
 8004bf2:	7af9      	ldrb	r1, [r7, #11]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	47a0      	blx	r4
 8004bf8:	6178      	str	r0, [r7, #20]
  return ret;
 8004bfa:	697b      	ldr	r3, [r7, #20]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd90      	pop	{r4, r7, pc}

08004c04 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c10:	f107 0208 	add.w	r2, r7, #8
 8004c14:	2301      	movs	r3, #1
 8004c16:	2110      	movs	r1, #16
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff ffc3 	bl	8004ba4 <lsm6dsl_read_reg>
 8004c1e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10f      	bne.n	8004c46 <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	7a3b      	ldrb	r3, [r7, #8]
 8004c30:	f362 0383 	bfi	r3, r2, #2, #2
 8004c34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c36:	f107 0208 	add.w	r2, r7, #8
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	2110      	movs	r1, #16
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff ffc8 	bl	8004bd4 <lsm6dsl_write_reg>
 8004c44:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004c46:	68fb      	ldr	r3, [r7, #12]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004c5a:	f107 0208 	add.w	r2, r7, #8
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2110      	movs	r1, #16
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ff9e 	bl	8004ba4 <lsm6dsl_read_reg>
 8004c68:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004c6a:	7a3b      	ldrb	r3, [r7, #8]
 8004c6c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d81a      	bhi.n	8004cac <lsm6dsl_xl_full_scale_get+0x5c>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <lsm6dsl_xl_full_scale_get+0x2c>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004c8d 	.word	0x08004c8d
 8004c80:	08004c95 	.word	0x08004c95
 8004c84:	08004c9d 	.word	0x08004c9d
 8004c88:	08004ca5 	.word	0x08004ca5
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
      break;
 8004c92:	e00f      	b.n	8004cb4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]
      break;
 8004c9a:	e00b      	b.n	8004cb4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
      break;
 8004ca2:	e007      	b.n	8004cb4 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	701a      	strb	r2, [r3, #0]
      break;
 8004caa:	e003      	b.n	8004cb4 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	701a      	strb	r2, [r3, #0]
      break;
 8004cb2:	bf00      	nop
  }

  return ret;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop

08004cc0 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004ccc:	f107 0208 	add.w	r2, r7, #8
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff65 	bl	8004ba4 <lsm6dsl_read_reg>
 8004cda:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10f      	bne.n	8004d02 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	7a3b      	ldrb	r3, [r7, #8]
 8004cec:	f362 1307 	bfi	r3, r2, #4, #4
 8004cf0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004cf2:	f107 0208 	add.w	r2, r7, #8
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	2110      	movs	r1, #16
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ff6a 	bl	8004bd4 <lsm6dsl_write_reg>
 8004d00:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004d16:	f107 0208 	add.w	r2, r7, #8
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	2110      	movs	r1, #16
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff ff40 	bl	8004ba4 <lsm6dsl_read_reg>
 8004d24:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004d26:	7a3b      	ldrb	r3, [r7, #8]
 8004d28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b0b      	cmp	r3, #11
 8004d30:	d84a      	bhi.n	8004dc8 <lsm6dsl_xl_data_rate_get+0xbc>
 8004d32:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <lsm6dsl_xl_data_rate_get+0x2c>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d71 	.word	0x08004d71
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d81 	.word	0x08004d81
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d91 	.word	0x08004d91
 8004d50:	08004d99 	.word	0x08004d99
 8004d54:	08004da1 	.word	0x08004da1
 8004d58:	08004da9 	.word	0x08004da9
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004dc1 	.word	0x08004dc1
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
      break;
 8004d6e:	e02f      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	e02b      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	701a      	strb	r2, [r3, #0]
      break;
 8004d7e:	e027      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2203      	movs	r2, #3
 8004d84:	701a      	strb	r2, [r3, #0]
      break;
 8004d86:	e023      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	701a      	strb	r2, [r3, #0]
      break;
 8004d8e:	e01f      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2205      	movs	r2, #5
 8004d94:	701a      	strb	r2, [r3, #0]
      break;
 8004d96:	e01b      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2206      	movs	r2, #6
 8004d9c:	701a      	strb	r2, [r3, #0]
      break;
 8004d9e:	e017      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2207      	movs	r2, #7
 8004da4:	701a      	strb	r2, [r3, #0]
      break;
 8004da6:	e013      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2208      	movs	r2, #8
 8004dac:	701a      	strb	r2, [r3, #0]
      break;
 8004dae:	e00f      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2209      	movs	r2, #9
 8004db4:	701a      	strb	r2, [r3, #0]
      break;
 8004db6:	e00b      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	220a      	movs	r2, #10
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e007      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	220b      	movs	r2, #11
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e003      	b.n	8004dd0 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	220c      	movs	r2, #12
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	bf00      	nop
  }

  return ret;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop

08004ddc <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004de8:	f107 0208 	add.w	r2, r7, #8
 8004dec:	2301      	movs	r3, #1
 8004dee:	2111      	movs	r1, #17
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fed7 	bl	8004ba4 <lsm6dsl_read_reg>
 8004df6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	7a3b      	ldrb	r3, [r7, #8]
 8004e08:	f362 0343 	bfi	r3, r2, #1, #3
 8004e0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e0e:	f107 0208 	add.w	r2, r7, #8
 8004e12:	2301      	movs	r3, #1
 8004e14:	2111      	movs	r1, #17
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff fedc 	bl	8004bd4 <lsm6dsl_write_reg>
 8004e1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004e32:	f107 0208 	add.w	r2, r7, #8
 8004e36:	2301      	movs	r3, #1
 8004e38:	2111      	movs	r1, #17
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff feb2 	bl	8004ba4 <lsm6dsl_read_reg>
 8004e40:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8004e42:	7a3b      	ldrb	r3, [r7, #8]
 8004e44:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d824      	bhi.n	8004e98 <lsm6dsl_gy_full_scale_get+0x70>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e71 	.word	0x08004e71
 8004e58:	08004e79 	.word	0x08004e79
 8004e5c:	08004e81 	.word	0x08004e81
 8004e60:	08004e99 	.word	0x08004e99
 8004e64:	08004e89 	.word	0x08004e89
 8004e68:	08004e99 	.word	0x08004e99
 8004e6c:	08004e91 	.word	0x08004e91
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
      break;
 8004e76:	e013      	b.n	8004ea0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	701a      	strb	r2, [r3, #0]
      break;
 8004e7e:	e00f      	b.n	8004ea0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2202      	movs	r2, #2
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e00b      	b.n	8004ea0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	701a      	strb	r2, [r3, #0]
      break;
 8004e8e:	e007      	b.n	8004ea0 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2206      	movs	r2, #6
 8004e94:	701a      	strb	r2, [r3, #0]
      break;
 8004e96:	e003      	b.n	8004ea0 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2207      	movs	r2, #7
 8004e9c:	701a      	strb	r2, [r3, #0]
      break;
 8004e9e:	bf00      	nop
  }

  return ret;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop

08004eac <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004eb8:	f107 0208 	add.w	r2, r7, #8
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	2111      	movs	r1, #17
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff fe6f 	bl	8004ba4 <lsm6dsl_read_reg>
 8004ec6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	7a3b      	ldrb	r3, [r7, #8]
 8004ed8:	f362 1307 	bfi	r3, r2, #4, #4
 8004edc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004ede:	f107 0208 	add.w	r2, r7, #8
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	2111      	movs	r1, #17
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe74 	bl	8004bd4 <lsm6dsl_write_reg>
 8004eec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004eee:	68fb      	ldr	r3, [r7, #12]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f02:	f107 0208 	add.w	r2, r7, #8
 8004f06:	2301      	movs	r3, #1
 8004f08:	2111      	movs	r1, #17
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fe4a 	bl	8004ba4 <lsm6dsl_read_reg>
 8004f10:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8004f12:	7a3b      	ldrb	r3, [r7, #8]
 8004f14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b0a      	cmp	r3, #10
 8004f1c:	d844      	bhi.n	8004fa8 <lsm6dsl_gy_data_rate_get+0xb0>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <lsm6dsl_gy_data_rate_get+0x2c>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	08004f59 	.word	0x08004f59
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f79 	.word	0x08004f79
 8004f3c:	08004f81 	.word	0x08004f81
 8004f40:	08004f89 	.word	0x08004f89
 8004f44:	08004f91 	.word	0x08004f91
 8004f48:	08004f99 	.word	0x08004f99
 8004f4c:	08004fa1 	.word	0x08004fa1
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
      break;
 8004f56:	e02b      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e027      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e023      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	701a      	strb	r2, [r3, #0]
      break;
 8004f6e:	e01f      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2204      	movs	r2, #4
 8004f74:	701a      	strb	r2, [r3, #0]
      break;
 8004f76:	e01b      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2205      	movs	r2, #5
 8004f7c:	701a      	strb	r2, [r3, #0]
      break;
 8004f7e:	e017      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2206      	movs	r2, #6
 8004f84:	701a      	strb	r2, [r3, #0]
      break;
 8004f86:	e013      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2207      	movs	r2, #7
 8004f8c:	701a      	strb	r2, [r3, #0]
      break;
 8004f8e:	e00f      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2208      	movs	r2, #8
 8004f94:	701a      	strb	r2, [r3, #0]
      break;
 8004f96:	e00b      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2209      	movs	r2, #9
 8004f9c:	701a      	strb	r2, [r3, #0]
      break;
 8004f9e:	e007      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	220a      	movs	r2, #10
 8004fa4:	701a      	strb	r2, [r3, #0]
      break;
 8004fa6:	e003      	b.n	8004fb0 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	220b      	movs	r2, #11
 8004fac:	701a      	strb	r2, [r3, #0]
      break;
 8004fae:	bf00      	nop
  }

  return ret;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop

08004fbc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004fc8:	f107 0208 	add.w	r2, r7, #8
 8004fcc:	2301      	movs	r3, #1
 8004fce:	2112      	movs	r1, #18
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fde7 	bl	8004ba4 <lsm6dsl_read_reg>
 8004fd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10f      	bne.n	8004ffe <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	7a3b      	ldrb	r3, [r7, #8]
 8004fe8:	f362 1386 	bfi	r3, r2, #6, #1
 8004fec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8004fee:	f107 0208 	add.w	r2, r7, #8
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	2112      	movs	r1, #18
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fdec 	bl	8004bd4 <lsm6dsl_write_reg>
 8004ffc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005012:	f107 020c 	add.w	r2, r7, #12
 8005016:	2306      	movs	r3, #6
 8005018:	2122      	movs	r1, #34	; 0x22
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fdc2 	bl	8004ba4 <lsm6dsl_read_reg>
 8005020:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005022:	7b7b      	ldrb	r3, [r7, #13]
 8005024:	b21a      	sxth	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005030:	b29b      	uxth	r3, r3
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	b29a      	uxth	r2, r3
 8005036:	7b3b      	ldrb	r3, [r7, #12]
 8005038:	b29b      	uxth	r3, r3
 800503a:	4413      	add	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	b21a      	sxth	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3302      	adds	r3, #2
 800504a:	b212      	sxth	r2, r2
 800504c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	3302      	adds	r3, #2
 8005052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005056:	b29b      	uxth	r3, r3
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	b29a      	uxth	r2, r3
 800505c:	7bbb      	ldrb	r3, [r7, #14]
 800505e:	b29b      	uxth	r3, r3
 8005060:	4413      	add	r3, r2
 8005062:	b29a      	uxth	r2, r3
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	3302      	adds	r3, #2
 8005068:	b212      	sxth	r2, r2
 800506a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800506c:	7c7a      	ldrb	r2, [r7, #17]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	b212      	sxth	r2, r2
 8005074:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	3304      	adds	r3, #4
 800507a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800507e:	b29b      	uxth	r3, r3
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	b29a      	uxth	r2, r3
 8005084:	7c3b      	ldrb	r3, [r7, #16]
 8005086:	b29b      	uxth	r3, r3
 8005088:	4413      	add	r3, r2
 800508a:	b29a      	uxth	r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	3304      	adds	r3, #4
 8005090:	b212      	sxth	r2, r2
 8005092:	801a      	strh	r2, [r3, #0]
  return ret;
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80050a8:	f107 020c 	add.w	r2, r7, #12
 80050ac:	2306      	movs	r3, #6
 80050ae:	2128      	movs	r1, #40	; 0x28
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fd77 	bl	8004ba4 <lsm6dsl_read_reg>
 80050b6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050b8:	7b7b      	ldrb	r3, [r7, #13]
 80050ba:	b21a      	sxth	r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	7b3b      	ldrb	r3, [r7, #12]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	4413      	add	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	3302      	adds	r3, #2
 80050e0:	b212      	sxth	r2, r2
 80050e2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	3302      	adds	r3, #2
 80050e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	7bbb      	ldrb	r3, [r7, #14]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	3302      	adds	r3, #2
 80050fe:	b212      	sxth	r2, r2
 8005100:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005102:	7c7a      	ldrb	r2, [r7, #17]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	3304      	adds	r3, #4
 8005108:	b212      	sxth	r2, r2
 800510a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	3304      	adds	r3, #4
 8005110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005114:	b29b      	uxth	r3, r3
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	b29a      	uxth	r2, r3
 800511a:	7c3b      	ldrb	r3, [r7, #16]
 800511c:	b29b      	uxth	r3, r3
 800511e:	4413      	add	r3, r2
 8005120:	b29a      	uxth	r2, r3
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	3304      	adds	r3, #4
 8005126:	b212      	sxth	r2, r2
 8005128:	801a      	strh	r2, [r3, #0]
  return ret;
 800512a:	697b      	ldr	r3, [r7, #20]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800513e:	2301      	movs	r3, #1
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	210f      	movs	r1, #15
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fd2d 	bl	8004ba4 <lsm6dsl_read_reg>
 800514a:	60f8      	str	r0, [r7, #12]
  return ret;
 800514c:	68fb      	ldr	r3, [r7, #12]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005162:	f107 0208 	add.w	r2, r7, #8
 8005166:	2301      	movs	r3, #1
 8005168:	2112      	movs	r1, #18
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7ff fd1a 	bl	8004ba4 <lsm6dsl_read_reg>
 8005170:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10f      	bne.n	8005198 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	b2da      	uxtb	r2, r3
 8005180:	7a3b      	ldrb	r3, [r7, #8]
 8005182:	f362 0382 	bfi	r3, r2, #2, #1
 8005186:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005188:	f107 0208 	add.w	r2, r7, #8
 800518c:	2301      	movs	r3, #1
 800518e:	2112      	movs	r1, #18
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff fd1f 	bl	8004bd4 <lsm6dsl_write_reg>
 8005196:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005198:	68fb      	ldr	r3, [r7, #12]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80051ae:	f107 0208 	add.w	r2, r7, #8
 80051b2:	2301      	movs	r3, #1
 80051b4:	210a      	movs	r1, #10
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff fcf4 	bl	8004ba4 <lsm6dsl_read_reg>
 80051bc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	7a3b      	ldrb	r3, [r7, #8]
 80051ce:	f362 0302 	bfi	r3, r2, #0, #3
 80051d2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80051d4:	f107 0208 	add.w	r2, r7, #8
 80051d8:	2301      	movs	r3, #1
 80051da:	210a      	movs	r1, #10
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fcf9 	bl	8004bd4 <lsm6dsl_write_reg>
 80051e2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	; 0x38
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80051fe:	2301      	movs	r3, #1
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d06e      	beq.n	80052ea <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b02      	cmp	r3, #2
 8005210:	f200 809d 	bhi.w	800534e <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d032      	beq.n	8005286 <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005220:	e095      	b.n	800534e <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f000 f9f0 	bl	8005608 <LSM6DSL_0_Probe>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
 8005232:	e0cc      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005234:	4a68      	ldr	r2, [pc, #416]	; (80053d8 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	4967      	ldr	r1, [pc, #412]	; (80053dc <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005246:	f107 010c 	add.w	r1, r7, #12
 800524a:	4610      	mov	r0, r2
 800524c:	4798      	blx	r3
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005254:	f06f 0306 	mvn.w	r3, #6
 8005258:	e0b9      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800525a:	7b3b      	ldrb	r3, [r7, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d103      	bne.n	8005268 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	f043 0302 	orr.w	r3, r3, #2
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005268:	7b7b      	ldrb	r3, [r7, #13]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d103      	bne.n	8005276 <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d16c      	bne.n	8005356 <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	f043 0304 	orr.w	r3, r3, #4
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005284:	e067      	b.n	8005356 <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005286:	6838      	ldr	r0, [r7, #0]
 8005288:	f000 fa7a 	bl	8005780 <LSM303AGR_ACC_0_Probe>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295
 8005296:	e09a      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005298:	4a4f      	ldr	r2, [pc, #316]	; (80053d8 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	494e      	ldr	r1, [pc, #312]	; (80053dc <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80052aa:	f107 010c 	add.w	r1, r7, #12
 80052ae:	4610      	mov	r0, r2
 80052b0:	4798      	blx	r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80052b8:	f06f 0306 	mvn.w	r3, #6
 80052bc:	e087      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80052be:	7b3b      	ldrb	r3, [r7, #12]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d103      	bne.n	80052cc <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	f043 0302 	orr.w	r3, r3, #2
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80052cc:	7b7b      	ldrb	r3, [r7, #13]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d103      	bne.n	80052da <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80052da:	7bbb      	ldrb	r3, [r7, #14]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d13c      	bne.n	800535a <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80052e8:	e037      	b.n	800535a <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 80052ea:	6838      	ldr	r0, [r7, #0]
 80052ec:	f000 faec 	bl	80058c8 <LSM303AGR_MAG_0_Probe>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	e068      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80052fc:	4a36      	ldr	r2, [pc, #216]	; (80053d8 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4935      	ldr	r1, [pc, #212]	; (80053dc <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800530e:	f107 010c 	add.w	r1, r7, #12
 8005312:	4610      	mov	r0, r2
 8005314:	4798      	blx	r3
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800531c:	f06f 0306 	mvn.w	r3, #6
 8005320:	e055      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005322:	7b3b      	ldrb	r3, [r7, #12]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d103      	bne.n	8005330 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005330:	7b7b      	ldrb	r3, [r7, #13]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d103      	bne.n	800533e <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800533e:	7bbb      	ldrb	r3, [r7, #14]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d10c      	bne.n	800535e <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	f043 0304 	orr.w	r3, r3, #4
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800534c:	e007      	b.n	800535e <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800534e:	f06f 0301 	mvn.w	r3, #1
 8005352:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005354:	e004      	b.n	8005360 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005356:	bf00      	nop
 8005358:	e002      	b.n	8005360 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800535a:	bf00      	nop
 800535c:	e000      	b.n	8005360 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800535e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	e031      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536e:	e02a      	b.n	80053c6 <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	4013      	ands	r3, r2
 8005376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005378:	429a      	cmp	r2, r3
 800537a:	d11e      	bne.n	80053ba <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 800537c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	4013      	ands	r3, r2
 8005382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005384:	429a      	cmp	r2, r3
 8005386:	d118      	bne.n	80053ba <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005390:	4814      	ldr	r0, [pc, #80]	; (80053e4 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	440b      	add	r3, r1
 800539c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	490e      	ldr	r1, [pc, #56]	; (80053dc <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053aa:	4610      	mov	r0, r2
 80053ac:	4798      	blx	r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80053b4:	f06f 0304 	mvn.w	r3, #4
 80053b8:	e009      	b.n	80053ce <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	3301      	adds	r3, #1
 80053c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d9d1      	bls.n	8005370 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3738      	adds	r7, #56	; 0x38
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200011a8 	.word	0x200011a8
 80053dc:	2000153c 	.word	0x2000153c
 80053e0:	200000d0 	.word	0x200000d0
 80053e4:	20001184 	.word	0x20001184

080053e8 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d903      	bls.n	8005400 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80053f8:	f06f 0301 	mvn.w	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e028      	b.n	8005452 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005400:	4a16      	ldr	r2, [pc, #88]	; (800545c <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	4013      	ands	r3, r2
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d11c      	bne.n	800544c <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005412:	4a13      	ldr	r2, [pc, #76]	; (8005460 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800541a:	4812      	ldr	r0, [pc, #72]	; (8005464 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	440b      	add	r3, r1
 8005426:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	490e      	ldr	r1, [pc, #56]	; (8005468 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005434:	4610      	mov	r0, r2
 8005436:	4798      	blx	r3
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800543e:	f06f 0304 	mvn.w	r3, #4
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e005      	b.n	8005452 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e002      	b.n	8005452 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800544c:	f06f 0301 	mvn.w	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200011b4 	.word	0x200011b4
 8005460:	200000d0 	.word	0x200000d0
 8005464:	20001184 	.word	0x20001184
 8005468:	2000153c 	.word	0x2000153c

0800546c <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d903      	bls.n	8005486 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800547e:	f06f 0301 	mvn.w	r3, #1
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e029      	b.n	80054da <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005486:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d11d      	bne.n	80054d4 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005498:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054a0:	4812      	ldr	r0, [pc, #72]	; (80054ec <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	4413      	add	r3, r2
 80054aa:	440b      	add	r3, r1
 80054ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	490f      	ldr	r1, [pc, #60]	; (80054f0 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4610      	mov	r0, r2
 80054be:	4798      	blx	r3
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80054c6:	f06f 0304 	mvn.w	r3, #4
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e005      	b.n	80054da <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	e002      	b.n	80054da <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80054d4:	f06f 0301 	mvn.w	r3, #1
 80054d8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80054da:	697b      	ldr	r3, [r7, #20]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	200011b4 	.word	0x200011b4
 80054e8:	200000d0 	.word	0x200000d0
 80054ec:	20001184 	.word	0x20001184
 80054f0:	2000153c 	.word	0x2000153c

080054f4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d903      	bls.n	8005510 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005508:	f06f 0301 	mvn.w	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e02a      	b.n	8005566 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005510:	4a17      	ldr	r2, [pc, #92]	; (8005570 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4013      	ands	r3, r2
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d11e      	bne.n	8005560 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800552a:	4813      	ldr	r0, [pc, #76]	; (8005578 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4613      	mov	r3, r2
 8005530:	005b      	lsls	r3, r3, #1
 8005532:	4413      	add	r3, r2
 8005534:	440b      	add	r3, r1
 8005536:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	490f      	ldr	r1, [pc, #60]	; (800557c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005544:	ed97 0a01 	vldr	s0, [r7, #4]
 8005548:	4610      	mov	r0, r2
 800554a:	4798      	blx	r3
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005552:	f06f 0304 	mvn.w	r3, #4
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e005      	b.n	8005566 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e002      	b.n	8005566 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005560:	f06f 0301 	mvn.w	r3, #1
 8005564:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005566:	697b      	ldr	r3, [r7, #20]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	200011b4 	.word	0x200011b4
 8005574:	200000d0 	.word	0x200000d0
 8005578:	20001184 	.word	0x20001184
 800557c:	2000153c 	.word	0x2000153c

08005580 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d903      	bls.n	800559a <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005592:	f06f 0301 	mvn.w	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e029      	b.n	80055ee <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800559a:	4a17      	ldr	r2, [pc, #92]	; (80055f8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4013      	ands	r3, r2
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d11d      	bne.n	80055e8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055b4:	4812      	ldr	r0, [pc, #72]	; (8005600 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	440b      	add	r3, r1
 80055c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	490f      	ldr	r1, [pc, #60]	; (8005604 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4610      	mov	r0, r2
 80055d2:	4798      	blx	r3
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055da:	f06f 0304 	mvn.w	r3, #4
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e005      	b.n	80055ee <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e002      	b.n	80055ee <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80055e8:	f06f 0301 	mvn.w	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80055ee:	697b      	ldr	r3, [r7, #20]
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	200011b4 	.word	0x200011b4
 80055fc:	200000d0 	.word	0x200000d0
 8005600:	20001184 	.word	0x20001184
 8005604:	2000153c 	.word	0x2000153c

08005608 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b092      	sub	sp, #72	; 0x48
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005610:	2300      	movs	r3, #0
 8005612:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005614:	2300      	movs	r3, #0
 8005616:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005618:	23d7      	movs	r3, #215	; 0xd7
 800561a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800561e:	4b4a      	ldr	r3, [pc, #296]	; (8005748 <LSM6DSL_0_Probe+0x140>)
 8005620:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005622:	4b4a      	ldr	r3, [pc, #296]	; (800574c <LSM6DSL_0_Probe+0x144>)
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005626:	4b4a      	ldr	r3, [pc, #296]	; (8005750 <LSM6DSL_0_Probe+0x148>)
 8005628:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800562a:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <LSM6DSL_0_Probe+0x14c>)
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <LSM6DSL_0_Probe+0x150>)
 8005630:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005636:	4619      	mov	r1, r3
 8005638:	4848      	ldr	r0, [pc, #288]	; (800575c <LSM6DSL_0_Probe+0x154>)
 800563a:	f7fe fac3 	bl	8003bc4 <LSM6DSL_RegisterBusIO>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005644:	f06f 0306 	mvn.w	r3, #6
 8005648:	647b      	str	r3, [r7, #68]	; 0x44
 800564a:	e077      	b.n	800573c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800564c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005650:	4619      	mov	r1, r3
 8005652:	4842      	ldr	r0, [pc, #264]	; (800575c <LSM6DSL_0_Probe+0x154>)
 8005654:	f7fe fbac 	bl	8003db0 <LSM6DSL_ReadID>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800565e:	f06f 0306 	mvn.w	r3, #6
 8005662:	647b      	str	r3, [r7, #68]	; 0x44
 8005664:	e06a      	b.n	800573c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800566a:	2b6a      	cmp	r3, #106	; 0x6a
 800566c:	d003      	beq.n	8005676 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800566e:	f06f 0306 	mvn.w	r3, #6
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
 8005674:	e062      	b.n	800573c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	4619      	mov	r1, r3
 800567c:	4837      	ldr	r0, [pc, #220]	; (800575c <LSM6DSL_0_Probe+0x154>)
 800567e:	f7fe fbad 	bl	8003ddc <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005682:	7a7b      	ldrb	r3, [r7, #9]
 8005684:	461a      	mov	r2, r3
 8005686:	7a3b      	ldrb	r3, [r7, #8]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	431a      	orrs	r2, r3
 800568c:	7abb      	ldrb	r3, [r7, #10]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4313      	orrs	r3, r2
 8005692:	4a33      	ldr	r2, [pc, #204]	; (8005760 <LSM6DSL_0_Probe+0x158>)
 8005694:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005696:	4b33      	ldr	r3, [pc, #204]	; (8005764 <LSM6DSL_0_Probe+0x15c>)
 8005698:	4a30      	ldr	r2, [pc, #192]	; (800575c <LSM6DSL_0_Probe+0x154>)
 800569a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800569c:	4b32      	ldr	r3, [pc, #200]	; (8005768 <LSM6DSL_0_Probe+0x160>)
 800569e:	4a33      	ldr	r2, [pc, #204]	; (800576c <LSM6DSL_0_Probe+0x164>)
 80056a0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80056a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d11d      	bne.n	80056e4 <LSM6DSL_0_Probe+0xdc>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d018      	beq.n	80056e4 <LSM6DSL_0_Probe+0xdc>
 80056b2:	7a7b      	ldrb	r3, [r7, #9]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d115      	bne.n	80056e4 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 80056b8:	4b2d      	ldr	r3, [pc, #180]	; (8005770 <LSM6DSL_0_Probe+0x168>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <LSM6DSL_0_Probe+0x16c>)
 80056be:	492e      	ldr	r1, [pc, #184]	; (8005778 <LSM6DSL_0_Probe+0x170>)
 80056c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 80056c4:	4b28      	ldr	r3, [pc, #160]	; (8005768 <LSM6DSL_0_Probe+0x160>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a26      	ldr	r2, [pc, #152]	; (8005764 <LSM6DSL_0_Probe+0x15c>)
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4610      	mov	r0, r2
 80056d0:	4798      	blx	r3
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056d8:	f06f 0304 	mvn.w	r3, #4
 80056dc:	647b      	str	r3, [r7, #68]	; 0x44
 80056de:	e001      	b.n	80056e4 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80056e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11d      	bne.n	8005726 <LSM6DSL_0_Probe+0x11e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d018      	beq.n	8005726 <LSM6DSL_0_Probe+0x11e>
 80056f4:	7a3b      	ldrb	r3, [r7, #8]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d115      	bne.n	8005726 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80056fa:	4b1d      	ldr	r3, [pc, #116]	; (8005770 <LSM6DSL_0_Probe+0x168>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <LSM6DSL_0_Probe+0x16c>)
 8005700:	491e      	ldr	r1, [pc, #120]	; (800577c <LSM6DSL_0_Probe+0x174>)
 8005702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005706:	4b18      	ldr	r3, [pc, #96]	; (8005768 <LSM6DSL_0_Probe+0x160>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <LSM6DSL_0_Probe+0x15c>)
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800571a:	f06f 0304 	mvn.w	r3, #4
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
 8005720:	e001      	b.n	8005726 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005722:	2300      	movs	r3, #0
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <LSM6DSL_0_Probe+0x134>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005736:	f06f 0304 	mvn.w	r3, #4
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800573c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800573e:	4618      	mov	r0, r3
 8005740:	3748      	adds	r7, #72	; 0x48
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	08001f59 	.word	0x08001f59
 800574c:	08001fd5 	.word	0x08001fd5
 8005750:	08002089 	.word	0x08002089
 8005754:	08002025 	.word	0x08002025
 8005758:	080020ed 	.word	0x080020ed
 800575c:	200011c0 	.word	0x200011c0
 8005760:	200011b4 	.word	0x200011b4
 8005764:	2000153c 	.word	0x2000153c
 8005768:	200011a8 	.word	0x200011a8
 800576c:	20000078 	.word	0x20000078
 8005770:	200000d0 	.word	0x200000d0
 8005774:	20001184 	.word	0x20001184
 8005778:	200000ac 	.word	0x200000ac
 800577c:	20000088 	.word	0x20000088

08005780 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b092      	sub	sp, #72	; 0x48
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005788:	2300      	movs	r3, #0
 800578a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800578c:	2300      	movs	r3, #0
 800578e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005790:	2333      	movs	r3, #51	; 0x33
 8005792:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005796:	4b3f      	ldr	r3, [pc, #252]	; (8005894 <LSM303AGR_ACC_0_Probe+0x114>)
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <LSM303AGR_ACC_0_Probe+0x118>)
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800579e:	4b3f      	ldr	r3, [pc, #252]	; (800589c <LSM303AGR_ACC_0_Probe+0x11c>)
 80057a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80057a2:	4b3f      	ldr	r3, [pc, #252]	; (80058a0 <LSM303AGR_ACC_0_Probe+0x120>)
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80057a6:	4b3f      	ldr	r3, [pc, #252]	; (80058a4 <LSM303AGR_ACC_0_Probe+0x124>)
 80057a8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 80057aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ae:	4619      	mov	r1, r3
 80057b0:	483d      	ldr	r0, [pc, #244]	; (80058a8 <LSM303AGR_ACC_0_Probe+0x128>)
 80057b2:	f7fc fe51 	bl	8002458 <LSM303AGR_ACC_RegisterBusIO>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057bc:	f06f 0306 	mvn.w	r3, #6
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
 80057c2:	e062      	b.n	800588a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 80057c4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80057c8:	4619      	mov	r1, r3
 80057ca:	4837      	ldr	r0, [pc, #220]	; (80058a8 <LSM303AGR_ACC_0_Probe+0x128>)
 80057cc:	f7fc ff05 	bl	80025da <LSM303AGR_ACC_ReadID>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057d6:	f06f 0306 	mvn.w	r3, #6
 80057da:	647b      	str	r3, [r7, #68]	; 0x44
 80057dc:	e055      	b.n	800588a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 80057de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057e2:	2b33      	cmp	r3, #51	; 0x33
 80057e4:	d003      	beq.n	80057ee <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057e6:	f06f 0306 	mvn.w	r3, #6
 80057ea:	647b      	str	r3, [r7, #68]	; 0x44
 80057ec:	e04d      	b.n	800588a <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80057ee:	f107 0308 	add.w	r3, r7, #8
 80057f2:	4619      	mov	r1, r3
 80057f4:	482c      	ldr	r0, [pc, #176]	; (80058a8 <LSM303AGR_ACC_0_Probe+0x128>)
 80057f6:	f7fc ff07 	bl	8002608 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80057fa:	7a7b      	ldrb	r3, [r7, #9]
 80057fc:	461a      	mov	r2, r3
 80057fe:	7a3b      	ldrb	r3, [r7, #8]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005804:	7abb      	ldrb	r3, [r7, #10]
 8005806:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005808:	4313      	orrs	r3, r2
 800580a:	4a28      	ldr	r2, [pc, #160]	; (80058ac <LSM303AGR_ACC_0_Probe+0x12c>)
 800580c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800580e:	4b28      	ldr	r3, [pc, #160]	; (80058b0 <LSM303AGR_ACC_0_Probe+0x130>)
 8005810:	4a25      	ldr	r2, [pc, #148]	; (80058a8 <LSM303AGR_ACC_0_Probe+0x128>)
 8005812:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005814:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <LSM303AGR_ACC_0_Probe+0x134>)
 8005816:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <LSM303AGR_ACC_0_Probe+0x138>)
 8005818:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800581a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11e      	bne.n	800585e <LSM303AGR_ACC_0_Probe+0xde>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d019      	beq.n	800585e <LSM303AGR_ACC_0_Probe+0xde>
 800582a:	7a3b      	ldrb	r3, [r7, #8]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d116      	bne.n	800585e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005830:	4b22      	ldr	r3, [pc, #136]	; (80058bc <LSM303AGR_ACC_0_Probe+0x13c>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	4a22      	ldr	r2, [pc, #136]	; (80058c0 <LSM303AGR_ACC_0_Probe+0x140>)
 8005836:	3303      	adds	r3, #3
 8005838:	4922      	ldr	r1, [pc, #136]	; (80058c4 <LSM303AGR_ACC_0_Probe+0x144>)
 800583a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800583e:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <LSM303AGR_ACC_0_Probe+0x134>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <LSM303AGR_ACC_0_Probe+0x130>)
 8005846:	6852      	ldr	r2, [r2, #4]
 8005848:	4610      	mov	r0, r2
 800584a:	4798      	blx	r3
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005852:	f06f 0304 	mvn.w	r3, #4
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
 8005858:	e001      	b.n	800585e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800585a:	2300      	movs	r3, #0
 800585c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800585e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <LSM303AGR_ACC_0_Probe+0xf4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800586e:	f06f 0304 	mvn.w	r3, #4
 8005872:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005876:	2b00      	cmp	r3, #0
 8005878:	d107      	bne.n	800588a <LSM303AGR_ACC_0_Probe+0x10a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005884:	f06f 0304 	mvn.w	r3, #4
 8005888:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800588a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800588c:	4618      	mov	r0, r3
 800588e:	3748      	adds	r7, #72	; 0x48
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	08001f59 	.word	0x08001f59
 8005898:	08001fd5 	.word	0x08001fd5
 800589c:	08002089 	.word	0x08002089
 80058a0:	08002025 	.word	0x08002025
 80058a4:	080020ed 	.word	0x080020ed
 80058a8:	200011f0 	.word	0x200011f0
 80058ac:	200011b4 	.word	0x200011b4
 80058b0:	2000153c 	.word	0x2000153c
 80058b4:	200011a8 	.word	0x200011a8
 80058b8:	20000010 	.word	0x20000010
 80058bc:	200000d0 	.word	0x200000d0
 80058c0:	20001184 	.word	0x20001184
 80058c4:	20000020 	.word	0x20000020

080058c8 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b092      	sub	sp, #72	; 0x48
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 80058d4:	2300      	movs	r3, #0
 80058d6:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 80058d8:	233d      	movs	r3, #61	; 0x3d
 80058da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80058de:	4b3f      	ldr	r3, [pc, #252]	; (80059dc <LSM303AGR_MAG_0_Probe+0x114>)
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80058e2:	4b3f      	ldr	r3, [pc, #252]	; (80059e0 <LSM303AGR_MAG_0_Probe+0x118>)
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80058e6:	4b3f      	ldr	r3, [pc, #252]	; (80059e4 <LSM303AGR_MAG_0_Probe+0x11c>)
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80058ea:	4b3f      	ldr	r3, [pc, #252]	; (80059e8 <LSM303AGR_MAG_0_Probe+0x120>)
 80058ec:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80058ee:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <LSM303AGR_MAG_0_Probe+0x124>)
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80058f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058f6:	4619      	mov	r1, r3
 80058f8:	483d      	ldr	r0, [pc, #244]	; (80059f0 <LSM303AGR_MAG_0_Probe+0x128>)
 80058fa:	f7fd f973 	bl	8002be4 <LSM303AGR_MAG_RegisterBusIO>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005904:	f06f 0306 	mvn.w	r3, #6
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
 800590a:	e062      	b.n	80059d2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800590c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005910:	4619      	mov	r1, r3
 8005912:	4837      	ldr	r0, [pc, #220]	; (80059f0 <LSM303AGR_MAG_0_Probe+0x128>)
 8005914:	f7fd fa1d 	bl	8002d52 <LSM303AGR_MAG_ReadID>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800591e:	f06f 0306 	mvn.w	r3, #6
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
 8005924:	e055      	b.n	80059d2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d003      	beq.n	8005936 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800592e:	f06f 0306 	mvn.w	r3, #6
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
 8005934:	e04d      	b.n	80059d2 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005936:	f107 0308 	add.w	r3, r7, #8
 800593a:	4619      	mov	r1, r3
 800593c:	482c      	ldr	r0, [pc, #176]	; (80059f0 <LSM303AGR_MAG_0_Probe+0x128>)
 800593e:	f7fd fa1f 	bl	8002d80 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005942:	7a7b      	ldrb	r3, [r7, #9]
 8005944:	461a      	mov	r2, r3
 8005946:	7a3b      	ldrb	r3, [r7, #8]
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800594c:	7abb      	ldrb	r3, [r7, #10]
 800594e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005950:	4313      	orrs	r3, r2
 8005952:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005954:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005956:	4b28      	ldr	r3, [pc, #160]	; (80059f8 <LSM303AGR_MAG_0_Probe+0x130>)
 8005958:	4a25      	ldr	r2, [pc, #148]	; (80059f0 <LSM303AGR_MAG_0_Probe+0x128>)
 800595a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <LSM303AGR_MAG_0_Probe+0x134>)
 800595e:	4a28      	ldr	r2, [pc, #160]	; (8005a00 <LSM303AGR_MAG_0_Probe+0x138>)
 8005960:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11e      	bne.n	80059a6 <LSM303AGR_MAG_0_Probe+0xde>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	d019      	beq.n	80059a6 <LSM303AGR_MAG_0_Probe+0xde>
 8005972:	7abb      	ldrb	r3, [r7, #10]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d116      	bne.n	80059a6 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005978:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <LSM303AGR_MAG_0_Probe+0x13c>)
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <LSM303AGR_MAG_0_Probe+0x140>)
 800597e:	3306      	adds	r3, #6
 8005980:	4922      	ldr	r1, [pc, #136]	; (8005a0c <LSM303AGR_MAG_0_Probe+0x144>)
 8005982:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005986:	4b1d      	ldr	r3, [pc, #116]	; (80059fc <LSM303AGR_MAG_0_Probe+0x134>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <LSM303AGR_MAG_0_Probe+0x130>)
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	4610      	mov	r0, r2
 8005992:	4798      	blx	r3
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800599a:	f06f 0304 	mvn.w	r3, #4
 800599e:	647b      	str	r3, [r7, #68]	; 0x44
 80059a0:	e001      	b.n	80059a6 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059a2:	2300      	movs	r3, #0
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 80059a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d107      	bne.n	80059bc <LSM303AGR_MAG_0_Probe+0xf4>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059b6:	f06f 0304 	mvn.w	r3, #4
 80059ba:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d107      	bne.n	80059d2 <LSM303AGR_MAG_0_Probe+0x10a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059cc:	f06f 0304 	mvn.w	r3, #4
 80059d0:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 80059d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3748      	adds	r7, #72	; 0x48
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	08001f59 	.word	0x08001f59
 80059e0:	08001fd5 	.word	0x08001fd5
 80059e4:	08002089 	.word	0x08002089
 80059e8:	08002025 	.word	0x08002025
 80059ec:	080020ed 	.word	0x080020ed
 80059f0:	2000121c 	.word	0x2000121c
 80059f4:	200011b4 	.word	0x200011b4
 80059f8:	2000153c 	.word	0x2000153c
 80059fc:	200011a8 	.word	0x200011a8
 8005a00:	20000044 	.word	0x20000044
 8005a04:	200000d0 	.word	0x200000d0
 8005a08:	20001184 	.word	0x20001184
 8005a0c:	20000054 	.word	0x20000054

08005a10 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d903      	bls.n	8005a2c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a24:	f06f 0301 	mvn.w	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e025      	b.n	8005a78 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	79fa      	ldrb	r2, [r7, #7]
 8005a30:	4914      	ldr	r1, [pc, #80]	; (8005a84 <BSP_COM_Init+0x74>)
 8005a32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a36:	4814      	ldr	r0, [pc, #80]	; (8005a88 <BSP_COM_Init+0x78>)
 8005a38:	4613      	mov	r3, r2
 8005a3a:	015b      	lsls	r3, r3, #5
 8005a3c:	4413      	add	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4403      	add	r3, r0
 8005a42:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8005a44:	79fa      	ldrb	r2, [r7, #7]
 8005a46:	4613      	mov	r3, r2
 8005a48:	015b      	lsls	r3, r3, #5
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4a0e      	ldr	r2, [pc, #56]	; (8005a88 <BSP_COM_Init+0x78>)
 8005a50:	4413      	add	r3, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f84e 	bl	8005af4 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005a58:	79fa      	ldrb	r2, [r7, #7]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	015b      	lsls	r3, r3, #5
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <BSP_COM_Init+0x78>)
 8005a64:	4413      	add	r3, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f810 	bl	8005a8c <MX_USART2_UART_Init>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005a72:	f06f 0303 	mvn.w	r3, #3
 8005a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005a78:	68fb      	ldr	r3, [r7, #12]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	200000e4 	.word	0x200000e4
 8005a88:	20001590 	.word	0x20001590

08005a8c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <MX_USART2_UART_Init+0x64>)
 8005a9c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005aa4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	220c      	movs	r2, #12
 8005abc:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f004 f82c 	bl	8009b34 <HAL_UART_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40004400 	.word	0x40004400

08005af4 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005afc:	4b30      	ldr	r3, [pc, #192]	; (8005bc0 <USART2_MspInit+0xcc>)
 8005afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b00:	4a2f      	ldr	r2, [pc, #188]	; (8005bc0 <USART2_MspInit+0xcc>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b06:	6593      	str	r3, [r2, #88]	; 0x58
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <USART2_MspInit+0xcc>)
 8005b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b14:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <USART2_MspInit+0xcc>)
 8005b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b18:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <USART2_MspInit+0xcc>)
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b20:	4b27      	ldr	r3, [pc, #156]	; (8005bc0 <USART2_MspInit+0xcc>)
 8005b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8005b2c:	2304      	movs	r3, #4
 8005b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b30:	2302      	movs	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8005b3c:	2307      	movs	r3, #7
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4619      	mov	r1, r3
 8005b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b4a:	f000 fcaf 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8005b4e:	2308      	movs	r3, #8
 8005b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b52:	2302      	movs	r3, #2
 8005b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8005b5e:	2307      	movs	r3, #7
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8005b62:	f107 0314 	add.w	r3, r7, #20
 8005b66:	4619      	mov	r1, r3
 8005b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b6c:	f000 fc9e 	bl	80064ac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <USART2_MspInit+0xd4>)
 8005b74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b78:	2202      	movs	r2, #2
 8005b7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b8a:	2280      	movs	r2, #128	; 0x80
 8005b8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ba0:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8005ba6:	4807      	ldr	r0, [pc, #28]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005ba8:	f000 fa88 	bl	80060bc <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005bb0:	671a      	str	r2, [r3, #112]	; 0x70
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <USART2_MspInit+0xd0>)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005bb8:	bf00      	nop
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	20001548 	.word	0x20001548
 8005bc8:	4002006c 	.word	0x4002006c

08005bcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_Init+0x3c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0b      	ldr	r2, [pc, #44]	; (8005c08 <HAL_Init+0x3c>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005be2:	2003      	movs	r0, #3
 8005be4:	f000 f93e 	bl	8005e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005be8:	2000      	movs	r0, #0
 8005bea:	f000 f80f 	bl	8005c0c <HAL_InitTick>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	71fb      	strb	r3, [r7, #7]
 8005bf8:	e001      	b.n	8005bfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005bfa:	f7fc f943 	bl	8001e84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40022000 	.word	0x40022000

08005c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005c18:	4b17      	ldr	r3, [pc, #92]	; (8005c78 <HAL_InitTick+0x6c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d023      	beq.n	8005c68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <HAL_InitTick+0x70>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <HAL_InitTick+0x6c>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f949 	bl	8005ece <HAL_SYSTICK_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10f      	bne.n	8005c62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d809      	bhi.n	8005c5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	6879      	ldr	r1, [r7, #4]
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	f000 f913 	bl	8005e7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c54:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <HAL_InitTick+0x74>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e007      	b.n	8005c6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
 8005c60:	e004      	b.n	8005c6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	e001      	b.n	8005c6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200000ec 	.word	0x200000ec
 8005c7c:	2000000c 	.word	0x2000000c
 8005c80:	200000e8 	.word	0x200000e8

08005c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <HAL_IncTick+0x20>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_IncTick+0x24>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4413      	add	r3, r2
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_IncTick+0x24>)
 8005c96:	6013      	str	r3, [r2, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	200000ec 	.word	0x200000ec
 8005ca8:	20001614 	.word	0x20001614

08005cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return uwTick;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <HAL_GetTick+0x14>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20001614 	.word	0x20001614

08005cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <__NVIC_SetPriorityGrouping+0x44>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cf6:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <__NVIC_SetPriorityGrouping+0x44>)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	60d3      	str	r3, [r2, #12]
}
 8005cfc:	bf00      	nop
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <__NVIC_GetPriorityGrouping+0x18>)
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	f003 0307 	and.w	r3, r3, #7
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	e000ed00 	.word	0xe000ed00

08005d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	db0b      	blt.n	8005d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	f003 021f 	and.w	r2, r3, #31
 8005d40:	4907      	ldr	r1, [pc, #28]	; (8005d60 <__NVIC_EnableIRQ+0x38>)
 8005d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	2001      	movs	r0, #1
 8005d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	e000e100 	.word	0xe000e100

08005d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	db0a      	blt.n	8005d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	490c      	ldr	r1, [pc, #48]	; (8005db0 <__NVIC_SetPriority+0x4c>)
 8005d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d82:	0112      	lsls	r2, r2, #4
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	440b      	add	r3, r1
 8005d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d8c:	e00a      	b.n	8005da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4908      	ldr	r1, [pc, #32]	; (8005db4 <__NVIC_SetPriority+0x50>)
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	3b04      	subs	r3, #4
 8005d9c:	0112      	lsls	r2, r2, #4
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	440b      	add	r3, r1
 8005da2:	761a      	strb	r2, [r3, #24]
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000e100 	.word	0xe000e100
 8005db4:	e000ed00 	.word	0xe000ed00

08005db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f1c3 0307 	rsb	r3, r3, #7
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	bf28      	it	cs
 8005dd6:	2304      	movcs	r3, #4
 8005dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	2b06      	cmp	r3, #6
 8005de0:	d902      	bls.n	8005de8 <NVIC_EncodePriority+0x30>
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3b03      	subs	r3, #3
 8005de6:	e000      	b.n	8005dea <NVIC_EncodePriority+0x32>
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dec:	f04f 32ff 	mov.w	r2, #4294967295
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	401a      	ands	r2, r3
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e00:	f04f 31ff 	mov.w	r1, #4294967295
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	43d9      	mvns	r1, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e10:	4313      	orrs	r3, r2
         );
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3724      	adds	r7, #36	; 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e30:	d301      	bcc.n	8005e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00f      	b.n	8005e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <SysTick_Config+0x40>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e3e:	210f      	movs	r1, #15
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	f7ff ff8e 	bl	8005d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <SysTick_Config+0x40>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4e:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <SysTick_Config+0x40>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	e000e010 	.word	0xe000e010

08005e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff29 	bl	8005cc4 <__NVIC_SetPriorityGrouping>
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	4603      	mov	r3, r0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e8c:	f7ff ff3e 	bl	8005d0c <__NVIC_GetPriorityGrouping>
 8005e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f7ff ff8e 	bl	8005db8 <NVIC_EncodePriority>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff5d 	bl	8005d64 <__NVIC_SetPriority>
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ff31 	bl	8005d28 <__NVIC_EnableIRQ>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ffa2 	bl	8005e20 <SysTick_Config>
 8005edc:	4603      	mov	r3, r0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e054      	b.n	8005fa4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7f5b      	ldrb	r3, [r3, #29]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fb fbb0 	bl	8001670 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	791b      	ldrb	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a22      	ldr	r2, [pc, #136]	; (8005fac <HAL_CRC_Init+0xc4>)
 8005f24:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0218 	bic.w	r2, r2, #24
 8005f34:	609a      	str	r2, [r3, #8]
 8005f36:	e00c      	b.n	8005f52 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6899      	ldr	r1, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	461a      	mov	r2, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f834 	bl	8005fb0 <HAL_CRCEx_Polynomial_Set>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e028      	b.n	8005fa4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	795b      	ldrb	r3, [r3, #5]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d105      	bne.n	8005f66 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f62:	611a      	str	r2, [r3, #16]
 8005f64:	e004      	b.n	8005f70 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6912      	ldr	r2, [r2, #16]
 8005f6e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	04c11db7 	.word	0x04c11db7

08005fb0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b087      	sub	sp, #28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005fc0:	231f      	movs	r3, #31
 8005fc2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005fc4:	bf00      	nop
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1e5a      	subs	r2, r3, #1
 8005fca:	613a      	str	r2, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <HAL_CRCEx_Polynomial_Set+0x34>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_CRCEx_Polynomial_Set+0x16>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b18      	cmp	r3, #24
 8005fe8:	d846      	bhi.n	8006078 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	0800607f 	.word	0x0800607f
 8005ff4:	08006079 	.word	0x08006079
 8005ff8:	08006079 	.word	0x08006079
 8005ffc:	08006079 	.word	0x08006079
 8006000:	08006079 	.word	0x08006079
 8006004:	08006079 	.word	0x08006079
 8006008:	08006079 	.word	0x08006079
 800600c:	08006079 	.word	0x08006079
 8006010:	0800606d 	.word	0x0800606d
 8006014:	08006079 	.word	0x08006079
 8006018:	08006079 	.word	0x08006079
 800601c:	08006079 	.word	0x08006079
 8006020:	08006079 	.word	0x08006079
 8006024:	08006079 	.word	0x08006079
 8006028:	08006079 	.word	0x08006079
 800602c:	08006079 	.word	0x08006079
 8006030:	08006061 	.word	0x08006061
 8006034:	08006079 	.word	0x08006079
 8006038:	08006079 	.word	0x08006079
 800603c:	08006079 	.word	0x08006079
 8006040:	08006079 	.word	0x08006079
 8006044:	08006079 	.word	0x08006079
 8006048:	08006079 	.word	0x08006079
 800604c:	08006079 	.word	0x08006079
 8006050:	08006055 	.word	0x08006055
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b06      	cmp	r3, #6
 8006058:	d913      	bls.n	8006082 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800605e:	e010      	b.n	8006082 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b07      	cmp	r3, #7
 8006064:	d90f      	bls.n	8006086 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800606a:	e00c      	b.n	8006086 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d90b      	bls.n	800608a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006076:	e008      	b.n	800608a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
      break;
 800607c:	e006      	b.n	800608c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800607e:	bf00      	nop
 8006080:	e004      	b.n	800608c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006082:	bf00      	nop
 8006084:	e002      	b.n	800608c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006086:	bf00      	nop
 8006088:	e000      	b.n	800608c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800608a:	bf00      	nop
  }
  if (status == HAL_OK)
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10d      	bne.n	80060ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f023 0118 	bic.w	r1, r3, #24
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e098      	b.n	8006200 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	4b4d      	ldr	r3, [pc, #308]	; (800620c <HAL_DMA_Init+0x150>)
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d80f      	bhi.n	80060fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	4b4b      	ldr	r3, [pc, #300]	; (8006210 <HAL_DMA_Init+0x154>)
 80060e2:	4413      	add	r3, r2
 80060e4:	4a4b      	ldr	r2, [pc, #300]	; (8006214 <HAL_DMA_Init+0x158>)
 80060e6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ea:	091b      	lsrs	r3, r3, #4
 80060ec:	009a      	lsls	r2, r3, #2
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a48      	ldr	r2, [pc, #288]	; (8006218 <HAL_DMA_Init+0x15c>)
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
 80060f8:	e00e      	b.n	8006118 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	4b46      	ldr	r3, [pc, #280]	; (800621c <HAL_DMA_Init+0x160>)
 8006102:	4413      	add	r3, r2
 8006104:	4a43      	ldr	r2, [pc, #268]	; (8006214 <HAL_DMA_Init+0x158>)
 8006106:	fba2 2303 	umull	r2, r3, r2, r3
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	009a      	lsls	r2, r3, #2
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a42      	ldr	r2, [pc, #264]	; (8006220 <HAL_DMA_Init+0x164>)
 8006116:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800613c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006172:	d039      	beq.n	80061e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <HAL_DMA_Init+0x15c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d11a      	bne.n	80061b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800617e:	4b29      	ldr	r3, [pc, #164]	; (8006224 <HAL_DMA_Init+0x168>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	f003 031c 	and.w	r3, r3, #28
 800618a:	210f      	movs	r1, #15
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	4924      	ldr	r1, [pc, #144]	; (8006224 <HAL_DMA_Init+0x168>)
 8006194:	4013      	ands	r3, r2
 8006196:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006198:	4b22      	ldr	r3, [pc, #136]	; (8006224 <HAL_DMA_Init+0x168>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	f003 031c 	and.w	r3, r3, #28
 80061a8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ac:	491d      	ldr	r1, [pc, #116]	; (8006224 <HAL_DMA_Init+0x168>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
 80061b2:	e019      	b.n	80061e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80061b4:	4b1c      	ldr	r3, [pc, #112]	; (8006228 <HAL_DMA_Init+0x16c>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	f003 031c 	and.w	r3, r3, #28
 80061c0:	210f      	movs	r1, #15
 80061c2:	fa01 f303 	lsl.w	r3, r1, r3
 80061c6:	43db      	mvns	r3, r3
 80061c8:	4917      	ldr	r1, [pc, #92]	; (8006228 <HAL_DMA_Init+0x16c>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80061ce:	4b16      	ldr	r3, [pc, #88]	; (8006228 <HAL_DMA_Init+0x16c>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6859      	ldr	r1, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	f003 031c 	and.w	r3, r3, #28
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	4911      	ldr	r1, [pc, #68]	; (8006228 <HAL_DMA_Init+0x16c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40020407 	.word	0x40020407
 8006210:	bffdfff8 	.word	0xbffdfff8
 8006214:	cccccccd 	.word	0xcccccccd
 8006218:	40020000 	.word	0x40020000
 800621c:	bffdfbf8 	.word	0xbffdfbf8
 8006220:	40020400 	.word	0x40020400
 8006224:	400200a8 	.word	0x400200a8
 8006228:	400204a8 	.word	0x400204a8

0800622c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_DMA_Start_IT+0x20>
 8006248:	2302      	movs	r3, #2
 800624a:	e04b      	b.n	80062e4 <HAL_DMA_Start_IT+0xb8>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	d13a      	bne.n	80062d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f8e0 	bl	800644a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d008      	beq.n	80062a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 020e 	orr.w	r2, r2, #14
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e00f      	b.n	80062c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0204 	bic.w	r2, r2, #4
 80062b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 020a 	orr.w	r2, r2, #10
 80062c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e005      	b.n	80062e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80062de:	2302      	movs	r3, #2
 80062e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	f003 031c 	and.w	r3, r3, #28
 800630c:	2204      	movs	r2, #4
 800630e:	409a      	lsls	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d026      	beq.n	8006366 <HAL_DMA_IRQHandler+0x7a>
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d021      	beq.n	8006366 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d107      	bne.n	8006340 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0204 	bic.w	r2, r2, #4
 800633e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006344:	f003 021c 	and.w	r2, r3, #28
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	2104      	movs	r1, #4
 800634e:	fa01 f202 	lsl.w	r2, r1, r2
 8006352:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	2b00      	cmp	r3, #0
 800635a:	d071      	beq.n	8006440 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006364:	e06c      	b.n	8006440 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f003 031c 	and.w	r3, r3, #28
 800636e:	2202      	movs	r2, #2
 8006370:	409a      	lsls	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4013      	ands	r3, r2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d02e      	beq.n	80063d8 <HAL_DMA_IRQHandler+0xec>
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d029      	beq.n	80063d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 020a 	bic.w	r2, r2, #10
 80063a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f003 021c 	and.w	r2, r3, #28
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2102      	movs	r1, #2
 80063b8:	fa01 f202 	lsl.w	r2, r1, r2
 80063bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d038      	beq.n	8006440 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80063d6:	e033      	b.n	8006440 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	f003 031c 	and.w	r3, r3, #28
 80063e0:	2208      	movs	r2, #8
 80063e2:	409a      	lsls	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d02a      	beq.n	8006442 <HAL_DMA_IRQHandler+0x156>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d025      	beq.n	8006442 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 020e 	bic.w	r2, r2, #14
 8006404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	f003 021c 	and.w	r2, r3, #28
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	2101      	movs	r1, #1
 8006414:	fa01 f202 	lsl.w	r2, r1, r2
 8006418:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006440:	bf00      	nop
 8006442:	bf00      	nop
}
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
 8006456:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645c:	f003 021c 	and.w	r2, r3, #28
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f202 	lsl.w	r2, r1, r2
 800646a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b10      	cmp	r3, #16
 800647a:	d108      	bne.n	800648e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800648c:	e007      	b.n	800649e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
	...

080064ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064ba:	e17f      	b.n	80067bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2101      	movs	r1, #1
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	fa01 f303 	lsl.w	r3, r1, r3
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8171 	beq.w	80067b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d005      	beq.n	80064ec <HAL_GPIO_Init+0x40>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0303 	and.w	r3, r3, #3
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d130      	bne.n	800654e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	2203      	movs	r2, #3
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4013      	ands	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68da      	ldr	r2, [r3, #12]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006522:	2201      	movs	r2, #1
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4013      	ands	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	091b      	lsrs	r3, r3, #4
 8006538:	f003 0201 	and.w	r2, r3, #1
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	fa02 f303 	lsl.w	r3, r2, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d118      	bne.n	800658c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006560:	2201      	movs	r2, #1
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43db      	mvns	r3, r3
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4013      	ands	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	f003 0201 	and.w	r2, r3, #1
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	2b03      	cmp	r3, #3
 8006596:	d017      	beq.n	80065c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	2203      	movs	r2, #3
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	43db      	mvns	r3, r3
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 0303 	and.w	r3, r3, #3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d123      	bne.n	800661c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	08da      	lsrs	r2, r3, #3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3208      	adds	r2, #8
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	220f      	movs	r2, #15
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4013      	ands	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	fa02 f303 	lsl.w	r3, r2, r3
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	08da      	lsrs	r2, r3, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3208      	adds	r2, #8
 8006616:	6939      	ldr	r1, [r7, #16]
 8006618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	2203      	movs	r2, #3
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	43db      	mvns	r3, r3
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4013      	ands	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 0203 	and.w	r2, r3, #3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 80ac 	beq.w	80067b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800665e:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <HAL_GPIO_Init+0x330>)
 8006660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006662:	4a5e      	ldr	r2, [pc, #376]	; (80067dc <HAL_GPIO_Init+0x330>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6613      	str	r3, [r2, #96]	; 0x60
 800666a:	4b5c      	ldr	r3, [pc, #368]	; (80067dc <HAL_GPIO_Init+0x330>)
 800666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006676:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	089b      	lsrs	r3, r3, #2
 800667c:	3302      	adds	r3, #2
 800667e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006682:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	220f      	movs	r2, #15
 800668e:	fa02 f303 	lsl.w	r3, r2, r3
 8006692:	43db      	mvns	r3, r3
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4013      	ands	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066a0:	d025      	beq.n	80066ee <HAL_GPIO_Init+0x242>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a4f      	ldr	r2, [pc, #316]	; (80067e4 <HAL_GPIO_Init+0x338>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d01f      	beq.n	80066ea <HAL_GPIO_Init+0x23e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a4e      	ldr	r2, [pc, #312]	; (80067e8 <HAL_GPIO_Init+0x33c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d019      	beq.n	80066e6 <HAL_GPIO_Init+0x23a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a4d      	ldr	r2, [pc, #308]	; (80067ec <HAL_GPIO_Init+0x340>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d013      	beq.n	80066e2 <HAL_GPIO_Init+0x236>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4c      	ldr	r2, [pc, #304]	; (80067f0 <HAL_GPIO_Init+0x344>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d00d      	beq.n	80066de <HAL_GPIO_Init+0x232>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a4b      	ldr	r2, [pc, #300]	; (80067f4 <HAL_GPIO_Init+0x348>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d007      	beq.n	80066da <HAL_GPIO_Init+0x22e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a4a      	ldr	r2, [pc, #296]	; (80067f8 <HAL_GPIO_Init+0x34c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d101      	bne.n	80066d6 <HAL_GPIO_Init+0x22a>
 80066d2:	2306      	movs	r3, #6
 80066d4:	e00c      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066d6:	2307      	movs	r3, #7
 80066d8:	e00a      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066da:	2305      	movs	r3, #5
 80066dc:	e008      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066de:	2304      	movs	r3, #4
 80066e0:	e006      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066e2:	2303      	movs	r3, #3
 80066e4:	e004      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e002      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <HAL_GPIO_Init+0x244>
 80066ee:	2300      	movs	r3, #0
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	f002 0203 	and.w	r2, r2, #3
 80066f6:	0092      	lsls	r2, r2, #2
 80066f8:	4093      	lsls	r3, r2
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006700:	4937      	ldr	r1, [pc, #220]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	3302      	adds	r3, #2
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800670e:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	43db      	mvns	r3, r3
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4013      	ands	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006732:	4a32      	ldr	r2, [pc, #200]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006738:	4b30      	ldr	r3, [pc, #192]	; (80067fc <HAL_GPIO_Init+0x350>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	43db      	mvns	r3, r3
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4013      	ands	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <HAL_GPIO_Init+0x350>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006762:	4b26      	ldr	r3, [pc, #152]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	43db      	mvns	r3, r3
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006786:	4a1d      	ldr	r2, [pc, #116]	; (80067fc <HAL_GPIO_Init+0x350>)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <HAL_GPIO_Init+0x350>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	43db      	mvns	r3, r3
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4013      	ands	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067b0:	4a12      	ldr	r2, [pc, #72]	; (80067fc <HAL_GPIO_Init+0x350>)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f47f ae78 	bne.w	80064bc <HAL_GPIO_Init+0x10>
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000
 80067e0:	40010000 	.word	0x40010000
 80067e4:	48000400 	.word	0x48000400
 80067e8:	48000800 	.word	0x48000800
 80067ec:	48000c00 	.word	0x48000c00
 80067f0:	48001000 	.word	0x48001000
 80067f4:	48001400 	.word	0x48001400
 80067f8:	48001800 	.word	0x48001800
 80067fc:	40010400 	.word	0x40010400

08006800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800680e:	e0cd      	b.n	80069ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006810:	2201      	movs	r2, #1
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 80c0 	beq.w	80069a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006826:	4a68      	ldr	r2, [pc, #416]	; (80069c8 <HAL_GPIO_DeInit+0x1c8>)
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	089b      	lsrs	r3, r3, #2
 800682c:	3302      	adds	r3, #2
 800682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006832:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	220f      	movs	r2, #15
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800684e:	d025      	beq.n	800689c <HAL_GPIO_DeInit+0x9c>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a5e      	ldr	r2, [pc, #376]	; (80069cc <HAL_GPIO_DeInit+0x1cc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01f      	beq.n	8006898 <HAL_GPIO_DeInit+0x98>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a5d      	ldr	r2, [pc, #372]	; (80069d0 <HAL_GPIO_DeInit+0x1d0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d019      	beq.n	8006894 <HAL_GPIO_DeInit+0x94>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a5c      	ldr	r2, [pc, #368]	; (80069d4 <HAL_GPIO_DeInit+0x1d4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <HAL_GPIO_DeInit+0x90>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a5b      	ldr	r2, [pc, #364]	; (80069d8 <HAL_GPIO_DeInit+0x1d8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00d      	beq.n	800688c <HAL_GPIO_DeInit+0x8c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a5a      	ldr	r2, [pc, #360]	; (80069dc <HAL_GPIO_DeInit+0x1dc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <HAL_GPIO_DeInit+0x88>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a59      	ldr	r2, [pc, #356]	; (80069e0 <HAL_GPIO_DeInit+0x1e0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d101      	bne.n	8006884 <HAL_GPIO_DeInit+0x84>
 8006880:	2306      	movs	r3, #6
 8006882:	e00c      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006884:	2307      	movs	r3, #7
 8006886:	e00a      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006888:	2305      	movs	r3, #5
 800688a:	e008      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 800688c:	2304      	movs	r3, #4
 800688e:	e006      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006890:	2303      	movs	r3, #3
 8006892:	e004      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006894:	2302      	movs	r3, #2
 8006896:	e002      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <HAL_GPIO_DeInit+0x9e>
 800689c:	2300      	movs	r3, #0
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d132      	bne.n	8006914 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80068ae:	4b4d      	ldr	r3, [pc, #308]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	43db      	mvns	r3, r3
 80068b6:	494b      	ldr	r1, [pc, #300]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80068bc:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	43db      	mvns	r3, r3
 80068c4:	4947      	ldr	r1, [pc, #284]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068c6:	4013      	ands	r3, r2
 80068c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80068ca:	4b46      	ldr	r3, [pc, #280]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068cc:	68da      	ldr	r2, [r3, #12]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	43db      	mvns	r3, r3
 80068d2:	4944      	ldr	r1, [pc, #272]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	43db      	mvns	r3, r3
 80068e0:	4940      	ldr	r1, [pc, #256]	; (80069e4 <HAL_GPIO_DeInit+0x1e4>)
 80068e2:	4013      	ands	r3, r2
 80068e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	220f      	movs	r2, #15
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80068f6:	4a34      	ldr	r2, [pc, #208]	; (80069c8 <HAL_GPIO_DeInit+0x1c8>)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	089b      	lsrs	r3, r3, #2
 80068fc:	3302      	adds	r3, #2
 80068fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	43da      	mvns	r2, r3
 8006906:	4830      	ldr	r0, [pc, #192]	; (80069c8 <HAL_GPIO_DeInit+0x1c8>)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	089b      	lsrs	r3, r3, #2
 800690c:	400a      	ands	r2, r1
 800690e:	3302      	adds	r3, #2
 8006910:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	2103      	movs	r1, #3
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	08da      	lsrs	r2, r3, #3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	3208      	adds	r2, #8
 8006930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	220f      	movs	r2, #15
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	08d2      	lsrs	r2, r2, #3
 8006948:	4019      	ands	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	3208      	adds	r2, #8
 800694e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	2103      	movs	r1, #3
 800695c:	fa01 f303 	lsl.w	r3, r1, r3
 8006960:	43db      	mvns	r3, r3
 8006962:	401a      	ands	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	2101      	movs	r1, #1
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	43db      	mvns	r3, r3
 8006976:	401a      	ands	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	2103      	movs	r1, #3
 8006986:	fa01 f303 	lsl.w	r3, r1, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	401a      	ands	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006996:	2101      	movs	r1, #1
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	401a      	ands	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	3301      	adds	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f47f af2b 	bne.w	8006810 <HAL_GPIO_DeInit+0x10>
  }
}
 80069ba:	bf00      	nop
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	40010000 	.word	0x40010000
 80069cc:	48000400 	.word	0x48000400
 80069d0:	48000800 	.word	0x48000800
 80069d4:	48000c00 	.word	0x48000c00
 80069d8:	48001000 	.word	0x48001000
 80069dc:	48001400 	.word	0x48001400
 80069e0:	48001800 	.word	0x48001800
 80069e4:	40010400 	.word	0x40010400

080069e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069f8:	787b      	ldrb	r3, [r7, #1]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a04:	e002      	b.n	8006a0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a2e:	4a05      	ldr	r2, [pc, #20]	; (8006a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fa fffa 	bl	8001a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40010400 	.word	0x40010400

08006a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e081      	b.n	8006b5e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8a8 	bl	8006bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2224      	movs	r2, #36	; 0x24
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006aa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d107      	bne.n	8006ac2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006abe:	609a      	str	r2, [r3, #8]
 8006ac0:	e006      	b.n	8006ad0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d104      	bne.n	8006ae2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69d9      	ldr	r1, [r3, #28]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e021      	b.n	8006bbc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2224      	movs	r2, #36	; 0x24
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0201 	bic.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f821 	bl	8006bd8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	817b      	strh	r3, [r7, #10]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	813b      	strh	r3, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	f040 80f9 	bne.w	8006e06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_I2C_Mem_Write+0x34>
 8006c1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d105      	bne.n	8006c2c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c26:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0ed      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <HAL_I2C_Mem_Write+0x4e>
 8006c36:	2302      	movs	r3, #2
 8006c38:	e0e6      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c42:	f7ff f833 	bl	8005cac <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	2319      	movs	r3, #25
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 fadd 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e0d1      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2221      	movs	r2, #33	; 0x21
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2240      	movs	r2, #64	; 0x40
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a3a      	ldr	r2, [r7, #32]
 8006c7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c8c:	88f8      	ldrh	r0, [r7, #6]
 8006c8e:	893a      	ldrh	r2, [r7, #8]
 8006c90:	8979      	ldrh	r1, [r7, #10]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 f9ed 	bl	800707c <I2C_RequestMemoryWrite>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0a9      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2bff      	cmp	r3, #255	; 0xff
 8006cbc:	d90e      	bls.n	8006cdc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	22ff      	movs	r2, #255	; 0xff
 8006cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	8979      	ldrh	r1, [r7, #10]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fc45 	bl	8007564 <I2C_TransferConfig>
 8006cda:	e00f      	b.n	8006cfc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	8979      	ldrh	r1, [r7, #10]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fc34 	bl	8007564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 fac7 	bl	8007294 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e07b      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	781a      	ldrb	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d034      	beq.n	8006db4 <HAL_I2C_Mem_Write+0x1c8>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d130      	bne.n	8006db4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2180      	movs	r1, #128	; 0x80
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fa59 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e04d      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	2bff      	cmp	r3, #255	; 0xff
 8006d74:	d90e      	bls.n	8006d94 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	22ff      	movs	r2, #255	; 0xff
 8006d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	8979      	ldrh	r1, [r7, #10]
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fbe9 	bl	8007564 <I2C_TransferConfig>
 8006d92:	e00f      	b.n	8006db4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	8979      	ldrh	r1, [r7, #10]
 8006da6:	2300      	movs	r3, #0
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 fbd8 	bl	8007564 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d19e      	bne.n	8006cfc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 faa6 	bl	8007314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e01a      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6859      	ldr	r1, [r3, #4]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <HAL_I2C_Mem_Write+0x224>)
 8006de6:	400b      	ands	r3, r1
 8006de8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2220      	movs	r2, #32
 8006dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e000      	b.n	8006e08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006e06:	2302      	movs	r3, #2
  }
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	fe00e800 	.word	0xfe00e800

08006e14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	817b      	strh	r3, [r7, #10]
 8006e26:	460b      	mov	r3, r1
 8006e28:	813b      	strh	r3, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	f040 80fd 	bne.w	8007036 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_I2C_Mem_Read+0x34>
 8006e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d105      	bne.n	8006e54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e0f1      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_I2C_Mem_Read+0x4e>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e0ea      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e6a:	f7fe ff1f 	bl	8005cac <HAL_GetTick>
 8006e6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	2319      	movs	r3, #25
 8006e76:	2201      	movs	r2, #1
 8006e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 f9c9 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0d5      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2222      	movs	r2, #34	; 0x22
 8006e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2240      	movs	r2, #64	; 0x40
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a3a      	ldr	r2, [r7, #32]
 8006ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006eb4:	88f8      	ldrh	r0, [r7, #6]
 8006eb6:	893a      	ldrh	r2, [r7, #8]
 8006eb8:	8979      	ldrh	r1, [r7, #10]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f92d 	bl	8007124 <I2C_RequestMemoryRead>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0ad      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	2bff      	cmp	r3, #255	; 0xff
 8006ee4:	d90e      	bls.n	8006f04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	22ff      	movs	r2, #255	; 0xff
 8006eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	8979      	ldrh	r1, [r7, #10]
 8006ef4:	4b52      	ldr	r3, [pc, #328]	; (8007040 <HAL_I2C_Mem_Read+0x22c>)
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 fb31 	bl	8007564 <I2C_TransferConfig>
 8006f02:	e00f      	b.n	8006f24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	8979      	ldrh	r1, [r7, #10]
 8006f16:	4b4a      	ldr	r3, [pc, #296]	; (8007040 <HAL_I2C_Mem_Read+0x22c>)
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fb20 	bl	8007564 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f970 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e07c      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d034      	beq.n	8006fe4 <HAL_I2C_Mem_Read+0x1d0>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d130      	bne.n	8006fe4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2180      	movs	r1, #128	; 0x80
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f941 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e04d      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2bff      	cmp	r3, #255	; 0xff
 8006fa4:	d90e      	bls.n	8006fc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	22ff      	movs	r2, #255	; 0xff
 8006faa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	8979      	ldrh	r1, [r7, #10]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fad1 	bl	8007564 <I2C_TransferConfig>
 8006fc2:	e00f      	b.n	8006fe4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	8979      	ldrh	r1, [r7, #10]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fac0 	bl	8007564 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d19a      	bne.n	8006f24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f98e 	bl	8007314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e01a      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2220      	movs	r2, #32
 8007008:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6859      	ldr	r1, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4b0b      	ldr	r3, [pc, #44]	; (8007044 <HAL_I2C_Mem_Read+0x230>)
 8007016:	400b      	ands	r3, r1
 8007018:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e000      	b.n	8007038 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007036:	2302      	movs	r3, #2
  }
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	80002400 	.word	0x80002400
 8007044:	fe00e800 	.word	0xfe00e800

08007048 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007056:	b2db      	uxtb	r3, r3
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4603      	mov	r3, r0
 800708c:	817b      	strh	r3, [r7, #10]
 800708e:	460b      	mov	r3, r1
 8007090:	813b      	strh	r3, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	b2da      	uxtb	r2, r3
 800709a:	8979      	ldrh	r1, [r7, #10]
 800709c:	4b20      	ldr	r3, [pc, #128]	; (8007120 <I2C_RequestMemoryWrite+0xa4>)
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 fa5d 	bl	8007564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	69b9      	ldr	r1, [r7, #24]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f8f0 	bl	8007294 <I2C_WaitOnTXISFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e02c      	b.n	8007118 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d105      	bne.n	80070d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070c4:	893b      	ldrh	r3, [r7, #8]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	629a      	str	r2, [r3, #40]	; 0x28
 80070ce:	e015      	b.n	80070fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070d0:	893b      	ldrh	r3, [r7, #8]
 80070d2:	0a1b      	lsrs	r3, r3, #8
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070de:	69fa      	ldr	r2, [r7, #28]
 80070e0:	69b9      	ldr	r1, [r7, #24]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 f8d6 	bl	8007294 <I2C_WaitOnTXISFlagUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e012      	b.n	8007118 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070f2:	893b      	ldrh	r3, [r7, #8]
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2200      	movs	r2, #0
 8007104:	2180      	movs	r1, #128	; 0x80
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 f884 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e000      	b.n	8007118 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	80002000 	.word	0x80002000

08007124 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	4608      	mov	r0, r1
 800712e:	4611      	mov	r1, r2
 8007130:	461a      	mov	r2, r3
 8007132:	4603      	mov	r3, r0
 8007134:	817b      	strh	r3, [r7, #10]
 8007136:	460b      	mov	r3, r1
 8007138:	813b      	strh	r3, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	8979      	ldrh	r1, [r7, #10]
 8007144:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <I2C_RequestMemoryRead+0xa4>)
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fa0a 	bl	8007564 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	69b9      	ldr	r1, [r7, #24]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 f89d 	bl	8007294 <I2C_WaitOnTXISFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e02c      	b.n	80071be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d105      	bne.n	8007176 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800716a:	893b      	ldrh	r3, [r7, #8]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	629a      	str	r2, [r3, #40]	; 0x28
 8007174:	e015      	b.n	80071a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007176:	893b      	ldrh	r3, [r7, #8]
 8007178:	0a1b      	lsrs	r3, r3, #8
 800717a:	b29b      	uxth	r3, r3
 800717c:	b2da      	uxtb	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	69b9      	ldr	r1, [r7, #24]
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f883 	bl	8007294 <I2C_WaitOnTXISFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e012      	b.n	80071be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007198:	893b      	ldrh	r3, [r7, #8]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	2200      	movs	r2, #0
 80071aa:	2140      	movs	r1, #64	; 0x40
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f831 	bl	8007214 <I2C_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	80002000 	.word	0x80002000

080071cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d103      	bne.n	80071ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2200      	movs	r2, #0
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d007      	beq.n	8007208 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	619a      	str	r2, [r3, #24]
  }
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	4613      	mov	r3, r2
 8007222:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007224:	e022      	b.n	800726c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d01e      	beq.n	800726c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722e:	f7fe fd3d 	bl	8005cac <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d302      	bcc.n	8007244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d113      	bne.n	800726c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007248:	f043 0220 	orr.w	r2, r3, #32
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e00f      	b.n	800728c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	bf0c      	ite	eq
 800727c:	2301      	moveq	r3, #1
 800727e:	2300      	movne	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	429a      	cmp	r2, r3
 8007288:	d0cd      	beq.n	8007226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072a0:	e02c      	b.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 f870 	bl	800738c <I2C_IsErrorOccurred>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e02a      	b.n	800730c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d01e      	beq.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fe fcf5 	bl	8005cac <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d113      	bne.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	f043 0220 	orr.w	r2, r3, #32
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e007      	b.n	800730c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b02      	cmp	r3, #2
 8007308:	d1cb      	bne.n	80072a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007320:	e028      	b.n	8007374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f830 	bl	800738c <I2C_IsErrorOccurred>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e026      	b.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fe fcb9 	bl	8005cac <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d113      	bne.n	8007374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	f043 0220 	orr.w	r2, r3, #32
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e007      	b.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b20      	cmp	r3, #32
 8007380:	d1cf      	bne.n	8007322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	; 0x28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d075      	beq.n	80074a4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2210      	movs	r2, #16
 80073be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073c0:	e056      	b.n	8007470 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d052      	beq.n	8007470 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073ca:	f7fe fc6f 	bl	8005cac <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d302      	bcc.n	80073e0 <I2C_IsErrorOccurred+0x54>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d147      	bne.n	8007470 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007402:	d12e      	bne.n	8007462 <I2C_IsErrorOccurred+0xd6>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800740a:	d02a      	beq.n	8007462 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800740c:	7cfb      	ldrb	r3, [r7, #19]
 800740e:	2b20      	cmp	r3, #32
 8007410:	d027      	beq.n	8007462 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007420:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007422:	f7fe fc43 	bl	8005cac <HAL_GetTick>
 8007426:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007428:	e01b      	b.n	8007462 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800742a:	f7fe fc3f 	bl	8005cac <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b19      	cmp	r3, #25
 8007436:	d914      	bls.n	8007462 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	f043 0220 	orr.w	r2, r3, #32
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b20      	cmp	r3, #32
 800746e:	d1dc      	bne.n	800742a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b20      	cmp	r3, #32
 800747c:	d003      	beq.n	8007486 <I2C_IsErrorOccurred+0xfa>
 800747e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007482:	2b00      	cmp	r3, #0
 8007484:	d09d      	beq.n	80073c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800748a:	2b00      	cmp	r3, #0
 800748c:	d103      	bne.n	8007496 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2220      	movs	r2, #32
 8007494:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f043 0304 	orr.w	r3, r3, #4
 800749c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	f043 0308 	orr.w	r3, r3, #8
 80074de:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800750a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007516:	2b00      	cmp	r3, #0
 8007518:	d01c      	beq.n	8007554 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff fe56 	bl	80071cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6859      	ldr	r1, [r3, #4]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b0d      	ldr	r3, [pc, #52]	; (8007560 <I2C_IsErrorOccurred+0x1d4>)
 800752c:	400b      	ands	r3, r1
 800752e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	431a      	orrs	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	; 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	fe00e800 	.word	0xfe00e800

08007564 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	817b      	strh	r3, [r7, #10]
 8007572:	4613      	mov	r3, r2
 8007574:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800757c:	7a7b      	ldrb	r3, [r7, #9]
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007584:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	4313      	orrs	r3, r2
 800758e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007592:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	0d5b      	lsrs	r3, r3, #21
 800759e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <I2C_TransferConfig+0x60>)
 80075a4:	430b      	orrs	r3, r1
 80075a6:	43db      	mvns	r3, r3
 80075a8:	ea02 0103 	and.w	r1, r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075b6:	bf00      	nop
 80075b8:	371c      	adds	r7, #28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	03ff63ff 	.word	0x03ff63ff

080075c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d138      	bne.n	8007650 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e032      	b.n	8007652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2224      	movs	r2, #36	; 0x24
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0201 	bic.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800761a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6819      	ldr	r1, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e000      	b.n	8007652 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007650:	2302      	movs	r3, #2
  }
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b20      	cmp	r3, #32
 8007672:	d139      	bne.n	80076e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800767e:	2302      	movs	r3, #2
 8007680:	e033      	b.n	80076ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2224      	movs	r2, #36	; 0x24
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e000      	b.n	80076ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076e8:	2302      	movs	r3, #2
  }
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
	...

080076f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <HAL_PWREx_GetVoltageRange+0x18>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007704:	4618      	mov	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40007000 	.word	0x40007000

08007714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007722:	d130      	bne.n	8007786 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007724:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800772c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007730:	d038      	beq.n	80077a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007732:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800773c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007740:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007742:	4b1d      	ldr	r3, [pc, #116]	; (80077b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2232      	movs	r2, #50	; 0x32
 8007748:	fb02 f303 	mul.w	r3, r2, r3
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800774e:	fba2 2303 	umull	r2, r3, r2, r3
 8007752:	0c9b      	lsrs	r3, r3, #18
 8007754:	3301      	adds	r3, #1
 8007756:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007758:	e002      	b.n	8007760 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3b01      	subs	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007760:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776c:	d102      	bne.n	8007774 <HAL_PWREx_ControlVoltageScaling+0x60>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f2      	bne.n	800775a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007774:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800777c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007780:	d110      	bne.n	80077a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e00f      	b.n	80077a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800778e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007792:	d007      	beq.n	80077a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007794:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800779c:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800779e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40007000 	.word	0x40007000
 80077b8:	2000000c 	.word	0x2000000c
 80077bc:	431bde83 	.word	0x431bde83

080077c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e3d4      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077d2:	4ba1      	ldr	r3, [pc, #644]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 030c 	and.w	r3, r3, #12
 80077da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077dc:	4b9e      	ldr	r3, [pc, #632]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0310 	and.w	r3, r3, #16
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f000 80e4 	beq.w	80079bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <HAL_RCC_OscConfig+0x4a>
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b0c      	cmp	r3, #12
 80077fe:	f040 808b 	bne.w	8007918 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2b01      	cmp	r3, #1
 8007806:	f040 8087 	bne.w	8007918 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800780a:	4b93      	ldr	r3, [pc, #588]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d005      	beq.n	8007822 <HAL_RCC_OscConfig+0x62>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e3ac      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	4b8c      	ldr	r3, [pc, #560]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <HAL_RCC_OscConfig+0x7c>
 8007832:	4b89      	ldr	r3, [pc, #548]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800783a:	e005      	b.n	8007848 <HAL_RCC_OscConfig+0x88>
 800783c:	4b86      	ldr	r3, [pc, #536]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800783e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007848:	4293      	cmp	r3, r2
 800784a:	d223      	bcs.n	8007894 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fd41 	bl	80082d8 <RCC_SetFlashLatencyFromMSIRange>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e38d      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007860:	4b7d      	ldr	r3, [pc, #500]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a7c      	ldr	r2, [pc, #496]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007866:	f043 0308 	orr.w	r3, r3, #8
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4b7a      	ldr	r3, [pc, #488]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	4977      	ldr	r1, [pc, #476]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800787a:	4313      	orrs	r3, r2
 800787c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800787e:	4b76      	ldr	r3, [pc, #472]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	4972      	ldr	r1, [pc, #456]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800788e:	4313      	orrs	r3, r2
 8007890:	604b      	str	r3, [r1, #4]
 8007892:	e025      	b.n	80078e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007894:	4b70      	ldr	r3, [pc, #448]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a6f      	ldr	r2, [pc, #444]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800789a:	f043 0308 	orr.w	r3, r3, #8
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	4b6d      	ldr	r3, [pc, #436]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	496a      	ldr	r1, [pc, #424]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078b2:	4b69      	ldr	r3, [pc, #420]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	4965      	ldr	r1, [pc, #404]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 fd01 	bl	80082d8 <RCC_SetFlashLatencyFromMSIRange>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e34d      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078e0:	f000 fc36 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 80078e4:	4602      	mov	r2, r0
 80078e6:	4b5c      	ldr	r3, [pc, #368]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	091b      	lsrs	r3, r3, #4
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	495a      	ldr	r1, [pc, #360]	; (8007a5c <HAL_RCC_OscConfig+0x29c>)
 80078f2:	5ccb      	ldrb	r3, [r1, r3]
 80078f4:	f003 031f 	and.w	r3, r3, #31
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
 80078fc:	4a58      	ldr	r2, [pc, #352]	; (8007a60 <HAL_RCC_OscConfig+0x2a0>)
 80078fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007900:	4b58      	ldr	r3, [pc, #352]	; (8007a64 <HAL_RCC_OscConfig+0x2a4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe f981 	bl	8005c0c <HAL_InitTick>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d052      	beq.n	80079ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	e331      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d032      	beq.n	8007986 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007920:	4b4d      	ldr	r3, [pc, #308]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a4c      	ldr	r2, [pc, #304]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007926:	f043 0301 	orr.w	r3, r3, #1
 800792a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800792c:	f7fe f9be 	bl	8005cac <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007932:	e008      	b.n	8007946 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007934:	f7fe f9ba 	bl	8005cac <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d901      	bls.n	8007946 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e31a      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007946:	4b44      	ldr	r3, [pc, #272]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0f0      	beq.n	8007934 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007952:	4b41      	ldr	r3, [pc, #260]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a40      	ldr	r2, [pc, #256]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007958:	f043 0308 	orr.w	r3, r3, #8
 800795c:	6013      	str	r3, [r2, #0]
 800795e:	4b3e      	ldr	r3, [pc, #248]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	493b      	ldr	r1, [pc, #236]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800796c:	4313      	orrs	r3, r2
 800796e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007970:	4b39      	ldr	r3, [pc, #228]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	4936      	ldr	r1, [pc, #216]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007980:	4313      	orrs	r3, r2
 8007982:	604b      	str	r3, [r1, #4]
 8007984:	e01a      	b.n	80079bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007986:	4b34      	ldr	r3, [pc, #208]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a33      	ldr	r2, [pc, #204]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007992:	f7fe f98b 	bl	8005cac <HAL_GetTick>
 8007996:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007998:	e008      	b.n	80079ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800799a:	f7fe f987 	bl	8005cac <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e2e7      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079ac:	4b2a      	ldr	r3, [pc, #168]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f0      	bne.n	800799a <HAL_RCC_OscConfig+0x1da>
 80079b8:	e000      	b.n	80079bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d074      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d005      	beq.n	80079da <HAL_RCC_OscConfig+0x21a>
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d10e      	bne.n	80079f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d10b      	bne.n	80079f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079da:	4b1f      	ldr	r3, [pc, #124]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d064      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x2f0>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d160      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e2c4      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fa:	d106      	bne.n	8007a0a <HAL_RCC_OscConfig+0x24a>
 80079fc:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	e01d      	b.n	8007a46 <HAL_RCC_OscConfig+0x286>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a12:	d10c      	bne.n	8007a2e <HAL_RCC_OscConfig+0x26e>
 8007a14:	4b10      	ldr	r3, [pc, #64]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a0f      	ldr	r2, [pc, #60]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	4b0d      	ldr	r3, [pc, #52]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a0c      	ldr	r2, [pc, #48]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a2a:	6013      	str	r3, [r2, #0]
 8007a2c:	e00b      	b.n	8007a46 <HAL_RCC_OscConfig+0x286>
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	4b07      	ldr	r3, [pc, #28]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a06      	ldr	r2, [pc, #24]	; (8007a58 <HAL_RCC_OscConfig+0x298>)
 8007a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d01c      	beq.n	8007a88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4e:	f7fe f92d 	bl	8005cac <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a54:	e011      	b.n	8007a7a <HAL_RCC_OscConfig+0x2ba>
 8007a56:	bf00      	nop
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	0801707c 	.word	0x0801707c
 8007a60:	2000000c 	.word	0x2000000c
 8007a64:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a68:	f7fe f920 	bl	8005cac <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b64      	cmp	r3, #100	; 0x64
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e280      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a7a:	4baf      	ldr	r3, [pc, #700]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f0      	beq.n	8007a68 <HAL_RCC_OscConfig+0x2a8>
 8007a86:	e014      	b.n	8007ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fe f910 	bl	8005cac <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a90:	f7fe f90c 	bl	8005cac <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b64      	cmp	r3, #100	; 0x64
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e26c      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aa2:	4ba5      	ldr	r3, [pc, #660]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f0      	bne.n	8007a90 <HAL_RCC_OscConfig+0x2d0>
 8007aae:	e000      	b.n	8007ab2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d060      	beq.n	8007b80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x310>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b0c      	cmp	r3, #12
 8007ac8:	d119      	bne.n	8007afe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d116      	bne.n	8007afe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ad0:	4b99      	ldr	r3, [pc, #612]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x328>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e249      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae8:	4b93      	ldr	r3, [pc, #588]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	061b      	lsls	r3, r3, #24
 8007af6:	4990      	ldr	r1, [pc, #576]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007afc:	e040      	b.n	8007b80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d023      	beq.n	8007b4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b06:	4b8c      	ldr	r3, [pc, #560]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a8b      	ldr	r2, [pc, #556]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b12:	f7fe f8cb 	bl	8005cac <HAL_GetTick>
 8007b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b18:	e008      	b.n	8007b2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b1a:	f7fe f8c7 	bl	8005cac <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d901      	bls.n	8007b2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e227      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b2c:	4b82      	ldr	r3, [pc, #520]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0f0      	beq.n	8007b1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b38:	4b7f      	ldr	r3, [pc, #508]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	061b      	lsls	r3, r3, #24
 8007b46:	497c      	ldr	r1, [pc, #496]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	604b      	str	r3, [r1, #4]
 8007b4c:	e018      	b.n	8007b80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b4e:	4b7a      	ldr	r3, [pc, #488]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a79      	ldr	r2, [pc, #484]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5a:	f7fe f8a7 	bl	8005cac <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b60:	e008      	b.n	8007b74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b62:	f7fe f8a3 	bl	8005cac <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e203      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b74:	4b70      	ldr	r3, [pc, #448]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f0      	bne.n	8007b62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0308 	and.w	r3, r3, #8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d03c      	beq.n	8007c06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d01c      	beq.n	8007bce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b94:	4b68      	ldr	r3, [pc, #416]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b9a:	4a67      	ldr	r2, [pc, #412]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba4:	f7fe f882 	bl	8005cac <HAL_GetTick>
 8007ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007baa:	e008      	b.n	8007bbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bac:	f7fe f87e 	bl	8005cac <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e1de      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bbe:	4b5e      	ldr	r3, [pc, #376]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0ef      	beq.n	8007bac <HAL_RCC_OscConfig+0x3ec>
 8007bcc:	e01b      	b.n	8007c06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bce:	4b5a      	ldr	r3, [pc, #360]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bd4:	4a58      	ldr	r2, [pc, #352]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bde:	f7fe f865 	bl	8005cac <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007be6:	f7fe f861 	bl	8005cac <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e1c1      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bf8:	4b4f      	ldr	r3, [pc, #316]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1ef      	bne.n	8007be6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80a6 	beq.w	8007d60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c14:	2300      	movs	r3, #0
 8007c16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007c18:	4b47      	ldr	r3, [pc, #284]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10d      	bne.n	8007c40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c24:	4b44      	ldr	r3, [pc, #272]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c28:	4a43      	ldr	r2, [pc, #268]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c30:	4b41      	ldr	r3, [pc, #260]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c40:	4b3e      	ldr	r3, [pc, #248]	; (8007d3c <HAL_RCC_OscConfig+0x57c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d118      	bne.n	8007c7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c4c:	4b3b      	ldr	r3, [pc, #236]	; (8007d3c <HAL_RCC_OscConfig+0x57c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a3a      	ldr	r2, [pc, #232]	; (8007d3c <HAL_RCC_OscConfig+0x57c>)
 8007c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c58:	f7fe f828 	bl	8005cac <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c60:	f7fe f824 	bl	8005cac <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e184      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c72:	4b32      	ldr	r3, [pc, #200]	; (8007d3c <HAL_RCC_OscConfig+0x57c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0f0      	beq.n	8007c60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d108      	bne.n	8007c98 <HAL_RCC_OscConfig+0x4d8>
 8007c86:	4b2c      	ldr	r3, [pc, #176]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8c:	4a2a      	ldr	r2, [pc, #168]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c96:	e024      	b.n	8007ce2 <HAL_RCC_OscConfig+0x522>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	d110      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x502>
 8007ca0:	4b25      	ldr	r3, [pc, #148]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca6:	4a24      	ldr	r2, [pc, #144]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007ca8:	f043 0304 	orr.w	r3, r3, #4
 8007cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cb0:	4b21      	ldr	r3, [pc, #132]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	4a20      	ldr	r2, [pc, #128]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007cb8:	f043 0301 	orr.w	r3, r3, #1
 8007cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cc0:	e00f      	b.n	8007ce2 <HAL_RCC_OscConfig+0x522>
 8007cc2:	4b1d      	ldr	r3, [pc, #116]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc8:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007cda:	f023 0304 	bic.w	r3, r3, #4
 8007cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cea:	f7fd ffdf 	bl	8005cac <HAL_GetTick>
 8007cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf0:	e00a      	b.n	8007d08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf2:	f7fd ffdb 	bl	8005cac <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d901      	bls.n	8007d08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e139      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d08:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <HAL_RCC_OscConfig+0x578>)
 8007d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0ed      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x532>
 8007d16:	e01a      	b.n	8007d4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d18:	f7fd ffc8 	bl	8005cac <HAL_GetTick>
 8007d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d1e:	e00f      	b.n	8007d40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d20:	f7fd ffc4 	bl	8005cac <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d906      	bls.n	8007d40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e122      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
 8007d36:	bf00      	nop
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d40:	4b90      	ldr	r3, [pc, #576]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e8      	bne.n	8007d20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d105      	bne.n	8007d60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d54:	4b8b      	ldr	r3, [pc, #556]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d58:	4a8a      	ldr	r2, [pc, #552]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8108 	beq.w	8007f7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	f040 80d0 	bne.w	8007f14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007d74:	4b83      	ldr	r3, [pc, #524]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f003 0203 	and.w	r2, r3, #3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d130      	bne.n	8007dea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	3b01      	subs	r3, #1
 8007d94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d127      	bne.n	8007dea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d11f      	bne.n	8007dea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007db4:	2a07      	cmp	r2, #7
 8007db6:	bf14      	ite	ne
 8007db8:	2201      	movne	r2, #1
 8007dba:	2200      	moveq	r2, #0
 8007dbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d113      	bne.n	8007dea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dcc:	085b      	lsrs	r3, r3, #1
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d109      	bne.n	8007dea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	3b01      	subs	r3, #1
 8007de4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d06e      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b0c      	cmp	r3, #12
 8007dee:	d069      	beq.n	8007ec4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007df0:	4b64      	ldr	r3, [pc, #400]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007dfc:	4b61      	ldr	r3, [pc, #388]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e0b7      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007e0c:	4b5d      	ldr	r3, [pc, #372]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a5c      	ldr	r2, [pc, #368]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e18:	f7fd ff48 	bl	8005cac <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e20:	f7fd ff44 	bl	8005cac <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e0a4      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e32:	4b54      	ldr	r3, [pc, #336]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e3e:	4b51      	ldr	r3, [pc, #324]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	4b51      	ldr	r3, [pc, #324]	; (8007f88 <HAL_RCC_OscConfig+0x7c8>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e4e:	3a01      	subs	r2, #1
 8007e50:	0112      	lsls	r2, r2, #4
 8007e52:	4311      	orrs	r1, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e58:	0212      	lsls	r2, r2, #8
 8007e5a:	4311      	orrs	r1, r2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007e60:	0852      	lsrs	r2, r2, #1
 8007e62:	3a01      	subs	r2, #1
 8007e64:	0552      	lsls	r2, r2, #21
 8007e66:	4311      	orrs	r1, r2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007e6c:	0852      	lsrs	r2, r2, #1
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	0652      	lsls	r2, r2, #25
 8007e72:	4311      	orrs	r1, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e78:	0912      	lsrs	r2, r2, #4
 8007e7a:	0452      	lsls	r2, r2, #17
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	4941      	ldr	r1, [pc, #260]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007e84:	4b3f      	ldr	r3, [pc, #252]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a3e      	ldr	r2, [pc, #248]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e90:	4b3c      	ldr	r3, [pc, #240]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4a3b      	ldr	r2, [pc, #236]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e9c:	f7fd ff06 	bl	8005cac <HAL_GetTick>
 8007ea0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ea2:	e008      	b.n	8007eb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ea4:	f7fd ff02 	bl	8005cac <HAL_GetTick>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d901      	bls.n	8007eb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e062      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007eb6:	4b33      	ldr	r3, [pc, #204]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0f0      	beq.n	8007ea4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ec2:	e05a      	b.n	8007f7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e059      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ec8:	4b2e      	ldr	r3, [pc, #184]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d152      	bne.n	8007f7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a2a      	ldr	r2, [pc, #168]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ede:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ee0:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4a27      	ldr	r2, [pc, #156]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007eec:	f7fd fede 	bl	8005cac <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fd feda 	bl	8005cac <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e03a      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0f0      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x734>
 8007f12:	e032      	b.n	8007f7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b0c      	cmp	r3, #12
 8007f18:	d02d      	beq.n	8007f76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a19      	ldr	r2, [pc, #100]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007f26:	4b17      	ldr	r3, [pc, #92]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d105      	bne.n	8007f3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007f32:	4b14      	ldr	r3, [pc, #80]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f38:	f023 0303 	bic.w	r3, r3, #3
 8007f3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f4e:	f7fd fead 	bl	8005cac <HAL_GetTick>
 8007f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f54:	e008      	b.n	8007f68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f56:	f7fd fea9 	bl	8005cac <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e009      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f68:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <HAL_RCC_OscConfig+0x7c4>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f0      	bne.n	8007f56 <HAL_RCC_OscConfig+0x796>
 8007f74:	e001      	b.n	8007f7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40021000 	.word	0x40021000
 8007f88:	f99d808c 	.word	0xf99d808c

08007f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0c8      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b66      	ldr	r3, [pc, #408]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d910      	bls.n	8007fd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b63      	ldr	r3, [pc, #396]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 0207 	bic.w	r2, r3, #7
 8007fb6:	4961      	ldr	r1, [pc, #388]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	4b5f      	ldr	r3, [pc, #380]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d001      	beq.n	8007fd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e0b0      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d04c      	beq.n	8008076 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fe4:	4b56      	ldr	r3, [pc, #344]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d121      	bne.n	8008034 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e09e      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d107      	bne.n	800800c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ffc:	4b50      	ldr	r3, [pc, #320]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d115      	bne.n	8008034 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e092      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d107      	bne.n	8008024 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008014:	4b4a      	ldr	r3, [pc, #296]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e086      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008024:	4b46      	ldr	r3, [pc, #280]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e07e      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008034:	4b42      	ldr	r3, [pc, #264]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f023 0203 	bic.w	r2, r3, #3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	493f      	ldr	r1, [pc, #252]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008046:	f7fd fe31 	bl	8005cac <HAL_GetTick>
 800804a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800804c:	e00a      	b.n	8008064 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800804e:	f7fd fe2d 	bl	8005cac <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	; 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e066      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008064:	4b36      	ldr	r3, [pc, #216]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 020c 	and.w	r2, r3, #12
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	429a      	cmp	r2, r3
 8008074:	d1eb      	bne.n	800804e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008082:	4b2f      	ldr	r3, [pc, #188]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	492c      	ldr	r1, [pc, #176]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 8008090:	4313      	orrs	r3, r2
 8008092:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008094:	4b29      	ldr	r3, [pc, #164]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0307 	and.w	r3, r3, #7
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d210      	bcs.n	80080c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080a2:	4b26      	ldr	r3, [pc, #152]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f023 0207 	bic.w	r2, r3, #7
 80080aa:	4924      	ldr	r1, [pc, #144]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080b2:	4b22      	ldr	r3, [pc, #136]	; (800813c <HAL_RCC_ClockConfig+0x1b0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d001      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e036      	b.n	8008132 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4918      	ldr	r1, [pc, #96]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080ee:	4b14      	ldr	r3, [pc, #80]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4910      	ldr	r1, [pc, #64]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008102:	f000 f825 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 8008106:	4602      	mov	r2, r0
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <HAL_RCC_ClockConfig+0x1b4>)
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	091b      	lsrs	r3, r3, #4
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	490c      	ldr	r1, [pc, #48]	; (8008144 <HAL_RCC_ClockConfig+0x1b8>)
 8008114:	5ccb      	ldrb	r3, [r1, r3]
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	fa22 f303 	lsr.w	r3, r2, r3
 800811e:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <HAL_RCC_ClockConfig+0x1bc>)
 8008120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008122:	4b0a      	ldr	r3, [pc, #40]	; (800814c <HAL_RCC_ClockConfig+0x1c0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd fd70 	bl	8005c0c <HAL_InitTick>
 800812c:	4603      	mov	r3, r0
 800812e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008130:	7afb      	ldrb	r3, [r7, #11]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	40022000 	.word	0x40022000
 8008140:	40021000 	.word	0x40021000
 8008144:	0801707c 	.word	0x0801707c
 8008148:	2000000c 	.word	0x2000000c
 800814c:	200000e8 	.word	0x200000e8

08008150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008150:	b480      	push	{r7}
 8008152:	b089      	sub	sp, #36	; 0x24
 8008154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
 800815a:	2300      	movs	r3, #0
 800815c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800815e:	4b3e      	ldr	r3, [pc, #248]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
 8008166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008168:	4b3b      	ldr	r3, [pc, #236]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <HAL_RCC_GetSysClockFreq+0x34>
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2b0c      	cmp	r3, #12
 800817c:	d121      	bne.n	80081c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d11e      	bne.n	80081c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008184:	4b34      	ldr	r3, [pc, #208]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d107      	bne.n	80081a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008190:	4b31      	ldr	r3, [pc, #196]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 8008192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	61fb      	str	r3, [r7, #28]
 800819e:	e005      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80081a0:	4b2d      	ldr	r3, [pc, #180]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	091b      	lsrs	r3, r3, #4
 80081a6:	f003 030f 	and.w	r3, r3, #15
 80081aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80081ac:	4a2b      	ldr	r2, [pc, #172]	; (800825c <HAL_RCC_GetSysClockFreq+0x10c>)
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10d      	bne.n	80081d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80081c0:	e00a      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d102      	bne.n	80081ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80081c8:	4b25      	ldr	r3, [pc, #148]	; (8008260 <HAL_RCC_GetSysClockFreq+0x110>)
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	e004      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	2b08      	cmp	r3, #8
 80081d2:	d101      	bne.n	80081d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80081d4:	4b23      	ldr	r3, [pc, #140]	; (8008264 <HAL_RCC_GetSysClockFreq+0x114>)
 80081d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	d134      	bne.n	8008248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80081de:	4b1e      	ldr	r3, [pc, #120]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d003      	beq.n	80081f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d003      	beq.n	80081fc <HAL_RCC_GetSysClockFreq+0xac>
 80081f4:	e005      	b.n	8008202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80081f6:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <HAL_RCC_GetSysClockFreq+0x110>)
 80081f8:	617b      	str	r3, [r7, #20]
      break;
 80081fa:	e005      	b.n	8008208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80081fc:	4b19      	ldr	r3, [pc, #100]	; (8008264 <HAL_RCC_GetSysClockFreq+0x114>)
 80081fe:	617b      	str	r3, [r7, #20]
      break;
 8008200:	e002      	b.n	8008208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	617b      	str	r3, [r7, #20]
      break;
 8008206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008208:	4b13      	ldr	r3, [pc, #76]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	091b      	lsrs	r3, r3, #4
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	3301      	adds	r3, #1
 8008214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	0a1b      	lsrs	r3, r3, #8
 800821c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008220:	697a      	ldr	r2, [r7, #20]
 8008222:	fb02 f203 	mul.w	r2, r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	fbb2 f3f3 	udiv	r3, r2, r3
 800822c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800822e:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <HAL_RCC_GetSysClockFreq+0x108>)
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	0e5b      	lsrs	r3, r3, #25
 8008234:	f003 0303 	and.w	r3, r3, #3
 8008238:	3301      	adds	r3, #1
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	fbb2 f3f3 	udiv	r3, r2, r3
 8008246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008248:	69bb      	ldr	r3, [r7, #24]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3724      	adds	r7, #36	; 0x24
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40021000 	.word	0x40021000
 800825c:	08017094 	.word	0x08017094
 8008260:	00f42400 	.word	0x00f42400
 8008264:	007a1200 	.word	0x007a1200

08008268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <HAL_RCC_GetHCLKFreq+0x14>)
 800826e:	681b      	ldr	r3, [r3, #0]
}
 8008270:	4618      	mov	r0, r3
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	2000000c 	.word	0x2000000c

08008280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008284:	f7ff fff0 	bl	8008268 <HAL_RCC_GetHCLKFreq>
 8008288:	4602      	mov	r2, r0
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	0a1b      	lsrs	r3, r3, #8
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	4904      	ldr	r1, [pc, #16]	; (80082a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008296:	5ccb      	ldrb	r3, [r1, r3]
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	40021000 	.word	0x40021000
 80082a8:	0801708c 	.word	0x0801708c

080082ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80082b0:	f7ff ffda 	bl	8008268 <HAL_RCC_GetHCLKFreq>
 80082b4:	4602      	mov	r2, r0
 80082b6:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	0adb      	lsrs	r3, r3, #11
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	4904      	ldr	r1, [pc, #16]	; (80082d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80082c2:	5ccb      	ldrb	r3, [r1, r3]
 80082c4:	f003 031f 	and.w	r3, r3, #31
 80082c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40021000 	.word	0x40021000
 80082d4:	0801708c 	.word	0x0801708c

080082d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80082e0:	2300      	movs	r3, #0
 80082e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80082e4:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80082f0:	f7ff fa02 	bl	80076f8 <HAL_PWREx_GetVoltageRange>
 80082f4:	6178      	str	r0, [r7, #20]
 80082f6:	e014      	b.n	8008322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fc:	4a24      	ldr	r2, [pc, #144]	; (8008390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80082fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008302:	6593      	str	r3, [r2, #88]	; 0x58
 8008304:	4b22      	ldr	r3, [pc, #136]	; (8008390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008310:	f7ff f9f2 	bl	80076f8 <HAL_PWREx_GetVoltageRange>
 8008314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008316:	4b1e      	ldr	r3, [pc, #120]	; (8008390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831a:	4a1d      	ldr	r2, [pc, #116]	; (8008390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800831c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008320:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008328:	d10b      	bne.n	8008342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b80      	cmp	r3, #128	; 0x80
 800832e:	d919      	bls.n	8008364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2ba0      	cmp	r3, #160	; 0xa0
 8008334:	d902      	bls.n	800833c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008336:	2302      	movs	r3, #2
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	e013      	b.n	8008364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800833c:	2301      	movs	r3, #1
 800833e:	613b      	str	r3, [r7, #16]
 8008340:	e010      	b.n	8008364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b80      	cmp	r3, #128	; 0x80
 8008346:	d902      	bls.n	800834e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008348:	2303      	movs	r3, #3
 800834a:	613b      	str	r3, [r7, #16]
 800834c:	e00a      	b.n	8008364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b80      	cmp	r3, #128	; 0x80
 8008352:	d102      	bne.n	800835a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008354:	2302      	movs	r3, #2
 8008356:	613b      	str	r3, [r7, #16]
 8008358:	e004      	b.n	8008364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b70      	cmp	r3, #112	; 0x70
 800835e:	d101      	bne.n	8008364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008360:	2301      	movs	r3, #1
 8008362:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008364:	4b0b      	ldr	r3, [pc, #44]	; (8008394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f023 0207 	bic.w	r2, r3, #7
 800836c:	4909      	ldr	r1, [pc, #36]	; (8008394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008374:	4b07      	ldr	r3, [pc, #28]	; (8008394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	693a      	ldr	r2, [r7, #16]
 800837e:	429a      	cmp	r2, r3
 8008380:	d001      	beq.n	8008386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3718      	adds	r7, #24
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40021000 	.word	0x40021000
 8008394:	40022000 	.word	0x40022000

08008398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083a0:	2300      	movs	r3, #0
 80083a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083a4:	2300      	movs	r3, #0
 80083a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d041      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083bc:	d02a      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80083be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80083c2:	d824      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083c8:	d008      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80083ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ce:	d81e      	bhi.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80083d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083d8:	d010      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80083da:	e018      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80083dc:	4b86      	ldr	r3, [pc, #536]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	4a85      	ldr	r2, [pc, #532]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083e8:	e015      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3304      	adds	r3, #4
 80083ee:	2100      	movs	r1, #0
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fabb 	bl	800896c <RCCEx_PLLSAI1_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80083fa:	e00c      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3320      	adds	r3, #32
 8008400:	2100      	movs	r1, #0
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fba6 	bl	8008b54 <RCCEx_PLLSAI2_Config>
 8008408:	4603      	mov	r3, r0
 800840a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800840c:	e003      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	74fb      	strb	r3, [r7, #19]
      break;
 8008412:	e000      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008416:	7cfb      	ldrb	r3, [r7, #19]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10b      	bne.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800841c:	4b76      	ldr	r3, [pc, #472]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800841e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842a:	4973      	ldr	r1, [pc, #460]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800842c:	4313      	orrs	r3, r2
 800842e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008432:	e001      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	7cfb      	ldrb	r3, [r7, #19]
 8008436:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d041      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008448:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800844c:	d02a      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800844e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008452:	d824      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008458:	d008      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800845a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800845e:	d81e      	bhi.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008468:	d010      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800846a:	e018      	b.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800846c:	4b62      	ldr	r3, [pc, #392]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	4a61      	ldr	r2, [pc, #388]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008476:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008478:	e015      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	3304      	adds	r3, #4
 800847e:	2100      	movs	r1, #0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 fa73 	bl	800896c <RCCEx_PLLSAI1_Config>
 8008486:	4603      	mov	r3, r0
 8008488:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800848a:	e00c      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3320      	adds	r3, #32
 8008490:	2100      	movs	r1, #0
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fb5e 	bl	8008b54 <RCCEx_PLLSAI2_Config>
 8008498:	4603      	mov	r3, r0
 800849a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800849c:	e003      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	74fb      	strb	r3, [r7, #19]
      break;
 80084a2:	e000      	b.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80084a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084a6:	7cfb      	ldrb	r3, [r7, #19]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10b      	bne.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084ac:	4b52      	ldr	r3, [pc, #328]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ba:	494f      	ldr	r1, [pc, #316]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80084c2:	e001      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084c4:	7cfb      	ldrb	r3, [r7, #19]
 80084c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 80a0 	beq.w	8008616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084d6:	2300      	movs	r3, #0
 80084d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80084da:	4b47      	ldr	r3, [pc, #284]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f0:	4b41      	ldr	r3, [pc, #260]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	4a40      	ldr	r2, [pc, #256]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fa:	6593      	str	r3, [r2, #88]	; 0x58
 80084fc:	4b3e      	ldr	r3, [pc, #248]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008508:	2301      	movs	r3, #1
 800850a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800850c:	4b3b      	ldr	r3, [pc, #236]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a3a      	ldr	r2, [pc, #232]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008518:	f7fd fbc8 	bl	8005cac <HAL_GetTick>
 800851c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800851e:	e009      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008520:	f7fd fbc4 	bl	8005cac <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d902      	bls.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	74fb      	strb	r3, [r7, #19]
        break;
 8008532:	e005      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008534:	4b31      	ldr	r3, [pc, #196]	; (80085fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0ef      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008540:	7cfb      	ldrb	r3, [r7, #19]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d15c      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008546:	4b2c      	ldr	r3, [pc, #176]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01f      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	d019      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008570:	4b21      	ldr	r3, [pc, #132]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008576:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008580:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008586:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008590:	4a19      	ldr	r2, [pc, #100]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d016      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a2:	f7fd fb83 	bl	8005cac <HAL_GetTick>
 80085a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a8:	e00b      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085aa:	f7fd fb7f 	bl	8005cac <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d902      	bls.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	74fb      	strb	r3, [r7, #19]
            break;
 80085c0:	e006      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085c2:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ec      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80085d0:	7cfb      	ldrb	r3, [r7, #19]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10c      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e6:	4904      	ldr	r1, [pc, #16]	; (80085f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80085ee:	e009      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80085f0:	7cfb      	ldrb	r3, [r7, #19]
 80085f2:	74bb      	strb	r3, [r7, #18]
 80085f4:	e006      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80085f6:	bf00      	nop
 80085f8:	40021000 	.word	0x40021000
 80085fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008604:	7c7b      	ldrb	r3, [r7, #17]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d105      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800860a:	4b9e      	ldr	r3, [pc, #632]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800860c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860e:	4a9d      	ldr	r2, [pc, #628]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008614:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008622:	4b98      	ldr	r3, [pc, #608]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008628:	f023 0203 	bic.w	r2, r3, #3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	4994      	ldr	r1, [pc, #592]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008644:	4b8f      	ldr	r3, [pc, #572]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800864a:	f023 020c 	bic.w	r2, r3, #12
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008652:	498c      	ldr	r1, [pc, #560]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008654:	4313      	orrs	r3, r2
 8008656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0304 	and.w	r3, r3, #4
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00a      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008666:	4b87      	ldr	r3, [pc, #540]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	4983      	ldr	r1, [pc, #524]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008676:	4313      	orrs	r3, r2
 8008678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0308 	and.w	r3, r3, #8
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00a      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008688:	4b7e      	ldr	r3, [pc, #504]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800868a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800868e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	497b      	ldr	r1, [pc, #492]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008698:	4313      	orrs	r3, r2
 800869a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086aa:	4b76      	ldr	r3, [pc, #472]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086b8:	4972      	ldr	r1, [pc, #456]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086cc:	4b6d      	ldr	r3, [pc, #436]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086da:	496a      	ldr	r1, [pc, #424]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ee:	4b65      	ldr	r3, [pc, #404]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fc:	4961      	ldr	r1, [pc, #388]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008710:	4b5c      	ldr	r3, [pc, #368]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800871e:	4959      	ldr	r1, [pc, #356]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008720:	4313      	orrs	r3, r2
 8008722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008732:	4b54      	ldr	r3, [pc, #336]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008738:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008740:	4950      	ldr	r1, [pc, #320]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008742:	4313      	orrs	r3, r2
 8008744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008754:	4b4b      	ldr	r3, [pc, #300]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	4948      	ldr	r1, [pc, #288]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008764:	4313      	orrs	r3, r2
 8008766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00a      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008776:	4b43      	ldr	r3, [pc, #268]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008784:	493f      	ldr	r1, [pc, #252]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008786:	4313      	orrs	r3, r2
 8008788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d028      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008798:	4b3a      	ldr	r3, [pc, #232]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a6:	4937      	ldr	r1, [pc, #220]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087b6:	d106      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80087b8:	4b32      	ldr	r3, [pc, #200]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a31      	ldr	r2, [pc, #196]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087c2:	60d3      	str	r3, [r2, #12]
 80087c4:	e011      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087ce:	d10c      	bne.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	2101      	movs	r1, #1
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f8c8 	bl	800896c <RCCEx_PLLSAI1_Config>
 80087dc:	4603      	mov	r3, r0
 80087de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80087e0:	7cfb      	ldrb	r3, [r7, #19]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80087e6:	7cfb      	ldrb	r3, [r7, #19]
 80087e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d028      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087f6:	4b23      	ldr	r3, [pc, #140]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008804:	491f      	ldr	r1, [pc, #124]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008806:	4313      	orrs	r3, r2
 8008808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008814:	d106      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008816:	4b1b      	ldr	r3, [pc, #108]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	4a1a      	ldr	r2, [pc, #104]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800881c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008820:	60d3      	str	r3, [r2, #12]
 8008822:	e011      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800882c:	d10c      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	3304      	adds	r3, #4
 8008832:	2101      	movs	r1, #1
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f899 	bl	800896c <RCCEx_PLLSAI1_Config>
 800883a:	4603      	mov	r3, r0
 800883c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800883e:	7cfb      	ldrb	r3, [r7, #19]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008844:	7cfb      	ldrb	r3, [r7, #19]
 8008846:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d02b      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008862:	4908      	ldr	r1, [pc, #32]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008872:	d109      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008874:	4b03      	ldr	r3, [pc, #12]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	4a02      	ldr	r2, [pc, #8]	; (8008884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800887a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800887e:	60d3      	str	r3, [r2, #12]
 8008880:	e014      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008882:	bf00      	nop
 8008884:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800888c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008890:	d10c      	bne.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3304      	adds	r3, #4
 8008896:	2101      	movs	r1, #1
 8008898:	4618      	mov	r0, r3
 800889a:	f000 f867 	bl	800896c <RCCEx_PLLSAI1_Config>
 800889e:	4603      	mov	r3, r0
 80088a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088a2:	7cfb      	ldrb	r3, [r7, #19]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80088a8:	7cfb      	ldrb	r3, [r7, #19]
 80088aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d02f      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80088b8:	4b2b      	ldr	r3, [pc, #172]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088c6:	4928      	ldr	r1, [pc, #160]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088d6:	d10d      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3304      	adds	r3, #4
 80088dc:	2102      	movs	r1, #2
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f844 	bl	800896c <RCCEx_PLLSAI1_Config>
 80088e4:	4603      	mov	r3, r0
 80088e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088e8:	7cfb      	ldrb	r3, [r7, #19]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d014      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80088ee:	7cfb      	ldrb	r3, [r7, #19]
 80088f0:	74bb      	strb	r3, [r7, #18]
 80088f2:	e011      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088fc:	d10c      	bne.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3320      	adds	r3, #32
 8008902:	2102      	movs	r1, #2
 8008904:	4618      	mov	r0, r3
 8008906:	f000 f925 	bl	8008b54 <RCCEx_PLLSAI2_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800890e:	7cfb      	ldrb	r3, [r7, #19]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008914:	7cfb      	ldrb	r3, [r7, #19]
 8008916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008932:	490d      	ldr	r1, [pc, #52]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008946:	4b08      	ldr	r3, [pc, #32]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008956:	4904      	ldr	r1, [pc, #16]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008958:	4313      	orrs	r3, r2
 800895a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800895e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40021000 	.word	0x40021000

0800896c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800897a:	4b75      	ldr	r3, [pc, #468]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d018      	beq.n	80089b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008986:	4b72      	ldr	r3, [pc, #456]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f003 0203 	and.w	r2, r3, #3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d10d      	bne.n	80089b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
       ||
 800899a:	2b00      	cmp	r3, #0
 800899c:	d009      	beq.n	80089b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800899e:	4b6c      	ldr	r3, [pc, #432]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	091b      	lsrs	r3, r3, #4
 80089a4:	f003 0307 	and.w	r3, r3, #7
 80089a8:	1c5a      	adds	r2, r3, #1
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
       ||
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d047      	beq.n	8008a42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	73fb      	strb	r3, [r7, #15]
 80089b6:	e044      	b.n	8008a42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d018      	beq.n	80089f2 <RCCEx_PLLSAI1_Config+0x86>
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d825      	bhi.n	8008a10 <RCCEx_PLLSAI1_Config+0xa4>
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d002      	beq.n	80089ce <RCCEx_PLLSAI1_Config+0x62>
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d009      	beq.n	80089e0 <RCCEx_PLLSAI1_Config+0x74>
 80089cc:	e020      	b.n	8008a10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089ce:	4b60      	ldr	r3, [pc, #384]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d11d      	bne.n	8008a16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089de:	e01a      	b.n	8008a16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80089e0:	4b5b      	ldr	r3, [pc, #364]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d116      	bne.n	8008a1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089f0:	e013      	b.n	8008a1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80089f2:	4b57      	ldr	r3, [pc, #348]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10f      	bne.n	8008a1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80089fe:	4b54      	ldr	r3, [pc, #336]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a0e:	e006      	b.n	8008a1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	73fb      	strb	r3, [r7, #15]
      break;
 8008a14:	e004      	b.n	8008a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10d      	bne.n	8008a42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a26:	4b4a      	ldr	r3, [pc, #296]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6819      	ldr	r1, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	3b01      	subs	r3, #1
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	4944      	ldr	r1, [pc, #272]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d17d      	bne.n	8008b44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008a48:	4b41      	ldr	r3, [pc, #260]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a40      	ldr	r2, [pc, #256]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a54:	f7fd f92a 	bl	8005cac <HAL_GetTick>
 8008a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a5a:	e009      	b.n	8008a70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a5c:	f7fd f926 	bl	8005cac <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d902      	bls.n	8008a70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a6e:	e005      	b.n	8008a7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a70:	4b37      	ldr	r3, [pc, #220]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1ef      	bne.n	8008a5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d160      	bne.n	8008b44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d111      	bne.n	8008aac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008a88:	4b31      	ldr	r3, [pc, #196]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6892      	ldr	r2, [r2, #8]
 8008a98:	0211      	lsls	r1, r2, #8
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	68d2      	ldr	r2, [r2, #12]
 8008a9e:	0912      	lsrs	r2, r2, #4
 8008aa0:	0452      	lsls	r2, r2, #17
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	492a      	ldr	r1, [pc, #168]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	610b      	str	r3, [r1, #16]
 8008aaa:	e027      	b.n	8008afc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d112      	bne.n	8008ad8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ab2:	4b27      	ldr	r3, [pc, #156]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008aba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	6892      	ldr	r2, [r2, #8]
 8008ac2:	0211      	lsls	r1, r2, #8
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	6912      	ldr	r2, [r2, #16]
 8008ac8:	0852      	lsrs	r2, r2, #1
 8008aca:	3a01      	subs	r2, #1
 8008acc:	0552      	lsls	r2, r2, #21
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	491f      	ldr	r1, [pc, #124]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	610b      	str	r3, [r1, #16]
 8008ad6:	e011      	b.n	8008afc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ae0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	6892      	ldr	r2, [r2, #8]
 8008ae8:	0211      	lsls	r1, r2, #8
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6952      	ldr	r2, [r2, #20]
 8008aee:	0852      	lsrs	r2, r2, #1
 8008af0:	3a01      	subs	r2, #1
 8008af2:	0652      	lsls	r2, r2, #25
 8008af4:	430a      	orrs	r2, r1
 8008af6:	4916      	ldr	r1, [pc, #88]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b08:	f7fd f8d0 	bl	8005cac <HAL_GetTick>
 8008b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b0e:	e009      	b.n	8008b24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b10:	f7fd f8cc 	bl	8005cac <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d902      	bls.n	8008b24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	73fb      	strb	r3, [r7, #15]
          break;
 8008b22:	e005      	b.n	8008b30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0ef      	beq.n	8008b10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d106      	bne.n	8008b44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b36:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	4904      	ldr	r1, [pc, #16]	; (8008b50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	40021000 	.word	0x40021000

08008b54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b62:	4b6a      	ldr	r3, [pc, #424]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d018      	beq.n	8008ba0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008b6e:	4b67      	ldr	r3, [pc, #412]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f003 0203 	and.w	r2, r3, #3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d10d      	bne.n	8008b9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
       ||
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d009      	beq.n	8008b9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008b86:	4b61      	ldr	r3, [pc, #388]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	091b      	lsrs	r3, r3, #4
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
       ||
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d047      	beq.n	8008c2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	73fb      	strb	r3, [r7, #15]
 8008b9e:	e044      	b.n	8008c2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d018      	beq.n	8008bda <RCCEx_PLLSAI2_Config+0x86>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d825      	bhi.n	8008bf8 <RCCEx_PLLSAI2_Config+0xa4>
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d002      	beq.n	8008bb6 <RCCEx_PLLSAI2_Config+0x62>
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d009      	beq.n	8008bc8 <RCCEx_PLLSAI2_Config+0x74>
 8008bb4:	e020      	b.n	8008bf8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008bb6:	4b55      	ldr	r3, [pc, #340]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11d      	bne.n	8008bfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bc6:	e01a      	b.n	8008bfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008bc8:	4b50      	ldr	r3, [pc, #320]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d116      	bne.n	8008c02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bd8:	e013      	b.n	8008c02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008bda:	4b4c      	ldr	r3, [pc, #304]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10f      	bne.n	8008c06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008be6:	4b49      	ldr	r3, [pc, #292]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d109      	bne.n	8008c06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bf6:	e006      	b.n	8008c06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfc:	e004      	b.n	8008c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008bfe:	bf00      	nop
 8008c00:	e002      	b.n	8008c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008c02:	bf00      	nop
 8008c04:	e000      	b.n	8008c08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10d      	bne.n	8008c2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c0e:	4b3f      	ldr	r3, [pc, #252]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	430b      	orrs	r3, r1
 8008c24:	4939      	ldr	r1, [pc, #228]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d167      	bne.n	8008d00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008c30:	4b36      	ldr	r3, [pc, #216]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a35      	ldr	r2, [pc, #212]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3c:	f7fd f836 	bl	8005cac <HAL_GetTick>
 8008c40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c42:	e009      	b.n	8008c58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008c44:	f7fd f832 	bl	8005cac <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d902      	bls.n	8008c58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	73fb      	strb	r3, [r7, #15]
        break;
 8008c56:	e005      	b.n	8008c64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008c58:	4b2c      	ldr	r3, [pc, #176]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1ef      	bne.n	8008c44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d14a      	bne.n	8008d00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d111      	bne.n	8008c94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008c70:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	6892      	ldr	r2, [r2, #8]
 8008c80:	0211      	lsls	r1, r2, #8
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	68d2      	ldr	r2, [r2, #12]
 8008c86:	0912      	lsrs	r2, r2, #4
 8008c88:	0452      	lsls	r2, r2, #17
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	491f      	ldr	r1, [pc, #124]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	614b      	str	r3, [r1, #20]
 8008c92:	e011      	b.n	8008cb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6892      	ldr	r2, [r2, #8]
 8008ca4:	0211      	lsls	r1, r2, #8
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6912      	ldr	r2, [r2, #16]
 8008caa:	0852      	lsrs	r2, r2, #1
 8008cac:	3a01      	subs	r2, #1
 8008cae:	0652      	lsls	r2, r2, #25
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	4916      	ldr	r1, [pc, #88]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008cb8:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a13      	ldr	r2, [pc, #76]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc4:	f7fc fff2 	bl	8005cac <HAL_GetTick>
 8008cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008cca:	e009      	b.n	8008ce0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008ccc:	f7fc ffee 	bl	8005cac <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d902      	bls.n	8008ce0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8008cde:	e005      	b.n	8008cec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d0ef      	beq.n	8008ccc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d106      	bne.n	8008d00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cf4:	695a      	ldr	r2, [r3, #20]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	4904      	ldr	r1, [pc, #16]	; (8008d0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40021000 	.word	0x40021000

08008d10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d06c      	beq.n	8008dfc <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7f8 ffca 	bl	8001cd0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	22ca      	movs	r2, #202	; 0xca
 8008d4a:	625a      	str	r2, [r3, #36]	; 0x24
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2253      	movs	r2, #83	; 0x53
 8008d52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f9a0 	bl	800909a <RTC_EnterInitMode>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d14b      	bne.n	8008dfc <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6812      	ldr	r2, [r2, #0]
 8008d6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d76:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6899      	ldr	r1, [r3, #8]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	431a      	orrs	r2, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	68d2      	ldr	r2, [r2, #12]
 8008d9e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6919      	ldr	r1, [r3, #16]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	041a      	lsls	r2, r3, #16
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9a3 	bl	8009100 <RTC_ExitInitMode>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008dbe:	7bfb      	ldrb	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d11b      	bne.n	8008dfc <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0203 	bic.w	r2, r2, #3
 8008dd2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	69da      	ldr	r2, [r3, #28]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e06:	b590      	push	{r4, r7, lr}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	60b9      	str	r1, [r7, #8]
 8008e10:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_RTC_SetTime+0x1a>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e08b      	b.n	8008f38 <HAL_RTC_SetTime+0x132>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	22ca      	movs	r2, #202	; 0xca
 8008e36:	625a      	str	r2, [r3, #36]	; 0x24
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2253      	movs	r2, #83	; 0x53
 8008e3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f92a 	bl	800909a <RTC_EnterInitMode>
 8008e46:	4603      	mov	r3, r0
 8008e48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008e4a:	7cfb      	ldrb	r3, [r7, #19]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d163      	bne.n	8008f18 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d126      	bne.n	8008ea4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2200      	movs	r2, #0
 8008e68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f984 	bl	800917c <RTC_ByteToBcd2>
 8008e74:	4603      	mov	r3, r0
 8008e76:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	785b      	ldrb	r3, [r3, #1]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 f97d 	bl	800917c <RTC_ByteToBcd2>
 8008e82:	4603      	mov	r3, r0
 8008e84:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e86:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	789b      	ldrb	r3, [r3, #2]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 f975 	bl	800917c <RTC_ByteToBcd2>
 8008e92:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e94:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	78db      	ldrb	r3, [r3, #3]
 8008e9c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	e018      	b.n	8008ed6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d102      	bne.n	8008eb8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	785b      	ldrb	r3, [r3, #1]
 8008ec2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ec4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008eca:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	78db      	ldrb	r3, [r3, #3]
 8008ed0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ee0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008ee4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ef4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6899      	ldr	r1, [r3, #8]
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 f8f6 	bl	8009100 <RTC_ExitInitMode>
 8008f14:	4603      	mov	r3, r0
 8008f16:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	22ff      	movs	r2, #255	; 0xff
 8008f1e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008f20:	7cfb      	ldrb	r3, [r7, #19]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d103      	bne.n	8008f2e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008f36:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	371c      	adds	r7, #28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd90      	pop	{r4, r7, pc}

08008f40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f40:	b590      	push	{r4, r7, lr}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d101      	bne.n	8008f5a <HAL_RTC_SetDate+0x1a>
 8008f56:	2302      	movs	r3, #2
 8008f58:	e075      	b.n	8009046 <HAL_RTC_SetDate+0x106>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2202      	movs	r2, #2
 8008f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10e      	bne.n	8008f8e <HAL_RTC_SetDate+0x4e>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	f023 0310 	bic.w	r3, r3, #16
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	330a      	adds	r3, #10
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11c      	bne.n	8008fce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	78db      	ldrb	r3, [r3, #3]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f8ef 	bl	800917c <RTC_ByteToBcd2>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	785b      	ldrb	r3, [r3, #1]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f8e8 	bl	800917c <RTC_ByteToBcd2>
 8008fac:	4603      	mov	r3, r0
 8008fae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fb0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	789b      	ldrb	r3, [r3, #2]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f8e0 	bl	800917c <RTC_ByteToBcd2>
 8008fbc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008fbe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	e00e      	b.n	8008fec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	78db      	ldrb	r3, [r3, #3]
 8008fd2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fda:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008fe0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	22ca      	movs	r2, #202	; 0xca
 8008ff2:	625a      	str	r2, [r3, #36]	; 0x24
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2253      	movs	r2, #83	; 0x53
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f84c 	bl	800909a <RTC_EnterInitMode>
 8009002:	4603      	mov	r3, r0
 8009004:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009006:	7cfb      	ldrb	r3, [r7, #19]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10c      	bne.n	8009026 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009016:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800901a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f86f 	bl	8009100 <RTC_ExitInitMode>
 8009022:	4603      	mov	r3, r0
 8009024:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	22ff      	movs	r2, #255	; 0xff
 800902c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800902e:	7cfb      	ldrb	r3, [r7, #19]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d103      	bne.n	800903c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009044:	7cfb      	ldrb	r3, [r7, #19]
}
 8009046:	4618      	mov	r0, r3
 8009048:	371c      	adds	r7, #28
 800904a:	46bd      	mov	sp, r7
 800904c:	bd90      	pop	{r4, r7, pc}

0800904e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009064:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009066:	f7fc fe21 	bl	8005cac <HAL_GetTick>
 800906a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800906c:	e009      	b.n	8009082 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800906e:	f7fc fe1d 	bl	8005cac <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800907c:	d901      	bls.n	8009082 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e007      	b.n	8009092 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f003 0320 	and.w	r3, r3, #32
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0ee      	beq.n	800906e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d120      	bne.n	80090f6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f04f 32ff 	mov.w	r2, #4294967295
 80090bc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80090be:	f7fc fdf5 	bl	8005cac <HAL_GetTick>
 80090c2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80090c4:	e00d      	b.n	80090e2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80090c6:	f7fc fdf1 	bl	8005cac <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090d4:	d905      	bls.n	80090e2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2203      	movs	r2, #3
 80090de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <RTC_EnterInitMode+0x5c>
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d1e7      	bne.n	80090c6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800910c:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <RTC_ExitInitMode+0x78>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4a19      	ldr	r2, [pc, #100]	; (8009178 <RTC_ExitInitMode+0x78>)
 8009112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009116:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009118:	4b17      	ldr	r3, [pc, #92]	; (8009178 <RTC_ExitInitMode+0x78>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10c      	bne.n	800913e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f7ff ff92 	bl	800904e <HAL_RTC_WaitForSynchro>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d01e      	beq.n	800916e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2203      	movs	r2, #3
 8009134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	73fb      	strb	r3, [r7, #15]
 800913c:	e017      	b.n	800916e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800913e:	4b0e      	ldr	r3, [pc, #56]	; (8009178 <RTC_ExitInitMode+0x78>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	4a0d      	ldr	r2, [pc, #52]	; (8009178 <RTC_ExitInitMode+0x78>)
 8009144:	f023 0320 	bic.w	r3, r3, #32
 8009148:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff ff7f 	bl	800904e <HAL_RTC_WaitForSynchro>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2203      	movs	r2, #3
 800915a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009162:	4b05      	ldr	r3, [pc, #20]	; (8009178 <RTC_ExitInitMode+0x78>)
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	4a04      	ldr	r2, [pc, #16]	; (8009178 <RTC_ExitInitMode+0x78>)
 8009168:	f043 0320 	orr.w	r3, r3, #32
 800916c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	40002800 	.word	0x40002800

0800917c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800918e:	e005      	b.n	800919c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3301      	adds	r3, #1
 8009194:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	3b0a      	subs	r3, #10
 800919a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d8f6      	bhi.n	8009190 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b2db      	uxtb	r3, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e049      	b.n	8009262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7f9 f8e8 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3304      	adds	r3, #4
 80091f8:	4619      	mov	r1, r3
 80091fa:	4610      	mov	r0, r2
 80091fc:	f000 fac0 	bl	8009780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b01      	cmp	r3, #1
 800927e:	d001      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e04f      	b.n	8009324 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a23      	ldr	r2, [pc, #140]	; (8009330 <HAL_TIM_Base_Start_IT+0xc4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01d      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ae:	d018      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1f      	ldr	r2, [pc, #124]	; (8009334 <HAL_TIM_Base_Start_IT+0xc8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d013      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1e      	ldr	r2, [pc, #120]	; (8009338 <HAL_TIM_Base_Start_IT+0xcc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00e      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a1c      	ldr	r2, [pc, #112]	; (800933c <HAL_TIM_Base_Start_IT+0xd0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d009      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a1b      	ldr	r2, [pc, #108]	; (8009340 <HAL_TIM_Base_Start_IT+0xd4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d004      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <HAL_TIM_Base_Start_IT+0xd8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d115      	bne.n	800930e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	4b17      	ldr	r3, [pc, #92]	; (8009348 <HAL_TIM_Base_Start_IT+0xdc>)
 80092ea:	4013      	ands	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d015      	beq.n	8009320 <HAL_TIM_Base_Start_IT+0xb4>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092fa:	d011      	beq.n	8009320 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930c:	e008      	b.n	8009320 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f042 0201 	orr.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e000      	b.n	8009322 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	40012c00 	.word	0x40012c00
 8009334:	40000400 	.word	0x40000400
 8009338:	40000800 	.word	0x40000800
 800933c:	40000c00 	.word	0x40000c00
 8009340:	40013400 	.word	0x40013400
 8009344:	40014000 	.word	0x40014000
 8009348:	00010007 	.word	0x00010007

0800934c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b02      	cmp	r3, #2
 8009360:	d122      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b02      	cmp	r3, #2
 800936e:	d11b      	bne.n	80093a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f06f 0202 	mvn.w	r2, #2
 8009378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d003      	beq.n	8009396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f9d8 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 8009394:	e005      	b.n	80093a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f9ca 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f9db 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	2b04      	cmp	r3, #4
 80093b4:	d122      	bne.n	80093fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d11b      	bne.n	80093fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0204 	mvn.w	r2, #4
 80093cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9ae 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 80093e8:	e005      	b.n	80093f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f9a0 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f9b1 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b08      	cmp	r3, #8
 8009408:	d122      	bne.n	8009450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b08      	cmp	r3, #8
 8009416:	d11b      	bne.n	8009450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0208 	mvn.w	r2, #8
 8009420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f984 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 800943c:	e005      	b.n	800944a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f976 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f987 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f003 0310 	and.w	r3, r3, #16
 800945a:	2b10      	cmp	r3, #16
 800945c:	d122      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b10      	cmp	r3, #16
 800946a:	d11b      	bne.n	80094a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f06f 0210 	mvn.w	r2, #16
 8009474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2208      	movs	r2, #8
 800947a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f95a 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 8009490:	e005      	b.n	800949e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 f94c 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f95d 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0301 	and.w	r3, r3, #1
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d10e      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d107      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f06f 0201 	mvn.w	r2, #1
 80094c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f926 	bl	800971c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094da:	2b80      	cmp	r3, #128	; 0x80
 80094dc:	d10e      	bne.n	80094fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e8:	2b80      	cmp	r3, #128	; 0x80
 80094ea:	d107      	bne.n	80094fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fb08 	bl	8009b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d10e      	bne.n	800952a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009516:	2b80      	cmp	r3, #128	; 0x80
 8009518:	d107      	bne.n	800952a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fafb 	bl	8009b20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009534:	2b40      	cmp	r3, #64	; 0x40
 8009536:	d10e      	bne.n	8009556 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d107      	bne.n	8009556 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800954e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f90b 	bl	800976c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 0320 	and.w	r3, r3, #32
 8009560:	2b20      	cmp	r3, #32
 8009562:	d10e      	bne.n	8009582 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b20      	cmp	r3, #32
 8009570:	d107      	bne.n	8009582 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f06f 0220 	mvn.w	r2, #32
 800957a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 fabb 	bl	8009af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_TIM_ConfigClockSource+0x1c>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e0b6      	b.n	8009714 <HAL_TIM_ConfigClockSource+0x18a>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e2:	d03e      	beq.n	8009662 <HAL_TIM_ConfigClockSource+0xd8>
 80095e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e8:	f200 8087 	bhi.w	80096fa <HAL_TIM_ConfigClockSource+0x170>
 80095ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f0:	f000 8086 	beq.w	8009700 <HAL_TIM_ConfigClockSource+0x176>
 80095f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f8:	d87f      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 80095fa:	2b70      	cmp	r3, #112	; 0x70
 80095fc:	d01a      	beq.n	8009634 <HAL_TIM_ConfigClockSource+0xaa>
 80095fe:	2b70      	cmp	r3, #112	; 0x70
 8009600:	d87b      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 8009602:	2b60      	cmp	r3, #96	; 0x60
 8009604:	d050      	beq.n	80096a8 <HAL_TIM_ConfigClockSource+0x11e>
 8009606:	2b60      	cmp	r3, #96	; 0x60
 8009608:	d877      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 800960a:	2b50      	cmp	r3, #80	; 0x50
 800960c:	d03c      	beq.n	8009688 <HAL_TIM_ConfigClockSource+0xfe>
 800960e:	2b50      	cmp	r3, #80	; 0x50
 8009610:	d873      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 8009612:	2b40      	cmp	r3, #64	; 0x40
 8009614:	d058      	beq.n	80096c8 <HAL_TIM_ConfigClockSource+0x13e>
 8009616:	2b40      	cmp	r3, #64	; 0x40
 8009618:	d86f      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 800961a:	2b30      	cmp	r3, #48	; 0x30
 800961c:	d064      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x15e>
 800961e:	2b30      	cmp	r3, #48	; 0x30
 8009620:	d86b      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 8009622:	2b20      	cmp	r3, #32
 8009624:	d060      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x15e>
 8009626:	2b20      	cmp	r3, #32
 8009628:	d867      	bhi.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
 800962a:	2b00      	cmp	r3, #0
 800962c:	d05c      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x15e>
 800962e:	2b10      	cmp	r3, #16
 8009630:	d05a      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x15e>
 8009632:	e062      	b.n	80096fa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	6899      	ldr	r1, [r3, #8]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f000 f9b0 	bl	80099a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009656:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	609a      	str	r2, [r3, #8]
      break;
 8009660:	e04f      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6899      	ldr	r1, [r3, #8]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f000 f999 	bl	80099a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009684:	609a      	str	r2, [r3, #8]
      break;
 8009686:	e03c      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6859      	ldr	r1, [r3, #4]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	461a      	mov	r2, r3
 8009696:	f000 f90d 	bl	80098b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2150      	movs	r1, #80	; 0x50
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 f966 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 80096a6:	e02c      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	6859      	ldr	r1, [r3, #4]
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	461a      	mov	r2, r3
 80096b6:	f000 f92c 	bl	8009912 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2160      	movs	r1, #96	; 0x60
 80096c0:	4618      	mov	r0, r3
 80096c2:	f000 f956 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 80096c6:	e01c      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	6859      	ldr	r1, [r3, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	461a      	mov	r2, r3
 80096d6:	f000 f8ed 	bl	80098b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2140      	movs	r1, #64	; 0x40
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f946 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 80096e6:	e00c      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f000 f93d 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 80096f8:	e003      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]
      break;
 80096fe:	e000      	b.n	8009702 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009700:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2201      	movs	r2, #1
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a40      	ldr	r2, [pc, #256]	; (8009894 <TIM_Base_SetConfig+0x114>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d013      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979e:	d00f      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a3d      	ldr	r2, [pc, #244]	; (8009898 <TIM_Base_SetConfig+0x118>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00b      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a3c      	ldr	r2, [pc, #240]	; (800989c <TIM_Base_SetConfig+0x11c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d007      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a3b      	ldr	r2, [pc, #236]	; (80098a0 <TIM_Base_SetConfig+0x120>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d003      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a3a      	ldr	r2, [pc, #232]	; (80098a4 <TIM_Base_SetConfig+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d108      	bne.n	80097d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a2f      	ldr	r2, [pc, #188]	; (8009894 <TIM_Base_SetConfig+0x114>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d01f      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e0:	d01b      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a2c      	ldr	r2, [pc, #176]	; (8009898 <TIM_Base_SetConfig+0x118>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d017      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2b      	ldr	r2, [pc, #172]	; (800989c <TIM_Base_SetConfig+0x11c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d013      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a2a      	ldr	r2, [pc, #168]	; (80098a0 <TIM_Base_SetConfig+0x120>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d00f      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a29      	ldr	r2, [pc, #164]	; (80098a4 <TIM_Base_SetConfig+0x124>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d00b      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a28      	ldr	r2, [pc, #160]	; (80098a8 <TIM_Base_SetConfig+0x128>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d007      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <TIM_Base_SetConfig+0x12c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d003      	beq.n	800981a <TIM_Base_SetConfig+0x9a>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <TIM_Base_SetConfig+0x130>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d108      	bne.n	800982c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	4313      	orrs	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	695b      	ldr	r3, [r3, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a10      	ldr	r2, [pc, #64]	; (8009894 <TIM_Base_SetConfig+0x114>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00f      	beq.n	8009878 <TIM_Base_SetConfig+0xf8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a12      	ldr	r2, [pc, #72]	; (80098a4 <TIM_Base_SetConfig+0x124>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00b      	beq.n	8009878 <TIM_Base_SetConfig+0xf8>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a11      	ldr	r2, [pc, #68]	; (80098a8 <TIM_Base_SetConfig+0x128>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d007      	beq.n	8009878 <TIM_Base_SetConfig+0xf8>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a10      	ldr	r2, [pc, #64]	; (80098ac <TIM_Base_SetConfig+0x12c>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d003      	beq.n	8009878 <TIM_Base_SetConfig+0xf8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a0f      	ldr	r2, [pc, #60]	; (80098b0 <TIM_Base_SetConfig+0x130>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d103      	bne.n	8009880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	615a      	str	r2, [r3, #20]
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40012c00 	.word	0x40012c00
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40000c00 	.word	0x40000c00
 80098a4:	40013400 	.word	0x40013400
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800

080098b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a1b      	ldr	r3, [r3, #32]
 80098c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f023 0201 	bic.w	r2, r3, #1
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f023 030a 	bic.w	r3, r3, #10
 80098f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	621a      	str	r2, [r3, #32]
}
 8009906:	bf00      	nop
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009912:	b480      	push	{r7}
 8009914:	b087      	sub	sp, #28
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0210 	bic.w	r2, r3, #16
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800993c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	031b      	lsls	r3, r3, #12
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800994e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	011b      	lsls	r3, r3, #4
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4313      	orrs	r3, r2
 8009990:	f043 0307 	orr.w	r3, r3, #7
 8009994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	609a      	str	r2, [r3, #8]
}
 800999c:	bf00      	nop
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099fc:	2302      	movs	r3, #2
 80099fe:	e068      	b.n	8009ad2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a2e      	ldr	r2, [pc, #184]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d004      	beq.n	8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d108      	bne.n	8009a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1e      	ldr	r2, [pc, #120]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01d      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a72:	d018      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1b      	ldr	r2, [pc, #108]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d013      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1a      	ldr	r2, [pc, #104]	; (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00e      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a18      	ldr	r2, [pc, #96]	; (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d009      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a13      	ldr	r2, [pc, #76]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d004      	beq.n	8009aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a14      	ldr	r2, [pc, #80]	; (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d10c      	bne.n	8009ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	40012c00 	.word	0x40012c00
 8009ae4:	40013400 	.word	0x40013400
 8009ae8:	40000400 	.word	0x40000400
 8009aec:	40000800 	.word	0x40000800
 8009af0:	40000c00 	.word	0x40000c00
 8009af4:	40014000 	.word	0x40014000

08009af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e040      	b.n	8009bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f83a 	bl	8009bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2224      	movs	r2, #36	; 0x24
 8009b60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f94a 	bl	8009e0c <UART_SetConfig>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d101      	bne.n	8009b82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e022      	b.n	8009bc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fbc8 	bl	800a320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f042 0201 	orr.w	r2, r2, #1
 8009bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc4f 	bl	800a464 <UART_CheckIdleState>
 8009bc6:	4603      	mov	r3, r0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08a      	sub	sp, #40	; 0x28
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bf8:	2b20      	cmp	r3, #32
 8009bfa:	f040 8082 	bne.w	8009d02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <HAL_UART_Transmit+0x26>
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e07a      	b.n	8009d04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_UART_Transmit+0x38>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e073      	b.n	8009d04 <HAL_UART_Transmit+0x120>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2221      	movs	r2, #33	; 0x21
 8009c30:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c32:	f7fc f83b 	bl	8005cac <HAL_GetTick>
 8009c36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	88fa      	ldrh	r2, [r7, #6]
 8009c3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	88fa      	ldrh	r2, [r7, #6]
 8009c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c50:	d108      	bne.n	8009c64 <HAL_UART_Transmit+0x80>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d104      	bne.n	8009c64 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	61bb      	str	r3, [r7, #24]
 8009c62:	e003      	b.n	8009c6c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009c74:	e02d      	b.n	8009cd2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2180      	movs	r1, #128	; 0x80
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fc38 	bl	800a4f6 <UART_WaitOnFlagUntilTimeout>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e039      	b.n	8009d04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10b      	bne.n	8009cae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	881a      	ldrh	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ca2:	b292      	uxth	r2, r2
 8009ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	3302      	adds	r3, #2
 8009caa:	61bb      	str	r3, [r7, #24]
 8009cac:	e008      	b.n	8009cc0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	781a      	ldrb	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	b292      	uxth	r2, r2
 8009cb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1cb      	bne.n	8009c76 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2140      	movs	r1, #64	; 0x40
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fc04 	bl	800a4f6 <UART_WaitOnFlagUntilTimeout>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d001      	beq.n	8009cf8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e005      	b.n	8009d04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e000      	b.n	8009d04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009d02:	2302      	movs	r3, #2
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3720      	adds	r7, #32
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08a      	sub	sp, #40	; 0x28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	4613      	mov	r3, r2
 8009d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d142      	bne.n	8009da8 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_UART_Receive_DMA+0x22>
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e03b      	b.n	8009daa <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_UART_Receive_DMA+0x34>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e034      	b.n	8009daa <HAL_UART_Receive_DMA+0x9e>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a18      	ldr	r2, [pc, #96]	; (8009db4 <HAL_UART_Receive_DMA+0xa8>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d01f      	beq.n	8009d98 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d018      	beq.n	8009d98 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	e853 3f00 	ldrex	r3, [r3]
 8009d72:	613b      	str	r3, [r7, #16]
   return(result);
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	461a      	mov	r2, r3
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	623b      	str	r3, [r7, #32]
 8009d86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d88:	69f9      	ldr	r1, [r7, #28]
 8009d8a:	6a3a      	ldr	r2, [r7, #32]
 8009d8c:	e841 2300 	strex	r3, r2, [r1]
 8009d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1e6      	bne.n	8009d66 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009d98:	88fb      	ldrh	r3, [r7, #6]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	68b9      	ldr	r1, [r7, #8]
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 fc6e 	bl	800a680 <UART_Start_Receive_DMA>
 8009da4:	4603      	mov	r3, r0
 8009da6:	e000      	b.n	8009daa <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009da8:	2302      	movs	r3, #2
  }
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3728      	adds	r7, #40	; 0x28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	40008000 	.word	0x40008000

08009db8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e0c:	b5b0      	push	{r4, r5, r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	689a      	ldr	r2, [r3, #8]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	431a      	orrs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	4313      	orrs	r3, r2
 8009e2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	4bad      	ldr	r3, [pc, #692]	; (800a0ec <UART_SetConfig+0x2e0>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	6812      	ldr	r2, [r2, #0]
 8009e3e:	69f9      	ldr	r1, [r7, #28]
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68da      	ldr	r2, [r3, #12]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4aa2      	ldr	r2, [pc, #648]	; (800a0f0 <UART_SetConfig+0x2e4>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d004      	beq.n	8009e74 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	69fa      	ldr	r2, [r7, #28]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a99      	ldr	r2, [pc, #612]	; (800a0f4 <UART_SetConfig+0x2e8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d121      	bne.n	8009ed6 <UART_SetConfig+0xca>
 8009e92:	4b99      	ldr	r3, [pc, #612]	; (800a0f8 <UART_SetConfig+0x2ec>)
 8009e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e98:	f003 0303 	and.w	r3, r3, #3
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d817      	bhi.n	8009ed0 <UART_SetConfig+0xc4>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <UART_SetConfig+0x9c>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009eb9 	.word	0x08009eb9
 8009eac:	08009ec5 	.word	0x08009ec5
 8009eb0:	08009ebf 	.word	0x08009ebf
 8009eb4:	08009ecb 	.word	0x08009ecb
 8009eb8:	2301      	movs	r3, #1
 8009eba:	76fb      	strb	r3, [r7, #27]
 8009ebc:	e0e7      	b.n	800a08e <UART_SetConfig+0x282>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	76fb      	strb	r3, [r7, #27]
 8009ec2:	e0e4      	b.n	800a08e <UART_SetConfig+0x282>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	76fb      	strb	r3, [r7, #27]
 8009ec8:	e0e1      	b.n	800a08e <UART_SetConfig+0x282>
 8009eca:	2308      	movs	r3, #8
 8009ecc:	76fb      	strb	r3, [r7, #27]
 8009ece:	e0de      	b.n	800a08e <UART_SetConfig+0x282>
 8009ed0:	2310      	movs	r3, #16
 8009ed2:	76fb      	strb	r3, [r7, #27]
 8009ed4:	e0db      	b.n	800a08e <UART_SetConfig+0x282>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a88      	ldr	r2, [pc, #544]	; (800a0fc <UART_SetConfig+0x2f0>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d132      	bne.n	8009f46 <UART_SetConfig+0x13a>
 8009ee0:	4b85      	ldr	r3, [pc, #532]	; (800a0f8 <UART_SetConfig+0x2ec>)
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee6:	f003 030c 	and.w	r3, r3, #12
 8009eea:	2b0c      	cmp	r3, #12
 8009eec:	d828      	bhi.n	8009f40 <UART_SetConfig+0x134>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <UART_SetConfig+0xe8>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009f29 	.word	0x08009f29
 8009ef8:	08009f41 	.word	0x08009f41
 8009efc:	08009f41 	.word	0x08009f41
 8009f00:	08009f41 	.word	0x08009f41
 8009f04:	08009f35 	.word	0x08009f35
 8009f08:	08009f41 	.word	0x08009f41
 8009f0c:	08009f41 	.word	0x08009f41
 8009f10:	08009f41 	.word	0x08009f41
 8009f14:	08009f2f 	.word	0x08009f2f
 8009f18:	08009f41 	.word	0x08009f41
 8009f1c:	08009f41 	.word	0x08009f41
 8009f20:	08009f41 	.word	0x08009f41
 8009f24:	08009f3b 	.word	0x08009f3b
 8009f28:	2300      	movs	r3, #0
 8009f2a:	76fb      	strb	r3, [r7, #27]
 8009f2c:	e0af      	b.n	800a08e <UART_SetConfig+0x282>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	76fb      	strb	r3, [r7, #27]
 8009f32:	e0ac      	b.n	800a08e <UART_SetConfig+0x282>
 8009f34:	2304      	movs	r3, #4
 8009f36:	76fb      	strb	r3, [r7, #27]
 8009f38:	e0a9      	b.n	800a08e <UART_SetConfig+0x282>
 8009f3a:	2308      	movs	r3, #8
 8009f3c:	76fb      	strb	r3, [r7, #27]
 8009f3e:	e0a6      	b.n	800a08e <UART_SetConfig+0x282>
 8009f40:	2310      	movs	r3, #16
 8009f42:	76fb      	strb	r3, [r7, #27]
 8009f44:	e0a3      	b.n	800a08e <UART_SetConfig+0x282>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a6d      	ldr	r2, [pc, #436]	; (800a100 <UART_SetConfig+0x2f4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d120      	bne.n	8009f92 <UART_SetConfig+0x186>
 8009f50:	4b69      	ldr	r3, [pc, #420]	; (800a0f8 <UART_SetConfig+0x2ec>)
 8009f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f5a:	2b30      	cmp	r3, #48	; 0x30
 8009f5c:	d013      	beq.n	8009f86 <UART_SetConfig+0x17a>
 8009f5e:	2b30      	cmp	r3, #48	; 0x30
 8009f60:	d814      	bhi.n	8009f8c <UART_SetConfig+0x180>
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d009      	beq.n	8009f7a <UART_SetConfig+0x16e>
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	d810      	bhi.n	8009f8c <UART_SetConfig+0x180>
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d002      	beq.n	8009f74 <UART_SetConfig+0x168>
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d006      	beq.n	8009f80 <UART_SetConfig+0x174>
 8009f72:	e00b      	b.n	8009f8c <UART_SetConfig+0x180>
 8009f74:	2300      	movs	r3, #0
 8009f76:	76fb      	strb	r3, [r7, #27]
 8009f78:	e089      	b.n	800a08e <UART_SetConfig+0x282>
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	76fb      	strb	r3, [r7, #27]
 8009f7e:	e086      	b.n	800a08e <UART_SetConfig+0x282>
 8009f80:	2304      	movs	r3, #4
 8009f82:	76fb      	strb	r3, [r7, #27]
 8009f84:	e083      	b.n	800a08e <UART_SetConfig+0x282>
 8009f86:	2308      	movs	r3, #8
 8009f88:	76fb      	strb	r3, [r7, #27]
 8009f8a:	e080      	b.n	800a08e <UART_SetConfig+0x282>
 8009f8c:	2310      	movs	r3, #16
 8009f8e:	76fb      	strb	r3, [r7, #27]
 8009f90:	e07d      	b.n	800a08e <UART_SetConfig+0x282>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a5b      	ldr	r2, [pc, #364]	; (800a104 <UART_SetConfig+0x2f8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d120      	bne.n	8009fde <UART_SetConfig+0x1d2>
 8009f9c:	4b56      	ldr	r3, [pc, #344]	; (800a0f8 <UART_SetConfig+0x2ec>)
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8009fa8:	d013      	beq.n	8009fd2 <UART_SetConfig+0x1c6>
 8009faa:	2bc0      	cmp	r3, #192	; 0xc0
 8009fac:	d814      	bhi.n	8009fd8 <UART_SetConfig+0x1cc>
 8009fae:	2b80      	cmp	r3, #128	; 0x80
 8009fb0:	d009      	beq.n	8009fc6 <UART_SetConfig+0x1ba>
 8009fb2:	2b80      	cmp	r3, #128	; 0x80
 8009fb4:	d810      	bhi.n	8009fd8 <UART_SetConfig+0x1cc>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <UART_SetConfig+0x1b4>
 8009fba:	2b40      	cmp	r3, #64	; 0x40
 8009fbc:	d006      	beq.n	8009fcc <UART_SetConfig+0x1c0>
 8009fbe:	e00b      	b.n	8009fd8 <UART_SetConfig+0x1cc>
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	76fb      	strb	r3, [r7, #27]
 8009fc4:	e063      	b.n	800a08e <UART_SetConfig+0x282>
 8009fc6:	2302      	movs	r3, #2
 8009fc8:	76fb      	strb	r3, [r7, #27]
 8009fca:	e060      	b.n	800a08e <UART_SetConfig+0x282>
 8009fcc:	2304      	movs	r3, #4
 8009fce:	76fb      	strb	r3, [r7, #27]
 8009fd0:	e05d      	b.n	800a08e <UART_SetConfig+0x282>
 8009fd2:	2308      	movs	r3, #8
 8009fd4:	76fb      	strb	r3, [r7, #27]
 8009fd6:	e05a      	b.n	800a08e <UART_SetConfig+0x282>
 8009fd8:	2310      	movs	r3, #16
 8009fda:	76fb      	strb	r3, [r7, #27]
 8009fdc:	e057      	b.n	800a08e <UART_SetConfig+0x282>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a49      	ldr	r2, [pc, #292]	; (800a108 <UART_SetConfig+0x2fc>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d125      	bne.n	800a034 <UART_SetConfig+0x228>
 8009fe8:	4b43      	ldr	r3, [pc, #268]	; (800a0f8 <UART_SetConfig+0x2ec>)
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ff6:	d017      	beq.n	800a028 <UART_SetConfig+0x21c>
 8009ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ffc:	d817      	bhi.n	800a02e <UART_SetConfig+0x222>
 8009ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a002:	d00b      	beq.n	800a01c <UART_SetConfig+0x210>
 800a004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a008:	d811      	bhi.n	800a02e <UART_SetConfig+0x222>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <UART_SetConfig+0x20a>
 800a00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a012:	d006      	beq.n	800a022 <UART_SetConfig+0x216>
 800a014:	e00b      	b.n	800a02e <UART_SetConfig+0x222>
 800a016:	2300      	movs	r3, #0
 800a018:	76fb      	strb	r3, [r7, #27]
 800a01a:	e038      	b.n	800a08e <UART_SetConfig+0x282>
 800a01c:	2302      	movs	r3, #2
 800a01e:	76fb      	strb	r3, [r7, #27]
 800a020:	e035      	b.n	800a08e <UART_SetConfig+0x282>
 800a022:	2304      	movs	r3, #4
 800a024:	76fb      	strb	r3, [r7, #27]
 800a026:	e032      	b.n	800a08e <UART_SetConfig+0x282>
 800a028:	2308      	movs	r3, #8
 800a02a:	76fb      	strb	r3, [r7, #27]
 800a02c:	e02f      	b.n	800a08e <UART_SetConfig+0x282>
 800a02e:	2310      	movs	r3, #16
 800a030:	76fb      	strb	r3, [r7, #27]
 800a032:	e02c      	b.n	800a08e <UART_SetConfig+0x282>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a2d      	ldr	r2, [pc, #180]	; (800a0f0 <UART_SetConfig+0x2e4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d125      	bne.n	800a08a <UART_SetConfig+0x27e>
 800a03e:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <UART_SetConfig+0x2ec>)
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a048:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a04c:	d017      	beq.n	800a07e <UART_SetConfig+0x272>
 800a04e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a052:	d817      	bhi.n	800a084 <UART_SetConfig+0x278>
 800a054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a058:	d00b      	beq.n	800a072 <UART_SetConfig+0x266>
 800a05a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a05e:	d811      	bhi.n	800a084 <UART_SetConfig+0x278>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <UART_SetConfig+0x260>
 800a064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a068:	d006      	beq.n	800a078 <UART_SetConfig+0x26c>
 800a06a:	e00b      	b.n	800a084 <UART_SetConfig+0x278>
 800a06c:	2300      	movs	r3, #0
 800a06e:	76fb      	strb	r3, [r7, #27]
 800a070:	e00d      	b.n	800a08e <UART_SetConfig+0x282>
 800a072:	2302      	movs	r3, #2
 800a074:	76fb      	strb	r3, [r7, #27]
 800a076:	e00a      	b.n	800a08e <UART_SetConfig+0x282>
 800a078:	2304      	movs	r3, #4
 800a07a:	76fb      	strb	r3, [r7, #27]
 800a07c:	e007      	b.n	800a08e <UART_SetConfig+0x282>
 800a07e:	2308      	movs	r3, #8
 800a080:	76fb      	strb	r3, [r7, #27]
 800a082:	e004      	b.n	800a08e <UART_SetConfig+0x282>
 800a084:	2310      	movs	r3, #16
 800a086:	76fb      	strb	r3, [r7, #27]
 800a088:	e001      	b.n	800a08e <UART_SetConfig+0x282>
 800a08a:	2310      	movs	r3, #16
 800a08c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a17      	ldr	r2, [pc, #92]	; (800a0f0 <UART_SetConfig+0x2e4>)
 800a094:	4293      	cmp	r3, r2
 800a096:	f040 8087 	bne.w	800a1a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a09a:	7efb      	ldrb	r3, [r7, #27]
 800a09c:	2b08      	cmp	r3, #8
 800a09e:	d837      	bhi.n	800a110 <UART_SetConfig+0x304>
 800a0a0:	a201      	add	r2, pc, #4	; (adr r2, 800a0a8 <UART_SetConfig+0x29c>)
 800a0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a6:	bf00      	nop
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a111 	.word	0x0800a111
 800a0b0:	0800a0d5 	.word	0x0800a0d5
 800a0b4:	0800a111 	.word	0x0800a111
 800a0b8:	0800a0db 	.word	0x0800a0db
 800a0bc:	0800a111 	.word	0x0800a111
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a111 	.word	0x0800a111
 800a0c8:	0800a0e3 	.word	0x0800a0e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0cc:	f7fe f8d8 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 800a0d0:	6178      	str	r0, [r7, #20]
        break;
 800a0d2:	e022      	b.n	800a11a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0d4:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <UART_SetConfig+0x300>)
 800a0d6:	617b      	str	r3, [r7, #20]
        break;
 800a0d8:	e01f      	b.n	800a11a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0da:	f7fe f839 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 800a0de:	6178      	str	r0, [r7, #20]
        break;
 800a0e0:	e01b      	b.n	800a11a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0e6:	617b      	str	r3, [r7, #20]
        break;
 800a0e8:	e017      	b.n	800a11a <UART_SetConfig+0x30e>
 800a0ea:	bf00      	nop
 800a0ec:	efff69f3 	.word	0xefff69f3
 800a0f0:	40008000 	.word	0x40008000
 800a0f4:	40013800 	.word	0x40013800
 800a0f8:	40021000 	.word	0x40021000
 800a0fc:	40004400 	.word	0x40004400
 800a100:	40004800 	.word	0x40004800
 800a104:	40004c00 	.word	0x40004c00
 800a108:	40005000 	.word	0x40005000
 800a10c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	76bb      	strb	r3, [r7, #26]
        break;
 800a118:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 80f1 	beq.w	800a304 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	4613      	mov	r3, r2
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	4413      	add	r3, r2
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d305      	bcc.n	800a13e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d902      	bls.n	800a144 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	76bb      	strb	r3, [r7, #26]
 800a142:	e0df      	b.n	800a304 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	4618      	mov	r0, r3
 800a148:	f04f 0100 	mov.w	r1, #0
 800a14c:	f04f 0200 	mov.w	r2, #0
 800a150:	f04f 0300 	mov.w	r3, #0
 800a154:	020b      	lsls	r3, r1, #8
 800a156:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a15a:	0202      	lsls	r2, r0, #8
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	6849      	ldr	r1, [r1, #4]
 800a160:	0849      	lsrs	r1, r1, #1
 800a162:	4608      	mov	r0, r1
 800a164:	f04f 0100 	mov.w	r1, #0
 800a168:	1814      	adds	r4, r2, r0
 800a16a:	eb43 0501 	adc.w	r5, r3, r1
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	461a      	mov	r2, r3
 800a174:	f04f 0300 	mov.w	r3, #0
 800a178:	4620      	mov	r0, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7f6 fce0 	bl	8000b40 <__aeabi_uldivmod>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4613      	mov	r3, r2
 800a186:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a18e:	d308      	bcc.n	800a1a2 <UART_SetConfig+0x396>
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a196:	d204      	bcs.n	800a1a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	60da      	str	r2, [r3, #12]
 800a1a0:	e0b0      	b.n	800a304 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	76bb      	strb	r3, [r7, #26]
 800a1a6:	e0ad      	b.n	800a304 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	69db      	ldr	r3, [r3, #28]
 800a1ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b0:	d15b      	bne.n	800a26a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a1b2:	7efb      	ldrb	r3, [r7, #27]
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d828      	bhi.n	800a20a <UART_SetConfig+0x3fe>
 800a1b8:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <UART_SetConfig+0x3b4>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a1e5 	.word	0x0800a1e5
 800a1c4:	0800a1ed 	.word	0x0800a1ed
 800a1c8:	0800a1f5 	.word	0x0800a1f5
 800a1cc:	0800a20b 	.word	0x0800a20b
 800a1d0:	0800a1fb 	.word	0x0800a1fb
 800a1d4:	0800a20b 	.word	0x0800a20b
 800a1d8:	0800a20b 	.word	0x0800a20b
 800a1dc:	0800a20b 	.word	0x0800a20b
 800a1e0:	0800a203 	.word	0x0800a203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1e4:	f7fe f84c 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 800a1e8:	6178      	str	r0, [r7, #20]
        break;
 800a1ea:	e013      	b.n	800a214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1ec:	f7fe f85e 	bl	80082ac <HAL_RCC_GetPCLK2Freq>
 800a1f0:	6178      	str	r0, [r7, #20]
        break;
 800a1f2:	e00f      	b.n	800a214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1f4:	4b49      	ldr	r3, [pc, #292]	; (800a31c <UART_SetConfig+0x510>)
 800a1f6:	617b      	str	r3, [r7, #20]
        break;
 800a1f8:	e00c      	b.n	800a214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1fa:	f7fd ffa9 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 800a1fe:	6178      	str	r0, [r7, #20]
        break;
 800a200:	e008      	b.n	800a214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a206:	617b      	str	r3, [r7, #20]
        break;
 800a208:	e004      	b.n	800a214 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	76bb      	strb	r3, [r7, #26]
        break;
 800a212:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d074      	beq.n	800a304 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	005a      	lsls	r2, r3, #1
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2b0f      	cmp	r3, #15
 800a234:	d916      	bls.n	800a264 <UART_SetConfig+0x458>
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a23c:	d212      	bcs.n	800a264 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	b29b      	uxth	r3, r3
 800a242:	f023 030f 	bic.w	r3, r3, #15
 800a246:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	b29a      	uxth	r2, r3
 800a254:	89fb      	ldrh	r3, [r7, #14]
 800a256:	4313      	orrs	r3, r2
 800a258:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	89fa      	ldrh	r2, [r7, #14]
 800a260:	60da      	str	r2, [r3, #12]
 800a262:	e04f      	b.n	800a304 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	76bb      	strb	r3, [r7, #26]
 800a268:	e04c      	b.n	800a304 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a26a:	7efb      	ldrb	r3, [r7, #27]
 800a26c:	2b08      	cmp	r3, #8
 800a26e:	d828      	bhi.n	800a2c2 <UART_SetConfig+0x4b6>
 800a270:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <UART_SetConfig+0x46c>)
 800a272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a276:	bf00      	nop
 800a278:	0800a29d 	.word	0x0800a29d
 800a27c:	0800a2a5 	.word	0x0800a2a5
 800a280:	0800a2ad 	.word	0x0800a2ad
 800a284:	0800a2c3 	.word	0x0800a2c3
 800a288:	0800a2b3 	.word	0x0800a2b3
 800a28c:	0800a2c3 	.word	0x0800a2c3
 800a290:	0800a2c3 	.word	0x0800a2c3
 800a294:	0800a2c3 	.word	0x0800a2c3
 800a298:	0800a2bb 	.word	0x0800a2bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a29c:	f7fd fff0 	bl	8008280 <HAL_RCC_GetPCLK1Freq>
 800a2a0:	6178      	str	r0, [r7, #20]
        break;
 800a2a2:	e013      	b.n	800a2cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2a4:	f7fe f802 	bl	80082ac <HAL_RCC_GetPCLK2Freq>
 800a2a8:	6178      	str	r0, [r7, #20]
        break;
 800a2aa:	e00f      	b.n	800a2cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2ac:	4b1b      	ldr	r3, [pc, #108]	; (800a31c <UART_SetConfig+0x510>)
 800a2ae:	617b      	str	r3, [r7, #20]
        break;
 800a2b0:	e00c      	b.n	800a2cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2b2:	f7fd ff4d 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 800a2b6:	6178      	str	r0, [r7, #20]
        break;
 800a2b8:	e008      	b.n	800a2cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2be:	617b      	str	r3, [r7, #20]
        break;
 800a2c0:	e004      	b.n	800a2cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	76bb      	strb	r3, [r7, #26]
        break;
 800a2ca:	bf00      	nop
    }

    if (pclk != 0U)
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d018      	beq.n	800a304 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	085a      	lsrs	r2, r3, #1
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	441a      	add	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2b0f      	cmp	r3, #15
 800a2ea:	d909      	bls.n	800a300 <UART_SetConfig+0x4f4>
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f2:	d205      	bcs.n	800a300 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	60da      	str	r2, [r3, #12]
 800a2fe:	e001      	b.n	800a304 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a310:	7ebb      	ldrb	r3, [r7, #26]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bdb0      	pop	{r4, r5, r7, pc}
 800a31a:	bf00      	nop
 800a31c:	00f42400 	.word	0x00f42400

0800a320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	430a      	orrs	r2, r1
 800a36a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	f003 0310 	and.w	r3, r3, #16
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01a      	beq.n	800a436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a41e:	d10a      	bne.n	800a436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	430a      	orrs	r2, r1
 800a456:	605a      	str	r2, [r3, #4]
  }
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af02      	add	r7, sp, #8
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a474:	f7fb fc1a 	bl	8005cac <HAL_GetTick>
 800a478:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0308 	and.w	r3, r3, #8
 800a484:	2b08      	cmp	r3, #8
 800a486:	d10e      	bne.n	800a4a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f82d 	bl	800a4f6 <UART_WaitOnFlagUntilTimeout>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e023      	b.n	800a4ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b04      	cmp	r3, #4
 800a4b2:	d10e      	bne.n	800a4d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f817 	bl	800a4f6 <UART_WaitOnFlagUntilTimeout>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e00d      	b.n	800a4ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b09c      	sub	sp, #112	; 0x70
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	4613      	mov	r3, r2
 800a504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a506:	e0a5      	b.n	800a654 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50e:	f000 80a1 	beq.w	800a654 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a512:	f7fb fbcb 	bl	8005cac <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a51e:	429a      	cmp	r2, r3
 800a520:	d302      	bcc.n	800a528 <UART_WaitOnFlagUntilTimeout+0x32>
 800a522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a524:	2b00      	cmp	r3, #0
 800a526:	d13e      	bne.n	800a5a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a530:	e853 3f00 	ldrex	r3, [r3]
 800a534:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a538:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a53c:	667b      	str	r3, [r7, #100]	; 0x64
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a546:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a548:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a54c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a54e:	e841 2300 	strex	r3, r2, [r1]
 800a552:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1e6      	bne.n	800a528 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3308      	adds	r3, #8
 800a560:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a564:	e853 3f00 	ldrex	r3, [r3]
 800a568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	f023 0301 	bic.w	r3, r3, #1
 800a570:	663b      	str	r3, [r7, #96]	; 0x60
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3308      	adds	r3, #8
 800a578:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a57a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a57c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a582:	e841 2300 	strex	r3, r2, [r1]
 800a586:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1e5      	bne.n	800a55a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2220      	movs	r2, #32
 800a592:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a5a2:	2303      	movs	r3, #3
 800a5a4:	e067      	b.n	800a676 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0304 	and.w	r3, r3, #4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d04f      	beq.n	800a654 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5c2:	d147      	bne.n	800a654 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	e853 3f00 	ldrex	r3, [r3]
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a5e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5f4:	e841 2300 	strex	r3, r2, [r1]
 800a5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1e6      	bne.n	800a5ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	e853 3f00 	ldrex	r3, [r3]
 800a60e:	613b      	str	r3, [r7, #16]
   return(result);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f023 0301 	bic.w	r3, r3, #1
 800a616:	66bb      	str	r3, [r7, #104]	; 0x68
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	3308      	adds	r3, #8
 800a61e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a620:	623a      	str	r2, [r7, #32]
 800a622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	69f9      	ldr	r1, [r7, #28]
 800a626:	6a3a      	ldr	r2, [r7, #32]
 800a628:	e841 2300 	strex	r3, r2, [r1]
 800a62c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e5      	bne.n	800a600 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2220      	movs	r2, #32
 800a638:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2220      	movs	r2, #32
 800a63e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2220      	movs	r2, #32
 800a644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	e010      	b.n	800a676 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	69da      	ldr	r2, [r3, #28]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4013      	ands	r3, r2
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	429a      	cmp	r2, r3
 800a662:	bf0c      	ite	eq
 800a664:	2301      	moveq	r3, #1
 800a666:	2300      	movne	r3, #0
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	461a      	mov	r2, r3
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	429a      	cmp	r2, r3
 800a670:	f43f af4a 	beq.w	800a508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3770      	adds	r7, #112	; 0x70
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b096      	sub	sp, #88	; 0x58
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	88fa      	ldrh	r2, [r7, #6]
 800a698:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2222      	movs	r2, #34	; 0x22
 800a6a8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d02b      	beq.n	800a70a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b6:	4a42      	ldr	r2, [pc, #264]	; (800a7c0 <UART_Start_Receive_DMA+0x140>)
 800a6b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6be:	4a41      	ldr	r2, [pc, #260]	; (800a7c4 <UART_Start_Receive_DMA+0x144>)
 800a6c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c6:	4a40      	ldr	r2, [pc, #256]	; (800a7c8 <UART_Start_Receive_DMA+0x148>)
 800a6c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3324      	adds	r3, #36	; 0x24
 800a6dc:	4619      	mov	r1, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	88fb      	ldrh	r3, [r7, #6]
 800a6e6:	f7fb fda1 	bl	800622c <HAL_DMA_Start_IT>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00c      	beq.n	800a70a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2210      	movs	r2, #16
 800a6f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2220      	movs	r2, #32
 800a704:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a706:	2301      	movs	r3, #1
 800a708:	e055      	b.n	800a7b6 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d018      	beq.n	800a74c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a72e:	657b      	str	r3, [r7, #84]	; 0x54
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a738:	64bb      	str	r3, [r7, #72]	; 0x48
 800a73a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a73e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e6      	bne.n	800a71a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	f043 0301 	orr.w	r3, r3, #1
 800a762:	653b      	str	r3, [r7, #80]	; 0x50
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3308      	adds	r3, #8
 800a76a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a76c:	637a      	str	r2, [r7, #52]	; 0x34
 800a76e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	3308      	adds	r3, #8
 800a786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	e853 3f00 	ldrex	r3, [r3]
 800a78e:	613b      	str	r3, [r7, #16]
   return(result);
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a796:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	3308      	adds	r3, #8
 800a79e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7a0:	623a      	str	r2, [r7, #32]
 800a7a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	6a3a      	ldr	r2, [r7, #32]
 800a7a8:	e841 2300 	strex	r3, r2, [r1]
 800a7ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1e5      	bne.n	800a780 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3758      	adds	r7, #88	; 0x58
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	0800a8df 	.word	0x0800a8df
 800a7c4:	0800aa03 	.word	0x0800aa03
 800a7c8:	0800aa3b 	.word	0x0800aa3b

0800a7cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b089      	sub	sp, #36	; 0x24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a7e8:	61fb      	str	r3, [r7, #28]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	61bb      	str	r3, [r7, #24]
 800a7f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f6:	6979      	ldr	r1, [r7, #20]
 800a7f8:	69ba      	ldr	r2, [r7, #24]
 800a7fa:	e841 2300 	strex	r3, r2, [r1]
 800a7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1e6      	bne.n	800a7d4 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a80c:	bf00      	nop
 800a80e:	3724      	adds	r7, #36	; 0x24
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a818:	b480      	push	{r7}
 800a81a:	b095      	sub	sp, #84	; 0x54
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a834:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a83e:	643b      	str	r3, [r7, #64]	; 0x40
 800a840:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a846:	e841 2300 	strex	r3, r2, [r1]
 800a84a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1e6      	bne.n	800a820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3308      	adds	r3, #8
 800a858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	e853 3f00 	ldrex	r3, [r3]
 800a860:	61fb      	str	r3, [r7, #28]
   return(result);
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	f023 0301 	bic.w	r3, r3, #1
 800a868:	64bb      	str	r3, [r7, #72]	; 0x48
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3308      	adds	r3, #8
 800a870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a872:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a87a:	e841 2300 	strex	r3, r2, [r1]
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1e5      	bne.n	800a852 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d118      	bne.n	800a8c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	f023 0310 	bic.w	r3, r3, #16
 800a8a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b0:	6979      	ldr	r1, [r7, #20]
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	e841 2300 	strex	r3, r2, [r1]
 800a8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d1e6      	bne.n	800a88e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a8d2:	bf00      	nop
 800a8d4:	3754      	adds	r7, #84	; 0x54
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b09c      	sub	sp, #112	; 0x70
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d170      	bne.n	800a9dc <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a90a:	e853 3f00 	ldrex	r3, [r3]
 800a90e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a916:	66bb      	str	r3, [r7, #104]	; 0x68
 800a918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	461a      	mov	r2, r3
 800a91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a920:	65bb      	str	r3, [r7, #88]	; 0x58
 800a922:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a928:	e841 2300 	strex	r3, r2, [r1]
 800a92c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e6      	bne.n	800a902 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3308      	adds	r3, #8
 800a93a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a946:	f023 0301 	bic.w	r3, r3, #1
 800a94a:	667b      	str	r3, [r7, #100]	; 0x64
 800a94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3308      	adds	r3, #8
 800a952:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a954:	647a      	str	r2, [r7, #68]	; 0x44
 800a956:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e5      	bne.n	800a934 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3308      	adds	r3, #8
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	e853 3f00 	ldrex	r3, [r3]
 800a976:	623b      	str	r3, [r7, #32]
   return(result);
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a97e:	663b      	str	r3, [r7, #96]	; 0x60
 800a980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3308      	adds	r3, #8
 800a986:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a988:	633a      	str	r2, [r7, #48]	; 0x30
 800a98a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a98e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a990:	e841 2300 	strex	r3, r2, [r1]
 800a994:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1e5      	bne.n	800a968 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99e:	2220      	movs	r2, #32
 800a9a0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d118      	bne.n	800a9dc <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 0310 	bic.w	r3, r3, #16
 800a9be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c8:	61fb      	str	r3, [r7, #28]
 800a9ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	69b9      	ldr	r1, [r7, #24]
 800a9ce:	69fa      	ldr	r2, [r7, #28]
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e6      	bne.n	800a9aa <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d107      	bne.n	800a9f4 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9ee:	f7ff fa01 	bl	8009df4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9f2:	e002      	b.n	800a9fa <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a9f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9f6:	f7ff f9df 	bl	8009db8 <HAL_UART_RxCpltCallback>
}
 800a9fa:	bf00      	nop
 800a9fc:	3770      	adds	r7, #112	; 0x70
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d109      	bne.n	800aa2c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aa1e:	085b      	lsrs	r3, r3, #1
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	4619      	mov	r1, r3
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f7ff f9e5 	bl	8009df4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa2a:	e002      	b.n	800aa32 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7ff f9cd 	bl	8009dcc <HAL_UART_RxHalfCpltCallback>
}
 800aa32:	bf00      	nop
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b086      	sub	sp, #24
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa4c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa52:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa5e:	2b80      	cmp	r3, #128	; 0x80
 800aa60:	d109      	bne.n	800aa76 <UART_DMAError+0x3c>
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2b21      	cmp	r3, #33	; 0x21
 800aa66:	d106      	bne.n	800aa76 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800aa70:	6978      	ldr	r0, [r7, #20]
 800aa72:	f7ff feab 	bl	800a7cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa80:	2b40      	cmp	r3, #64	; 0x40
 800aa82:	d109      	bne.n	800aa98 <UART_DMAError+0x5e>
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b22      	cmp	r3, #34	; 0x22
 800aa88:	d106      	bne.n	800aa98 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800aa92:	6978      	ldr	r0, [r7, #20]
 800aa94:	f7ff fec0 	bl	800a818 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa9e:	f043 0210 	orr.w	r2, r3, #16
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aaa8:	6978      	ldr	r0, [r7, #20]
 800aaaa:	f7ff f999 	bl	8009de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaae:	bf00      	nop
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
	...

0800aab8 <DataHist_parameters>:
 800aab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aabc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aabe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800aac0:	7020      	strb	r0, [r4, #0]
 800aac2:	6808      	ldr	r0, [r1, #0]
 800aac4:	6060      	str	r0, [r4, #4]
 800aac6:	6848      	ldr	r0, [r1, #4]
 800aac8:	60a0      	str	r0, [r4, #8]
 800aaca:	6888      	ldr	r0, [r1, #8]
 800aacc:	60e0      	str	r0, [r4, #12]
 800aace:	68c8      	ldr	r0, [r1, #12]
 800aad0:	6120      	str	r0, [r4, #16]
 800aad2:	6908      	ldr	r0, [r1, #16]
 800aad4:	6160      	str	r0, [r4, #20]
 800aad6:	6948      	ldr	r0, [r1, #20]
 800aad8:	61a0      	str	r0, [r4, #24]
 800aada:	6988      	ldr	r0, [r1, #24]
 800aadc:	61e0      	str	r0, [r4, #28]
 800aade:	69c8      	ldr	r0, [r1, #28]
 800aae0:	6220      	str	r0, [r4, #32]
 800aae2:	6a09      	ldr	r1, [r1, #32]
 800aae4:	6261      	str	r1, [r4, #36]	; 0x24
 800aae6:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800aaea:	8811      	ldrh	r1, [r2, #0]
 800aaec:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800aaf0:	8521      	strh	r1, [r4, #40]	; 0x28
 800aaf2:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800aaf6:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800aafa:	f04f 0e00 	mov.w	lr, #0
 800aafe:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800ab02:	4641      	mov	r1, r8
 800ab04:	f852 0b04 	ldr.w	r0, [r2], #4
 800ab08:	f841 0b04 	str.w	r0, [r1], #4
 800ab0c:	4562      	cmp	r2, ip
 800ab0e:	d1f9      	bne.n	800ab04 <DataHist_parameters+0x4c>
 800ab10:	f10e 0e1e 	add.w	lr, lr, #30
 800ab14:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800ab18:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800ab1c:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800ab20:	d1ed      	bne.n	800aafe <DataHist_parameters+0x46>
 800ab22:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800ab26:	881a      	ldrh	r2, [r3, #0]
 800ab28:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ab2c:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800ab30:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ab34:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800ab38:	f04f 0c00 	mov.w	ip, #0
 800ab3c:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800ab40:	4672      	mov	r2, lr
 800ab42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab46:	f842 1b04 	str.w	r1, [r2], #4
 800ab4a:	4283      	cmp	r3, r0
 800ab4c:	d1f9      	bne.n	800ab42 <DataHist_parameters+0x8a>
 800ab4e:	f10c 0c1e 	add.w	ip, ip, #30
 800ab52:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800ab56:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800ab5a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ab5e:	d1ed      	bne.n	800ab3c <DataHist_parameters+0x84>
 800ab60:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800ab64:	883b      	ldrh	r3, [r7, #0]
 800ab66:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800ab6a:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800ab6e:	3780      	adds	r7, #128	; 0x80
 800ab70:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800ab74:	2000      	movs	r0, #0
 800ab76:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800ab7a:	4662      	mov	r2, ip
 800ab7c:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab80:	f842 1b04 	str.w	r1, [r2], #4
 800ab84:	42bb      	cmp	r3, r7
 800ab86:	d1f9      	bne.n	800ab7c <DataHist_parameters+0xc4>
 800ab88:	301e      	adds	r0, #30
 800ab8a:	285a      	cmp	r0, #90	; 0x5a
 800ab8c:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800ab90:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800ab94:	d1ef      	bne.n	800ab76 <DataHist_parameters+0xbe>
 800ab96:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800ab9a:	8833      	ldrh	r3, [r6, #0]
 800ab9c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800aba0:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800aba4:	3680      	adds	r6, #128	; 0x80
 800aba6:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800abaa:	2000      	movs	r0, #0
 800abac:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800abb0:	463a      	mov	r2, r7
 800abb2:	f853 1b04 	ldr.w	r1, [r3], #4
 800abb6:	f842 1b04 	str.w	r1, [r2], #4
 800abba:	429e      	cmp	r6, r3
 800abbc:	d1f9      	bne.n	800abb2 <DataHist_parameters+0xfa>
 800abbe:	301e      	adds	r0, #30
 800abc0:	285a      	cmp	r0, #90	; 0x5a
 800abc2:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800abc6:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800abca:	d1ef      	bne.n	800abac <DataHist_parameters+0xf4>
 800abcc:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800abd0:	69aa      	ldr	r2, [r5, #24]
 800abd2:	f8c3 c004 	str.w	ip, [r3, #4]
 800abd6:	782b      	ldrb	r3, [r5, #0]
 800abd8:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800abdc:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800abe0:	619a      	str	r2, [r3, #24]
 800abe2:	686a      	ldr	r2, [r5, #4]
 800abe4:	605a      	str	r2, [r3, #4]
 800abe6:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800abea:	68a9      	ldr	r1, [r5, #8]
 800abec:	6011      	str	r1, [r2, #0]
 800abee:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800abf2:	68e9      	ldr	r1, [r5, #12]
 800abf4:	6011      	str	r1, [r2, #0]
 800abf6:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800abfa:	6929      	ldr	r1, [r5, #16]
 800abfc:	6011      	str	r1, [r2, #0]
 800abfe:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800ac02:	6969      	ldr	r1, [r5, #20]
 800ac04:	6011      	str	r1, [r2, #0]
 800ac06:	69ea      	ldr	r2, [r5, #28]
 800ac08:	61da      	str	r2, [r3, #28]
 800ac0a:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800ac0e:	6a2a      	ldr	r2, [r5, #32]
 800ac10:	601a      	str	r2, [r3, #0]
 800ac12:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800ac16:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800ac1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800ac26:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac2e:	bf00      	nop

0800ac30 <rotVect>:
 800ac30:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800ac34:	ed92 5a01 	vldr	s10, [r2, #4]
 800ac38:	edd2 5a00 	vldr	s11, [r2]
 800ac3c:	ed92 6a02 	vldr	s12, [r2, #8]
 800ac40:	ee07 3a90 	vmov	s15, r3
 800ac44:	f991 3000 	ldrsb.w	r3, [r1]
 800ac48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac4c:	ee06 3a90 	vmov	s13, r3
 800ac50:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ac54:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800ac58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ac5c:	ee07 3a10 	vmov	s14, r3
 800ac60:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ac64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac68:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ac6c:	edc0 7a00 	vstr	s15, [r0]
 800ac70:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800ac74:	ed92 5a01 	vldr	s10, [r2, #4]
 800ac78:	edd2 5a00 	vldr	s11, [r2]
 800ac7c:	ed92 6a02 	vldr	s12, [r2, #8]
 800ac80:	ee07 3a90 	vmov	s15, r3
 800ac84:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800ac88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac8c:	ee06 3a90 	vmov	s13, r3
 800ac90:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ac94:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800ac98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ac9c:	ee07 3a10 	vmov	s14, r3
 800aca0:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800aca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aca8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800acac:	edc0 7a01 	vstr	s15, [r0, #4]
 800acb0:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800acb4:	ed92 5a01 	vldr	s10, [r2, #4]
 800acb8:	edd2 5a00 	vldr	s11, [r2]
 800acbc:	ed92 6a02 	vldr	s12, [r2, #8]
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800acc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800accc:	ee06 3a90 	vmov	s13, r3
 800acd0:	ee67 7a85 	vmul.f32	s15, s15, s10
 800acd4:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800acd8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800acdc:	ee07 3a10 	vmov	s14, r3
 800ace0:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ace4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ace8:	eee7 7a06 	vfma.f32	s15, s14, s12
 800acec:	edc0 7a02 	vstr	s15, [r0, #8]
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop

0800acf4 <findAxis>:
 800acf4:	f990 3000 	ldrsb.w	r3, [r0]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d027      	beq.n	800ad4c <findAxis+0x58>
 800acfc:	3301      	adds	r3, #1
 800acfe:	d00e      	beq.n	800ad1e <findAxis+0x2a>
 800ad00:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d053      	beq.n	800adb0 <findAxis+0xbc>
 800ad08:	3301      	adds	r3, #1
 800ad0a:	d048      	beq.n	800ad9e <findAxis+0xaa>
 800ad0c:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d053      	beq.n	800adbc <findAxis+0xc8>
 800ad14:	3301      	adds	r3, #1
 800ad16:	d104      	bne.n	800ad22 <findAxis+0x2e>
 800ad18:	2364      	movs	r3, #100	; 0x64
 800ad1a:	700b      	strb	r3, [r1, #0]
 800ad1c:	e001      	b.n	800ad22 <findAxis+0x2e>
 800ad1e:	2377      	movs	r3, #119	; 0x77
 800ad20:	700b      	strb	r3, [r1, #0]
 800ad22:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d016      	beq.n	800ad58 <findAxis+0x64>
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	d02e      	beq.n	800ad8c <findAxis+0x98>
 800ad2e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d039      	beq.n	800adaa <findAxis+0xb6>
 800ad36:	3301      	adds	r3, #1
 800ad38:	d034      	beq.n	800ada4 <findAxis+0xb0>
 800ad3a:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d03f      	beq.n	800adc2 <findAxis+0xce>
 800ad42:	3301      	adds	r3, #1
 800ad44:	d10a      	bne.n	800ad5c <findAxis+0x68>
 800ad46:	2364      	movs	r3, #100	; 0x64
 800ad48:	704b      	strb	r3, [r1, #1]
 800ad4a:	e007      	b.n	800ad5c <findAxis+0x68>
 800ad4c:	2365      	movs	r3, #101	; 0x65
 800ad4e:	700b      	strb	r3, [r1, #0]
 800ad50:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d1e8      	bne.n	800ad2a <findAxis+0x36>
 800ad58:	2365      	movs	r3, #101	; 0x65
 800ad5a:	704b      	strb	r3, [r1, #1]
 800ad5c:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d010      	beq.n	800ad86 <findAxis+0x92>
 800ad64:	3301      	adds	r3, #1
 800ad66:	d014      	beq.n	800ad92 <findAxis+0x9e>
 800ad68:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d022      	beq.n	800adb6 <findAxis+0xc2>
 800ad70:	3301      	adds	r3, #1
 800ad72:	d011      	beq.n	800ad98 <findAxis+0xa4>
 800ad74:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d025      	beq.n	800adc8 <findAxis+0xd4>
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	bf04      	itt	eq
 800ad80:	2364      	moveq	r3, #100	; 0x64
 800ad82:	708b      	strbeq	r3, [r1, #2]
 800ad84:	4770      	bx	lr
 800ad86:	2365      	movs	r3, #101	; 0x65
 800ad88:	708b      	strb	r3, [r1, #2]
 800ad8a:	4770      	bx	lr
 800ad8c:	2377      	movs	r3, #119	; 0x77
 800ad8e:	704b      	strb	r3, [r1, #1]
 800ad90:	e7e4      	b.n	800ad5c <findAxis+0x68>
 800ad92:	2377      	movs	r3, #119	; 0x77
 800ad94:	708b      	strb	r3, [r1, #2]
 800ad96:	4770      	bx	lr
 800ad98:	2373      	movs	r3, #115	; 0x73
 800ad9a:	708b      	strb	r3, [r1, #2]
 800ad9c:	4770      	bx	lr
 800ad9e:	2373      	movs	r3, #115	; 0x73
 800ada0:	700b      	strb	r3, [r1, #0]
 800ada2:	e7be      	b.n	800ad22 <findAxis+0x2e>
 800ada4:	2373      	movs	r3, #115	; 0x73
 800ada6:	704b      	strb	r3, [r1, #1]
 800ada8:	e7d8      	b.n	800ad5c <findAxis+0x68>
 800adaa:	236e      	movs	r3, #110	; 0x6e
 800adac:	704b      	strb	r3, [r1, #1]
 800adae:	e7d5      	b.n	800ad5c <findAxis+0x68>
 800adb0:	236e      	movs	r3, #110	; 0x6e
 800adb2:	700b      	strb	r3, [r1, #0]
 800adb4:	e7b5      	b.n	800ad22 <findAxis+0x2e>
 800adb6:	236e      	movs	r3, #110	; 0x6e
 800adb8:	708b      	strb	r3, [r1, #2]
 800adba:	4770      	bx	lr
 800adbc:	2375      	movs	r3, #117	; 0x75
 800adbe:	700b      	strb	r3, [r1, #0]
 800adc0:	e7af      	b.n	800ad22 <findAxis+0x2e>
 800adc2:	2375      	movs	r3, #117	; 0x75
 800adc4:	704b      	strb	r3, [r1, #1]
 800adc6:	e7c9      	b.n	800ad5c <findAxis+0x68>
 800adc8:	2375      	movs	r3, #117	; 0x75
 800adca:	708b      	strb	r3, [r1, #2]
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop

0800add0 <findDirection>:
 800add0:	b5d0      	push	{r4, r6, r7, lr}
 800add2:	ed2d 8b04 	vpush	{d8-d9}
 800add6:	eef0 8ac0 	vabs.f32	s17, s0
 800adda:	eeb0 8ae0 	vabs.f32	s16, s1
 800adde:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade6:	4604      	mov	r4, r0
 800ade8:	eeb0 9ac1 	vabs.f32	s18, s2
 800adec:	dd36      	ble.n	800ae5c <findDirection+0x8c>
 800adee:	eef4 8ac9 	vcmpe.f32	s17, s18
 800adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf6:	dd31      	ble.n	800ae5c <findDirection+0x8c>
 800adf8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae00:	ee18 0a90 	vmov	r0, s17
 800ae04:	f340 8094 	ble.w	800af30 <findDirection+0x160>
 800ae08:	f7f5 fb42 	bl	8000490 <__aeabi_f2d>
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	ee18 0a10 	vmov	r0, s16
 800ae12:	460f      	mov	r7, r1
 800ae14:	f7f5 fb3c 	bl	8000490 <__aeabi_f2d>
 800ae18:	a387      	add	r3, pc, #540	; (adr r3, 800b038 <findDirection+0x268>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 fb8f 	bl	8000540 <__aeabi_dmul>
 800ae22:	4602      	mov	r2, r0
 800ae24:	460b      	mov	r3, r1
 800ae26:	4630      	mov	r0, r6
 800ae28:	4639      	mov	r1, r7
 800ae2a:	f7f5 fe19 	bl	8000a60 <__aeabi_dcmpgt>
 800ae2e:	b188      	cbz	r0, 800ae54 <findDirection+0x84>
 800ae30:	ee19 0a10 	vmov	r0, s18
 800ae34:	f7f5 fb2c 	bl	8000490 <__aeabi_f2d>
 800ae38:	a37f      	add	r3, pc, #508	; (adr r3, 800b038 <findDirection+0x268>)
 800ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3e:	f7f5 fb7f 	bl	8000540 <__aeabi_dmul>
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7f5 fe09 	bl	8000a60 <__aeabi_dcmpgt>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	bf18      	it	ne
 800ae52:	2404      	movne	r4, #4
 800ae54:	ecbd 8b04 	vpop	{d8-d9}
 800ae58:	4620      	mov	r0, r4
 800ae5a:	bdd0      	pop	{r4, r6, r7, pc}
 800ae5c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800ae60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae64:	dd32      	ble.n	800aecc <findDirection+0xfc>
 800ae66:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800ae6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae6e:	ee18 0a10 	vmov	r0, s16
 800ae72:	f340 8086 	ble.w	800af82 <findDirection+0x1b2>
 800ae76:	f7f5 fb0b 	bl	8000490 <__aeabi_f2d>
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	ee18 0a90 	vmov	r0, s17
 800ae80:	460f      	mov	r7, r1
 800ae82:	f7f5 fb05 	bl	8000490 <__aeabi_f2d>
 800ae86:	a36c      	add	r3, pc, #432	; (adr r3, 800b038 <findDirection+0x268>)
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	f7f5 fb58 	bl	8000540 <__aeabi_dmul>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 fde2 	bl	8000a60 <__aeabi_dcmpgt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d0d9      	beq.n	800ae54 <findDirection+0x84>
 800aea0:	ee19 0a10 	vmov	r0, s18
 800aea4:	f7f5 faf4 	bl	8000490 <__aeabi_f2d>
 800aea8:	a363      	add	r3, pc, #396	; (adr r3, 800b038 <findDirection+0x268>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f7f5 fb47 	bl	8000540 <__aeabi_dmul>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	4639      	mov	r1, r7
 800aeba:	f7f5 fdd1 	bl	8000a60 <__aeabi_dcmpgt>
 800aebe:	ecbd 8b04 	vpop	{d8-d9}
 800aec2:	2800      	cmp	r0, #0
 800aec4:	bf18      	it	ne
 800aec6:	2401      	movne	r4, #1
 800aec8:	4620      	mov	r0, r4
 800aeca:	bdd0      	pop	{r4, r6, r7, pc}
 800aecc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800aed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed4:	ee19 0a10 	vmov	r0, s18
 800aed8:	dd7f      	ble.n	800afda <findDirection+0x20a>
 800aeda:	f7f5 fad9 	bl	8000490 <__aeabi_f2d>
 800aede:	4606      	mov	r6, r0
 800aee0:	ee18 0a10 	vmov	r0, s16
 800aee4:	460f      	mov	r7, r1
 800aee6:	f7f5 fad3 	bl	8000490 <__aeabi_f2d>
 800aeea:	a353      	add	r3, pc, #332	; (adr r3, 800b038 <findDirection+0x268>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 fb26 	bl	8000540 <__aeabi_dmul>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 fdb0 	bl	8000a60 <__aeabi_dcmpgt>
 800af00:	2800      	cmp	r0, #0
 800af02:	d0a7      	beq.n	800ae54 <findDirection+0x84>
 800af04:	ee18 0a90 	vmov	r0, s17
 800af08:	f7f5 fac2 	bl	8000490 <__aeabi_f2d>
 800af0c:	a34a      	add	r3, pc, #296	; (adr r3, 800b038 <findDirection+0x268>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 fb15 	bl	8000540 <__aeabi_dmul>
 800af16:	4602      	mov	r2, r0
 800af18:	460b      	mov	r3, r1
 800af1a:	4630      	mov	r0, r6
 800af1c:	4639      	mov	r1, r7
 800af1e:	f7f5 fd9f 	bl	8000a60 <__aeabi_dcmpgt>
 800af22:	ecbd 8b04 	vpop	{d8-d9}
 800af26:	2800      	cmp	r0, #0
 800af28:	bf18      	it	ne
 800af2a:	2400      	movne	r4, #0
 800af2c:	4620      	mov	r0, r4
 800af2e:	bdd0      	pop	{r4, r6, r7, pc}
 800af30:	f7f5 faae 	bl	8000490 <__aeabi_f2d>
 800af34:	4606      	mov	r6, r0
 800af36:	ee18 0a10 	vmov	r0, s16
 800af3a:	460f      	mov	r7, r1
 800af3c:	f7f5 faa8 	bl	8000490 <__aeabi_f2d>
 800af40:	a33d      	add	r3, pc, #244	; (adr r3, 800b038 <findDirection+0x268>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 fafb 	bl	8000540 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 fd85 	bl	8000a60 <__aeabi_dcmpgt>
 800af56:	2800      	cmp	r0, #0
 800af58:	f43f af7c 	beq.w	800ae54 <findDirection+0x84>
 800af5c:	ee19 0a10 	vmov	r0, s18
 800af60:	f7f5 fa96 	bl	8000490 <__aeabi_f2d>
 800af64:	a334      	add	r3, pc, #208	; (adr r3, 800b038 <findDirection+0x268>)
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	f7f5 fae9 	bl	8000540 <__aeabi_dmul>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4630      	mov	r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	f7f5 fd73 	bl	8000a60 <__aeabi_dcmpgt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	bf18      	it	ne
 800af7e:	2405      	movne	r4, #5
 800af80:	e768      	b.n	800ae54 <findDirection+0x84>
 800af82:	f7f5 fa85 	bl	8000490 <__aeabi_f2d>
 800af86:	4606      	mov	r6, r0
 800af88:	ee18 0a90 	vmov	r0, s17
 800af8c:	460f      	mov	r7, r1
 800af8e:	f7f5 fa7f 	bl	8000490 <__aeabi_f2d>
 800af92:	a329      	add	r3, pc, #164	; (adr r3, 800b038 <findDirection+0x268>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 fad2 	bl	8000540 <__aeabi_dmul>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4630      	mov	r0, r6
 800afa2:	4639      	mov	r1, r7
 800afa4:	f7f5 fd5c 	bl	8000a60 <__aeabi_dcmpgt>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f43f af53 	beq.w	800ae54 <findDirection+0x84>
 800afae:	ee19 0a10 	vmov	r0, s18
 800afb2:	f7f5 fa6d 	bl	8000490 <__aeabi_f2d>
 800afb6:	a320      	add	r3, pc, #128	; (adr r3, 800b038 <findDirection+0x268>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f7f5 fac0 	bl	8000540 <__aeabi_dmul>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4630      	mov	r0, r6
 800afc6:	4639      	mov	r1, r7
 800afc8:	f7f5 fd4a 	bl	8000a60 <__aeabi_dcmpgt>
 800afcc:	ecbd 8b04 	vpop	{d8-d9}
 800afd0:	2800      	cmp	r0, #0
 800afd2:	bf18      	it	ne
 800afd4:	2403      	movne	r4, #3
 800afd6:	4620      	mov	r0, r4
 800afd8:	bdd0      	pop	{r4, r6, r7, pc}
 800afda:	f7f5 fa59 	bl	8000490 <__aeabi_f2d>
 800afde:	4606      	mov	r6, r0
 800afe0:	ee18 0a10 	vmov	r0, s16
 800afe4:	460f      	mov	r7, r1
 800afe6:	f7f5 fa53 	bl	8000490 <__aeabi_f2d>
 800afea:	a313      	add	r3, pc, #76	; (adr r3, 800b038 <findDirection+0x268>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	f7f5 faa6 	bl	8000540 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4630      	mov	r0, r6
 800affa:	4639      	mov	r1, r7
 800affc:	f7f5 fd30 	bl	8000a60 <__aeabi_dcmpgt>
 800b000:	2800      	cmp	r0, #0
 800b002:	f43f af27 	beq.w	800ae54 <findDirection+0x84>
 800b006:	ee18 0a90 	vmov	r0, s17
 800b00a:	f7f5 fa41 	bl	8000490 <__aeabi_f2d>
 800b00e:	a30a      	add	r3, pc, #40	; (adr r3, 800b038 <findDirection+0x268>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	f7f5 fa94 	bl	8000540 <__aeabi_dmul>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fd1e 	bl	8000a60 <__aeabi_dcmpgt>
 800b024:	ecbd 8b04 	vpop	{d8-d9}
 800b028:	2800      	cmp	r0, #0
 800b02a:	bf18      	it	ne
 800b02c:	2402      	movne	r4, #2
 800b02e:	4620      	mov	r0, r4
 800b030:	bdd0      	pop	{r4, r6, r7, pc}
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	e0000000 	.word	0xe0000000
 800b03c:	3ff6b851 	.word	0x3ff6b851

0800b040 <updateOrientation>:
 800b040:	b410      	push	{r4}
 800b042:	2300      	movs	r3, #0
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	6043      	str	r3, [r0, #4]
 800b048:	7203      	strb	r3, [r0, #8]
 800b04a:	780c      	ldrb	r4, [r1, #0]
 800b04c:	784a      	ldrb	r2, [r1, #1]
 800b04e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b052:	2b17      	cmp	r3, #23
 800b054:	bf98      	it	ls
 800b056:	3420      	addls	r4, #32
 800b058:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b05c:	bf98      	it	ls
 800b05e:	b2e4      	uxtbls	r4, r4
 800b060:	2b17      	cmp	r3, #23
 800b062:	788b      	ldrb	r3, [r1, #2]
 800b064:	bf98      	it	ls
 800b066:	3220      	addls	r2, #32
 800b068:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b06c:	bf98      	it	ls
 800b06e:	b2d2      	uxtbls	r2, r2
 800b070:	2917      	cmp	r1, #23
 800b072:	bf98      	it	ls
 800b074:	3320      	addls	r3, #32
 800b076:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b07a:	bf98      	it	ls
 800b07c:	b2db      	uxtbls	r3, r3
 800b07e:	2c13      	cmp	r4, #19
 800b080:	d80d      	bhi.n	800b09e <updateOrientation+0x5e>
 800b082:	e8df f004 	tbb	[pc, r4]
 800b086:	0a36      	.short	0x0a36
 800b088:	0c0c0c0c 	.word	0x0c0c0c0c
 800b08c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b090:	0c0c0c39 	.word	0x0c0c0c39
 800b094:	3f0c3c0c 	.word	0x3f0c3c0c
 800b098:	420c      	.short	0x420c
 800b09a:	2101      	movs	r1, #1
 800b09c:	7001      	strb	r1, [r0, #0]
 800b09e:	3a64      	subs	r2, #100	; 0x64
 800b0a0:	2a13      	cmp	r2, #19
 800b0a2:	d80d      	bhi.n	800b0c0 <updateOrientation+0x80>
 800b0a4:	e8df f002 	tbb	[pc, r2]
 800b0a8:	0c0c0a34 	.word	0x0c0c0a34
 800b0ac:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0b0:	0c370c0c 	.word	0x0c370c0c
 800b0b4:	3a0c0c0c 	.word	0x3a0c0c0c
 800b0b8:	400c3d0c 	.word	0x400c3d0c
 800b0bc:	2201      	movs	r2, #1
 800b0be:	7042      	strb	r2, [r0, #1]
 800b0c0:	3b64      	subs	r3, #100	; 0x64
 800b0c2:	2b13      	cmp	r3, #19
 800b0c4:	d80d      	bhi.n	800b0e2 <updateOrientation+0xa2>
 800b0c6:	e8df f003 	tbb	[pc, r3]
 800b0ca:	320a      	.short	0x320a
 800b0cc:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0d0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b0d4:	0c0c0c37 	.word	0x0c0c0c37
 800b0d8:	410c3c0c 	.word	0x410c3c0c
 800b0dc:	0f0c      	.short	0x0f0c
 800b0de:	23ff      	movs	r3, #255	; 0xff
 800b0e0:	7203      	strb	r3, [r0, #8]
 800b0e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0e6:	4770      	bx	lr
 800b0e8:	23ff      	movs	r3, #255	; 0xff
 800b0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ee:	7083      	strb	r3, [r0, #2]
 800b0f0:	4770      	bx	lr
 800b0f2:	21ff      	movs	r1, #255	; 0xff
 800b0f4:	7181      	strb	r1, [r0, #6]
 800b0f6:	e7d2      	b.n	800b09e <updateOrientation+0x5e>
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	70c1      	strb	r1, [r0, #3]
 800b0fc:	e7cf      	b.n	800b09e <updateOrientation+0x5e>
 800b0fe:	21ff      	movs	r1, #255	; 0xff
 800b100:	70c1      	strb	r1, [r0, #3]
 800b102:	e7cc      	b.n	800b09e <updateOrientation+0x5e>
 800b104:	2101      	movs	r1, #1
 800b106:	7181      	strb	r1, [r0, #6]
 800b108:	e7c9      	b.n	800b09e <updateOrientation+0x5e>
 800b10a:	21ff      	movs	r1, #255	; 0xff
 800b10c:	7001      	strb	r1, [r0, #0]
 800b10e:	e7c6      	b.n	800b09e <updateOrientation+0x5e>
 800b110:	22ff      	movs	r2, #255	; 0xff
 800b112:	71c2      	strb	r2, [r0, #7]
 800b114:	e7d4      	b.n	800b0c0 <updateOrientation+0x80>
 800b116:	2201      	movs	r2, #1
 800b118:	7102      	strb	r2, [r0, #4]
 800b11a:	e7d1      	b.n	800b0c0 <updateOrientation+0x80>
 800b11c:	22ff      	movs	r2, #255	; 0xff
 800b11e:	7102      	strb	r2, [r0, #4]
 800b120:	e7ce      	b.n	800b0c0 <updateOrientation+0x80>
 800b122:	2201      	movs	r2, #1
 800b124:	71c2      	strb	r2, [r0, #7]
 800b126:	e7cb      	b.n	800b0c0 <updateOrientation+0x80>
 800b128:	22ff      	movs	r2, #255	; 0xff
 800b12a:	7042      	strb	r2, [r0, #1]
 800b12c:	e7c8      	b.n	800b0c0 <updateOrientation+0x80>
 800b12e:	2301      	movs	r3, #1
 800b130:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b134:	7083      	strb	r3, [r0, #2]
 800b136:	4770      	bx	lr
 800b138:	2301      	movs	r3, #1
 800b13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13e:	7143      	strb	r3, [r0, #5]
 800b140:	4770      	bx	lr
 800b142:	23ff      	movs	r3, #255	; 0xff
 800b144:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b148:	7143      	strb	r3, [r0, #5]
 800b14a:	4770      	bx	lr
 800b14c:	2301      	movs	r3, #1
 800b14e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b152:	7203      	strb	r3, [r0, #8]
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop

0800b158 <qmult>:
 800b158:	ed91 2a03 	vldr	s4, [r1, #12]
 800b15c:	ed90 3a01 	vldr	s6, [r0, #4]
 800b160:	edd0 5a02 	vldr	s11, [r0, #8]
 800b164:	edd1 4a01 	vldr	s9, [r1, #4]
 800b168:	ed90 4a00 	vldr	s8, [r0]
 800b16c:	edd1 3a00 	vldr	s7, [r1]
 800b170:	ed91 5a02 	vldr	s10, [r1, #8]
 800b174:	edd0 2a03 	vldr	s5, [r0, #12]
 800b178:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b17c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b180:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b184:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b188:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b18c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b190:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b194:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b198:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b19c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b1a0:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b1a4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b1a8:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b1ac:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b1b0:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b1b4:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b1b8:	ed82 6a00 	vstr	s12, [r2]
 800b1bc:	edc2 6a01 	vstr	s13, [r2, #4]
 800b1c0:	ed82 7a02 	vstr	s14, [r2, #8]
 800b1c4:	edc2 7a03 	vstr	s15, [r2, #12]
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <MEMS_setMagIndexToOne>:
 800b1cc:	291f      	cmp	r1, #31
 800b1ce:	b430      	push	{r4, r5}
 800b1d0:	d920      	bls.n	800b214 <MEMS_setMagIndexToOne+0x48>
 800b1d2:	6885      	ldr	r5, [r0, #8]
 800b1d4:	3920      	subs	r1, #32
 800b1d6:	2401      	movs	r4, #1
 800b1d8:	fa04 f101 	lsl.w	r1, r4, r1
 800b1dc:	ea21 0105 	bic.w	r1, r1, r5
 800b1e0:	4069      	eors	r1, r5
 800b1e2:	2a1f      	cmp	r2, #31
 800b1e4:	6081      	str	r1, [r0, #8]
 800b1e6:	d91f      	bls.n	800b228 <MEMS_setMagIndexToOne+0x5c>
 800b1e8:	6901      	ldr	r1, [r0, #16]
 800b1ea:	f1a2 0420 	sub.w	r4, r2, #32
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	40a2      	lsls	r2, r4
 800b1f2:	ea22 0201 	bic.w	r2, r2, r1
 800b1f6:	404a      	eors	r2, r1
 800b1f8:	2b1f      	cmp	r3, #31
 800b1fa:	6102      	str	r2, [r0, #16]
 800b1fc:	d91e      	bls.n	800b23c <MEMS_setMagIndexToOne+0x70>
 800b1fe:	69c2      	ldr	r2, [r0, #28]
 800b200:	f1a3 0120 	sub.w	r1, r3, #32
 800b204:	2301      	movs	r3, #1
 800b206:	408b      	lsls	r3, r1
 800b208:	ea23 0302 	bic.w	r3, r3, r2
 800b20c:	4053      	eors	r3, r2
 800b20e:	bc30      	pop	{r4, r5}
 800b210:	61c3      	str	r3, [r0, #28]
 800b212:	4770      	bx	lr
 800b214:	68c5      	ldr	r5, [r0, #12]
 800b216:	2401      	movs	r4, #1
 800b218:	fa04 f101 	lsl.w	r1, r4, r1
 800b21c:	ea21 0105 	bic.w	r1, r1, r5
 800b220:	4069      	eors	r1, r5
 800b222:	2a1f      	cmp	r2, #31
 800b224:	60c1      	str	r1, [r0, #12]
 800b226:	d8df      	bhi.n	800b1e8 <MEMS_setMagIndexToOne+0x1c>
 800b228:	6944      	ldr	r4, [r0, #20]
 800b22a:	2101      	movs	r1, #1
 800b22c:	fa01 f202 	lsl.w	r2, r1, r2
 800b230:	ea22 0204 	bic.w	r2, r2, r4
 800b234:	4062      	eors	r2, r4
 800b236:	2b1f      	cmp	r3, #31
 800b238:	6142      	str	r2, [r0, #20]
 800b23a:	d8e0      	bhi.n	800b1fe <MEMS_setMagIndexToOne+0x32>
 800b23c:	6981      	ldr	r1, [r0, #24]
 800b23e:	2201      	movs	r2, #1
 800b240:	fa02 f303 	lsl.w	r3, r2, r3
 800b244:	ea23 0301 	bic.w	r3, r3, r1
 800b248:	404b      	eors	r3, r1
 800b24a:	bc30      	pop	{r4, r5}
 800b24c:	6183      	str	r3, [r0, #24]
 800b24e:	4770      	bx	lr

0800b250 <getRotationMatrix>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4605      	mov	r5, r0
 800b254:	460c      	mov	r4, r1
 800b256:	4610      	mov	r0, r2
 800b258:	2100      	movs	r1, #0
 800b25a:	2224      	movs	r2, #36	; 0x24
 800b25c:	f00b fdf4 	bl	8016e48 <memset>
 800b260:	edd5 5a00 	vldr	s11, [r5]
 800b264:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800b38c <getRotationMatrix+0x13c>
 800b268:	edc0 5a02 	vstr	s11, [r0, #8]
 800b26c:	ed95 7a01 	vldr	s14, [r5, #4]
 800b270:	ed80 7a05 	vstr	s14, [r0, #20]
 800b274:	ed95 5a02 	vldr	s10, [r5, #8]
 800b278:	ed80 5a08 	vstr	s10, [r0, #32]
 800b27c:	ed94 4a02 	vldr	s8, [r4, #8]
 800b280:	edd4 3a01 	vldr	s7, [r4, #4]
 800b284:	edd4 4a00 	vldr	s9, [r4]
 800b288:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800b28c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800b290:	eee3 7a85 	vfma.f32	s15, s7, s10
 800b294:	4603      	mov	r3, r0
 800b296:	eee4 6a87 	vfma.f32	s13, s9, s14
 800b29a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b29e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800b2a2:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800b2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2aa:	eea4 6a25 	vfma.f32	s12, s8, s11
 800b2ae:	bfdc      	itt	le
 800b2b0:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800b2b4:	eeb0 7a43 	vmovle.f32	s14, s6
 800b2b8:	eeb0 5ac6 	vabs.f32	s10, s12
 800b2bc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b2c0:	edc0 6a06 	vstr	s13, [r0, #24]
 800b2c4:	bfd4      	ite	le
 800b2c6:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800b2ca:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	ed80 6a03 	vstr	s12, [r0, #12]
 800b2d6:	edc0 7a00 	vstr	s15, [r0]
 800b2da:	d447      	bmi.n	800b36c <getRotationMatrix+0x11c>
 800b2dc:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800b2e0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800b2e4:	eef0 5a66 	vmov.f32	s11, s13
 800b2e8:	edd3 6a06 	vldr	s13, [r3, #24]
 800b2ec:	eeb0 5ae6 	vabs.f32	s10, s13
 800b2f0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f8:	d543      	bpl.n	800b382 <getRotationMatrix+0x132>
 800b2fa:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b2fe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800b302:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b306:	eeb0 7a45 	vmov.f32	s14, s10
 800b30a:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800b30e:	eef0 5a44 	vmov.f32	s11, s8
 800b312:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800b316:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800b31a:	ee65 5a07 	vmul.f32	s11, s10, s14
 800b31e:	edd3 3a08 	vldr	s7, [r3, #32]
 800b322:	edd3 4a02 	vldr	s9, [r3, #8]
 800b326:	ed93 4a05 	vldr	s8, [r3, #20]
 800b32a:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800b32e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b332:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b336:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b33a:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800b33e:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800b342:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800b346:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800b34a:	eee4 5a07 	vfma.f32	s11, s8, s14
 800b34e:	eee6 6a24 	vfma.f32	s13, s12, s9
 800b352:	edc3 7a00 	vstr	s15, [r3]
 800b356:	ed83 6a03 	vstr	s12, [r3, #12]
 800b35a:	ed83 7a06 	vstr	s14, [r3, #24]
 800b35e:	ed83 5a04 	vstr	s10, [r3, #16]
 800b362:	edc3 5a01 	vstr	s11, [r3, #4]
 800b366:	edc3 6a07 	vstr	s13, [r3, #28]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b370:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b374:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b378:	eeb0 7a45 	vmov.f32	s14, s10
 800b37c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800b380:	e7b2      	b.n	800b2e8 <getRotationMatrix+0x98>
 800b382:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800b386:	eee5 5a05 	vfma.f32	s11, s10, s10
 800b38a:	e7c2      	b.n	800b312 <getRotationMatrix+0xc2>
 800b38c:	00000000 	.word	0x00000000

0800b390 <b_dcm2q>:
 800b390:	ed90 5a08 	vldr	s10, [r0, #32]
 800b394:	edd0 7a00 	vldr	s15, [r0]
 800b398:	edd0 6a04 	vldr	s13, [r0, #16]
 800b39c:	ee37 7a85 	vadd.f32	s14, s15, s10
 800b3a0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800b3a4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b3a8:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b3ac:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b4:	bfc5      	ittet	gt
 800b3b6:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800b3ba:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800b3be:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800b4cc <b_dcm2q+0x13c>
 800b3c2:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800b3c6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800b3ca:	ee35 6a47 	vsub.f32	s12, s10, s14
 800b3ce:	ee35 7a07 	vadd.f32	s14, s10, s14
 800b3d2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800b3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3da:	bfc5      	ittet	gt
 800b3dc:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800b3e0:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800b3e4:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800b4cc <b_dcm2q+0x13c>
 800b3e8:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800b3ec:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b3f0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800b3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f8:	dd5b      	ble.n	800b4b2 <b_dcm2q+0x122>
 800b3fa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800b3fe:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b402:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b406:	eef1 4ac7 	vsqrt.f32	s9, s14
 800b40a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800b40e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b412:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b416:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b41a:	edd0 6a07 	vldr	s13, [r0, #28]
 800b41e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b426:	bf85      	ittet	hi
 800b428:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800b42c:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800b430:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800b4cc <b_dcm2q+0x13c>
 800b434:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800b438:	edd0 7a05 	vldr	s15, [r0, #20]
 800b43c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b448:	d43c      	bmi.n	800b4c4 <b_dcm2q+0x134>
 800b44a:	bfd8      	it	le
 800b44c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800b450:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b454:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b458:	ed81 7a00 	vstr	s14, [r1]
 800b45c:	edd0 7a06 	vldr	s15, [r0, #24]
 800b460:	ed90 7a02 	vldr	s14, [r0, #8]
 800b464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b470:	d425      	bmi.n	800b4be <b_dcm2q+0x12e>
 800b472:	bfd8      	it	le
 800b474:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800b478:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b47c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b480:	edc1 5a01 	vstr	s11, [r1, #4]
 800b484:	edd0 7a01 	vldr	s15, [r0, #4]
 800b488:	ed90 7a03 	vldr	s14, [r0, #12]
 800b48c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b498:	d40e      	bmi.n	800b4b8 <b_dcm2q+0x128>
 800b49a:	bfd8      	it	le
 800b49c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800b4a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b4a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b4a8:	edc1 4a03 	vstr	s9, [r1, #12]
 800b4ac:	ed81 6a02 	vstr	s12, [r1, #8]
 800b4b0:	4770      	bx	lr
 800b4b2:	eddf 4a06 	vldr	s9, [pc, #24]	; 800b4cc <b_dcm2q+0x13c>
 800b4b6:	e7aa      	b.n	800b40e <b_dcm2q+0x7e>
 800b4b8:	eeb1 6a46 	vneg.f32	s12, s12
 800b4bc:	e7f0      	b.n	800b4a0 <b_dcm2q+0x110>
 800b4be:	eef1 5a65 	vneg.f32	s11, s11
 800b4c2:	e7d9      	b.n	800b478 <b_dcm2q+0xe8>
 800b4c4:	eeb1 7a47 	vneg.f32	s14, s14
 800b4c8:	e7c2      	b.n	800b450 <b_dcm2q+0xc0>
 800b4ca:	bf00      	nop
 800b4cc:	00000000 	.word	0x00000000

0800b4d0 <q2hpr>:
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	ed90 7a00 	vldr	s14, [r0]
 800b4d6:	edd0 6a01 	vldr	s13, [r0, #4]
 800b4da:	edd0 7a02 	vldr	s15, [r0, #8]
 800b4de:	ed90 5a03 	vldr	s10, [r0, #12]
 800b4e2:	ed2d 8b0a 	vpush	{d8-d12}
 800b4e6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b4ea:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b4ee:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800b4f2:	ee67 0a07 	vmul.f32	s1, s14, s14
 800b4f6:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800b4fa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b4fe:	ee27 7a05 	vmul.f32	s14, s14, s10
 800b502:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b506:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b50a:	ee78 aa08 	vadd.f32	s21, s16, s16
 800b50e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800b512:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800b516:	ee30 ca00 	vadd.f32	s24, s0, s0
 800b51a:	ee36 ba06 	vadd.f32	s22, s12, s12
 800b51e:	ee77 8a07 	vadd.f32	s17, s14, s14
 800b522:	ee75 baa5 	vadd.f32	s23, s11, s11
 800b526:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800b52a:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800b52e:	460c      	mov	r4, r1
 800b530:	bb8a      	cbnz	r2, 800b596 <q2hpr+0xc6>
 800b532:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800b536:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800b53a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800b53e:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800b542:	f009 ffa3 	bl	801548c <atan2f>
 800b546:	eeb0 8a40 	vmov.f32	s16, s0
 800b54a:	ed84 8a00 	vstr	s16, [r4]
 800b54e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800b552:	f009 ff69 	bl	8015428 <asinf>
 800b556:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800b55a:	eef0 8a40 	vmov.f32	s17, s0
 800b55e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800b562:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800b566:	f009 ff91 	bl	801548c <atan2f>
 800b56a:	eef1 8a68 	vneg.f32	s17, s17
 800b56e:	eeb0 9a40 	vmov.f32	s18, s0
 800b572:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57a:	ed84 9a02 	vstr	s18, [r4, #8]
 800b57e:	edc4 8a01 	vstr	s17, [r4, #4]
 800b582:	d505      	bpl.n	800b590 <q2hpr+0xc0>
 800b584:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b5dc <q2hpr+0x10c>
 800b588:	ee38 8a00 	vadd.f32	s16, s16, s0
 800b58c:	ed84 8a00 	vstr	s16, [r4]
 800b590:	ecbd 8b0a 	vpop	{d8-d12}
 800b594:	bd10      	pop	{r4, pc}
 800b596:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800b59a:	f009 ff45 	bl	8015428 <asinf>
 800b59e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800b5a2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800b5a6:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800b5aa:	eeb0 9a40 	vmov.f32	s18, s0
 800b5ae:	ee38 0aab 	vadd.f32	s0, s17, s23
 800b5b2:	f009 ff6b 	bl	801548c <atan2f>
 800b5b6:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800b5ba:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800b5be:	eef0 8a40 	vmov.f32	s17, s0
 800b5c2:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800b5c6:	eeb1 0a48 	vneg.f32	s0, s16
 800b5ca:	f009 ff5f 	bl	801548c <atan2f>
 800b5ce:	eef1 8a68 	vneg.f32	s17, s17
 800b5d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b5d6:	ed84 0a00 	vstr	s0, [r4]
 800b5da:	e7ca      	b.n	800b572 <q2hpr+0xa2>
 800b5dc:	40c90fdb 	.word	0x40c90fdb

0800b5e0 <llEvaluate.constprop.0>:
 800b5e0:	edd2 0a00 	vldr	s1, [r2]
 800b5e4:	ed90 1a00 	vldr	s2, [r0]
 800b5e8:	edd0 1a04 	vldr	s3, [r0, #16]
 800b5ec:	edd2 5a01 	vldr	s11, [r2, #4]
 800b5f0:	ed90 6a08 	vldr	s12, [r0, #32]
 800b5f4:	ed90 2a05 	vldr	s4, [r0, #20]
 800b5f8:	ed92 7a02 	vldr	s14, [r2, #8]
 800b5fc:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800b600:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800b604:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800b608:	edd2 7a03 	vldr	s15, [r2, #12]
 800b60c:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800b610:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800b614:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800b618:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	f10d 0810 	add.w	r8, sp, #16
 800b626:	2704      	movs	r7, #4
 800b628:	f101 0510 	add.w	r5, r1, #16
 800b62c:	2f04      	cmp	r7, #4
 800b62e:	4686      	mov	lr, r0
 800b630:	f04f 0c03 	mov.w	ip, #3
 800b634:	b27b      	sxtb	r3, r7
 800b636:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800b63a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800b63e:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800b642:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800b646:	eea6 7a43 	vfms.f32	s14, s12, s6
 800b64a:	edcd 6a00 	vstr	s13, [sp]
 800b64e:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800b652:	eee6 7a63 	vfms.f32	s15, s12, s7
 800b656:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b65a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800b65e:	edcd 6a02 	vstr	s13, [sp, #8]
 800b662:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b666:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b66a:	ed78 7a01 	vldmdb	r8!, {s15}
 800b66e:	ed65 7a01 	vstmdb	r5!, {s15}
 800b672:	d029      	beq.n	800b6c8 <llEvaluate.constprop.0+0xe8>
 800b674:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800b678:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800b67c:	4432      	add	r2, r6
 800b67e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800b682:	edd2 6a00 	vldr	s13, [r2]
 800b686:	ed94 7a00 	vldr	s14, [r4]
 800b68a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b68e:	3301      	adds	r3, #1
 800b690:	b2da      	uxtb	r2, r3
 800b692:	2a04      	cmp	r2, #4
 800b694:	b25b      	sxtb	r3, r3
 800b696:	edc5 7a00 	vstr	s15, [r5]
 800b69a:	d1ed      	bne.n	800b678 <llEvaluate.constprop.0+0x98>
 800b69c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800b6a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6a4:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800b6a8:	ed85 7a00 	vstr	s14, [r5]
 800b6ac:	d013      	beq.n	800b6d6 <llEvaluate.constprop.0+0xf6>
 800b6ae:	3f01      	subs	r7, #1
 800b6b0:	b2ff      	uxtb	r7, r7
 800b6b2:	ed78 7a01 	vldmdb	r8!, {s15}
 800b6b6:	2f04      	cmp	r7, #4
 800b6b8:	f1ae 0e14 	sub.w	lr, lr, #20
 800b6bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b6c0:	b27b      	sxtb	r3, r7
 800b6c2:	ed65 7a01 	vstmdb	r5!, {s15}
 800b6c6:	d1d5      	bne.n	800b674 <llEvaluate.constprop.0+0x94>
 800b6c8:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800b6cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6d0:	ed85 7a00 	vstr	s14, [r5]
 800b6d4:	e7eb      	b.n	800b6ae <llEvaluate.constprop.0+0xce>
 800b6d6:	b004      	add	sp, #16
 800b6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b6dc <MEMS_updateMagBufferIndex>:
 800b6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6e0:	ed2d 8b02 	vpush	{d8}
 800b6e4:	7804      	ldrb	r4, [r0, #0]
 800b6e6:	7842      	ldrb	r2, [r0, #1]
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4294      	cmp	r4, r2
 800b6f2:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800b6f6:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800b6fa:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800b6fe:	b083      	sub	sp, #12
 800b700:	460d      	mov	r5, r1
 800b702:	f100 0001 	add.w	r0, r0, #1
 800b706:	f000 8083 	beq.w	800b810 <MEMS_updateMagBufferIndex+0x134>
 800b70a:	1b00      	subs	r0, r0, r4
 800b70c:	fb90 f8f2 	sdiv	r8, r0, r2
 800b710:	fb02 0018 	mls	r0, r2, r8, r0
 800b714:	2800      	cmp	r0, #0
 800b716:	bfb6      	itet	lt
 800b718:	eb02 0800 	addlt.w	r8, r2, r0
 800b71c:	fa0f f880 	sxthge.w	r8, r0
 800b720:	fa0f f888 	sxthlt.w	r8, r8
 800b724:	b934      	cbnz	r4, 800b734 <MEMS_updateMagBufferIndex+0x58>
 800b726:	23ff      	movs	r3, #255	; 0xff
 800b728:	70b3      	strb	r3, [r6, #2]
 800b72a:	b003      	add	sp, #12
 800b72c:	ecbd 8b02 	vpop	{d8}
 800b730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b734:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b738:	2700      	movs	r7, #0
 800b73a:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800b73e:	463b      	mov	r3, r7
 800b740:	e000      	b.n	800b744 <MEMS_updateMagBufferIndex+0x68>
 800b742:	7872      	ldrb	r2, [r6, #1]
 800b744:	4443      	add	r3, r8
 800b746:	fb93 f4f2 	sdiv	r4, r3, r2
 800b74a:	fb02 3314 	mls	r3, r2, r4, r3
 800b74e:	b2dc      	uxtb	r4, r3
 800b750:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800b754:	3701      	adds	r7, #1
 800b756:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800b75a:	fb92 f3f5 	sdiv	r3, r2, r5
 800b75e:	fb05 2313 	mls	r3, r5, r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfb8      	it	lt
 800b766:	195b      	addlt	r3, r3, r5
 800b768:	b21b      	sxth	r3, r3
 800b76a:	ee00 3a10 	vmov	s0, r3
 800b76e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b772:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b776:	f009 fd5f 	bl	8015238 <roundf>
 800b77a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800b77e:	fb92 f3f5 	sdiv	r3, r2, r5
 800b782:	fb05 2313 	mls	r3, r5, r3, r2
 800b786:	2b00      	cmp	r3, #0
 800b788:	bfb8      	it	lt
 800b78a:	195b      	addlt	r3, r3, r5
 800b78c:	b21b      	sxth	r3, r3
 800b78e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b792:	ee00 3a10 	vmov	s0, r3
 800b796:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b79a:	edcd 7a01 	vstr	s15, [sp, #4]
 800b79e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b7a2:	f009 fd49 	bl	8015238 <roundf>
 800b7a6:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800b7aa:	fb92 f3f5 	sdiv	r3, r2, r5
 800b7ae:	fb05 2313 	mls	r3, r5, r3, r2
 800b7b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b7b6:	18ea      	adds	r2, r5, r3
 800b7b8:	b219      	sxth	r1, r3
 800b7ba:	b212      	sxth	r2, r2
 800b7bc:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800b7c0:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7c4:	ee00 1a10 	vmov	s0, r1
 800b7c8:	ee07 2a90 	vmov	s15, r2
 800b7cc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b7d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b7da:	bfb8      	it	lt
 800b7dc:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800b7e0:	f009 fd2a 	bl	8015238 <roundf>
 800b7e4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b7e8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800b7ec:	edcd 7a01 	vstr	s15, [sp, #4]
 800b7f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	4649      	mov	r1, r9
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff fce7 	bl	800b1cc <MEMS_setMagIndexToOne>
 800b7fe:	7832      	ldrb	r2, [r6, #0]
 800b800:	b2fb      	uxtb	r3, r7
 800b802:	429a      	cmp	r2, r3
 800b804:	d89d      	bhi.n	800b742 <MEMS_updateMagBufferIndex+0x66>
 800b806:	b003      	add	sp, #12
 800b808:	ecbd 8b02 	vpop	{d8}
 800b80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b810:	fb90 f8f4 	sdiv	r8, r0, r4
 800b814:	fb04 0018 	mls	r0, r4, r8, r0
 800b818:	fa0f f880 	sxth.w	r8, r0
 800b81c:	e782      	b.n	800b724 <MEMS_updateMagBufferIndex+0x48>
 800b81e:	bf00      	nop

0800b820 <getMagStats.constprop.0>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b826:	2400      	movs	r4, #0
 800b828:	4607      	mov	r7, r0
 800b82a:	6034      	str	r4, [r6, #0]
 800b82c:	601c      	str	r4, [r3, #0]
 800b82e:	7800      	ldrb	r0, [r0, #0]
 800b830:	787d      	ldrb	r5, [r7, #1]
 800b832:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800b836:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b83a:	42a8      	cmp	r0, r5
 800b83c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800b840:	f000 80c0 	beq.w	800b9c4 <getMagStats.constprop.0+0x1a4>
 800b844:	3401      	adds	r4, #1
 800b846:	eba4 0c00 	sub.w	ip, r4, r0
 800b84a:	fb9c f4f5 	sdiv	r4, ip, r5
 800b84e:	fb05 c414 	mls	r4, r5, r4, ip
 800b852:	2c00      	cmp	r4, #0
 800b854:	bfb8      	it	lt
 800b856:	1964      	addlt	r4, r4, r5
 800b858:	b224      	sxth	r4, r4
 800b85a:	ee04 0a90 	vmov	s9, r0
 800b85e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800b9e0 <getMagStats.constprop.0+0x1c0>
 800b862:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800b866:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b86a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b86e:	2800      	cmp	r0, #0
 800b870:	f000 80b2 	beq.w	800b9d8 <getMagStats.constprop.0+0x1b8>
 800b874:	3801      	subs	r0, #1
 800b876:	fa54 fc80 	uxtab	ip, r4, r0
 800b87a:	f8b1 9000 	ldrh.w	r9, [r1]
 800b87e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800b882:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800b886:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800b9e4 <getMagStats.constprop.0+0x1c4>
 800b88a:	2000      	movs	r0, #0
 800b88c:	e002      	b.n	800b894 <getMagStats.constprop.0+0x74>
 800b88e:	ed93 3a00 	vldr	s6, [r3]
 800b892:	3401      	adds	r4, #1
 800b894:	fb94 f1f5 	sdiv	r1, r4, r5
 800b898:	fb05 4111 	mls	r1, r5, r1, r4
 800b89c:	b2c9      	uxtb	r1, r1
 800b89e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800b8a2:	edd2 3a00 	vldr	s7, [r2]
 800b8a6:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800b8aa:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800b8ae:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800b8b0:	ed92 4a04 	vldr	s8, [r2, #16]
 800b8b4:	ed92 6a08 	vldr	s12, [r2, #32]
 800b8b8:	ebaa 0a09 	sub.w	sl, sl, r9
 800b8bc:	ebab 0b08 	sub.w	fp, fp, r8
 800b8c0:	fa0f fa8a 	sxth.w	sl, sl
 800b8c4:	ee07 aa10 	vmov	s14, sl
 800b8c8:	fa0f fa8b 	sxth.w	sl, fp
 800b8cc:	ee06 aa90 	vmov	s13, sl
 800b8d0:	eba1 010e 	sub.w	r1, r1, lr
 800b8d4:	b209      	sxth	r1, r1
 800b8d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b8da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b8de:	ee07 1a90 	vmov	s15, r1
 800b8e2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800b8e6:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b8ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800b8f2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800b8f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b8fa:	ee16 1a90 	vmov	r1, s13
 800b8fe:	ee17 aa10 	vmov	sl, s14
 800b902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b906:	fb11 f101 	smulbb	r1, r1, r1
 800b90a:	fa0f fa8a 	sxth.w	sl, sl
 800b90e:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800b912:	ee17 1a90 	vmov	r1, s15
 800b916:	b209      	sxth	r1, r1
 800b918:	fb01 a101 	mla	r1, r1, r1, sl
 800b91c:	ee07 1a90 	vmov	s15, r1
 800b920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b924:	f100 0a01 	add.w	sl, r0, #1
 800b928:	eef1 6ae7 	vsqrt.f32	s13, s15
 800b92c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b930:	ee17 1a90 	vmov	r1, s15
 800b934:	b209      	sxth	r1, r1
 800b936:	ee07 1a10 	vmov	s14, r1
 800b93a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b93e:	ee77 7a45 	vsub.f32	s15, s14, s10
 800b942:	ee37 7a03 	vadd.f32	s14, s14, s6
 800b946:	eef0 7ae7 	vabs.f32	s15, s15
 800b94a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b94e:	ed83 7a00 	vstr	s14, [r3]
 800b952:	ee17 1a90 	vmov	r1, s15
 800b956:	b209      	sxth	r1, r1
 800b958:	fb01 fb01 	mul.w	fp, r1, r1
 800b95c:	ee07 ba90 	vmov	s15, fp
 800b960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b964:	ee07 1a90 	vmov	s15, r1
 800b968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b96c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800b970:	edd6 7a00 	vldr	s15, [r6]
 800b974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b97c:	bf48      	it	mi
 800b97e:	fa5f f08a 	uxtbmi.w	r0, sl
 800b982:	45a4      	cmp	ip, r4
 800b984:	edc6 7a00 	vstr	s15, [r6]
 800b988:	d181      	bne.n	800b88e <getMagStats.constprop.0+0x6e>
 800b98a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800b98e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800b9e8 <getMagStats.constprop.0+0x1c8>
 800b992:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800b996:	eef1 7ae6 	vsqrt.f32	s15, s13
 800b99a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b99e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9a6:	bfb8      	it	lt
 800b9a8:	eef0 7a47 	vmovlt.f32	s15, s14
 800b9ac:	edc6 7a00 	vstr	s15, [r6]
 800b9b0:	edd3 7a00 	vldr	s15, [r3]
 800b9b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b9b8:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800b9bc:	edc3 7a00 	vstr	s15, [r3]
 800b9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c4:	1c65      	adds	r5, r4, #1
 800b9c6:	fb95 f4f0 	sdiv	r4, r5, r0
 800b9ca:	fb00 5414 	mls	r4, r0, r4, r5
 800b9ce:	ee04 0a90 	vmov	s9, r0
 800b9d2:	b224      	sxth	r4, r4
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	e742      	b.n	800b85e <getMagStats.constprop.0+0x3e>
 800b9d8:	edd6 7a00 	vldr	s15, [r6]
 800b9dc:	e7d5      	b.n	800b98a <getMagStats.constprop.0+0x16a>
 800b9de:	bf00      	nop
 800b9e0:	423c0000 	.word	0x423c0000
 800b9e4:	00000000 	.word	0x00000000
 800b9e8:	3f59999a 	.word	0x3f59999a

0800b9ec <MFX_emptyAttitude>:
 800b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	ed2d 8b10 	vpush	{d8-d15}
 800b9f4:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800b9f8:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800b9fc:	f04f 0a00 	mov.w	sl, #0
 800ba00:	4fef      	ldr	r7, [pc, #956]	; (800bdc0 <MFX_emptyAttitude+0x3d4>)
 800ba02:	f8c4 a008 	str.w	sl, [r4, #8]
 800ba06:	e9c4 aa00 	strd	sl, sl, [r4]
 800ba0a:	f837 3b04 	ldrh.w	r3, [r7], #4
 800ba0e:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800ba12:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800ba16:	4680      	mov	r8, r0
 800ba18:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800ba1c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800ba20:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ba24:	0c1b      	lsrs	r3, r3, #16
 800ba26:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800ba2a:	ab27      	add	r3, sp, #156	; 0x9c
 800ba2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba30:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800ba34:	ab2d      	add	r3, sp, #180	; 0xb4
 800ba36:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800ba3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba3e:	ab30      	add	r3, sp, #192	; 0xc0
 800ba40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba44:	ab33      	add	r3, sp, #204	; 0xcc
 800ba46:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800ba4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba4e:	f04f 0c00 	mov.w	ip, #0
 800ba52:	ab36      	add	r3, sp, #216	; 0xd8
 800ba54:	f04f 0b00 	mov.w	fp, #0
 800ba58:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800ba5c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800ba60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ba64:	4628      	mov	r0, r5
 800ba66:	2224      	movs	r2, #36	; 0x24
 800ba68:	f00b f9ee 	bl	8016e48 <memset>
 800ba6c:	4651      	mov	r1, sl
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ba74:	ed9f bad3 	vldr	s22, [pc, #844]	; 800bdc4 <MFX_emptyAttitude+0x3d8>
 800ba78:	eddf ead3 	vldr	s29, [pc, #844]	; 800bdc8 <MFX_emptyAttitude+0x3dc>
 800ba7c:	f00b f9e4 	bl	8016e48 <memset>
 800ba80:	edd5 4a00 	vldr	s9, [r5]
 800ba84:	ed95 5a01 	vldr	s10, [r5, #4]
 800ba88:	edd5 5a02 	vldr	s11, [r5, #8]
 800ba8c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800ba90:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800ba94:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800ba98:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800ba9c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800baa0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800baa4:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800baa8:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800baac:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800bab0:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800bab4:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800bab8:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800babc:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800bac0:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800bac4:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800bac8:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800bacc:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800bad0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800bad4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800bad8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800badc:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800bae0:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800bae4:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800bae8:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800baec:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800baf0:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800baf4:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800baf8:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800bafc:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800bb00:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800bb04:	ed95 6a03 	vldr	s12, [r5, #12]
 800bb08:	edd5 6a04 	vldr	s13, [r5, #16]
 800bb0c:	ed95 7a05 	vldr	s14, [r5, #20]
 800bb10:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800bb14:	ed8d 6a08 	vstr	s12, [sp, #32]
 800bb18:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800bb1c:	edcd 6a07 	vstr	s13, [sp, #28]
 800bb20:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800bb24:	ed8d 7a06 	vstr	s14, [sp, #24]
 800bb28:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800bb2c:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800bb30:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800bb34:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800bb38:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800bb3c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800bb40:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800bb44:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800bb48:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800bb4c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800bb50:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800bb54:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800bb58:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800bb5c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800bb60:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800bb64:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800bb68:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800bb6c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800bb70:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800bb74:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800bb78:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800bb7c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800bb80:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800bb84:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800bb88:	edd5 7a06 	vldr	s15, [r5, #24]
 800bb8c:	edd5 fa07 	vldr	s31, [r5, #28]
 800bb90:	ed95 fa08 	vldr	s30, [r5, #32]
 800bb94:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800bb98:	edcd 7a05 	vstr	s15, [sp, #20]
 800bb9c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800bba0:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800bba4:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800bba8:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800bbac:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800bbb0:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800bbb4:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800bbb8:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800bbbc:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800bbc0:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800bbc4:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800bbc8:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800bbcc:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800bbd0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800bbd4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800bbd8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800bbdc:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800bbe0:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800bbe4:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800bbe8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800bbec:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800bbf0:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800bbf4:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800bbf8:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800bbfc:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800bc00:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800bc04:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800bc08:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800bc0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bc0e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800bc12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc16:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bc18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	f8cc 3000 	str.w	r3, [ip]
 800bc22:	4651      	mov	r1, sl
 800bc24:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800bc2e:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800bc32:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800bc36:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800bc3a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800bc3e:	f00b f903 	bl	8016e48 <memset>
 800bc42:	4621      	mov	r1, r4
 800bc44:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc48:	a898      	add	r0, sp, #608	; 0x260
 800bc4a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800bc4e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800bc52:	f00b f8eb 	bl	8016e2c <memcpy>
 800bc56:	4651      	mov	r1, sl
 800bc58:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800bc62:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800bc66:	f00b f8ef 	bl	8016e48 <memset>
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc70:	a8f4      	add	r0, sp, #976	; 0x3d0
 800bc72:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800bc76:	f00b f8d9 	bl	8016e2c <memcpy>
 800bc7a:	4651      	mov	r1, sl
 800bc7c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc80:	4620      	mov	r0, r4
 800bc82:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800bc86:	f00b f8df 	bl	8016e48 <memset>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	8037      	strh	r7, [r6, #0]
 800bc8e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bc92:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800bc96:	f00b f8c9 	bl	8016e2c <memcpy>
 800bc9a:	4651      	mov	r1, sl
 800bc9c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bca0:	4620      	mov	r0, r4
 800bca2:	ed86 8a01 	vstr	s16, [r6, #4]
 800bca6:	f00b f8cf 	bl	8016e48 <memset>
 800bcaa:	4621      	mov	r1, r4
 800bcac:	802f      	strh	r7, [r5, #0]
 800bcae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bcb2:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800bcb6:	f00b f8b9 	bl	8016e2c <memcpy>
 800bcba:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800bcbe:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800bcc2:	2701      	movs	r7, #1
 800bcc4:	9600      	str	r6, [sp, #0]
 800bcc6:	9403      	str	r4, [sp, #12]
 800bcc8:	eddf 3a40 	vldr	s7, [pc, #256]	; 800bdcc <MFX_emptyAttitude+0x3e0>
 800bccc:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800bdd0 <MFX_emptyAttitude+0x3e4>
 800bcd0:	ed85 8a01 	vstr	s16, [r5, #4]
 800bcd4:	483f      	ldr	r0, [pc, #252]	; (800bdd4 <MFX_emptyAttitude+0x3e8>)
 800bcd6:	4d40      	ldr	r5, [pc, #256]	; (800bdd8 <MFX_emptyAttitude+0x3ec>)
 800bcd8:	f8df e120 	ldr.w	lr, [pc, #288]	; 800bdfc <MFX_emptyAttitude+0x410>
 800bcdc:	951c      	str	r5, [sp, #112]	; 0x70
 800bcde:	abf2      	add	r3, sp, #968	; 0x3c8
 800bce0:	aa96      	add	r2, sp, #600	; 0x258
 800bce2:	a90d      	add	r1, sp, #52	; 0x34
 800bce4:	9017      	str	r0, [sp, #92]	; 0x5c
 800bce6:	4d3d      	ldr	r5, [pc, #244]	; (800bddc <MFX_emptyAttitude+0x3f0>)
 800bce8:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800bcec:	4638      	mov	r0, r7
 800bcee:	ae27      	add	r6, sp, #156	; 0x9c
 800bcf0:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800bcf4:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800bcf8:	951b      	str	r5, [sp, #108]	; 0x6c
 800bcfa:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800bcfe:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800bd02:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800bd06:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800bd0a:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800bd0e:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800bd12:	f7fe fed1 	bl	800aab8 <DataHist_parameters>
 800bd16:	ce07      	ldmia	r6!, {r0, r1, r2}
 800bd18:	4b31      	ldr	r3, [pc, #196]	; (800bde0 <MFX_emptyAttitude+0x3f4>)
 800bd1a:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800bd1e:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800bd22:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800bd26:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800bd2a:	f8c8 300c 	str.w	r3, [r8, #12]
 800bd2e:	4b2d      	ldr	r3, [pc, #180]	; (800bde4 <MFX_emptyAttitude+0x3f8>)
 800bd30:	f8c8 3014 	str.w	r3, [r8, #20]
 800bd34:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800bd38:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800bde8 <MFX_emptyAttitude+0x3fc>
 800bd3c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800bdec <MFX_emptyAttitude+0x400>
 800bd40:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800bdf0 <MFX_emptyAttitude+0x404>
 800bd44:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800bdf4 <MFX_emptyAttitude+0x408>
 800bd48:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800bdf8 <MFX_emptyAttitude+0x40c>
 800bd4c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800bd50:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800be00 <MFX_emptyAttitude+0x414>
 800bd54:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800be04 <MFX_emptyAttitude+0x418>
 800bd58:	edc8 2a06 	vstr	s5, [r8, #24]
 800bd5c:	f04f 0b00 	mov.w	fp, #0
 800bd60:	f04f 0c00 	mov.w	ip, #0
 800bd64:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800bd68:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800bd6c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800bd70:	ad2d      	add	r5, sp, #180	; 0xb4
 800bd72:	469b      	mov	fp, r3
 800bd74:	f8df c090 	ldr.w	ip, [pc, #144]	; 800be08 <MFX_emptyAttitude+0x41c>
 800bd78:	ed88 3a07 	vstr	s6, [r8, #28]
 800bd7c:	f240 1301 	movw	r3, #257	; 0x101
 800bd80:	edc8 3a08 	vstr	s7, [r8, #32]
 800bd84:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800bd88:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800bd8c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800bd90:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800bd94:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800bd98:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800bd9c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800bda0:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800bda4:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800bda8:	f8c8 3000 	str.w	r3, [r8]
 800bdac:	f8a8 3004 	strh.w	r3, [r8, #4]
 800bdb0:	ed88 8a02 	vstr	s16, [r8, #8]
 800bdb4:	ed88 8a04 	vstr	s16, [r8, #16]
 800bdb8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800bdbc:	e028      	b.n	800be10 <MFX_emptyAttitude+0x424>
 800bdbe:	bf00      	nop
 800bdc0:	08017030 	.word	0x08017030
 800bdc4:	00000000 	.word	0x00000000
 800bdc8:	447a0000 	.word	0x447a0000
 800bdcc:	3e93ffa3 	.word	0x3e93ffa3
 800bdd0:	3e5cec8f 	.word	0x3e5cec8f
 800bdd4:	3ea25c13 	.word	0x3ea25c13
 800bdd8:	40a00000 	.word	0x40a00000
 800bddc:	3d57bb3d 	.word	0x3d57bb3d
 800bde0:	01010100 	.word	0x01010100
 800bde4:	41200000 	.word	0x41200000
 800bde8:	3a9d4952 	.word	0x3a9d4952
 800bdec:	3ac49ba6 	.word	0x3ac49ba6
 800bdf0:	3b03126f 	.word	0x3b03126f
 800bdf4:	402ab021 	.word	0x402ab021
 800bdf8:	3a83126f 	.word	0x3a83126f
 800bdfc:	3e006d36 	.word	0x3e006d36
 800be00:	3f639581 	.word	0x3f639581
 800be04:	3f13f7cf 	.word	0x3f13f7cf
 800be08:	3f2ac083 	.word	0x3f2ac083
 800be0c:	3f4ccccd 	.word	0x3f4ccccd
 800be10:	cd07      	ldmia	r5!, {r0, r1, r2}
 800be12:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800be16:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800be1a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800be1e:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800be22:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800be26:	ab33      	add	r3, sp, #204	; 0xcc
 800be28:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800be2c:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800be30:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800be34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be36:	ab36      	add	r3, sp, #216	; 0xd8
 800be38:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800be3c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800be40:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800be44:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be46:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800be0c <MFX_emptyAttitude+0x420>
 800be4a:	4bd6      	ldr	r3, [pc, #856]	; (800c1a4 <MFX_emptyAttitude+0x7b8>)
 800be4c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800be50:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800be54:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800be58:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800be5c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800be60:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800be64:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800be68:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800be6c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800be70:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800be74:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800be78:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800be7c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800be80:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800be84:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800be88:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800be8c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800be90:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800be94:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800be98:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800be9c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800bea0:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800bea4:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800bea8:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800beac:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800beb0:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800beb4:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800beb8:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800bebc:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800bec0:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800bec4:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800bec8:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800becc:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800bed0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800bed4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800bed8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800bedc:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800bee0:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800bee4:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800bee8:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800beec:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800bef0:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800bef4:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800bef8:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800befc:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800bf00:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800bf04:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800bf08:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800bf0c:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800bf10:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800bf14:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800bf18:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800bf1c:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800bf20:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800bf24:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800bf28:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800bf2c:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800bf30:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800bf34:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800bf38:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800bf3c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800bf40:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800bf44:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800bf48:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800bf4c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800bf50:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800bf54:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800bf58:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800bf5c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800bf60:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800bf64:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800bf68:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800bf6c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800bf70:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800bf74:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800bf78:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800bf7c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800bf80:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800bf84:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800bf88:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800bf8c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800bf90:	eddd 6a07 	vldr	s13, [sp, #28]
 800bf94:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800bf98:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800bf9c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800bfa0:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800bfa4:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800bfa8:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800bfac:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800bfb0:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800bfb4:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800bfb8:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800bfbc:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800bfc0:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800bfc4:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800bfc8:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800bfcc:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800bfd0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800bfd4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800bfd8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800bfdc:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800bfe0:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800bfe4:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800bfe8:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800bfec:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800bff0:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800bff4:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800bff8:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800bffc:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c000:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c004:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c008:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c00c:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c010:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c014:	eddd 7a05 	vldr	s15, [sp, #20]
 800c018:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c01c:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c020:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c024:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c028:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c02c:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c030:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c034:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c038:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c03c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c040:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c044:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c048:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c04c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c050:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c054:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c058:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c05c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c060:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c064:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c068:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c06c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c070:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c074:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c078:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c07c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c080:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c084:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c088:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c08c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c090:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c094:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c098:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c09c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c0a0:	7820      	ldrb	r0, [r4, #0]
 800c0a2:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c0a6:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c0aa:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c0ae:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c0b2:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c0b6:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c0ba:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c0be:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c0c2:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c0c6:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c0ca:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c0ce:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c0d2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c0d6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c0da:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c0de:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c0e2:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c0e6:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c0ea:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c0ee:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c0f2:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c0f6:	f8cd e00c 	str.w	lr, [sp, #12]
 800c0fa:	9500      	str	r5, [sp, #0]
 800c0fc:	f7fe fcdc 	bl	800aab8 <DataHist_parameters>
 800c100:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c104:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c108:	9205      	str	r2, [sp, #20]
 800c10a:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c10e:	ed8b ba00 	vstr	s22, [fp]
 800c112:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c116:	ed83 ba00 	vstr	s22, [r3]
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	9106      	str	r1, [sp, #24]
 800c11e:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c122:	ed89 ba00 	vstr	s22, [r9]
 800c126:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c12a:	ed83 8a00 	vstr	s16, [r3]
 800c12e:	9b06      	ldr	r3, [sp, #24]
 800c130:	9207      	str	r2, [sp, #28]
 800c132:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c136:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c13a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c13e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c142:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c146:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c14a:	ed8e ba00 	vstr	s22, [lr]
 800c14e:	ed8c ba00 	vstr	s22, [ip]
 800c152:	ed87 ba00 	vstr	s22, [r7]
 800c156:	ed86 ba00 	vstr	s22, [r6]
 800c15a:	ed85 ba00 	vstr	s22, [r5]
 800c15e:	ed84 ba00 	vstr	s22, [r4]
 800c162:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c166:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c16a:	ed83 ba00 	vstr	s22, [r3]
 800c16e:	9b07      	ldr	r3, [sp, #28]
 800c170:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c174:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c178:	ed80 8a00 	vstr	s16, [r0]
 800c17c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c180:	ed81 ba00 	vstr	s22, [r1]
 800c184:	ed83 ba00 	vstr	s22, [r3]
 800c188:	230a      	movs	r3, #10
 800c18a:	ed82 ba00 	vstr	s22, [r2]
 800c18e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c192:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c196:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c19a:	ecbd 8b10 	vpop	{d8-d15}
 800c19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a2:	bf00      	nop
 800c1a4:	3f333333 	.word	0x3f333333

0800c1a8 <output_update>:
 800c1a8:	ed90 7a00 	vldr	s14, [r0]
 800c1ac:	edd0 7a01 	vldr	s15, [r0, #4]
 800c1b0:	ed90 5a03 	vldr	s10, [r0, #12]
 800c1b4:	edd0 5a02 	vldr	s11, [r0, #8]
 800c1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c1c0:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c1c4:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c1c8:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c1cc:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c1d0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c1d4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c1d8:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c1dc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c1e0:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c1e4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c1e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c1ec:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c1f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c1f4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c1f8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	4615      	mov	r5, r2
 800c200:	461e      	mov	r6, r3
 800c202:	f1bc 0f00 	cmp.w	ip, #0
 800c206:	d146      	bne.n	800c296 <output_update+0xee>
 800c208:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c20c:	eef1 6a66 	vneg.f32	s13, s13
 800c210:	edc3 7a01 	vstr	s15, [r3, #4]
 800c214:	edc3 6a00 	vstr	s13, [r3]
 800c218:	ed83 5a02 	vstr	s10, [r3, #8]
 800c21c:	4662      	mov	r2, ip
 800c21e:	4629      	mov	r1, r5
 800c220:	4604      	mov	r4, r0
 800c222:	f7ff f955 	bl	800b4d0 <q2hpr>
 800c226:	edd5 6a01 	vldr	s13, [r5, #4]
 800c22a:	ed95 7a00 	vldr	s14, [r5]
 800c22e:	edd5 7a02 	vldr	s15, [r5, #8]
 800c232:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800c344 <output_update+0x19c>
 800c236:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c23a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c23e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800c242:	ed85 7a00 	vstr	s14, [r5]
 800c246:	edc5 6a01 	vstr	s13, [r5, #4]
 800c24a:	edc5 7a02 	vstr	s15, [r5, #8]
 800c24e:	ed97 7a01 	vldr	s14, [r7, #4]
 800c252:	edd6 7a00 	vldr	s15, [r6]
 800c256:	6822      	ldr	r2, [r4, #0]
 800c258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c25c:	edc8 7a00 	vstr	s15, [r8]
 800c260:	ed97 7a00 	vldr	s14, [r7]
 800c264:	edd6 7a01 	vldr	s15, [r6, #4]
 800c268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c26c:	edc8 7a01 	vstr	s15, [r8, #4]
 800c270:	edd6 7a02 	vldr	s15, [r6, #8]
 800c274:	ed97 7a02 	vldr	s14, [r7, #8]
 800c278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c27c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c280:	edd4 7a02 	vldr	s15, [r4, #8]
 800c284:	6863      	ldr	r3, [r4, #4]
 800c286:	6023      	str	r3, [r4, #0]
 800c288:	eef1 7a67 	vneg.f32	s15, s15
 800c28c:	6062      	str	r2, [r4, #4]
 800c28e:	edc4 7a02 	vstr	s15, [r4, #8]
 800c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c296:	f1bc 0f01 	cmp.w	ip, #1
 800c29a:	d015      	beq.n	800c2c8 <output_update+0x120>
 800c29c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c344 <output_update+0x19c>
 800c2a0:	edd2 6a00 	vldr	s13, [r2]
 800c2a4:	ed92 7a01 	vldr	s14, [r2, #4]
 800c2a8:	edd2 7a02 	vldr	s15, [r2, #8]
 800c2ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c2b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c2b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c2b8:	edc2 6a00 	vstr	s13, [r2]
 800c2bc:	ed82 7a01 	vstr	s14, [r2, #4]
 800c2c0:	edc2 7a02 	vstr	s15, [r2, #8]
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2cc:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c2d0:	eef1 6a66 	vneg.f32	s13, s13
 800c2d4:	edc3 7a00 	vstr	s15, [r3]
 800c2d8:	ed83 6a02 	vstr	s12, [r3, #8]
 800c2dc:	edc3 6a01 	vstr	s13, [r3, #4]
 800c2e0:	4662      	mov	r2, ip
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	f7ff f8f4 	bl	800b4d0 <q2hpr>
 800c2e8:	edd5 6a00 	vldr	s13, [r5]
 800c2ec:	ed95 7a01 	vldr	s14, [r5, #4]
 800c2f0:	edd5 7a02 	vldr	s15, [r5, #8]
 800c2f4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c344 <output_update+0x19c>
 800c2f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c2fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c300:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c304:	ed85 7a01 	vstr	s14, [r5, #4]
 800c308:	edc5 6a00 	vstr	s13, [r5]
 800c30c:	edc5 7a02 	vstr	s15, [r5, #8]
 800c310:	ed97 7a00 	vldr	s14, [r7]
 800c314:	edd6 7a00 	vldr	s15, [r6]
 800c318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c31c:	edc8 7a00 	vstr	s15, [r8]
 800c320:	ed97 7a01 	vldr	s14, [r7, #4]
 800c324:	edd6 7a01 	vldr	s15, [r6, #4]
 800c328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c32c:	edc8 7a01 	vstr	s15, [r8, #4]
 800c330:	edd6 7a02 	vldr	s15, [r6, #8]
 800c334:	ed97 7a02 	vldr	s14, [r7, #8]
 800c338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c33c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c344:	42652ee1 	.word	0x42652ee1

0800c348 <kalman_3gyro.constprop.0>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	ed2d 8b10 	vpush	{d8-d15}
 800c350:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800c354:	edd2 9a02 	vldr	s19, [r2, #8]
 800c358:	edd2 8a03 	vldr	s17, [r2, #12]
 800c35c:	edd2 6a04 	vldr	s13, [r2, #16]
 800c360:	ed92 6a05 	vldr	s12, [r2, #20]
 800c364:	6854      	ldr	r4, [r2, #4]
 800c366:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800c36a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c36e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c372:	4683      	mov	fp, r0
 800c374:	edd2 7a00 	vldr	s15, [r2]
 800c378:	48e3      	ldr	r0, [pc, #908]	; (800c708 <kalman_3gyro.constprop.0+0x3c0>)
 800c37a:	9108      	str	r1, [sp, #32]
 800c37c:	904a      	str	r0, [sp, #296]	; 0x128
 800c37e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c382:	460d      	mov	r5, r1
 800c384:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800c388:	2100      	movs	r1, #0
 800c38a:	9328      	str	r3, [sp, #160]	; 0xa0
 800c38c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800c390:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800c394:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800c398:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800c39c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800c3a0:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c3a4:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800c3a8:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800c3ac:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800c3b0:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800c3b4:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800c3b8:	946f      	str	r4, [sp, #444]	; 0x1bc
 800c3ba:	9470      	str	r4, [sp, #448]	; 0x1c0
 800c3bc:	9471      	str	r4, [sp, #452]	; 0x1c4
 800c3be:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800c3c2:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800c3c6:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800c3ca:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800c3ce:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800c3d2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800c3d6:	eeb0 8a60 	vmov.f32	s16, s1
 800c3da:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800c3de:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800c3e2:	ed8d 1a07 	vstr	s2, [sp, #28]
 800c3e6:	f00a fd2f 	bl	8016e48 <memset>
 800c3ea:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800c3ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c3f2:	600b      	str	r3, [r1, #0]
 800c3f4:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800c3f8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800c3fc:	600b      	str	r3, [r1, #0]
 800c3fe:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800c402:	600b      	str	r3, [r1, #0]
 800c404:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800c408:	600b      	str	r3, [r1, #0]
 800c40a:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800c40e:	600b      	str	r3, [r1, #0]
 800c410:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800c414:	600b      	str	r3, [r1, #0]
 800c416:	2a00      	cmp	r2, #0
 800c418:	f001 82c2 	beq.w	800d9a0 <kalman_3gyro.constprop.0+0x1658>
 800c41c:	ed95 5a02 	vldr	s10, [r5, #8]
 800c420:	edd5 5a01 	vldr	s11, [r5, #4]
 800c424:	ed95 3a00 	vldr	s6, [r5]
 800c428:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800c42c:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800c430:	ee35 4a05 	vadd.f32	s8, s10, s10
 800c434:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800c438:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c43c:	ee63 7a27 	vmul.f32	s15, s6, s15
 800c440:	ee33 3a03 	vadd.f32	s6, s6, s6
 800c444:	9b08      	ldr	r3, [sp, #32]
 800c446:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800c44a:	ed82 4a00 	vstr	s8, [r2]
 800c44e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800c452:	edc2 4a00 	vstr	s9, [r2]
 800c456:	ed93 6a05 	vldr	s12, [r3, #20]
 800c45a:	edd3 6a04 	vldr	s13, [r3, #16]
 800c45e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c462:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800c466:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800c46a:	ed82 5a00 	vstr	s10, [r2]
 800c46e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800c472:	ed82 3a00 	vstr	s6, [r2]
 800c476:	eef1 3a46 	vneg.f32	s7, s12
 800c47a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800c47e:	edc2 5a00 	vstr	s11, [r2]
 800c482:	eeb1 4a66 	vneg.f32	s8, s13
 800c486:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800c48a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800c48e:	edc2 7a00 	vstr	s15, [r2]
 800c492:	ee34 3a04 	vadd.f32	s6, s8, s8
 800c496:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800c49a:	eef1 4a47 	vneg.f32	s9, s14
 800c49e:	ed82 5a00 	vstr	s10, [r2]
 800c4a2:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800c4a6:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800c4aa:	ed81 3a00 	vstr	s6, [r1]
 800c4ae:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800c4b2:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800c4b6:	ed81 5a00 	vstr	s10, [r1]
 800c4ba:	ee77 7a07 	vadd.f32	s15, s14, s14
 800c4be:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800c4c2:	edc1 5a00 	vstr	s11, [r1]
 800c4c6:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800c4ca:	edc1 7a00 	vstr	s15, [r1]
 800c4ce:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	600b      	str	r3, [r1, #0]
 800c4d6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800c4da:	ee76 2a06 	vadd.f32	s5, s12, s12
 800c4de:	600b      	str	r3, [r1, #0]
 800c4e0:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800c4e4:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800c4e8:	600b      	str	r3, [r1, #0]
 800c4ea:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800c4ee:	edc2 2a00 	vstr	s5, [r2]
 800c4f2:	600b      	str	r3, [r1, #0]
 800c4f4:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800c4f8:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800c4fc:	600b      	str	r3, [r1, #0]
 800c4fe:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800c502:	a87b      	add	r0, sp, #492	; 0x1ec
 800c504:	600b      	str	r3, [r1, #0]
 800c506:	2230      	movs	r2, #48	; 0x30
 800c508:	2100      	movs	r1, #0
 800c50a:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800c50e:	934b      	str	r3, [sp, #300]	; 0x12c
 800c510:	934f      	str	r3, [sp, #316]	; 0x13c
 800c512:	9353      	str	r3, [sp, #332]	; 0x14c
 800c514:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800c518:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800c51c:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800c520:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800c524:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800c528:	942c      	str	r4, [sp, #176]	; 0xb0
 800c52a:	f00a fc8d 	bl	8016e48 <memset>
 800c52e:	eddb 6a06 	vldr	s13, [fp, #24]
 800c532:	ed9b 7a07 	vldr	s14, [fp, #28]
 800c536:	eddb 7a08 	vldr	s15, [fp, #32]
 800c53a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800c53e:	ee68 6a26 	vmul.f32	s13, s16, s13
 800c542:	ee28 7a07 	vmul.f32	s14, s16, s14
 800c546:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c54a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800c54e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800c552:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800c556:	2b00      	cmp	r3, #0
 800c558:	f043 84a8 	bne.w	800feac <kalman_3gyro.constprop.0+0x3b64>
 800c55c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800c560:	2b00      	cmp	r3, #0
 800c562:	f043 81e7 	bne.w	800f934 <kalman_3gyro.constprop.0+0x35ec>
 800c566:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800c56a:	9304      	str	r3, [sp, #16]
 800c56c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800c570:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800c574:	9310      	str	r3, [sp, #64]	; 0x40
 800c576:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800c57a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800c57e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800c582:	930f      	str	r3, [sp, #60]	; 0x3c
 800c584:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800c588:	edd0 7a00 	vldr	s15, [r0]
 800c58c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800c590:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800c594:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800c598:	ed93 6a00 	vldr	s12, [r3]
 800c59c:	ed91 7a00 	vldr	s14, [r1]
 800c5a0:	edd2 6a00 	vldr	s13, [r2]
 800c5a4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800c5a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b2:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800c5b6:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800c5ba:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800c5be:	933a      	str	r3, [sp, #232]	; 0xe8
 800c5c0:	933b      	str	r3, [sp, #236]	; 0xec
 800c5c2:	933c      	str	r3, [sp, #240]	; 0xf0
 800c5c4:	933d      	str	r3, [sp, #244]	; 0xf4
 800c5c6:	d14e      	bne.n	800c666 <kalman_3gyro.constprop.0+0x31e>
 800c5c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d0:	d149      	bne.n	800c666 <kalman_3gyro.constprop.0+0x31e>
 800c5d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5da:	d144      	bne.n	800c666 <kalman_3gyro.constprop.0+0x31e>
 800c5dc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e4:	d13f      	bne.n	800c666 <kalman_3gyro.constprop.0+0x31e>
 800c5e6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800c5e8:	9336      	str	r3, [sp, #216]	; 0xd8
 800c5ea:	7802      	ldrb	r2, [r0, #0]
 800c5ec:	9337      	str	r3, [sp, #220]	; 0xdc
 800c5ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5f2:	9338      	str	r3, [sp, #224]	; 0xe0
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	ed90 7a03 	vldr	s14, [r0, #12]
 800c5fa:	edd0 6a01 	vldr	s13, [r0, #4]
 800c5fe:	edd0 7a02 	vldr	s15, [r0, #8]
 800c602:	9139      	str	r1, [sp, #228]	; 0xe4
 800c604:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800c608:	2a00      	cmp	r2, #0
 800c60a:	f003 8568 	beq.w	80100de <kalman_3gyro.constprop.0+0x3d96>
 800c60e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c612:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800c616:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c61a:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c61e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c622:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c626:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800c62a:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800c62e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c632:	2100      	movs	r1, #0
 800c634:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800c638:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800c63c:	f00a fc04 	bl	8016e48 <memset>
 800c640:	4b32      	ldr	r3, [pc, #200]	; (800c70c <kalman_3gyro.constprop.0+0x3c4>)
 800c642:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800c646:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800c64a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800c64e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800c652:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800c656:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800c65a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800c65e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800c662:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800c666:	9b08      	ldr	r3, [sp, #32]
 800c668:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c710 <kalman_3gyro.constprop.0+0x3c8>
 800c66c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c670:	edd3 5a00 	vldr	s11, [r3]
 800c674:	edd3 7a02 	vldr	s15, [r3, #8]
 800c678:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c67c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800c680:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800c684:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68c:	f101 8127 	bmi.w	800d8de <kalman_3gyro.constprop.0+0x1596>
 800c690:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800c694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c698:	ee79 6a66 	vsub.f32	s13, s18, s13
 800c69c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800c6a0:	eef0 6ae6 	vabs.f32	s13, s13
 800c6a4:	ee76 aaea 	vsub.f32	s21, s13, s21
 800c6a8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800c6ac:	ed93 5a04 	vldr	s10, [r3, #16]
 800c6b0:	ed93 3a03 	vldr	s6, [r3, #12]
 800c6b4:	edd3 1a05 	vldr	s3, [r3, #20]
 800c6b8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c710 <kalman_3gyro.constprop.0+0x3c8>
 800c6bc:	9b04      	ldr	r3, [sp, #16]
 800c6be:	ed95 ca00 	vldr	s24, [r5]
 800c6c2:	ed93 ba00 	vldr	s22, [r3]
 800c6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ca:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800c6ce:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800c6d2:	461e      	mov	r6, r3
 800c6d4:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800c6d8:	9502      	str	r5, [sp, #8]
 800c6da:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800c6de:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800c6e2:	9327      	str	r3, [sp, #156]	; 0x9c
 800c6e4:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800c6e8:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800c6ec:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800c6f0:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800c6f4:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800c6f8:	9501      	str	r5, [sp, #4]
 800c6fa:	ee65 6a05 	vmul.f32	s13, s10, s10
 800c6fe:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800c702:	eee3 6a03 	vfma.f32	s13, s6, s6
 800c706:	e009      	b.n	800c71c <kalman_3gyro.constprop.0+0x3d4>
 800c708:	3a9d4952 	.word	0x3a9d4952
 800c70c:	40a00000 	.word	0x40a00000
 800c710:	3c23d70a 	.word	0x3c23d70a
 800c714:	3dcccccd 	.word	0x3dcccccd
 800c718:	4b000000 	.word	0x4b000000
 800c71c:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800c720:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800c724:	ee25 8a82 	vmul.f32	s16, s11, s4
 800c728:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800c72c:	950c      	str	r5, [sp, #48]	; 0x30
 800c72e:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800c732:	ee67 fa02 	vmul.f32	s31, s14, s4
 800c736:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73e:	bf58      	it	pl
 800c740:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800c744:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800c748:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800c74c:	bf48      	it	mi
 800c74e:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800c714 <kalman_3gyro.constprop.0+0x3cc>
 800c752:	ed96 6a00 	vldr	s12, [r6]
 800c756:	edda 4a00 	vldr	s9, [sl]
 800c75a:	ed93 fa00 	vldr	s30, [r3]
 800c75e:	ed90 ea00 	vldr	s28, [r0]
 800c762:	edd4 3a00 	vldr	s7, [r4]
 800c766:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800c76a:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800c76e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800c772:	9617      	str	r6, [sp, #92]	; 0x5c
 800c774:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800c778:	961a      	str	r6, [sp, #104]	; 0x68
 800c77a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800c77e:	9611      	str	r6, [sp, #68]	; 0x44
 800c780:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800c784:	9618      	str	r6, [sp, #96]	; 0x60
 800c786:	9e02      	ldr	r6, [sp, #8]
 800c788:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800c78c:	9303      	str	r3, [sp, #12]
 800c78e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800c792:	ee27 2a82 	vmul.f32	s4, s15, s4
 800c796:	ee23 3a26 	vmul.f32	s6, s6, s13
 800c79a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c79e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c7a2:	edd1 6a00 	vldr	s13, [r1]
 800c7a6:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800c7aa:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800c7ae:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800c7b2:	edcd 6a05 	vstr	s13, [sp, #20]
 800c7b6:	ed8d 6a06 	vstr	s12, [sp, #24]
 800c7ba:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800c7be:	ed92 6a00 	vldr	s12, [r2]
 800c7c2:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800c7c6:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800c7ca:	edd6 2a00 	vldr	s5, [r6]
 800c7ce:	eddc 4a00 	vldr	s9, [ip]
 800c7d2:	9e01      	ldr	r6, [sp, #4]
 800c7d4:	edd0 ca00 	vldr	s25, [r0]
 800c7d8:	ed96 1a00 	vldr	s2, [r6]
 800c7dc:	9803      	ldr	r0, [sp, #12]
 800c7de:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c7e0:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800c7e4:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800c7e8:	eddc 0a00 	vldr	s1, [ip]
 800c7ec:	ed96 da00 	vldr	s26, [r6]
 800c7f0:	edd0 4a00 	vldr	s9, [r0]
 800c7f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c7f6:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800c7fa:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800c7fe:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800c802:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800c806:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800c80a:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800c80e:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800c812:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800c816:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800c81a:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c81e:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800c822:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800c826:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800c82a:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800c82e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800c832:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800c836:	edd6 4a00 	vldr	s9, [r6]
 800c83a:	edd9 6a00 	vldr	s13, [r9]
 800c83e:	edde ba00 	vldr	s23, [lr]
 800c842:	ed95 4a00 	vldr	s8, [r5]
 800c846:	ed94 0a00 	vldr	s0, [r4]
 800c84a:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800c84e:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800c852:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800c856:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800c85a:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800c85e:	edd9 ea00 	vldr	s29, [r9]
 800c862:	edd1 2a00 	vldr	s5, [r1]
 800c866:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800c86a:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800c86e:	ed92 1a00 	vldr	s2, [r2]
 800c872:	edd3 ca00 	vldr	s25, [r3]
 800c876:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800c87a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800c87e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c880:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800c882:	edd3 4a00 	vldr	s9, [r3]
 800c886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c888:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800c88c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800c890:	edd3 fa00 	vldr	s31, [r3]
 800c894:	eef0 4a6f 	vmov.f32	s9, s31
 800c898:	edd6 fa00 	vldr	s31, [r6]
 800c89c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c89e:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800c8a2:	eea3 5a08 	vfma.f32	s10, s6, s16
 800c8a6:	ed96 3a00 	vldr	s6, [r6]
 800c8aa:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800c8ac:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800c8b0:	ee25 8aad 	vmul.f32	s16, s11, s27
 800c8b4:	eddd 5a06 	vldr	s11, [sp, #24]
 800c8b8:	edd6 fa00 	vldr	s31, [r6]
 800c8bc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c8be:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800c8c2:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800c8c6:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800c8ca:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800c8ce:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800c8d2:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800c8d6:	edd8 5a00 	vldr	s11, [r8]
 800c8da:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800c8de:	eef0 5a44 	vmov.f32	s11, s8
 800c8e2:	ed97 4a00 	vldr	s8, [r7]
 800c8e6:	ee76 6aae 	vadd.f32	s13, s13, s29
 800c8ea:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800c8ee:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800c8f2:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800c8f6:	eede 2a83 	vfnms.f32	s5, s29, s6
 800c8fa:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800c8fe:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800c902:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800c906:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800c90a:	eede 4a03 	vfnms.f32	s9, s28, s6
 800c90e:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800c912:	ee72 2aac 	vadd.f32	s5, s5, s25
 800c916:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800c91a:	edd6 ca00 	vldr	s25, [r6]
 800c91e:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800c922:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c924:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800c928:	ed96 ea00 	vldr	s28, [r6]
 800c92c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c92e:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800c932:	ed96 da00 	vldr	s26, [r6]
 800c936:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c938:	ee7f faac 	vadd.f32	s31, s31, s25
 800c93c:	edd6 ca00 	vldr	s25, [r6]
 800c940:	eedd ca03 	vfnms.f32	s25, s26, s6
 800c944:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800c948:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c94a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800c94e:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800c952:	eee0 5a03 	vfma.f32	s11, s0, s6
 800c956:	eddd ba05 	vldr	s23, [sp, #20]
 800c95a:	ed96 0a00 	vldr	s0, [r6]
 800c95e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c960:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800c964:	eeee fa03 	vfma.f32	s31, s28, s6
 800c968:	eead 6a03 	vfma.f32	s12, s26, s6
 800c96c:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800c970:	eea0 4a03 	vfma.f32	s8, s0, s6
 800c974:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800c978:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800c714 <kalman_3gyro.constprop.0+0x3cc>
 800c97c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800c980:	ee2c ca00 	vmul.f32	s24, s24, s0
 800c984:	ee6b ba80 	vmul.f32	s23, s23, s0
 800c988:	ed96 1a00 	vldr	s2, [r6]
 800c98c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800c990:	eee0 4a83 	vfma.f32	s9, s1, s6
 800c994:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800c998:	ee6f faab 	vmul.f32	s31, s31, s23
 800c99c:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800c9a0:	ee60 6a26 	vmul.f32	s13, s0, s13
 800c9a4:	eddc 0a00 	vldr	s1, [ip]
 800c9a8:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800c9ac:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800c9b0:	ee60 5a25 	vmul.f32	s11, s0, s11
 800c9b4:	eea0 1a83 	vfma.f32	s2, s1, s6
 800c9b8:	ee26 6a06 	vmul.f32	s12, s12, s12
 800c9bc:	ee6f faaf 	vmul.f32	s31, s31, s31
 800c9c0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c9c4:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800c9c8:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800c9cc:	eee4 fa04 	vfma.f32	s31, s8, s8
 800c9d0:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800c9d4:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800c9d8:	ee60 2a22 	vmul.f32	s5, s0, s5
 800c9dc:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800c9e0:	eee1 fa01 	vfma.f32	s31, s2, s2
 800c9e4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800c9e8:	eea1 5a82 	vfma.f32	s10, s3, s4
 800c9ec:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800c718 <kalman_3gyro.constprop.0+0x3d0>
 800c9f0:	eef0 4ac8 	vabs.f32	s9, s16
 800c9f4:	eef4 4ae5 	vcmpe.f32	s9, s11
 800c9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9fc:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800ca00:	eeb1 dac6 	vsqrt.f32	s26, s12
 800ca04:	eef1 caef 	vsqrt.f32	s25, s31
 800ca08:	eef1 bae6 	vsqrt.f32	s23, s13
 800ca0c:	ee67 daad 	vmul.f32	s27, s15, s27
 800ca10:	eeb0 ca45 	vmov.f32	s24, s10
 800ca14:	d517      	bpl.n	800ca46 <kalman_3gyro.constprop.0+0x6fe>
 800ca16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ca1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca22:	f2c1 806f 	blt.w	800db04 <kalman_3gyro.constprop.0+0x17bc>
 800ca26:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ca2a:	ee17 0a90 	vmov	r0, s15
 800ca2e:	f7f3 fd2f 	bl	8000490 <__aeabi_f2d>
 800ca32:	ec41 0b10 	vmov	d0, r0, r1
 800ca36:	f008 fb3f 	bl	80150b8 <floor>
 800ca3a:	ec51 0b10 	vmov	r0, r1, d0
 800ca3e:	f7f4 f82f 	bl	8000aa0 <__aeabi_d2f>
 800ca42:	ee08 0a10 	vmov	s16, r0
 800ca46:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800c718 <kalman_3gyro.constprop.0+0x3d0>
 800ca4a:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800ca4e:	eef0 6ace 	vabs.f32	s13, s28
 800ca52:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ca56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5a:	d517      	bpl.n	800ca8c <kalman_3gyro.constprop.0+0x744>
 800ca5c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ca60:	eeb4 eae7 	vcmpe.f32	s28, s15
 800ca64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca68:	f2c1 8040 	blt.w	800daec <kalman_3gyro.constprop.0+0x17a4>
 800ca6c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800ca70:	ee17 0a90 	vmov	r0, s15
 800ca74:	f7f3 fd0c 	bl	8000490 <__aeabi_f2d>
 800ca78:	ec41 0b10 	vmov	d0, r0, r1
 800ca7c:	f008 fb1c 	bl	80150b8 <floor>
 800ca80:	ec51 0b10 	vmov	r0, r1, d0
 800ca84:	f7f4 f80c 	bl	8000aa0 <__aeabi_d2f>
 800ca88:	ee0e 0a10 	vmov	s28, r0
 800ca8c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800c718 <kalman_3gyro.constprop.0+0x3d0>
 800ca90:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800ca94:	eeb0 7aed 	vabs.f32	s14, s27
 800ca98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ca9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa0:	d517      	bpl.n	800cad2 <kalman_3gyro.constprop.0+0x78a>
 800caa2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800caa6:	eef4 dae7 	vcmpe.f32	s27, s15
 800caaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caae:	f2c1 8011 	blt.w	800dad4 <kalman_3gyro.constprop.0+0x178c>
 800cab2:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cab6:	ee17 0a90 	vmov	r0, s15
 800caba:	f7f3 fce9 	bl	8000490 <__aeabi_f2d>
 800cabe:	ec41 0b10 	vmov	d0, r0, r1
 800cac2:	f008 faf9 	bl	80150b8 <floor>
 800cac6:	ec51 0b10 	vmov	r0, r1, d0
 800caca:	f7f3 ffe9 	bl	8000aa0 <__aeabi_d2f>
 800cace:	ee0d 0a90 	vmov	s27, r0
 800cad2:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800cad6:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800cada:	1e61      	subs	r1, r4, #1
 800cadc:	b249      	sxtb	r1, r1
 800cade:	2900      	cmp	r1, #0
 800cae0:	dd1a      	ble.n	800cb18 <kalman_3gyro.constprop.0+0x7d0>
 800cae2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cae6:	1ea0      	subs	r0, r4, #2
 800cae8:	0089      	lsls	r1, r1, #2
 800caea:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800caee:	b2c0      	uxtb	r0, r0
 800caf0:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800caf4:	440a      	add	r2, r1
 800caf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800cafa:	445b      	add	r3, fp
 800cafc:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800cb00:	6819      	ldr	r1, [r3, #0]
 800cb02:	6858      	ldr	r0, [r3, #4]
 800cb04:	60d9      	str	r1, [r3, #12]
 800cb06:	6899      	ldr	r1, [r3, #8]
 800cb08:	6118      	str	r0, [r3, #16]
 800cb0a:	6159      	str	r1, [r3, #20]
 800cb0c:	3b0c      	subs	r3, #12
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d1f6      	bne.n	800cb00 <kalman_3gyro.constprop.0+0x7b8>
 800cb12:	9b04      	ldr	r3, [sp, #16]
 800cb14:	ed93 ba00 	vldr	s22, [r3]
 800cb18:	ed88 8a00 	vstr	s16, [r8]
 800cb1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cb20:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800cb24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800cb26:	ed83 ea00 	vstr	s28, [r3]
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800cdc4 <kalman_3gyro.constprop.0+0xa7c>
 800cb30:	edc3 da00 	vstr	s27, [r3]
 800cb34:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800cb38:	3301      	adds	r3, #1
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	429c      	cmp	r4, r3
 800cb3e:	bf28      	it	cs
 800cb40:	461c      	movcs	r4, r3
 800cb42:	9b08      	ldr	r3, [sp, #32]
 800cb44:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800cb48:	edd3 da03 	vldr	s27, [r3, #12]
 800cb4c:	ed93 ba04 	vldr	s22, [r3, #16]
 800cb50:	edd3 6a05 	vldr	s13, [r3, #20]
 800cb54:	ee68 da2d 	vmul.f32	s27, s16, s27
 800cb58:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800cb5c:	eeb0 7aed 	vabs.f32	s14, s27
 800cb60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb68:	ee28 8a26 	vmul.f32	s16, s16, s13
 800cb6c:	d517      	bpl.n	800cb9e <kalman_3gyro.constprop.0+0x856>
 800cb6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cb72:	eef4 dae7 	vcmpe.f32	s27, s15
 800cb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7a:	f2c0 879f 	blt.w	800dabc <kalman_3gyro.constprop.0+0x1774>
 800cb7e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cb82:	ee17 0a90 	vmov	r0, s15
 800cb86:	f7f3 fc83 	bl	8000490 <__aeabi_f2d>
 800cb8a:	ec41 0b10 	vmov	d0, r0, r1
 800cb8e:	f008 fa93 	bl	80150b8 <floor>
 800cb92:	ec51 0b10 	vmov	r0, r1, d0
 800cb96:	f7f3 ff83 	bl	8000aa0 <__aeabi_d2f>
 800cb9a:	ee0d 0a90 	vmov	s27, r0
 800cb9e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800cdc4 <kalman_3gyro.constprop.0+0xa7c>
 800cba2:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800cba6:	eeb0 7acb 	vabs.f32	s14, s22
 800cbaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb2:	d517      	bpl.n	800cbe4 <kalman_3gyro.constprop.0+0x89c>
 800cbb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cbb8:	eeb4 bae7 	vcmpe.f32	s22, s15
 800cbbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc0:	f2c0 8770 	blt.w	800daa4 <kalman_3gyro.constprop.0+0x175c>
 800cbc4:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800cbc8:	ee17 0a90 	vmov	r0, s15
 800cbcc:	f7f3 fc60 	bl	8000490 <__aeabi_f2d>
 800cbd0:	ec41 0b10 	vmov	d0, r0, r1
 800cbd4:	f008 fa70 	bl	80150b8 <floor>
 800cbd8:	ec51 0b10 	vmov	r0, r1, d0
 800cbdc:	f7f3 ff60 	bl	8000aa0 <__aeabi_d2f>
 800cbe0:	ee0b 0a10 	vmov	s22, r0
 800cbe4:	eddf 7a77 	vldr	s15, [pc, #476]	; 800cdc4 <kalman_3gyro.constprop.0+0xa7c>
 800cbe8:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800cbec:	eeb0 7ac8 	vabs.f32	s14, s16
 800cbf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf8:	d517      	bpl.n	800cc2a <kalman_3gyro.constprop.0+0x8e2>
 800cbfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cbfe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc06:	f2c0 8741 	blt.w	800da8c <kalman_3gyro.constprop.0+0x1744>
 800cc0a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cc0e:	ee17 0a90 	vmov	r0, s15
 800cc12:	f7f3 fc3d 	bl	8000490 <__aeabi_f2d>
 800cc16:	ec41 0b10 	vmov	d0, r0, r1
 800cc1a:	f008 fa4d 	bl	80150b8 <floor>
 800cc1e:	ec51 0b10 	vmov	r0, r1, d0
 800cc22:	f7f3 ff3d 	bl	8000aa0 <__aeabi_d2f>
 800cc26:	ee08 0a10 	vmov	s16, r0
 800cc2a:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800cc2e:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800cc32:	1e61      	subs	r1, r4, #1
 800cc34:	b249      	sxtb	r1, r1
 800cc36:	2900      	cmp	r1, #0
 800cc38:	dd17      	ble.n	800cc6a <kalman_3gyro.constprop.0+0x922>
 800cc3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cc3e:	1ea2      	subs	r2, r4, #2
 800cc40:	0089      	lsls	r1, r1, #2
 800cc42:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800cc4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cc50:	4401      	add	r1, r0
 800cc52:	445b      	add	r3, fp
 800cc54:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	6858      	ldr	r0, [r3, #4]
 800cc5c:	60da      	str	r2, [r3, #12]
 800cc5e:	689a      	ldr	r2, [r3, #8]
 800cc60:	6118      	str	r0, [r3, #16]
 800cc62:	615a      	str	r2, [r3, #20]
 800cc64:	3b0c      	subs	r3, #12
 800cc66:	4299      	cmp	r1, r3
 800cc68:	d1f6      	bne.n	800cc58 <kalman_3gyro.constprop.0+0x910>
 800cc6a:	9b02      	ldr	r3, [sp, #8]
 800cc6c:	edc7 da00 	vstr	s27, [r7]
 800cc70:	ed83 ba00 	vstr	s22, [r3]
 800cc74:	9b03      	ldr	r3, [sp, #12]
 800cc76:	eddf 7a53 	vldr	s15, [pc, #332]	; 800cdc4 <kalman_3gyro.constprop.0+0xa7c>
 800cc7a:	ed83 8a00 	vstr	s16, [r3]
 800cc7e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800cc82:	3301      	adds	r3, #1
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	429c      	cmp	r4, r3
 800cc88:	bf28      	it	cs
 800cc8a:	461c      	movcs	r4, r3
 800cc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc8e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800cc92:	ed93 7a00 	vldr	s14, [r3]
 800cc96:	9b08      	ldr	r3, [sp, #32]
 800cc98:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800cc9c:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800cca0:	edd3 da06 	vldr	s27, [r3, #24]
 800cca4:	ed93 ba07 	vldr	s22, [r3, #28]
 800cca8:	edd3 6a08 	vldr	s13, [r3, #32]
 800ccac:	ee68 da2d 	vmul.f32	s27, s16, s27
 800ccb0:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800ccb4:	eeb0 7aed 	vabs.f32	s14, s27
 800ccb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ccbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc0:	ee28 8a26 	vmul.f32	s16, s16, s13
 800ccc4:	d517      	bpl.n	800ccf6 <kalman_3gyro.constprop.0+0x9ae>
 800ccc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ccca:	eef4 dae7 	vcmpe.f32	s27, s15
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	f2c0 86cf 	blt.w	800da74 <kalman_3gyro.constprop.0+0x172c>
 800ccd6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ccda:	ee17 0a90 	vmov	r0, s15
 800ccde:	f7f3 fbd7 	bl	8000490 <__aeabi_f2d>
 800cce2:	ec41 0b10 	vmov	d0, r0, r1
 800cce6:	f008 f9e7 	bl	80150b8 <floor>
 800ccea:	ec51 0b10 	vmov	r0, r1, d0
 800ccee:	f7f3 fed7 	bl	8000aa0 <__aeabi_d2f>
 800ccf2:	ee0d 0a90 	vmov	s27, r0
 800ccf6:	eddf 7a33 	vldr	s15, [pc, #204]	; 800cdc4 <kalman_3gyro.constprop.0+0xa7c>
 800ccfa:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800ccfe:	eeb0 7acb 	vabs.f32	s14, s22
 800cd02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd0a:	d517      	bpl.n	800cd3c <kalman_3gyro.constprop.0+0x9f4>
 800cd0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd10:	eeb4 bae7 	vcmpe.f32	s22, s15
 800cd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd18:	f2c0 86a0 	blt.w	800da5c <kalman_3gyro.constprop.0+0x1714>
 800cd1c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800cd20:	ee17 0a90 	vmov	r0, s15
 800cd24:	f7f3 fbb4 	bl	8000490 <__aeabi_f2d>
 800cd28:	ec41 0b10 	vmov	d0, r0, r1
 800cd2c:	f008 f9c4 	bl	80150b8 <floor>
 800cd30:	ec51 0b10 	vmov	r0, r1, d0
 800cd34:	f7f3 feb4 	bl	8000aa0 <__aeabi_d2f>
 800cd38:	ee0b 0a10 	vmov	s22, r0
 800cd3c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cdc4 <kalman_3gyro.constprop.0+0xa7c>
 800cd40:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800cd44:	eeb0 7ac8 	vabs.f32	s14, s16
 800cd48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd50:	d517      	bpl.n	800cd82 <kalman_3gyro.constprop.0+0xa3a>
 800cd52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd5e:	f2c0 8671 	blt.w	800da44 <kalman_3gyro.constprop.0+0x16fc>
 800cd62:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cd66:	ee17 0a90 	vmov	r0, s15
 800cd6a:	f7f3 fb91 	bl	8000490 <__aeabi_f2d>
 800cd6e:	ec41 0b10 	vmov	d0, r0, r1
 800cd72:	f008 f9a1 	bl	80150b8 <floor>
 800cd76:	ec51 0b10 	vmov	r0, r1, d0
 800cd7a:	f7f3 fe91 	bl	8000aa0 <__aeabi_d2f>
 800cd7e:	ee08 0a10 	vmov	s16, r0
 800cd82:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800cd86:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800cd8a:	1e63      	subs	r3, r4, #1
 800cd8c:	b25b      	sxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	dd1c      	ble.n	800cdcc <kalman_3gyro.constprop.0+0xa84>
 800cd92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cd96:	1ea2      	subs	r2, r4, #2
 800cd98:	0099      	lsls	r1, r3, #2
 800cd9a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800cd9e:	b2d2      	uxtb	r2, r2
 800cda0:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800cda4:	4408      	add	r0, r1
 800cda6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cdaa:	445b      	add	r3, fp
 800cdac:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	6859      	ldr	r1, [r3, #4]
 800cdb4:	60da      	str	r2, [r3, #12]
 800cdb6:	689a      	ldr	r2, [r3, #8]
 800cdb8:	6119      	str	r1, [r3, #16]
 800cdba:	615a      	str	r2, [r3, #20]
 800cdbc:	3b0c      	subs	r3, #12
 800cdbe:	4283      	cmp	r3, r0
 800cdc0:	d1f6      	bne.n	800cdb0 <kalman_3gyro.constprop.0+0xa68>
 800cdc2:	e003      	b.n	800cdcc <kalman_3gyro.constprop.0+0xa84>
 800cdc4:	4b000000 	.word	0x4b000000
 800cdc8:	00000000 	.word	0x00000000
 800cdcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdce:	edc3 da00 	vstr	s27, [r3]
 800cdd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdd4:	ed83 ba00 	vstr	s22, [r3]
 800cdd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdda:	ed83 8a00 	vstr	s16, [r3]
 800cdde:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800cde2:	3301      	adds	r3, #1
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	429c      	cmp	r4, r3
 800cde8:	bf28      	it	cs
 800cdea:	461c      	movcs	r4, r3
 800cdec:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800cdf0:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800cdf4:	aa54      	add	r2, sp, #336	; 0x150
 800cdf6:	a92d      	add	r1, sp, #180	; 0xb4
 800cdf8:	a830      	add	r0, sp, #192	; 0xc0
 800cdfa:	461c      	mov	r4, r3
 800cdfc:	9314      	str	r3, [sp, #80]	; 0x50
 800cdfe:	f7fe fa27 	bl	800b250 <getRotationMatrix>
 800ce02:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800ce06:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800ce0a:	6820      	ldr	r0, [r4, #0]
 800ce0c:	6861      	ldr	r1, [r4, #4]
 800ce0e:	68a2      	ldr	r2, [r4, #8]
 800ce10:	68e3      	ldr	r3, [r4, #12]
 800ce12:	4635      	mov	r5, r6
 800ce14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ce16:	3410      	adds	r4, #16
 800ce18:	42bc      	cmp	r4, r7
 800ce1a:	462e      	mov	r6, r5
 800ce1c:	d1f5      	bne.n	800ce0a <kalman_3gyro.constprop.0+0xac2>
 800ce1e:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800ce22:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800ce26:	6820      	ldr	r0, [r4, #0]
 800ce28:	6028      	str	r0, [r5, #0]
 800ce2a:	eef0 7ae7 	vabs.f32	s15, s15
 800ce2e:	eeb0 7ac7 	vabs.f32	s14, s14
 800ce32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce3a:	f140 85a4 	bpl.w	800d986 <kalman_3gyro.constprop.0+0x163e>
 800ce3e:	2303      	movs	r3, #3
 800ce40:	2706      	movs	r7, #6
 800ce42:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ce46:	2604      	movs	r6, #4
 800ce48:	2400      	movs	r4, #0
 800ce4a:	eef0 7a47 	vmov.f32	s15, s14
 800ce4e:	4632      	mov	r2, r6
 800ce50:	46a2      	mov	sl, r4
 800ce52:	2107      	movs	r1, #7
 800ce54:	f04f 0c01 	mov.w	ip, #1
 800ce58:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800ce5c:	eeb0 7ac7 	vabs.f32	s14, s14
 800ce60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce68:	f340 85ae 	ble.w	800d9c8 <kalman_3gyro.constprop.0+0x1680>
 800ce6c:	2304      	movs	r3, #4
 800ce6e:	2007      	movs	r0, #7
 800ce70:	2108      	movs	r1, #8
 800ce72:	9301      	str	r3, [sp, #4]
 800ce74:	461c      	mov	r4, r3
 800ce76:	9002      	str	r0, [sp, #8]
 800ce78:	460a      	mov	r2, r1
 800ce7a:	2306      	movs	r3, #6
 800ce7c:	2003      	movs	r0, #3
 800ce7e:	2605      	movs	r6, #5
 800ce80:	f04f 0800 	mov.w	r8, #0
 800ce84:	f04f 0a01 	mov.w	sl, #1
 800ce88:	f04f 0c02 	mov.w	ip, #2
 800ce8c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ce8e:	442c      	add	r4, r5
 800ce90:	442a      	add	r2, r5
 800ce92:	edd4 6a00 	vldr	s13, [r4]
 800ce96:	ed92 7a00 	vldr	s14, [r2]
 800ce9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce9e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800cea2:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800cea6:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800ceaa:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ceae:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800ceb2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800ceb6:	970c      	str	r7, [sp, #48]	; 0x30
 800ceb8:	9f01      	ldr	r7, [sp, #4]
 800ceba:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800cebe:	00b6      	lsls	r6, r6, #2
 800cec0:	960a      	str	r6, [sp, #40]	; 0x28
 800cec2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800cec6:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800ceca:	edc4 7a00 	vstr	s15, [r4]
 800cece:	edd2 7a00 	vldr	s15, [r2]
 800ced2:	ed99 7a00 	vldr	s14, [r9]
 800ced6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ceda:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800cede:	9204      	str	r2, [sp, #16]
 800cee0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800cee4:	9205      	str	r2, [sp, #20]
 800cee6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800ceea:	9209      	str	r2, [sp, #36]	; 0x24
 800ceec:	00ba      	lsls	r2, r7, #2
 800ceee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800cef0:	9206      	str	r2, [sp, #24]
 800cef2:	0080      	lsls	r0, r0, #2
 800cef4:	9003      	str	r0, [sp, #12]
 800cef6:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800cefa:	0089      	lsls	r1, r1, #2
 800cefc:	910b      	str	r1, [sp, #44]	; 0x2c
 800cefe:	edc9 6a00 	vstr	s13, [r9]
 800cf02:	ed94 6a00 	vldr	s12, [r4]
 800cf06:	ed97 7a00 	vldr	s14, [r7]
 800cf0a:	edd5 7a00 	vldr	s15, [r5]
 800cf0e:	9902      	ldr	r1, [sp, #8]
 800cf10:	9a02      	ldr	r2, [sp, #8]
 800cf12:	eee6 7a47 	vfms.f32	s15, s12, s14
 800cf16:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800cf1a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800cf1e:	0092      	lsls	r2, r2, #2
 800cf20:	edc5 7a00 	vstr	s15, [r5]
 800cf24:	ed97 7a00 	vldr	s14, [r7]
 800cf28:	edde 7a00 	vldr	s15, [lr]
 800cf2c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	edce 7a00 	vstr	s15, [lr]
 800cf36:	edd0 5a00 	vldr	s11, [r0]
 800cf3a:	ed91 7a00 	vldr	s14, [r1]
 800cf3e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800cf42:	eef0 7ae7 	vabs.f32	s15, s15
 800cf46:	ed81 7a00 	vstr	s14, [r1]
 800cf4a:	ed90 6a00 	vldr	s12, [r0]
 800cf4e:	ed96 7a00 	vldr	s14, [r6]
 800cf52:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800cf56:	ed86 7a00 	vstr	s14, [r6]
 800cf5a:	ed95 7a00 	vldr	s14, [r5]
 800cf5e:	eeb0 7ac7 	vabs.f32	s14, s14
 800cf62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6a:	dd10      	ble.n	800cf8e <kalman_3gyro.constprop.0+0xc46>
 800cf6c:	4652      	mov	r2, sl
 800cf6e:	46c2      	mov	sl, r8
 800cf70:	4690      	mov	r8, r2
 800cf72:	461a      	mov	r2, r3
 800cf74:	9b01      	ldr	r3, [sp, #4]
 800cf76:	9902      	ldr	r1, [sp, #8]
 800cf78:	9803      	ldr	r0, [sp, #12]
 800cf7a:	9006      	str	r0, [sp, #24]
 800cf7c:	009b      	lsls	r3, r3, #2
 800cf7e:	9303      	str	r3, [sp, #12]
 800cf80:	008b      	lsls	r3, r1, #2
 800cf82:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800cf86:	9105      	str	r1, [sp, #20]
 800cf88:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800cf8c:	9104      	str	r1, [sp, #16]
 800cf8e:	9903      	ldr	r1, [sp, #12]
 800cf90:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800cf94:	4401      	add	r1, r0
 800cf96:	460c      	mov	r4, r1
 800cf98:	9906      	ldr	r1, [sp, #24]
 800cf9a:	ed94 7a00 	vldr	s14, [r4]
 800cf9e:	4401      	add	r1, r0
 800cfa0:	edd1 7a00 	vldr	s15, [r1]
 800cfa4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800cfa8:	4608      	mov	r0, r1
 800cfaa:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800cfae:	440a      	add	r2, r1
 800cfb0:	440b      	add	r3, r1
 800cfb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfb4:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800cfb8:	4429      	add	r1, r5
 800cfba:	460d      	mov	r5, r1
 800cfbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cfbe:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800cfc2:	4431      	add	r1, r6
 800cfc4:	468e      	mov	lr, r1
 800cfc6:	ed84 3a00 	vstr	s6, [r4]
 800cfca:	ed92 7a00 	vldr	s14, [r2]
 800cfce:	edd3 7a00 	vldr	s15, [r3]
 800cfd2:	9904      	ldr	r1, [sp, #16]
 800cfd4:	eee3 7a47 	vfms.f32	s15, s6, s14
 800cfd8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800cfdc:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800cfe0:	440e      	add	r6, r1
 800cfe2:	1879      	adds	r1, r7, r1
 800cfe4:	edc3 7a00 	vstr	s15, [r3]
 800cfe8:	9101      	str	r1, [sp, #4]
 800cfea:	9b05      	ldr	r3, [sp, #20]
 800cfec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfee:	edd2 0a00 	vldr	s1, [r2]
 800cff2:	ed95 1a00 	vldr	s2, [r5]
 800cff6:	ed9e 2a00 	vldr	s4, [lr]
 800cffa:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800cffe:	edd6 6a00 	vldr	s13, [r6]
 800d002:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d006:	1874      	adds	r4, r6, r1
 800d008:	18f7      	adds	r7, r6, r3
 800d00a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d00e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d012:	eb06 0903 	add.w	r9, r6, r3
 800d016:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d01a:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d01e:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d022:	4633      	mov	r3, r6
 800d024:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d028:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d02c:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d030:	448c      	add	ip, r1
 800d032:	9901      	ldr	r1, [sp, #4]
 800d034:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d038:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d03c:	ed94 7a00 	vldr	s14, [r4]
 800d040:	ed93 6a00 	vldr	s12, [r3]
 800d044:	edd0 7a00 	vldr	s15, [r0]
 800d048:	ed99 8a00 	vldr	s16, [r9]
 800d04c:	ed91 ba00 	vldr	s22, [r1]
 800d050:	ed97 4a00 	vldr	s8, [r7]
 800d054:	edd6 4a00 	vldr	s9, [r6]
 800d058:	eddc da00 	vldr	s27, [ip]
 800d05c:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d060:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d064:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d068:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d06c:	46a2      	mov	sl, r4
 800d06e:	4613      	mov	r3, r2
 800d070:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d074:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d078:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d07c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d080:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d084:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d088:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d08c:	ed94 5a00 	vldr	s10, [r4]
 800d090:	edda 3a00 	vldr	s7, [sl]
 800d094:	edd2 5a00 	vldr	s11, [r2]
 800d098:	edd3 7a00 	vldr	s15, [r3]
 800d09c:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d0a0:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d0a4:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d0a8:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d0ac:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d0b0:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d0b4:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d0b8:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d0bc:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d0c0:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d0c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d0c8:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d0cc:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d0d0:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d0d4:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d0d8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d0dc:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d0e0:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d0e4:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d0e8:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d0ec:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d0f0:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d0f4:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d0f8:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d0fc:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d100:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d104:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d108:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d10c:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d110:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d118:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d11c:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d120:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d124:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d128:	bfc8      	it	gt
 800d12a:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d12e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d132:	bfcc      	ite	gt
 800d134:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d138:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800cdc8 <kalman_3gyro.constprop.0+0xa80>
 800d13c:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d144:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d148:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d14c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d150:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d154:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d158:	f100 84e4 	bmi.w	800db24 <kalman_3gyro.constprop.0+0x17dc>
 800d15c:	bfd8      	it	le
 800d15e:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d162:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d166:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d16a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d16e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d172:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d17a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d17e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d182:	bf84      	itt	hi
 800d184:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d188:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d18c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d190:	bf8c      	ite	hi
 800d192:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d196:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800d518 <kalman_3gyro.constprop.0+0x11d0>
 800d19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19e:	f100 84bd 	bmi.w	800db1c <kalman_3gyro.constprop.0+0x17d4>
 800d1a2:	bfd8      	it	le
 800d1a4:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d1a8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d1ac:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d1b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c0:	bf84      	itt	hi
 800d1c2:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d1c6:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d1ca:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d1ce:	bf8c      	ite	hi
 800d1d0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d1d4:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800d518 <kalman_3gyro.constprop.0+0x11d0>
 800d1d8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d1e4:	f102 8399 	bmi.w	800f91a <kalman_3gyro.constprop.0+0x35d2>
 800d1e8:	bfd8      	it	le
 800d1ea:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d1ee:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d1f2:	1e53      	subs	r3, r2, #1
 800d1f4:	b25b      	sxtb	r3, r3
 800d1f6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d200:	dd1c      	ble.n	800d23c <kalman_3gyro.constprop.0+0xef4>
 800d202:	3a02      	subs	r2, #2
 800d204:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d208:	b2d2      	uxtb	r2, r2
 800d20a:	f1ab 000c 	sub.w	r0, fp, #12
 800d20e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d212:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d216:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d21a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d21e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d222:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d226:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d22a:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d22e:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800d232:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d236:	3b0c      	subs	r3, #12
 800d238:	4283      	cmp	r3, r0
 800d23a:	d1f0      	bne.n	800d21e <kalman_3gyro.constprop.0+0xed6>
 800d23c:	eddd 6a07 	vldr	s13, [sp, #28]
 800d240:	4ab6      	ldr	r2, [pc, #728]	; (800d51c <kalman_3gyro.constprop.0+0x11d4>)
 800d242:	4bb7      	ldr	r3, [pc, #732]	; (800d520 <kalman_3gyro.constprop.0+0x11d8>)
 800d244:	ed92 8a00 	vldr	s16, [r2]
 800d248:	ed93 ba00 	vldr	s22, [r3]
 800d24c:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800d250:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d254:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d258:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800d25c:	f1c1 0101 	rsb	r1, r1, #1
 800d260:	910c      	str	r1, [sp, #48]	; 0x30
 800d262:	a92d      	add	r1, sp, #180	; 0xb4
 800d264:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800d268:	9123      	str	r1, [sp, #140]	; 0x8c
 800d26a:	2100      	movs	r1, #0
 800d26c:	9109      	str	r1, [sp, #36]	; 0x24
 800d26e:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800d272:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800d276:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800d27a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800d27e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d282:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800d286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d28a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d28e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800d292:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800d296:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800d29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d29e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a4:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d2a8:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800d2ac:	18e0      	adds	r0, r4, r3
 800d2ae:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d2b2:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800d2b6:	f841 0b04 	str.w	r0, [r1], #4
 800d2ba:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800d2be:	4298      	cmp	r0, r3
 800d2c0:	f102 020c 	add.w	r2, r2, #12
 800d2c4:	d1f2      	bne.n	800d2ac <kalman_3gyro.constprop.0+0xf64>
 800d2c6:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d2ca:	ed93 7a00 	vldr	s14, [r3]
 800d2ce:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800d2d2:	edd3 7a00 	vldr	s15, [r3]
 800d2d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2de:	bf84      	itt	hi
 800d2e0:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800d2e4:	f8a9 3000 	strhhi.w	r3, [r9]
 800d2e8:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800d2ec:	ed93 7a00 	vldr	s14, [r3]
 800d2f0:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800d2f4:	edd3 7a00 	vldr	s15, [r3]
 800d2f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d300:	bf84      	itt	hi
 800d302:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800d306:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800d30a:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800d30e:	ed93 7a00 	vldr	s14, [r3]
 800d312:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800d316:	edd3 7a00 	vldr	s15, [r3]
 800d31a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d322:	bf84      	itt	hi
 800d324:	f240 5306 	movwhi	r3, #1286	; 0x506
 800d328:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800d32c:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800d330:	ed93 7a00 	vldr	s14, [r3]
 800d334:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800d338:	edd3 7a00 	vldr	s15, [r3]
 800d33c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d344:	bf84      	itt	hi
 800d346:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800d34a:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800d34e:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800d352:	ed93 7a00 	vldr	s14, [r3]
 800d356:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800d35a:	edd3 7a00 	vldr	s15, [r3]
 800d35e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d366:	bf84      	itt	hi
 800d368:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800d36c:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800d370:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800d374:	ed93 7a00 	vldr	s14, [r3]
 800d378:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800d37c:	edd3 7a00 	vldr	s15, [r3]
 800d380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d388:	bf84      	itt	hi
 800d38a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800d38e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800d392:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800d396:	ed93 7a00 	vldr	s14, [r3]
 800d39a:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800d39e:	edd3 7a00 	vldr	s15, [r3]
 800d3a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3aa:	bf84      	itt	hi
 800d3ac:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800d3b0:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800d3b4:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800d3b8:	ed93 7a00 	vldr	s14, [r3]
 800d3bc:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800d3c0:	edd3 7a00 	vldr	s15, [r3]
 800d3c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3cc:	bf84      	itt	hi
 800d3ce:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800d3d2:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800d3d6:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800d3da:	ed93 7a00 	vldr	s14, [r3]
 800d3de:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800d3e2:	edd3 7a00 	vldr	s15, [r3]
 800d3e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ee:	bf84      	itt	hi
 800d3f0:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800d3f4:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800d3f8:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800d3fc:	ed93 7a00 	vldr	s14, [r3]
 800d400:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800d404:	edd3 7a00 	vldr	s15, [r3]
 800d408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d410:	bf84      	itt	hi
 800d412:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800d416:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800d41a:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800d41e:	ed93 7a00 	vldr	s14, [r3]
 800d422:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800d426:	edd3 7a00 	vldr	s15, [r3]
 800d42a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d432:	bf84      	itt	hi
 800d434:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800d438:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800d43c:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800d440:	ed93 7a00 	vldr	s14, [r3]
 800d444:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800d448:	edd3 7a00 	vldr	s15, [r3]
 800d44c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d454:	bf84      	itt	hi
 800d456:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800d45a:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800d45e:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800d462:	ed93 7a00 	vldr	s14, [r3]
 800d466:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800d46a:	edd3 7a00 	vldr	s15, [r3]
 800d46e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d476:	bf84      	itt	hi
 800d478:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800d47c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800d480:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800d484:	ed93 7a00 	vldr	s14, [r3]
 800d488:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800d48c:	edd3 7a00 	vldr	s15, [r3]
 800d490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d498:	bf84      	itt	hi
 800d49a:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800d49e:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800d4a2:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800d4a6:	ed93 7a00 	vldr	s14, [r3]
 800d4aa:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800d4ae:	edd3 7a00 	vldr	s15, [r3]
 800d4b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ba:	bf84      	itt	hi
 800d4bc:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800d4c0:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800d4c4:	221e      	movs	r2, #30
 800d4c6:	2101      	movs	r1, #1
 800d4c8:	4650      	mov	r0, sl
 800d4ca:	f009 fcbd 	bl	8016e48 <memset>
 800d4ce:	2304      	movs	r3, #4
 800d4d0:	9307      	str	r3, [sp, #28]
 800d4d2:	2302      	movs	r3, #2
 800d4d4:	9305      	str	r3, [sp, #20]
 800d4d6:	9b05      	ldr	r3, [sp, #20]
 800d4d8:	9306      	str	r3, [sp, #24]
 800d4da:	1c5f      	adds	r7, r3, #1
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	9305      	str	r3, [sp, #20]
 800d4e0:	f04f 0b01 	mov.w	fp, #1
 800d4e4:	9b05      	ldr	r3, [sp, #20]
 800d4e6:	f8cd b004 	str.w	fp, [sp, #4]
 800d4ea:	445b      	add	r3, fp
 800d4ec:	2b1f      	cmp	r3, #31
 800d4ee:	bfa8      	it	ge
 800d4f0:	231f      	movge	r3, #31
 800d4f2:	465a      	mov	r2, fp
 800d4f4:	eba3 0802 	sub.w	r8, r3, r2
 800d4f8:	f1b8 0f00 	cmp.w	r8, #0
 800d4fc:	469b      	mov	fp, r3
 800d4fe:	f107 35ff 	add.w	r5, r7, #4294967295
 800d502:	dd44      	ble.n	800d58e <kalman_3gyro.constprop.0+0x1246>
 800d504:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	f1ab 0302 	sub.w	r3, fp, #2
 800d50e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800d512:	4616      	mov	r6, r2
 800d514:	2400      	movs	r4, #0
 800d516:	e00f      	b.n	800d538 <kalman_3gyro.constprop.0+0x11f0>
 800d518:	00000000 	.word	0x00000000
 800d51c:	20001a2c 	.word	0x20001a2c
 800d520:	20001a3c 	.word	0x20001a3c
 800d524:	3f333333 	.word	0x3f333333
 800d528:	3f4ccccd 	.word	0x3f4ccccd
 800d52c:	3f666666 	.word	0x3f666666
 800d530:	3ecccccc 	.word	0x3ecccccc
 800d534:	3dcccccd 	.word	0x3dcccccd
 800d538:	1e71      	subs	r1, r6, #1
 800d53a:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800d53e:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800d542:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d54a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800d54e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d552:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800d556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d55e:	f105 0c02 	add.w	ip, r5, #2
 800d562:	f105 0801 	add.w	r8, r5, #1
 800d566:	f240 81d3 	bls.w	800d910 <kalman_3gyro.constprop.0+0x15c8>
 800d56a:	45e3      	cmp	fp, ip
 800d56c:	f80a 0004 	strb.w	r0, [sl, r4]
 800d570:	f000 81bf 	beq.w	800d8f2 <kalman_3gyro.constprop.0+0x15aa>
 800d574:	4645      	mov	r5, r8
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	3401      	adds	r4, #1
 800d57a:	42a3      	cmp	r3, r4
 800d57c:	dcdc      	bgt.n	800d538 <kalman_3gyro.constprop.0+0x11f0>
 800d57e:	4698      	mov	r8, r3
 800d580:	9b01      	ldr	r3, [sp, #4]
 800d582:	1e58      	subs	r0, r3, #1
 800d584:	4448      	add	r0, r9
 800d586:	4642      	mov	r2, r8
 800d588:	4651      	mov	r1, sl
 800d58a:	f009 fc4f 	bl	8016e2c <memcpy>
 800d58e:	9b06      	ldr	r3, [sp, #24]
 800d590:	eb0b 0703 	add.w	r7, fp, r3
 800d594:	2f1e      	cmp	r7, #30
 800d596:	dda5      	ble.n	800d4e4 <kalman_3gyro.constprop.0+0x119c>
 800d598:	9b07      	ldr	r3, [sp, #28]
 800d59a:	3b01      	subs	r3, #1
 800d59c:	9307      	str	r3, [sp, #28]
 800d59e:	d19a      	bne.n	800d4d6 <kalman_3gyro.constprop.0+0x118e>
 800d5a0:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800d5a4:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800d5a8:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d5ac:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d5b0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d5b4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800d5b8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d5bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d5c8:	460a      	mov	r2, r1
 800d5ca:	bf4c      	ite	mi
 800d5cc:	2201      	movmi	r2, #1
 800d5ce:	2200      	movpl	r2, #0
 800d5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d4:	bf4c      	ite	mi
 800d5d6:	2301      	movmi	r3, #1
 800d5d8:	2300      	movpl	r3, #0
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	f000 81b4 	beq.w	800d948 <kalman_3gyro.constprop.0+0x1600>
 800d5e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d5e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d5e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ee:	ece3 7a01 	vstmia	r3!, {s15}
 800d5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5f6:	3304      	adds	r3, #4
 800d5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800d5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5fc:	2b03      	cmp	r3, #3
 800d5fe:	f47f ae4c 	bne.w	800d29a <kalman_3gyro.constprop.0+0xf52>
 800d602:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d606:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800d60a:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800d60e:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800d524 <kalman_3gyro.constprop.0+0x11dc>
 800d612:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800d616:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800d528 <kalman_3gyro.constprop.0+0x11e0>
 800d61a:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800d61e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d622:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d626:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d62a:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800d62e:	eee6 7a06 	vfma.f32	s15, s12, s12
 800d632:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800d636:	eeb0 6a67 	vmov.f32	s12, s15
 800d63a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d63e:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800d642:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800d646:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800d64a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800d64e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800d652:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800d656:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d65a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800d65e:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800d662:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800d666:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800d66a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d66e:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800d672:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d676:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d67a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800d67e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800d682:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800d686:	2b00      	cmp	r3, #0
 800d688:	f040 81a4 	bne.w	800d9d4 <kalman_3gyro.constprop.0+0x168c>
 800d68c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800d690:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800d694:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800d698:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800d69c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800d6a0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800d6a4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800d6a8:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800d6ac:	f8c8 3020 	str.w	r3, [r8, #32]
 800d6b0:	ed88 7a07 	vstr	s14, [r8, #28]
 800d6b4:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800d6b8:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800d6bc:	ed93 7a00 	vldr	s14, [r3]
 800d6c0:	ed92 8a00 	vldr	s16, [r2]
 800d6c4:	eddb ea02 	vldr	s29, [fp, #8]
 800d6c8:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800d6cc:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800d6d0:	ed92 5a00 	vldr	s10, [r2]
 800d6d4:	ee28 8a07 	vmul.f32	s16, s16, s14
 800d6d8:	ed93 7a00 	vldr	s14, [r3]
 800d6dc:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d6e0:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800d6e4:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800d6e8:	ed92 5a00 	vldr	s10, [r2]
 800d6ec:	ed93 7a00 	vldr	s14, [r3]
 800d6f0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d6f4:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800d6f8:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800d6fc:	ed92 5a00 	vldr	s10, [r2]
 800d700:	ed93 7a00 	vldr	s14, [r3]
 800d704:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d708:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800d70c:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800d710:	ed92 5a00 	vldr	s10, [r2]
 800d714:	ed93 7a00 	vldr	s14, [r3]
 800d718:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800d71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d720:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d724:	f340 8232 	ble.w	800db8c <kalman_3gyro.constprop.0+0x1844>
 800d728:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800d72c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d734:	f100 815e 	bmi.w	800d9f4 <kalman_3gyro.constprop.0+0x16ac>
 800d738:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800d73c:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800d740:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d748:	f142 84bd 	bpl.w	80100c6 <kalman_3gyro.constprop.0+0x3d7e>
 800d74c:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800d750:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d758:	f342 850a 	ble.w	8010170 <kalman_3gyro.constprop.0+0x3e28>
 800d75c:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800d760:	eef4 2ac8 	vcmpe.f32	s5, s16
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	f342 86c5 	ble.w	80104f6 <kalman_3gyro.constprop.0+0x41ae>
 800d76c:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800d770:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800d774:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800d778:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d77c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d780:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800d784:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d788:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d78c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d798:	f202 86c5 	bhi.w	8010526 <kalman_3gyro.constprop.0+0x41de>
 800d79c:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800d7a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a8:	f342 86c5 	ble.w	8010536 <kalman_3gyro.constprop.0+0x41ee>
 800d7ac:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800d7b0:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800d7b4:	ee38 3a64 	vsub.f32	s6, s16, s9
 800d7b8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d7bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d7c0:	ee64 4a03 	vmul.f32	s9, s8, s6
 800d7c4:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800d7c8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d7cc:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800d7d0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d8:	f202 86c5 	bhi.w	8010566 <kalman_3gyro.constprop.0+0x421e>
 800d7dc:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800d7e0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e8:	f343 8371 	ble.w	8010ece <kalman_3gyro.constprop.0+0x4b86>
 800d7ec:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800d7f0:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800d7f4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d7f8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d7fc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d800:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d804:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d808:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d80c:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800d810:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d818:	f202 86c5 	bhi.w	80105a6 <kalman_3gyro.constprop.0+0x425e>
 800d81c:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800d820:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d828:	f343 8359 	ble.w	8010ede <kalman_3gyro.constprop.0+0x4b96>
 800d82c:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800d830:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800d834:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d838:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d83c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d840:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d844:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d848:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d84c:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800d850:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d858:	f2c2 86c5 	blt.w	80105e6 <kalman_3gyro.constprop.0+0x429e>
 800d85c:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800d860:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d868:	f143 832d 	bpl.w	8010ec6 <kalman_3gyro.constprop.0+0x4b7e>
 800d86c:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800d870:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800d874:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d878:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d87c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d880:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d884:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d888:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d88c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800d890:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800d894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d898:	f2c2 86c5 	blt.w	8010626 <kalman_3gyro.constprop.0+0x42de>
 800d89c:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800d8a0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800d8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a8:	f142 86c5 	bpl.w	8010636 <kalman_3gyro.constprop.0+0x42ee>
 800d8ac:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800d8b0:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800d8b4:	ee78 3a64 	vsub.f32	s7, s16, s9
 800d8b8:	ee35 5a44 	vsub.f32	s10, s10, s8
 800d8bc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d8c0:	ee25 5a23 	vmul.f32	s10, s10, s7
 800d8c4:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800d8c8:	ee3e ea04 	vadd.f32	s28, s28, s8
 800d8cc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800d8d0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800d8d4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800d8d8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800d8dc:	e15a      	b.n	800db94 <kalman_3gyro.constprop.0+0x184c>
 800d8de:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800d52c <kalman_3gyro.constprop.0+0x11e4>
 800d8e2:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800d530 <kalman_3gyro.constprop.0+0x11e8>
 800d8e6:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800d534 <kalman_3gyro.constprop.0+0x11ec>
 800d8ea:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800d8ee:	f7fe bedd 	b.w	800c6ac <kalman_3gyro.constprop.0+0x364>
 800d8f2:	1c60      	adds	r0, r4, #1
 800d8f4:	42be      	cmp	r6, r7
 800d8f6:	eba7 0206 	sub.w	r2, r7, r6
 800d8fa:	4449      	add	r1, r9
 800d8fc:	4450      	add	r0, sl
 800d8fe:	f6bf ae39 	bge.w	800d574 <kalman_3gyro.constprop.0+0x122c>
 800d902:	443c      	add	r4, r7
 800d904:	1ba4      	subs	r4, r4, r6
 800d906:	f009 fa91 	bl	8016e2c <memcpy>
 800d90a:	463e      	mov	r6, r7
 800d90c:	4645      	mov	r5, r8
 800d90e:	e632      	b.n	800d576 <kalman_3gyro.constprop.0+0x122e>
 800d910:	3601      	adds	r6, #1
 800d912:	42be      	cmp	r6, r7
 800d914:	f80a 2004 	strb.w	r2, [sl, r4]
 800d918:	f47f ae2d 	bne.w	800d576 <kalman_3gyro.constprop.0+0x122e>
 800d91c:	9b02      	ldr	r3, [sp, #8]
 800d91e:	f105 0801 	add.w	r8, r5, #1
 800d922:	1c60      	adds	r0, r4, #1
 800d924:	45c3      	cmp	fp, r8
 800d926:	eba3 0205 	sub.w	r2, r3, r5
 800d92a:	eb09 0105 	add.w	r1, r9, r5
 800d92e:	4450      	add	r0, sl
 800d930:	f77f ae21 	ble.w	800d576 <kalman_3gyro.constprop.0+0x122e>
 800d934:	f009 fa7a 	bl	8016e2c <memcpy>
 800d938:	9b02      	ldr	r3, [sp, #8]
 800d93a:	441c      	add	r4, r3
 800d93c:	9b04      	ldr	r3, [sp, #16]
 800d93e:	1b5a      	subs	r2, r3, r5
 800d940:	1b64      	subs	r4, r4, r5
 800d942:	eb02 0508 	add.w	r5, r2, r8
 800d946:	e616      	b.n	800d576 <kalman_3gyro.constprop.0+0x122e>
 800d948:	eef4 7a48 	vcmp.f32	s15, s16
 800d94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d950:	f43f ae46 	beq.w	800d5e0 <kalman_3gyro.constprop.0+0x1298>
 800d954:	eef4 7a4b 	vcmp.f32	s15, s22
 800d958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95c:	f43f ae40 	beq.w	800d5e0 <kalman_3gyro.constprop.0+0x1298>
 800d960:	eeb4 7a48 	vcmp.f32	s14, s16
 800d964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d968:	f43f ae3a 	beq.w	800d5e0 <kalman_3gyro.constprop.0+0x1298>
 800d96c:	eeb4 7a4b 	vcmp.f32	s14, s22
 800d970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d974:	f43f ae34 	beq.w	800d5e0 <kalman_3gyro.constprop.0+0x1298>
 800d978:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d97c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800d980:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d984:	e632      	b.n	800d5ec <kalman_3gyro.constprop.0+0x12a4>
 800d986:	2304      	movs	r3, #4
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	461c      	mov	r4, r3
 800d98e:	2307      	movs	r3, #7
 800d990:	4694      	mov	ip, r2
 800d992:	2106      	movs	r1, #6
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	2603      	movs	r6, #3
 800d998:	f04f 0a01 	mov.w	sl, #1
 800d99c:	f7ff ba5c 	b.w	800ce58 <kalman_3gyro.constprop.0+0xb10>
 800d9a0:	9a08      	ldr	r2, [sp, #32]
 800d9a2:	eddf 7a62 	vldr	s15, [pc, #392]	; 800db2c <kalman_3gyro.constprop.0+0x17e4>
 800d9a6:	eddf 5a62 	vldr	s11, [pc, #392]	; 800db30 <kalman_3gyro.constprop.0+0x17e8>
 800d9aa:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800db34 <kalman_3gyro.constprop.0+0x17ec>
 800d9ae:	4b62      	ldr	r3, [pc, #392]	; (800db38 <kalman_3gyro.constprop.0+0x17f0>)
 800d9b0:	edc2 7a00 	vstr	s15, [r2]
 800d9b4:	eeb0 4a65 	vmov.f32	s8, s11
 800d9b8:	eeb0 3a67 	vmov.f32	s6, s15
 800d9bc:	eef0 4a45 	vmov.f32	s9, s10
 800d9c0:	6053      	str	r3, [r2, #4]
 800d9c2:	6093      	str	r3, [r2, #8]
 800d9c4:	f7fe bd3e 	b.w	800c444 <kalman_3gyro.constprop.0+0xfc>
 800d9c8:	2308      	movs	r3, #8
 800d9ca:	2005      	movs	r0, #5
 800d9cc:	f04f 0802 	mov.w	r8, #2
 800d9d0:	f7ff ba5c 	b.w	800ce8c <kalman_3gyro.constprop.0+0xb44>
 800d9d4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800d9de:	ed88 7a07 	vstr	s14, [r8, #28]
 800d9e2:	ed88 7a08 	vstr	s14, [r8, #32]
 800d9e6:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800d9ea:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800d9ee:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800d9f2:	e65f      	b.n	800d6b4 <kalman_3gyro.constprop.0+0x136c>
 800d9f4:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800d9f8:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800d9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da00:	f342 83b2 	ble.w	8010168 <kalman_3gyro.constprop.0+0x3e20>
 800da04:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0c:	f2c2 86e9 	blt.w	80107e2 <kalman_3gyro.constprop.0+0x449a>
 800da10:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800da14:	eef4 4ac8 	vcmpe.f32	s9, s16
 800da18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1c:	f342 8712 	ble.w	8010844 <kalman_3gyro.constprop.0+0x44fc>
 800da20:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800da24:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800da28:	ee38 3a47 	vsub.f32	s6, s16, s14
 800da2c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800da30:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800da34:	ee64 4a03 	vmul.f32	s9, s8, s6
 800da38:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800da3c:	ee3b ba23 	vadd.f32	s22, s22, s7
 800da40:	f002 bed8 	b.w	80107f4 <kalman_3gyro.constprop.0+0x44ac>
 800da44:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da48:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da50:	f342 84bd 	ble.w	80103ce <kalman_3gyro.constprop.0+0x4086>
 800da54:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800da58:	f7ff b993 	b.w	800cd82 <kalman_3gyro.constprop.0+0xa3a>
 800da5c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da60:	eeb4 bac7 	vcmpe.f32	s22, s14
 800da64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da68:	f342 849f 	ble.w	80103aa <kalman_3gyro.constprop.0+0x4062>
 800da6c:	ed9f ba33 	vldr	s22, [pc, #204]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800da70:	f7ff b964 	b.w	800cd3c <kalman_3gyro.constprop.0+0x9f4>
 800da74:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da78:	eef4 dac7 	vcmpe.f32	s27, s14
 800da7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da80:	f342 84b7 	ble.w	80103f2 <kalman_3gyro.constprop.0+0x40aa>
 800da84:	eddf da2d 	vldr	s27, [pc, #180]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800da88:	f7ff b935 	b.w	800ccf6 <kalman_3gyro.constprop.0+0x9ae>
 800da8c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800da90:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da98:	f342 8475 	ble.w	8010386 <kalman_3gyro.constprop.0+0x403e>
 800da9c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800daa0:	f7ff b8c3 	b.w	800cc2a <kalman_3gyro.constprop.0+0x8e2>
 800daa4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800daa8:	eeb4 bac7 	vcmpe.f32	s22, s14
 800daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab0:	f342 83a0 	ble.w	80101f4 <kalman_3gyro.constprop.0+0x3eac>
 800dab4:	ed9f ba21 	vldr	s22, [pc, #132]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800dab8:	f7ff b894 	b.w	800cbe4 <kalman_3gyro.constprop.0+0x89c>
 800dabc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dac0:	eef4 dac7 	vcmpe.f32	s27, s14
 800dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac8:	f342 8382 	ble.w	80101d0 <kalman_3gyro.constprop.0+0x3e88>
 800dacc:	eddf da1b 	vldr	s27, [pc, #108]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800dad0:	f7ff b865 	b.w	800cb9e <kalman_3gyro.constprop.0+0x856>
 800dad4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dad8:	eef4 dac7 	vcmpe.f32	s27, s14
 800dadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae0:	f342 8364 	ble.w	80101ac <kalman_3gyro.constprop.0+0x3e64>
 800dae4:	eddf da15 	vldr	s27, [pc, #84]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800dae8:	f7fe bff3 	b.w	800cad2 <kalman_3gyro.constprop.0+0x78a>
 800daec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800daf0:	eeb4 eac7 	vcmpe.f32	s28, s14
 800daf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf8:	f342 8346 	ble.w	8010188 <kalman_3gyro.constprop.0+0x3e40>
 800dafc:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800db00:	f7fe bfc4 	b.w	800ca8c <kalman_3gyro.constprop.0+0x744>
 800db04:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800db08:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800db0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db10:	f342 839e 	ble.w	8010250 <kalman_3gyro.constprop.0+0x3f08>
 800db14:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800db3c <kalman_3gyro.constprop.0+0x17f4>
 800db18:	f7fe bf95 	b.w	800ca46 <kalman_3gyro.constprop.0+0x6fe>
 800db1c:	eef1 3a63 	vneg.f32	s7, s7
 800db20:	f7ff bb42 	b.w	800d1a8 <kalman_3gyro.constprop.0+0xe60>
 800db24:	eef1 3a63 	vneg.f32	s7, s7
 800db28:	f7ff bb1b 	b.w	800d162 <kalman_3gyro.constprop.0+0xe1a>
 800db2c:	00000000 	.word	0x00000000
 800db30:	3fb33333 	.word	0x3fb33333
 800db34:	bfb33333 	.word	0xbfb33333
 800db38:	3f333333 	.word	0x3f333333
 800db3c:	80000000 	.word	0x80000000
 800db40:	3fb77778 	.word	0x3fb77778
 800db44:	3f99999a 	.word	0x3f99999a
 800db48:	3f4ccccd 	.word	0x3f4ccccd
 800db4c:	42d40000 	.word	0x42d40000
 800db50:	46979000 	.word	0x46979000
 800db54:	4415c000 	.word	0x4415c000
 800db58:	3ba3d70a 	.word	0x3ba3d70a
 800db5c:	3b449ba6 	.word	0x3b449ba6
 800db60:	3c75c28f 	.word	0x3c75c28f
 800db64:	3c23d70a 	.word	0x3c23d70a
 800db68:	3d4cccc0 	.word	0x3d4cccc0
 800db6c:	43480000 	.word	0x43480000
 800db70:	3d4ccccd 	.word	0x3d4ccccd
 800db74:	3cf5c28f 	.word	0x3cf5c28f
 800db78:	3eb33334 	.word	0x3eb33334
 800db7c:	3f933333 	.word	0x3f933333
 800db80:	4247ffff 	.word	0x4247ffff
 800db84:	3dcccccd 	.word	0x3dcccccd
 800db88:	3e4ccccd 	.word	0x3e4ccccd
 800db8c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800db90:	eeb0 ba4e 	vmov.f32	s22, s28
 800db94:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800db98:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800db9c:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800db84 <kalman_3gyro.constprop.0+0x183c>
 800dba0:	ee79 da6d 	vsub.f32	s27, s18, s27
 800dba4:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800dba8:	eef0 daed 	vabs.f32	s27, s27
 800dbac:	eeb0 5ac5 	vabs.f32	s10, s10
 800dbb0:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800dbb4:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800dbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbbc:	f340 821c 	ble.w	800dff8 <kalman_3gyro.constprop.0+0x1cb0>
 800dbc0:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800db40 <kalman_3gyro.constprop.0+0x17f8>
 800dbc4:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800dbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbcc:	f302 828b 	bgt.w	80100e6 <kalman_3gyro.constprop.0+0x3d9e>
 800dbd0:	ee35 5a64 	vsub.f32	s10, s10, s9
 800dbd4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800dbd8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800dbdc:	eee5 4a04 	vfma.f32	s9, s10, s8
 800dbe0:	eeb0 5a64 	vmov.f32	s10, s9
 800dbe4:	eeb4 5aea 	vcmpe.f32	s10, s21
 800dbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbec:	f89b 3000 	ldrb.w	r3, [fp]
 800dbf0:	bfb8      	it	lt
 800dbf2:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800dbf6:	ed8d 5a01 	vstr	s10, [sp, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 81f9 	beq.w	800dff2 <kalman_3gyro.constprop.0+0x1caa>
 800dc00:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	f000 81de 	beq.w	800dfc6 <kalman_3gyro.constprop.0+0x1c7e>
 800dc0a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800dc0e:	2300      	movs	r3, #0
 800dc10:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800dc14:	eeb0 6a61 	vmov.f32	s12, s3
 800dc18:	eea7 6a47 	vfms.f32	s12, s14, s14
 800dc1c:	9908      	ldr	r1, [sp, #32]
 800dc1e:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800dc22:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800dc26:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800dc2a:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800dc2e:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800dc32:	eef1 0ac6 	vsqrt.f32	s1, s12
 800dc36:	2200      	movs	r2, #0
 800dc38:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800dc3c:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800dc40:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800dc44:	9233      	str	r2, [sp, #204]	; 0xcc
 800dc46:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800dc4a:	ee23 4a85 	vmul.f32	s8, s7, s10
 800dc4e:	ee36 2a06 	vadd.f32	s4, s12, s12
 800dc52:	ee25 6a05 	vmul.f32	s12, s10, s10
 800dc56:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800dc5a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800dc5e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800dc62:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800dc66:	ee34 4a04 	vadd.f32	s8, s8, s8
 800dc6a:	eeb0 3a42 	vmov.f32	s6, s4
 800dc6e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800dc72:	eea1 3a25 	vfma.f32	s6, s2, s11
 800dc76:	eef0 aa46 	vmov.f32	s21, s12
 800dc7a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800dc7e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800dc82:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800dc86:	ee65 6a26 	vmul.f32	s13, s10, s13
 800dc8a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800dc8e:	eef0 2a44 	vmov.f32	s5, s8
 800dc92:	eee0 2a25 	vfma.f32	s5, s0, s11
 800dc96:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800dc9a:	eeb0 fa64 	vmov.f32	s30, s9
 800dc9e:	eea0 4a65 	vfms.f32	s8, s0, s11
 800dca2:	ee71 fac3 	vsub.f32	s31, s3, s6
 800dca6:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800dcaa:	eeb0 1a6a 	vmov.f32	s2, s21
 800dcae:	eef0 aa66 	vmov.f32	s21, s13
 800dcb2:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800dcb6:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800dcba:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800dcbe:	ee32 6a06 	vadd.f32	s12, s4, s12
 800dcc2:	ee22 2a87 	vmul.f32	s4, s5, s14
 800dcc6:	eea0 0a84 	vfma.f32	s0, s1, s8
 800dcca:	eea0 2a81 	vfma.f32	s4, s1, s2
 800dcce:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800dcd2:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800dcd6:	eef0 3a64 	vmov.f32	s7, s9
 800dcda:	eee5 3a65 	vfms.f32	s7, s10, s11
 800dcde:	eee5 4a25 	vfma.f32	s9, s10, s11
 800dce2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800dce6:	edd1 5a02 	vldr	s11, [r1, #8]
 800dcea:	ed91 5a05 	vldr	s10, [r1, #20]
 800dcee:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800dcf2:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800dcf6:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800dcfa:	edd1 1a01 	vldr	s3, [r1, #4]
 800dcfe:	edd1 fa00 	vldr	s31, [r1]
 800dd02:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800dd06:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800dd0a:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800dd0e:	edd1 5a03 	vldr	s11, [r1, #12]
 800dd12:	edd1 1a04 	vldr	s3, [r1, #16]
 800dd16:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800db44 <kalman_3gyro.constprop.0+0x17fc>
 800dd1a:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800dd1e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800dd22:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800dd26:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800dd2a:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800dd2e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800dd3a:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800dd3e:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800dd42:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800dd46:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800dd4a:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800dd4e:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800dd52:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800dd56:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800dd5a:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800dd5e:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800dd62:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800dd66:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800dd6a:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800dd6e:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800dd72:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800dd76:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800dd7a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800dd7e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800dd82:	d506      	bpl.n	800dd92 <kalman_3gyro.constprop.0+0x1a4a>
 800dd84:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800db48 <kalman_3gyro.constprop.0+0x1800>
 800dd88:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd90:	dc01      	bgt.n	800dd96 <kalman_3gyro.constprop.0+0x1a4e>
 800dd92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd96:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800dd9a:	eef0 7ae7 	vabs.f32	s15, s15
 800dd9e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800dda2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddaa:	f340 8141 	ble.w	800e030 <kalman_3gyro.constprop.0+0x1ce8>
 800ddae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddba:	f142 8198 	bpl.w	80100ee <kalman_3gyro.constprop.0+0x3da6>
 800ddbe:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800db58 <kalman_3gyro.constprop.0+0x1810>
 800ddc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddc6:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800db64 <kalman_3gyro.constprop.0+0x181c>
 800ddca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ddd2:	f102 8221 	bmi.w	8010218 <kalman_3gyro.constprop.0+0x3ed0>
 800ddd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddda:	f142 8221 	bpl.w	8010220 <kalman_3gyro.constprop.0+0x3ed8>
 800ddde:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800db60 <kalman_3gyro.constprop.0+0x1818>
 800dde2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddea:	f282 84a4 	bge.w	8010736 <kalman_3gyro.constprop.0+0x43ee>
 800ddee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddf2:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800db74 <kalman_3gyro.constprop.0+0x182c>
 800ddf6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ddfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddfe:	f2c2 84b0 	blt.w	8010762 <kalman_3gyro.constprop.0+0x441a>
 800de02:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800db70 <kalman_3gyro.constprop.0+0x1828>
 800de06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de0e:	f142 84b0 	bpl.w	8010772 <kalman_3gyro.constprop.0+0x442a>
 800de12:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800db74 <kalman_3gyro.constprop.0+0x182c>
 800de16:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800db80 <kalman_3gyro.constprop.0+0x1838>
 800de1a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800de1e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800de22:	ee66 6a87 	vmul.f32	s13, s13, s14
 800de26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800de2a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800de2e:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800db84 <kalman_3gyro.constprop.0+0x183c>
 800de32:	eef4 7ae6 	vcmpe.f32	s15, s13
 800de36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de3a:	f2c2 84b0 	blt.w	801079e <kalman_3gyro.constprop.0+0x4456>
 800de3e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800db88 <kalman_3gyro.constprop.0+0x1840>
 800de42:	eef4 7ac7 	vcmpe.f32	s15, s14
 800de46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4a:	f142 84b0 	bpl.w	80107ae <kalman_3gyro.constprop.0+0x4466>
 800de4e:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800db84 <kalman_3gyro.constprop.0+0x183c>
 800de52:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800db4c <kalman_3gyro.constprop.0+0x1804>
 800de56:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800de5a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800de5e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800de62:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800de66:	eea6 7a86 	vfma.f32	s14, s13, s12
 800de6a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800de6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800de72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de76:	db0d      	blt.n	800de94 <kalman_3gyro.constprop.0+0x1b4c>
 800de78:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800de7c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800db50 <kalman_3gyro.constprop.0+0x1808>
 800de80:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800db54 <kalman_3gyro.constprop.0+0x180c>
 800de84:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800de88:	ee66 6a86 	vmul.f32	s13, s13, s12
 800de8c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800de90:	eea6 7a86 	vfma.f32	s14, s13, s12
 800de94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de98:	ee77 6a26 	vadd.f32	s13, s14, s13
 800de9c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800dea0:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800dea4:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800db60 <kalman_3gyro.constprop.0+0x1818>
 800dea8:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800db58 <kalman_3gyro.constprop.0+0x1810>
 800deac:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800db64 <kalman_3gyro.constprop.0+0x181c>
 800deb0:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800db5c <kalman_3gyro.constprop.0+0x1814>
 800deb4:	eef4 4ac6 	vcmpe.f32	s9, s12
 800deb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debc:	eef4 7ae3 	vcmpe.f32	s15, s7
 800dec0:	bfb8      	it	lt
 800dec2:	eef0 4a46 	vmovlt.f32	s9, s12
 800dec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deca:	ee24 4a84 	vmul.f32	s8, s9, s8
 800dece:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800ded2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ded6:	f142 841f 	bpl.w	8010718 <kalman_3gyro.constprop.0+0x43d0>
 800deda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dede:	f2c2 841f 	blt.w	8010720 <kalman_3gyro.constprop.0+0x43d8>
 800dee2:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800db60 <kalman_3gyro.constprop.0+0x1818>
 800dee6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800deea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deee:	f142 83ba 	bpl.w	8010666 <kalman_3gyro.constprop.0+0x431e>
 800def2:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800db64 <kalman_3gyro.constprop.0+0x181c>
 800def6:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800db68 <kalman_3gyro.constprop.0+0x1820>
 800defa:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800db6c <kalman_3gyro.constprop.0+0x1824>
 800defe:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800df02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df06:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800df0a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800df0e:	eeb0 ca66 	vmov.f32	s24, s13
 800df12:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800db74 <kalman_3gyro.constprop.0+0x182c>
 800df16:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1e:	f2c2 83ba 	blt.w	8010696 <kalman_3gyro.constprop.0+0x434e>
 800df22:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800db70 <kalman_3gyro.constprop.0+0x1828>
 800df26:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df2e:	f142 83ba 	bpl.w	80106a6 <kalman_3gyro.constprop.0+0x435e>
 800df32:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800db74 <kalman_3gyro.constprop.0+0x182c>
 800df36:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800db78 <kalman_3gyro.constprop.0+0x1830>
 800df3a:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800db80 <kalman_3gyro.constprop.0+0x1838>
 800df3e:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800db7c <kalman_3gyro.constprop.0+0x1834>
 800df42:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800df46:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800df4a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800df4e:	eeb0 ca66 	vmov.f32	s24, s13
 800df52:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800db84 <kalman_3gyro.constprop.0+0x183c>
 800df56:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df5e:	f2c2 83ba 	blt.w	80106d6 <kalman_3gyro.constprop.0+0x438e>
 800df62:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800db88 <kalman_3gyro.constprop.0+0x1840>
 800df66:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6e:	f142 83ba 	bpl.w	80106e6 <kalman_3gyro.constprop.0+0x439e>
 800df72:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e000 <kalman_3gyro.constprop.0+0x1cb8>
 800df76:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e004 <kalman_3gyro.constprop.0+0x1cbc>
 800df7a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800df7e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800df82:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800df86:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800df8a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800df8e:	eeb0 ca66 	vmov.f32	s24, s13
 800df92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800df96:	eef4 7ae6 	vcmpe.f32	s15, s13
 800df9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9e:	f2c2 80b0 	blt.w	8010102 <kalman_3gyro.constprop.0+0x3dba>
 800dfa2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800dfa6:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800dfaa:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e008 <kalman_3gyro.constprop.0+0x1cc0>
 800dfae:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e00c <kalman_3gyro.constprop.0+0x1cc4>
 800dfb2:	ee63 3a23 	vmul.f32	s7, s6, s7
 800dfb6:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800dfba:	eee3 6a83 	vfma.f32	s13, s7, s6
 800dfbe:	eeb0 ca66 	vmov.f32	s24, s13
 800dfc2:	f002 b89e 	b.w	8010102 <kalman_3gyro.constprop.0+0x3dba>
 800dfc6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800dfca:	ed9b 6a05 	vldr	s12, [fp, #20]
 800dfce:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800dfd2:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800dfd6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800dfda:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800dfde:	ee67 7a85 	vmul.f32	s15, s15, s10
 800dfe2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800dfe6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dfea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfee:	f102 8246 	bmi.w	801047e <kalman_3gyro.constprop.0+0x4136>
 800dff2:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800dff6:	e60b      	b.n	800dc10 <kalman_3gyro.constprop.0+0x18c8>
 800dff8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800dffc:	e5f2      	b.n	800dbe4 <kalman_3gyro.constprop.0+0x189c>
 800dffe:	bf00      	nop
 800e000:	3dcccccd 	.word	0x3dcccccd
 800e004:	410c0000 	.word	0x410c0000
 800e008:	42c80000 	.word	0x42c80000
 800e00c:	424a0000 	.word	0x424a0000
 800e010:	3c23d70a 	.word	0x3c23d70a
 800e014:	3b449ba6 	.word	0x3b449ba6
 800e018:	3fb33333 	.word	0x3fb33333
 800e01c:	3ecccccd 	.word	0x3ecccccd
 800e020:	3f8f5c29 	.word	0x3f8f5c29
 800e024:	3f59999a 	.word	0x3f59999a
 800e028:	3e4ccccd 	.word	0x3e4ccccd
 800e02c:	3f99999a 	.word	0x3f99999a
 800e030:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e034:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e010 <kalman_3gyro.constprop.0+0x1cc8>
 800e038:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e014 <kalman_3gyro.constprop.0+0x1ccc>
 800e03c:	eeb0 7a4c 	vmov.f32	s14, s24
 800e040:	eef0 4a4c 	vmov.f32	s9, s24
 800e044:	eddd 6a01 	vldr	s13, [sp, #4]
 800e048:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e04c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e050:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e054:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e058:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e05c:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e060:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e064:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e068:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e06c:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e070:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e074:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e078:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e07c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e080:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e084:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e088:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e08c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e090:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e094:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e098:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e09c:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e0a0:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e0a4:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e0a8:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e0ac:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e0b0:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e0b4:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e0b8:	2a00      	cmp	r2, #0
 800e0ba:	f001 8411 	beq.w	800f8e0 <kalman_3gyro.constprop.0+0x3598>
 800e0be:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e0c2:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e0c6:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e0ca:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e0ce:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e0d2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e0d6:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e0da:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e0de:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e0e2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e0e6:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e0ea:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e0ee:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e0f2:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e0f6:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e0fa:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e0fe:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e102:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e106:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e10a:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e10e:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e112:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e116:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e11a:	b159      	cbz	r1, 800e134 <kalman_3gyro.constprop.0+0x1dec>
 800e11c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e120:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e128:	dd04      	ble.n	800e134 <kalman_3gyro.constprop.0+0x1dec>
 800e12a:	2000      	movs	r0, #0
 800e12c:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e130:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e134:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e13c:	dd09      	ble.n	800e152 <kalman_3gyro.constprop.0+0x1e0a>
 800e13e:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e142:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14a:	db02      	blt.n	800e152 <kalman_3gyro.constprop.0+0x1e0a>
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f002 8001 	beq.w	8010154 <kalman_3gyro.constprop.0+0x3e0c>
 800e152:	b132      	cbz	r2, 800e162 <kalman_3gyro.constprop.0+0x1e1a>
 800e154:	f240 1001 	movw	r0, #257	; 0x101
 800e158:	2301      	movs	r3, #1
 800e15a:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e15e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e162:	2301      	movs	r3, #1
 800e164:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e168:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e16c:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e018 <kalman_3gyro.constprop.0+0x1cd0>
 800e170:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e178:	dc09      	bgt.n	800e18e <kalman_3gyro.constprop.0+0x1e46>
 800e17a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e01c <kalman_3gyro.constprop.0+0x1cd4>
 800e17e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e186:	d402      	bmi.n	800e18e <kalman_3gyro.constprop.0+0x1e46>
 800e188:	2a00      	cmp	r2, #0
 800e18a:	f042 80e4 	bne.w	8010356 <kalman_3gyro.constprop.0+0x400e>
 800e18e:	2300      	movs	r3, #0
 800e190:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e194:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e198:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e19c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e1a0:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e020 <kalman_3gyro.constprop.0+0x1cd8>
 800e1a4:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ac:	dc09      	bgt.n	800e1c2 <kalman_3gyro.constprop.0+0x1e7a>
 800e1ae:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e024 <kalman_3gyro.constprop.0+0x1cdc>
 800e1b2:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ba:	d402      	bmi.n	800e1c2 <kalman_3gyro.constprop.0+0x1e7a>
 800e1bc:	2900      	cmp	r1, #0
 800e1be:	f042 8097 	bne.w	80102f0 <kalman_3gyro.constprop.0+0x3fa8>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e1c8:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e1cc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e1d0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e1d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e1d8:	eef4 dae7 	vcmpe.f32	s27, s15
 800e1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e0:	f341 836b 	ble.w	800f8ba <kalman_3gyro.constprop.0+0x3572>
 800e1e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1e8:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e1ec:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e1f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e202:	eef4 dac7 	vcmpe.f32	s27, s14
 800e206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e20a:	bfc4      	itt	gt
 800e20c:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e210:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e214:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e218:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e21c:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e220:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e224:	2b0e      	cmp	r3, #14
 800e226:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e22a:	dc02      	bgt.n	800e232 <kalman_3gyro.constprop.0+0x1eea>
 800e22c:	3305      	adds	r3, #5
 800e22e:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800e232:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e236:	eef4 7acd 	vcmpe.f32	s15, s26
 800e23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23e:	f340 82e9 	ble.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e242:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e246:	eef4 7aeb 	vcmpe.f32	s15, s23
 800e24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24e:	f340 82e1 	ble.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e252:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e256:	eef4 7aec 	vcmpe.f32	s15, s25
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	f340 82d9 	ble.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e262:	9b08      	ldr	r3, [sp, #32]
 800e264:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e028 <kalman_3gyro.constprop.0+0x1ce0>
 800e268:	ed93 7a06 	vldr	s14, [r3, #24]
 800e26c:	eef0 6ac7 	vabs.f32	s13, s14
 800e270:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	f140 82cc 	bpl.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e27c:	edd3 6a07 	vldr	s13, [r3, #28]
 800e280:	eeb0 6ae6 	vabs.f32	s12, s13
 800e284:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28c:	f140 82c2 	bpl.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e290:	ed93 6a08 	vldr	s12, [r3, #32]
 800e294:	eef0 4ac6 	vabs.f32	s9, s12
 800e298:	eef4 4ae7 	vcmpe.f32	s9, s15
 800e29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a0:	f140 82b8 	bpl.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e2a4:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e02c <kalman_3gyro.constprop.0+0x1ce4>
 800e2a8:	eef0 5ae5 	vabs.f32	s11, s11
 800e2ac:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b4:	f140 82ae 	bpl.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e2b8:	eef0 1ae1 	vabs.f32	s3, s3
 800e2bc:	eef4 1ae7 	vcmpe.f32	s3, s15
 800e2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c4:	f140 82a6 	bpl.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e2c8:	eeb0 5ac5 	vabs.f32	s10, s10
 800e2cc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d4:	f140 829e 	bpl.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e2d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2da:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800e2de:	edd3 5a00 	vldr	s11, [r3]
 800e2e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e2e4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e2e6:	ed93 5a00 	vldr	s10, [r3]
 800e2ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e2ec:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e2f0:	2a09      	cmp	r2, #9
 800e2f2:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800e2f6:	ed93 4a00 	vldr	s8, [r3]
 800e2fa:	edd4 3a00 	vldr	s7, [r4]
 800e2fe:	bf8c      	ite	hi
 800e300:	230a      	movhi	r3, #10
 800e302:	2305      	movls	r3, #5
 800e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e308:	bfb4      	ite	lt
 800e30a:	eef0 7a45 	vmovlt.f32	s15, s10
 800e30e:	eef0 7a65 	vmovge.f32	s15, s11
 800e312:	bf8c      	ite	hi
 800e314:	eef0 4a45 	vmovhi.f32	s9, s10
 800e318:	eef0 4a65 	vmovls.f32	s9, s11
 800e31c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e324:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e328:	bfb8      	it	lt
 800e32a:	eef0 7a63 	vmovlt.f32	s15, s7
 800e32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e332:	bf88      	it	hi
 800e334:	eef0 4a63 	vmovhi.f32	s9, s7
 800e338:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e344:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e348:	edd1 5a00 	vldr	s11, [r1]
 800e34c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e34e:	bfb8      	it	lt
 800e350:	eef0 7a44 	vmovlt.f32	s15, s8
 800e354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e358:	bf88      	it	hi
 800e35a:	eef0 4a44 	vmovhi.f32	s9, s8
 800e35e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e362:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e36a:	eef4 4ae5 	vcmpe.f32	s9, s11
 800e36e:	bfb8      	it	lt
 800e370:	eef0 7a65 	vmovlt.f32	s15, s11
 800e374:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	bf88      	it	hi
 800e37e:	eef0 4a65 	vmovhi.f32	s9, s11
 800e382:	2b05      	cmp	r3, #5
 800e384:	ee35 5a25 	vadd.f32	s10, s10, s11
 800e388:	edd1 5a00 	vldr	s11, [r1]
 800e38c:	d065      	beq.n	800e45a <kalman_3gyro.constprop.0+0x2112>
 800e38e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800e392:	edd1 3a00 	vldr	s7, [r1]
 800e396:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800e39a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e39e:	ed91 4a00 	vldr	s8, [r1]
 800e3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a6:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e3aa:	bfb8      	it	lt
 800e3ac:	eef0 7a63 	vmovlt.f32	s15, s7
 800e3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b4:	bf88      	it	hi
 800e3b6:	eef0 4a63 	vmovhi.f32	s9, s7
 800e3ba:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e3be:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800e3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e3ca:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e3ce:	edd1 3a00 	vldr	s7, [r1]
 800e3d2:	bfb8      	it	lt
 800e3d4:	eef0 7a44 	vmovlt.f32	s15, s8
 800e3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3dc:	bf88      	it	hi
 800e3de:	eef0 4a44 	vmovhi.f32	s9, s8
 800e3e2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e3e6:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800e3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ee:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e3f2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e3f6:	ed91 4a00 	vldr	s8, [r1]
 800e3fa:	bfb8      	it	lt
 800e3fc:	eef0 7a63 	vmovlt.f32	s15, s7
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	bf88      	it	hi
 800e406:	eef0 4a63 	vmovhi.f32	s9, s7
 800e40a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e412:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e416:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e41a:	bfb8      	it	lt
 800e41c:	eef0 7a44 	vmovlt.f32	s15, s8
 800e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e424:	bf88      	it	hi
 800e426:	eef0 4a44 	vmovhi.f32	s9, s8
 800e42a:	2b0a      	cmp	r3, #10
 800e42c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e430:	d113      	bne.n	800e45a <kalman_3gyro.constprop.0+0x2112>
 800e432:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800e436:	ed91 4a00 	vldr	s8, [r1]
 800e43a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e442:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e446:	bfb8      	it	lt
 800e448:	eef0 7a44 	vmovlt.f32	s15, s8
 800e44c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e454:	bf88      	it	hi
 800e456:	eef0 4a44 	vmovhi.f32	s9, s8
 800e45a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e45e:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800e7fc <kalman_3gyro.constprop.0+0x24b4>
 800e462:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800e800 <kalman_3gyro.constprop.0+0x24b8>
 800e466:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e46a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e46e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	f300 81cd 	bgt.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e47a:	eef0 7ac5 	vabs.f32	s15, s10
 800e47e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e482:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800e804 <kalman_3gyro.constprop.0+0x24bc>
 800e486:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48e:	f300 81c1 	bgt.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e492:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e494:	ed91 5a00 	vldr	s10, [r1]
 800e498:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e49a:	ed91 4a00 	vldr	s8, [r1]
 800e49e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e4a0:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e4a4:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800e4a8:	ed90 3a00 	vldr	s6, [r0]
 800e4ac:	edd1 3a00 	vldr	s7, [r1]
 800e4b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	bfb4      	ite	lt
 800e4b8:	eef0 7a44 	vmovlt.f32	s15, s8
 800e4bc:	eef0 7a45 	vmovge.f32	s15, s10
 800e4c0:	bf8c      	ite	hi
 800e4c2:	eef0 4a44 	vmovhi.f32	s9, s8
 800e4c6:	eef0 4a45 	vmovls.f32	s9, s10
 800e4ca:	eef4 7ac3 	vcmpe.f32	s15, s6
 800e4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800e4d6:	bfb8      	it	lt
 800e4d8:	eef0 7a43 	vmovlt.f32	s15, s6
 800e4dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e0:	bf88      	it	hi
 800e4e2:	eef0 4a43 	vmovhi.f32	s9, s6
 800e4e6:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e4f2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e4f6:	ed91 4a00 	vldr	s8, [r1]
 800e4fa:	bfb8      	it	lt
 800e4fc:	eef0 7a63 	vmovlt.f32	s15, s7
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	bf88      	it	hi
 800e506:	eef0 4a63 	vmovhi.f32	s9, s7
 800e50a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e50e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e516:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e51a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e51e:	bfb8      	it	lt
 800e520:	eef0 7a44 	vmovlt.f32	s15, s8
 800e524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e528:	bf88      	it	hi
 800e52a:	eef0 4a44 	vmovhi.f32	s9, s8
 800e52e:	2b05      	cmp	r3, #5
 800e530:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e534:	d065      	beq.n	800e602 <kalman_3gyro.constprop.0+0x22ba>
 800e536:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800e53a:	edd1 3a00 	vldr	s7, [r1]
 800e53e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800e542:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e546:	ed91 4a00 	vldr	s8, [r1]
 800e54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e552:	bfb8      	it	lt
 800e554:	eef0 7a63 	vmovlt.f32	s15, s7
 800e558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55c:	bf88      	it	hi
 800e55e:	eef0 4a63 	vmovhi.f32	s9, s7
 800e562:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e566:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e572:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e576:	edd1 3a00 	vldr	s7, [r1]
 800e57a:	bfb8      	it	lt
 800e57c:	eef0 7a44 	vmovlt.f32	s15, s8
 800e580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e584:	bf88      	it	hi
 800e586:	eef0 4a44 	vmovhi.f32	s9, s8
 800e58a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e58e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e596:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e59a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e59e:	ed91 4a00 	vldr	s8, [r1]
 800e5a2:	bfb8      	it	lt
 800e5a4:	eef0 7a63 	vmovlt.f32	s15, s7
 800e5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ac:	bf88      	it	hi
 800e5ae:	eef0 4a63 	vmovhi.f32	s9, s7
 800e5b2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e5be:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e5c2:	bfb8      	it	lt
 800e5c4:	eef0 7a44 	vmovlt.f32	s15, s8
 800e5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5cc:	bf88      	it	hi
 800e5ce:	eef0 4a44 	vmovhi.f32	s9, s8
 800e5d2:	2b0a      	cmp	r3, #10
 800e5d4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e5d8:	d113      	bne.n	800e602 <kalman_3gyro.constprop.0+0x22ba>
 800e5da:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800e5de:	ed91 4a00 	vldr	s8, [r1]
 800e5e2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ea:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e5ee:	bfb8      	it	lt
 800e5f0:	eef0 7a44 	vmovlt.f32	s15, s8
 800e5f4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fc:	bf88      	it	hi
 800e5fe:	eef0 4a44 	vmovhi.f32	s9, s8
 800e602:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e606:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800e7fc <kalman_3gyro.constprop.0+0x24b4>
 800e60a:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800e800 <kalman_3gyro.constprop.0+0x24b8>
 800e60e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e612:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e616:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61e:	f300 80f9 	bgt.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e622:	eef0 7ac5 	vabs.f32	s15, s10
 800e626:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e62a:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800e804 <kalman_3gyro.constprop.0+0x24bc>
 800e62e:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e636:	f300 80ed 	bgt.w	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e63a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e63c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800e63e:	edd1 4a00 	vldr	s9, [r1]
 800e642:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e644:	ed91 3a00 	vldr	s6, [r1]
 800e648:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e64a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800e64e:	ed91 4a00 	vldr	s8, [r1]
 800e652:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800e656:	edd1 3a00 	vldr	s7, [r1]
 800e65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65e:	bfb4      	ite	lt
 800e660:	eef0 7a43 	vmovlt.f32	s15, s6
 800e664:	eef0 7a64 	vmovge.f32	s15, s9
 800e668:	bf8c      	ite	hi
 800e66a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800e66e:	eeb0 5a64 	vmovls.f32	s10, s9
 800e672:	eef4 3ae7 	vcmpe.f32	s7, s15
 800e676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e67a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800e67e:	bfa8      	it	ge
 800e680:	eef0 7a63 	vmovge.f32	s15, s7
 800e684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e688:	bf98      	it	ls
 800e68a:	eeb0 5a63 	vmovls.f32	s10, s7
 800e68e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800e692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e696:	ee34 3a83 	vadd.f32	s6, s9, s6
 800e69a:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800e69e:	edd5 4a00 	vldr	s9, [r5]
 800e6a2:	bfa8      	it	ge
 800e6a4:	eef0 7a44 	vmovge.f32	s15, s8
 800e6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ac:	bf98      	it	ls
 800e6ae:	eeb0 5a44 	vmovls.f32	s10, s8
 800e6b2:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e6b6:	ee73 3a83 	vadd.f32	s7, s7, s6
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	eef4 4ac5 	vcmpe.f32	s9, s10
 800e6c2:	bfb8      	it	lt
 800e6c4:	eef0 7a64 	vmovlt.f32	s15, s9
 800e6c8:	ee34 4a23 	vadd.f32	s8, s8, s7
 800e6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d0:	bf98      	it	ls
 800e6d2:	eeb0 5a64 	vmovls.f32	s10, s9
 800e6d6:	2b05      	cmp	r3, #5
 800e6d8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e6dc:	d065      	beq.n	800e7aa <kalman_3gyro.constprop.0+0x2462>
 800e6de:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800e6e2:	ed95 4a00 	vldr	s8, [r5]
 800e6e6:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800e6ea:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e6ee:	ed95 3a00 	vldr	s6, [r5]
 800e6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f6:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e6fa:	bfb8      	it	lt
 800e6fc:	eef0 7a44 	vmovlt.f32	s15, s8
 800e700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e704:	bf88      	it	hi
 800e706:	eeb0 5a44 	vmovhi.f32	s10, s8
 800e70a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800e70e:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800e712:	edd5 3a00 	vldr	s7, [r5]
 800e716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71a:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800e71e:	bfb8      	it	lt
 800e720:	eef0 7a43 	vmovlt.f32	s15, s6
 800e724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e728:	bf88      	it	hi
 800e72a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800e72e:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e732:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	ee34 4a24 	vadd.f32	s8, s8, s9
 800e73e:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800e742:	edd5 4a00 	vldr	s9, [r5]
 800e746:	bfb8      	it	lt
 800e748:	eef0 7a63 	vmovlt.f32	s15, s7
 800e74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e750:	bf88      	it	hi
 800e752:	eeb0 5a63 	vmovhi.f32	s10, s7
 800e756:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e75a:	ee34 4a03 	vadd.f32	s8, s8, s6
 800e75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e762:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e766:	bfb8      	it	lt
 800e768:	eef0 7a64 	vmovlt.f32	s15, s9
 800e76c:	ee34 4a23 	vadd.f32	s8, s8, s7
 800e770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e774:	bf88      	it	hi
 800e776:	eeb0 5a64 	vmovhi.f32	s10, s9
 800e77a:	2b0a      	cmp	r3, #10
 800e77c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800e780:	d113      	bne.n	800e7aa <kalman_3gyro.constprop.0+0x2462>
 800e782:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800e786:	ed93 4a00 	vldr	s8, [r3]
 800e78a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e792:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e796:	bfb8      	it	lt
 800e798:	eef0 7a44 	vmovlt.f32	s15, s8
 800e79c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a4:	bf88      	it	hi
 800e7a6:	eeb0 5a44 	vmovhi.f32	s10, s8
 800e7aa:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e7ae:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800e7fc <kalman_3gyro.constprop.0+0x24b4>
 800e7b2:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e800 <kalman_3gyro.constprop.0+0x24b8>
 800e7b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7ba:	ee64 4a85 	vmul.f32	s9, s9, s10
 800e7be:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c6:	dc25      	bgt.n	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e7c8:	eef0 7ae4 	vabs.f32	s15, s9
 800e7cc:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800e7d0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800e804 <kalman_3gyro.constprop.0+0x24bc>
 800e7d4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7dc:	dc1a      	bgt.n	800e814 <kalman_3gyro.constprop.0+0x24cc>
 800e7de:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800e7e2:	2d00      	cmp	r5, #0
 800e7e4:	f000 80e0 	beq.w	800e9a8 <kalman_3gyro.constprop.0+0x2660>
 800e7e8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	f002 8439 	beq.w	8011064 <kalman_3gyro.constprop.0+0x4d1c>
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	462b      	mov	r3, r5
 800e7f6:	9201      	str	r2, [sp, #4]
 800e7f8:	e01c      	b.n	800e834 <kalman_3gyro.constprop.0+0x24ec>
 800e7fa:	bf00      	nop
 800e7fc:	3be56041 	.word	0x3be56041
 800e800:	3dcccccd 	.word	0x3dcccccd
 800e804:	3e333333 	.word	0x3e333333
 800e808:	3d088889 	.word	0x3d088889
 800e80c:	42480000 	.word	0x42480000
 800e810:	00000000 	.word	0x00000000
 800e814:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800e818:	2100      	movs	r1, #0
 800e81a:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800e81e:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800e822:	2b00      	cmp	r3, #0
 800e824:	f000 80c1 	beq.w	800e9aa <kalman_3gyro.constprop.0+0x2662>
 800e828:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800e82c:	2a01      	cmp	r2, #1
 800e82e:	f001 8615 	beq.w	801045c <kalman_3gyro.constprop.0+0x4114>
 800e832:	9101      	str	r1, [sp, #4]
 800e834:	2b02      	cmp	r3, #2
 800e836:	f041 87d2 	bne.w	80107de <kalman_3gyro.constprop.0+0x4496>
 800e83a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e83e:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800e842:	f240 1301 	movw	r3, #257	; 0x101
 800e846:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800e84a:	2301      	movs	r3, #1
 800e84c:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800e850:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e854:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800e858:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800e85c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e860:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800e864:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800e868:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e86c:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800e870:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800e874:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e878:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e880:	f2c2 809a 	blt.w	80109b8 <kalman_3gyro.constprop.0+0x4670>
 800e884:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800e888:	2a00      	cmp	r2, #0
 800e88a:	f002 83db 	beq.w	8011044 <kalman_3gyro.constprop.0+0x4cfc>
 800e88e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800e892:	3301      	adds	r3, #1
 800e894:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800e898:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e89c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800e8a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8a4:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800e8a8:	f002 84da 	beq.w	8011260 <kalman_3gyro.constprop.0+0x4f18>
 800e8ac:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800e8b0:	f002 80d0 	beq.w	8010a54 <kalman_3gyro.constprop.0+0x470c>
 800e8b4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800e8b8:	2a00      	cmp	r2, #0
 800e8ba:	f042 80d0 	bne.w	8010a5e <kalman_3gyro.constprop.0+0x4716>
 800e8be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8c0:	a830      	add	r0, sp, #192	; 0xc0
 800e8c2:	f04f 31ff 	mov.w	r1, #4294967295
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	edd2 7a00 	vldr	s15, [r2]
 800e8cc:	3101      	adds	r1, #1
 800e8ce:	330c      	adds	r3, #12
 800e8d0:	3204      	adds	r2, #4
 800e8d2:	461c      	mov	r4, r3
 800e8d4:	ed94 7a00 	vldr	s14, [r4]
 800e8d8:	330c      	adds	r3, #12
 800e8da:	4598      	cmp	r8, r3
 800e8dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8e0:	d1f7      	bne.n	800e8d2 <kalman_3gyro.constprop.0+0x258a>
 800e8e2:	2902      	cmp	r1, #2
 800e8e4:	ece0 7a01 	vstmia	r0!, {s15}
 800e8e8:	f108 0804 	add.w	r8, r8, #4
 800e8ec:	d1eb      	bne.n	800e8c6 <kalman_3gyro.constprop.0+0x257e>
 800e8ee:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e808 <kalman_3gyro.constprop.0+0x24c0>
 800e8f2:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800e8f6:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800e8fa:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800e8fe:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800e900:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800e904:	ee24 4a27 	vmul.f32	s8, s8, s15
 800e908:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800e90c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e910:	460a      	mov	r2, r1
 800e912:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800e916:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800e91a:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800e91e:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800e922:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92a:	f103 030c 	add.w	r3, r3, #12
 800e92e:	bf88      	it	hi
 800e930:	eef0 7a47 	vmovhi.f32	s15, s14
 800e934:	4293      	cmp	r3, r2
 800e936:	d1f2      	bne.n	800e91e <kalman_3gyro.constprop.0+0x25d6>
 800e938:	1d1a      	adds	r2, r3, #4
 800e93a:	4290      	cmp	r0, r2
 800e93c:	ece4 7a01 	vstmia	r4!, {s15}
 800e940:	d1e9      	bne.n	800e916 <kalman_3gyro.constprop.0+0x25ce>
 800e942:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e944:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800e948:	edd3 7a00 	vldr	s15, [r3]
 800e94c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800e950:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800e954:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e958:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800e95c:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800e960:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800e964:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800e968:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800e96c:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800e970:	b14b      	cbz	r3, 800e986 <kalman_3gyro.constprop.0+0x263e>
 800e972:	ed9d 7a03 	vldr	s14, [sp, #12]
 800e976:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800e97a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e982:	f102 8553 	bmi.w	801142c <kalman_3gyro.constprop.0+0x50e4>
 800e986:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800e98a:	2a1e      	cmp	r2, #30
 800e98c:	f002 84dd 	beq.w	801134a <kalman_3gyro.constprop.0+0x5002>
 800e990:	1c53      	adds	r3, r2, #1
 800e992:	2aff      	cmp	r2, #255	; 0xff
 800e994:	bf14      	ite	ne
 800e996:	b2db      	uxtbne	r3, r3
 800e998:	23ff      	moveq	r3, #255	; 0xff
 800e99a:	2200      	movs	r2, #0
 800e99c:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800e9a0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800e9a4:	9b01      	ldr	r3, [sp, #4]
 800e9a6:	e012      	b.n	800e9ce <kalman_3gyro.constprop.0+0x2686>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800e9ae:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800e9b2:	9181      	str	r1, [sp, #516]	; 0x204
 800e9b4:	9282      	str	r2, [sp, #520]	; 0x208
 800e9b6:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800e9ba:	9183      	str	r1, [sp, #524]	; 0x20c
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800e9c2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800e9c6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800e9ca:	f88b 2001 	strb.w	r2, [fp, #1]
 800e9ce:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800e80c <kalman_3gyro.constprop.0+0x24c4>
 800e9d2:	eeb4 cae7 	vcmpe.f32	s24, s15
 800e9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9da:	f2c0 875f 	blt.w	800f89c <kalman_3gyro.constprop.0+0x3554>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800e9e4:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800e9e8:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d125      	bne.n	800ea3c <kalman_3gyro.constprop.0+0x26f4>
 800e9f0:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800e9f4:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800e9f8:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800e9fc:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800ea00:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ea04:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800ea08:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800ea0c:	ee25 5a24 	vmul.f32	s10, s10, s9
 800ea10:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ea14:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ea18:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ea1c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ea20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ea24:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800ea28:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800ea2c:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800ea30:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800ea34:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800ea38:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800ea3c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ea40:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800ea44:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800ea48:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800ea4c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800ea50:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800ea54:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800ea58:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800ea5c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800ea60:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800ea64:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800ea68:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800ea6c:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800ea70:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800ea74:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800ea78:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800ea7c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800ea80:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800ea84:	eee7 3a07 	vfma.f32	s7, s14, s14
 800ea88:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800ea92:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800ea96:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800ea9a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800ea9e:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800eaa2:	eea8 3a08 	vfma.f32	s6, s16, s16
 800eaa6:	2500      	movs	r5, #0
 800eaa8:	eea0 4a00 	vfma.f32	s8, s0, s0
 800eaac:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800eab0:	eea1 5a01 	vfma.f32	s10, s2, s2
 800eab4:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800eab8:	eea2 6a02 	vfma.f32	s12, s4, s4
 800eabc:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800eac0:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800eac4:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800eac8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eacc:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800ead0:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800ead4:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800ead8:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800eadc:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800eae0:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800eae4:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800eae8:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800eaec:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800eaf0:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800eaf4:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800eaf8:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800eafc:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800eb00:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800eb04:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800eb08:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800eb0c:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800eb10:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800eb14:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800e810 <kalman_3gyro.constprop.0+0x24c8>
 800eb18:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800eb1c:	ee24 4a04 	vmul.f32	s8, s8, s8
 800eb20:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800eb24:	ee25 5a05 	vmul.f32	s10, s10, s10
 800eb28:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800eb2c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800eb30:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800eb34:	ee27 7a07 	vmul.f32	s14, s14, s14
 800eb38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800eb3c:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800eb40:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800eb44:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800eb48:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800eb4c:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800eb50:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800eb54:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800eb58:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800eb5c:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800eb60:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800eb64:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800eb68:	e005      	b.n	800eb76 <kalman_3gyro.constprop.0+0x282e>
 800eb6a:	3501      	adds	r5, #1
 800eb6c:	2d0c      	cmp	r5, #12
 800eb6e:	f104 0404 	add.w	r4, r4, #4
 800eb72:	f000 84fe 	beq.w	800f572 <kalman_3gyro.constprop.0+0x322a>
 800eb76:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0f5      	beq.n	800eb6a <kalman_3gyro.constprop.0+0x2822>
 800eb7e:	edd4 da00 	vldr	s27, [r4]
 800eb82:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800eb86:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800eb8a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800eb8e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800eb92:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800eb96:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800eb9a:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800eb9e:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800eba2:	9b01      	ldr	r3, [sp, #4]
 800eba4:	ed89 8a00 	vstr	s16, [r9]
 800eba8:	ed89 8a01 	vstr	s16, [r9, #4]
 800ebac:	ed89 8a02 	vstr	s16, [r9, #8]
 800ebb0:	ed89 8a03 	vstr	s16, [r9, #12]
 800ebb4:	ed89 8a04 	vstr	s16, [r9, #16]
 800ebb8:	ed89 8a05 	vstr	s16, [r9, #20]
 800ebbc:	ed89 8a06 	vstr	s16, [r9, #24]
 800ebc0:	ed89 8a07 	vstr	s16, [r9, #28]
 800ebc4:	ed89 8a08 	vstr	s16, [r9, #32]
 800ebc8:	464e      	mov	r6, r9
 800ebca:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800ebce:	464a      	mov	r2, r9
 800ebd0:	ecb3 7a01 	vldmia	r3!, {s14}
 800ebd4:	ecf2 7a01 	vldmia	r2!, {s15}
 800ebd8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ebdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe0:	d006      	beq.n	800ebf0 <kalman_3gyro.constprop.0+0x28a8>
 800ebe2:	eef5 da40 	vcmp.f32	s27, #0.0
 800ebe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebea:	bf18      	it	ne
 800ebec:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800ebf0:	ed93 7a08 	vldr	s14, [r3, #32]
 800ebf4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ebf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfc:	d006      	beq.n	800ec0c <kalman_3gyro.constprop.0+0x28c4>
 800ebfe:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ec02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec06:	bf18      	it	ne
 800ec08:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800ec0c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ec10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	d006      	beq.n	800ec28 <kalman_3gyro.constprop.0+0x28e0>
 800ec1a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec22:	bf18      	it	ne
 800ec24:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800ec28:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800ec2c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec34:	d006      	beq.n	800ec44 <kalman_3gyro.constprop.0+0x28fc>
 800ec36:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ec3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3e:	bf18      	it	ne
 800ec40:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800ec44:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800ec48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec50:	d006      	beq.n	800ec60 <kalman_3gyro.constprop.0+0x2918>
 800ec52:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ec56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5a:	bf18      	it	ne
 800ec5c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800ec60:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800ec64:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec6c:	d006      	beq.n	800ec7c <kalman_3gyro.constprop.0+0x2934>
 800ec6e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ec72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec76:	bf18      	it	ne
 800ec78:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800ec7c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800ec80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ec84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec88:	d006      	beq.n	800ec98 <kalman_3gyro.constprop.0+0x2950>
 800ec8a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ec8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec92:	bf18      	it	ne
 800ec94:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800ec98:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800ec9c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca4:	d006      	beq.n	800ecb4 <kalman_3gyro.constprop.0+0x296c>
 800eca6:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	bf18      	it	ne
 800ecb0:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800ecb4:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800ecb8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ecbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc0:	d006      	beq.n	800ecd0 <kalman_3gyro.constprop.0+0x2988>
 800ecc2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ecc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecca:	bf18      	it	ne
 800eccc:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800ecd0:	428b      	cmp	r3, r1
 800ecd2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800ecd6:	f47f af7b 	bne.w	800ebd0 <kalman_3gyro.constprop.0+0x2888>
 800ecda:	eef5 da40 	vcmp.f32	s27, #0.0
 800ecde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece2:	edd9 8a00 	vldr	s17, [r9]
 800ece6:	f040 8543 	bne.w	800f770 <kalman_3gyro.constprop.0+0x3428>
 800ecea:	eef0 7a6d 	vmov.f32	s15, s27
 800ecee:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ecf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecf6:	ed99 9a01 	vldr	s18, [r9, #4]
 800ecfa:	d006      	beq.n	800ed0a <kalman_3gyro.constprop.0+0x29c2>
 800ecfc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ed00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed04:	bf18      	it	ne
 800ed06:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800ed0a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ed0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed12:	edd9 aa02 	vldr	s21, [r9, #8]
 800ed16:	d006      	beq.n	800ed26 <kalman_3gyro.constprop.0+0x29de>
 800ed18:	eef5 aa40 	vcmp.f32	s21, #0.0
 800ed1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed20:	bf18      	it	ne
 800ed22:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800ed26:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ed2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed2e:	edd9 ba03 	vldr	s23, [r9, #12]
 800ed32:	d006      	beq.n	800ed42 <kalman_3gyro.constprop.0+0x29fa>
 800ed34:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ed38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed3c:	bf18      	it	ne
 800ed3e:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800ed42:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ed46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4a:	edd9 ca04 	vldr	s25, [r9, #16]
 800ed4e:	d006      	beq.n	800ed5e <kalman_3gyro.constprop.0+0x2a16>
 800ed50:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ed54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed58:	bf18      	it	ne
 800ed5a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800ed5e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ed62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed66:	ed99 ca05 	vldr	s24, [r9, #20]
 800ed6a:	d006      	beq.n	800ed7a <kalman_3gyro.constprop.0+0x2a32>
 800ed6c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ed70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed74:	bf18      	it	ne
 800ed76:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800ed7a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ed7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed82:	ed99 da06 	vldr	s26, [r9, #24]
 800ed86:	d006      	beq.n	800ed96 <kalman_3gyro.constprop.0+0x2a4e>
 800ed88:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ed8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed90:	bf18      	it	ne
 800ed92:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800ed96:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ed9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9e:	ed99 aa07 	vldr	s20, [r9, #28]
 800eda2:	d006      	beq.n	800edb2 <kalman_3gyro.constprop.0+0x2a6a>
 800eda4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800eda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edac:	bf18      	it	ne
 800edae:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800edb2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800edb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edba:	ed99 ba08 	vldr	s22, [r9, #32]
 800edbe:	d006      	beq.n	800edce <kalman_3gyro.constprop.0+0x2a86>
 800edc0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800edc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc8:	bf18      	it	ne
 800edca:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800edce:	ab87      	add	r3, sp, #540	; 0x21c
 800edd0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800edd4:	ed92 7a00 	vldr	s14, [r2]
 800edd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eddc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ede0:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800ede4:	2d05      	cmp	r5, #5
 800ede6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800edea:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800edee:	ee29 9a27 	vmul.f32	s18, s18, s15
 800edf2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800edf6:	ee6b baa7 	vmul.f32	s23, s23, s15
 800edfa:	ee6c caa7 	vmul.f32	s25, s25, s15
 800edfe:	ee2c ca27 	vmul.f32	s24, s24, s15
 800ee02:	ee2d da27 	vmul.f32	s26, s26, s15
 800ee06:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ee0a:	ee2b ba27 	vmul.f32	s22, s22, s15
 800ee0e:	edc9 8a00 	vstr	s17, [r9]
 800ee12:	ed89 9a01 	vstr	s18, [r9, #4]
 800ee16:	edc9 aa02 	vstr	s21, [r9, #8]
 800ee1a:	edc9 ba03 	vstr	s23, [r9, #12]
 800ee1e:	edc9 ca04 	vstr	s25, [r9, #16]
 800ee22:	ed89 ca05 	vstr	s24, [r9, #20]
 800ee26:	ed89 da06 	vstr	s26, [r9, #24]
 800ee2a:	ed89 aa07 	vstr	s20, [r9, #28]
 800ee2e:	ed89 ba08 	vstr	s22, [r9, #32]
 800ee32:	f340 8497 	ble.w	800f764 <kalman_3gyro.constprop.0+0x341c>
 800ee36:	eef5 da40 	vcmp.f32	s27, #0.0
 800ee3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3e:	f000 8510 	beq.w	800f862 <kalman_3gyro.constprop.0+0x351a>
 800ee42:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800ee46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ee4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4e:	d001      	beq.n	800ee54 <kalman_3gyro.constprop.0+0x2b0c>
 800ee50:	ee67 7aad 	vmul.f32	s15, s15, s27
 800ee54:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ee58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5c:	d008      	beq.n	800ee70 <kalman_3gyro.constprop.0+0x2b28>
 800ee5e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800ee62:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6a:	bf18      	it	ne
 800ee6c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800ee70:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ee74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee78:	d008      	beq.n	800ee8c <kalman_3gyro.constprop.0+0x2b44>
 800ee7a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800ee7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee86:	bf18      	it	ne
 800ee88:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800ee8c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ee90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee94:	d008      	beq.n	800eea8 <kalman_3gyro.constprop.0+0x2b60>
 800ee96:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800ee9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea2:	bf18      	it	ne
 800eea4:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800eea8:	eef5 fa40 	vcmp.f32	s31, #0.0
 800eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb0:	d008      	beq.n	800eec4 <kalman_3gyro.constprop.0+0x2b7c>
 800eeb2:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800eeb6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eebe:	bf18      	it	ne
 800eec0:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800eec4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800eec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eecc:	d008      	beq.n	800eee0 <kalman_3gyro.constprop.0+0x2b98>
 800eece:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800eed2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeda:	bf18      	it	ne
 800eedc:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800eee0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800eee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee8:	d008      	beq.n	800eefc <kalman_3gyro.constprop.0+0x2bb4>
 800eeea:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800eeee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef6:	bf18      	it	ne
 800eef8:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800eefc:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ef00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef04:	d008      	beq.n	800ef18 <kalman_3gyro.constprop.0+0x2bd0>
 800ef06:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800ef0a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef12:	bf18      	it	ne
 800ef14:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800ef18:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ef1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef20:	d008      	beq.n	800ef34 <kalman_3gyro.constprop.0+0x2bec>
 800ef22:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800ef26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2e:	bf18      	it	ne
 800ef30:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800ef34:	aa7b      	add	r2, sp, #492	; 0x1ec
 800ef36:	4413      	add	r3, r2
 800ef38:	edd3 9a00 	vldr	s19, [r3]
 800ef3c:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800ef40:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ef44:	2100      	movs	r1, #0
 800ef46:	4650      	mov	r0, sl
 800ef48:	ed8d 5a05 	vstr	s10, [sp, #20]
 800ef4c:	edcd 5a04 	vstr	s11, [sp, #16]
 800ef50:	ed8d 6a03 	vstr	s12, [sp, #12]
 800ef54:	edcd 6a02 	vstr	s13, [sp, #8]
 800ef58:	f007 ff76 	bl	8016e48 <memset>
 800ef5c:	ed9d 5a05 	vldr	s10, [sp, #20]
 800ef60:	eddd 5a04 	vldr	s11, [sp, #16]
 800ef64:	ed9d 6a03 	vldr	s12, [sp, #12]
 800ef68:	eddd 6a02 	vldr	s13, [sp, #8]
 800ef6c:	4651      	mov	r1, sl
 800ef6e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800ef72:	4653      	mov	r3, sl
 800ef74:	ecf6 7a01 	vldmia	r6!, {s15}
 800ef78:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ef7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef80:	d062      	beq.n	800f048 <kalman_3gyro.constprop.0+0x2d00>
 800ef82:	eef5 da40 	vcmp.f32	s27, #0.0
 800ef86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8a:	d005      	beq.n	800ef98 <kalman_3gyro.constprop.0+0x2c50>
 800ef8c:	ed93 7a00 	vldr	s14, [r3]
 800ef90:	eead 7aa7 	vfma.f32	s14, s27, s15
 800ef94:	ed83 7a00 	vstr	s14, [r3]
 800ef98:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800ef9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa0:	d005      	beq.n	800efae <kalman_3gyro.constprop.0+0x2c66>
 800efa2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800efa6:	eeae 7a27 	vfma.f32	s14, s28, s15
 800efaa:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800efae:	eef5 ea40 	vcmp.f32	s29, #0.0
 800efb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efb6:	d005      	beq.n	800efc4 <kalman_3gyro.constprop.0+0x2c7c>
 800efb8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800efbc:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800efc0:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800efc4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800efc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efcc:	d005      	beq.n	800efda <kalman_3gyro.constprop.0+0x2c92>
 800efce:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800efd2:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800efd6:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800efda:	eef5 fa40 	vcmp.f32	s31, #0.0
 800efde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe2:	d005      	beq.n	800eff0 <kalman_3gyro.constprop.0+0x2ca8>
 800efe4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800efe8:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800efec:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800eff0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800eff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff8:	d005      	beq.n	800f006 <kalman_3gyro.constprop.0+0x2cbe>
 800effa:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800effe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f002:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f006:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00e:	d005      	beq.n	800f01c <kalman_3gyro.constprop.0+0x2cd4>
 800f010:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f014:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f018:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f01c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f024:	d005      	beq.n	800f032 <kalman_3gyro.constprop.0+0x2cea>
 800f026:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f02a:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f02e:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f032:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03a:	d005      	beq.n	800f048 <kalman_3gyro.constprop.0+0x2d00>
 800f03c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f040:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f044:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f048:	4296      	cmp	r6, r2
 800f04a:	f103 0304 	add.w	r3, r3, #4
 800f04e:	d191      	bne.n	800ef74 <kalman_3gyro.constprop.0+0x2c2c>
 800f050:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f054:	4656      	mov	r6, sl
 800f056:	463b      	mov	r3, r7
 800f058:	2208      	movs	r2, #8
 800f05a:	2000      	movs	r0, #0
 800f05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f060:	e074      	b.n	800f14c <kalman_3gyro.constprop.0+0x2e04>
 800f062:	edd6 7a00 	vldr	s15, [r6]
 800f066:	ed83 8a01 	vstr	s16, [r3, #4]
 800f06a:	eef1 7a67 	vneg.f32	s15, s15
 800f06e:	2801      	cmp	r0, #1
 800f070:	edc6 7a00 	vstr	s15, [r6]
 800f074:	f1a2 0c07 	sub.w	ip, r2, #7
 800f078:	f000 831e 	beq.w	800f6b8 <kalman_3gyro.constprop.0+0x3370>
 800f07c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f080:	eddc 7a00 	vldr	s15, [ip]
 800f084:	ed83 8a02 	vstr	s16, [r3, #8]
 800f088:	eef1 7a67 	vneg.f32	s15, s15
 800f08c:	2802      	cmp	r0, #2
 800f08e:	edcc 7a00 	vstr	s15, [ip]
 800f092:	f1a2 0c06 	sub.w	ip, r2, #6
 800f096:	f000 82f8 	beq.w	800f68a <kalman_3gyro.constprop.0+0x3342>
 800f09a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f09e:	eddc 7a00 	vldr	s15, [ip]
 800f0a2:	ed83 8a03 	vstr	s16, [r3, #12]
 800f0a6:	eef1 7a67 	vneg.f32	s15, s15
 800f0aa:	2803      	cmp	r0, #3
 800f0ac:	edcc 7a00 	vstr	s15, [ip]
 800f0b0:	f1a2 0c05 	sub.w	ip, r2, #5
 800f0b4:	d170      	bne.n	800f198 <kalman_3gyro.constprop.0+0x2e50>
 800f0b6:	edd6 7a03 	vldr	s15, [r6, #12]
 800f0ba:	ed83 8a04 	vstr	s16, [r3, #16]
 800f0be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0c2:	f1a2 0e04 	sub.w	lr, r2, #4
 800f0c6:	edc6 7a03 	vstr	s15, [r6, #12]
 800f0ca:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f0ce:	edde 7a00 	vldr	s15, [lr]
 800f0d2:	ed83 8a05 	vstr	s16, [r3, #20]
 800f0d6:	eef1 7a67 	vneg.f32	s15, s15
 800f0da:	f1a2 0c03 	sub.w	ip, r2, #3
 800f0de:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f0e2:	edce 7a00 	vstr	s15, [lr]
 800f0e6:	eddc 7a00 	vldr	s15, [ip]
 800f0ea:	ed83 8a06 	vstr	s16, [r3, #24]
 800f0ee:	eef1 7a67 	vneg.f32	s15, s15
 800f0f2:	edcc 7a00 	vstr	s15, [ip]
 800f0f6:	f1a2 0c02 	sub.w	ip, r2, #2
 800f0fa:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f0fe:	eddc 7a00 	vldr	s15, [ip]
 800f102:	ed83 8a07 	vstr	s16, [r3, #28]
 800f106:	eef1 7a67 	vneg.f32	s15, s15
 800f10a:	2807      	cmp	r0, #7
 800f10c:	edcc 7a00 	vstr	s15, [ip]
 800f110:	f102 3cff 	add.w	ip, r2, #4294967295
 800f114:	f040 80a2 	bne.w	800f25c <kalman_3gyro.constprop.0+0x2f14>
 800f118:	edd6 7a07 	vldr	s15, [r6, #28]
 800f11c:	ed83 8a08 	vstr	s16, [r3, #32]
 800f120:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f124:	edc6 7a07 	vstr	s15, [r6, #28]
 800f128:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f12c:	eddc 7a00 	vldr	s15, [ip]
 800f130:	3001      	adds	r0, #1
 800f132:	eef1 7a67 	vneg.f32	s15, s15
 800f136:	2809      	cmp	r0, #9
 800f138:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f13c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f140:	f102 0209 	add.w	r2, r2, #9
 800f144:	edcc 7a00 	vstr	s15, [ip]
 800f148:	f000 809f 	beq.w	800f28a <kalman_3gyro.constprop.0+0x2f42>
 800f14c:	ed83 8a00 	vstr	s16, [r3]
 800f150:	2800      	cmp	r0, #0
 800f152:	d186      	bne.n	800f062 <kalman_3gyro.constprop.0+0x2d1a>
 800f154:	edda 7a00 	vldr	s15, [sl]
 800f158:	ed83 8a01 	vstr	s16, [r3, #4]
 800f15c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f160:	f1a2 0e07 	sub.w	lr, r2, #7
 800f164:	edc6 7a00 	vstr	s15, [r6]
 800f168:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f16c:	edde 7a00 	vldr	s15, [lr]
 800f170:	ed83 8a02 	vstr	s16, [r3, #8]
 800f174:	eef1 7a67 	vneg.f32	s15, s15
 800f178:	f1a2 0c06 	sub.w	ip, r2, #6
 800f17c:	edce 7a00 	vstr	s15, [lr]
 800f180:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f184:	eddc 7a00 	vldr	s15, [ip]
 800f188:	ed83 8a03 	vstr	s16, [r3, #12]
 800f18c:	eef1 7a67 	vneg.f32	s15, s15
 800f190:	edcc 7a00 	vstr	s15, [ip]
 800f194:	f1a2 0c05 	sub.w	ip, r2, #5
 800f198:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f19c:	eddc 7a00 	vldr	s15, [ip]
 800f1a0:	ed83 8a04 	vstr	s16, [r3, #16]
 800f1a4:	eef1 7a67 	vneg.f32	s15, s15
 800f1a8:	2804      	cmp	r0, #4
 800f1aa:	edcc 7a00 	vstr	s15, [ip]
 800f1ae:	f1a2 0c04 	sub.w	ip, r2, #4
 800f1b2:	d031      	beq.n	800f218 <kalman_3gyro.constprop.0+0x2ed0>
 800f1b4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f1b8:	eddc 7a00 	vldr	s15, [ip]
 800f1bc:	ed83 8a05 	vstr	s16, [r3, #20]
 800f1c0:	eef1 7a67 	vneg.f32	s15, s15
 800f1c4:	2805      	cmp	r0, #5
 800f1c6:	edcc 7a00 	vstr	s15, [ip]
 800f1ca:	f1a2 0c03 	sub.w	ip, r2, #3
 800f1ce:	f000 8245 	beq.w	800f65c <kalman_3gyro.constprop.0+0x3314>
 800f1d2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f1d6:	eddc 7a00 	vldr	s15, [ip]
 800f1da:	ed83 8a06 	vstr	s16, [r3, #24]
 800f1de:	eef1 7a67 	vneg.f32	s15, s15
 800f1e2:	2806      	cmp	r0, #6
 800f1e4:	edcc 7a00 	vstr	s15, [ip]
 800f1e8:	f1a2 0c02 	sub.w	ip, r2, #2
 800f1ec:	d185      	bne.n	800f0fa <kalman_3gyro.constprop.0+0x2db2>
 800f1ee:	edd6 7a06 	vldr	s15, [r6, #24]
 800f1f2:	ed83 8a07 	vstr	s16, [r3, #28]
 800f1f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1fa:	f102 3cff 	add.w	ip, r2, #4294967295
 800f1fe:	edc6 7a06 	vstr	s15, [r6, #24]
 800f202:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f206:	eddc 7a00 	vldr	s15, [ip]
 800f20a:	ed83 8a08 	vstr	s16, [r3, #32]
 800f20e:	eef1 7a67 	vneg.f32	s15, s15
 800f212:	edcc 7a00 	vstr	s15, [ip]
 800f216:	e787      	b.n	800f128 <kalman_3gyro.constprop.0+0x2de0>
 800f218:	edd6 7a04 	vldr	s15, [r6, #16]
 800f21c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f224:	f1a2 0e03 	sub.w	lr, r2, #3
 800f228:	edc6 7a04 	vstr	s15, [r6, #16]
 800f22c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f230:	edde 7a00 	vldr	s15, [lr]
 800f234:	ed83 8a06 	vstr	s16, [r3, #24]
 800f238:	eef1 7a67 	vneg.f32	s15, s15
 800f23c:	f1a2 0c02 	sub.w	ip, r2, #2
 800f240:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f244:	edce 7a00 	vstr	s15, [lr]
 800f248:	eddc 7a00 	vldr	s15, [ip]
 800f24c:	ed83 8a07 	vstr	s16, [r3, #28]
 800f250:	eef1 7a67 	vneg.f32	s15, s15
 800f254:	edcc 7a00 	vstr	s15, [ip]
 800f258:	f102 3cff 	add.w	ip, r2, #4294967295
 800f25c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f260:	eddc 7a00 	vldr	s15, [ip]
 800f264:	ed83 8a08 	vstr	s16, [r3, #32]
 800f268:	eef1 7a67 	vneg.f32	s15, s15
 800f26c:	2808      	cmp	r0, #8
 800f26e:	edcc 7a00 	vstr	s15, [ip]
 800f272:	f47f af59 	bne.w	800f128 <kalman_3gyro.constprop.0+0x2de0>
 800f276:	ed96 7a08 	vldr	s14, [r6, #32]
 800f27a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f27e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f282:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f286:	edc2 7a00 	vstr	s15, [r2]
 800f28a:	2000      	movs	r0, #0
 800f28c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800f290:	ecb1 3a01 	vldmia	r1!, {s6}
 800f294:	edd1 3a08 	vldr	s7, [r1, #32]
 800f298:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800f29c:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800f2a0:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800f2a4:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800f2a8:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800f2ac:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800f2b0:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800f2b4:	465a      	mov	r2, fp
 800f2b6:	463b      	mov	r3, r7
 800f2b8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c0:	d00c      	beq.n	800f2dc <kalman_3gyro.constprop.0+0x2f94>
 800f2c2:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800f2c6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ce:	d005      	beq.n	800f2dc <kalman_3gyro.constprop.0+0x2f94>
 800f2d0:	edd3 7a00 	vldr	s15, [r3]
 800f2d4:	eee3 7a22 	vfma.f32	s15, s6, s5
 800f2d8:	edc3 7a00 	vstr	s15, [r3]
 800f2dc:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e4:	d00c      	beq.n	800f300 <kalman_3gyro.constprop.0+0x2fb8>
 800f2e6:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800f2ea:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2f2:	d005      	beq.n	800f300 <kalman_3gyro.constprop.0+0x2fb8>
 800f2f4:	edd3 7a00 	vldr	s15, [r3]
 800f2f8:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800f2fc:	edc3 7a00 	vstr	s15, [r3]
 800f300:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f308:	d00c      	beq.n	800f324 <kalman_3gyro.constprop.0+0x2fdc>
 800f30a:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800f30e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f316:	d005      	beq.n	800f324 <kalman_3gyro.constprop.0+0x2fdc>
 800f318:	edd3 7a00 	vldr	s15, [r3]
 800f31c:	eee4 7a22 	vfma.f32	s15, s8, s5
 800f320:	edc3 7a00 	vstr	s15, [r3]
 800f324:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32c:	d00c      	beq.n	800f348 <kalman_3gyro.constprop.0+0x3000>
 800f32e:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800f332:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33a:	d005      	beq.n	800f348 <kalman_3gyro.constprop.0+0x3000>
 800f33c:	edd3 7a00 	vldr	s15, [r3]
 800f340:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f344:	edc3 7a00 	vstr	s15, [r3]
 800f348:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f350:	d00c      	beq.n	800f36c <kalman_3gyro.constprop.0+0x3024>
 800f352:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800f356:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	d005      	beq.n	800f36c <kalman_3gyro.constprop.0+0x3024>
 800f360:	edd3 7a00 	vldr	s15, [r3]
 800f364:	eee5 7a22 	vfma.f32	s15, s10, s5
 800f368:	edc3 7a00 	vstr	s15, [r3]
 800f36c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f374:	d00c      	beq.n	800f390 <kalman_3gyro.constprop.0+0x3048>
 800f376:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800f37a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f382:	d005      	beq.n	800f390 <kalman_3gyro.constprop.0+0x3048>
 800f384:	edd3 7a00 	vldr	s15, [r3]
 800f388:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800f38c:	edc3 7a00 	vstr	s15, [r3]
 800f390:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f398:	d00c      	beq.n	800f3b4 <kalman_3gyro.constprop.0+0x306c>
 800f39a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800f39e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a6:	d005      	beq.n	800f3b4 <kalman_3gyro.constprop.0+0x306c>
 800f3a8:	edd3 7a00 	vldr	s15, [r3]
 800f3ac:	eee6 7a22 	vfma.f32	s15, s12, s5
 800f3b0:	edc3 7a00 	vstr	s15, [r3]
 800f3b4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3bc:	d00c      	beq.n	800f3d8 <kalman_3gyro.constprop.0+0x3090>
 800f3be:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800f3c2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ca:	d005      	beq.n	800f3d8 <kalman_3gyro.constprop.0+0x3090>
 800f3cc:	edd3 7a00 	vldr	s15, [r3]
 800f3d0:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800f3d4:	edc3 7a00 	vstr	s15, [r3]
 800f3d8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e0:	d00c      	beq.n	800f3fc <kalman_3gyro.constprop.0+0x30b4>
 800f3e2:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800f3e6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ee:	d005      	beq.n	800f3fc <kalman_3gyro.constprop.0+0x30b4>
 800f3f0:	edd3 7a00 	vldr	s15, [r3]
 800f3f4:	eee7 7a22 	vfma.f32	s15, s14, s5
 800f3f8:	edc3 7a00 	vstr	s15, [r3]
 800f3fc:	3224      	adds	r2, #36	; 0x24
 800f3fe:	4296      	cmp	r6, r2
 800f400:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f404:	f47f af58 	bne.w	800f2b8 <kalman_3gyro.constprop.0+0x2f70>
 800f408:	3001      	adds	r0, #1
 800f40a:	2809      	cmp	r0, #9
 800f40c:	f107 0704 	add.w	r7, r7, #4
 800f410:	f47f af3e 	bne.w	800f290 <kalman_3gyro.constprop.0+0x2f48>
 800f414:	9801      	ldr	r0, [sp, #4]
 800f416:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f41a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800f41e:	f007 fd05 	bl	8016e2c <memcpy>
 800f422:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42a:	f000 817c 	beq.w	800f726 <kalman_3gyro.constprop.0+0x33de>
 800f42e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f436:	f000 8176 	beq.w	800f726 <kalman_3gyro.constprop.0+0x33de>
 800f43a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f446:	f040 8212 	bne.w	800f86e <kalman_3gyro.constprop.0+0x3526>
 800f44a:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f452:	f000 8177 	beq.w	800f744 <kalman_3gyro.constprop.0+0x33fc>
 800f456:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f462:	f040 81cb 	bne.w	800f7fc <kalman_3gyro.constprop.0+0x34b4>
 800f466:	eef0 ba47 	vmov.f32	s23, s14
 800f46a:	eef0 aa49 	vmov.f32	s21, s18
 800f46e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f476:	f000 8138 	beq.w	800f6ea <kalman_3gyro.constprop.0+0x33a2>
 800f47a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f482:	f000 824e 	beq.w	800f922 <kalman_3gyro.constprop.0+0x35da>
 800f486:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800f492:	eef0 7a48 	vmov.f32	s15, s16
 800f496:	f040 81c5 	bne.w	800f824 <kalman_3gyro.constprop.0+0x34dc>
 800f49a:	eeb0 ca47 	vmov.f32	s24, s14
 800f49e:	eef0 ca67 	vmov.f32	s25, s15
 800f4a2:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4aa:	f000 8179 	beq.w	800f7a0 <kalman_3gyro.constprop.0+0x3458>
 800f4ae:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b6:	f000 8125 	beq.w	800f704 <kalman_3gyro.constprop.0+0x33bc>
 800f4ba:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c2:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800f4c6:	eef0 7a48 	vmov.f32	s15, s16
 800f4ca:	f040 81be 	bne.w	800f84a <kalman_3gyro.constprop.0+0x3502>
 800f4ce:	eeb0 aa47 	vmov.f32	s20, s14
 800f4d2:	eeb0 da67 	vmov.f32	s26, s15
 800f4d6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4de:	f000 811f 	beq.w	800f720 <kalman_3gyro.constprop.0+0x33d8>
 800f4e2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ea:	f000 821d 	beq.w	800f928 <kalman_3gyro.constprop.0+0x35e0>
 800f4ee:	eef0 7a48 	vmov.f32	s15, s16
 800f4f2:	ee2b ba29 	vmul.f32	s22, s22, s19
 800f4f6:	eef0 9a67 	vmov.f32	s19, s15
 800f4fa:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800f4fe:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800f502:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800f506:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800f50a:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800f50e:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800f512:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800f516:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f51a:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800f51e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800f522:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800f526:	ee74 baab 	vadd.f32	s23, s9, s23
 800f52a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800f52e:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800f532:	ee36 da0d 	vadd.f32	s26, s12, s26
 800f536:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800f53a:	ee77 9a29 	vadd.f32	s19, s14, s19
 800f53e:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800f542:	3501      	adds	r5, #1
 800f544:	2d0c      	cmp	r5, #12
 800f546:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800f54a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800f54e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800f552:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800f556:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800f55a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800f55e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800f562:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800f566:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800f56a:	f104 0404 	add.w	r4, r4, #4
 800f56e:	f47f ab02 	bne.w	800eb76 <kalman_3gyro.constprop.0+0x282e>
 800f572:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800f576:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800f57a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f57e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800f582:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f586:	eee6 7a06 	vfma.f32	s15, s12, s12
 800f58a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f58e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f596:	f100 81b5 	bmi.w	800f904 <kalman_3gyro.constprop.0+0x35bc>
 800f59a:	eef1 4ae7 	vsqrt.f32	s9, s15
 800f59e:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 800f930 <kalman_3gyro.constprop.0+0x35e8>
 800f5a2:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800f5a6:	ee67 4a86 	vmul.f32	s9, s15, s12
 800f5aa:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800f5ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5b2:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800f5b6:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800f5ba:	aa36      	add	r2, sp, #216	; 0xd8
 800f5bc:	edc3 4a00 	vstr	s9, [r3]
 800f5c0:	edc3 5a01 	vstr	s11, [r3, #4]
 800f5c4:	edc3 7a02 	vstr	s15, [r3, #8]
 800f5c8:	ed83 5a03 	vstr	s10, [r3, #12]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800f5d4:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800f5d8:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800f5dc:	f7fb fdbc 	bl	800b158 <qmult>
 800f5e0:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800f5e4:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800f5e8:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800f5ec:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800f5f0:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800f5f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f5f6:	ee66 7a06 	vmul.f32	s15, s12, s12
 800f5fa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f5fe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f602:	ae54      	add	r6, sp, #336	; 0x150
 800f604:	af5c      	add	r7, sp, #368	; 0x170
 800f606:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800f60a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f60e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800f612:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800f616:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f61a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f61e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f622:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f626:	edc3 5a00 	vstr	s11, [r3]
 800f62a:	ed83 6a01 	vstr	s12, [r3, #4]
 800f62e:	edc3 6a02 	vstr	s13, [r3, #8]
 800f632:	ed83 7a03 	vstr	s14, [r3, #12]
 800f636:	4634      	mov	r4, r6
 800f638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f63a:	42bc      	cmp	r4, r7
 800f63c:	6028      	str	r0, [r5, #0]
 800f63e:	6069      	str	r1, [r5, #4]
 800f640:	60aa      	str	r2, [r5, #8]
 800f642:	60eb      	str	r3, [r5, #12]
 800f644:	4626      	mov	r6, r4
 800f646:	f105 0510 	add.w	r5, r5, #16
 800f64a:	d1f4      	bne.n	800f636 <kalman_3gyro.constprop.0+0x32ee>
 800f64c:	6820      	ldr	r0, [r4, #0]
 800f64e:	6028      	str	r0, [r5, #0]
 800f650:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800f654:	ecbd 8b10 	vpop	{d8-d15}
 800f658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f65c:	edd6 7a05 	vldr	s15, [r6, #20]
 800f660:	ed83 8a06 	vstr	s16, [r3, #24]
 800f664:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f668:	f1a2 0e02 	sub.w	lr, r2, #2
 800f66c:	edc6 7a05 	vstr	s15, [r6, #20]
 800f670:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f674:	edde 7a00 	vldr	s15, [lr]
 800f678:	ed83 8a07 	vstr	s16, [r3, #28]
 800f67c:	eef1 7a67 	vneg.f32	s15, s15
 800f680:	f102 3cff 	add.w	ip, r2, #4294967295
 800f684:	edce 7a00 	vstr	s15, [lr]
 800f688:	e5bb      	b.n	800f202 <kalman_3gyro.constprop.0+0x2eba>
 800f68a:	edd6 7a02 	vldr	s15, [r6, #8]
 800f68e:	ed83 8a03 	vstr	s16, [r3, #12]
 800f692:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f696:	f1a2 0c05 	sub.w	ip, r2, #5
 800f69a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f69e:	edc6 7a02 	vstr	s15, [r6, #8]
 800f6a2:	eddc 7a00 	vldr	s15, [ip]
 800f6a6:	ed83 8a04 	vstr	s16, [r3, #16]
 800f6aa:	eef1 7a67 	vneg.f32	s15, s15
 800f6ae:	edcc 7a00 	vstr	s15, [ip]
 800f6b2:	f1a2 0c04 	sub.w	ip, r2, #4
 800f6b6:	e57d      	b.n	800f1b4 <kalman_3gyro.constprop.0+0x2e6c>
 800f6b8:	edd6 7a01 	vldr	s15, [r6, #4]
 800f6bc:	ed83 8a02 	vstr	s16, [r3, #8]
 800f6c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6c4:	f1a2 0c06 	sub.w	ip, r2, #6
 800f6c8:	edc6 7a01 	vstr	s15, [r6, #4]
 800f6cc:	e558      	b.n	800f180 <kalman_3gyro.constprop.0+0x2e38>
 800f6ce:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d6:	ee69 7aab 	vmul.f32	s15, s19, s23
 800f6da:	eeb0 7a48 	vmov.f32	s14, s16
 800f6de:	f040 8097 	bne.w	800f810 <kalman_3gyro.constprop.0+0x34c8>
 800f6e2:	eef0 ca67 	vmov.f32	s25, s15
 800f6e6:	eef0 ba47 	vmov.f32	s23, s14
 800f6ea:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6f2:	f43f aed6 	beq.w	800f4a2 <kalman_3gyro.constprop.0+0x315a>
 800f6f6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fe:	d142      	bne.n	800f786 <kalman_3gyro.constprop.0+0x343e>
 800f700:	eeb0 ca69 	vmov.f32	s24, s19
 800f704:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70c:	f040 80ba 	bne.w	800f884 <kalman_3gyro.constprop.0+0x353c>
 800f710:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f718:	eeb0 da4a 	vmov.f32	s26, s20
 800f71c:	f47f aee1 	bne.w	800f4e2 <kalman_3gyro.constprop.0+0x319a>
 800f720:	eef0 9a4b 	vmov.f32	s19, s22
 800f724:	e6e9      	b.n	800f4fa <kalman_3gyro.constprop.0+0x31b2>
 800f726:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f72e:	d051      	beq.n	800f7d4 <kalman_3gyro.constprop.0+0x348c>
 800f730:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f738:	f040 8097 	bne.w	800f86a <kalman_3gyro.constprop.0+0x3522>
 800f73c:	eef0 aa69 	vmov.f32	s21, s19
 800f740:	eef0 8a69 	vmov.f32	s17, s19
 800f744:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	f43f ae8f 	beq.w	800f46e <kalman_3gyro.constprop.0+0x3126>
 800f750:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f758:	d1b9      	bne.n	800f6ce <kalman_3gyro.constprop.0+0x3386>
 800f75a:	eef0 ca69 	vmov.f32	s25, s19
 800f75e:	eef0 ba69 	vmov.f32	s23, s19
 800f762:	e7c2      	b.n	800f6ea <kalman_3gyro.constprop.0+0x33a2>
 800f764:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f766:	4413      	add	r3, r2
 800f768:	edd3 9a00 	vldr	s19, [r3]
 800f76c:	f7ff bbe8 	b.w	800ef40 <kalman_3gyro.constprop.0+0x2bf8>
 800f770:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f778:	bf14      	ite	ne
 800f77a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800f77e:	eef0 7a68 	vmoveq.f32	s15, s17
 800f782:	f7ff bab4 	b.w	800ecee <kalman_3gyro.constprop.0+0x29a6>
 800f786:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800f792:	eeb0 7a48 	vmov.f32	s14, s16
 800f796:	d14e      	bne.n	800f836 <kalman_3gyro.constprop.0+0x34ee>
 800f798:	eeb0 da67 	vmov.f32	s26, s15
 800f79c:	eeb0 ca47 	vmov.f32	s24, s14
 800f7a0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a8:	f43f ae95 	beq.w	800f4d6 <kalman_3gyro.constprop.0+0x318e>
 800f7ac:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b4:	f000 84bd 	beq.w	8010132 <kalman_3gyro.constprop.0+0x3dea>
 800f7b8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c0:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800f7c4:	eeb0 7a48 	vmov.f32	s14, s16
 800f7c8:	d148      	bne.n	800f85c <kalman_3gyro.constprop.0+0x3514>
 800f7ca:	eef0 9a67 	vmov.f32	s19, s15
 800f7ce:	eeb0 aa47 	vmov.f32	s20, s14
 800f7d2:	e692      	b.n	800f4fa <kalman_3gyro.constprop.0+0x31b2>
 800f7d4:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7dc:	d05b      	beq.n	800f896 <kalman_3gyro.constprop.0+0x354e>
 800f7de:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7e6:	d0a9      	beq.n	800f73c <kalman_3gyro.constprop.0+0x33f4>
 800f7e8:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f0:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f7f4:	eef0 8a49 	vmov.f32	s17, s18
 800f7f8:	f43f ae35 	beq.w	800f466 <kalman_3gyro.constprop.0+0x311e>
 800f7fc:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f804:	ee69 7aab 	vmul.f32	s15, s19, s23
 800f808:	eef0 aa49 	vmov.f32	s21, s18
 800f80c:	f43f af69 	beq.w	800f6e2 <kalman_3gyro.constprop.0+0x339a>
 800f810:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f818:	eef0 ba47 	vmov.f32	s23, s14
 800f81c:	ee29 7aac 	vmul.f32	s14, s19, s25
 800f820:	f43f ae3b 	beq.w	800f49a <kalman_3gyro.constprop.0+0x3152>
 800f824:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f82c:	eef0 ca67 	vmov.f32	s25, s15
 800f830:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800f834:	d0b0      	beq.n	800f798 <kalman_3gyro.constprop.0+0x3450>
 800f836:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83e:	eeb0 ca47 	vmov.f32	s24, s14
 800f842:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800f846:	f43f ae42 	beq.w	800f4ce <kalman_3gyro.constprop.0+0x3186>
 800f84a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f852:	eeb0 da67 	vmov.f32	s26, s15
 800f856:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800f85a:	d0b6      	beq.n	800f7ca <kalman_3gyro.constprop.0+0x3482>
 800f85c:	eeb0 aa47 	vmov.f32	s20, s14
 800f860:	e647      	b.n	800f4f2 <kalman_3gyro.constprop.0+0x31aa>
 800f862:	eef0 7a6d 	vmov.f32	s15, s27
 800f866:	f7ff baf5 	b.w	800ee54 <kalman_3gyro.constprop.0+0x2b0c>
 800f86a:	eef0 8a48 	vmov.f32	s17, s16
 800f86e:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f876:	ee29 9a29 	vmul.f32	s18, s18, s19
 800f87a:	f47f adec 	bne.w	800f456 <kalman_3gyro.constprop.0+0x310e>
 800f87e:	eef0 aa49 	vmov.f32	s21, s18
 800f882:	e75f      	b.n	800f744 <kalman_3gyro.constprop.0+0x33fc>
 800f884:	ed9f ba2a 	vldr	s22, [pc, #168]	; 800f930 <kalman_3gyro.constprop.0+0x35e8>
 800f888:	eef0 9a48 	vmov.f32	s19, s16
 800f88c:	eeb0 aa48 	vmov.f32	s20, s16
 800f890:	eeb0 da48 	vmov.f32	s26, s16
 800f894:	e631      	b.n	800f4fa <kalman_3gyro.constprop.0+0x31b2>
 800f896:	eef0 8a6a 	vmov.f32	s17, s21
 800f89a:	e753      	b.n	800f744 <kalman_3gyro.constprop.0+0x33fc>
 800f89c:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 800f8a0:	2a31      	cmp	r2, #49	; 0x31
 800f8a2:	f63f a8a3 	bhi.w	800e9ec <kalman_3gyro.constprop.0+0x26a4>
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	3201      	adds	r2, #1
 800f8aa:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f8ae:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800f8b2:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800f8b6:	f7ff b899 	b.w	800e9ec <kalman_3gyro.constprop.0+0x26a4>
 800f8ba:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f340 8423 	ble.w	801010a <kalman_3gyro.constprop.0+0x3dc2>
 800f8c4:	3b01      	subs	r3, #1
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800f8cc:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 800f8d0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800f8d4:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 800f8d8:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 800f8dc:	f7fe bca9 	b.w	800e232 <kalman_3gyro.constprop.0+0x1eea>
 800f8e0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800f8e4:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800f8e8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800f8ec:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800f8f0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800f8f4:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800f8f8:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800f8fc:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800f900:	f7fe bc18 	b.w	800e134 <kalman_3gyro.constprop.0+0x1dec>
 800f904:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800f908:	eef0 4a46 	vmov.f32	s9, s12
 800f90c:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800f910:	eef0 7a47 	vmov.f32	s15, s14
 800f914:	eef0 5a66 	vmov.f32	s11, s13
 800f918:	e64b      	b.n	800f5b2 <kalman_3gyro.constprop.0+0x326a>
 800f91a:	eeb1 7a47 	vneg.f32	s14, s14
 800f91e:	f7fd bc66 	b.w	800d1ee <kalman_3gyro.constprop.0+0xea6>
 800f922:	eef0 ca69 	vmov.f32	s25, s19
 800f926:	e6e0      	b.n	800f6ea <kalman_3gyro.constprop.0+0x33a2>
 800f928:	eeb0 ba69 	vmov.f32	s22, s19
 800f92c:	e5e5      	b.n	800f4fa <kalman_3gyro.constprop.0+0x31b2>
 800f92e:	bf00      	nop
 800f930:	00000000 	.word	0x00000000
 800f934:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800f938:	49dc      	ldr	r1, [pc, #880]	; (800fcac <kalman_3gyro.constprop.0+0x3964>)
 800f93a:	4bdd      	ldr	r3, [pc, #884]	; (800fcb0 <kalman_3gyro.constprop.0+0x3968>)
 800f93c:	4add      	ldr	r2, [pc, #884]	; (800fcb4 <kalman_3gyro.constprop.0+0x396c>)
 800f93e:	2000      	movs	r0, #0
 800f940:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 800f944:	6029      	str	r1, [r5, #0]
 800f946:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 800f94a:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 800f94e:	6002      	str	r2, [r0, #0]
 800f950:	600b      	str	r3, [r1, #0]
 800f952:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 800f956:	9004      	str	r0, [sp, #16]
 800f958:	9110      	str	r1, [sp, #64]	; 0x40
 800f95a:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f000 80b4 	beq.w	800facc <kalman_3gyro.constprop.0+0x3784>
 800f964:	240c      	movs	r4, #12
 800f966:	eddf bad4 	vldr	s23, [pc, #848]	; 800fcb8 <kalman_3gyro.constprop.0+0x3970>
 800f96a:	ed9f bad4 	vldr	s22, [pc, #848]	; 800fcbc <kalman_3gyro.constprop.0+0x3974>
 800f96e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 800fcc0 <kalman_3gyro.constprop.0+0x3978>
 800f972:	ed9f aad4 	vldr	s20, [pc, #848]	; 800fcc4 <kalman_3gyro.constprop.0+0x397c>
 800f976:	eddf aad4 	vldr	s21, [pc, #848]	; 800fcc8 <kalman_3gyro.constprop.0+0x3980>
 800f97a:	9f08      	ldr	r7, [sp, #32]
 800f97c:	fb14 8403 	smlabb	r4, r4, r3, r8
 800f980:	4646      	mov	r6, r8
 800f982:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800f986:	e06b      	b.n	800fa60 <kalman_3gyro.constprop.0+0x3718>
 800f988:	eeb4 7aca 	vcmpe.f32	s14, s20
 800f98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f990:	f300 815a 	bgt.w	800fc48 <kalman_3gyro.constprop.0+0x3900>
 800f994:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f998:	ee17 0a90 	vmov	r0, s15
 800f99c:	f7f0 fd78 	bl	8000490 <__aeabi_f2d>
 800f9a0:	ec41 0b10 	vmov	d0, r0, r1
 800f9a4:	f005 fb04 	bl	8014fb0 <ceil>
 800f9a8:	ec51 0b10 	vmov	r0, r1, d0
 800f9ac:	f7f1 f878 	bl	8000aa0 <__aeabi_d2f>
 800f9b0:	ee07 0a90 	vmov	s15, r0
 800f9b4:	edc6 7a00 	vstr	s15, [r6]
 800f9b8:	ed97 7a01 	vldr	s14, [r7, #4]
 800f9bc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800f9c0:	eef0 6ae7 	vabs.f32	s13, s15
 800f9c4:	eef4 6acb 	vcmpe.f32	s13, s22
 800f9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9cc:	d51b      	bpl.n	800fa06 <kalman_3gyro.constprop.0+0x36be>
 800f9ce:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d6:	f280 8120 	bge.w	800fc1a <kalman_3gyro.constprop.0+0x38d2>
 800f9da:	eeb4 7aca 	vcmpe.f32	s14, s20
 800f9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e2:	f300 812e 	bgt.w	800fc42 <kalman_3gyro.constprop.0+0x38fa>
 800f9e6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f9ea:	ee17 0a90 	vmov	r0, s15
 800f9ee:	f7f0 fd4f 	bl	8000490 <__aeabi_f2d>
 800f9f2:	ec41 0b10 	vmov	d0, r0, r1
 800f9f6:	f005 fadb 	bl	8014fb0 <ceil>
 800f9fa:	ec51 0b10 	vmov	r0, r1, d0
 800f9fe:	f7f1 f84f 	bl	8000aa0 <__aeabi_d2f>
 800fa02:	ee07 0a90 	vmov	s15, r0
 800fa06:	edc6 7a01 	vstr	s15, [r6, #4]
 800fa0a:	ed97 7a02 	vldr	s14, [r7, #8]
 800fa0e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fa12:	eef0 6ae7 	vabs.f32	s13, s15
 800fa16:	eef4 6acb 	vcmpe.f32	s13, s22
 800fa1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1e:	d51a      	bpl.n	800fa56 <kalman_3gyro.constprop.0+0x370e>
 800fa20:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fa24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa28:	da3b      	bge.n	800faa2 <kalman_3gyro.constprop.0+0x375a>
 800fa2a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fa2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa32:	f300 8103 	bgt.w	800fc3c <kalman_3gyro.constprop.0+0x38f4>
 800fa36:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fa3a:	ee17 0a90 	vmov	r0, s15
 800fa3e:	f7f0 fd27 	bl	8000490 <__aeabi_f2d>
 800fa42:	ec41 0b10 	vmov	d0, r0, r1
 800fa46:	f005 fab3 	bl	8014fb0 <ceil>
 800fa4a:	ec51 0b10 	vmov	r0, r1, d0
 800fa4e:	f7f1 f827 	bl	8000aa0 <__aeabi_d2f>
 800fa52:	ee07 0a90 	vmov	s15, r0
 800fa56:	edc6 7a02 	vstr	s15, [r6, #8]
 800fa5a:	360c      	adds	r6, #12
 800fa5c:	42b4      	cmp	r4, r6
 800fa5e:	d035      	beq.n	800facc <kalman_3gyro.constprop.0+0x3784>
 800fa60:	ed97 7a00 	vldr	s14, [r7]
 800fa64:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fa68:	eef0 6ae7 	vabs.f32	s13, s15
 800fa6c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fa70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa74:	d59e      	bpl.n	800f9b4 <kalman_3gyro.constprop.0+0x366c>
 800fa76:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	db83      	blt.n	800f988 <kalman_3gyro.constprop.0+0x3640>
 800fa80:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fa84:	ee17 0a90 	vmov	r0, s15
 800fa88:	f7f0 fd02 	bl	8000490 <__aeabi_f2d>
 800fa8c:	ec41 0b10 	vmov	d0, r0, r1
 800fa90:	f005 fb12 	bl	80150b8 <floor>
 800fa94:	ec51 0b10 	vmov	r0, r1, d0
 800fa98:	f7f1 f802 	bl	8000aa0 <__aeabi_d2f>
 800fa9c:	ee07 0a90 	vmov	s15, r0
 800faa0:	e788      	b.n	800f9b4 <kalman_3gyro.constprop.0+0x366c>
 800faa2:	ee77 7a89 	vadd.f32	s15, s15, s18
 800faa6:	360c      	adds	r6, #12
 800faa8:	ee17 0a90 	vmov	r0, s15
 800faac:	f7f0 fcf0 	bl	8000490 <__aeabi_f2d>
 800fab0:	ec41 0b10 	vmov	d0, r0, r1
 800fab4:	f005 fb00 	bl	80150b8 <floor>
 800fab8:	ec51 0b10 	vmov	r0, r1, d0
 800fabc:	f7f0 fff0 	bl	8000aa0 <__aeabi_d2f>
 800fac0:	ee07 0a90 	vmov	s15, r0
 800fac4:	ed46 7a01 	vstr	s15, [r6, #-4]
 800fac8:	42b4      	cmp	r4, r6
 800faca:	d1c9      	bne.n	800fa60 <kalman_3gyro.constprop.0+0x3718>
 800facc:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 800fad0:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 80cf 	beq.w	800fc78 <kalman_3gyro.constprop.0+0x3930>
 800fada:	240c      	movs	r4, #12
 800fadc:	eddf ba7b 	vldr	s23, [pc, #492]	; 800fccc <kalman_3gyro.constprop.0+0x3984>
 800fae0:	ed9f ba76 	vldr	s22, [pc, #472]	; 800fcbc <kalman_3gyro.constprop.0+0x3974>
 800fae4:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 800fcd0 <kalman_3gyro.constprop.0+0x3988>
 800fae8:	ed9f aa7a 	vldr	s20, [pc, #488]	; 800fcd4 <kalman_3gyro.constprop.0+0x398c>
 800faec:	eddf aa76 	vldr	s21, [pc, #472]	; 800fcc8 <kalman_3gyro.constprop.0+0x3980>
 800faf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800faf4:	fb14 7403 	smlabb	r4, r4, r3, r7
 800faf8:	463e      	mov	r6, r7
 800fafa:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fafe:	e06b      	b.n	800fbd8 <kalman_3gyro.constprop.0+0x3890>
 800fb00:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb08:	f300 81a2 	bgt.w	800fe50 <kalman_3gyro.constprop.0+0x3b08>
 800fb0c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fb10:	ee17 0a90 	vmov	r0, s15
 800fb14:	f7f0 fcbc 	bl	8000490 <__aeabi_f2d>
 800fb18:	ec41 0b10 	vmov	d0, r0, r1
 800fb1c:	f005 fa48 	bl	8014fb0 <ceil>
 800fb20:	ec51 0b10 	vmov	r0, r1, d0
 800fb24:	f7f0 ffbc 	bl	8000aa0 <__aeabi_d2f>
 800fb28:	ee07 0a90 	vmov	s15, r0
 800fb2c:	edc6 7a00 	vstr	s15, [r6]
 800fb30:	ed99 7a04 	vldr	s14, [r9, #16]
 800fb34:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fb38:	eef0 6ae7 	vabs.f32	s13, s15
 800fb3c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb44:	d51b      	bpl.n	800fb7e <kalman_3gyro.constprop.0+0x3836>
 800fb46:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	f280 8168 	bge.w	800fe22 <kalman_3gyro.constprop.0+0x3ada>
 800fb52:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5a:	f300 8176 	bgt.w	800fe4a <kalman_3gyro.constprop.0+0x3b02>
 800fb5e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fb62:	ee17 0a90 	vmov	r0, s15
 800fb66:	f7f0 fc93 	bl	8000490 <__aeabi_f2d>
 800fb6a:	ec41 0b10 	vmov	d0, r0, r1
 800fb6e:	f005 fa1f 	bl	8014fb0 <ceil>
 800fb72:	ec51 0b10 	vmov	r0, r1, d0
 800fb76:	f7f0 ff93 	bl	8000aa0 <__aeabi_d2f>
 800fb7a:	ee07 0a90 	vmov	s15, r0
 800fb7e:	edc6 7a01 	vstr	s15, [r6, #4]
 800fb82:	ed99 7a05 	vldr	s14, [r9, #20]
 800fb86:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fb8a:	eef0 6ae7 	vabs.f32	s13, s15
 800fb8e:	eef4 6acb 	vcmpe.f32	s13, s22
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	d51a      	bpl.n	800fbce <kalman_3gyro.constprop.0+0x3886>
 800fb98:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba0:	da55      	bge.n	800fc4e <kalman_3gyro.constprop.0+0x3906>
 800fba2:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbaa:	f300 814b 	bgt.w	800fe44 <kalman_3gyro.constprop.0+0x3afc>
 800fbae:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fbb2:	ee17 0a90 	vmov	r0, s15
 800fbb6:	f7f0 fc6b 	bl	8000490 <__aeabi_f2d>
 800fbba:	ec41 0b10 	vmov	d0, r0, r1
 800fbbe:	f005 f9f7 	bl	8014fb0 <ceil>
 800fbc2:	ec51 0b10 	vmov	r0, r1, d0
 800fbc6:	f7f0 ff6b 	bl	8000aa0 <__aeabi_d2f>
 800fbca:	ee07 0a90 	vmov	s15, r0
 800fbce:	edc6 7a02 	vstr	s15, [r6, #8]
 800fbd2:	360c      	adds	r6, #12
 800fbd4:	42b4      	cmp	r4, r6
 800fbd6:	d04f      	beq.n	800fc78 <kalman_3gyro.constprop.0+0x3930>
 800fbd8:	ed99 7a03 	vldr	s14, [r9, #12]
 800fbdc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fbe0:	eef0 6ae7 	vabs.f32	s13, s15
 800fbe4:	eef4 6acb 	vcmpe.f32	s13, s22
 800fbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbec:	d59e      	bpl.n	800fb2c <kalman_3gyro.constprop.0+0x37e4>
 800fbee:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf6:	db83      	blt.n	800fb00 <kalman_3gyro.constprop.0+0x37b8>
 800fbf8:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fbfc:	ee17 0a90 	vmov	r0, s15
 800fc00:	f7f0 fc46 	bl	8000490 <__aeabi_f2d>
 800fc04:	ec41 0b10 	vmov	d0, r0, r1
 800fc08:	f005 fa56 	bl	80150b8 <floor>
 800fc0c:	ec51 0b10 	vmov	r0, r1, d0
 800fc10:	f7f0 ff46 	bl	8000aa0 <__aeabi_d2f>
 800fc14:	ee07 0a90 	vmov	s15, r0
 800fc18:	e788      	b.n	800fb2c <kalman_3gyro.constprop.0+0x37e4>
 800fc1a:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc1e:	ee17 0a90 	vmov	r0, s15
 800fc22:	f7f0 fc35 	bl	8000490 <__aeabi_f2d>
 800fc26:	ec41 0b10 	vmov	d0, r0, r1
 800fc2a:	f005 fa45 	bl	80150b8 <floor>
 800fc2e:	ec51 0b10 	vmov	r0, r1, d0
 800fc32:	f7f0 ff35 	bl	8000aa0 <__aeabi_d2f>
 800fc36:	ee07 0a90 	vmov	s15, r0
 800fc3a:	e6e4      	b.n	800fa06 <kalman_3gyro.constprop.0+0x36be>
 800fc3c:	eef0 7a6a 	vmov.f32	s15, s21
 800fc40:	e709      	b.n	800fa56 <kalman_3gyro.constprop.0+0x370e>
 800fc42:	eef0 7a6a 	vmov.f32	s15, s21
 800fc46:	e6de      	b.n	800fa06 <kalman_3gyro.constprop.0+0x36be>
 800fc48:	eef0 7a6a 	vmov.f32	s15, s21
 800fc4c:	e6b2      	b.n	800f9b4 <kalman_3gyro.constprop.0+0x366c>
 800fc4e:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc52:	360c      	adds	r6, #12
 800fc54:	ee17 0a90 	vmov	r0, s15
 800fc58:	f7f0 fc1a 	bl	8000490 <__aeabi_f2d>
 800fc5c:	ec41 0b10 	vmov	d0, r0, r1
 800fc60:	f005 fa2a 	bl	80150b8 <floor>
 800fc64:	ec51 0b10 	vmov	r0, r1, d0
 800fc68:	f7f0 ff1a 	bl	8000aa0 <__aeabi_d2f>
 800fc6c:	ee07 0a90 	vmov	s15, r0
 800fc70:	ed46 7a01 	vstr	s15, [r6, #-4]
 800fc74:	42b4      	cmp	r4, r6
 800fc76:	d1af      	bne.n	800fbd8 <kalman_3gyro.constprop.0+0x3890>
 800fc78:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f43c ac7e 	beq.w	800c57e <kalman_3gyro.constprop.0+0x236>
 800fc82:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 800fc86:	240c      	movs	r4, #12
 800fc88:	eddf ba13 	vldr	s23, [pc, #76]	; 800fcd8 <kalman_3gyro.constprop.0+0x3990>
 800fc8c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 800fcbc <kalman_3gyro.constprop.0+0x3974>
 800fc90:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800fcdc <kalman_3gyro.constprop.0+0x3994>
 800fc94:	ed9f aa12 	vldr	s20, [pc, #72]	; 800fce0 <kalman_3gyro.constprop.0+0x3998>
 800fc98:	eddf aa0b 	vldr	s21, [pc, #44]	; 800fcc8 <kalman_3gyro.constprop.0+0x3980>
 800fc9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fca0:	960f      	str	r6, [sp, #60]	; 0x3c
 800fca2:	fb14 6403 	smlabb	r4, r4, r3, r6
 800fca6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fcaa:	e099      	b.n	800fde0 <kalman_3gyro.constprop.0+0x3a98>
 800fcac:	3a7001e0 	.word	0x3a7001e0
 800fcb0:	3a8c0118 	.word	0x3a8c0118
 800fcb4:	3a000100 	.word	0x3a000100
 800fcb8:	44888777 	.word	0x44888777
 800fcbc:	4b000000 	.word	0x4b000000
 800fcc0:	39f001e1 	.word	0x39f001e1
 800fcc4:	b9f001e1 	.word	0xb9f001e1
 800fcc8:	80000000 	.word	0x80000000
 800fccc:	44fffe00 	.word	0x44fffe00
 800fcd0:	39800100 	.word	0x39800100
 800fcd4:	b9800100 	.word	0xb9800100
 800fcd8:	446a0ccd 	.word	0x446a0ccd
 800fcdc:	3a0c0118 	.word	0x3a0c0118
 800fce0:	ba0c0118 	.word	0xba0c0118
 800fce4:	bf666666 	.word	0xbf666666
 800fce8:	3d072b02 	.word	0x3d072b02
 800fcec:	3cb43958 	.word	0x3cb43958
 800fcf0:	3cf5c28f 	.word	0x3cf5c28f
 800fcf4:	3d75c28f 	.word	0x3d75c28f
 800fcf8:	3d23d70a 	.word	0x3d23d70a
 800fcfc:	3ca3d70a 	.word	0x3ca3d70a
 800fd00:	3d4ccccd 	.word	0x3d4ccccd
 800fd04:	3d8f5c29 	.word	0x3d8f5c29
 800fd08:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd10:	f300 80c6 	bgt.w	800fea0 <kalman_3gyro.constprop.0+0x3b58>
 800fd14:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fd18:	ee17 0a90 	vmov	r0, s15
 800fd1c:	f7f0 fbb8 	bl	8000490 <__aeabi_f2d>
 800fd20:	ec41 0b10 	vmov	d0, r0, r1
 800fd24:	f005 f944 	bl	8014fb0 <ceil>
 800fd28:	ec51 0b10 	vmov	r0, r1, d0
 800fd2c:	f7f0 feb8 	bl	8000aa0 <__aeabi_d2f>
 800fd30:	ee07 0a90 	vmov	s15, r0
 800fd34:	edc6 7a00 	vstr	s15, [r6]
 800fd38:	ed99 7a07 	vldr	s14, [r9, #28]
 800fd3c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fd40:	eef0 6ae7 	vabs.f32	s13, s15
 800fd44:	eef4 6acb 	vcmpe.f32	s13, s22
 800fd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4c:	d51b      	bpl.n	800fd86 <kalman_3gyro.constprop.0+0x3a3e>
 800fd4e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	f280 808f 	bge.w	800fe78 <kalman_3gyro.constprop.0+0x3b30>
 800fd5a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd62:	f300 809a 	bgt.w	800fe9a <kalman_3gyro.constprop.0+0x3b52>
 800fd66:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fd6a:	ee17 0a90 	vmov	r0, s15
 800fd6e:	f7f0 fb8f 	bl	8000490 <__aeabi_f2d>
 800fd72:	ec41 0b10 	vmov	d0, r0, r1
 800fd76:	f005 f91b 	bl	8014fb0 <ceil>
 800fd7a:	ec51 0b10 	vmov	r0, r1, d0
 800fd7e:	f7f0 fe8f 	bl	8000aa0 <__aeabi_d2f>
 800fd82:	ee07 0a90 	vmov	s15, r0
 800fd86:	edc6 7a01 	vstr	s15, [r6, #4]
 800fd8a:	ed99 7a08 	vldr	s14, [r9, #32]
 800fd8e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fd92:	eef0 6ae7 	vabs.f32	s13, s15
 800fd96:	eef4 6acb 	vcmpe.f32	s13, s22
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	d519      	bpl.n	800fdd4 <kalman_3gyro.constprop.0+0x3a8c>
 800fda0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda8:	da55      	bge.n	800fe56 <kalman_3gyro.constprop.0+0x3b0e>
 800fdaa:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb2:	dc78      	bgt.n	800fea6 <kalman_3gyro.constprop.0+0x3b5e>
 800fdb4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fdb8:	ee17 0a90 	vmov	r0, s15
 800fdbc:	f7f0 fb68 	bl	8000490 <__aeabi_f2d>
 800fdc0:	ec41 0b10 	vmov	d0, r0, r1
 800fdc4:	f005 f8f4 	bl	8014fb0 <ceil>
 800fdc8:	ec51 0b10 	vmov	r0, r1, d0
 800fdcc:	f7f0 fe68 	bl	8000aa0 <__aeabi_d2f>
 800fdd0:	ee07 0a90 	vmov	s15, r0
 800fdd4:	edc6 7a02 	vstr	s15, [r6, #8]
 800fdd8:	360c      	adds	r6, #12
 800fdda:	42b4      	cmp	r4, r6
 800fddc:	f43c abd2 	beq.w	800c584 <kalman_3gyro.constprop.0+0x23c>
 800fde0:	ed99 7a06 	vldr	s14, [r9, #24]
 800fde4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fde8:	eef0 6ae7 	vabs.f32	s13, s15
 800fdec:	eef4 6acb 	vcmpe.f32	s13, s22
 800fdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf4:	d59e      	bpl.n	800fd34 <kalman_3gyro.constprop.0+0x39ec>
 800fdf6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfe:	db83      	blt.n	800fd08 <kalman_3gyro.constprop.0+0x39c0>
 800fe00:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe04:	ee17 0a90 	vmov	r0, s15
 800fe08:	f7f0 fb42 	bl	8000490 <__aeabi_f2d>
 800fe0c:	ec41 0b10 	vmov	d0, r0, r1
 800fe10:	f005 f952 	bl	80150b8 <floor>
 800fe14:	ec51 0b10 	vmov	r0, r1, d0
 800fe18:	f7f0 fe42 	bl	8000aa0 <__aeabi_d2f>
 800fe1c:	ee07 0a90 	vmov	s15, r0
 800fe20:	e788      	b.n	800fd34 <kalman_3gyro.constprop.0+0x39ec>
 800fe22:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe26:	ee17 0a90 	vmov	r0, s15
 800fe2a:	f7f0 fb31 	bl	8000490 <__aeabi_f2d>
 800fe2e:	ec41 0b10 	vmov	d0, r0, r1
 800fe32:	f005 f941 	bl	80150b8 <floor>
 800fe36:	ec51 0b10 	vmov	r0, r1, d0
 800fe3a:	f7f0 fe31 	bl	8000aa0 <__aeabi_d2f>
 800fe3e:	ee07 0a90 	vmov	s15, r0
 800fe42:	e69c      	b.n	800fb7e <kalman_3gyro.constprop.0+0x3836>
 800fe44:	eef0 7a6a 	vmov.f32	s15, s21
 800fe48:	e6c1      	b.n	800fbce <kalman_3gyro.constprop.0+0x3886>
 800fe4a:	eef0 7a6a 	vmov.f32	s15, s21
 800fe4e:	e696      	b.n	800fb7e <kalman_3gyro.constprop.0+0x3836>
 800fe50:	eef0 7a6a 	vmov.f32	s15, s21
 800fe54:	e66a      	b.n	800fb2c <kalman_3gyro.constprop.0+0x37e4>
 800fe56:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe5a:	ee17 0a90 	vmov	r0, s15
 800fe5e:	f7f0 fb17 	bl	8000490 <__aeabi_f2d>
 800fe62:	ec41 0b10 	vmov	d0, r0, r1
 800fe66:	f005 f927 	bl	80150b8 <floor>
 800fe6a:	ec51 0b10 	vmov	r0, r1, d0
 800fe6e:	f7f0 fe17 	bl	8000aa0 <__aeabi_d2f>
 800fe72:	ee07 0a90 	vmov	s15, r0
 800fe76:	e7ad      	b.n	800fdd4 <kalman_3gyro.constprop.0+0x3a8c>
 800fe78:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe7c:	ee17 0a90 	vmov	r0, s15
 800fe80:	f7f0 fb06 	bl	8000490 <__aeabi_f2d>
 800fe84:	ec41 0b10 	vmov	d0, r0, r1
 800fe88:	f005 f916 	bl	80150b8 <floor>
 800fe8c:	ec51 0b10 	vmov	r0, r1, d0
 800fe90:	f7f0 fe06 	bl	8000aa0 <__aeabi_d2f>
 800fe94:	ee07 0a90 	vmov	s15, r0
 800fe98:	e775      	b.n	800fd86 <kalman_3gyro.constprop.0+0x3a3e>
 800fe9a:	eef0 7a6a 	vmov.f32	s15, s21
 800fe9e:	e772      	b.n	800fd86 <kalman_3gyro.constprop.0+0x3a3e>
 800fea0:	eef0 7a6a 	vmov.f32	s15, s21
 800fea4:	e746      	b.n	800fd34 <kalman_3gyro.constprop.0+0x39ec>
 800fea6:	eef0 7a6a 	vmov.f32	s15, s21
 800feaa:	e793      	b.n	800fdd4 <kalman_3gyro.constprop.0+0x3a8c>
 800feac:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800feae:	7813      	ldrb	r3, [r2, #0]
 800feb0:	ed92 7a03 	vldr	s14, [r2, #12]
 800feb4:	edd2 6a01 	vldr	s13, [r2, #4]
 800feb8:	edd2 7a02 	vldr	s15, [r2, #8]
 800febc:	2200      	movs	r2, #0
 800febe:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f040 813b 	bne.w	801013e <kalman_3gyro.constprop.0+0x3df6>
 800fec8:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 800fce4 <kalman_3gyro.constprop.0+0x399c>
 800fecc:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800fed0:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 800fed4:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 800fed8:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 800fedc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fee0:	2100      	movs	r1, #0
 800fee2:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800fee6:	f006 ffaf 	bl	8016e48 <memset>
 800feea:	eddb 7a02 	vldr	s15, [fp, #8]
 800feee:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 800fce8 <kalman_3gyro.constprop.0+0x39a0>
 800fef2:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 800fcec <kalman_3gyro.constprop.0+0x39a4>
 800fef6:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 800fcf0 <kalman_3gyro.constprop.0+0x39a8>
 800fefa:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 800fcf4 <kalman_3gyro.constprop.0+0x39ac>
 800fefe:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 800fcf8 <kalman_3gyro.constprop.0+0x39b0>
 800ff02:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 800fcfc <kalman_3gyro.constprop.0+0x39b4>
 800ff06:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 800fd00 <kalman_3gyro.constprop.0+0x39b8>
 800ff0a:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 800fd04 <kalman_3gyro.constprop.0+0x39bc>
 800ff0e:	4bd9      	ldr	r3, [pc, #868]	; (8010274 <kalman_3gyro.constprop.0+0x3f2c>)
 800ff10:	49d9      	ldr	r1, [pc, #868]	; (8010278 <kalman_3gyro.constprop.0+0x3f30>)
 800ff12:	4dda      	ldr	r5, [pc, #872]	; (801027c <kalman_3gyro.constprop.0+0x3f34>)
 800ff14:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010280 <kalman_3gyro.constprop.0+0x3f38>
 800ff18:	48da      	ldr	r0, [pc, #872]	; (8010284 <kalman_3gyro.constprop.0+0x3f3c>)
 800ff1a:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 800ff1e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff22:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ff26:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ff2a:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 800ff2e:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010288 <kalman_3gyro.constprop.0+0x3f40>
 800ff32:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 800ff36:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800ff3a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 800ff3e:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 800ff42:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 801028c <kalman_3gyro.constprop.0+0x3f44>
 800ff46:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010290 <kalman_3gyro.constprop.0+0x3f48>
 800ff4a:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 800ff4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff52:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff56:	ee27 5a85 	vmul.f32	s10, s15, s10
 800ff5a:	ee27 4a84 	vmul.f32	s8, s15, s8
 800ff5e:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ff62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ff66:	2200      	movs	r2, #0
 800ff68:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 800ff6c:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 800ff70:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 800ff74:	4cc7      	ldr	r4, [pc, #796]	; (8010294 <kalman_3gyro.constprop.0+0x3f4c>)
 800ff76:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 800ff7a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 800ff7e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010298 <kalman_3gyro.constprop.0+0x3f50>
 800ff82:	49c6      	ldr	r1, [pc, #792]	; (801029c <kalman_3gyro.constprop.0+0x3f54>)
 800ff84:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 800ff88:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 800ff8c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 80102a0 <kalman_3gyro.constprop.0+0x3f58>
 800ff90:	4bc4      	ldr	r3, [pc, #784]	; (80102a4 <kalman_3gyro.constprop.0+0x3f5c>)
 800ff92:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 800ff96:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 800ff9a:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 800ff9e:	4ac2      	ldr	r2, [pc, #776]	; (80102a8 <kalman_3gyro.constprop.0+0x3f60>)
 800ffa0:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 800ffa4:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 800ffa8:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 800ffac:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800ffb0:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800ffb4:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800ffb8:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800ffbc:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800ffc0:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800ffc4:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800ffc8:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800ffcc:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800ffd0:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 800ffd4:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 800ffd8:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 800ffdc:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 800ffe0:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 800ffe4:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 800ffe8:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 800ffec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800fff0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 800fff4:	4cad      	ldr	r4, [pc, #692]	; (80102ac <kalman_3gyro.constprop.0+0x3f64>)
 800fff6:	48ae      	ldr	r0, [pc, #696]	; (80102b0 <kalman_3gyro.constprop.0+0x3f68>)
 800fff8:	49ae      	ldr	r1, [pc, #696]	; (80102b4 <kalman_3gyro.constprop.0+0x3f6c>)
 800fffa:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 800fffe:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8010002:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8010006:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 801000a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 801000e:	ee27 6a83 	vmul.f32	s12, s15, s6
 8010012:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8010016:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 801001a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801001e:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 8010022:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010026:	4aa4      	ldr	r2, [pc, #656]	; (80102b8 <kalman_3gyro.constprop.0+0x3f70>)
 8010028:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 801002c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010030:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8010034:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010038:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 801003c:	4e9f      	ldr	r6, [pc, #636]	; (80102bc <kalman_3gyro.constprop.0+0x3f74>)
 801003e:	4da0      	ldr	r5, [pc, #640]	; (80102c0 <kalman_3gyro.constprop.0+0x3f78>)
 8010040:	49a0      	ldr	r1, [pc, #640]	; (80102c4 <kalman_3gyro.constprop.0+0x3f7c>)
 8010042:	4aa1      	ldr	r2, [pc, #644]	; (80102c8 <kalman_3gyro.constprop.0+0x3f80>)
 8010044:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010048:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 801004c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010050:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8010054:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010058:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 801005c:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010060:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8010064:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010068:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 801006c:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010070:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010074:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010078:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 801007c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010080:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010084:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010088:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 801008c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8010090:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8010094:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010098:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801009c:	b973      	cbnz	r3, 80100bc <kalman_3gyro.constprop.0+0x3d74>
 801009e:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80100a2:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80100a6:	6811      	ldr	r1, [r2, #0]
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80100ae:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 80100b8:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 80100bc:	2300      	movs	r3, #0
 80100be:	f88b 3001 	strb.w	r3, [fp, #1]
 80100c2:	f7fc ba4b 	b.w	800c55c <kalman_3gyro.constprop.0+0x214>
 80100c6:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80100ca:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 80100ce:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80100d2:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80100d6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80100da:	f7fd bd5b 	b.w	800db94 <kalman_3gyro.constprop.0+0x184c>
 80100de:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80102cc <kalman_3gyro.constprop.0+0x3f84>
 80100e2:	f7fc ba9e 	b.w	800c622 <kalman_3gyro.constprop.0+0x2da>
 80100e6:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 80100ea:	f7fd bd7b 	b.w	800dbe4 <kalman_3gyro.constprop.0+0x189c>
 80100ee:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80102d0 <kalman_3gyro.constprop.0+0x3f88>
 80100f2:	ed9f 4a78 	vldr	s8, [pc, #480]	; 80102d4 <kalman_3gyro.constprop.0+0x3f8c>
 80100f6:	eddf 4a78 	vldr	s9, [pc, #480]	; 80102d8 <kalman_3gyro.constprop.0+0x3f90>
 80100fa:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80102dc <kalman_3gyro.constprop.0+0x3f94>
 80100fe:	ed9f ca78 	vldr	s24, [pc, #480]	; 80102e0 <kalman_3gyro.constprop.0+0x3f98>
 8010102:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010106:	f7fd bf9d 	b.w	800e044 <kalman_3gyro.constprop.0+0x1cfc>
 801010a:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 801010e:	2a00      	cmp	r2, #0
 8010110:	f340 8181 	ble.w	8010416 <kalman_3gyro.constprop.0+0x40ce>
 8010114:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010118:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801011c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010124:	f340 8177 	ble.w	8010416 <kalman_3gyro.constprop.0+0x40ce>
 8010128:	3a01      	subs	r2, #1
 801012a:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 801012e:	f7fe b880 	b.w	800e232 <kalman_3gyro.constprop.0+0x1eea>
 8010132:	eeb0 aa69 	vmov.f32	s20, s19
 8010136:	eeb0 ba69 	vmov.f32	s22, s19
 801013a:	f7ff b9de 	b.w	800f4fa <kalman_3gyro.constprop.0+0x31b2>
 801013e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010142:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010146:	eee7 7a07 	vfma.f32	s15, s14, s14
 801014a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801014e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010152:	e6bb      	b.n	800fecc <kalman_3gyro.constprop.0+0x3b84>
 8010154:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010158:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801015c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010160:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010164:	f7fe b802 	b.w	800e16c <kalman_3gyro.constprop.0+0x1e24>
 8010168:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 801016c:	f7fd bae6 	b.w	800d73c <kalman_3gyro.constprop.0+0x13f4>
 8010170:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010174:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010178:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801017c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010180:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010184:	f7fd bd06 	b.w	800db94 <kalman_3gyro.constprop.0+0x184c>
 8010188:	ee7e 7a67 	vsub.f32	s15, s28, s15
 801018c:	ee17 0a90 	vmov	r0, s15
 8010190:	f7f0 f97e 	bl	8000490 <__aeabi_f2d>
 8010194:	ec41 0b10 	vmov	d0, r0, r1
 8010198:	f004 ff0a 	bl	8014fb0 <ceil>
 801019c:	ec51 0b10 	vmov	r0, r1, d0
 80101a0:	f7f0 fc7e 	bl	8000aa0 <__aeabi_d2f>
 80101a4:	ee0e 0a10 	vmov	s28, r0
 80101a8:	f7fc bc70 	b.w	800ca8c <kalman_3gyro.constprop.0+0x744>
 80101ac:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80101b0:	ee17 0a90 	vmov	r0, s15
 80101b4:	f7f0 f96c 	bl	8000490 <__aeabi_f2d>
 80101b8:	ec41 0b10 	vmov	d0, r0, r1
 80101bc:	f004 fef8 	bl	8014fb0 <ceil>
 80101c0:	ec51 0b10 	vmov	r0, r1, d0
 80101c4:	f7f0 fc6c 	bl	8000aa0 <__aeabi_d2f>
 80101c8:	ee0d 0a90 	vmov	s27, r0
 80101cc:	f7fc bc81 	b.w	800cad2 <kalman_3gyro.constprop.0+0x78a>
 80101d0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80101d4:	ee17 0a90 	vmov	r0, s15
 80101d8:	f7f0 f95a 	bl	8000490 <__aeabi_f2d>
 80101dc:	ec41 0b10 	vmov	d0, r0, r1
 80101e0:	f004 fee6 	bl	8014fb0 <ceil>
 80101e4:	ec51 0b10 	vmov	r0, r1, d0
 80101e8:	f7f0 fc5a 	bl	8000aa0 <__aeabi_d2f>
 80101ec:	ee0d 0a90 	vmov	s27, r0
 80101f0:	f7fc bcd5 	b.w	800cb9e <kalman_3gyro.constprop.0+0x856>
 80101f4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80101f8:	ee17 0a90 	vmov	r0, s15
 80101fc:	f7f0 f948 	bl	8000490 <__aeabi_f2d>
 8010200:	ec41 0b10 	vmov	d0, r0, r1
 8010204:	f004 fed4 	bl	8014fb0 <ceil>
 8010208:	ec51 0b10 	vmov	r0, r1, d0
 801020c:	f7f0 fc48 	bl	8000aa0 <__aeabi_d2f>
 8010210:	ee0b 0a10 	vmov	s22, r0
 8010214:	f7fc bce6 	b.w	800cbe4 <kalman_3gyro.constprop.0+0x89c>
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	f6fd addf 	blt.w	800ddde <kalman_3gyro.constprop.0+0x1a96>
 8010220:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80102d8 <kalman_3gyro.constprop.0+0x3f90>
 8010224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022c:	f140 8283 	bpl.w	8010736 <kalman_3gyro.constprop.0+0x43ee>
 8010230:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80102e4 <kalman_3gyro.constprop.0+0x3f9c>
 8010234:	eddf 4a2c 	vldr	s9, [pc, #176]	; 80102e8 <kalman_3gyro.constprop.0+0x3fa0>
 8010238:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80102ec <kalman_3gyro.constprop.0+0x3fa4>
 801023c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010244:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010248:	eea6 7a86 	vfma.f32	s14, s13, s12
 801024c:	f7fd bdd1 	b.w	800ddf2 <kalman_3gyro.constprop.0+0x1aaa>
 8010250:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010254:	ee17 0a90 	vmov	r0, s15
 8010258:	f7f0 f91a 	bl	8000490 <__aeabi_f2d>
 801025c:	ec41 0b10 	vmov	d0, r0, r1
 8010260:	f004 fea6 	bl	8014fb0 <ceil>
 8010264:	ec51 0b10 	vmov	r0, r1, d0
 8010268:	f7f0 fc1a 	bl	8000aa0 <__aeabi_d2f>
 801026c:	ee08 0a10 	vmov	s16, r0
 8010270:	f7fc bbe9 	b.w	800ca46 <kalman_3gyro.constprop.0+0x6fe>
 8010274:	3eb33333 	.word	0x3eb33333
 8010278:	3ee66666 	.word	0x3ee66666
 801027c:	3f866666 	.word	0x3f866666
 8010280:	3ecccccd 	.word	0x3ecccccd
 8010284:	3f933333 	.word	0x3f933333
 8010288:	3dcccccd 	.word	0x3dcccccd
 801028c:	3e4ccccd 	.word	0x3e4ccccd
 8010290:	3e99999a 	.word	0x3e99999a
 8010294:	3f8ccccd 	.word	0x3f8ccccd
 8010298:	3f4ccccd 	.word	0x3f4ccccd
 801029c:	3ebd70a4 	.word	0x3ebd70a4
 80102a0:	3f666666 	.word	0x3f666666
 80102a4:	40a00000 	.word	0x40a00000
 80102a8:	3f99999a 	.word	0x3f99999a
 80102ac:	3f19999a 	.word	0x3f19999a
 80102b0:	3fb9999a 	.word	0x3fb9999a
 80102b4:	3fe66666 	.word	0x3fe66666
 80102b8:	3f333333 	.word	0x3f333333
 80102bc:	3fa66666 	.word	0x3fa66666
 80102c0:	3fcccccd 	.word	0x3fcccccd
 80102c4:	40200000 	.word	0x40200000
 80102c8:	40400000 	.word	0x40400000
 80102cc:	bf666666 	.word	0xbf666666
 80102d0:	391d4951 	.word	0x391d4951
 80102d4:	383cbe62 	.word	0x383cbe62
 80102d8:	3c75c28f 	.word	0x3c75c28f
 80102dc:	469c3e00 	.word	0x469c3e00
 80102e0:	43168000 	.word	0x43168000
 80102e4:	3c23d70a 	.word	0x3c23d70a
 80102e8:	3f19999a 	.word	0x3f19999a
 80102ec:	43480000 	.word	0x43480000
 80102f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80102f4:	ee3a aa47 	vsub.f32	s20, s20, s14
 80102f8:	eef0 7aca 	vabs.f32	s15, s20
 80102fc:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010300:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010308:	eeb4 aac7 	vcmpe.f32	s20, s14
 801030c:	bfb8      	it	lt
 801030e:	eef0 7a66 	vmovlt.f32	s15, s13
 8010312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010316:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 801031a:	f77d af5b 	ble.w	800e1d4 <kalman_3gyro.constprop.0+0x1e8c>
 801031e:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010322:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010326:	eeb4 aac7 	vcmpe.f32	s20, s14
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	f77d af51 	ble.w	800e1d4 <kalman_3gyro.constprop.0+0x1e8c>
 8010332:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010336:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 801033a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801033e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010342:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010346:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 801034a:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 801034e:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010352:	f7fd bf3f 	b.w	800e1d4 <kalman_3gyro.constprop.0+0x1e8c>
 8010356:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 801035a:	2a01      	cmp	r2, #1
 801035c:	d002      	beq.n	8010364 <kalman_3gyro.constprop.0+0x401c>
 801035e:	2b01      	cmp	r3, #1
 8010360:	f47d af1e 	bne.w	800e1a0 <kalman_3gyro.constprop.0+0x1e58>
 8010364:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010368:	eef4 7ac3 	vcmpe.f32	s15, s6
 801036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010370:	bfa8      	it	ge
 8010372:	eeb0 3a67 	vmovge.f32	s6, s15
 8010376:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 801037a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 801037e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010382:	f7fd bf0d 	b.w	800e1a0 <kalman_3gyro.constprop.0+0x1e58>
 8010386:	ee78 7a67 	vsub.f32	s15, s16, s15
 801038a:	ee17 0a90 	vmov	r0, s15
 801038e:	f7f0 f87f 	bl	8000490 <__aeabi_f2d>
 8010392:	ec41 0b10 	vmov	d0, r0, r1
 8010396:	f004 fe0b 	bl	8014fb0 <ceil>
 801039a:	ec51 0b10 	vmov	r0, r1, d0
 801039e:	f7f0 fb7f 	bl	8000aa0 <__aeabi_d2f>
 80103a2:	ee08 0a10 	vmov	s16, r0
 80103a6:	f7fc bc40 	b.w	800cc2a <kalman_3gyro.constprop.0+0x8e2>
 80103aa:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80103ae:	ee17 0a90 	vmov	r0, s15
 80103b2:	f7f0 f86d 	bl	8000490 <__aeabi_f2d>
 80103b6:	ec41 0b10 	vmov	d0, r0, r1
 80103ba:	f004 fdf9 	bl	8014fb0 <ceil>
 80103be:	ec51 0b10 	vmov	r0, r1, d0
 80103c2:	f7f0 fb6d 	bl	8000aa0 <__aeabi_d2f>
 80103c6:	ee0b 0a10 	vmov	s22, r0
 80103ca:	f7fc bcb7 	b.w	800cd3c <kalman_3gyro.constprop.0+0x9f4>
 80103ce:	ee78 7a67 	vsub.f32	s15, s16, s15
 80103d2:	ee17 0a90 	vmov	r0, s15
 80103d6:	f7f0 f85b 	bl	8000490 <__aeabi_f2d>
 80103da:	ec41 0b10 	vmov	d0, r0, r1
 80103de:	f004 fde7 	bl	8014fb0 <ceil>
 80103e2:	ec51 0b10 	vmov	r0, r1, d0
 80103e6:	f7f0 fb5b 	bl	8000aa0 <__aeabi_d2f>
 80103ea:	ee08 0a10 	vmov	s16, r0
 80103ee:	f7fc bcc8 	b.w	800cd82 <kalman_3gyro.constprop.0+0xa3a>
 80103f2:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80103f6:	ee17 0a90 	vmov	r0, s15
 80103fa:	f7f0 f849 	bl	8000490 <__aeabi_f2d>
 80103fe:	ec41 0b10 	vmov	d0, r0, r1
 8010402:	f004 fdd5 	bl	8014fb0 <ceil>
 8010406:	ec51 0b10 	vmov	r0, r1, d0
 801040a:	f7f0 fb49 	bl	8000aa0 <__aeabi_d2f>
 801040e:	ee0d 0a90 	vmov	s27, r0
 8010412:	f7fc bc70 	b.w	800ccf6 <kalman_3gyro.constprop.0+0x9ae>
 8010416:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 801041a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801041e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010422:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042a:	f77d af02 	ble.w	800e232 <kalman_3gyro.constprop.0+0x1eea>
 801042e:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010436:	eef4 7aec 	vcmpe.f32	s15, s25
 801043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043e:	f77d aef8 	ble.w	800e232 <kalman_3gyro.constprop.0+0x1eea>
 8010442:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010446:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801044a:	eef4 7acd 	vcmpe.f32	s15, s26
 801044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010452:	f140 8711 	bpl.w	8011278 <kalman_3gyro.constprop.0+0x4f30>
 8010456:	3303      	adds	r3, #3
 8010458:	f7ff ba35 	b.w	800f8c6 <kalman_3gyro.constprop.0+0x357e>
 801045c:	460b      	mov	r3, r1
 801045e:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010462:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010466:	9181      	str	r1, [sp, #516]	; 0x204
 8010468:	9282      	str	r2, [sp, #520]	; 0x208
 801046a:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 801046e:	9183      	str	r1, [sp, #524]	; 0x20c
 8010470:	2200      	movs	r2, #0
 8010472:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010476:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801047a:	f7fe baa8 	b.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 801047e:	a936      	add	r1, sp, #216	; 0xd8
 8010480:	a854      	add	r0, sp, #336	; 0x150
 8010482:	f7fa ff85 	bl	800b390 <b_dcm2q>
 8010486:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801048a:	4619      	mov	r1, r3
 801048c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010490:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010494:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010498:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 801049c:	f006 fcd4 	bl	8016e48 <memset>
 80104a0:	4bd8      	ldr	r3, [pc, #864]	; (8010804 <kalman_3gyro.constprop.0+0x44bc>)
 80104a2:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80104a6:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80104aa:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80104ae:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80104b2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80104b6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80104ba:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80104be:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80104c2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80104c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80104c8:	781a      	ldrb	r2, [r3, #0]
 80104ca:	ee07 2a90 	vmov	s15, r2
 80104ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80104d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104da:	f040 84dc 	bne.w	8010e96 <kalman_3gyro.constprop.0+0x4b4e>
 80104de:	eeb0 7a4c 	vmov.f32	s14, s24
 80104e2:	2300      	movs	r3, #0
 80104e4:	f88b 3000 	strb.w	r3, [fp]
 80104e8:	eddb ea02 	vldr	s29, [fp, #8]
 80104ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80104f0:	2301      	movs	r3, #1
 80104f2:	f7fd bb8d 	b.w	800dc10 <kalman_3gyro.constprop.0+0x18c8>
 80104f6:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 80104fa:	eef4 4ac8 	vcmpe.f32	s9, s16
 80104fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010502:	f340 85da 	ble.w	80110ba <kalman_3gyro.constprop.0+0x4d72>
 8010506:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 801050a:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 801050e:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010512:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010516:	ee74 4ae2 	vsub.f32	s9, s9, s5
 801051a:	ee27 7a23 	vmul.f32	s14, s14, s7
 801051e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010522:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010526:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 801052a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010532:	f63d a94b 	bhi.w	800d7cc <kalman_3gyro.constprop.0+0x1484>
 8010536:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 801053a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801053e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010542:	f340 84bc 	ble.w	8010ebe <kalman_3gyro.constprop.0+0x4b76>
 8010546:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 801054a:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 801054e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010552:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010556:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801055a:	ee24 4a03 	vmul.f32	s8, s8, s6
 801055e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010562:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010566:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 801056a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801056e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010572:	f63d a94b 	bhi.w	800d80c <kalman_3gyro.constprop.0+0x14c4>
 8010576:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 801057a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801057e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010582:	f340 84a8 	ble.w	8010ed6 <kalman_3gyro.constprop.0+0x4b8e>
 8010586:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 801058a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 801058e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010592:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010596:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801059a:	ee24 4a03 	vmul.f32	s8, s8, s6
 801059e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 80105a2:	ee3e ea23 	vadd.f32	s28, s28, s7
 80105a6:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 80105aa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80105ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105b2:	f63d a94b 	bhi.w	800d84c <kalman_3gyro.constprop.0+0x1504>
 80105b6:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 80105ba:	eef4 4ac8 	vcmpe.f32	s9, s16
 80105be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c2:	f340 8490 	ble.w	8010ee6 <kalman_3gyro.constprop.0+0x4b9e>
 80105c6:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 80105ca:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 80105ce:	ee38 3a47 	vsub.f32	s6, s16, s14
 80105d2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80105d6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80105da:	ee24 4a03 	vmul.f32	s8, s8, s6
 80105de:	ee84 ea07 	vdiv.f32	s28, s8, s14
 80105e2:	ee3e ea23 	vadd.f32	s28, s28, s7
 80105e6:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 80105ea:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80105ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f2:	f6fd a94b 	blt.w	800d88c <kalman_3gyro.constprop.0+0x1544>
 80105f6:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 80105fa:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80105fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010602:	f57d a94b 	bpl.w	800d89c <kalman_3gyro.constprop.0+0x1554>
 8010606:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 801060a:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 801060e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010612:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010616:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801061a:	ee24 7a03 	vmul.f32	s14, s8, s6
 801061e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010622:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010626:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 801062a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010632:	f6fd a94b 	blt.w	800d8cc <kalman_3gyro.constprop.0+0x1584>
 8010636:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801063e:	f57d a945 	bpl.w	800d8cc <kalman_3gyro.constprop.0+0x1584>
 8010642:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010646:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 801064a:	ee78 3a47 	vsub.f32	s7, s16, s14
 801064e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010652:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010656:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801065a:	ee85 ea07 	vdiv.f32	s28, s10, s14
 801065e:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010662:	f7fd b933 	b.w	800d8cc <kalman_3gyro.constprop.0+0x1584>
 8010666:	eddf 6a68 	vldr	s13, [pc, #416]	; 8010808 <kalman_3gyro.constprop.0+0x44c0>
 801066a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801066e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010672:	f57d ac56 	bpl.w	800df22 <kalman_3gyro.constprop.0+0x1bda>
 8010676:	eddf 3a65 	vldr	s7, [pc, #404]	; 801080c <kalman_3gyro.constprop.0+0x44c4>
 801067a:	eddf 2a65 	vldr	s5, [pc, #404]	; 8010810 <kalman_3gyro.constprop.0+0x44c8>
 801067e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8010814 <kalman_3gyro.constprop.0+0x44cc>
 8010682:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010818 <kalman_3gyro.constprop.0+0x44d0>
 8010686:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801068a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801068e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010692:	eeb0 ca66 	vmov.f32	s24, s13
 8010696:	eddf 6a61 	vldr	s13, [pc, #388]	; 801081c <kalman_3gyro.constprop.0+0x44d4>
 801069a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801069e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a2:	f6fd ac56 	blt.w	800df52 <kalman_3gyro.constprop.0+0x1c0a>
 80106a6:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010820 <kalman_3gyro.constprop.0+0x44d8>
 80106aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b2:	f57d ac56 	bpl.w	800df62 <kalman_3gyro.constprop.0+0x1c1a>
 80106b6:	eddf 3a59 	vldr	s7, [pc, #356]	; 801081c <kalman_3gyro.constprop.0+0x44d4>
 80106ba:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80106be:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80106c2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80106c6:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 80106ca:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80106ce:	eee3 6a83 	vfma.f32	s13, s7, s6
 80106d2:	eeb0 ca66 	vmov.f32	s24, s13
 80106d6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8010824 <kalman_3gyro.constprop.0+0x44dc>
 80106da:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e2:	f6fd ac56 	blt.w	800df92 <kalman_3gyro.constprop.0+0x1c4a>
 80106e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80106ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 80106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f2:	f57d ac56 	bpl.w	800dfa2 <kalman_3gyro.constprop.0+0x1c5a>
 80106f6:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8010824 <kalman_3gyro.constprop.0+0x44dc>
 80106fa:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8010828 <kalman_3gyro.constprop.0+0x44e0>
 80106fe:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 801082c <kalman_3gyro.constprop.0+0x44e4>
 8010702:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010706:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 801070a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801070e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010712:	eeb0 ca66 	vmov.f32	s24, s13
 8010716:	e4f4      	b.n	8010102 <kalman_3gyro.constprop.0+0x3dba>
 8010718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071c:	f57d abe1 	bpl.w	800dee2 <kalman_3gyro.constprop.0+0x1b9a>
 8010720:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801080c <kalman_3gyro.constprop.0+0x44c4>
 8010724:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072c:	da9b      	bge.n	8010666 <kalman_3gyro.constprop.0+0x431e>
 801072e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010732:	f7fd bbee 	b.w	800df12 <kalman_3gyro.constprop.0+0x1bca>
 8010736:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010808 <kalman_3gyro.constprop.0+0x44c0>
 801073a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	f57d ab5e 	bpl.w	800de02 <kalman_3gyro.constprop.0+0x1aba>
 8010746:	eddf 6a31 	vldr	s13, [pc, #196]	; 801080c <kalman_3gyro.constprop.0+0x44c4>
 801074a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8010830 <kalman_3gyro.constprop.0+0x44e8>
 801074e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010814 <kalman_3gyro.constprop.0+0x44cc>
 8010752:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010834 <kalman_3gyro.constprop.0+0x44ec>
 8010756:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801075a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801075e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010762:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801081c <kalman_3gyro.constprop.0+0x44d4>
 8010766:	eef4 7ae6 	vcmpe.f32	s15, s13
 801076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076e:	f6fd ab5e 	blt.w	800de2e <kalman_3gyro.constprop.0+0x1ae6>
 8010772:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010820 <kalman_3gyro.constprop.0+0x44d8>
 8010776:	eef4 7ac7 	vcmpe.f32	s15, s14
 801077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077e:	f57d ab5e 	bpl.w	800de3e <kalman_3gyro.constprop.0+0x1af6>
 8010782:	eddf 6a26 	vldr	s13, [pc, #152]	; 801081c <kalman_3gyro.constprop.0+0x44d4>
 8010786:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801078a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801078e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010792:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8010796:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801079a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801079e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8010824 <kalman_3gyro.constprop.0+0x44dc>
 80107a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80107a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107aa:	f6fd ab5e 	blt.w	800de6a <kalman_3gyro.constprop.0+0x1b22>
 80107ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80107b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ba:	f57d ab5d 	bpl.w	800de78 <kalman_3gyro.constprop.0+0x1b30>
 80107be:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010824 <kalman_3gyro.constprop.0+0x44dc>
 80107c2:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010838 <kalman_3gyro.constprop.0+0x44f0>
 80107c6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801082c <kalman_3gyro.constprop.0+0x44e4>
 80107ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801083c <kalman_3gyro.constprop.0+0x44f4>
 80107ce:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80107d2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80107d6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80107da:	f7fd bb5b 	b.w	800de94 <kalman_3gyro.constprop.0+0x1b4c>
 80107de:	9b01      	ldr	r3, [sp, #4]
 80107e0:	e63d      	b.n	801045e <kalman_3gyro.constprop.0+0x4116>
 80107e2:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 80107e6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80107ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ee:	da2b      	bge.n	8010848 <kalman_3gyro.constprop.0+0x4500>
 80107f0:	ed9f ba13 	vldr	s22, [pc, #76]	; 8010840 <kalman_3gyro.constprop.0+0x44f8>
 80107f4:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 80107f8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80107fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010800:	db3a      	blt.n	8010878 <kalman_3gyro.constprop.0+0x4530>
 8010802:	e386      	b.n	8010f12 <kalman_3gyro.constprop.0+0x4bca>
 8010804:	40a00000 	.word	0x40a00000
 8010808:	3cf5c28f 	.word	0x3cf5c28f
 801080c:	3c75c28f 	.word	0x3c75c28f
 8010810:	3dccccd0 	.word	0x3dccccd0
 8010814:	42855556 	.word	0x42855556
 8010818:	3f866666 	.word	0x3f866666
 801081c:	3d4ccccd 	.word	0x3d4ccccd
 8010820:	3dcccccd 	.word	0x3dcccccd
 8010824:	3e4ccccd 	.word	0x3e4ccccd
 8010828:	42200000 	.word	0x42200000
 801082c:	40555555 	.word	0x40555555
 8010830:	3ecccccc 	.word	0x3ecccccc
 8010834:	3fcccccd 	.word	0x3fcccccd
 8010838:	43f00000 	.word	0x43f00000
 801083c:	42ee0000 	.word	0x42ee0000
 8010840:	00000000 	.word	0x00000000
 8010844:	eeb0 7a64 	vmov.f32	s14, s9
 8010848:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 801084c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010854:	f140 8359 	bpl.w	8010f0a <kalman_3gyro.constprop.0+0x4bc2>
 8010858:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 801085c:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8010860:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010864:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010868:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801086c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010870:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010874:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010878:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 801087c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010884:	f2c0 835d 	blt.w	8010f42 <kalman_3gyro.constprop.0+0x4bfa>
 8010888:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801088c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010894:	f140 8402 	bpl.w	801109c <kalman_3gyro.constprop.0+0x4d54>
 8010898:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 801089c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 80108a0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80108a4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80108a8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80108ac:	ee64 4a03 	vmul.f32	s9, s8, s6
 80108b0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80108b4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80108b8:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 80108bc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80108c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c4:	f200 835d 	bhi.w	8010f82 <kalman_3gyro.constprop.0+0x4c3a>
 80108c8:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 80108cc:	eef4 4ac8 	vcmpe.f32	s9, s16
 80108d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d4:	f340 83e8 	ble.w	80110a8 <kalman_3gyro.constprop.0+0x4d60>
 80108d8:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80108dc:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80108e0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80108e4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80108e8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80108ec:	ee64 4a03 	vmul.f32	s9, s8, s6
 80108f0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80108f4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80108f8:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 80108fc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010904:	f200 835d 	bhi.w	8010fc2 <kalman_3gyro.constprop.0+0x4c7a>
 8010908:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 801090c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010914:	f340 83b4 	ble.w	8011080 <kalman_3gyro.constprop.0+0x4d38>
 8010918:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 801091c:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8010920:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010924:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010928:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801092c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010930:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010934:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010938:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 801093c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010944:	f2c0 835c 	blt.w	8011000 <kalman_3gyro.constprop.0+0x4cb8>
 8010948:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801094c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010954:	f140 835c 	bpl.w	8011010 <kalman_3gyro.constprop.0+0x4cc8>
 8010958:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 801095c:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8010960:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010964:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010968:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801096c:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010970:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8010974:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010978:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801097c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010984:	f6fc aeda 	blt.w	800d73c <kalman_3gyro.constprop.0+0x13f4>
 8010988:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010990:	f57c aed4 	bpl.w	800d73c <kalman_3gyro.constprop.0+0x13f4>
 8010994:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8010998:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 801099c:	ee78 3a47 	vsub.f32	s7, s16, s14
 80109a0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80109a4:	ee35 7a47 	vsub.f32	s14, s10, s14
 80109a8:	ee24 5aa3 	vmul.f32	s10, s9, s7
 80109ac:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80109b0:	ee3b ba04 	vadd.f32	s22, s22, s8
 80109b4:	f7fc bec2 	b.w	800d73c <kalman_3gyro.constprop.0+0x13f4>
 80109b8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80109bc:	eef4 7acd 	vcmpe.f32	s15, s26
 80109c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109c4:	dd2c      	ble.n	8010a20 <kalman_3gyro.constprop.0+0x46d8>
 80109c6:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 80109ca:	eef4 7aeb 	vcmpe.f32	s15, s23
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	dd25      	ble.n	8010a20 <kalman_3gyro.constprop.0+0x46d8>
 80109d4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80109d8:	eef4 7aec 	vcmpe.f32	s15, s25
 80109dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e0:	dd1e      	ble.n	8010a20 <kalman_3gyro.constprop.0+0x46d8>
 80109e2:	eddd 5a03 	vldr	s11, [sp, #12]
 80109e6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80109ea:	eef4 5ae7 	vcmpe.f32	s11, s15
 80109ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109f2:	d515      	bpl.n	8010a20 <kalman_3gyro.constprop.0+0x46d8>
 80109f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80109f8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80109fc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010a00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a08:	d50a      	bpl.n	8010a20 <kalman_3gyro.constprop.0+0x46d8>
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010a10:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a14:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010a18:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010a1c:	f7fd bf4c 	b.w	800e8b8 <kalman_3gyro.constprop.0+0x2570>
 8010a20:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8010a24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2c:	dd0b      	ble.n	8010a46 <kalman_3gyro.constprop.0+0x46fe>
 8010a2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3a:	f100 843f 	bmi.w	80112bc <kalman_3gyro.constprop.0+0x4f74>
 8010a3e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010a42:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a46:	2300      	movs	r3, #0
 8010a48:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010a4c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010a50:	f7fd bf32 	b.w	800e8b8 <kalman_3gyro.constprop.0+0x2570>
 8010a54:	2301      	movs	r3, #1
 8010a56:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010a5a:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8010a5e:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8010a62:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8010a66:	edd2 5a00 	vldr	s11, [r2]
 8010a6a:	ed93 7a00 	vldr	s14, [r3]
 8010a6e:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8010a72:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8010a76:	ed92 5a00 	vldr	s10, [r2]
 8010a7a:	edd3 6a00 	vldr	s13, [r3]
 8010a7e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8010a82:	ee67 4a07 	vmul.f32	s9, s14, s14
 8010a86:	eea5 4a05 	vfma.f32	s8, s10, s10
 8010a8a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8010a8e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8010a92:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8010a96:	aa5d      	add	r2, sp, #372	; 0x174
 8010a98:	a833      	add	r0, sp, #204	; 0xcc
 8010a9a:	ed91 6a00 	vldr	s12, [r1]
 8010a9e:	edd3 7a00 	vldr	s15, [r3]
 8010aa2:	eea6 4a06 	vfma.f32	s8, s12, s12
 8010aa6:	a92d      	add	r1, sp, #180	; 0xb4
 8010aa8:	ad5d      	add	r5, sp, #372	; 0x174
 8010aaa:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8010aae:	ac66      	add	r4, sp, #408	; 0x198
 8010ab0:	eef1 2ac4 	vsqrt.f32	s5, s8
 8010ab4:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8010ab8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8010abc:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8010ac0:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8010ac4:	ee25 5a04 	vmul.f32	s10, s10, s8
 8010ac8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010acc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8010ad0:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010ad4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010ad8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010adc:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8010ae0:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8010ae4:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8010ae8:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8010aec:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8010af0:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8010af4:	f7fa fbac 	bl	800b250 <getRotationMatrix>
 8010af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b00:	682e      	ldr	r6, [r5, #0]
 8010b02:	6026      	str	r6, [r4, #0]
 8010b04:	ad66      	add	r5, sp, #408	; 0x198
 8010b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b08:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8010b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b12:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8010b16:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8010b1a:	6026      	str	r6, [r4, #0]
 8010b1c:	eef0 7ae7 	vabs.f32	s15, s15
 8010b20:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2c:	f100 81df 	bmi.w	8010eee <kalman_3gyro.constprop.0+0x4ba6>
 8010b30:	2307      	movs	r3, #7
 8010b32:	f04f 0c04 	mov.w	ip, #4
 8010b36:	9305      	str	r3, [sp, #20]
 8010b38:	2300      	movs	r3, #0
 8010b3a:	4662      	mov	r2, ip
 8010b3c:	2003      	movs	r0, #3
 8010b3e:	2706      	movs	r7, #6
 8010b40:	f04f 0e01 	mov.w	lr, #1
 8010b44:	9304      	str	r3, [sp, #16]
 8010b46:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8010b4a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b56:	f340 8296 	ble.w	8011086 <kalman_3gyro.constprop.0+0x4d3e>
 8010b5a:	2306      	movs	r3, #6
 8010b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8010b5e:	2307      	movs	r3, #7
 8010b60:	9305      	str	r3, [sp, #20]
 8010b62:	2300      	movs	r3, #0
 8010b64:	2708      	movs	r7, #8
 8010b66:	f04f 0c04 	mov.w	ip, #4
 8010b6a:	9302      	str	r3, [sp, #8]
 8010b6c:	2302      	movs	r3, #2
 8010b6e:	9707      	str	r7, [sp, #28]
 8010b70:	4662      	mov	r2, ip
 8010b72:	2005      	movs	r0, #5
 8010b74:	f04f 0e01 	mov.w	lr, #1
 8010b78:	9304      	str	r3, [sp, #16]
 8010b7a:	ab66      	add	r3, sp, #408	; 0x198
 8010b7c:	441a      	add	r2, r3
 8010b7e:	9b07      	ldr	r3, [sp, #28]
 8010b80:	edd2 6a00 	vldr	s13, [r2]
 8010b84:	9a02      	ldr	r2, [sp, #8]
 8010b86:	a966      	add	r1, sp, #408	; 0x198
 8010b88:	440b      	add	r3, r1
 8010b8a:	ed93 7a00 	vldr	s14, [r3]
 8010b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b92:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010b96:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010b9a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010b9e:	9a04      	ldr	r2, [sp, #16]
 8010ba0:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8010ba4:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8010ba8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010bac:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8010bb0:	0080      	lsls	r0, r0, #2
 8010bb2:	900e      	str	r0, [sp, #56]	; 0x38
 8010bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010bb6:	940d      	str	r4, [sp, #52]	; 0x34
 8010bb8:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010bbc:	edc3 7a00 	vstr	s15, [r3]
 8010bc0:	ed96 7a00 	vldr	s14, [r6]
 8010bc4:	edd1 7a00 	vldr	s15, [r1]
 8010bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8010bca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010bce:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8010bd2:	0080      	lsls	r0, r0, #2
 8010bd4:	9006      	str	r0, [sp, #24]
 8010bd6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8010bda:	00bf      	lsls	r7, r7, #2
 8010bdc:	9711      	str	r7, [sp, #68]	; 0x44
 8010bde:	9f05      	ldr	r7, [sp, #20]
 8010be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8010be6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010bea:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	9307      	str	r3, [sp, #28]
 8010bf2:	9b02      	ldr	r3, [sp, #8]
 8010bf4:	edc6 6a00 	vstr	s13, [r6]
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8010bfc:	9b04      	ldr	r3, [sp, #16]
 8010bfe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010c00:	009b      	lsls	r3, r3, #2
 8010c02:	9312      	str	r3, [sp, #72]	; 0x48
 8010c04:	9b05      	ldr	r3, [sp, #20]
 8010c06:	ed96 7a00 	vldr	s14, [r6]
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c0e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8010c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c14:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8010c18:	ed93 6a00 	vldr	s12, [r3]
 8010c1c:	edd2 7a00 	vldr	s15, [r2]
 8010c20:	eee6 7a47 	vfms.f32	s15, s12, s14
 8010c24:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8010c28:	950a      	str	r5, [sp, #40]	; 0x28
 8010c2a:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8010c2e:	edc2 7a00 	vstr	s15, [r2]
 8010c32:	ed96 7a00 	vldr	s14, [r6]
 8010c36:	edd4 7a00 	vldr	s15, [r4]
 8010c3a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010c3e:	edc4 7a00 	vstr	s15, [r4]
 8010c42:	edd0 5a00 	vldr	s11, [r0]
 8010c46:	ed97 7a00 	vldr	s14, [r7]
 8010c4a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010c4e:	eef0 7ae7 	vabs.f32	s15, s15
 8010c52:	ed87 7a00 	vstr	s14, [r7]
 8010c56:	ed90 6a00 	vldr	s12, [r0]
 8010c5a:	ed91 7a00 	vldr	s14, [r1]
 8010c5e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010c62:	ed81 7a00 	vstr	s14, [r1]
 8010c66:	ed92 7a00 	vldr	s14, [r2]
 8010c6a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c76:	dd12      	ble.n	8010c9e <kalman_3gyro.constprop.0+0x4956>
 8010c78:	9a07      	ldr	r2, [sp, #28]
 8010c7a:	9f05      	ldr	r7, [sp, #20]
 8010c7c:	9806      	ldr	r0, [sp, #24]
 8010c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8010c80:	4673      	mov	r3, lr
 8010c82:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010c86:	9302      	str	r3, [sp, #8]
 8010c88:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	9206      	str	r2, [sp, #24]
 8010c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8010c92:	00ba      	lsls	r2, r7, #2
 8010c94:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8010c98:	4605      	mov	r5, r0
 8010c9a:	9207      	str	r2, [sp, #28]
 8010c9c:	930a      	str	r3, [sp, #40]	; 0x28
 8010c9e:	9b06      	ldr	r3, [sp, #24]
 8010ca0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010ca2:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8010ca6:	4413      	add	r3, r2
 8010ca8:	461c      	mov	r4, r3
 8010caa:	462b      	mov	r3, r5
 8010cac:	4413      	add	r3, r2
 8010cae:	ed94 7a00 	vldr	s14, [r4]
 8010cb2:	edd3 7a00 	vldr	s15, [r3]
 8010cb6:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8010cba:	4618      	mov	r0, r3
 8010cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cbe:	4413      	add	r3, r2
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	9b07      	ldr	r3, [sp, #28]
 8010cc4:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010cc8:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010ccc:	440b      	add	r3, r1
 8010cce:	4619      	mov	r1, r3
 8010cd0:	442e      	add	r6, r5
 8010cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cd4:	9607      	str	r6, [sp, #28]
 8010cd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010cd8:	ed84 2a00 	vstr	s4, [r4]
 8010cdc:	442b      	add	r3, r5
 8010cde:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 8010ce2:	9306      	str	r3, [sp, #24]
 8010ce4:	19bb      	adds	r3, r7, r6
 8010ce6:	ed92 7a00 	vldr	s14, [r2]
 8010cea:	edd1 7a00 	vldr	s15, [r1]
 8010cee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010cf0:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8010cf4:	edd3 3a00 	vldr	s7, [r3]
 8010cf8:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010cfc:	eee2 7a47 	vfms.f32	s15, s4, s14
 8010d00:	4423      	add	r3, r4
 8010d02:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8010d06:	ed93 5a00 	vldr	s10, [r3]
 8010d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d0c:	edc1 7a00 	vstr	s15, [r1]
 8010d10:	462f      	mov	r7, r5
 8010d12:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 8010d16:	4629      	mov	r1, r5
 8010d18:	eb05 0c03 	add.w	ip, r5, r3
 8010d1c:	9d04      	ldr	r5, [sp, #16]
 8010d1e:	ed92 1a00 	vldr	s2, [r2]
 8010d22:	4437      	add	r7, r6
 8010d24:	9705      	str	r7, [sp, #20]
 8010d26:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8010d2a:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8010d2e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010d32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010d36:	4419      	add	r1, r3
 8010d38:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010d3c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8010d40:	191c      	adds	r4, r3, r4
 8010d42:	9b02      	ldr	r3, [sp, #8]
 8010d44:	9104      	str	r1, [sp, #16]
 8010d46:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8010d4a:	9409      	str	r4, [sp, #36]	; 0x24
 8010d4c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8010d50:	463d      	mov	r5, r7
 8010d52:	9904      	ldr	r1, [sp, #16]
 8010d54:	46b6      	mov	lr, r6
 8010d56:	4623      	mov	r3, r4
 8010d58:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8010d5c:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8010d60:	edd0 7a00 	vldr	s15, [r0]
 8010d64:	9805      	ldr	r0, [sp, #20]
 8010d66:	ed91 0a00 	vldr	s0, [r1]
 8010d6a:	ed90 8a00 	vldr	s16, [r0]
 8010d6e:	eddc 4a00 	vldr	s9, [ip]
 8010d72:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8010d76:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 8010d7a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8010d7e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8010d82:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8010d86:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 8010d8a:	a85d      	add	r0, sp, #372	; 0x174
 8010d8c:	a93e      	add	r1, sp, #248	; 0xf8
 8010d8e:	edd7 5a00 	vldr	s11, [r7]
 8010d92:	ed96 6a00 	vldr	s12, [r6]
 8010d96:	9a06      	ldr	r2, [sp, #24]
 8010d98:	ed95 7a00 	vldr	s14, [r5]
 8010d9c:	edd4 6a00 	vldr	s13, [r4]
 8010da0:	ed93 3a00 	vldr	s6, [r3]
 8010da4:	edde 7a00 	vldr	s15, [lr]
 8010da8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010daa:	edd2 1a00 	vldr	s3, [r2]
 8010dae:	9e07      	ldr	r6, [sp, #28]
 8010db0:	eee8 3a45 	vfms.f32	s7, s16, s10
 8010db4:	eee0 4a45 	vfms.f32	s9, s0, s10
 8010db8:	eea8 6a65 	vfms.f32	s12, s16, s11
 8010dbc:	eee7 7a48 	vfms.f32	s15, s14, s16
 8010dc0:	eee0 6a65 	vfms.f32	s13, s0, s11
 8010dc4:	eea7 3a40 	vfms.f32	s6, s14, s0
 8010dc8:	ed94 0a00 	vldr	s0, [r4]
 8010dcc:	eea2 3a67 	vfms.f32	s6, s4, s15
 8010dd0:	eee3 4ac2 	vfms.f32	s9, s7, s4
 8010dd4:	eee2 6a46 	vfms.f32	s13, s4, s12
 8010dd8:	ee80 2a80 	vdiv.f32	s4, s1, s0
 8010ddc:	ee64 6a26 	vmul.f32	s13, s8, s13
 8010de0:	ee64 4a24 	vmul.f32	s9, s8, s9
 8010de4:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010de8:	eea1 6a66 	vfms.f32	s12, s2, s13
 8010dec:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8010df0:	eee4 7a41 	vfms.f32	s15, s8, s2
 8010df4:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8010df8:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8010dfc:	eea4 7a61 	vfms.f32	s14, s8, s3
 8010e00:	ed96 3a00 	vldr	s6, [r6]
 8010e04:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8010e08:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010e0c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010e10:	ee22 6a86 	vmul.f32	s12, s5, s12
 8010e14:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8010e18:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8010e1c:	eee3 5a46 	vfms.f32	s11, s6, s12
 8010e20:	ee27 7a02 	vmul.f32	s14, s14, s4
 8010e24:	ee22 5a05 	vmul.f32	s10, s4, s10
 8010e28:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010e2c:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8010e30:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8010e34:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8010e38:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8010e3c:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8010e40:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8010e44:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8010e48:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8010e4c:	f7fa faa0 	bl	800b390 <b_dcm2q>
 8010e50:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8010e54:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8010e58:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8010e5c:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8010e60:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010e64:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010e68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010e6c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8010e70:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8010e74:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f43d ad20 	beq.w	800e8be <kalman_3gyro.constprop.0+0x2576>
 8010e7e:	2200      	movs	r2, #0
 8010e80:	9b01      	ldr	r3, [sp, #4]
 8010e82:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010e86:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 8010e8a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 8010e8e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010e92:	f7fd bd9c 	b.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 8010e96:	edd3 7a02 	vldr	s15, [r3, #8]
 8010e9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8010e9e:	edd3 6a03 	vldr	s13, [r3, #12]
 8010ea2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010ea6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010eaa:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010eae:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8010eb2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8010eb6:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 8010eba:	f7ff bb12 	b.w	80104e2 <kalman_3gyro.constprop.0+0x419a>
 8010ebe:	eeb0 7a64 	vmov.f32	s14, s9
 8010ec2:	f7fc bc8b 	b.w	800d7dc <kalman_3gyro.constprop.0+0x1494>
 8010ec6:	eeb0 7a64 	vmov.f32	s14, s9
 8010eca:	f7ff bb94 	b.w	80105f6 <kalman_3gyro.constprop.0+0x42ae>
 8010ece:	eeb0 7a64 	vmov.f32	s14, s9
 8010ed2:	f7ff bb50 	b.w	8010576 <kalman_3gyro.constprop.0+0x422e>
 8010ed6:	eeb0 7a64 	vmov.f32	s14, s9
 8010eda:	f7fc bc9f 	b.w	800d81c <kalman_3gyro.constprop.0+0x14d4>
 8010ede:	eeb0 7a64 	vmov.f32	s14, s9
 8010ee2:	f7ff bb68 	b.w	80105b6 <kalman_3gyro.constprop.0+0x426e>
 8010ee6:	eeb0 7a64 	vmov.f32	s14, s9
 8010eea:	f7fc bcb7 	b.w	800d85c <kalman_3gyro.constprop.0+0x1514>
 8010eee:	2200      	movs	r2, #0
 8010ef0:	2004      	movs	r0, #4
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	2406      	movs	r4, #6
 8010ef6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010efa:	9007      	str	r0, [sp, #28]
 8010efc:	eef0 7a47 	vmov.f32	s15, s14
 8010f00:	4696      	mov	lr, r2
 8010f02:	f04f 0c03 	mov.w	ip, #3
 8010f06:	2707      	movs	r7, #7
 8010f08:	e61d      	b.n	8010b46 <kalman_3gyro.constprop.0+0x47fe>
 8010f0a:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011294 <kalman_3gyro.constprop.0+0x4f4c>
 8010f0e:	eeb0 7a64 	vmov.f32	s14, s9
 8010f12:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 8010f16:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1e:	f140 80b9 	bpl.w	8011094 <kalman_3gyro.constprop.0+0x4d4c>
 8010f22:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 8010f26:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8010f2a:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f2e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f32:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f36:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f3a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f3e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f42:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8010f46:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	f6ff acb3 	blt.w	80108b8 <kalman_3gyro.constprop.0+0x4570>
 8010f52:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8010f56:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5e:	f140 80a0 	bpl.w	80110a2 <kalman_3gyro.constprop.0+0x4d5a>
 8010f62:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8010f66:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8010f6a:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f6e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f72:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f76:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f7a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f7e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f82:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8010f86:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f8e:	f63f acb3 	bhi.w	80108f8 <kalman_3gyro.constprop.0+0x45b0>
 8010f92:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8010f96:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9e:	f340 8086 	ble.w	80110ae <kalman_3gyro.constprop.0+0x4d66>
 8010fa2:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8010fa6:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8010faa:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fae:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010fb2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010fb6:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010fba:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010fbe:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010fc2:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8010fc6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fce:	f63f acb3 	bhi.w	8010938 <kalman_3gyro.constprop.0+0x45f0>
 8010fd2:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8010fd6:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fde:	dd69      	ble.n	80110b4 <kalman_3gyro.constprop.0+0x4d6c>
 8010fe0:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8010fe4:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8010fe8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010fec:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ff0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010ff4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010ff8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010ffc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011000:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8011004:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100c:	f63f acb4 	bhi.w	8010978 <kalman_3gyro.constprop.0+0x4630>
 8011010:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8011014:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801101c:	f77f acb4 	ble.w	8010988 <kalman_3gyro.constprop.0+0x4640>
 8011020:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8011024:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8011028:	ee78 3a64 	vsub.f32	s7, s16, s9
 801102c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011030:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011034:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011038:	ee85 ba07 	vdiv.f32	s22, s10, s14
 801103c:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011040:	f7fc bb7c 	b.w	800d73c <kalman_3gyro.constprop.0+0x13f4>
 8011044:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011048:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011298 <kalman_3gyro.constprop.0+0x4f50>
 801104c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801129c <kalman_3gyro.constprop.0+0x4f54>
 8011050:	3301      	adds	r3, #1
 8011052:	b29b      	uxth	r3, r3
 8011054:	2b31      	cmp	r3, #49	; 0x31
 8011056:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801105a:	bf98      	it	ls
 801105c:	eef0 7a47 	vmovls.f32	s15, s14
 8011060:	f7fd bc1c 	b.w	800e89c <kalman_3gyro.constprop.0+0x2554>
 8011064:	2a0a      	cmp	r2, #10
 8011066:	d02c      	beq.n	80110c2 <kalman_3gyro.constprop.0+0x4d7a>
 8011068:	2100      	movs	r1, #0
 801106a:	3201      	adds	r2, #1
 801106c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011070:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011074:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011078:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 801107c:	f7fd bca7 	b.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 8011080:	eeb0 7a64 	vmov.f32	s14, s9
 8011084:	e7a5      	b.n	8010fd2 <kalman_3gyro.constprop.0+0x4c8a>
 8011086:	2305      	movs	r3, #5
 8011088:	2108      	movs	r1, #8
 801108a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 801108e:	2302      	movs	r3, #2
 8011090:	9302      	str	r3, [sp, #8]
 8011092:	e572      	b.n	8010b7a <kalman_3gyro.constprop.0+0x4832>
 8011094:	eeb0 7a64 	vmov.f32	s14, s9
 8011098:	f7ff bbf6 	b.w	8010888 <kalman_3gyro.constprop.0+0x4540>
 801109c:	eeb0 7a64 	vmov.f32	s14, s9
 80110a0:	e757      	b.n	8010f52 <kalman_3gyro.constprop.0+0x4c0a>
 80110a2:	eeb0 7a64 	vmov.f32	s14, s9
 80110a6:	e40f      	b.n	80108c8 <kalman_3gyro.constprop.0+0x4580>
 80110a8:	eeb0 7a64 	vmov.f32	s14, s9
 80110ac:	e771      	b.n	8010f92 <kalman_3gyro.constprop.0+0x4c4a>
 80110ae:	eeb0 7a64 	vmov.f32	s14, s9
 80110b2:	e429      	b.n	8010908 <kalman_3gyro.constprop.0+0x45c0>
 80110b4:	eeb0 7a64 	vmov.f32	s14, s9
 80110b8:	e446      	b.n	8010948 <kalman_3gyro.constprop.0+0x4600>
 80110ba:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011294 <kalman_3gyro.constprop.0+0x4f4c>
 80110be:	f7fc bb6d 	b.w	800d79c <kalman_3gyro.constprop.0+0x1454>
 80110c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80110c4:	ed94 3a00 	vldr	s6, [r4]
 80110c8:	edd2 5a00 	vldr	s11, [r2]
 80110cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80110ce:	edd0 3a00 	vldr	s7, [r0]
 80110d2:	ed92 1a00 	vldr	s2, [r2]
 80110d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80110d8:	ed91 4a00 	vldr	s8, [r1]
 80110dc:	edd2 4a00 	vldr	s9, [r2]
 80110e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80110e2:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80110e6:	ed92 2a00 	vldr	s4, [r2]
 80110ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110ec:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 80110f0:	edd2 7a00 	vldr	s15, [r2]
 80110f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110f6:	edd2 2a00 	vldr	s5, [r2]
 80110fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80110fc:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011100:	edd2 1a00 	vldr	s3, [r2]
 8011104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011106:	ee74 4a82 	vadd.f32	s9, s9, s4
 801110a:	ee75 5a83 	vadd.f32	s11, s11, s6
 801110e:	ed92 3a00 	vldr	s6, [r2]
 8011112:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011114:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011118:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801111c:	edd2 3a00 	vldr	s7, [r2]
 8011120:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011122:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011126:	ed92 4a00 	vldr	s8, [r2]
 801112a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801112c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011130:	ed92 2a00 	vldr	s4, [r2]
 8011134:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011136:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 801113a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 801113e:	edd2 2a00 	vldr	s5, [r2]
 8011142:	ed91 3a00 	vldr	s6, [r1]
 8011146:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801114a:	ee74 4a82 	vadd.f32	s9, s9, s4
 801114e:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011152:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011156:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 801115a:	ed90 4a00 	vldr	s8, [r0]
 801115e:	edd2 3a00 	vldr	s7, [r2]
 8011162:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011166:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 801116a:	ed91 2a00 	vldr	s4, [r1]
 801116e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011172:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011176:	ee74 4a83 	vadd.f32	s9, s9, s6
 801117a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 801117e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011182:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011186:	ed90 4a00 	vldr	s8, [r0]
 801118a:	edd2 2a00 	vldr	s5, [r2]
 801118e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011192:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011196:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 801119a:	edd1 3a00 	vldr	s7, [r1]
 801119e:	ed90 3a00 	vldr	s6, [r0]
 80111a2:	ee74 4a82 	vadd.f32	s9, s9, s4
 80111a6:	ee75 5a84 	vadd.f32	s11, s11, s8
 80111aa:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 80111ae:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 80111b2:	ed92 4a00 	vldr	s8, [r2]
 80111b6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80111ba:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80111be:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 80111c2:	edd0 3a00 	vldr	s7, [r0]
 80111c6:	edd4 2a00 	vldr	s5, [r4]
 80111ca:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80111ce:	ee75 5a83 	vadd.f32	s11, s11, s6
 80111d2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 80111d6:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80111da:	ed91 3a00 	vldr	s6, [r1]
 80111de:	ee77 7a84 	vadd.f32	s15, s15, s8
 80111e2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80111e6:	ed92 4a00 	vldr	s8, [r2]
 80111ea:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 80111ee:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 80111f2:	edd4 3a00 	vldr	s7, [r4]
 80111f6:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 80111fa:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80111fe:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011202:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011206:	ed91 4a00 	vldr	s8, [r1]
 801120a:	ee75 5aa3 	vadd.f32	s11, s11, s7
 801120e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011212:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011216:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 801121a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801121e:	edc1 4a00 	vstr	s9, [r1]
 8011222:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011226:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801122a:	edc1 5a00 	vstr	s11, [r1]
 801122e:	f240 1501 	movw	r5, #257	; 0x101
 8011232:	3201      	adds	r2, #1
 8011234:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011238:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 801123c:	edc1 7a00 	vstr	s15, [r1]
 8011240:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011244:	2800      	cmp	r0, #0
 8011246:	f43d abc2 	beq.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 801124a:	2200      	movs	r2, #0
 801124c:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011250:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011254:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011258:	f88b 2001 	strb.w	r2, [fp, #1]
 801125c:	f7fd bbb7 	b.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 8011260:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011264:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011268:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801126c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011270:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011274:	f7fd bb20 	b.w	800e8b8 <kalman_3gyro.constprop.0+0x2570>
 8011278:	2a00      	cmp	r2, #0
 801127a:	f340 80c1 	ble.w	8011400 <kalman_3gyro.constprop.0+0x50b8>
 801127e:	2300      	movs	r3, #0
 8011280:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011284:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011288:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 801128c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011290:	f7fc bfcf 	b.w	800e232 <kalman_3gyro.constprop.0+0x1eea>
 8011294:	00000000 	.word	0x00000000
 8011298:	3e4cccce 	.word	0x3e4cccce
 801129c:	3eaaaaab 	.word	0x3eaaaaab
 80112a0:	3e999998 	.word	0x3e999998
 80112a4:	3f99999a 	.word	0x3f99999a
 80112a8:	3dccccd0 	.word	0x3dccccd0
 80112ac:	3f8ccccd 	.word	0x3f8ccccd
 80112b0:	3e4ccccd 	.word	0x3e4ccccd
 80112b4:	3d088889 	.word	0x3d088889
 80112b8:	3d0d3dcb 	.word	0x3d0d3dcb
 80112bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80112c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c8:	d55b      	bpl.n	8011382 <kalman_3gyro.constprop.0+0x503a>
 80112ca:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80112a8 <kalman_3gyro.constprop.0+0x4f60>
 80112ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80112d6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80112da:	eef0 5a66 	vmov.f32	s11, s13
 80112de:	eee7 5a06 	vfma.f32	s11, s14, s12
 80112e2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80112e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ea:	eeb0 7a65 	vmov.f32	s14, s11
 80112ee:	db5b      	blt.n	80113a8 <kalman_3gyro.constprop.0+0x5060>
 80112f0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80112f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	d55b      	bpl.n	80113b6 <kalman_3gyro.constprop.0+0x506e>
 80112fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011302:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011306:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80112a0 <kalman_3gyro.constprop.0+0x4f58>
 801130a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80112a4 <kalman_3gyro.constprop.0+0x4f5c>
 801130e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011312:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011316:	eef4 7ae6 	vcmpe.f32	s15, s13
 801131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131e:	db5b      	blt.n	80113d8 <kalman_3gyro.constprop.0+0x5090>
 8011320:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132c:	d55b      	bpl.n	80113e6 <kalman_3gyro.constprop.0+0x509e>
 801132e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011336:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801133a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801133e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011342:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011346:	f7ff bb7e 	b.w	8010a46 <kalman_3gyro.constprop.0+0x46fe>
 801134a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 801134e:	2b27      	cmp	r3, #39	; 0x27
 8011350:	f200 80c3 	bhi.w	80114da <kalman_3gyro.constprop.0+0x5192>
 8011354:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011358:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 801135c:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011360:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011364:	2201      	movs	r2, #1
 8011366:	4413      	add	r3, r2
 8011368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801136c:	bf14      	ite	ne
 801136e:	b29b      	uxthne	r3, r3
 8011370:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011374:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011378:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801137c:	9b01      	ldr	r3, [sp, #4]
 801137e:	f7fd bb26 	b.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 8011382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011386:	eef4 7ae6 	vcmpe.f32	s15, s13
 801138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801138e:	d5af      	bpl.n	80112f0 <kalman_3gyro.constprop.0+0x4fa8>
 8011390:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011394:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 80112a8 <kalman_3gyro.constprop.0+0x4f60>
 8011398:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80112ac <kalman_3gyro.constprop.0+0x4f64>
 801139c:	ee66 6a86 	vmul.f32	s13, s13, s12
 80113a0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80113a4:	eea6 7a86 	vfma.f32	s14, s13, s12
 80113a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b4:	dbad      	blt.n	8011312 <kalman_3gyro.constprop.0+0x4fca>
 80113b6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80113ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80113be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c2:	d5ad      	bpl.n	8011320 <kalman_3gyro.constprop.0+0x4fd8>
 80113c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80113c8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80113cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80113d0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80113d4:	eea6 7a86 	vfma.f32	s14, s13, s12
 80113d8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80113dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80113e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e4:	dbad      	blt.n	8011342 <kalman_3gyro.constprop.0+0x4ffa>
 80113e6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80113ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113ee:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 80112b0 <kalman_3gyro.constprop.0+0x4f68>
 80113f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80113f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80113fa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80113fe:	e7a0      	b.n	8011342 <kalman_3gyro.constprop.0+0x4ffa>
 8011400:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011404:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011408:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 801140c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011410:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011414:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011418:	ee67 7a86 	vmul.f32	s15, s15, s12
 801141c:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011420:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011424:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011428:	f7fc bf03 	b.w	800e232 <kalman_3gyro.constprop.0+0x1eea>
 801142c:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 80112b4 <kalman_3gyro.constprop.0+0x4f6c>
 8011430:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 80112b8 <kalman_3gyro.constprop.0+0x4f70>
 8011434:	ac33      	add	r4, sp, #204	; 0xcc
 8011436:	f04f 30ff 	mov.w	r0, #4294967295
 801143a:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 801143e:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011442:	eef0 7a66 	vmov.f32	s15, s13
 8011446:	3001      	adds	r0, #1
 8011448:	461a      	mov	r2, r3
 801144a:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 801144e:	320c      	adds	r2, #12
 8011450:	428a      	cmp	r2, r1
 8011452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011456:	d1f8      	bne.n	801144a <kalman_3gyro.constprop.0+0x5102>
 8011458:	ee27 7a84 	vmul.f32	s14, s15, s8
 801145c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011460:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011464:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011468:	330c      	adds	r3, #12
 801146a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801146e:	428b      	cmp	r3, r1
 8011470:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011474:	d1f6      	bne.n	8011464 <kalman_3gyro.constprop.0+0x511c>
 8011476:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801147a:	2802      	cmp	r0, #2
 801147c:	f103 0104 	add.w	r1, r3, #4
 8011480:	ece4 6a01 	vstmia	r4!, {s13}
 8011484:	d1d9      	bne.n	801143a <kalman_3gyro.constprop.0+0x50f2>
 8011486:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 801148a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 801148e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011492:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011496:	eeb1 4ae6 	vsqrt.f32	s8, s13
 801149a:	eef1 4ac7 	vsqrt.f32	s9, s14
 801149e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114a2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80114a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80114aa:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 80114ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114b6:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 80114ba:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 80114be:	f57d aa62 	bpl.w	800e986 <kalman_3gyro.constprop.0+0x263e>
 80114c2:	2200      	movs	r2, #0
 80114c4:	9b01      	ldr	r3, [sp, #4]
 80114c6:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 80114ca:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 80114ce:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80114d2:	f88b 2001 	strb.w	r2, [fp, #1]
 80114d6:	f7fd ba7a 	b.w	800e9ce <kalman_3gyro.constprop.0+0x2686>
 80114da:	9b08      	ldr	r3, [sp, #32]
 80114dc:	6999      	ldr	r1, [r3, #24]
 80114de:	69da      	ldr	r2, [r3, #28]
 80114e0:	6a1b      	ldr	r3, [r3, #32]
 80114e2:	9181      	str	r1, [sp, #516]	; 0x204
 80114e4:	9282      	str	r2, [sp, #520]	; 0x208
 80114e6:	9383      	str	r3, [sp, #524]	; 0x20c
 80114e8:	e73a      	b.n	8011360 <kalman_3gyro.constprop.0+0x5018>
 80114ea:	bf00      	nop
 80114ec:	0000      	movs	r0, r0
	...

080114f0 <iNemoEngine_API_Update>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	ed2d 8b0c 	vpush	{d8-d13}
 80114f8:	4604      	mov	r4, r0
 80114fa:	b0c1      	sub	sp, #260	; 0x104
 80114fc:	460d      	mov	r5, r1
 80114fe:	4617      	mov	r7, r2
 8011500:	eeb0 8a40 	vmov.f32	s16, s0
 8011504:	2b00      	cmp	r3, #0
 8011506:	f000 8253 	beq.w	80119b0 <iNemoEngine_API_Update+0x4c0>
 801150a:	461e      	mov	r6, r3
 801150c:	463b      	mov	r3, r7
 801150e:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011512:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011516:	6859      	ldr	r1, [r3, #4]
 8011518:	689a      	ldr	r2, [r3, #8]
 801151a:	ab33      	add	r3, sp, #204	; 0xcc
 801151c:	c307      	stmia	r3!, {r0, r1, r2}
 801151e:	6879      	ldr	r1, [r7, #4]
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	6838      	ldr	r0, [r7, #0]
 8011524:	ab30      	add	r3, sp, #192	; 0xc0
 8011526:	c307      	stmia	r3!, {r0, r1, r2}
 8011528:	f857 0f18 	ldr.w	r0, [r7, #24]!
 801152c:	6879      	ldr	r1, [r7, #4]
 801152e:	68ba      	ldr	r2, [r7, #8]
 8011530:	ab36      	add	r3, sp, #216	; 0xd8
 8011532:	c307      	stmia	r3!, {r0, r1, r2}
 8011534:	f1bc 0f00 	cmp.w	ip, #0
 8011538:	d005      	beq.n	8011546 <iNemoEngine_API_Update+0x56>
 801153a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 801153e:	7923      	ldrb	r3, [r4, #4]
 8011540:	429a      	cmp	r2, r3
 8011542:	f080 829b 	bcs.w	8011a7c <iNemoEngine_API_Update+0x58c>
 8011546:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 801154a:	f10d 0a14 	add.w	sl, sp, #20
 801154e:	2300      	movs	r3, #0
 8011550:	4649      	mov	r1, r9
 8011552:	4650      	mov	r0, sl
 8011554:	aa33      	add	r2, sp, #204	; 0xcc
 8011556:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801155a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 801155e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011562:	f7f9 fb65 	bl	800ac30 <rotVect>
 8011566:	aa36      	add	r2, sp, #216	; 0xd8
 8011568:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801156c:	a808      	add	r0, sp, #32
 801156e:	f7f9 fb5f 	bl	800ac30 <rotVect>
 8011572:	aa30      	add	r2, sp, #192	; 0xc0
 8011574:	4640      	mov	r0, r8
 8011576:	f104 0143 	add.w	r1, r4, #67	; 0x43
 801157a:	f7f9 fb59 	bl	800ac30 <rotVect>
 801157e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011582:	b923      	cbnz	r3, 801158e <iNemoEngine_API_Update+0x9e>
 8011584:	4b8c      	ldr	r3, [pc, #560]	; (80117b8 <iNemoEngine_API_Update+0x2c8>)
 8011586:	930c      	str	r3, [sp, #48]	; 0x30
 8011588:	2200      	movs	r2, #0
 801158a:	920b      	str	r2, [sp, #44]	; 0x2c
 801158c:	930d      	str	r3, [sp, #52]	; 0x34
 801158e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011592:	2f09      	cmp	r7, #9
 8011594:	d851      	bhi.n	801163a <iNemoEngine_API_Update+0x14a>
 8011596:	ed9d ba06 	vldr	s22, [sp, #24]
 801159a:	eddd ba05 	vldr	s23, [sp, #20]
 801159e:	eddd aa07 	vldr	s21, [sp, #28]
 80115a2:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 80115a6:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80115aa:	eeeb 7aab 	vfma.f32	s15, s23, s23
 80115ae:	eeea 7aaa 	vfma.f32	s15, s21, s21
 80115b2:	ee17 0a90 	vmov	r0, s15
 80115b6:	f7ee ff6b 	bl	8000490 <__aeabi_f2d>
 80115ba:	ec41 0b10 	vmov	d0, r0, r1
 80115be:	f003 fecd 	bl	801535c <sqrt>
 80115c2:	ec51 0b10 	vmov	r0, r1, d0
 80115c6:	f7ef fa6b 	bl	8000aa0 <__aeabi_d2f>
 80115ca:	ee07 0a90 	vmov	s15, r0
 80115ce:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 80115d2:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 80115d6:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 80115da:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 80115de:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80115e2:	ee6b ba87 	vmul.f32	s23, s23, s14
 80115e6:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80115ea:	ee2b ba07 	vmul.f32	s22, s22, s14
 80115ee:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80115f2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80115f6:	ee17 0a90 	vmov	r0, s15
 80115fa:	edcd ba05 	vstr	s23, [sp, #20]
 80115fe:	ed8d ba06 	vstr	s22, [sp, #24]
 8011602:	edcd aa07 	vstr	s21, [sp, #28]
 8011606:	f7ee ff43 	bl	8000490 <__aeabi_f2d>
 801160a:	ec41 0b10 	vmov	d0, r0, r1
 801160e:	f003 fea5 	bl	801535c <sqrt>
 8011612:	ec51 0b10 	vmov	r0, r1, d0
 8011616:	f7ef fa43 	bl	8000aa0 <__aeabi_d2f>
 801161a:	ee07 0a90 	vmov	s15, r0
 801161e:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011622:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011626:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801162a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801162e:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011632:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011636:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 801163a:	7923      	ldrb	r3, [r4, #4]
 801163c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011640:	429a      	cmp	r2, r3
 8011642:	f080 80dd 	bcs.w	8011800 <iNemoEngine_API_Update+0x310>
 8011646:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801164a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801164e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011652:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011656:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801165a:	3701      	adds	r7, #1
 801165c:	aa33      	add	r2, sp, #204	; 0xcc
 801165e:	4649      	mov	r1, r9
 8011660:	4640      	mov	r0, r8
 8011662:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011666:	9303      	str	r3, [sp, #12]
 8011668:	f7f9 fae2 	bl	800ac30 <rotVect>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	f8db 1000 	ldr.w	r1, [fp]
 8011672:	6818      	ldr	r0, [r3, #0]
 8011674:	f8da 2000 	ldr.w	r2, [sl]
 8011678:	6833      	ldr	r3, [r6, #0]
 801167a:	61ab      	str	r3, [r5, #24]
 801167c:	60e8      	str	r0, [r5, #12]
 801167e:	6129      	str	r1, [r5, #16]
 8011680:	616a      	str	r2, [r5, #20]
 8011682:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011686:	9301      	str	r3, [sp, #4]
 8011688:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801168c:	4641      	mov	r1, r8
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	462a      	mov	r2, r5
 8011692:	f105 031c 	add.w	r3, r5, #28
 8011696:	f105 000c 	add.w	r0, r5, #12
 801169a:	f7fa fd85 	bl	800c1a8 <output_update>
 801169e:	ed95 8a00 	vldr	s16, [r5]
 80116a2:	edd5 9a01 	vldr	s19, [r5, #4]
 80116a6:	eeb0 0a48 	vmov.f32	s0, s16
 80116aa:	f003 fdeb 	bl	8015284 <sinf>
 80116ae:	eddf 7a43 	vldr	s15, [pc, #268]	; 80117bc <iNemoEngine_API_Update+0x2cc>
 80116b2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80117c0 <iNemoEngine_API_Update+0x2d0>
 80116b6:	ee60 8a00 	vmul.f32	s17, s0, s0
 80116ba:	eef0 6ae9 	vabs.f32	s13, s19
 80116be:	eee8 7aa7 	vfma.f32	s15, s17, s15
 80116c2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80116c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ca:	eef0 8a67 	vmov.f32	s17, s15
 80116ce:	d56e      	bpl.n	80117ae <iNemoEngine_API_Update+0x2be>
 80116d0:	eeb0 0a69 	vmov.f32	s0, s19
 80116d4:	f003 fe18 	bl	8015308 <tanf>
 80116d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116dc:	eea0 9a28 	vfma.f32	s18, s0, s17
 80116e0:	eef1 7ac9 	vsqrt.f32	s15, s18
 80116e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80117c4 <iNemoEngine_API_Update+0x2d4>
 80116e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80117d8 <iNemoEngine_API_Update+0x2e8>
 80116ec:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80116f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80116f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80116f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fc:	bf88      	it	hi
 80116fe:	eef0 7a66 	vmovhi.f32	s15, s13
 8011702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170a:	bfb8      	it	lt
 801170c:	eef0 7a47 	vmovlt.f32	s15, s14
 8011710:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8011714:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011718:	4c2b      	ldr	r4, [pc, #172]	; (80117c8 <iNemoEngine_API_Update+0x2d8>)
 801171a:	bba3      	cbnz	r3, 8011786 <iNemoEngine_API_Update+0x296>
 801171c:	6820      	ldr	r0, [r4, #0]
 801171e:	edd5 0a08 	vldr	s1, [r5, #32]
 8011722:	ed95 0a07 	vldr	s0, [r5, #28]
 8011726:	edd5 9a03 	vldr	s19, [r5, #12]
 801172a:	ed95 aa04 	vldr	s20, [r5, #16]
 801172e:	ed95 9a05 	vldr	s18, [r5, #20]
 8011732:	edd5 8a06 	vldr	s17, [r5, #24]
 8011736:	f7f9 fb4b 	bl	800add0 <findDirection>
 801173a:	6020      	str	r0, [r4, #0]
 801173c:	2805      	cmp	r0, #5
 801173e:	f200 833d 	bhi.w	8011dbc <iNemoEngine_API_Update+0x8cc>
 8011742:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011746:	000a      	.short	0x000a
 8011748:	00060137 	.word	0x00060137
 801174c:	00060169 	.word	0x00060169
 8011750:	000a      	.short	0x000a
 8011752:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80117cc <iNemoEngine_API_Update+0x2dc>
 8011756:	ee38 8a27 	vadd.f32	s16, s16, s15
 801175a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80117fc <iNemoEngine_API_Update+0x30c>
 801175e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011766:	bfa8      	it	ge
 8011768:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801176c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011774:	f100 8111 	bmi.w	801199a <iNemoEngine_API_Update+0x4aa>
 8011778:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801177c:	b041      	add	sp, #260	; 0x104
 801177e:	ecbd 8b0c 	vpop	{d8-d13}
 8011782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011786:	ed95 9a05 	vldr	s18, [r5, #20]
 801178a:	6820      	ldr	r0, [r4, #0]
 801178c:	edd5 0a07 	vldr	s1, [r5, #28]
 8011790:	ed95 0a08 	vldr	s0, [r5, #32]
 8011794:	edd5 9a04 	vldr	s19, [r5, #16]
 8011798:	ed95 aa03 	vldr	s20, [r5, #12]
 801179c:	edd5 8a06 	vldr	s17, [r5, #24]
 80117a0:	eeb1 1a41 	vneg.f32	s2, s2
 80117a4:	eeb1 9a49 	vneg.f32	s18, s18
 80117a8:	f7f9 fb12 	bl	800add0 <findDirection>
 80117ac:	e7c5      	b.n	801173a <iNemoEngine_API_Update+0x24a>
 80117ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 80117d0 <iNemoEngine_API_Update+0x2e0>
 80117b2:	eea8 9aa7 	vfma.f32	s18, s17, s15
 80117b6:	e793      	b.n	80116e0 <iNemoEngine_API_Update+0x1f0>
 80117b8:	3f333333 	.word	0x3f333333
 80117bc:	00000000 	.word	0x00000000
 80117c0:	3fbc430e 	.word	0x3fbc430e
 80117c4:	40490fdb 	.word	0x40490fdb
 80117c8:	20000178 	.word	0x20000178
 80117cc:	43340000 	.word	0x43340000
 80117d0:	42c6ab07 	.word	0x42c6ab07
 80117d4:	3c03126f 	.word	0x3c03126f
 80117d8:	3c8efa35 	.word	0x3c8efa35
 80117dc:	3e4ccccd 	.word	0x3e4ccccd
 80117e0:	3fb50481 	.word	0x3fb50481
 80117e4:	3ed93dd9 	.word	0x3ed93dd9
 80117e8:	3b656042 	.word	0x3b656042
 80117ec:	42c80000 	.word	0x42c80000
 80117f0:	3a83126f 	.word	0x3a83126f
 80117f4:	3d4ccccd 	.word	0x3d4ccccd
 80117f8:	3f333333 	.word	0x3f333333
 80117fc:	43b40000 	.word	0x43b40000
 8011800:	ee07 3a90 	vmov	s15, r3
 8011804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011808:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 80117d4 <iNemoEngine_API_Update+0x2e4>
 801180c:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 80117d8 <iNemoEngine_API_Update+0x2e8>
 8011810:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 80117e8 <iNemoEngine_API_Update+0x2f8>
 8011814:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80117e4 <iNemoEngine_API_Update+0x2f4>
 8011818:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 80117e0 <iNemoEngine_API_Update+0x2f0>
 801181c:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80117dc <iNemoEngine_API_Update+0x2ec>
 8011820:	ee27 1a88 	vmul.f32	s2, s15, s16
 8011824:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8011828:	ee85 5a81 	vdiv.f32	s10, s11, s2
 801182c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8011830:	2700      	movs	r7, #0
 8011832:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8011836:	f04f 0c00 	mov.w	ip, #0
 801183a:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 801183e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8011842:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8011846:	edd3 5a00 	vldr	s11, [r3]
 801184a:	f8c3 c000 	str.w	ip, [r3]
 801184e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8011852:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011856:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801185a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801185e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011862:	edd7 4a00 	vldr	s9, [r7]
 8011866:	f8c7 c000 	str.w	ip, [r7]
 801186a:	ed93 5a00 	vldr	s10, [r3]
 801186e:	f8c3 c000 	str.w	ip, [r3]
 8011872:	7963      	ldrb	r3, [r4, #5]
 8011874:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011878:	ee25 5a04 	vmul.f32	s10, s10, s8
 801187c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011880:	2b01      	cmp	r3, #1
 8011882:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8011886:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801188a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801188e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011892:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8011896:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 801189a:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 801189e:	f000 812e 	beq.w	8011afe <iNemoEngine_API_Update+0x60e>
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	f000 8122 	beq.w	8011aec <iNemoEngine_API_Update+0x5fc>
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f000 80ef 	beq.w	8011a8c <iNemoEngine_API_Update+0x59c>
 80118ae:	edd4 0a05 	vldr	s1, [r4, #20]
 80118b2:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 80117ec <iNemoEngine_API_Update+0x2fc>
 80118b6:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 80117f0 <iNemoEngine_API_Update+0x300>
 80118ba:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80118be:	ee60 0a85 	vmul.f32	s1, s1, s10
 80118c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80118c6:	8863      	ldrh	r3, [r4, #2]
 80118c8:	1e5a      	subs	r2, r3, #1
 80118ca:	2a12      	cmp	r2, #18
 80118cc:	f200 80e7 	bhi.w	8011a9e <iNemoEngine_API_Update+0x5ae>
 80118d0:	3301      	adds	r3, #1
 80118d2:	b21a      	sxth	r2, r3
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	2b03      	cmp	r3, #3
 80118d8:	8062      	strh	r2, [r4, #2]
 80118da:	f240 8115 	bls.w	8011b08 <iNemoEngine_API_Update+0x618>
 80118de:	ee05 2a90 	vmov	s11, r2
 80118e2:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 80117f4 <iNemoEngine_API_Update+0x304>
 80118e6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80118ea:	ee65 5a85 	vmul.f32	s11, s11, s10
 80118ee:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80118f2:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 80118f6:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 80118fa:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 80117f8 <iNemoEngine_API_Update+0x308>
 80118fe:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011902:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011906:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801190a:	ee26 6a25 	vmul.f32	s12, s12, s11
 801190e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011912:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8011916:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801191a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801191e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011922:	aa1a      	add	r2, sp, #104	; 0x68
 8011924:	af16      	add	r7, sp, #88	; 0x58
 8011926:	e9cd 7200 	strd	r7, r2, [sp]
 801192a:	ab12      	add	r3, sp, #72	; 0x48
 801192c:	aa1e      	add	r2, sp, #120	; 0x78
 801192e:	4641      	mov	r1, r8
 8011930:	4620      	mov	r0, r4
 8011932:	f7fa fd09 	bl	800c348 <kalman_3gyro.constprop.0>
 8011936:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011938:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 801193c:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8011940:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8011944:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8011948:	f8c7 a000 	str.w	sl, [r7]
 801194c:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8011950:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011954:	f8c7 e000 	str.w	lr, [r7]
 8011958:	f604 1748 	addw	r7, r4, #2376	; 0x948
 801195c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011960:	f8c7 c000 	str.w	ip, [r7]
 8011964:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011968:	6030      	str	r0, [r6, #0]
 801196a:	60f3      	str	r3, [r6, #12]
 801196c:	6071      	str	r1, [r6, #4]
 801196e:	60b2      	str	r2, [r6, #8]
 8011970:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011974:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8011978:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801197c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801197e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8011982:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011986:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801198a:	edc3 7a00 	vstr	s15, [r3]
 801198e:	f8cb e000 	str.w	lr, [fp]
 8011992:	f8ca c000 	str.w	ip, [sl]
 8011996:	6030      	str	r0, [r6, #0]
 8011998:	e65f      	b.n	801165a <iNemoEngine_API_Update+0x16a>
 801199a:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80117fc <iNemoEngine_API_Update+0x30c>
 801199e:	ee38 8a27 	vadd.f32	s16, s16, s15
 80119a2:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80119a6:	b041      	add	sp, #260	; 0x104
 80119a8:	ecbd 8b0c 	vpop	{d8-d13}
 80119ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b0:	ae0e      	add	r6, sp, #56	; 0x38
 80119b2:	e5ab      	b.n	801150c <iNemoEngine_API_Update+0x1c>
 80119b4:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80119b8:	ee69 8a28 	vmul.f32	s17, s18, s17
 80119bc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80119c0:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80119c4:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80119c8:	eee9 7a49 	vfms.f32	s15, s18, s18
 80119cc:	ee17 0a90 	vmov	r0, s15
 80119d0:	f7ee fd5e 	bl	8000490 <__aeabi_f2d>
 80119d4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	ee17 0a90 	vmov	r0, s15
 80119e0:	ec43 2b18 	vmov	d8, r2, r3
 80119e4:	f7ee fd54 	bl	8000490 <__aeabi_f2d>
 80119e8:	eeb0 1a48 	vmov.f32	s2, s16
 80119ec:	eef0 1a68 	vmov.f32	s3, s17
 80119f0:	ec41 0b10 	vmov	d0, r0, r1
 80119f4:	f003 fcb0 	bl	8015358 <atan2>
 80119f8:	a3f3      	add	r3, pc, #972	; (adr r3, 8011dc8 <iNemoEngine_API_Update+0x8d8>)
 80119fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fe:	ec51 0b10 	vmov	r0, r1, d0
 8011a02:	f7ee fd9d 	bl	8000540 <__aeabi_dmul>
 8011a06:	4bf2      	ldr	r3, [pc, #968]	; (8011dd0 <iNemoEngine_API_Update+0x8e0>)
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f7ee fbe1 	bl	80001d0 <__aeabi_dsub>
 8011a0e:	f7ef f847 	bl	8000aa0 <__aeabi_d2f>
 8011a12:	ee08 0a10 	vmov	s16, r0
 8011a16:	e6a0      	b.n	801175a <iNemoEngine_API_Update+0x26a>
 8011a18:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011a1c:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011a20:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011a24:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011a28:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011a2c:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011a30:	ee17 0a90 	vmov	r0, s15
 8011a34:	f7ee fd2c 	bl	8000490 <__aeabi_f2d>
 8011a38:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	460b      	mov	r3, r1
 8011a40:	ee17 0a90 	vmov	r0, s15
 8011a44:	ec43 2b18 	vmov	d8, r2, r3
 8011a48:	f7ee fd22 	bl	8000490 <__aeabi_f2d>
 8011a4c:	eeb0 1a48 	vmov.f32	s2, s16
 8011a50:	eef0 1a68 	vmov.f32	s3, s17
 8011a54:	ec41 0b10 	vmov	d0, r0, r1
 8011a58:	f003 fc7e 	bl	8015358 <atan2>
 8011a5c:	a3da      	add	r3, pc, #872	; (adr r3, 8011dc8 <iNemoEngine_API_Update+0x8d8>)
 8011a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a62:	ec51 0b10 	vmov	r0, r1, d0
 8011a66:	f7ee fd6b 	bl	8000540 <__aeabi_dmul>
 8011a6a:	4bd9      	ldr	r3, [pc, #868]	; (8011dd0 <iNemoEngine_API_Update+0x8e0>)
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f7ee fbb1 	bl	80001d4 <__adddf3>
 8011a72:	f7ef f815 	bl	8000aa0 <__aeabi_d2f>
 8011a76:	ee08 0a10 	vmov	s16, r0
 8011a7a:	e66e      	b.n	801175a <iNemoEngine_API_Update+0x26a>
 8011a7c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	dd44      	ble.n	8011b0e <iNemoEngine_API_Update+0x61e>
 8011a84:	3b01      	subs	r3, #1
 8011a86:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8011a8a:	e55c      	b.n	8011546 <iNemoEngine_API_Update+0x56>
 8011a8c:	8863      	ldrh	r3, [r4, #2]
 8011a8e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8011dd4 <iNemoEngine_API_Update+0x8e4>
 8011a92:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8011dd8 <iNemoEngine_API_Update+0x8e8>
 8011a96:	1e5a      	subs	r2, r3, #1
 8011a98:	2a12      	cmp	r2, #18
 8011a9a:	f67f af19 	bls.w	80118d0 <iNemoEngine_API_Update+0x3e0>
 8011a9e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8011aa2:	eddf 2ace 	vldr	s5, [pc, #824]	; 8011ddc <iNemoEngine_API_Update+0x8ec>
 8011aa6:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8011aaa:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011aae:	ee34 4a22 	vadd.f32	s8, s8, s5
 8011ab2:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8011ab6:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8011aba:	2300      	movs	r3, #0
 8011abc:	8063      	strh	r3, [r4, #2]
 8011abe:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8011ac2:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8011ac6:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8011de0 <iNemoEngine_API_Update+0x8f0>
 8011aca:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8011ace:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011ad2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011ad6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011ada:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8011ade:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8011ae2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8011ae6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011aea:	e71a      	b.n	8011922 <iNemoEngine_API_Update+0x432>
 8011aec:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8011af0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011af4:	edd4 0a05 	vldr	s1, [r4, #20]
 8011af8:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8011de4 <iNemoEngine_API_Update+0x8f4>
 8011afc:	e6e3      	b.n	80118c6 <iNemoEngine_API_Update+0x3d6>
 8011afe:	edd4 0a05 	vldr	s1, [r4, #20]
 8011b02:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8011de8 <iNemoEngine_API_Update+0x8f8>
 8011b06:	e6de      	b.n	80118c6 <iNemoEngine_API_Update+0x3d6>
 8011b08:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8011dec <iNemoEngine_API_Update+0x8fc>
 8011b0c:	e6ef      	b.n	80118ee <iNemoEngine_API_Update+0x3fe>
 8011b0e:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8011b12:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8011b16:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8011b1a:	ed97 5a00 	vldr	s10, [r7]
 8011b1e:	ed92 da00 	vldr	s26, [r2]
 8011b22:	ed93 6a00 	vldr	s12, [r3]
 8011b26:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8011dd4 <iNemoEngine_API_Update+0x8e4>
 8011b2a:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8011b2e:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8011b32:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8011b36:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8011b3a:	ed91 3a00 	vldr	s6, [r1]
 8011b3e:	ed92 1a00 	vldr	s2, [r2]
 8011b42:	ed97 7a00 	vldr	s14, [r7]
 8011b46:	edd3 3a00 	vldr	s7, [r3]
 8011b4a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8011b4e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8011b52:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8011b56:	ed91 ba00 	vldr	s22, [r1]
 8011b5a:	edd0 6a00 	vldr	s13, [r0]
 8011b5e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8011b62:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8011b66:	edd1 aa00 	vldr	s21, [r1]
 8011b6a:	ed92 2a00 	vldr	s4, [r2]
 8011b6e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8011b72:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8011b76:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 8011b7a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 8011b7e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8011b82:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8011b86:	edd0 7a00 	vldr	s15, [r0]
 8011b8a:	edd2 1a00 	vldr	s3, [r2]
 8011b8e:	ed93 ca00 	vldr	s24, [r3]
 8011b92:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8011b96:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8011b9a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 8011b9e:	ed91 5a00 	vldr	s10, [r1]
 8011ba2:	edd0 5a00 	vldr	s11, [r0]
 8011ba6:	edd7 9a00 	vldr	s19, [r7]
 8011baa:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8011bae:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8011bb2:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8011bb6:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8011bba:	edd0 2a00 	vldr	s5, [r0]
 8011bbe:	edd3 0a00 	vldr	s1, [r3]
 8011bc2:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8011bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011bca:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011bce:	edd7 7a00 	vldr	s15, [r7]
 8011bd2:	edd0 5a00 	vldr	s11, [r0]
 8011bd6:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 8011bda:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 8011bde:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 8011be2:	ed93 6a00 	vldr	s12, [r3]
 8011be6:	edda ba00 	vldr	s23, [sl]
 8011bea:	ed99 5a00 	vldr	s10, [r9]
 8011bee:	ee76 6a83 	vadd.f32	s13, s13, s6
 8011bf2:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 8011bf6:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8011bfa:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8011bfe:	eed7 5a84 	vfnms.f32	s11, s15, s8
 8011c02:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 8011c06:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8011c0a:	eddc 4a00 	vldr	s9, [ip]
 8011c0e:	edd3 7a00 	vldr	s15, [r3]
 8011c12:	ed98 1a00 	vldr	s2, [r8]
 8011c16:	edde 8a00 	vldr	s17, [lr]
 8011c1a:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8011c1e:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 8011c22:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 8011c26:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8011c2a:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8011c2e:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 8011c32:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 8011c36:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8011c3a:	ed9c aa00 	vldr	s20, [ip]
 8011c3e:	eeed 6a03 	vfma.f32	s13, s26, s6
 8011c42:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8011c46:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8011c4a:	ed92 da00 	vldr	s26, [r2]
 8011c4e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8011c52:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8011c56:	ed91 ba00 	vldr	s22, [r1]
 8011c5a:	eef0 ca61 	vmov.f32	s25, s3
 8011c5e:	eddb 1a00 	vldr	s3, [fp]
 8011c62:	edd3 ba00 	vldr	s23, [r3]
 8011c66:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 8011c6a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 8011c6e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8011c72:	1c53      	adds	r3, r2, #1
 8011c74:	eeea 3a83 	vfma.f32	s7, s21, s6
 8011c78:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 8011c7c:	edd8 aa00 	vldr	s21, [r8]
 8011c80:	eee6 1a03 	vfma.f32	s3, s12, s6
 8011c84:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8011c88:	ed9e 6a00 	vldr	s12, [lr]
 8011c8c:	edd7 aa00 	vldr	s21, [r7]
 8011c90:	eee6 7a03 	vfma.f32	s15, s12, s6
 8011c94:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8011c98:	ed9c 6a00 	vldr	s12, [ip]
 8011c9c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8011ca0:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8011ca4:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8011ca8:	ee2a 4a00 	vmul.f32	s8, s20, s0
 8011cac:	ee22 2a00 	vmul.f32	s4, s4, s0
 8011cb0:	ee62 2a80 	vmul.f32	s5, s5, s0
 8011cb4:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8011cb8:	ed90 0a00 	vldr	s0, [r0]
 8011cbc:	ee64 7a27 	vmul.f32	s15, s8, s15
 8011cc0:	ee36 6a00 	vadd.f32	s12, s12, s0
 8011cc4:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8011cc8:	ed91 0a00 	vldr	s0, [r1]
 8011ccc:	ee35 5a28 	vadd.f32	s10, s10, s17
 8011cd0:	ee66 6a82 	vmul.f32	s13, s13, s4
 8011cd4:	ee22 7a87 	vmul.f32	s14, s5, s14
 8011cd8:	ee64 5a25 	vmul.f32	s11, s8, s11
 8011cdc:	eee0 4a83 	vfma.f32	s9, s1, s6
 8011ce0:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8011ce4:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8011ce8:	eea1 5a03 	vfma.f32	s10, s2, s6
 8011cec:	eea0 6a03 	vfma.f32	s12, s0, s6
 8011cf0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011cf4:	ee63 3a82 	vmul.f32	s7, s7, s4
 8011cf8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011cfc:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8011d00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011d04:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8011d08:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011d0c:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8011d10:	ee24 6a06 	vmul.f32	s12, s8, s12
 8011d14:	ee62 4a24 	vmul.f32	s9, s4, s9
 8011d18:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011d1c:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8011d20:	eea5 7a05 	vfma.f32	s14, s10, s10
 8011d24:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011d28:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8011d2c:	eef1 6ac7 	vsqrt.f32	s13, s14
 8011d30:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011d34:	ee07 3a90 	vmov	s15, r3
 8011d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d3c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011d40:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8011d44:	b21b      	sxth	r3, r3
 8011d46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011d4a:	ee07 2a90 	vmov	s15, r2
 8011d4e:	ed90 4a00 	vldr	s8, [r0]
 8011d52:	edd1 4a00 	vldr	s9, [r1]
 8011d56:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8011d5a:	edd7 7a00 	vldr	s15, [r7]
 8011d5e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8011d62:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8011d66:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8011d6a:	ee66 7a05 	vmul.f32	s15, s12, s10
 8011d6e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011d72:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011d76:	edc7 7a00 	vstr	s15, [r7]
 8011d7a:	edc0 6a00 	vstr	s13, [r0]
 8011d7e:	ed81 7a00 	vstr	s14, [r1]
 8011d82:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8011d86:	f47f abde 	bne.w	8011546 <iNemoEngine_API_Update+0x56>
 8011d8a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011d8e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d92:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011d96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	edc4 6a07 	vstr	s13, [r4, #28]
 8011da2:	ed84 7a08 	vstr	s14, [r4, #32]
 8011da6:	edc4 7a06 	vstr	s15, [r4, #24]
 8011daa:	603b      	str	r3, [r7, #0]
 8011dac:	6003      	str	r3, [r0, #0]
 8011dae:	600b      	str	r3, [r1, #0]
 8011db0:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8011db4:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8011db8:	f7ff bbc5 	b.w	8011546 <iNemoEngine_API_Update+0x56>
 8011dbc:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011df0 <iNemoEngine_API_Update+0x900>
 8011dc0:	e4da      	b.n	8011778 <iNemoEngine_API_Update+0x288>
 8011dc2:	bf00      	nop
 8011dc4:	f3af 8000 	nop.w
 8011dc8:	20000000 	.word	0x20000000
 8011dcc:	404ca5dc 	.word	0x404ca5dc
 8011dd0:	40568000 	.word	0x40568000
 8011dd4:	3dcccccd 	.word	0x3dcccccd
 8011dd8:	3a83126f 	.word	0x3a83126f
 8011ddc:	358637bd 	.word	0x358637bd
 8011de0:	3f333333 	.word	0x3f333333
 8011de4:	3727c5ac 	.word	0x3727c5ac
 8011de8:	3ac49ba6 	.word	0x3ac49ba6
 8011dec:	3e4ccccd 	.word	0x3e4ccccd
 8011df0:	00000000 	.word	0x00000000

08011df4 <MEMS_getSensorData_I16>:
 8011df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011df8:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8011dfc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011e00:	68c5      	ldr	r5, [r0, #12]
 8011e02:	4596      	cmp	lr, r2
 8011e04:	fa1f f882 	uxth.w	r8, r2
 8011e08:	d94d      	bls.n	8011ea6 <MEMS_getSensorData_I16+0xb2>
 8011e0a:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011e0e:	fb04 5313 	mls	r3, r4, r3, r5
 8011e12:	ebae 0c02 	sub.w	ip, lr, r2
 8011e16:	f8a1 8004 	strh.w	r8, [r1, #4]
 8011e1a:	600b      	str	r3, [r1, #0]
 8011e1c:	fa5f fc8c 	uxtb.w	ip, ip
 8011e20:	4647      	mov	r7, r8
 8011e22:	f1b8 0f00 	cmp.w	r8, #0
 8011e26:	d017      	beq.n	8011e58 <MEMS_getSensorData_I16+0x64>
 8011e28:	688e      	ldr	r6, [r1, #8]
 8011e2a:	6905      	ldr	r5, [r0, #16]
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8011e32:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8011e36:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8011e3a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8011e3e:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8011e42:	f8c1 9002 	str.w	r9, [r1, #2]
 8011e46:	3301      	adds	r3, #1
 8011e48:	88e4      	ldrh	r4, [r4, #6]
 8011e4a:	80cc      	strh	r4, [r1, #6]
 8011e4c:	b2d9      	uxtb	r1, r3
 8011e4e:	42b9      	cmp	r1, r7
 8011e50:	460b      	mov	r3, r1
 8011e52:	d3ec      	bcc.n	8011e2e <MEMS_getSensorData_I16+0x3a>
 8011e54:	45c6      	cmp	lr, r8
 8011e56:	d934      	bls.n	8011ec2 <MEMS_getSensorData_I16+0xce>
 8011e58:	ebae 0308 	sub.w	r3, lr, r8
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	8103      	strh	r3, [r0, #8]
 8011e60:	f1bc 0f00 	cmp.w	ip, #0
 8011e64:	d01d      	beq.n	8011ea2 <MEMS_getSensorData_I16+0xae>
 8011e66:	6903      	ldr	r3, [r0, #16]
 8011e68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011e6c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011e70:	f103 000a 	add.w	r0, r3, #10
 8011e74:	fa5f fc8c 	uxtb.w	ip, ip
 8011e78:	3202      	adds	r2, #2
 8011e7a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8011e7e:	3302      	adds	r3, #2
 8011e80:	2400      	movs	r4, #0
 8011e82:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8011e86:	f803 1c02 	strb.w	r1, [r3, #-2]
 8011e8a:	6811      	ldr	r1, [r2, #0]
 8011e8c:	6019      	str	r1, [r3, #0]
 8011e8e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8011e92:	8099      	strh	r1, [r3, #4]
 8011e94:	3308      	adds	r3, #8
 8011e96:	4283      	cmp	r3, r0
 8011e98:	f802 4c02 	strb.w	r4, [r2, #-2]
 8011e9c:	f102 0208 	add.w	r2, r2, #8
 8011ea0:	d1ef      	bne.n	8011e82 <MEMS_getSensorData_I16+0x8e>
 8011ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ea6:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011eaa:	fb04 5313 	mls	r3, r4, r3, r5
 8011eae:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011eb2:	600b      	str	r3, [r1, #0]
 8011eb4:	f1be 0f00 	cmp.w	lr, #0
 8011eb8:	d005      	beq.n	8011ec6 <MEMS_getSensorData_I16+0xd2>
 8011eba:	4677      	mov	r7, lr
 8011ebc:	f04f 0c00 	mov.w	ip, #0
 8011ec0:	e7b2      	b.n	8011e28 <MEMS_getSensorData_I16+0x34>
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	e7cb      	b.n	8011e5e <MEMS_getSensorData_I16+0x6a>
 8011ec6:	f8a0 e008 	strh.w	lr, [r0, #8]
 8011eca:	e7ea      	b.n	8011ea2 <MEMS_getSensorData_I16+0xae>

08011ecc <MEMS_SolveLinearEq>:
 8011ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed0:	ed2d 8b0c 	vpush	{d8-d13}
 8011ed4:	4617      	mov	r7, r2
 8011ed6:	2400      	movs	r4, #0
 8011ed8:	b0a9      	sub	sp, #164	; 0xa4
 8011eda:	2200      	movs	r2, #0
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	460d      	mov	r5, r1
 8011ee0:	2240      	movs	r2, #64	; 0x40
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	4680      	mov	r8, r0
 8011ee6:	603c      	str	r4, [r7, #0]
 8011ee8:	607c      	str	r4, [r7, #4]
 8011eea:	60bc      	str	r4, [r7, #8]
 8011eec:	60fc      	str	r4, [r7, #12]
 8011eee:	a808      	add	r0, sp, #32
 8011ef0:	461e      	mov	r6, r3
 8011ef2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ef6:	e9cd 4400 	strd	r4, r4, [sp]
 8011efa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8011efe:	f004 ffa3 	bl	8016e48 <memset>
 8011f02:	4621      	mov	r1, r4
 8011f04:	a818      	add	r0, sp, #96	; 0x60
 8011f06:	2240      	movs	r2, #64	; 0x40
 8011f08:	f004 ff9e 	bl	8016e48 <memset>
 8011f0c:	edd5 2a03 	vldr	s5, [r5, #12]
 8011f10:	eddf 7ae4 	vldr	s15, [pc, #912]	; 80122a4 <MEMS_SolveLinearEq+0x3d8>
 8011f14:	eef4 2ae7 	vcmpe.f32	s5, s15
 8011f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f1c:	d47e      	bmi.n	801201c <MEMS_SolveLinearEq+0x150>
 8011f1e:	f898 1000 	ldrb.w	r1, [r8]
 8011f22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8011f26:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8011f2a:	4291      	cmp	r1, r2
 8011f2c:	d07c      	beq.n	8012028 <MEMS_SolveLinearEq+0x15c>
 8011f2e:	3301      	adds	r3, #1
 8011f30:	1a58      	subs	r0, r3, r1
 8011f32:	fb90 f3f2 	sdiv	r3, r0, r2
 8011f36:	fb02 0313 	mls	r3, r2, r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	bfb8      	it	lt
 8011f3e:	189b      	addlt	r3, r3, r2
 8011f40:	b21b      	sxth	r3, r3
 8011f42:	2900      	cmp	r1, #0
 8011f44:	f000 81d6 	beq.w	80122f4 <MEMS_SolveLinearEq+0x428>
 8011f48:	3901      	subs	r1, #1
 8011f4a:	b2c9      	uxtb	r1, r1
 8011f4c:	3101      	adds	r1, #1
 8011f4e:	edd5 3a00 	vldr	s7, [r5]
 8011f52:	ed95 4a01 	vldr	s8, [r5, #4]
 8011f56:	edd5 4a02 	vldr	s9, [r5, #8]
 8011f5a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8011f5e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 80122a8 <MEMS_SolveLinearEq+0x3dc>
 8011f62:	4419      	add	r1, r3
 8011f64:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8011f68:	fb93 f4f2 	sdiv	r4, r3, r2
 8011f6c:	fb02 3414 	mls	r4, r2, r4, r3
 8011f70:	b2e4      	uxtb	r4, r4
 8011f72:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8011f76:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8011f7a:	ee07 0a90 	vmov	s15, r0
 8011f7e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8011f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f86:	ee06 0a10 	vmov	s12, r0
 8011f8a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011f8e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8011f92:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8011f96:	ee77 6ac4 	vsub.f32	s13, s15, s8
 8011f9a:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011f9e:	ee07 0a10 	vmov	s14, r0
 8011fa2:	ee36 5a63 	vsub.f32	s10, s12, s7
 8011fa6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011faa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011fae:	eee5 6a05 	vfma.f32	s13, s10, s10
 8011fb2:	ee27 7a08 	vmul.f32	s14, s14, s16
 8011fb6:	ee33 6ac6 	vsub.f32	s12, s7, s12
 8011fba:	ee74 aac7 	vsub.f32	s21, s9, s14
 8011fbe:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011fc2:	ee74 7a67 	vsub.f32	s15, s8, s15
 8011fc6:	eee7 6a07 	vfma.f32	s13, s14, s14
 8011fca:	eef4 6ac2 	vcmpe.f32	s13, s4
 8011fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd2:	d531      	bpl.n	8012038 <MEMS_SolveLinearEq+0x16c>
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	4299      	cmp	r1, r3
 8011fd8:	d1c6      	bne.n	8011f68 <MEMS_SolveLinearEq+0x9c>
 8011fda:	eef0 7a65 	vmov.f32	s15, s11
 8011fde:	2101      	movs	r1, #1
 8011fe0:	4608      	mov	r0, r1
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	e006      	b.n	8011ff4 <MEMS_SolveLinearEq+0x128>
 8011fe6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011fea:	ac28      	add	r4, sp, #160	; 0xa0
 8011fec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ff0:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8011ff4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8011ff8:	3001      	adds	r0, #1
 8011ffa:	ac28      	add	r4, sp, #160	; 0xa0
 8011ffc:	b2c0      	uxtb	r0, r0
 8011ffe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012002:	2804      	cmp	r0, #4
 8012004:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012008:	4613      	mov	r3, r2
 801200a:	d1ec      	bne.n	8011fe6 <MEMS_SolveLinearEq+0x11a>
 801200c:	1c48      	adds	r0, r1, #1
 801200e:	b2c0      	uxtb	r0, r0
 8012010:	2804      	cmp	r0, #4
 8012012:	d076      	beq.n	8012102 <MEMS_SolveLinearEq+0x236>
 8012014:	460b      	mov	r3, r1
 8012016:	460a      	mov	r2, r1
 8012018:	4601      	mov	r1, r0
 801201a:	e7e4      	b.n	8011fe6 <MEMS_SolveLinearEq+0x11a>
 801201c:	2000      	movs	r0, #0
 801201e:	b029      	add	sp, #164	; 0xa4
 8012020:	ecbd 8b0c 	vpop	{d8-d13}
 8012024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012028:	1c5a      	adds	r2, r3, #1
 801202a:	fb92 f3f1 	sdiv	r3, r2, r1
 801202e:	fb01 2313 	mls	r3, r1, r3, r2
 8012032:	b21b      	sxth	r3, r3
 8012034:	460a      	mov	r2, r1
 8012036:	e784      	b.n	8011f42 <MEMS_SolveLinearEq+0x76>
 8012038:	eef1 cae6 	vsqrt.f32	s25, s13
 801203c:	3301      	adds	r3, #1
 801203e:	428b      	cmp	r3, r1
 8012040:	ed9d ca00 	vldr	s24, [sp]
 8012044:	eddd ba08 	vldr	s23, [sp, #32]
 8012048:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 801204c:	ed9d aa01 	vldr	s20, [sp, #4]
 8012050:	eddd 9a02 	vldr	s19, [sp, #8]
 8012054:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012058:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 801205c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012060:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012064:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012068:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 801206c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012070:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012074:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012078:	ee3d da21 	vadd.f32	s26, s26, s3
 801207c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012080:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012084:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012088:	ee72 aaec 	vsub.f32	s21, s5, s25
 801208c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012090:	eea7 ba26 	vfma.f32	s22, s14, s13
 8012094:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012098:	eeaa ca87 	vfma.f32	s24, s21, s14
 801209c:	eee7 ba07 	vfma.f32	s23, s14, s14
 80120a0:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80120a4:	eeea 9aa6 	vfma.f32	s19, s21, s13
 80120a8:	eea7 9aa7 	vfma.f32	s18, s15, s15
 80120ac:	eea6 3aa6 	vfma.f32	s6, s13, s13
 80120b0:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 80120b4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80120b8:	ee30 6a06 	vadd.f32	s12, s0, s12
 80120bc:	ee71 7a67 	vsub.f32	s15, s2, s15
 80120c0:	ee75 6a66 	vsub.f32	s13, s10, s13
 80120c4:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 80120c8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80120cc:	ed8d ca00 	vstr	s24, [sp]
 80120d0:	edcd ba08 	vstr	s23, [sp, #32]
 80120d4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80120d8:	ed8d aa01 	vstr	s20, [sp, #4]
 80120dc:	edcd 9a02 	vstr	s19, [sp, #8]
 80120e0:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80120e4:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 80120e8:	ed8d 6a03 	vstr	s12, [sp, #12]
 80120ec:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80120f0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80120f4:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 80120f8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 80120fc:	f47f af34 	bne.w	8011f68 <MEMS_SolveLinearEq+0x9c>
 8012100:	e76b      	b.n	8011fda <MEMS_SolveLinearEq+0x10e>
 8012102:	2240      	movs	r2, #64	; 0x40
 8012104:	2100      	movs	r1, #0
 8012106:	a818      	add	r0, sp, #96	; 0x60
 8012108:	f004 fe9e 	bl	8016e48 <memset>
 801210c:	ab08      	add	r3, sp, #32
 801210e:	ed9f 5a67 	vldr	s10, [pc, #412]	; 80122ac <MEMS_SolveLinearEq+0x3e0>
 8012112:	4618      	mov	r0, r3
 8012114:	aa18      	add	r2, sp, #96	; 0x60
 8012116:	2100      	movs	r1, #0
 8012118:	b24c      	sxtb	r4, r1
 801211a:	2900      	cmp	r1, #0
 801211c:	f000 80b5 	beq.w	801228a <MEMS_SolveLinearEq+0x3be>
 8012120:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012124:	eeb0 7ae7 	vabs.f32	s14, s15
 8012128:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012130:	f53f af74 	bmi.w	801201c <MEMS_SolveLinearEq+0x150>
 8012134:	ed93 7a00 	vldr	s14, [r3]
 8012138:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801213c:	2c01      	cmp	r4, #1
 801213e:	edc2 6a00 	vstr	s13, [r2]
 8012142:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801214a:	f000 80b5 	beq.w	80122b8 <MEMS_SolveLinearEq+0x3ec>
 801214e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012152:	eeb0 7ac6 	vabs.f32	s14, s12
 8012156:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801215e:	f53f af5d 	bmi.w	801201c <MEMS_SolveLinearEq+0x150>
 8012162:	ed93 7a01 	vldr	s14, [r3, #4]
 8012166:	ee37 7a67 	vsub.f32	s14, s14, s15
 801216a:	2c02      	cmp	r4, #2
 801216c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012170:	edc2 7a01 	vstr	s15, [r2, #4]
 8012174:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012178:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801217c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012180:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012184:	f000 80a7 	beq.w	80122d6 <MEMS_SolveLinearEq+0x40a>
 8012188:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 801218c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012190:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	f53f af40 	bmi.w	801201c <MEMS_SolveLinearEq+0x150>
 801219c:	edd3 5a02 	vldr	s11, [r3, #8]
 80121a0:	ed90 6a00 	vldr	s12, [r0]
 80121a4:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80121a8:	eec7 5a24 	vdiv.f32	s11, s14, s9
 80121ac:	edc2 5a02 	vstr	s11, [r2, #8]
 80121b0:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 80121b4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80121b8:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80121bc:	ee67 7a84 	vmul.f32	s15, s15, s8
 80121c0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80121c4:	eee5 7a87 	vfma.f32	s15, s11, s14
 80121c8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80121cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d0:	f77f af24 	ble.w	801201c <MEMS_SolveLinearEq+0x150>
 80121d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80121d8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80121dc:	ed82 7a03 	vstr	s14, [r2, #12]
 80121e0:	3101      	adds	r1, #1
 80121e2:	2904      	cmp	r1, #4
 80121e4:	f103 0310 	add.w	r3, r3, #16
 80121e8:	f102 0210 	add.w	r2, r2, #16
 80121ec:	f100 0014 	add.w	r0, r0, #20
 80121f0:	d192      	bne.n	8012118 <MEMS_SolveLinearEq+0x24c>
 80121f2:	466a      	mov	r2, sp
 80121f4:	4639      	mov	r1, r7
 80121f6:	a818      	add	r0, sp, #96	; 0x60
 80121f8:	f7f9 f9f2 	bl	800b5e0 <llEvaluate.constprop.0>
 80121fc:	4b2c      	ldr	r3, [pc, #176]	; (80122b0 <MEMS_SolveLinearEq+0x3e4>)
 80121fe:	6033      	str	r3, [r6, #0]
 8012200:	f10d 0910 	add.w	r9, sp, #16
 8012204:	46e8      	mov	r8, sp
 8012206:	f10d 0b0c 	add.w	fp, sp, #12
 801220a:	2400      	movs	r4, #0
 801220c:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012210:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012214:	e9cd 4400 	strd	r4, r4, [sp]
 8012218:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801221c:	466a      	mov	r2, sp
 801221e:	f848 ab04 	str.w	sl, [r8], #4
 8012222:	a904      	add	r1, sp, #16
 8012224:	a818      	add	r0, sp, #96	; 0x60
 8012226:	f7f9 f9db 	bl	800b5e0 <llEvaluate.constprop.0>
 801222a:	ecf9 7a01 	vldmia	r9!, {s15}
 801222e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012236:	dd23      	ble.n	8012280 <MEMS_SolveLinearEq+0x3b4>
 8012238:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801223c:	edd6 7a00 	vldr	s15, [r6]
 8012240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012248:	bfb8      	it	lt
 801224a:	eef0 7a47 	vmovlt.f32	s15, s14
 801224e:	45c3      	cmp	fp, r8
 8012250:	edc6 7a00 	vstr	s15, [r6]
 8012254:	d1de      	bne.n	8012214 <MEMS_SolveLinearEq+0x348>
 8012256:	edd5 7a03 	vldr	s15, [r5, #12]
 801225a:	ed97 7a03 	vldr	s14, [r7, #12]
 801225e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012262:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012266:	2001      	movs	r0, #1
 8012268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012270:	bf48      	it	mi
 8012272:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012276:	b029      	add	sp, #164	; 0xa4
 8012278:	ecbd 8b0c 	vpop	{d8-d13}
 801227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012280:	45c3      	cmp	fp, r8
 8012282:	ed86 0a00 	vstr	s0, [r6]
 8012286:	d1c5      	bne.n	8012214 <MEMS_SolveLinearEq+0x348>
 8012288:	e7e5      	b.n	8012256 <MEMS_SolveLinearEq+0x38a>
 801228a:	edd0 7a00 	vldr	s15, [r0]
 801228e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012296:	f77f aec1 	ble.w	801201c <MEMS_SolveLinearEq+0x150>
 801229a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801229e:	ed82 7a00 	vstr	s14, [r2]
 80122a2:	e79d      	b.n	80121e0 <MEMS_SolveLinearEq+0x314>
 80122a4:	3dcccccd 	.word	0x3dcccccd
 80122a8:	2b8cbccb 	.word	0x2b8cbccb
 80122ac:	358637bd 	.word	0x358637bd
 80122b0:	3dcccccd 	.word	0x3dcccccd
 80122b4:	00000000 	.word	0x00000000
 80122b8:	ed90 7a00 	vldr	s14, [r0]
 80122bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80122c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c4:	f77f aeaa 	ble.w	801201c <MEMS_SolveLinearEq+0x150>
 80122c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122cc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80122d0:	ed82 7a01 	vstr	s14, [r2, #4]
 80122d4:	e784      	b.n	80121e0 <MEMS_SolveLinearEq+0x314>
 80122d6:	edd0 7a00 	vldr	s15, [r0]
 80122da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e2:	f77f ae9b 	ble.w	801201c <MEMS_SolveLinearEq+0x150>
 80122e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80122ea:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80122ee:	ed82 7a02 	vstr	s14, [r2, #8]
 80122f2:	e775      	b.n	80121e0 <MEMS_SolveLinearEq+0x314>
 80122f4:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 80122b4 <MEMS_SolveLinearEq+0x3e8>
 80122f8:	e671      	b.n	8011fde <MEMS_SolveLinearEq+0x112>
 80122fa:	bf00      	nop

080122fc <MEMS_EIG3>:
 80122fc:	edd0 6a02 	vldr	s13, [r0, #8]
 8012300:	ed90 7a01 	vldr	s14, [r0, #4]
 8012304:	edd0 4a04 	vldr	s9, [r0, #16]
 8012308:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012458 <MEMS_EIG3+0x15c>
 801230c:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012310:	b510      	push	{r4, lr}
 8012312:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012316:	460c      	mov	r4, r1
 8012318:	ed2d 8b04 	vpush	{d8-d9}
 801231c:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012320:	b08a      	sub	sp, #40	; 0x28
 8012322:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232a:	d509      	bpl.n	8012340 <MEMS_EIG3+0x44>
 801232c:	6803      	ldr	r3, [r0, #0]
 801232e:	600b      	str	r3, [r1, #0]
 8012330:	68c3      	ldr	r3, [r0, #12]
 8012332:	604b      	str	r3, [r1, #4]
 8012334:	6943      	ldr	r3, [r0, #20]
 8012336:	608b      	str	r3, [r1, #8]
 8012338:	b00a      	add	sp, #40	; 0x28
 801233a:	ecbd 8b04 	vpop	{d8-d9}
 801233e:	bd10      	pop	{r4, pc}
 8012340:	ed90 4a00 	vldr	s8, [r0]
 8012344:	edd0 5a03 	vldr	s11, [r0, #12]
 8012348:	edd0 2a05 	vldr	s5, [r0, #20]
 801234c:	eddf 9a43 	vldr	s19, [pc, #268]	; 801245c <MEMS_EIG3+0x160>
 8012350:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012460 <MEMS_EIG3+0x164>
 8012354:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012358:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 801235c:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012360:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012364:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012368:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 801236c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012370:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012374:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012378:	ee72 2ac8 	vsub.f32	s5, s5, s16
 801237c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012380:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012384:	eef0 7a45 	vmov.f32	s15, s10
 8012388:	eee2 7aa2 	vfma.f32	s15, s5, s5
 801238c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012390:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012394:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012398:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 801239c:	eec4 2a28 	vdiv.f32	s5, s8, s17
 80123a0:	ee66 6a26 	vmul.f32	s13, s12, s13
 80123a4:	ee65 5a86 	vmul.f32	s11, s11, s12
 80123a8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80123ac:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 80123b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80123b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80123b8:	ee66 4a46 	vnmul.f32	s9, s12, s12
 80123bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80123c0:	eee5 4a85 	vfma.f32	s9, s11, s10
 80123c4:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80123c8:	eee4 7aa2 	vfma.f32	s15, s9, s5
 80123cc:	eea6 5a26 	vfma.f32	s10, s12, s13
 80123d0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80123d4:	eef4 7ac3 	vcmpe.f32	s15, s6
 80123d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123dc:	d909      	bls.n	80123f2 <MEMS_EIG3+0xf6>
 80123de:	eef4 7ae3 	vcmpe.f32	s15, s7
 80123e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e6:	db22      	blt.n	801242e <MEMS_EIG3+0x132>
 80123e8:	eeb0 9a40 	vmov.f32	s18, s0
 80123ec:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012464 <MEMS_EIG3+0x168>
 80123f0:	e003      	b.n	80123fa <MEMS_EIG3+0xfe>
 80123f2:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012468 <MEMS_EIG3+0x16c>
 80123f6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80123fa:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80123fe:	eef0 7a48 	vmov.f32	s15, s16
 8012402:	eeb0 7a48 	vmov.f32	s14, s16
 8012406:	eee8 7a89 	vfma.f32	s15, s17, s18
 801240a:	eea8 7a80 	vfma.f32	s14, s17, s0
 801240e:	edc4 7a00 	vstr	s15, [r4]
 8012412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012416:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801241a:	eed8 7a26 	vfnms.f32	s15, s16, s13
 801241e:	ed84 7a02 	vstr	s14, [r4, #8]
 8012422:	edc4 7a01 	vstr	s15, [r4, #4]
 8012426:	b00a      	add	sp, #40	; 0x28
 8012428:	ecbd 8b04 	vpop	{d8-d9}
 801242c:	bd10      	pop	{r4, pc}
 801242e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012432:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012436:	f002 ffc5 	bl	80153c4 <acosf>
 801243a:	ee60 9a29 	vmul.f32	s19, s0, s19
 801243e:	eeb0 0a69 	vmov.f32	s0, s19
 8012442:	f002 feb9 	bl	80151b8 <cosf>
 8012446:	eeb0 9a40 	vmov.f32	s18, s0
 801244a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801246c <MEMS_EIG3+0x170>
 801244e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012452:	f002 feb1 	bl	80151b8 <cosf>
 8012456:	e7d0      	b.n	80123fa <MEMS_EIG3+0xfe>
 8012458:	358637bd 	.word	0x358637bd
 801245c:	3eaaaaab 	.word	0x3eaaaaab
 8012460:	3e2aaaab 	.word	0x3e2aaaab
 8012464:	bf000001 	.word	0xbf000001
 8012468:	3effffff 	.word	0x3effffff
 801246c:	40060a92 	.word	0x40060a92

08012470 <MEMS_runMagCal>:
 8012470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	ed2d 8b0a 	vpush	{d8-d12}
 8012478:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 801247c:	2282      	movs	r2, #130	; 0x82
 801247e:	ab36      	add	r3, sp, #216	; 0xd8
 8012480:	460c      	mov	r4, r1
 8012482:	9105      	str	r1, [sp, #20]
 8012484:	4683      	mov	fp, r0
 8012486:	4608      	mov	r0, r1
 8012488:	a917      	add	r1, sp, #92	; 0x5c
 801248a:	9319      	str	r3, [sp, #100]	; 0x64
 801248c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012490:	f7ff fcb0 	bl	8011df4 <MEMS_getSensorData_I16>
 8012494:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012498:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801249c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801249e:	9209      	str	r2, [sp, #36]	; 0x24
 80124a0:	f108 31ff 	add.w	r1, r8, #4294967295
 80124a4:	9106      	str	r1, [sp, #24]
 80124a6:	fb01 2103 	mla	r1, r1, r3, r2
 80124aa:	9108      	str	r1, [sp, #32]
 80124ac:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 80124b0:	f1b8 0f00 	cmp.w	r8, #0
 80124b4:	f000 8417 	beq.w	8012ce6 <MEMS_runMagCal+0x876>
 80124b8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80124bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124c0:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 80124c4:	fb02 f203 	mul.w	r2, r2, r3
 80124c8:	31a0      	adds	r1, #160	; 0xa0
 80124ca:	4291      	cmp	r1, r2
 80124cc:	f080 8411 	bcs.w	8012cf2 <MEMS_runMagCal+0x882>
 80124d0:	3b00      	subs	r3, #0
 80124d2:	bf18      	it	ne
 80124d4:	2301      	movne	r3, #1
 80124d6:	e9cb 3301 	strd	r3, r3, [fp, #4]
 80124da:	2200      	movs	r2, #0
 80124dc:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80124e0:	f8cb 200c 	str.w	r2, [fp, #12]
 80124e4:	2300      	movs	r3, #0
 80124e6:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 80124ea:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 80124ee:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 80124f2:	22ff      	movs	r2, #255	; 0xff
 80124f4:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80124f8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80124fc:	4cd5      	ldr	r4, [pc, #852]	; (8012854 <MEMS_runMagCal+0x3e4>)
 80124fe:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8012860 <MEMS_runMagCal+0x3f0>
 8012502:	9b05      	ldr	r3, [sp, #20]
 8012504:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012508:	edd3 5a01 	vldr	s11, [r3, #4]
 801250c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012510:	4652      	mov	r2, sl
 8012512:	2a03      	cmp	r2, #3
 8012514:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012518:	bf28      	it	cs
 801251a:	2203      	movcs	r2, #3
 801251c:	2100      	movs	r1, #0
 801251e:	9207      	str	r2, [sp, #28]
 8012520:	eeb0 0a67 	vmov.f32	s0, s15
 8012524:	464b      	mov	r3, r9
 8012526:	9402      	str	r4, [sp, #8]
 8012528:	4627      	mov	r7, r4
 801252a:	9503      	str	r5, [sp, #12]
 801252c:	462e      	mov	r6, r5
 801252e:	460a      	mov	r2, r1
 8012530:	9404      	str	r4, [sp, #16]
 8012532:	7818      	ldrb	r0, [r3, #0]
 8012534:	3201      	adds	r2, #1
 8012536:	b292      	uxth	r2, r2
 8012538:	2800      	cmp	r0, #0
 801253a:	d04b      	beq.n	80125d4 <MEMS_runMagCal+0x164>
 801253c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012540:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012544:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012548:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801254c:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012550:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012554:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012558:	9c02      	ldr	r4, [sp, #8]
 801255a:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 801255e:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012562:	ee07 ea90 	vmov	s15, lr
 8012566:	ee07 ca10 	vmov	s14, ip
 801256a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801256e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012572:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012576:	ee37 7a44 	vsub.f32	s14, s14, s8
 801257a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801257e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012582:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012586:	4574      	cmp	r4, lr
 8012588:	eee7 7a07 	vfma.f32	s15, s14, s14
 801258c:	bfb8      	it	lt
 801258e:	4674      	movlt	r4, lr
 8012590:	9402      	str	r4, [sp, #8]
 8012592:	ee07 0a10 	vmov	s14, r0
 8012596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801259a:	9c03      	ldr	r4, [sp, #12]
 801259c:	ee37 0a80 	vadd.f32	s0, s15, s0
 80125a0:	ee77 7a46 	vsub.f32	s15, s14, s12
 80125a4:	4574      	cmp	r4, lr
 80125a6:	bfa8      	it	ge
 80125a8:	4674      	movge	r4, lr
 80125aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80125ae:	4567      	cmp	r7, ip
 80125b0:	9403      	str	r4, [sp, #12]
 80125b2:	9c04      	ldr	r4, [sp, #16]
 80125b4:	bfb8      	it	lt
 80125b6:	4667      	movlt	r7, ip
 80125b8:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80125bc:	4566      	cmp	r6, ip
 80125be:	bfa8      	it	ge
 80125c0:	4666      	movge	r6, ip
 80125c2:	4284      	cmp	r4, r0
 80125c4:	bfb8      	it	lt
 80125c6:	4604      	movlt	r4, r0
 80125c8:	3101      	adds	r1, #1
 80125ca:	4285      	cmp	r5, r0
 80125cc:	b249      	sxtb	r1, r1
 80125ce:	9404      	str	r4, [sp, #16]
 80125d0:	bfa8      	it	ge
 80125d2:	4605      	movge	r5, r0
 80125d4:	9807      	ldr	r0, [sp, #28]
 80125d6:	4282      	cmp	r2, r0
 80125d8:	f103 0308 	add.w	r3, r3, #8
 80125dc:	d9a9      	bls.n	8012532 <MEMS_runMagCal+0xc2>
 80125de:	4590      	cmp	r8, r2
 80125e0:	9c04      	ldr	r4, [sp, #16]
 80125e2:	f240 8767 	bls.w	80134b4 <MEMS_runMagCal+0x1044>
 80125e6:	ebaa 0a02 	sub.w	sl, sl, r2
 80125ea:	fa12 fa8a 	uxtah	sl, r2, sl
 80125ee:	f109 0308 	add.w	r3, r9, #8
 80125f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80125f6:	9307      	str	r3, [sp, #28]
 80125f8:	2300      	movs	r3, #0
 80125fa:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80125fe:	9304      	str	r3, [sp, #16]
 8012600:	7813      	ldrb	r3, [r2, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	f000 8096 	beq.w	8012734 <MEMS_runMagCal+0x2c4>
 8012608:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801260c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012610:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012614:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012618:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 801261c:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012620:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012624:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012628:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 801262c:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012630:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012634:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012638:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 801263c:	ebae 0808 	sub.w	r8, lr, r8
 8012640:	eba0 000a 	sub.w	r0, r0, sl
 8012644:	ee07 ca10 	vmov	s14, ip
 8012648:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 801264c:	ee07 0a90 	vmov	s15, r0
 8012650:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012654:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012658:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 801265c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012660:	eba3 030a 	sub.w	r3, r3, sl
 8012664:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801266c:	ee06 ea90 	vmov	s13, lr
 8012670:	ebac 0909 	sub.w	r9, ip, r9
 8012674:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012678:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 801267c:	eef0 7ae7 	vabs.f32	s15, s15
 8012680:	ee06 9a90 	vmov	s13, r9
 8012684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012688:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801268c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012690:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012694:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012698:	eef0 6ae6 	vabs.f32	s13, s13
 801269c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126a0:	eba0 0808 	sub.w	r8, r0, r8
 80126a4:	ee06 0a90 	vmov	s13, r0
 80126a8:	eba3 0309 	sub.w	r3, r3, r9
 80126ac:	ee35 5a63 	vsub.f32	s10, s10, s7
 80126b0:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 80126b4:	ee25 5a06 	vmul.f32	s10, s10, s12
 80126b8:	9b02      	ldr	r3, [sp, #8]
 80126ba:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80126be:	4577      	cmp	r7, lr
 80126c0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80126c4:	ee06 8a90 	vmov	s13, r8
 80126c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126cc:	bfb8      	it	lt
 80126ce:	4677      	movlt	r7, lr
 80126d0:	4576      	cmp	r6, lr
 80126d2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80126d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80126da:	bfa8      	it	ge
 80126dc:	4676      	movge	r6, lr
 80126de:	4563      	cmp	r3, ip
 80126e0:	bfb8      	it	lt
 80126e2:	4663      	movlt	r3, ip
 80126e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126e8:	eea5 7a05 	vfma.f32	s14, s10, s10
 80126ec:	9302      	str	r3, [sp, #8]
 80126ee:	9b03      	ldr	r3, [sp, #12]
 80126f0:	eef0 6ae6 	vabs.f32	s13, s13
 80126f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80126f8:	4563      	cmp	r3, ip
 80126fa:	ee36 6a44 	vsub.f32	s12, s12, s8
 80126fe:	bfa8      	it	ge
 8012700:	4663      	movge	r3, ip
 8012702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012706:	4284      	cmp	r4, r0
 8012708:	ee37 0a00 	vadd.f32	s0, s14, s0
 801270c:	bfb8      	it	lt
 801270e:	4604      	movlt	r4, r0
 8012710:	ee26 7a24 	vmul.f32	s14, s12, s9
 8012714:	4285      	cmp	r5, r0
 8012716:	bfa8      	it	ge
 8012718:	4605      	movge	r5, r0
 801271a:	9303      	str	r3, [sp, #12]
 801271c:	ee17 0a90 	vmov	r0, s15
 8012720:	9b04      	ldr	r3, [sp, #16]
 8012722:	eea7 0a07 	vfma.f32	s0, s14, s14
 8012726:	4283      	cmp	r3, r0
 8012728:	f101 0101 	add.w	r1, r1, #1
 801272c:	bf38      	it	cc
 801272e:	4603      	movcc	r3, r0
 8012730:	b249      	sxtb	r1, r1
 8012732:	9304      	str	r3, [sp, #16]
 8012734:	9b07      	ldr	r3, [sp, #28]
 8012736:	3208      	adds	r2, #8
 8012738:	4293      	cmp	r3, r2
 801273a:	f47f af61 	bne.w	8012600 <MEMS_runMagCal+0x190>
 801273e:	2900      	cmp	r1, #0
 8012740:	f000 86b6 	beq.w	80134b0 <MEMS_runMagCal+0x1040>
 8012744:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012748:	f280 82df 	bge.w	8012d0a <MEMS_runMagCal+0x89a>
 801274c:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012750:	f2c0 82db 	blt.w	8012d0a <MEMS_runMagCal+0x89a>
 8012754:	9b02      	ldr	r3, [sp, #8]
 8012756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801275a:	f280 82d6 	bge.w	8012d0a <MEMS_runMagCal+0x89a>
 801275e:	9a03      	ldr	r2, [sp, #12]
 8012760:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012764:	f2c0 82d1 	blt.w	8012d0a <MEMS_runMagCal+0x89a>
 8012768:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801276c:	f280 82cd 	bge.w	8012d0a <MEMS_runMagCal+0x89a>
 8012770:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012774:	f2c0 82c9 	blt.w	8012d0a <MEMS_runMagCal+0x89a>
 8012778:	ee07 1a90 	vmov	s15, r1
 801277c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012784:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8012788:	1bbe      	subs	r6, r7, r6
 801278a:	1a9f      	subs	r7, r3, r2
 801278c:	42be      	cmp	r6, r7
 801278e:	4633      	mov	r3, r6
 8012790:	eba4 0405 	sub.w	r4, r4, r5
 8012794:	bfb8      	it	lt
 8012796:	463b      	movlt	r3, r7
 8012798:	42a3      	cmp	r3, r4
 801279a:	bfb8      	it	lt
 801279c:	4623      	movlt	r3, r4
 801279e:	eec7 6a25 	vdiv.f32	s13, s14, s11
 80127a2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80127a6:	ee07 3a10 	vmov	s14, r3
 80127aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012858 <MEMS_runMagCal+0x3e8>
 80127ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80127b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127b6:	ee25 0a80 	vmul.f32	s0, s11, s0
 80127ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127c2:	f100 82a2 	bmi.w	8012d0a <MEMS_runMagCal+0x89a>
 80127c6:	eddd 7a04 	vldr	s15, [sp, #16]
 80127ca:	ed9f 6a24 	vldr	s12, [pc, #144]	; 801285c <MEMS_runMagCal+0x3ec>
 80127ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127d2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80127d6:	eef4 5ac6 	vcmpe.f32	s11, s12
 80127da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127de:	f300 8294 	bgt.w	8012d0a <MEMS_runMagCal+0x89a>
 80127e2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80127e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80127ea:	eef4 6ac7 	vcmpe.f32	s13, s14
 80127ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f2:	f301 81f8 	bgt.w	8013be6 <MEMS_runMagCal+0x1776>
 80127f6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80127fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012806:	f340 8552 	ble.w	80132ae <MEMS_runMagCal+0xe3e>
 801280a:	ee07 6a90 	vmov	s15, r6
 801280e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012816:	eef4 7ae6 	vcmpe.f32	s15, s13
 801281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801281e:	f340 8546 	ble.w	80132ae <MEMS_runMagCal+0xe3e>
 8012822:	ee07 7a90 	vmov	s15, r7
 8012826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801282a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012832:	f140 853c 	bpl.w	80132ae <MEMS_runMagCal+0xe3e>
 8012836:	ee07 4a90 	vmov	s15, r4
 801283a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801283e:	2300      	movs	r3, #0
 8012840:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012848:	9303      	str	r3, [sp, #12]
 801284a:	bf48      	it	mi
 801284c:	2301      	movmi	r3, #1
 801284e:	9307      	str	r3, [sp, #28]
 8012850:	f000 bd30 	b.w	80132b4 <MEMS_runMagCal+0xe44>
 8012854:	ffff8000 	.word	0xffff8000
 8012858:	43020000 	.word	0x43020000
 801285c:	447a0000 	.word	0x447a0000
 8012860:	00000000 	.word	0x00000000
 8012864:	41f00001 	.word	0x41f00001
 8012868:	400ccccd 	.word	0x400ccccd
 801286c:	3dcccccd 	.word	0x3dcccccd
 8012870:	423c0000 	.word	0x423c0000
 8012874:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012860 <MEMS_runMagCal+0x3f0>
 8012878:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8012864 <MEMS_runMagCal+0x3f4>
 801287c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012880:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012888:	dc10      	bgt.n	80128ac <MEMS_runMagCal+0x43c>
 801288a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8012868 <MEMS_runMagCal+0x3f8>
 801288e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012896:	dc09      	bgt.n	80128ac <MEMS_runMagCal+0x43c>
 8012898:	ed94 9a03 	vldr	s18, [r4, #12]
 801289c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801286c <MEMS_runMagCal+0x3fc>
 80128a0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80128a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a8:	f201 8527 	bhi.w	80142fa <MEMS_runMagCal+0x1e8a>
 80128ac:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8012870 <MEMS_runMagCal+0x400>
 80128b0:	edd4 6a03 	vldr	s13, [r4, #12]
 80128b4:	ed94 5a00 	vldr	s10, [r4]
 80128b8:	edd4 5a01 	vldr	s11, [r4, #4]
 80128bc:	ed94 6a02 	vldr	s12, [r4, #8]
 80128c0:	edc4 7a06 	vstr	s15, [r4, #24]
 80128c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80128c8:	ad2e      	add	r5, sp, #184	; 0xb8
 80128ca:	2300      	movs	r3, #0
 80128cc:	e9c5 3300 	strd	r3, r3, [r5]
 80128d0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80128d4:	60ab      	str	r3, [r5, #8]
 80128d6:	61ab      	str	r3, [r5, #24]
 80128d8:	4be7      	ldr	r3, [pc, #924]	; (8012c78 <MEMS_runMagCal+0x808>)
 80128da:	9311      	str	r3, [sp, #68]	; 0x44
 80128dc:	ee85 0a08 	vdiv.f32	s0, s10, s16
 80128e0:	eec5 9a88 	vdiv.f32	s19, s11, s16
 80128e4:	ee86 aa08 	vdiv.f32	s20, s12, s16
 80128e8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80128ec:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80128f0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80128f4:	eef0 6a67 	vmov.f32	s13, s15
 80128f8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80128fc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012900:	ee39 9a46 	vsub.f32	s18, s18, s12
 8012904:	eddf 6add 	vldr	s13, [pc, #884]	; 8012c7c <MEMS_runMagCal+0x80c>
 8012908:	ed9f 6add 	vldr	s12, [pc, #884]	; 8012c80 <MEMS_runMagCal+0x810>
 801290c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012910:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012914:	eef0 6ae6 	vabs.f32	s13, s13
 8012918:	ee77 7a67 	vsub.f32	s15, s14, s15
 801291c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012924:	eef0 7ae7 	vabs.f32	s15, s15
 8012928:	f101 84dd 	bmi.w	80142e6 <MEMS_runMagCal+0x1e76>
 801292c:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8012c84 <MEMS_runMagCal+0x814>
 8012930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012938:	f281 8438 	bge.w	80141ac <MEMS_runMagCal+0x1d3c>
 801293c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8012c88 <MEMS_runMagCal+0x818>
 8012940:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012948:	f101 8430 	bmi.w	80141ac <MEMS_runMagCal+0x1d3c>
 801294c:	f002 fc74 	bl	8015238 <roundf>
 8012950:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012954:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8012958:	ee17 3a90 	vmov	r3, s15
 801295c:	eeb0 0a69 	vmov.f32	s0, s19
 8012960:	f8a9 3000 	strh.w	r3, [r9]
 8012964:	f002 fc68 	bl	8015238 <roundf>
 8012968:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801296c:	eeb0 0a4a 	vmov.f32	s0, s20
 8012970:	ee17 3a90 	vmov	r3, s15
 8012974:	f8a9 3002 	strh.w	r3, [r9, #2]
 8012978:	f002 fc5e 	bl	8015238 <roundf>
 801297c:	eddd 7a08 	vldr	s15, [sp, #32]
 8012980:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8012984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012988:	ee16 3a90 	vmov	r3, s13
 801298c:	eddf 7abf 	vldr	s15, [pc, #764]	; 8012c8c <MEMS_runMagCal+0x81c>
 8012990:	f8a9 3004 	strh.w	r3, [r9, #4]
 8012994:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012998:	f002 fc4e 	bl	8015238 <roundf>
 801299c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80129a0:	ae0f      	add	r6, sp, #60	; 0x3c
 80129a2:	ed8b 0a01 	vstr	s0, [fp, #4]
 80129a6:	ab10      	add	r3, sp, #64	; 0x40
 80129a8:	ee1c 0a10 	vmov	r0, s24
 80129ac:	eeb0 0a48 	vmov.f32	s0, s16
 80129b0:	4649      	mov	r1, r9
 80129b2:	9600      	str	r6, [sp, #0]
 80129b4:	aa2d      	add	r2, sp, #180	; 0xb4
 80129b6:	f7f8 ff33 	bl	800b820 <getMagStats.constprop.0>
 80129ba:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80129be:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8012c90 <MEMS_runMagCal+0x820>
 80129c2:	461f      	mov	r7, r3
 80129c4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80129c8:	005b      	lsls	r3, r3, #1
 80129ca:	ee07 3a90 	vmov	s15, r3
 80129ce:	ee07 0a10 	vmov	s14, r0
 80129d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80129da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e6:	dc0f      	bgt.n	8012a08 <MEMS_runMagCal+0x598>
 80129e8:	ed96 7a00 	vldr	s14, [r6]
 80129ec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80129f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f8:	bfc3      	ittte	gt
 80129fa:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 80129fe:	fab3 f383 	clzgt	r3, r3
 8012a02:	095b      	lsrgt	r3, r3, #5
 8012a04:	2301      	movle	r3, #1
 8012a06:	9303      	str	r3, [sp, #12]
 8012a08:	ed96 0a00 	vldr	s0, [r6]
 8012a0c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8012a10:	9620      	str	r6, [sp, #128]	; 0x80
 8012a12:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012a16:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8012a1a:	f002 fc0d 	bl	8015238 <roundf>
 8012a1e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8012a22:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8012a26:	ee17 3a10 	vmov	r3, s14
 8012a2a:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8012a2e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8012a32:	f002 fc01 	bl	8015238 <roundf>
 8012a36:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8012c94 <MEMS_runMagCal+0x824>
 8012a3a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8012a3e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012a42:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8012a46:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8012a4a:	f8d9 0000 	ldr.w	r0, [r9]
 8012a4e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8012a52:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012a56:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012a5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a5e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8012a62:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012a66:	ee16 2a90 	vmov	r2, s13
 8012a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012a6e:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8012a72:	f1b8 0f01 	cmp.w	r8, #1
 8012a76:	fa1f fc82 	uxth.w	ip, r2
 8012a7a:	bf08      	it	eq
 8012a7c:	23ff      	moveq	r3, #255	; 0xff
 8012a7e:	ee17 2a10 	vmov	r2, s14
 8012a82:	ee17 1a90 	vmov	r1, s15
 8012a86:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 8012a8a:	ee16 0a10 	vmov	r0, s12
 8012a8e:	bf08      	it	eq
 8012a90:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8012a94:	9b03      	ldr	r3, [sp, #12]
 8012a96:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 8012a9a:	b292      	uxth	r2, r2
 8012a9c:	b289      	uxth	r1, r1
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8012aa4:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8012aa8:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8012aac:	f88b 0000 	strb.w	r0, [fp]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f000 8118 	beq.w	8012ce6 <MEMS_runMagCal+0x876>
 8012ab6:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8012aba:	f88b 0001 	strb.w	r0, [fp, #1]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	f041 80fd 	bne.w	8013cbe <MEMS_runMagCal+0x184e>
 8012ac4:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8012ac8:	ad0e      	add	r5, sp, #56	; 0x38
 8012aca:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8012ace:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ad2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8012ad6:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8012ada:	f8cb 6008 	str.w	r6, [fp, #8]
 8012ade:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8012ae2:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8012ae6:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8012c98 <MEMS_runMagCal+0x828>
 8012aea:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8012aee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012af2:	fb00 f404 	mul.w	r4, r0, r4
 8012af6:	ee05 4a90 	vmov	s11, r4
 8012afa:	fb00 f406 	mul.w	r4, r0, r6
 8012afe:	fb00 f00e 	mul.w	r0, r0, lr
 8012b02:	ee06 0a10 	vmov	s12, r0
 8012b06:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8012b0a:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8012b0e:	ee03 0a90 	vmov	s7, r0
 8012b12:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8012b16:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8012b1a:	ee05 4a10 	vmov	s10, r4
 8012b1e:	ee04 0a10 	vmov	s8, r0
 8012b22:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 8012b26:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012b2a:	ee04 0a90 	vmov	s9, r0
 8012b2e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012b32:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012b36:	f8dc 0000 	ldr.w	r0, [ip]
 8012b3a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8012b3e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8012b42:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012b46:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012b4a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8012b4e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8012b52:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8012b56:	2001      	movs	r0, #1
 8012b58:	24ff      	movs	r4, #255	; 0xff
 8012b5a:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 8012b5e:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 8012b62:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8012b66:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 8012b6a:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 8012b6e:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8012b72:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8012b76:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 8012b7a:	f88b 4012 	strb.w	r4, [fp, #18]
 8012b7e:	2f00      	cmp	r7, #0
 8012b80:	f001 82c8 	beq.w	8014114 <MEMS_runMagCal+0x1ca4>
 8012b84:	9b05      	ldr	r3, [sp, #20]
 8012b86:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8012ca4 <MEMS_runMagCal+0x834>
 8012b8a:	ed93 0a01 	vldr	s0, [r3, #4]
 8012b8e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8012b92:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8012b96:	2200      	movs	r2, #0
 8012b98:	ee20 3a03 	vmul.f32	s6, s0, s6
 8012b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8012ba0:	4616      	mov	r6, r2
 8012ba2:	fb96 f3f0 	sdiv	r3, r6, r0
 8012ba6:	fb00 6313 	mls	r3, r0, r3, r6
 8012baa:	b2db      	uxtb	r3, r3
 8012bac:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012bb0:	1c66      	adds	r6, r4, #1
 8012bb2:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8012bb6:	ee07 4a90 	vmov	s15, r4
 8012bba:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8012bbe:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8012bc2:	ee06 4a90 	vmov	s13, r4
 8012bc6:	fb96 f4f1 	sdiv	r4, r6, r1
 8012bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bce:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bd2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012bd6:	ee07 3a10 	vmov	s14, r3
 8012bda:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8012bde:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012be2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012be6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012bea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bee:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012bf2:	fb01 6414 	mls	r4, r1, r4, r6
 8012bf6:	b264      	sxtb	r4, r4
 8012bf8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012bfc:	3201      	adds	r2, #1
 8012bfe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012c02:	b212      	sxth	r2, r2
 8012c04:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012c08:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8012c0c:	42ba      	cmp	r2, r7
 8012c0e:	4616      	mov	r6, r2
 8012c10:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012c14:	ee67 7a03 	vmul.f32	s15, s14, s6
 8012c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c1c:	ee17 ca90 	vmov	ip, s15
 8012c20:	f8a3 c014 	strh.w	ip, [r3, #20]
 8012c24:	dbbd      	blt.n	8012ba2 <MEMS_runMagCal+0x732>
 8012c26:	f88b 4012 	strb.w	r4, [fp, #18]
 8012c2a:	428f      	cmp	r7, r1
 8012c2c:	bf28      	it	cs
 8012c2e:	460f      	movcs	r7, r1
 8012c30:	f88b 7010 	strb.w	r7, [fp, #16]
 8012c34:	ee1c 0a10 	vmov	r0, s24
 8012c38:	9500      	str	r5, [sp, #0]
 8012c3a:	4642      	mov	r2, r8
 8012c3c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8012c40:	ab0d      	add	r3, sp, #52	; 0x34
 8012c42:	f7f8 fded 	bl	800b820 <getMagStats.constprop.0>
 8012c46:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012c9c <MEMS_runMagCal+0x82c>
 8012c4a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8012c4e:	edd5 6a00 	vldr	s13, [r5]
 8012c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c56:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8012c5a:	eef0 7ae7 	vabs.f32	s15, s15
 8012c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c66:	d525      	bpl.n	8012cb4 <MEMS_runMagCal+0x844>
 8012c68:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c70:	f101 8257 	bmi.w	8014122 <MEMS_runMagCal+0x1cb2>
 8012c74:	e01e      	b.n	8012cb4 <MEMS_runMagCal+0x844>
 8012c76:	bf00      	nop
 8012c78:	41f00001 	.word	0x41f00001
 8012c7c:	3f8ccccd 	.word	0x3f8ccccd
 8012c80:	3f266666 	.word	0x3f266666
 8012c84:	3eb33333 	.word	0x3eb33333
 8012c88:	3f19999a 	.word	0x3f19999a
 8012c8c:	3a83126f 	.word	0x3a83126f
 8012c90:	3c23d70a 	.word	0x3c23d70a
 8012c94:	447a0000 	.word	0x447a0000
 8012c98:	358637bd 	.word	0x358637bd
 8012c9c:	423c0000 	.word	0x423c0000
 8012ca0:	4423d666 	.word	0x4423d666
 8012ca4:	42c80000 	.word	0x42c80000
 8012ca8:	427c0000 	.word	0x427c0000
 8012cac:	3f666666 	.word	0x3f666666
 8012cb0:	3eaaaaab 	.word	0x3eaaaaab
 8012cb4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8012cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cc0:	d507      	bpl.n	8012cd2 <MEMS_runMagCal+0x862>
 8012cc2:	eef4 6a47 	vcmp.f32	s13, s14
 8012cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cca:	9b03      	ldr	r3, [sp, #12]
 8012ccc:	bf48      	it	mi
 8012cce:	2302      	movmi	r3, #2
 8012cd0:	9303      	str	r3, [sp, #12]
 8012cd2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8012cd6:	9a03      	ldr	r2, [sp, #12]
 8012cd8:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 8012cdc:	2bc8      	cmp	r3, #200	; 0xc8
 8012cde:	d902      	bls.n	8012ce6 <MEMS_runMagCal+0x876>
 8012ce0:	2302      	movs	r3, #2
 8012ce2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8012ce6:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8012cea:	ecbd 8b0a 	vpop	{d8-d12}
 8012cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8012cf6:	4291      	cmp	r1, r2
 8012cf8:	f4ff abea 	bcc.w	80124d0 <MEMS_runMagCal+0x60>
 8012cfc:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f47f abf9 	bne.w	80124f8 <MEMS_runMagCal+0x88>
 8012d06:	f7ff bbed 	b.w	80124e4 <MEMS_runMagCal+0x74>
 8012d0a:	2702      	movs	r7, #2
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	9307      	str	r3, [sp, #28]
 8012d10:	9303      	str	r3, [sp, #12]
 8012d12:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8012ca0 <MEMS_runMagCal+0x830>
 8012d16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1e:	f140 8260 	bpl.w	80131e2 <MEMS_runMagCal+0xd72>
 8012d22:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8012ca4 <MEMS_runMagCal+0x834>
 8012d26:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8012d2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8012d34:	d911      	bls.n	8012d5a <MEMS_runMagCal+0x8ea>
 8012d36:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012d3a:	ee17 3a90 	vmov	r3, s15
 8012d3e:	b29b      	uxth	r3, r3
 8012d40:	2bc7      	cmp	r3, #199	; 0xc7
 8012d42:	f201 8359 	bhi.w	80143f8 <MEMS_runMagCal+0x1f88>
 8012d46:	2300      	movs	r3, #0
 8012d48:	22ff      	movs	r2, #255	; 0xff
 8012d4a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8012d4e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8012d52:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 8012d56:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012d5a:	2f00      	cmp	r7, #0
 8012d5c:	f040 824d 	bne.w	80131fa <MEMS_runMagCal+0xd8a>
 8012d60:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f2c0 839e 	blt.w	80134a6 <MEMS_runMagCal+0x1036>
 8012d6a:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	fbb2 f3f6 	udiv	r3, r2, r6
 8012d74:	fb06 2313 	mls	r3, r6, r3, r2
 8012d78:	b25b      	sxtb	r3, r3
 8012d7a:	461d      	mov	r5, r3
 8012d7c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8012d80:	f88b 3012 	strb.w	r3, [fp, #18]
 8012d84:	3401      	adds	r4, #1
 8012d86:	42b4      	cmp	r4, r6
 8012d88:	bfa8      	it	ge
 8012d8a:	4634      	movge	r4, r6
 8012d8c:	fa5f f884 	uxtb.w	r8, r4
 8012d90:	f88b 8010 	strb.w	r8, [fp, #16]
 8012d94:	f002 fa50 	bl	8015238 <roundf>
 8012d98:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012d9c:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8012da0:	ee10 2a10 	vmov	r2, s0
 8012da4:	829a      	strh	r2, [r3, #20]
 8012da6:	2f00      	cmp	r7, #0
 8012da8:	f040 8227 	bne.w	80131fa <MEMS_runMagCal+0xd8a>
 8012dac:	f8db 200c 	ldr.w	r2, [fp, #12]
 8012db0:	b122      	cbz	r2, 8012dbc <MEMS_runMagCal+0x94c>
 8012db2:	9908      	ldr	r1, [sp, #32]
 8012db4:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8012db8:	4299      	cmp	r1, r3
 8012dba:	d394      	bcc.n	8012ce6 <MEMS_runMagCal+0x876>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d091      	beq.n	8012ce6 <MEMS_runMagCal+0x876>
 8012dc2:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8012dc6:	1ebb      	subs	r3, r7, #2
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	f240 8232 	bls.w	8013232 <MEMS_runMagCal+0xdc2>
 8012dce:	9b05      	ldr	r3, [sp, #20]
 8012dd0:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8012ca8 <MEMS_runMagCal+0x838>
 8012dd4:	ed93 8a01 	vldr	s16, [r3, #4]
 8012dd8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012ddc:	9a06      	ldr	r2, [sp, #24]
 8012dde:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 8012de2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012de8:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8012dec:	fb02 1404 	mla	r4, r2, r4, r1
 8012df0:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012df4:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8012df8:	3310      	adds	r3, #16
 8012dfa:	42a3      	cmp	r3, r4
 8012dfc:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8012e00:	ee28 9a89 	vmul.f32	s18, s17, s18
 8012e04:	ee0c 2a10 	vmov	s24, r2
 8012e08:	ee69 7a27 	vmul.f32	s15, s18, s15
 8012e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e10:	ee17 2a90 	vmov	r2, s15
 8012e14:	fa1f f982 	uxth.w	r9, r2
 8012e18:	f080 81fe 	bcs.w	8013218 <MEMS_runMagCal+0xda8>
 8012e1c:	f242 3328 	movw	r3, #9000	; 0x2328
 8012e20:	429c      	cmp	r4, r3
 8012e22:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8012e26:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8012e2a:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8012e2e:	bf1a      	itte	ne
 8012e30:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8012e34:	3c28      	subne	r4, #40	; 0x28
 8012e36:	2400      	moveq	r4, #0
 8012e38:	42a8      	cmp	r0, r5
 8012e3a:	f102 0201 	add.w	r2, r2, #1
 8012e3e:	f000 8727 	beq.w	8013c90 <MEMS_runMagCal+0x1820>
 8012e42:	1a12      	subs	r2, r2, r0
 8012e44:	fb92 f1f5 	sdiv	r1, r2, r5
 8012e48:	fb05 2211 	mls	r2, r5, r1, r2
 8012e4c:	2a00      	cmp	r2, #0
 8012e4e:	bfb8      	it	lt
 8012e50:	1952      	addlt	r2, r2, r5
 8012e52:	b211      	sxth	r1, r2
 8012e54:	b358      	cbz	r0, 8012eae <MEMS_runMagCal+0xa3e>
 8012e56:	3801      	subs	r0, #1
 8012e58:	b280      	uxth	r0, r0
 8012e5a:	3001      	adds	r0, #1
 8012e5c:	1b36      	subs	r6, r6, r4
 8012e5e:	9f03      	ldr	r7, [sp, #12]
 8012e60:	b2b6      	uxth	r6, r6
 8012e62:	4408      	add	r0, r1
 8012e64:	e002      	b.n	8012e6c <MEMS_runMagCal+0x9fc>
 8012e66:	3101      	adds	r1, #1
 8012e68:	4281      	cmp	r1, r0
 8012e6a:	d01b      	beq.n	8012ea4 <MEMS_runMagCal+0xa34>
 8012e6c:	fb91 f3f5 	sdiv	r3, r1, r5
 8012e70:	fb05 1313 	mls	r3, r5, r3, r1
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012e7a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8012e7e:	4432      	add	r2, r6
 8012e80:	b212      	sxth	r2, r2
 8012e82:	2a00      	cmp	r2, #0
 8012e84:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8012e88:	daed      	bge.n	8012e66 <MEMS_runMagCal+0x9f6>
 8012e8a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012e8e:	1e5a      	subs	r2, r3, #1
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	f000 8306 	beq.w	80134a2 <MEMS_runMagCal+0x1032>
 8012e96:	3101      	adds	r1, #1
 8012e98:	4281      	cmp	r1, r0
 8012e9a:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012e9e:	f04f 0701 	mov.w	r7, #1
 8012ea2:	d1e3      	bne.n	8012e6c <MEMS_runMagCal+0x9fc>
 8012ea4:	2f01      	cmp	r7, #1
 8012ea6:	f001 80ea 	beq.w	801407e <MEMS_runMagCal+0x1c0e>
 8012eaa:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8012eae:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8012eb2:	2800      	cmp	r0, #0
 8012eb4:	f000 81b6 	beq.w	8013224 <MEMS_runMagCal+0xdb4>
 8012eb8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8012ebc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012ebe:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012ec2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8012ec6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8012eca:	3308      	adds	r3, #8
 8012ecc:	441c      	add	r4, r3
 8012ece:	42a2      	cmp	r2, r4
 8012ed0:	f200 86e6 	bhi.w	8013ca0 <MEMS_runMagCal+0x1830>
 8012ed4:	9b07      	ldr	r3, [sp, #28]
 8012ed6:	b923      	cbnz	r3, 8012ee2 <MEMS_runMagCal+0xa72>
 8012ed8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012edc:	2b0a      	cmp	r3, #10
 8012ede:	f240 81a5 	bls.w	801322c <MEMS_runMagCal+0xdbc>
 8012ee2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8012ee6:	9302      	str	r3, [sp, #8]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	f000 819f 	beq.w	801322c <MEMS_runMagCal+0xdbc>
 8012eee:	ee29 aa09 	vmul.f32	s20, s18, s18
 8012ef2:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 8012cac <MEMS_runMagCal+0x83c>
 8012ef6:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8012cb0 <MEMS_runMagCal+0x840>
 8012efa:	9b03      	ldr	r3, [sp, #12]
 8012efc:	9309      	str	r3, [sp, #36]	; 0x24
 8012efe:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8012f02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f06:	2100      	movs	r1, #0
 8012f08:	ee2a aa26 	vmul.f32	s20, s20, s13
 8012f0c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8012f10:	ee69 9a29 	vmul.f32	s19, s18, s19
 8012f14:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012f18:	468a      	mov	sl, r1
 8012f1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8012f1c:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8012f20:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 80e2 	beq.w	80130ee <MEMS_runMagCal+0xc7e>
 8012f2a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8012f2e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8012f32:	ee07 4a90 	vmov	s15, r4
 8012f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f3a:	eef0 7ae7 	vabs.f32	s15, s15
 8012f3e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f46:	f100 820b 	bmi.w	8013360 <MEMS_runMagCal+0xef0>
 8012f4a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8012f4e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8012f52:	2f00      	cmp	r7, #0
 8012f54:	f000 8223 	beq.w	801339e <MEMS_runMagCal+0xf2e>
 8012f58:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 8012f5c:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8012f60:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 8012f64:	1b52      	subs	r2, r2, r5
 8012f66:	fb02 f102 	mul.w	r1, r2, r2
 8012f6a:	1b02      	subs	r2, r0, r4
 8012f6c:	fb02 1202 	mla	r2, r2, r2, r1
 8012f70:	1b9b      	subs	r3, r3, r6
 8012f72:	fb03 2303 	mla	r3, r3, r3, r2
 8012f76:	ee07 3a90 	vmov	s15, r3
 8012f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f7e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8012f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f86:	f300 80b2 	bgt.w	80130ee <MEMS_runMagCal+0xc7e>
 8012f8a:	fb94 f3f9 	sdiv	r3, r4, r9
 8012f8e:	fb09 4313 	mls	r3, r9, r3, r4
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	bfb8      	it	lt
 8012f96:	444b      	addlt	r3, r9
 8012f98:	b21b      	sxth	r3, r3
 8012f9a:	ee00 3a10 	vmov	s0, r3
 8012f9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fa2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012fa6:	f002 f947 	bl	8015238 <roundf>
 8012faa:	fb95 f3f9 	sdiv	r3, r5, r9
 8012fae:	fb09 5313 	mls	r3, r9, r3, r5
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	bfb8      	it	lt
 8012fb6:	444b      	addlt	r3, r9
 8012fb8:	b21b      	sxth	r3, r3
 8012fba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012fbe:	ee00 3a10 	vmov	s0, r3
 8012fc2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fc6:	edcd 7a04 	vstr	s15, [sp, #16]
 8012fca:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012fce:	f002 f933 	bl	8015238 <roundf>
 8012fd2:	fb96 f3f9 	sdiv	r3, r6, r9
 8012fd6:	fb09 6313 	mls	r3, r9, r3, r6
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	bfb8      	it	lt
 8012fde:	444b      	addlt	r3, r9
 8012fe0:	b21b      	sxth	r3, r3
 8012fe2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012fe6:	ee00 3a10 	vmov	s0, r3
 8012fea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8012fee:	f89d 8010 	ldrb.w	r8, [sp, #16]
 8012ff2:	edcd 7a04 	vstr	s15, [sp, #16]
 8012ff6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8012ffa:	9204      	str	r2, [sp, #16]
 8012ffc:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013000:	f002 f91a 	bl	8015238 <roundf>
 8013004:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013008:	f1b8 0f1f 	cmp.w	r8, #31
 801300c:	edcd 7a06 	vstr	s15, [sp, #24]
 8013010:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013014:	9106      	str	r1, [sp, #24]
 8013016:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 801301a:	f240 823d 	bls.w	8013498 <MEMS_runMagCal+0x1028>
 801301e:	f1a8 0220 	sub.w	r2, r8, #32
 8013022:	2101      	movs	r1, #1
 8013024:	fa01 f202 	lsl.w	r2, r1, r2
 8013028:	401a      	ands	r2, r3
 801302a:	9804      	ldr	r0, [sp, #16]
 801302c:	281f      	cmp	r0, #31
 801302e:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 8013032:	f240 821f 	bls.w	8013474 <MEMS_runMagCal+0x1004>
 8013036:	f1a0 0120 	sub.w	r1, r0, #32
 801303a:	2001      	movs	r0, #1
 801303c:	fa00 f101 	lsl.w	r1, r0, r1
 8013040:	ea01 0c03 	and.w	ip, r1, r3
 8013044:	9906      	ldr	r1, [sp, #24]
 8013046:	291f      	cmp	r1, #31
 8013048:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801304c:	f240 821e 	bls.w	801348c <MEMS_runMagCal+0x101c>
 8013050:	f1a1 0020 	sub.w	r0, r1, #32
 8013054:	2101      	movs	r1, #1
 8013056:	fa01 f000 	lsl.w	r0, r1, r0
 801305a:	4003      	ands	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	f040 812b 	bne.w	80132b8 <MEMS_runMagCal+0xe48>
 8013062:	ea52 030c 	orrs.w	r3, r2, ip
 8013066:	f040 812c 	bne.w	80132c2 <MEMS_runMagCal+0xe52>
 801306a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801306e:	930a      	str	r3, [sp, #40]	; 0x28
 8013070:	461a      	mov	r2, r3
 8013072:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013076:	3301      	adds	r3, #1
 8013078:	4694      	mov	ip, r2
 801307a:	930b      	str	r3, [sp, #44]	; 0x2c
 801307c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801307e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013082:	3701      	adds	r7, #1
 8013084:	4567      	cmp	r7, ip
 8013086:	bfa8      	it	ge
 8013088:	4667      	movge	r7, ip
 801308a:	fb0c 2c13 	mls	ip, ip, r3, r2
 801308e:	b2ff      	uxtb	r7, r7
 8013090:	fa4f fc8c 	sxtb.w	ip, ip
 8013094:	9905      	ldr	r1, [sp, #20]
 8013096:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 801309a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801309e:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80130a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80130a4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80130a8:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80130ac:	1a9b      	subs	r3, r3, r2
 80130ae:	fb01 330a 	mla	r3, r1, sl, r3
 80130b2:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 80130b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130b8:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 80130bc:	429f      	cmp	r7, r3
 80130be:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 80130c2:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 80130c6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80130ca:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80130ce:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80130d2:	f000 8758 	beq.w	8013f86 <MEMS_runMagCal+0x1b16>
 80130d6:	9b06      	ldr	r3, [sp, #24]
 80130d8:	9a04      	ldr	r2, [sp, #16]
 80130da:	ee1c 0a10 	vmov	r0, s24
 80130de:	4641      	mov	r1, r8
 80130e0:	f7f8 f874 	bl	800b1cc <MEMS_setMagIndexToOne>
 80130e4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80130e8:	9302      	str	r3, [sp, #8]
 80130ea:	2301      	movs	r3, #1
 80130ec:	9309      	str	r3, [sp, #36]	; 0x24
 80130ee:	9b02      	ldr	r3, [sp, #8]
 80130f0:	f10a 0a01 	add.w	sl, sl, #1
 80130f4:	fa0f fa8a 	sxth.w	sl, sl
 80130f8:	459a      	cmp	sl, r3
 80130fa:	4651      	mov	r1, sl
 80130fc:	f6ff af0d 	blt.w	8012f1a <MEMS_runMagCal+0xaaa>
 8013100:	f89b 3000 	ldrb.w	r3, [fp]
 8013104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013106:	431a      	orrs	r2, r3
 8013108:	b2d3      	uxtb	r3, r2
 801310a:	f88b 3000 	strb.w	r3, [fp]
 801310e:	2b00      	cmp	r3, #0
 8013110:	f43f ade9 	beq.w	8012ce6 <MEMS_runMagCal+0x876>
 8013114:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013118:	9306      	str	r3, [sp, #24]
 801311a:	2b19      	cmp	r3, #25
 801311c:	f67f ade3 	bls.w	8012ce6 <MEMS_runMagCal+0x876>
 8013120:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013124:	9309      	str	r3, [sp, #36]	; 0x24
 8013126:	b123      	cbz	r3, 8013132 <MEMS_runMagCal+0xcc2>
 8013128:	f8db 3004 	ldr.w	r3, [fp, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	f040 8583 	bne.w	8013c38 <MEMS_runMagCal+0x17c8>
 8013132:	9b07      	ldr	r3, [sp, #28]
 8013134:	2b00      	cmp	r3, #0
 8013136:	f040 872f 	bne.w	8013f98 <MEMS_runMagCal+0x1b28>
 801313a:	9b05      	ldr	r3, [sp, #20]
 801313c:	9903      	ldr	r1, [sp, #12]
 801313e:	ed93 8a01 	vldr	s16, [r3, #4]
 8013142:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013146:	9302      	str	r3, [sp, #8]
 8013148:	2600      	movs	r6, #0
 801314a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 801314e:	9304      	str	r3, [sp, #16]
 8013150:	f04f 0a01 	mov.w	sl, #1
 8013154:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013158:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 801315c:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013160:	9624      	str	r6, [sp, #144]	; 0x90
 8013162:	4657      	mov	r7, sl
 8013164:	460b      	mov	r3, r1
 8013166:	460c      	mov	r4, r1
 8013168:	e013      	b.n	8013192 <MEMS_runMagCal+0xd22>
 801316a:	f1b9 0f00 	cmp.w	r9, #0
 801316e:	bf18      	it	ne
 8013170:	3101      	addne	r1, #1
 8013172:	2d00      	cmp	r5, #0
 8013174:	bf18      	it	ne
 8013176:	3401      	addne	r4, #1
 8013178:	2a00      	cmp	r2, #0
 801317a:	bf18      	it	ne
 801317c:	3301      	addne	r3, #1
 801317e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013182:	b2c9      	uxtb	r1, r1
 8013184:	b2e4      	uxtb	r4, r4
 8013186:	b2db      	uxtb	r3, r3
 8013188:	f000 81a2 	beq.w	80134d0 <MEMS_runMagCal+0x1060>
 801318c:	3601      	adds	r6, #1
 801318e:	fa5f fa8c 	uxtb.w	sl, ip
 8013192:	9804      	ldr	r0, [sp, #16]
 8013194:	f1a6 0220 	sub.w	r2, r6, #32
 8013198:	fa07 f202 	lsl.w	r2, r7, r2
 801319c:	ea02 0500 	and.w	r5, r2, r0
 80131a0:	9802      	ldr	r0, [sp, #8]
 80131a2:	2e1f      	cmp	r6, #31
 80131a4:	ea08 0902 	and.w	r9, r8, r2
 80131a8:	f10a 0c01 	add.w	ip, sl, #1
 80131ac:	ea02 0200 	and.w	r2, r2, r0
 80131b0:	fa07 f006 	lsl.w	r0, r7, r6
 80131b4:	d8d9      	bhi.n	801316a <MEMS_runMagCal+0xcfa>
 80131b6:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 80131ba:	ea00 0902 	and.w	r9, r0, r2
 80131be:	4005      	ands	r5, r0
 80131c0:	ea0e 0000 	and.w	r0, lr, r0
 80131c4:	f1b9 0f00 	cmp.w	r9, #0
 80131c8:	bf18      	it	ne
 80131ca:	3401      	addne	r4, #1
 80131cc:	2d00      	cmp	r5, #0
 80131ce:	bf0c      	ite	eq
 80131d0:	461d      	moveq	r5, r3
 80131d2:	1c5d      	addne	r5, r3, #1
 80131d4:	2800      	cmp	r0, #0
 80131d6:	bf18      	it	ne
 80131d8:	3101      	addne	r1, #1
 80131da:	b2e4      	uxtb	r4, r4
 80131dc:	b2eb      	uxtb	r3, r5
 80131de:	b2c9      	uxtb	r1, r1
 80131e0:	e7d4      	b.n	801318c <MEMS_runMagCal+0xd1c>
 80131e2:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80131e6:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 80134bc <MEMS_runMagCal+0x104c>
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80131f0:	f63f ada9 	bhi.w	8012d46 <MEMS_runMagCal+0x8d6>
 80131f4:	2f00      	cmp	r7, #0
 80131f6:	f43f adb3 	beq.w	8012d60 <MEMS_runMagCal+0x8f0>
 80131fa:	9908      	ldr	r1, [sp, #32]
 80131fc:	f8cb 100c 	str.w	r1, [fp, #12]
 8013200:	2200      	movs	r2, #0
 8013202:	23ff      	movs	r3, #255	; 0xff
 8013204:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013208:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 801320c:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013210:	ecbd 8b0a 	vpop	{d8-d12}
 8013214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013218:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801321c:	4634      	mov	r4, r6
 801321e:	2800      	cmp	r0, #0
 8013220:	f47f ae4a 	bne.w	8012eb8 <MEMS_runMagCal+0xa48>
 8013224:	9b07      	ldr	r3, [sp, #28]
 8013226:	2b00      	cmp	r3, #0
 8013228:	f47f ae5b 	bne.w	8012ee2 <MEMS_runMagCal+0xa72>
 801322c:	9b03      	ldr	r3, [sp, #12]
 801322e:	9309      	str	r3, [sp, #36]	; 0x24
 8013230:	e766      	b.n	8013100 <MEMS_runMagCal+0xc90>
 8013232:	45b0      	cmp	r8, r6
 8013234:	f000 86b9 	beq.w	8013faa <MEMS_runMagCal+0x1b3a>
 8013238:	2f03      	cmp	r7, #3
 801323a:	f47f adc8 	bne.w	8012dce <MEMS_runMagCal+0x95e>
 801323e:	ee07 2a90 	vmov	s15, r2
 8013242:	eddf 6a9f 	vldr	s13, [pc, #636]	; 80134c0 <MEMS_runMagCal+0x1050>
 8013246:	ed9b 7a01 	vldr	s14, [fp, #4]
 801324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801324e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013252:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325e:	f77f adb6 	ble.w	8012dce <MEMS_runMagCal+0x95e>
 8013262:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013266:	2b00      	cmp	r3, #0
 8013268:	f43f adb1 	beq.w	8012dce <MEMS_runMagCal+0x95e>
 801326c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013270:	330a      	adds	r3, #10
 8013272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013276:	ee07 3a90 	vmov	s15, r3
 801327a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801327e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013282:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801328a:	f77f ada0 	ble.w	8012dce <MEMS_runMagCal+0x95e>
 801328e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013292:	2b00      	cmp	r3, #0
 8013294:	f47f ad9b 	bne.w	8012dce <MEMS_runMagCal+0x95e>
 8013298:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801329c:	2b00      	cmp	r3, #0
 801329e:	f43f ad22 	beq.w	8012ce6 <MEMS_runMagCal+0x876>
 80132a2:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80132a6:	2bff      	cmp	r3, #255	; 0xff
 80132a8:	f47f ad1d 	bne.w	8012ce6 <MEMS_runMagCal+0x876>
 80132ac:	e58f      	b.n	8012dce <MEMS_runMagCal+0x95e>
 80132ae:	2300      	movs	r3, #0
 80132b0:	9307      	str	r3, [sp, #28]
 80132b2:	9303      	str	r3, [sp, #12]
 80132b4:	2700      	movs	r7, #0
 80132b6:	e52c      	b.n	8012d12 <MEMS_runMagCal+0x8a2>
 80132b8:	b11a      	cbz	r2, 80132c2 <MEMS_runMagCal+0xe52>
 80132ba:	f1bc 0f00 	cmp.w	ip, #0
 80132be:	f47f af16 	bne.w	80130ee <MEMS_runMagCal+0xc7e>
 80132c2:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80132c6:	930a      	str	r3, [sp, #40]	; 0x28
 80132c8:	461a      	mov	r2, r3
 80132ca:	4297      	cmp	r7, r2
 80132cc:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80132d0:	f000 848f 	beq.w	8013bf2 <MEMS_runMagCal+0x1782>
 80132d4:	3301      	adds	r3, #1
 80132d6:	4611      	mov	r1, r2
 80132d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80132da:	1bdb      	subs	r3, r3, r7
 80132dc:	fb93 f2f2 	sdiv	r2, r3, r2
 80132e0:	fb01 3212 	mls	r2, r1, r2, r3
 80132e4:	2a00      	cmp	r2, #0
 80132e6:	bfbc      	itt	lt
 80132e8:	460b      	movlt	r3, r1
 80132ea:	18d2      	addlt	r2, r2, r3
 80132ec:	468c      	mov	ip, r1
 80132ee:	b212      	sxth	r2, r2
 80132f0:	f107 3eff 	add.w	lr, r7, #4294967295
 80132f4:	fa5f fe8e 	uxtb.w	lr, lr
 80132f8:	f10e 0e01 	add.w	lr, lr, #1
 80132fc:	4496      	add	lr, r2
 80132fe:	e002      	b.n	8013306 <MEMS_runMagCal+0xe96>
 8013300:	4572      	cmp	r2, lr
 8013302:	f43f aebb 	beq.w	801307c <MEMS_runMagCal+0xc0c>
 8013306:	fb92 f3fc 	sdiv	r3, r2, ip
 801330a:	fb0c 2313 	mls	r3, ip, r3, r2
 801330e:	b2db      	uxtb	r3, r3
 8013310:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013314:	3201      	adds	r2, #1
 8013316:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 801331a:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 801331e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013322:	1a20      	subs	r0, r4, r0
 8013324:	1a69      	subs	r1, r5, r1
 8013326:	ee07 0a90 	vmov	s15, r0
 801332a:	ee06 1a90 	vmov	s13, r1
 801332e:	1af3      	subs	r3, r6, r3
 8013330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013334:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013338:	ee07 3a10 	vmov	s14, r3
 801333c:	eef0 7ae7 	vabs.f32	s15, s15
 8013340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013344:	eef0 6ae6 	vabs.f32	s13, s13
 8013348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801334c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013350:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013354:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335c:	ddd0      	ble.n	8013300 <MEMS_runMagCal+0xe90>
 801335e:	e6c6      	b.n	80130ee <MEMS_runMagCal+0xc7e>
 8013360:	ee07 5a90 	vmov	s15, r5
 8013364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013368:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801336c:	eef0 7ae7 	vabs.f32	s15, s15
 8013370:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013378:	f77f ade9 	ble.w	8012f4e <MEMS_runMagCal+0xade>
 801337c:	ee07 6a90 	vmov	s15, r6
 8013380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013384:	eef0 7ae7 	vabs.f32	s15, s15
 8013388:	eef4 8ae7 	vcmpe.f32	s17, s15
 801338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013390:	f73f aead 	bgt.w	80130ee <MEMS_runMagCal+0xc7e>
 8013394:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013398:	2f00      	cmp	r7, #0
 801339a:	f47f addd 	bne.w	8012f58 <MEMS_runMagCal+0xae8>
 801339e:	fb94 f2f9 	sdiv	r2, r4, r9
 80133a2:	f04f 0301 	mov.w	r3, #1
 80133a6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80133aa:	9b05      	ldr	r3, [sp, #20]
 80133ac:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 80133b0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80133b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133b6:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 80133ba:	fb09 4212 	mls	r2, r9, r2, r4
 80133be:	2a00      	cmp	r2, #0
 80133c0:	fb01 3300 	mla	r3, r1, r0, r3
 80133c4:	bfb8      	it	lt
 80133c6:	444a      	addlt	r2, r9
 80133c8:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 80133cc:	b213      	sxth	r3, r2
 80133ce:	ee00 3a10 	vmov	s0, r3
 80133d2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80133d6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80133da:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 80133de:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80133e2:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 80133e6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80133ea:	ee20 0a08 	vmul.f32	s0, s0, s16
 80133ee:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 80133f2:	f001 ff21 	bl	8015238 <roundf>
 80133f6:	fb95 f3f9 	sdiv	r3, r5, r9
 80133fa:	fb09 5513 	mls	r5, r9, r3, r5
 80133fe:	2d00      	cmp	r5, #0
 8013400:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013404:	bfb8      	it	lt
 8013406:	444d      	addlt	r5, r9
 8013408:	b22d      	sxth	r5, r5
 801340a:	edcd 7a02 	vstr	s15, [sp, #8]
 801340e:	ee07 5a90 	vmov	s15, r5
 8013412:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013416:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801341a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801341e:	f001 ff0b 	bl	8015238 <roundf>
 8013422:	fb96 f3f9 	sdiv	r3, r6, r9
 8013426:	fb09 6613 	mls	r6, r9, r3, r6
 801342a:	2e00      	cmp	r6, #0
 801342c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013430:	bfb8      	it	lt
 8013432:	444e      	addlt	r6, r9
 8013434:	b236      	sxth	r6, r6
 8013436:	edcd 7a02 	vstr	s15, [sp, #8]
 801343a:	ee07 6a90 	vmov	s15, r6
 801343e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013442:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013446:	9204      	str	r2, [sp, #16]
 8013448:	2301      	movs	r3, #1
 801344a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801344e:	9309      	str	r3, [sp, #36]	; 0x24
 8013450:	f001 fef2 	bl	8015238 <roundf>
 8013454:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013458:	9a04      	ldr	r2, [sp, #16]
 801345a:	edcd 7a02 	vstr	s15, [sp, #8]
 801345e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013462:	ee1c 0a10 	vmov	r0, s24
 8013466:	4621      	mov	r1, r4
 8013468:	f7f7 feb0 	bl	800b1cc <MEMS_setMagIndexToOne>
 801346c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013470:	9302      	str	r3, [sp, #8]
 8013472:	e63c      	b.n	80130ee <MEMS_runMagCal+0xc7e>
 8013474:	4603      	mov	r3, r0
 8013476:	2001      	movs	r0, #1
 8013478:	fa00 f303 	lsl.w	r3, r0, r3
 801347c:	ea01 0c03 	and.w	ip, r1, r3
 8013480:	9906      	ldr	r1, [sp, #24]
 8013482:	291f      	cmp	r1, #31
 8013484:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013488:	f63f ade2 	bhi.w	8013050 <MEMS_runMagCal+0xbe0>
 801348c:	460b      	mov	r3, r1
 801348e:	2101      	movs	r1, #1
 8013490:	fa01 f303 	lsl.w	r3, r1, r3
 8013494:	4003      	ands	r3, r0
 8013496:	e5e1      	b.n	801305c <MEMS_runMagCal+0xbec>
 8013498:	2301      	movs	r3, #1
 801349a:	fa03 f308 	lsl.w	r3, r3, r8
 801349e:	401a      	ands	r2, r3
 80134a0:	e5c3      	b.n	801302a <MEMS_runMagCal+0xbba>
 80134a2:	2701      	movs	r7, #1
 80134a4:	e4df      	b.n	8012e66 <MEMS_runMagCal+0x9f6>
 80134a6:	2500      	movs	r5, #0
 80134a8:	f89b 6011 	ldrb.w	r6, [fp, #17]
 80134ac:	462b      	mov	r3, r5
 80134ae:	e465      	b.n	8012d7c <MEMS_runMagCal+0x90c>
 80134b0:	460f      	mov	r7, r1
 80134b2:	e42b      	b.n	8012d0c <MEMS_runMagCal+0x89c>
 80134b4:	2300      	movs	r3, #0
 80134b6:	9304      	str	r3, [sp, #16]
 80134b8:	f7ff b941 	b.w	801273e <MEMS_runMagCal+0x2ce>
 80134bc:	477fff00 	.word	0x477fff00
 80134c0:	3a83126f 	.word	0x3a83126f
 80134c4:	42340000 	.word	0x42340000
 80134c8:	3faccccd 	.word	0x3faccccd
 80134cc:	00000000 	.word	0x00000000
 80134d0:	2905      	cmp	r1, #5
 80134d2:	f240 8383 	bls.w	8013bdc <MEMS_runMagCal+0x176c>
 80134d6:	2c05      	cmp	r4, #5
 80134d8:	f240 8380 	bls.w	8013bdc <MEMS_runMagCal+0x176c>
 80134dc:	2b05      	cmp	r3, #5
 80134de:	f240 837d 	bls.w	8013bdc <MEMS_runMagCal+0x176c>
 80134e2:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80134e6:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 80134ea:	9302      	str	r3, [sp, #8]
 80134ec:	9b06      	ldr	r3, [sp, #24]
 80134ee:	4553      	cmp	r3, sl
 80134f0:	f000 85f1 	beq.w	80140d6 <MEMS_runMagCal+0x1c66>
 80134f4:	461a      	mov	r2, r3
 80134f6:	9b02      	ldr	r3, [sp, #8]
 80134f8:	3301      	adds	r3, #1
 80134fa:	9304      	str	r3, [sp, #16]
 80134fc:	1a9b      	subs	r3, r3, r2
 80134fe:	fb93 f2fa 	sdiv	r2, r3, sl
 8013502:	fb0a 3212 	mls	r2, sl, r2, r3
 8013506:	2a00      	cmp	r2, #0
 8013508:	bfb8      	it	lt
 801350a:	4452      	addlt	r2, sl
 801350c:	46d1      	mov	r9, sl
 801350e:	b212      	sxth	r2, r2
 8013510:	9906      	ldr	r1, [sp, #24]
 8013512:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013516:	f101 38ff 	add.w	r8, r1, #4294967295
 801351a:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 801351e:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013522:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013526:	fa5f f888 	uxtb.w	r8, r8
 801352a:	f108 0801 	add.w	r8, r8, #1
 801352e:	468e      	mov	lr, r1
 8013530:	463e      	mov	r6, r7
 8013532:	46ac      	mov	ip, r5
 8013534:	4490      	add	r8, r2
 8013536:	fb92 f3f9 	sdiv	r3, r2, r9
 801353a:	fb09 2313 	mls	r3, r9, r3, r2
 801353e:	b2db      	uxtb	r3, r3
 8013540:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013544:	3201      	adds	r2, #1
 8013546:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801354a:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 801354e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013552:	42a1      	cmp	r1, r4
 8013554:	bfb8      	it	lt
 8013556:	4621      	movlt	r1, r4
 8013558:	45a6      	cmp	lr, r4
 801355a:	bfa8      	it	ge
 801355c:	46a6      	movge	lr, r4
 801355e:	4285      	cmp	r5, r0
 8013560:	bfb8      	it	lt
 8013562:	4605      	movlt	r5, r0
 8013564:	4584      	cmp	ip, r0
 8013566:	bfa8      	it	ge
 8013568:	4684      	movge	ip, r0
 801356a:	429f      	cmp	r7, r3
 801356c:	bfb8      	it	lt
 801356e:	461f      	movlt	r7, r3
 8013570:	429e      	cmp	r6, r3
 8013572:	bfa8      	it	ge
 8013574:	461e      	movge	r6, r3
 8013576:	4542      	cmp	r2, r8
 8013578:	d1dd      	bne.n	8013536 <MEMS_runMagCal+0x10c6>
 801357a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801357e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013582:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013586:	eba1 010e 	sub.w	r1, r1, lr
 801358a:	eba5 050c 	sub.w	r5, r5, ip
 801358e:	1bbe      	subs	r6, r7, r6
 8013590:	b209      	sxth	r1, r1
 8013592:	b22d      	sxth	r5, r5
 8013594:	b236      	sxth	r6, r6
 8013596:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 80134c4 <MEMS_runMagCal+0x1054>
 801359a:	ee28 7a87 	vmul.f32	s14, s17, s14
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f040 8593 	bne.w	80140ca <MEMS_runMagCal+0x1c5a>
 80135a4:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80135a8:	fab3 f883 	clz	r8, r3
 80135ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80135b0:	ee06 1a90 	vmov	s13, r1
 80135b4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80135b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80135bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80135c0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80135c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c8:	f300 8562 	bgt.w	8014090 <MEMS_runMagCal+0x1c20>
 80135cc:	ee06 5a10 	vmov	s12, r5
 80135d0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80135d4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80135d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135dc:	f100 8558 	bmi.w	8014090 <MEMS_runMagCal+0x1c20>
 80135e0:	ee05 6a90 	vmov	s11, r6
 80135e4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80135e8:	eef4 7ae5 	vcmpe.f32	s15, s11
 80135ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f0:	f100 854e 	bmi.w	8014090 <MEMS_runMagCal+0x1c20>
 80135f4:	428d      	cmp	r5, r1
 80135f6:	462b      	mov	r3, r5
 80135f8:	bfb8      	it	lt
 80135fa:	460b      	movlt	r3, r1
 80135fc:	42b3      	cmp	r3, r6
 80135fe:	461a      	mov	r2, r3
 8013600:	bfb8      	it	lt
 8013602:	4632      	movlt	r2, r6
 8013604:	428e      	cmp	r6, r1
 8013606:	4633      	mov	r3, r6
 8013608:	bfa8      	it	ge
 801360a:	460b      	movge	r3, r1
 801360c:	42ab      	cmp	r3, r5
 801360e:	bfa8      	it	ge
 8013610:	462b      	movge	r3, r5
 8013612:	428a      	cmp	r2, r1
 8013614:	9202      	str	r2, [sp, #8]
 8013616:	f340 8588 	ble.w	801412a <MEMS_runMagCal+0x1cba>
 801361a:	4299      	cmp	r1, r3
 801361c:	bfb8      	it	lt
 801361e:	4619      	movlt	r1, r3
 8013620:	42aa      	cmp	r2, r5
 8013622:	dd02      	ble.n	801362a <MEMS_runMagCal+0x11ba>
 8013624:	42ab      	cmp	r3, r5
 8013626:	bfb8      	it	lt
 8013628:	4629      	movlt	r1, r5
 801362a:	9a02      	ldr	r2, [sp, #8]
 801362c:	4296      	cmp	r6, r2
 801362e:	da02      	bge.n	8013636 <MEMS_runMagCal+0x11c6>
 8013630:	429e      	cmp	r6, r3
 8013632:	bfc8      	it	gt
 8013634:	4631      	movgt	r1, r6
 8013636:	f1b8 0f00 	cmp.w	r8, #0
 801363a:	f000 8299 	beq.w	8013b70 <MEMS_runMagCal+0x1700>
 801363e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013646:	dc0d      	bgt.n	8013664 <MEMS_runMagCal+0x11f4>
 8013648:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801364c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013650:	dc08      	bgt.n	8013664 <MEMS_runMagCal+0x11f4>
 8013652:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801365a:	bfcc      	ite	gt
 801365c:	f04f 0801 	movgt.w	r8, #1
 8013660:	f04f 0800 	movle.w	r8, #0
 8013664:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80134c8 <MEMS_runMagCal+0x1058>
 8013668:	ed9d 5a02 	vldr	s10, [sp, #8]
 801366c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013670:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013674:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367c:	f2c0 8558 	blt.w	8014130 <MEMS_runMagCal+0x1cc0>
 8013680:	ee07 1a90 	vmov	s15, r1
 8013684:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013688:	ee27 5a05 	vmul.f32	s10, s14, s10
 801368c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013690:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013698:	f2c0 854a 	blt.w	8014130 <MEMS_runMagCal+0x1cc0>
 801369c:	9a02      	ldr	r2, [sp, #8]
 801369e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80136a2:	f280 8545 	bge.w	8014130 <MEMS_runMagCal+0x1cc0>
 80136a6:	ee07 3a90 	vmov	s15, r3
 80136aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136ae:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 80136b2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80136b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80136ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136be:	f140 8537 	bpl.w	8014130 <MEMS_runMagCal+0x1cc0>
 80136c2:	9b06      	ldr	r3, [sp, #24]
 80136c4:	4553      	cmp	r3, sl
 80136c6:	f000 8569 	beq.w	801419c <MEMS_runMagCal+0x1d2c>
 80136ca:	461a      	mov	r2, r3
 80136cc:	9b04      	ldr	r3, [sp, #16]
 80136ce:	1a9b      	subs	r3, r3, r2
 80136d0:	fb93 f7f9 	sdiv	r7, r3, r9
 80136d4:	fb09 3717 	mls	r7, r9, r7, r3
 80136d8:	2f00      	cmp	r7, #0
 80136da:	bfb8      	it	lt
 80136dc:	4457      	addlt	r7, sl
 80136de:	b23f      	sxth	r7, r7
 80136e0:	9b03      	ldr	r3, [sp, #12]
 80136e2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80136e6:	b27f      	sxtb	r7, r7
 80136e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80136ec:	9304      	str	r3, [sp, #16]
 80136ee:	f1c7 0e01 	rsb	lr, r7, #1
 80136f2:	469c      	mov	ip, r3
 80136f4:	463b      	mov	r3, r7
 80136f6:	fb93 f1f9 	sdiv	r1, r3, r9
 80136fa:	fb09 3111 	mls	r1, r9, r1, r3
 80136fe:	b24a      	sxtb	r2, r1
 8013700:	2a00      	cmp	r2, #0
 8013702:	f107 0701 	add.w	r7, r7, #1
 8013706:	bfb8      	it	lt
 8013708:	eb0a 0201 	addlt.w	r2, sl, r1
 801370c:	fb97 f3f9 	sdiv	r3, r7, r9
 8013710:	fb09 7313 	mls	r3, r9, r3, r7
 8013714:	bfb8      	it	lt
 8013716:	b252      	sxtblt	r2, r2
 8013718:	b25b      	sxtb	r3, r3
 801371a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801371e:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013722:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013726:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 801372a:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801372e:	1a45      	subs	r5, r0, r1
 8013730:	bf48      	it	mi
 8013732:	1a09      	submi	r1, r1, r0
 8013734:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013738:	bf4c      	ite	mi
 801373a:	b20d      	sxthmi	r5, r1
 801373c:	b22d      	sxthpl	r5, r5
 801373e:	1a21      	subs	r1, r4, r0
 8013740:	bf48      	it	mi
 8013742:	1b01      	submi	r1, r0, r4
 8013744:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013748:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 801374c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013750:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013754:	1a9b      	subs	r3, r3, r2
 8013756:	1a26      	subs	r6, r4, r0
 8013758:	b21b      	sxth	r3, r3
 801375a:	bf48      	it	mi
 801375c:	1b06      	submi	r6, r0, r4
 801375e:	2b00      	cmp	r3, #0
 8013760:	b209      	sxth	r1, r1
 8013762:	b236      	sxth	r6, r6
 8013764:	dd20      	ble.n	80137a8 <MEMS_runMagCal+0x1338>
 8013766:	4429      	add	r1, r5
 8013768:	440e      	add	r6, r1
 801376a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801376e:	fb02 f606 	mul.w	r6, r2, r6
 8013772:	ee07 6a90 	vmov	s15, r6
 8013776:	ee07 3a10 	vmov	s14, r3
 801377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801377e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013782:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013786:	f10c 0c01 	add.w	ip, ip, #1
 801378a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801378e:	fa5f fc8c 	uxtb.w	ip, ip
 8013792:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013796:	ee17 3a90 	vmov	r3, s15
 801379a:	b21b      	sxth	r3, r3
 801379c:	2b96      	cmp	r3, #150	; 0x96
 801379e:	dd03      	ble.n	80137a8 <MEMS_runMagCal+0x1338>
 80137a0:	9b04      	ldr	r3, [sp, #16]
 80137a2:	3301      	adds	r3, #1
 80137a4:	b2db      	uxtb	r3, r3
 80137a6:	9304      	str	r3, [sp, #16]
 80137a8:	eb0e 0307 	add.w	r3, lr, r7
 80137ac:	b2db      	uxtb	r3, r3
 80137ae:	4598      	cmp	r8, r3
 80137b0:	d8a0      	bhi.n	80136f4 <MEMS_runMagCal+0x1284>
 80137b2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80137b6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80137ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80137be:	4563      	cmp	r3, ip
 80137c0:	f340 820c 	ble.w	8013bdc <MEMS_runMagCal+0x176c>
 80137c4:	9b07      	ldr	r3, [sp, #28]
 80137c6:	b92b      	cbnz	r3, 80137d4 <MEMS_runMagCal+0x1364>
 80137c8:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80137cc:	3b02      	subs	r3, #2
 80137ce:	2b01      	cmp	r3, #1
 80137d0:	f240 851e 	bls.w	8014210 <MEMS_runMagCal+0x1da0>
 80137d4:	ac25      	add	r4, sp, #148	; 0x94
 80137d6:	2220      	movs	r2, #32
 80137d8:	4620      	mov	r0, r4
 80137da:	2100      	movs	r1, #0
 80137dc:	f003 fb34 	bl	8016e48 <memset>
 80137e0:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 80137e4:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80137e8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80137ec:	2200      	movs	r2, #0
 80137ee:	4286      	cmp	r6, r0
 80137f0:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 80137f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80137f6:	f103 0301 	add.w	r3, r3, #1
 80137fa:	f000 8501 	beq.w	8014200 <MEMS_runMagCal+0x1d90>
 80137fe:	1b9b      	subs	r3, r3, r6
 8013800:	fb93 f2f0 	sdiv	r2, r3, r0
 8013804:	fb00 3312 	mls	r3, r0, r2, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	bfb8      	it	lt
 801380c:	181b      	addlt	r3, r3, r0
 801380e:	b21a      	sxth	r2, r3
 8013810:	2e00      	cmp	r6, #0
 8013812:	f000 854c 	beq.w	80142ae <MEMS_runMagCal+0x1e3e>
 8013816:	1e77      	subs	r7, r6, #1
 8013818:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 80134cc <MEMS_runMagCal+0x105c>
 801381c:	b2fd      	uxtb	r5, r7
 801381e:	3501      	adds	r5, #1
 8013820:	eeb0 5a65 	vmov.f32	s10, s11
 8013824:	eef0 4a65 	vmov.f32	s9, s11
 8013828:	4415      	add	r5, r2
 801382a:	4611      	mov	r1, r2
 801382c:	fb91 f3f0 	sdiv	r3, r1, r0
 8013830:	fb00 1313 	mls	r3, r0, r3, r1
 8013834:	b2db      	uxtb	r3, r3
 8013836:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801383a:	3101      	adds	r1, #1
 801383c:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8013840:	ee06 ca90 	vmov	s13, ip
 8013844:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8013848:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801384c:	ee07 ca10 	vmov	s14, ip
 8013850:	ee07 3a90 	vmov	s15, r3
 8013854:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013858:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801385c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013860:	42a9      	cmp	r1, r5
 8013862:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8013866:	ee35 5a07 	vadd.f32	s10, s10, s14
 801386a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801386e:	d1dd      	bne.n	801382c <MEMS_runMagCal+0x13bc>
 8013870:	ee07 6a90 	vmov	s15, r6
 8013874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801387c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8013880:	b2f9      	uxtb	r1, r7
 8013882:	3101      	adds	r1, #1
 8013884:	4411      	add	r1, r2
 8013886:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8013c34 <MEMS_runMagCal+0x17c4>
 801388a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801388e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8013892:	ee29 aa85 	vmul.f32	s20, s19, s10
 8013896:	ee69 9aa5 	vmul.f32	s19, s19, s11
 801389a:	eef0 4a46 	vmov.f32	s9, s12
 801389e:	eeb0 4a46 	vmov.f32	s8, s12
 80138a2:	eef0 3a46 	vmov.f32	s7, s12
 80138a6:	eeb0 3a46 	vmov.f32	s6, s12
 80138aa:	eef0 2a46 	vmov.f32	s5, s12
 80138ae:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 80138b2:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 80138b6:	fb92 f3f0 	sdiv	r3, r2, r0
 80138ba:	fb00 2313 	mls	r3, r0, r3, r2
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80138c4:	3201      	adds	r2, #1
 80138c6:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 80138ca:	ee06 5a90 	vmov	s13, r5
 80138ce:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80138d2:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80138d6:	ee07 5a10 	vmov	s14, r5
 80138da:	ee07 3a90 	vmov	s15, r3
 80138de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80138e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80138e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138ea:	ee76 6ac9 	vsub.f32	s13, s13, s18
 80138ee:	ee37 7a4a 	vsub.f32	s14, s14, s20
 80138f2:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80138f6:	4291      	cmp	r1, r2
 80138f8:	eee6 2aa6 	vfma.f32	s5, s13, s13
 80138fc:	eea6 3a87 	vfma.f32	s6, s13, s14
 8013900:	eea7 4a07 	vfma.f32	s8, s14, s14
 8013904:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8013908:	eee7 4a27 	vfma.f32	s9, s14, s15
 801390c:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013910:	d1d1      	bne.n	80138b6 <MEMS_runMagCal+0x1446>
 8013912:	edc4 2a00 	vstr	s5, [r4]
 8013916:	ed84 3a01 	vstr	s6, [r4, #4]
 801391a:	edc4 3a02 	vstr	s7, [r4, #8]
 801391e:	ed84 4a03 	vstr	s8, [r4, #12]
 8013922:	edc4 4a04 	vstr	s9, [r4, #16]
 8013926:	ed84 6a05 	vstr	s12, [r4, #20]
 801392a:	a91a      	add	r1, sp, #104	; 0x68
 801392c:	4620      	mov	r0, r4
 801392e:	f7fe fce5 	bl	80122fc <MEMS_EIG3>
 8013932:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8013936:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 801393a:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 801393e:	eef0 5ae4 	vabs.f32	s11, s9
 8013942:	eef0 6ac6 	vabs.f32	s13, s12
 8013946:	eef4 6ae5 	vcmpe.f32	s13, s11
 801394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394e:	bf8c      	ite	hi
 8013950:	eef0 7a65 	vmovhi.f32	s15, s11
 8013954:	eef0 7a66 	vmovls.f32	s15, s13
 8013958:	eeb0 7ac5 	vabs.f32	s14, s10
 801395c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013964:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013968:	bf88      	it	hi
 801396a:	eef0 7a47 	vmovhi.f32	s15, s14
 801396e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013972:	bfb8      	it	lt
 8013974:	eef0 6a65 	vmovlt.f32	s13, s11
 8013978:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801397c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8013980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013984:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013988:	bfb8      	it	lt
 801398a:	eeb0 7a66 	vmovlt.f32	s14, s13
 801398e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013996:	f300 8420 	bgt.w	80141da <MEMS_runMagCal+0x1d6a>
 801399a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 801399e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80139a2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80139a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80139aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ae:	dd02      	ble.n	80139b6 <MEMS_runMagCal+0x1546>
 80139b0:	2b22      	cmp	r3, #34	; 0x22
 80139b2:	f240 8412 	bls.w	80141da <MEMS_runMagCal+0x1d6a>
 80139b6:	ee76 7a24 	vadd.f32	s15, s12, s9
 80139ba:	ee07 3a10 	vmov	s14, r3
 80139be:	ee77 7a85 	vadd.f32	s15, s15, s10
 80139c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139c6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013c08 <MEMS_runMagCal+0x1798>
 80139ca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80139ce:	eef1 7ac6 	vsqrt.f32	s15, s12
 80139d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80139d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80139da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139de:	f300 83fc 	bgt.w	80141da <MEMS_runMagCal+0x1d6a>
 80139e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80139e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80139ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139ee:	f100 83f4 	bmi.w	80141da <MEMS_runMagCal+0x1d6a>
 80139f2:	eddf 7a86 	vldr	s15, [pc, #536]	; 8013c0c <MEMS_runMagCal+0x179c>
 80139f6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80139fa:	2300      	movs	r3, #0
 80139fc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8013a00:	932c      	str	r3, [sp, #176]	; 0xb0
 8013a02:	eddd 7a02 	vldr	s15, [sp, #8]
 8013a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a12:	d408      	bmi.n	8013a26 <MEMS_runMagCal+0x15b6>
 8013a14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013a18:	ee17 3a10 	vmov	r3, s14
 8013a1c:	b21b      	sxth	r3, r3
 8013a1e:	ee07 3a90 	vmov	s15, r3
 8013a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a26:	eddf 6a81 	vldr	s13, [pc, #516]	; 8013c2c <MEMS_runMagCal+0x17bc>
 8013a2a:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8013a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a36:	dc08      	bgt.n	8013a4a <MEMS_runMagCal+0x15da>
 8013a38:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013a3c:	ee17 3a10 	vmov	r3, s14
 8013a40:	b21b      	sxth	r3, r3
 8013a42:	ee07 3a90 	vmov	s15, r3
 8013a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a4a:	ee27 7a88 	vmul.f32	s14, s15, s16
 8013a4e:	eddf 7a70 	vldr	s15, [pc, #448]	; 8013c10 <MEMS_runMagCal+0x17a0>
 8013a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a5a:	f340 8424 	ble.w	80142a6 <MEMS_runMagCal+0x1e36>
 8013a5e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8013c14 <MEMS_runMagCal+0x17a4>
 8013a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6a:	f140 841c 	bpl.w	80142a6 <MEMS_runMagCal+0x1e36>
 8013a6e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8013c18 <MEMS_runMagCal+0x17a8>
 8013a72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a76:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013a7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a82:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8013c2c <MEMS_runMagCal+0x17bc>
 8013a86:	eddf ba6b 	vldr	s23, [pc, #428]	; 8013c34 <MEMS_runMagCal+0x17c4>
 8013a8a:	ed9f ba64 	vldr	s22, [pc, #400]	; 8013c1c <MEMS_runMagCal+0x17ac>
 8013a8e:	eddf aa64 	vldr	s21, [pc, #400]	; 8013c20 <MEMS_runMagCal+0x17b0>
 8013a92:	9d03      	ldr	r5, [sp, #12]
 8013a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a98:	ee68 4a09 	vmul.f32	s9, s16, s18
 8013a9c:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8013aa0:	ee68 9a29 	vmul.f32	s19, s16, s19
 8013aa4:	edc4 4a00 	vstr	s9, [r4]
 8013aa8:	ed84 aa01 	vstr	s20, [r4, #4]
 8013aac:	edc4 9a02 	vstr	s19, [r4, #8]
 8013ab0:	edc4 7a03 	vstr	s15, [r4, #12]
 8013ab4:	edc4 7a06 	vstr	s15, [r4, #24]
 8013ab8:	ab11      	add	r3, sp, #68	; 0x44
 8013aba:	ee1c 0a10 	vmov	r0, s24
 8013abe:	aa2d      	add	r2, sp, #180	; 0xb4
 8013ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8013ac4:	4621      	mov	r1, r4
 8013ac6:	f7fe fa01 	bl	8011ecc <MEMS_SolveLinearEq>
 8013aca:	1c6b      	adds	r3, r5, #1
 8013acc:	2800      	cmp	r0, #0
 8013ace:	f43e aed1 	beq.w	8012874 <MEMS_runMagCal+0x404>
 8013ad2:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8013ad6:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8013ada:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8013ade:	edd4 4a00 	vldr	s9, [r4]
 8013ae2:	ed94 5a01 	vldr	s10, [r4, #4]
 8013ae6:	edd4 5a02 	vldr	s11, [r4, #8]
 8013aea:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8013aee:	ed94 6a03 	vldr	s12, [r4, #12]
 8013af2:	eef0 6ae3 	vabs.f32	s13, s7
 8013af6:	eef0 7ac3 	vabs.f32	s15, s6
 8013afa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b02:	bfb8      	it	lt
 8013b04:	eef0 7a66 	vmovlt.f32	s15, s13
 8013b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b10:	bfb8      	it	lt
 8013b12:	eef0 7a6b 	vmovlt.f32	s15, s23
 8013b16:	eef0 6ac4 	vabs.f32	s13, s8
 8013b1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b22:	bfb8      	it	lt
 8013b24:	eef0 6a67 	vmovlt.f32	s13, s15
 8013b28:	ee74 4a83 	vadd.f32	s9, s9, s6
 8013b2c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8013b30:	ee75 5a84 	vadd.f32	s11, s11, s8
 8013b34:	ee36 6a07 	vadd.f32	s12, s12, s14
 8013b38:	eef4 6acb 	vcmpe.f32	s13, s22
 8013b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b40:	edc4 4a00 	vstr	s9, [r4]
 8013b44:	ed84 5a01 	vstr	s10, [r4, #4]
 8013b48:	edc4 5a02 	vstr	s11, [r4, #8]
 8013b4c:	ed84 6a03 	vstr	s12, [r4, #12]
 8013b50:	eef0 7ac7 	vabs.f32	s15, s14
 8013b54:	d507      	bpl.n	8013b66 <MEMS_runMagCal+0x16f6>
 8013b56:	eef4 7aea 	vcmpe.f32	s15, s21
 8013b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b5e:	d502      	bpl.n	8013b66 <MEMS_runMagCal+0x16f6>
 8013b60:	2d01      	cmp	r5, #1
 8013b62:	f63e ae8b 	bhi.w	801287c <MEMS_runMagCal+0x40c>
 8013b66:	b2dd      	uxtb	r5, r3
 8013b68:	2d05      	cmp	r5, #5
 8013b6a:	d1a5      	bne.n	8013ab8 <MEMS_runMagCal+0x1648>
 8013b6c:	f7fe be86 	b.w	801287c <MEMS_runMagCal+0x40c>
 8013b70:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8013b74:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8013b78:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 8013b7c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 8013c24 <MEMS_runMagCal+0x17b4>
 8013b80:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8013b84:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8013b88:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013b8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013b90:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013b94:	eef4 7ae4 	vcmpe.f32	s15, s9
 8013b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b9c:	bf88      	it	hi
 8013b9e:	eef0 7a64 	vmovhi.f32	s15, s9
 8013ba2:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013baa:	bfb8      	it	lt
 8013bac:	eef0 7a45 	vmovlt.f32	s15, s10
 8013bb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013bb4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bbc:	dc0e      	bgt.n	8013bdc <MEMS_runMagCal+0x176c>
 8013bbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013bc2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bca:	dc07      	bgt.n	8013bdc <MEMS_runMagCal+0x176c>
 8013bcc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd8:	f77f ad73 	ble.w	80136c2 <MEMS_runMagCal+0x1252>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f88b 3000 	strb.w	r3, [fp]
 8013be2:	f7ff b880 	b.w	8012ce6 <MEMS_runMagCal+0x876>
 8013be6:	2300      	movs	r3, #0
 8013be8:	9307      	str	r3, [sp, #28]
 8013bea:	2301      	movs	r3, #1
 8013bec:	9303      	str	r3, [sp, #12]
 8013bee:	f7ff bb61 	b.w	80132b4 <MEMS_runMagCal+0xe44>
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	fb93 f2f7 	sdiv	r2, r3, r7
 8013bf8:	fb07 3212 	mls	r2, r7, r2, r3
 8013bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bfe:	b212      	sxth	r2, r2
 8013c00:	46bc      	mov	ip, r7
 8013c02:	f7ff bb75 	b.w	80132f0 <MEMS_runMagCal+0xe80>
 8013c06:	bf00      	nop
 8013c08:	42960000 	.word	0x42960000
 8013c0c:	430d0000 	.word	0x430d0000
 8013c10:	41966667 	.word	0x41966667
 8013c14:	433c0000 	.word	0x433c0000
 8013c18:	3c2e4c41 	.word	0x3c2e4c41
 8013c1c:	3e99999a 	.word	0x3e99999a
 8013c20:	3f666666 	.word	0x3f666666
 8013c24:	3eaaaaab 	.word	0x3eaaaaab
 8013c28:	358637bd 	.word	0x358637bd
 8013c2c:	423c0000 	.word	0x423c0000
 8013c30:	3a83126f 	.word	0x3a83126f
 8013c34:	00000000 	.word	0x00000000
 8013c38:	eddd 7a08 	vldr	s15, [sp, #32]
 8013c3c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8013c30 <MEMS_runMagCal+0x17c0>
 8013c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013c44:	ee07 3a10 	vmov	s14, r3
 8013c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013c4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013c50:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013c54:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013c58:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c60:	f63f aa67 	bhi.w	8013132 <MEMS_runMagCal+0xcc2>
 8013c64:	9b07      	ldr	r3, [sp, #28]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	f43f a83d 	beq.w	8012ce6 <MEMS_runMagCal+0x876>
 8013c6c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8013c70:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013c74:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c7c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c84:	bf4c      	ite	mi
 8013c86:	2301      	movmi	r3, #1
 8013c88:	2300      	movpl	r3, #0
 8013c8a:	9307      	str	r3, [sp, #28]
 8013c8c:	f7ff ba55 	b.w	801313a <MEMS_runMagCal+0xcca>
 8013c90:	fb92 f1f0 	sdiv	r1, r2, r0
 8013c94:	fb00 2211 	mls	r2, r0, r1, r2
 8013c98:	b211      	sxth	r1, r2
 8013c9a:	4605      	mov	r5, r0
 8013c9c:	f7ff b8da 	b.w	8012e54 <MEMS_runMagCal+0x9e4>
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	23ff      	movs	r3, #255	; 0xff
 8013ca4:	ee1c 0a10 	vmov	r0, s24
 8013ca8:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013cac:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013cb0:	eeb0 0a49 	vmov.f32	s0, s18
 8013cb4:	4649      	mov	r1, r9
 8013cb6:	f7f7 fd11 	bl	800b6dc <MEMS_updateMagBufferIndex>
 8013cba:	f7ff b90b 	b.w	8012ed4 <MEMS_runMagCal+0xa64>
 8013cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013cc2:	fb03 f60c 	mul.w	r6, r3, ip
 8013cc6:	fb03 f202 	mul.w	r2, r3, r2
 8013cca:	fb03 f301 	mul.w	r3, r3, r1
 8013cce:	ee06 6a90 	vmov	s13, r6
 8013cd2:	ee07 2a10 	vmov	s14, r2
 8013cd6:	ee07 3a90 	vmov	s15, r3
 8013cda:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8013c28 <MEMS_runMagCal+0x17b8>
 8013cde:	9e05      	ldr	r6, [sp, #20]
 8013ce0:	9400      	str	r4, [sp, #0]
 8013ce2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ce6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cee:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013cf2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013cf6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013cfa:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013cfe:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8013d02:	e9c5 0003 	strd	r0, r0, [r5, #12]
 8013d06:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8013d0a:	6028      	str	r0, [r5, #0]
 8013d0c:	ed96 0a01 	vldr	s0, [r6, #4]
 8013d10:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8013d14:	4642      	mov	r2, r8
 8013d16:	ab0d      	add	r3, sp, #52	; 0x34
 8013d18:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8013d1c:	ad0e      	add	r5, sp, #56	; 0x38
 8013d1e:	ee1c 0a10 	vmov	r0, s24
 8013d22:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013d26:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8013d2a:	f7f7 fd79 	bl	800b820 <getMagStats.constprop.0>
 8013d2e:	9500      	str	r5, [sp, #0]
 8013d30:	ed96 0a01 	vldr	s0, [r6, #4]
 8013d34:	ee1c 0a10 	vmov	r0, s24
 8013d38:	aa2d      	add	r2, sp, #180	; 0xb4
 8013d3a:	ab0d      	add	r3, sp, #52	; 0x34
 8013d3c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013d40:	f7f7 fd6e 	bl	800b820 <getMagStats.constprop.0>
 8013d44:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8013c2c <MEMS_runMagCal+0x17bc>
 8013d48:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013d4c:	ed95 7a00 	vldr	s14, [r5]
 8013d50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d54:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013d58:	eef0 7ae7 	vabs.f32	s15, s15
 8013d5c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d64:	d505      	bpl.n	8013d72 <MEMS_runMagCal+0x1902>
 8013d66:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6e:	f100 81fa 	bmi.w	8014166 <MEMS_runMagCal+0x1cf6>
 8013d72:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8013d76:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7e:	f140 81a8 	bpl.w	80140d2 <MEMS_runMagCal+0x1c62>
 8013d82:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8a:	9b03      	ldr	r3, [sp, #12]
 8013d8c:	bfb8      	it	lt
 8013d8e:	2302      	movlt	r3, #2
 8013d90:	edd4 6a00 	vldr	s13, [r4]
 8013d94:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da4:	f57e af9f 	bpl.w	8012ce6 <MEMS_runMagCal+0x876>
 8013da8:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8013dac:	429a      	cmp	r2, r3
 8013dae:	f63e af9a 	bhi.w	8012ce6 <MEMS_runMagCal+0x876>
 8013db2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dba:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc2:	d40e      	bmi.n	8013de2 <MEMS_runMagCal+0x1972>
 8013dc4:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013dc8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dd0:	f140 80d4 	bpl.w	8013f7c <MEMS_runMagCal+0x1b0c>
 8013dd4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8013dd8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	f080 80cd 	bcs.w	8013f7c <MEMS_runMagCal+0x1b0c>
 8013de2:	9b05      	ldr	r3, [sp, #20]
 8013de4:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8013de8:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8013dec:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8013df0:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 8013df4:	edd3 5a01 	vldr	s11, [r3, #4]
 8013df8:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8013dfc:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8013e00:	1b8b      	subs	r3, r1, r6
 8013e02:	eba0 0c07 	sub.w	ip, r0, r7
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	bfb8      	it	lt
 8013e0a:	425b      	neglt	r3, r3
 8013e0c:	f1bc 0f00 	cmp.w	ip, #0
 8013e10:	bfb8      	it	lt
 8013e12:	f1cc 0c00 	rsblt	ip, ip, #0
 8013e16:	4563      	cmp	r3, ip
 8013e18:	bfb8      	it	lt
 8013e1a:	4663      	movlt	r3, ip
 8013e1c:	eba2 0c04 	sub.w	ip, r2, r4
 8013e20:	f1bc 0f00 	cmp.w	ip, #0
 8013e24:	b21b      	sxth	r3, r3
 8013e26:	bfb8      	it	lt
 8013e28:	f1cc 0c00 	rsblt	ip, ip, #0
 8013e2c:	4563      	cmp	r3, ip
 8013e2e:	bfb8      	it	lt
 8013e30:	4663      	movlt	r3, ip
 8013e32:	b21b      	sxth	r3, r3
 8013e34:	ee07 3a90 	vmov	s15, r3
 8013e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e3c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8013e40:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013e44:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e4c:	f140 8096 	bpl.w	8013f7c <MEMS_runMagCal+0x1b0c>
 8013e50:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013e54:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8013e58:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8013e5c:	ee04 3a90 	vmov	s9, r3
 8013e60:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 8013e64:	ee05 3a10 	vmov	s10, r3
 8013e68:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 8013e6c:	ee07 0a90 	vmov	s15, r0
 8013e70:	ee05 3a90 	vmov	s11, r3
 8013e74:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013e78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013e7c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8013e80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013e84:	ee06 3a10 	vmov	s12, r3
 8013e88:	ee03 7a90 	vmov	s7, r7
 8013e8c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8013e90:	ee07 1a90 	vmov	s15, r1
 8013e94:	ee00 3a90 	vmov	s1, r3
 8013e98:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013e9c:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8013ea0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013ea4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8013ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013eac:	ee64 4a84 	vmul.f32	s9, s9, s8
 8013eb0:	ee03 6a90 	vmov	s7, r6
 8013eb4:	eee2 6a22 	vfma.f32	s13, s4, s5
 8013eb8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013ebc:	ee07 2a90 	vmov	s15, r2
 8013ec0:	ee01 3a10 	vmov	s2, r3
 8013ec4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013ec8:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8013ecc:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8013ed0:	eee2 4a20 	vfma.f32	s9, s4, s1
 8013ed4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013ed8:	ee01 3a90 	vmov	s3, r3
 8013edc:	ee25 5a04 	vmul.f32	s10, s10, s8
 8013ee0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013ee4:	eea2 7a03 	vfma.f32	s14, s4, s6
 8013ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eec:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013ef0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013ef4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8013ef8:	ee03 4a90 	vmov	s7, r4
 8013efc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8013f00:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013f04:	ee65 5a84 	vmul.f32	s11, s11, s8
 8013f08:	ee26 6a04 	vmul.f32	s12, s12, s8
 8013f0c:	ee16 2a90 	vmov	r2, s13
 8013f10:	ee04 3a10 	vmov	s8, r3
 8013f14:	eea2 5a01 	vfma.f32	s10, s4, s2
 8013f18:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8013f1c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013f20:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8013f24:	eee2 7a23 	vfma.f32	s15, s4, s7
 8013f28:	ee14 2a90 	vmov	r2, s9
 8013f2c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013f30:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013f34:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013f38:	eee2 5a21 	vfma.f32	s11, s4, s3
 8013f3c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8013f40:	eea2 6a04 	vfma.f32	s12, s4, s8
 8013f44:	ee17 2a10 	vmov	r2, s14
 8013f48:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8013f4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f50:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8013f54:	ee15 2a10 	vmov	r2, s10
 8013f58:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8013f5c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8013f60:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8013f64:	ee17 2a90 	vmov	r2, s15
 8013f68:	ee16 3a10 	vmov	r3, s12
 8013f6c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8013f70:	ee15 2a90 	vmov	r2, s11
 8013f74:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013f78:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8013f7c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8013f7e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013f82:	f7fe bda2 	b.w	8012aca <MEMS_runMagCal+0x65a>
 8013f86:	ee1c 0a10 	vmov	r0, s24
 8013f8a:	eeb0 0a49 	vmov.f32	s0, s18
 8013f8e:	4649      	mov	r1, r9
 8013f90:	f7f7 fba4 	bl	800b6dc <MEMS_updateMagBufferIndex>
 8013f94:	f7ff b89f 	b.w	80130d6 <MEMS_runMagCal+0xc66>
 8013f98:	eddd 7a08 	vldr	s15, [sp, #32]
 8013f9c:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8013c30 <MEMS_runMagCal+0x17c0>
 8013fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013fa8:	e660      	b.n	8013c6c <MEMS_runMagCal+0x17fc>
 8013faa:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 8013c34 <MEMS_runMagCal+0x17c4>
 8013fae:	1c6b      	adds	r3, r5, #1
 8013fb0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8013fb4:	ad0e      	add	r5, sp, #56	; 0x38
 8013fb6:	fb93 f1f6 	sdiv	r1, r3, r6
 8013fba:	fa1f fc86 	uxth.w	ip, r6
 8013fbe:	fb06 3311 	mls	r3, r6, r1, r3
 8013fc2:	edc5 6a00 	vstr	s13, [r5]
 8013fc6:	2e00      	cmp	r6, #0
 8013fc8:	f000 80e1 	beq.w	801418e <MEMS_runMagCal+0x1d1e>
 8013fcc:	b29b      	uxth	r3, r3
 8013fce:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013fd2:	1c58      	adds	r0, r3, #1
 8013fd4:	eeb0 6a66 	vmov.f32	s12, s13
 8013fd8:	fa10 fc8c 	uxtah	ip, r0, ip
 8013fdc:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	e000      	b.n	8013fe6 <MEMS_runMagCal+0x1b76>
 8013fe4:	3001      	adds	r0, #1
 8013fe6:	fbb1 f3f6 	udiv	r3, r1, r6
 8013fea:	fb06 1313 	mls	r3, r6, r3, r1
 8013fee:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8013ff2:	8a99      	ldrh	r1, [r3, #20]
 8013ff4:	4571      	cmp	r1, lr
 8013ff6:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 8013ffa:	f1a3 031c 	sub.w	r3, r3, #28
 8013ffe:	bf98      	it	ls
 8014000:	ebae 0301 	subls.w	r3, lr, r1
 8014004:	b29b      	uxth	r3, r3
 8014006:	fb03 f303 	mul.w	r3, r3, r3
 801400a:	ee07 1a10 	vmov	s14, r1
 801400e:	ee07 3a90 	vmov	s15, r3
 8014012:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801401a:	4584      	cmp	ip, r0
 801401c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014020:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014024:	4601      	mov	r1, r0
 8014026:	d1dd      	bne.n	8013fe4 <MEMS_runMagCal+0x1b74>
 8014028:	ee07 4a90 	vmov	s15, r4
 801402c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014030:	eddf 5ae6 	vldr	s11, [pc, #920]	; 80143cc <MEMS_runMagCal+0x1f5c>
 8014034:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 80143d0 <MEMS_runMagCal+0x1f60>
 8014038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801403c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014040:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014044:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014048:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801404c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014054:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014058:	edc5 7a00 	vstr	s15, [r5]
 801405c:	dd47      	ble.n	80140ee <MEMS_runMagCal+0x1c7e>
 801405e:	eddf 7add 	vldr	s15, [pc, #884]	; 80143d4 <MEMS_runMagCal+0x1f64>
 8014062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014066:	2302      	movs	r3, #2
 8014068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014070:	f77e aead 	ble.w	8012dce <MEMS_runMagCal+0x95e>
 8014074:	2301      	movs	r3, #1
 8014076:	f88b 3001 	strb.w	r3, [fp, #1]
 801407a:	f7fe bea8 	b.w	8012dce <MEMS_runMagCal+0x95e>
 801407e:	ee1c 0a10 	vmov	r0, s24
 8014082:	eeb0 0a49 	vmov.f32	s0, s18
 8014086:	4649      	mov	r1, r9
 8014088:	f7f7 fb28 	bl	800b6dc <MEMS_updateMagBufferIndex>
 801408c:	f7fe bf0d 	b.w	8012eaa <MEMS_runMagCal+0xa3a>
 8014090:	9b02      	ldr	r3, [sp, #8]
 8014092:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8014096:	f8db 100c 	ldr.w	r1, [fp, #12]
 801409a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801409e:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80140a2:	4413      	add	r3, r2
 80140a4:	4299      	cmp	r1, r3
 80140a6:	f4bf ad99 	bcs.w	8013bdc <MEMS_runMagCal+0x176c>
 80140aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80140b0:	fb03 f301 	mul.w	r3, r3, r1
 80140b4:	3364      	adds	r3, #100	; 0x64
 80140b6:	4293      	cmp	r3, r2
 80140b8:	bf38      	it	cc
 80140ba:	4613      	movcc	r3, r2
 80140bc:	2200      	movs	r2, #0
 80140be:	f8cb 300c 	str.w	r3, [fp, #12]
 80140c2:	f88b 2000 	strb.w	r2, [fp]
 80140c6:	f7fe be0e 	b.w	8012ce6 <MEMS_runMagCal+0x876>
 80140ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80140ce:	f7ff ba6f 	b.w	80135b0 <MEMS_runMagCal+0x1140>
 80140d2:	9b03      	ldr	r3, [sp, #12]
 80140d4:	e65c      	b.n	8013d90 <MEMS_runMagCal+0x1920>
 80140d6:	4619      	mov	r1, r3
 80140d8:	9b02      	ldr	r3, [sp, #8]
 80140da:	3301      	adds	r3, #1
 80140dc:	fb93 f2f1 	sdiv	r2, r3, r1
 80140e0:	fb01 3212 	mls	r2, r1, r2, r3
 80140e4:	9304      	str	r3, [sp, #16]
 80140e6:	b212      	sxth	r2, r2
 80140e8:	4689      	mov	r9, r1
 80140ea:	f7ff ba11 	b.w	8013510 <MEMS_runMagCal+0x10a0>
 80140ee:	eddf 7aba 	vldr	s15, [pc, #744]	; 80143d8 <MEMS_runMagCal+0x1f68>
 80140f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140fa:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80143d4 <MEMS_runMagCal+0x1f64>
 80140fe:	d434      	bmi.n	801416a <MEMS_runMagCal+0x1cfa>
 8014100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014108:	bfc4      	itt	gt
 801410a:	2301      	movgt	r3, #1
 801410c:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014110:	f7ff b892 	b.w	8013238 <MEMS_runMagCal+0xdc8>
 8014114:	9b05      	ldr	r3, [sp, #20]
 8014116:	f89b 1011 	ldrb.w	r1, [fp, #17]
 801411a:	ed93 0a01 	vldr	s0, [r3, #4]
 801411e:	f7fe bd84 	b.w	8012c2a <MEMS_runMagCal+0x7ba>
 8014122:	2303      	movs	r3, #3
 8014124:	9303      	str	r3, [sp, #12]
 8014126:	f7fe bdd4 	b.w	8012cd2 <MEMS_runMagCal+0x862>
 801412a:	4619      	mov	r1, r3
 801412c:	f7ff ba78 	b.w	8013620 <MEMS_runMagCal+0x11b0>
 8014130:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014138:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014140:	f73f ad4c 	bgt.w	8013bdc <MEMS_runMagCal+0x176c>
 8014144:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014148:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014150:	f73f ad44 	bgt.w	8013bdc <MEMS_runMagCal+0x176c>
 8014154:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014158:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014160:	f77f aaaf 	ble.w	80136c2 <MEMS_runMagCal+0x1252>
 8014164:	e53a      	b.n	8013bdc <MEMS_runMagCal+0x176c>
 8014166:	2303      	movs	r3, #3
 8014168:	e612      	b.n	8013d90 <MEMS_runMagCal+0x1920>
 801416a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801416e:	2300      	movs	r3, #0
 8014170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014174:	f88b 3001 	strb.w	r3, [fp, #1]
 8014178:	f04f 0103 	mov.w	r1, #3
 801417c:	bfc8      	it	gt
 801417e:	2301      	movgt	r3, #1
 8014180:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014184:	bfc8      	it	gt
 8014186:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801418a:	f7ff b858 	b.w	801323e <MEMS_runMagCal+0xdce>
 801418e:	2303      	movs	r3, #3
 8014190:	f88b c001 	strb.w	ip, [fp, #1]
 8014194:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014198:	f7ff b851 	b.w	801323e <MEMS_runMagCal+0xdce>
 801419c:	9b04      	ldr	r3, [sp, #16]
 801419e:	fb93 f7f9 	sdiv	r7, r3, r9
 80141a2:	fb09 3717 	mls	r7, r9, r7, r3
 80141a6:	b23f      	sxth	r7, r7
 80141a8:	f7ff ba9a 	b.w	80136e0 <MEMS_runMagCal+0x1270>
 80141ac:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80143dc <MEMS_runMagCal+0x1f6c>
 80141b0:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80141b4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80141b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80141bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80141c0:	ee87 0a08 	vdiv.f32	s0, s14, s16
 80141c4:	ee17 2a90 	vmov	r2, s15
 80141c8:	b291      	uxth	r1, r2
 80141ca:	b113      	cbz	r3, 80141d2 <MEMS_runMagCal+0x1d62>
 80141cc:	3b01      	subs	r3, #1
 80141ce:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80141d2:	ee1c 0a10 	vmov	r0, s24
 80141d6:	f7f7 fa81 	bl	800b6dc <MEMS_updateMagBufferIndex>
 80141da:	eddd 7a08 	vldr	s15, [sp, #32]
 80141de:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80141e2:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80143e0 <MEMS_runMagCal+0x1f70>
 80141e6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141ea:	f001 f825 	bl	8015238 <roundf>
 80141ee:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80141f2:	2300      	movs	r3, #0
 80141f4:	ed8b 0a01 	vstr	s0, [fp, #4]
 80141f8:	f88b 3000 	strb.w	r3, [fp]
 80141fc:	f7fe bd73 	b.w	8012ce6 <MEMS_runMagCal+0x876>
 8014200:	fb93 f2f6 	sdiv	r2, r3, r6
 8014204:	fb06 3312 	mls	r3, r6, r2, r3
 8014208:	b21a      	sxth	r2, r3
 801420a:	4630      	mov	r0, r6
 801420c:	f7ff bb00 	b.w	8013810 <MEMS_runMagCal+0x13a0>
 8014210:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014214:	f001 f810 	bl	8015238 <roundf>
 8014218:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801421c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014220:	ee17 3a90 	vmov	r3, s15
 8014224:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014228:	f8a9 3000 	strh.w	r3, [r9]
 801422c:	f001 f804 	bl	8015238 <roundf>
 8014230:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014234:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014238:	ee17 3a90 	vmov	r3, s15
 801423c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014240:	f000 fffa 	bl	8015238 <roundf>
 8014244:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014248:	ac0f      	add	r4, sp, #60	; 0x3c
 801424a:	ee17 5a90 	vmov	r5, s15
 801424e:	9400      	str	r4, [sp, #0]
 8014250:	ee1c 0a10 	vmov	r0, s24
 8014254:	4649      	mov	r1, r9
 8014256:	ab10      	add	r3, sp, #64	; 0x40
 8014258:	eeb0 0a48 	vmov.f32	s0, s16
 801425c:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014260:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014264:	f7f7 fadc 	bl	800b820 <getMagStats.constprop.0>
 8014268:	ed94 7a00 	vldr	s14, [r4]
 801426c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80143e4 <MEMS_runMagCal+0x1f74>
 8014270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014278:	d50e      	bpl.n	8014298 <MEMS_runMagCal+0x1e28>
 801427a:	b968      	cbnz	r0, 8014298 <MEMS_runMagCal+0x1e28>
 801427c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014280:	b32b      	cbz	r3, 80142ce <MEMS_runMagCal+0x1e5e>
 8014282:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014286:	ee07 3a90 	vmov	s15, r3
 801428a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801428e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014296:	dc1a      	bgt.n	80142ce <MEMS_runMagCal+0x1e5e>
 8014298:	2300      	movs	r3, #0
 801429a:	f8c9 3000 	str.w	r3, [r9]
 801429e:	f8a9 3004 	strh.w	r3, [r9, #4]
 80142a2:	f7ff ba97 	b.w	80137d4 <MEMS_runMagCal+0x1364>
 80142a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80142aa:	f7ff bbea 	b.w	8013a82 <MEMS_runMagCal+0x1612>
 80142ae:	eddf 9a4e 	vldr	s19, [pc, #312]	; 80143e8 <MEMS_runMagCal+0x1f78>
 80142b2:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 80142b6:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 80142ba:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 80142be:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80142c2:	ee29 aa8a 	vmul.f32	s20, s19, s20
 80142c6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80142ca:	f7ff bb2e 	b.w	801392a <MEMS_runMagCal+0x14ba>
 80142ce:	eddd 7a08 	vldr	s15, [sp, #32]
 80142d2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80142d6:	eddf 7a42 	vldr	s15, [pc, #264]	; 80143e0 <MEMS_runMagCal+0x1f70>
 80142da:	2303      	movs	r3, #3
 80142dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80142e0:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80142e4:	e781      	b.n	80141ea <MEMS_runMagCal+0x1d7a>
 80142e6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80143ec <MEMS_runMagCal+0x1f7c>
 80142ea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80142ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f2:	f77e ab1b 	ble.w	801292c <MEMS_runMagCal+0x4bc>
 80142f6:	f7fe bb21 	b.w	801293c <MEMS_runMagCal+0x4cc>
 80142fa:	2224      	movs	r2, #36	; 0x24
 80142fc:	2100      	movs	r1, #0
 80142fe:	a82d      	add	r0, sp, #180	; 0xb4
 8014300:	f002 fda2 	bl	8016e48 <memset>
 8014304:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80143f0 <MEMS_runMagCal+0x1f80>
 8014308:	eec7 9a89 	vdiv.f32	s19, s15, s18
 801430c:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014310:	4627      	mov	r7, r4
 8014312:	ae2d      	add	r6, sp, #180	; 0xb4
 8014314:	2500      	movs	r5, #0
 8014316:	3501      	adds	r5, #1
 8014318:	ecb7 0a01 	vldmia	r7!, {s0}
 801431c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014320:	f000 ff8a 	bl	8015238 <roundf>
 8014324:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014328:	4633      	mov	r3, r6
 801432a:	edc3 9a00 	vstr	s19, [r3]
 801432e:	ee10 3a10 	vmov	r3, s0
 8014332:	2d03      	cmp	r5, #3
 8014334:	f829 3b02 	strh.w	r3, [r9], #2
 8014338:	f106 0610 	add.w	r6, r6, #16
 801433c:	d1eb      	bne.n	8014316 <MEMS_runMagCal+0x1ea6>
 801433e:	ad12      	add	r5, sp, #72	; 0x48
 8014340:	9500      	str	r5, [sp, #0]
 8014342:	ab2b      	add	r3, sp, #172	; 0xac
 8014344:	eeb0 0a48 	vmov.f32	s0, s16
 8014348:	ee1c 0a10 	vmov	r0, s24
 801434c:	a915      	add	r1, sp, #84	; 0x54
 801434e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014350:	f7f7 fa66 	bl	800b820 <getMagStats.constprop.0>
 8014354:	eddf 3a26 	vldr	s7, [pc, #152]	; 80143f0 <MEMS_runMagCal+0x1f80>
 8014358:	ed94 4a03 	vldr	s8, [r4, #12]
 801435c:	edd5 7a00 	vldr	s15, [r5]
 8014360:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014364:	edd4 6a06 	vldr	s13, [r4, #24]
 8014368:	edd4 4a00 	vldr	s9, [r4]
 801436c:	ed94 5a01 	vldr	s10, [r4, #4]
 8014370:	edd4 5a02 	vldr	s11, [r4, #8]
 8014374:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014378:	ad2e      	add	r5, sp, #184	; 0xb8
 801437a:	2300      	movs	r3, #0
 801437c:	e9c5 3300 	strd	r3, r3, [r5]
 8014380:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014384:	60ab      	str	r3, [r5, #8]
 8014386:	61ab      	str	r3, [r5, #24]
 8014388:	ee26 6a27 	vmul.f32	s12, s12, s15
 801438c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014394:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014398:	eec5 9a08 	vdiv.f32	s19, s10, s16
 801439c:	ee85 aa88 	vdiv.f32	s20, s11, s16
 80143a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80143a4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80143a8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80143ac:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80143b0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80143b4:	d405      	bmi.n	80143c2 <MEMS_runMagCal+0x1f52>
 80143b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80143ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143be:	f57e aa9b 	bpl.w	80128f8 <MEMS_runMagCal+0x488>
 80143c2:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 80143f4 <MEMS_runMagCal+0x1f84>
 80143c6:	f7fe ba9d 	b.w	8012904 <MEMS_runMagCal+0x494>
 80143ca:	bf00      	nop
 80143cc:	3c23d70a 	.word	0x3c23d70a
 80143d0:	4b095440 	.word	0x4b095440
 80143d4:	481c4000 	.word	0x481c4000
 80143d8:	471c4000 	.word	0x471c4000
 80143dc:	433d0000 	.word	0x433d0000
 80143e0:	3a83126f 	.word	0x3a83126f
 80143e4:	3ff4cccd 	.word	0x3ff4cccd
 80143e8:	7f800000 	.word	0x7f800000
 80143ec:	3ee66666 	.word	0x3ee66666
 80143f0:	423c0000 	.word	0x423c0000
 80143f4:	00000000 	.word	0x00000000
 80143f8:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 80143fc:	4293      	cmp	r3, r2
 80143fe:	f67e acac 	bls.w	8012d5a <MEMS_runMagCal+0x8ea>
 8014402:	f7fe bca0 	b.w	8012d46 <MEMS_runMagCal+0x8d6>
 8014406:	bf00      	nop

08014408 <MotionFX_GetStateSize>:
 8014408:	f44f 6018 	mov.w	r0, #2432	; 0x980
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop

08014410 <MotionFX_initialize>:
 8014410:	4a3b      	ldr	r2, [pc, #236]	; (8014500 <MotionFX_initialize+0xf0>)
 8014412:	493c      	ldr	r1, [pc, #240]	; (8014504 <MotionFX_initialize+0xf4>)
 8014414:	6813      	ldr	r3, [r2, #0]
 8014416:	f023 0301 	bic.w	r3, r3, #1
 801441a:	b530      	push	{r4, r5, lr}
 801441c:	6013      	str	r3, [r2, #0]
 801441e:	680b      	ldr	r3, [r1, #0]
 8014420:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014424:	4013      	ands	r3, r2
 8014426:	f24c 2540 	movw	r5, #49728	; 0xc240
 801442a:	42ab      	cmp	r3, r5
 801442c:	b085      	sub	sp, #20
 801442e:	4604      	mov	r4, r0
 8014430:	d013      	beq.n	801445a <MotionFX_initialize+0x4a>
 8014432:	680b      	ldr	r3, [r1, #0]
 8014434:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014438:	4013      	ands	r3, r2
 801443a:	428b      	cmp	r3, r1
 801443c:	d00d      	beq.n	801445a <MotionFX_initialize+0x4a>
 801443e:	4b32      	ldr	r3, [pc, #200]	; (8014508 <MotionFX_initialize+0xf8>)
 8014440:	2201      	movs	r2, #1
 8014442:	601a      	str	r2, [r3, #0]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	2a00      	cmp	r2, #0
 8014448:	d1fc      	bne.n	8014444 <MotionFX_initialize+0x34>
 801444a:	4b30      	ldr	r3, [pc, #192]	; (801450c <MotionFX_initialize+0xfc>)
 801444c:	4a30      	ldr	r2, [pc, #192]	; (8014510 <MotionFX_initialize+0x100>)
 801444e:	601a      	str	r2, [r3, #0]
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	4b30      	ldr	r3, [pc, #192]	; (8014514 <MotionFX_initialize+0x104>)
 8014454:	429a      	cmp	r2, r3
 8014456:	d01f      	beq.n	8014498 <MotionFX_initialize+0x88>
 8014458:	e7fe      	b.n	8014458 <MotionFX_initialize+0x48>
 801445a:	4b2f      	ldr	r3, [pc, #188]	; (8014518 <MotionFX_initialize+0x108>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d1ed      	bne.n	801443e <MotionFX_initialize+0x2e>
 8014462:	4a2e      	ldr	r2, [pc, #184]	; (801451c <MotionFX_initialize+0x10c>)
 8014464:	6813      	ldr	r3, [r2, #0]
 8014466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801446a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801446e:	d006      	beq.n	801447e <MotionFX_initialize+0x6e>
 8014470:	6813      	ldr	r3, [r2, #0]
 8014472:	f240 4283 	movw	r2, #1155	; 0x483
 8014476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801447a:	4293      	cmp	r3, r2
 801447c:	d1df      	bne.n	801443e <MotionFX_initialize+0x2e>
 801447e:	4b28      	ldr	r3, [pc, #160]	; (8014520 <MotionFX_initialize+0x110>)
 8014480:	2201      	movs	r2, #1
 8014482:	601a      	str	r2, [r3, #0]
 8014484:	681a      	ldr	r2, [r3, #0]
 8014486:	2a00      	cmp	r2, #0
 8014488:	d1fc      	bne.n	8014484 <MotionFX_initialize+0x74>
 801448a:	4b26      	ldr	r3, [pc, #152]	; (8014524 <MotionFX_initialize+0x114>)
 801448c:	4a20      	ldr	r2, [pc, #128]	; (8014510 <MotionFX_initialize+0x100>)
 801448e:	601a      	str	r2, [r3, #0]
 8014490:	681a      	ldr	r2, [r3, #0]
 8014492:	4b20      	ldr	r3, [pc, #128]	; (8014514 <MotionFX_initialize+0x104>)
 8014494:	429a      	cmp	r2, r3
 8014496:	d1df      	bne.n	8014458 <MotionFX_initialize+0x48>
 8014498:	4b23      	ldr	r3, [pc, #140]	; (8014528 <MotionFX_initialize+0x118>)
 801449a:	4a24      	ldr	r2, [pc, #144]	; (801452c <MotionFX_initialize+0x11c>)
 801449c:	9301      	str	r3, [sp, #4]
 801449e:	2501      	movs	r5, #1
 80144a0:	4620      	mov	r0, r4
 80144a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80144a6:	7115      	strb	r5, [r2, #4]
 80144a8:	f7f7 faa0 	bl	800b9ec <MFX_emptyAttitude>
 80144ac:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80144b0:	a901      	add	r1, sp, #4
 80144b2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80144b6:	f7f6 fdc3 	bl	800b040 <updateOrientation>
 80144ba:	a903      	add	r1, sp, #12
 80144bc:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80144c0:	f7f6 fdbe 	bl	800b040 <updateOrientation>
 80144c4:	a902      	add	r1, sp, #8
 80144c6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80144ca:	f7f6 fdb9 	bl	800b040 <updateOrientation>
 80144ce:	4818      	ldr	r0, [pc, #96]	; (8014530 <MotionFX_initialize+0x120>)
 80144d0:	4918      	ldr	r1, [pc, #96]	; (8014534 <MotionFX_initialize+0x124>)
 80144d2:	4a19      	ldr	r2, [pc, #100]	; (8014538 <MotionFX_initialize+0x128>)
 80144d4:	4b19      	ldr	r3, [pc, #100]	; (801453c <MotionFX_initialize+0x12c>)
 80144d6:	7365      	strb	r5, [r4, #13]
 80144d8:	4d19      	ldr	r5, [pc, #100]	; (8014540 <MotionFX_initialize+0x130>)
 80144da:	62a0      	str	r0, [r4, #40]	; 0x28
 80144dc:	6361      	str	r1, [r4, #52]	; 0x34
 80144de:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80144e2:	2100      	movs	r1, #0
 80144e4:	61a2      	str	r2, [r4, #24]
 80144e6:	61e3      	str	r3, [r4, #28]
 80144e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80144ec:	f240 1301 	movw	r3, #257	; 0x101
 80144f0:	6225      	str	r5, [r4, #32]
 80144f2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80144f4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 80144f8:	80a2      	strh	r2, [r4, #4]
 80144fa:	81e3      	strh	r3, [r4, #14]
 80144fc:	b005      	add	sp, #20
 80144fe:	bd30      	pop	{r4, r5, pc}
 8014500:	e0002000 	.word	0xe0002000
 8014504:	e000ed00 	.word	0xe000ed00
 8014508:	40023008 	.word	0x40023008
 801450c:	40023000 	.word	0x40023000
 8014510:	f407a5c2 	.word	0xf407a5c2
 8014514:	b5e8b5cd 	.word	0xb5e8b5cd
 8014518:	e0042000 	.word	0xe0042000
 801451c:	5c001000 	.word	0x5c001000
 8014520:	58024c08 	.word	0x58024c08
 8014524:	58024c00 	.word	0x58024c00
 8014528:	00756e65 	.word	0x00756e65
 801452c:	20000178 	.word	0x20000178
 8014530:	3f666666 	.word	0x3f666666
 8014534:	3f2ac083 	.word	0x3f2ac083
 8014538:	3a51b717 	.word	0x3a51b717
 801453c:	3a378034 	.word	0x3a378034
 8014540:	3b378034 	.word	0x3b378034

08014544 <MotionFX_setKnobs>:
 8014544:	4b23      	ldr	r3, [pc, #140]	; (80145d4 <MotionFX_setKnobs+0x90>)
 8014546:	791b      	ldrb	r3, [r3, #4]
 8014548:	b903      	cbnz	r3, 801454c <MotionFX_setKnobs+0x8>
 801454a:	4770      	bx	lr
 801454c:	2900      	cmp	r1, #0
 801454e:	d0fc      	beq.n	801454a <MotionFX_setKnobs+0x6>
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	4604      	mov	r4, r0
 8014554:	684a      	ldr	r2, [r1, #4]
 8014556:	6808      	ldr	r0, [r1, #0]
 8014558:	688b      	ldr	r3, [r1, #8]
 801455a:	6363      	str	r3, [r4, #52]	; 0x34
 801455c:	62a0      	str	r0, [r4, #40]	; 0x28
 801455e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014560:	7b0b      	ldrb	r3, [r1, #12]
 8014562:	7163      	strb	r3, [r4, #5]
 8014564:	6908      	ldr	r0, [r1, #16]
 8014566:	694a      	ldr	r2, [r1, #20]
 8014568:	698b      	ldr	r3, [r1, #24]
 801456a:	6223      	str	r3, [r4, #32]
 801456c:	61e2      	str	r2, [r4, #28]
 801456e:	61a0      	str	r0, [r4, #24]
 8014570:	7f0b      	ldrb	r3, [r1, #28]
 8014572:	7123      	strb	r3, [r4, #4]
 8014574:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014578:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801457c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801457e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014582:	460a      	mov	r2, r1
 8014584:	460b      	mov	r3, r1
 8014586:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 801458a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 801458e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014592:	7889      	ldrb	r1, [r1, #2]
 8014594:	7892      	ldrb	r2, [r2, #2]
 8014596:	789b      	ldrb	r3, [r3, #2]
 8014598:	b084      	sub	sp, #16
 801459a:	f88d 1006 	strb.w	r1, [sp, #6]
 801459e:	f8ad 000c 	strh.w	r0, [sp, #12]
 80145a2:	a901      	add	r1, sp, #4
 80145a4:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80145a8:	f88d 200a 	strb.w	r2, [sp, #10]
 80145ac:	f8ad 6004 	strh.w	r6, [sp, #4]
 80145b0:	f8ad 5008 	strh.w	r5, [sp, #8]
 80145b4:	f88d 300e 	strb.w	r3, [sp, #14]
 80145b8:	f7f6 fd42 	bl	800b040 <updateOrientation>
 80145bc:	a903      	add	r1, sp, #12
 80145be:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80145c2:	f7f6 fd3d 	bl	800b040 <updateOrientation>
 80145c6:	a902      	add	r1, sp, #8
 80145c8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80145cc:	f7f6 fd38 	bl	800b040 <updateOrientation>
 80145d0:	b004      	add	sp, #16
 80145d2:	bd70      	pop	{r4, r5, r6, pc}
 80145d4:	20000178 	.word	0x20000178

080145d8 <MotionFX_getKnobs>:
 80145d8:	4b1c      	ldr	r3, [pc, #112]	; (801464c <MotionFX_getKnobs+0x74>)
 80145da:	791b      	ldrb	r3, [r3, #4]
 80145dc:	b903      	cbnz	r3, 80145e0 <MotionFX_getKnobs+0x8>
 80145de:	4770      	bx	lr
 80145e0:	460a      	mov	r2, r1
 80145e2:	2900      	cmp	r1, #0
 80145e4:	d0fb      	beq.n	80145de <MotionFX_getKnobs+0x6>
 80145e6:	b510      	push	{r4, lr}
 80145e8:	4604      	mov	r4, r0
 80145ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80145ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80145ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145f0:	6093      	str	r3, [r2, #8]
 80145f2:	6010      	str	r0, [r2, #0]
 80145f4:	6051      	str	r1, [r2, #4]
 80145f6:	7963      	ldrb	r3, [r4, #5]
 80145f8:	7313      	strb	r3, [r2, #12]
 80145fa:	69a0      	ldr	r0, [r4, #24]
 80145fc:	69e1      	ldr	r1, [r4, #28]
 80145fe:	6a23      	ldr	r3, [r4, #32]
 8014600:	6193      	str	r3, [r2, #24]
 8014602:	6110      	str	r0, [r2, #16]
 8014604:	6151      	str	r1, [r2, #20]
 8014606:	7923      	ldrb	r3, [r4, #4]
 8014608:	7713      	strb	r3, [r2, #28]
 801460a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801460e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014612:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014618:	f102 011d 	add.w	r1, r2, #29
 801461c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014620:	f7f6 fb68 	bl	800acf4 <findAxis>
 8014624:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014628:	f102 0121 	add.w	r1, r2, #33	; 0x21
 801462c:	f7f6 fb62 	bl	800acf4 <findAxis>
 8014630:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014634:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014638:	f7f6 fb5c 	bl	800acf4 <findAxis>
 801463c:	2300      	movs	r3, #0
 801463e:	f882 3020 	strb.w	r3, [r2, #32]
 8014642:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014646:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801464a:	bd10      	pop	{r4, pc}
 801464c:	20000178 	.word	0x20000178

08014650 <MotionFX_enable_6X>:
 8014650:	4b0e      	ldr	r3, [pc, #56]	; (801468c <MotionFX_enable_6X+0x3c>)
 8014652:	791b      	ldrb	r3, [r3, #4]
 8014654:	b903      	cbnz	r3, 8014658 <MotionFX_enable_6X+0x8>
 8014656:	4770      	bx	lr
 8014658:	2900      	cmp	r1, #0
 801465a:	d0fc      	beq.n	8014656 <MotionFX_enable_6X+0x6>
 801465c:	b530      	push	{r4, r5, lr}
 801465e:	1d05      	adds	r5, r0, #4
 8014660:	b099      	sub	sp, #100	; 0x64
 8014662:	4604      	mov	r4, r0
 8014664:	4629      	mov	r1, r5
 8014666:	225c      	movs	r2, #92	; 0x5c
 8014668:	a801      	add	r0, sp, #4
 801466a:	f002 fbdf 	bl	8016e2c <memcpy>
 801466e:	4620      	mov	r0, r4
 8014670:	f7f7 f9bc 	bl	800b9ec <MFX_emptyAttitude>
 8014674:	a901      	add	r1, sp, #4
 8014676:	4628      	mov	r0, r5
 8014678:	225c      	movs	r2, #92	; 0x5c
 801467a:	f002 fbd7 	bl	8016e2c <memcpy>
 801467e:	2300      	movs	r3, #0
 8014680:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014684:	7363      	strb	r3, [r4, #13]
 8014686:	b019      	add	sp, #100	; 0x64
 8014688:	bd30      	pop	{r4, r5, pc}
 801468a:	bf00      	nop
 801468c:	20000178 	.word	0x20000178

08014690 <MotionFX_enable_9X>:
 8014690:	4b0e      	ldr	r3, [pc, #56]	; (80146cc <MotionFX_enable_9X+0x3c>)
 8014692:	791b      	ldrb	r3, [r3, #4]
 8014694:	b903      	cbnz	r3, 8014698 <MotionFX_enable_9X+0x8>
 8014696:	4770      	bx	lr
 8014698:	2900      	cmp	r1, #0
 801469a:	d0fc      	beq.n	8014696 <MotionFX_enable_9X+0x6>
 801469c:	b530      	push	{r4, r5, lr}
 801469e:	1d05      	adds	r5, r0, #4
 80146a0:	b099      	sub	sp, #100	; 0x64
 80146a2:	4604      	mov	r4, r0
 80146a4:	4629      	mov	r1, r5
 80146a6:	225c      	movs	r2, #92	; 0x5c
 80146a8:	a801      	add	r0, sp, #4
 80146aa:	f002 fbbf 	bl	8016e2c <memcpy>
 80146ae:	4620      	mov	r0, r4
 80146b0:	f7f7 f99c 	bl	800b9ec <MFX_emptyAttitude>
 80146b4:	a901      	add	r1, sp, #4
 80146b6:	4628      	mov	r0, r5
 80146b8:	225c      	movs	r2, #92	; 0x5c
 80146ba:	f002 fbb7 	bl	8016e2c <memcpy>
 80146be:	2301      	movs	r3, #1
 80146c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80146c4:	7363      	strb	r3, [r4, #13]
 80146c6:	b019      	add	sp, #100	; 0x64
 80146c8:	bd30      	pop	{r4, r5, pc}
 80146ca:	bf00      	nop
 80146cc:	20000178 	.word	0x20000178

080146d0 <MotionFX_update>:
 80146d0:	b470      	push	{r4, r5, r6}
 80146d2:	4c06      	ldr	r4, [pc, #24]	; (80146ec <MotionFX_update+0x1c>)
 80146d4:	9e03      	ldr	r6, [sp, #12]
 80146d6:	7925      	ldrb	r5, [r4, #4]
 80146d8:	b90d      	cbnz	r5, 80146de <MotionFX_update+0xe>
 80146da:	bc70      	pop	{r4, r5, r6}
 80146dc:	4770      	bx	lr
 80146de:	461c      	mov	r4, r3
 80146e0:	ed94 0a00 	vldr	s0, [r4]
 80146e4:	4633      	mov	r3, r6
 80146e6:	bc70      	pop	{r4, r5, r6}
 80146e8:	f7fc bf02 	b.w	80114f0 <iNemoEngine_API_Update>
 80146ec:	20000178 	.word	0x20000178

080146f0 <MotionFX_propagate>:
 80146f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146f4:	ed2d 8b06 	vpush	{d8-d10}
 80146f8:	4ca3      	ldr	r4, [pc, #652]	; (8014988 <MotionFX_propagate+0x298>)
 80146fa:	7927      	ldrb	r7, [r4, #4]
 80146fc:	b0a0      	sub	sp, #128	; 0x80
 80146fe:	b927      	cbnz	r7, 801470a <MotionFX_propagate+0x1a>
 8014700:	b020      	add	sp, #128	; 0x80
 8014702:	ecbd 8b06 	vpop	{d8-d10}
 8014706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801470a:	4616      	mov	r6, r2
 801470c:	4604      	mov	r4, r0
 801470e:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014712:	edd3 9a00 	vldr	s19, [r3]
 8014716:	460d      	mov	r5, r1
 8014718:	6851      	ldr	r1, [r2, #4]
 801471a:	6892      	ldr	r2, [r2, #8]
 801471c:	ab13      	add	r3, sp, #76	; 0x4c
 801471e:	c307      	stmia	r3!, {r0, r1, r2}
 8014720:	6830      	ldr	r0, [r6, #0]
 8014722:	6871      	ldr	r1, [r6, #4]
 8014724:	68b2      	ldr	r2, [r6, #8]
 8014726:	ab10      	add	r3, sp, #64	; 0x40
 8014728:	c307      	stmia	r3!, {r0, r1, r2}
 801472a:	4637      	mov	r7, r6
 801472c:	ab16      	add	r3, sp, #88	; 0x58
 801472e:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014732:	6879      	ldr	r1, [r7, #4]
 8014734:	68ba      	ldr	r2, [r7, #8]
 8014736:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 801473a:	c307      	stmia	r3!, {r0, r1, r2}
 801473c:	aa13      	add	r2, sp, #76	; 0x4c
 801473e:	4651      	mov	r1, sl
 8014740:	a803      	add	r0, sp, #12
 8014742:	f7f6 fa75 	bl	800ac30 <rotVect>
 8014746:	aa16      	add	r2, sp, #88	; 0x58
 8014748:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801474c:	a806      	add	r0, sp, #24
 801474e:	f7f6 fa6f 	bl	800ac30 <rotVect>
 8014752:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014756:	2b09      	cmp	r3, #9
 8014758:	d829      	bhi.n	80147ae <MotionFX_propagate+0xbe>
 801475a:	eddd 8a04 	vldr	s17, [sp, #16]
 801475e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014762:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014766:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801476a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801476e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014772:	ee17 0a90 	vmov	r0, s15
 8014776:	f7eb fe8b 	bl	8000490 <__aeabi_f2d>
 801477a:	ec41 0b10 	vmov	d0, r0, r1
 801477e:	f000 fded 	bl	801535c <sqrt>
 8014782:	ec51 0b10 	vmov	r0, r1, d0
 8014786:	f7ec f98b 	bl	8000aa0 <__aeabi_d2f>
 801478a:	ee07 0a90 	vmov	s15, r0
 801478e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014792:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014796:	ee29 9a27 	vmul.f32	s18, s18, s15
 801479a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801479e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80147a2:	ed8d 9a03 	vstr	s18, [sp, #12]
 80147a6:	edcd 8a04 	vstr	s17, [sp, #16]
 80147aa:	ed8d 8a05 	vstr	s16, [sp, #20]
 80147ae:	7923      	ldrb	r3, [r4, #4]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	f000 80d3 	beq.w	801495c <MotionFX_propagate+0x26c>
 80147b6:	ee07 3a90 	vmov	s15, r3
 80147ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80147c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80147c6:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 80147ca:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80147ce:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80147d2:	edd2 7a00 	vldr	s15, [r2]
 80147d6:	eddd 8a06 	vldr	s17, [sp, #24]
 80147da:	ed9d 6a07 	vldr	s12, [sp, #28]
 80147de:	ed9d 8a08 	vldr	s16, [sp, #32]
 80147e2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801498c <MotionFX_propagate+0x29c>
 80147e6:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8014990 <MotionFX_propagate+0x2a0>
 80147ea:	eee6 7aa8 	vfma.f32	s15, s13, s17
 80147ee:	ee26 9a07 	vmul.f32	s18, s12, s14
 80147f2:	edc2 7a00 	vstr	s15, [r2]
 80147f6:	edd3 7a00 	vldr	s15, [r3]
 80147fa:	ed8d 9a07 	vstr	s18, [sp, #28]
 80147fe:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014802:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8014806:	ee68 8a87 	vmul.f32	s17, s17, s14
 801480a:	edc3 7a00 	vstr	s15, [r3]
 801480e:	edd2 7a00 	vldr	s15, [r2]
 8014812:	edcd 8a06 	vstr	s17, [sp, #24]
 8014816:	eee6 7a88 	vfma.f32	s15, s13, s16
 801481a:	f604 1344 	addw	r3, r4, #2372	; 0x944
 801481e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014822:	edc2 7a00 	vstr	s15, [r2]
 8014826:	edd3 7a00 	vldr	s15, [r3]
 801482a:	ed8d 8a08 	vstr	s16, [sp, #32]
 801482e:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8014832:	ed93 7a00 	vldr	s14, [r3]
 8014836:	ee39 9a67 	vsub.f32	s18, s18, s15
 801483a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801483e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014842:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8014846:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801484a:	ed93 7a00 	vldr	s14, [r3]
 801484e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014852:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014856:	eee8 7a08 	vfma.f32	s15, s16, s16
 801485a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801485e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014866:	dd7e      	ble.n	8014966 <MotionFX_propagate+0x276>
 8014868:	eeb1 aae7 	vsqrt.f32	s20, s15
 801486c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014870:	eeb0 0a69 	vmov.f32	s0, s19
 8014874:	f000 fd06 	bl	8015284 <sinf>
 8014878:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 801487c:	eeb0 0a69 	vmov.f32	s0, s19
 8014880:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014884:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014888:	ee28 8a27 	vmul.f32	s16, s16, s15
 801488c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014890:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014894:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014898:	f000 fc8e 	bl	80151b8 <cosf>
 801489c:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80148a0:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80148a4:	a809      	add	r0, sp, #36	; 0x24
 80148a6:	4632      	mov	r2, r6
 80148a8:	4631      	mov	r1, r6
 80148aa:	f7f6 fc55 	bl	800b158 <qmult>
 80148ae:	edd8 7a00 	vldr	s15, [r8]
 80148b2:	ed96 7a00 	vldr	s14, [r6]
 80148b6:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 80148ba:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80148be:	edd9 6a00 	vldr	s13, [r9]
 80148c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80148c6:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 80148ca:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80148ce:	3301      	adds	r3, #1
 80148d0:	aa13      	add	r2, sp, #76	; 0x4c
 80148d2:	edd7 6a00 	vldr	s13, [r7]
 80148d6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80148da:	4651      	mov	r1, sl
 80148dc:	a809      	add	r0, sp, #36	; 0x24
 80148de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80148e2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80148e6:	eef1 6ae7 	vsqrt.f32	s13, s15
 80148ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80148ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80148f2:	ed86 7a00 	vstr	s14, [r6]
 80148f6:	ed99 7a00 	vldr	s14, [r9]
 80148fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80148fe:	ed89 7a00 	vstr	s14, [r9]
 8014902:	ed98 7a00 	vldr	s14, [r8]
 8014906:	ee27 7a27 	vmul.f32	s14, s14, s15
 801490a:	ed88 7a00 	vstr	s14, [r8]
 801490e:	ed97 7a00 	vldr	s14, [r7]
 8014912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014916:	edc7 7a00 	vstr	s15, [r7]
 801491a:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 801491e:	f7f6 f987 	bl	800ac30 <rotVect>
 8014922:	f8d9 0000 	ldr.w	r0, [r9]
 8014926:	f8d8 1000 	ldr.w	r1, [r8]
 801492a:	683a      	ldr	r2, [r7, #0]
 801492c:	6833      	ldr	r3, [r6, #0]
 801492e:	60eb      	str	r3, [r5, #12]
 8014930:	6128      	str	r0, [r5, #16]
 8014932:	6169      	str	r1, [r5, #20]
 8014934:	61aa      	str	r2, [r5, #24]
 8014936:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801493a:	9301      	str	r3, [sp, #4]
 801493c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014940:	9300      	str	r3, [sp, #0]
 8014942:	a909      	add	r1, sp, #36	; 0x24
 8014944:	f105 031c 	add.w	r3, r5, #28
 8014948:	462a      	mov	r2, r5
 801494a:	f105 000c 	add.w	r0, r5, #12
 801494e:	f7f7 fc2b 	bl	800c1a8 <output_update>
 8014952:	b020      	add	sp, #128	; 0x80
 8014954:	ecbd 8b06 	vpop	{d8-d10}
 8014958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801495c:	2301      	movs	r3, #1
 801495e:	7123      	strb	r3, [r4, #4]
 8014960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014964:	e72f      	b.n	80147c6 <MotionFX_propagate+0xd6>
 8014966:	ee68 8a80 	vmul.f32	s17, s17, s0
 801496a:	ee29 9a00 	vmul.f32	s18, s18, s0
 801496e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014972:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014976:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801497a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801497e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014982:	930c      	str	r3, [sp, #48]	; 0x30
 8014984:	e78c      	b.n	80148a0 <MotionFX_propagate+0x1b0>
 8014986:	bf00      	nop
 8014988:	20000178 	.word	0x20000178
 801498c:	3c8efa35 	.word	0x3c8efa35
 8014990:	38d1b718 	.word	0x38d1b718

08014994 <MotionFX_MagCal_init>:
 8014994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014996:	4c44      	ldr	r4, [pc, #272]	; (8014aa8 <MotionFX_MagCal_init+0x114>)
 8014998:	7923      	ldrb	r3, [r4, #4]
 801499a:	b903      	cbnz	r3, 801499e <MotionFX_MagCal_init+0xa>
 801499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801499e:	1e43      	subs	r3, r0, #1
 80149a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80149a4:	4605      	mov	r5, r0
 80149a6:	d2f9      	bcs.n	801499c <MotionFX_MagCal_init+0x8>
 80149a8:	2900      	cmp	r1, #0
 80149aa:	d139      	bne.n	8014a20 <MotionFX_MagCal_init+0x8c>
 80149ac:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80149b0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80149b4:	4a3d      	ldr	r2, [pc, #244]	; (8014aac <MotionFX_MagCal_init+0x118>)
 80149b6:	1b5b      	subs	r3, r3, r5
 80149b8:	ee07 3a90 	vmov	s15, r3
 80149bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149c0:	23c8      	movs	r3, #200	; 0xc8
 80149c2:	eef0 7ae7 	vabs.f32	s15, s15
 80149c6:	fb93 f3f5 	sdiv	r3, r3, r5
 80149ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80149ce:	b2db      	uxtb	r3, r3
 80149d0:	2b0f      	cmp	r3, #15
 80149d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80149d6:	bf28      	it	cs
 80149d8:	230f      	movcs	r3, #15
 80149da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149de:	6015      	str	r5, [r2, #0]
 80149e0:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 80149e4:	b22d      	sxth	r5, r5
 80149e6:	dc0e      	bgt.n	8014a06 <MotionFX_MagCal_init+0x72>
 80149e8:	edd4 7a03 	vldr	s15, [r4, #12]
 80149ec:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014ab0 <MotionFX_MagCal_init+0x11c>
 80149f0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8014ab4 <MotionFX_MagCal_init+0x120>
 80149f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80149f8:	eef0 7ae7 	vabs.f32	s15, s15
 80149fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a04:	dd08      	ble.n	8014a18 <MotionFX_MagCal_init+0x84>
 8014a06:	2300      	movs	r3, #0
 8014a08:	492b      	ldr	r1, [pc, #172]	; (8014ab8 <MotionFX_MagCal_init+0x124>)
 8014a0a:	8165      	strh	r5, [r4, #10]
 8014a0c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8014a10:	60e1      	str	r1, [r4, #12]
 8014a12:	8223      	strh	r3, [r4, #16]
 8014a14:	6163      	str	r3, [r4, #20]
 8014a16:	8122      	strh	r2, [r4, #8]
 8014a18:	2300      	movs	r3, #0
 8014a1a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8014a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a20:	2600      	movs	r6, #0
 8014a22:	4826      	ldr	r0, [pc, #152]	; (8014abc <MotionFX_MagCal_init+0x128>)
 8014a24:	61a0      	str	r0, [r4, #24]
 8014a26:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8014a2a:	4631      	mov	r1, r6
 8014a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a30:	6122      	str	r2, [r4, #16]
 8014a32:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8014a36:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014a3a:	6166      	str	r6, [r4, #20]
 8014a3c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8014a40:	6566      	str	r6, [r4, #84]	; 0x54
 8014a42:	83a6      	strh	r6, [r4, #28]
 8014a44:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8014a48:	f002 f9fe 	bl	8016e48 <memset>
 8014a4c:	23ff      	movs	r3, #255	; 0xff
 8014a4e:	225f      	movs	r2, #95	; 0x5f
 8014a50:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8014a54:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8014a58:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014a64:	f44f 7780 	mov.w	r7, #256	; 0x100
 8014a68:	4631      	mov	r1, r6
 8014a6a:	62a6      	str	r6, [r4, #40]	; 0x28
 8014a6c:	2230      	movs	r2, #48	; 0x30
 8014a6e:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8014a72:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8014a76:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8014a7a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8014a7c:	f002 f9e4 	bl	8016e48 <memset>
 8014a80:	f1a5 030a 	sub.w	r3, r5, #10
 8014a84:	b29b      	uxth	r3, r3
 8014a86:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014a8a:	2b32      	cmp	r3, #50	; 0x32
 8014a8c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8014a90:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8014a94:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8014a98:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8014a9c:	d888      	bhi.n	80149b0 <MotionFX_MagCal_init+0x1c>
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8014aa4:	e784      	b.n	80149b0 <MotionFX_MagCal_init+0x1c>
 8014aa6:	bf00      	nop
 8014aa8:	20000178 	.word	0x20000178
 8014aac:	20000000 	.word	0x20000000
 8014ab0:	3dcccccd 	.word	0x3dcccccd
 8014ab4:	3c23d70a 	.word	0x3c23d70a
 8014ab8:	3dcccccd 	.word	0x3dcccccd
 8014abc:	2000161c 	.word	0x2000161c

08014ac0 <MotionFX_MagCal_run>:
 8014ac0:	4a3e      	ldr	r2, [pc, #248]	; (8014bbc <MotionFX_MagCal_run+0xfc>)
 8014ac2:	7913      	ldrb	r3, [r2, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d077      	beq.n	8014bb8 <MotionFX_MagCal_run+0xf8>
 8014ac8:	ed90 7a00 	vldr	s14, [r0]
 8014acc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8014bc0 <MotionFX_MagCal_run+0x100>
 8014ad0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad8:	bfb4      	ite	lt
 8014ada:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014ade:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014ae2:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ae8:	ed90 7a01 	vldr	s14, [r0, #4]
 8014aec:	eddf 6a34 	vldr	s13, [pc, #208]	; 8014bc0 <MotionFX_MagCal_run+0x100>
 8014af0:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8014af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014af8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b00:	ee17 1a90 	vmov	r1, s15
 8014b04:	bfb4      	ite	lt
 8014b06:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014b0a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014b0e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014b12:	ed90 7a02 	vldr	s14, [r0, #8]
 8014b16:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014bc0 <MotionFX_MagCal_run+0x100>
 8014b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b1e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	ee17 4a90 	vmov	r4, s15
 8014b2a:	bfac      	ite	ge
 8014b2c:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014b30:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014b34:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014b3c:	ee17 7a90 	vmov	r7, s15
 8014b40:	b383      	cbz	r3, 8014ba4 <MotionFX_MagCal_run+0xe4>
 8014b42:	4820      	ldr	r0, [pc, #128]	; (8014bc4 <MotionFX_MagCal_run+0x104>)
 8014b44:	6805      	ldr	r5, [r0, #0]
 8014b46:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8014b4a:	fb15 f503 	smulbb	r5, r5, r3
 8014b4e:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 8014b52:	00dd      	lsls	r5, r3, #3
 8014b54:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8014b58:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8014bc8 <MotionFX_MagCal_run+0x108>
 8014b5c:	42b1      	cmp	r1, r6
 8014b5e:	bfa8      	it	ge
 8014b60:	4631      	movge	r1, r6
 8014b62:	42b7      	cmp	r7, r6
 8014b64:	bfa8      	it	ge
 8014b66:	4637      	movge	r7, r6
 8014b68:	4561      	cmp	r1, ip
 8014b6a:	4608      	mov	r0, r1
 8014b6c:	bfb8      	it	lt
 8014b6e:	4660      	movlt	r0, ip
 8014b70:	4564      	cmp	r4, ip
 8014b72:	db1f      	blt.n	8014bb4 <MotionFX_MagCal_run+0xf4>
 8014b74:	42b4      	cmp	r4, r6
 8014b76:	bfa8      	it	ge
 8014b78:	4634      	movge	r4, r6
 8014b7a:	b224      	sxth	r4, r4
 8014b7c:	4e12      	ldr	r6, [pc, #72]	; (8014bc8 <MotionFX_MagCal_run+0x108>)
 8014b7e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8014b82:	3301      	adds	r3, #1
 8014b84:	4415      	add	r5, r2
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	42b7      	cmp	r7, r6
 8014b8a:	bfb8      	it	lt
 8014b8c:	4637      	movlt	r7, r6
 8014b8e:	428b      	cmp	r3, r1
 8014b90:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8014b94:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8014b98:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 8014b9c:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8014ba0:	d014      	beq.n	8014bcc <MotionFX_MagCal_run+0x10c>
 8014ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ba4:	68c0      	ldr	r0, [r0, #12]
 8014ba6:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 8014baa:	2001      	movs	r0, #1
 8014bac:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8014bb0:	461d      	mov	r5, r3
 8014bb2:	e7cf      	b.n	8014b54 <MotionFX_MagCal_run+0x94>
 8014bb4:	4634      	mov	r4, r6
 8014bb6:	e7e1      	b.n	8014b7c <MotionFX_MagCal_run+0xbc>
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop
 8014bbc:	20000178 	.word	0x20000178
 8014bc0:	43fa0000 	.word	0x43fa0000
 8014bc4:	20000000 	.word	0x20000000
 8014bc8:	ffff8002 	.word	0xffff8002
 8014bcc:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8014bd0:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8014bd4:	2000      	movs	r0, #0
 8014bd6:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	f000 8159 	beq.w	8014e92 <MotionFX_MagCal_run+0x3d2>
 8014be0:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 8014be4:	8a57      	ldrh	r7, [r2, #18]
 8014be6:	8a13      	ldrh	r3, [r2, #16]
 8014be8:	2900      	cmp	r1, #0
 8014bea:	f000 8150 	beq.w	8014e8e <MotionFX_MagCal_run+0x3ce>
 8014bee:	2f00      	cmp	r7, #0
 8014bf0:	f000 814d 	beq.w	8014e8e <MotionFX_MagCal_run+0x3ce>
 8014bf4:	42bb      	cmp	r3, r7
 8014bf6:	bf28      	it	cs
 8014bf8:	463b      	movcs	r3, r7
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	b29b      	uxth	r3, r3
 8014bfe:	42bb      	cmp	r3, r7
 8014c00:	bf28      	it	cs
 8014c02:	463b      	movcs	r3, r7
 8014c04:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8014c08:	191d      	adds	r5, r3, r4
 8014c0a:	f04f 0c01 	mov.w	ip, #1
 8014c0e:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8014c12:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8014c16:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8014c1a:	f8c5 e002 	str.w	lr, [r5, #2]
 8014c1e:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 8014c22:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014c26:	4561      	cmp	r1, ip
 8014c28:	f000 812a 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014c2c:	4463      	add	r3, ip
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	42bb      	cmp	r3, r7
 8014c32:	bf28      	it	cs
 8014c34:	463b      	movcs	r3, r7
 8014c36:	eb03 0e04 	add.w	lr, r3, r4
 8014c3a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014c3e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014c42:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8014c46:	f8c5 e002 	str.w	lr, [r5, #2]
 8014c4a:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8014c4e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014c52:	2902      	cmp	r1, #2
 8014c54:	f000 8114 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014c58:	4463      	add	r3, ip
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	42bb      	cmp	r3, r7
 8014c5e:	bf28      	it	cs
 8014c60:	463b      	movcs	r3, r7
 8014c62:	eb03 0e04 	add.w	lr, r3, r4
 8014c66:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014c6a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014c6e:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8014c72:	f8c5 e002 	str.w	lr, [r5, #2]
 8014c76:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8014c7a:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014c7e:	2903      	cmp	r1, #3
 8014c80:	f000 80fe 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014c84:	4463      	add	r3, ip
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	42bb      	cmp	r3, r7
 8014c8a:	bf28      	it	cs
 8014c8c:	463b      	movcs	r3, r7
 8014c8e:	eb03 0e04 	add.w	lr, r3, r4
 8014c92:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014c96:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014c9a:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8014c9e:	f8c5 e002 	str.w	lr, [r5, #2]
 8014ca2:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8014ca6:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014caa:	2904      	cmp	r1, #4
 8014cac:	f000 80e8 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014cb0:	4463      	add	r3, ip
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	42bb      	cmp	r3, r7
 8014cb6:	bf28      	it	cs
 8014cb8:	463b      	movcs	r3, r7
 8014cba:	eb03 0e04 	add.w	lr, r3, r4
 8014cbe:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014cc2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014cc6:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8014cca:	f8c5 e002 	str.w	lr, [r5, #2]
 8014cce:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 8014cd2:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014cd6:	2905      	cmp	r1, #5
 8014cd8:	f000 80d2 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014cdc:	4463      	add	r3, ip
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	42bb      	cmp	r3, r7
 8014ce2:	bf28      	it	cs
 8014ce4:	463b      	movcs	r3, r7
 8014ce6:	441c      	add	r4, r3
 8014ce8:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8014cec:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8014cf0:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 8014cf4:	f8c5 4002 	str.w	r4, [r5, #2]
 8014cf8:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8014cfc:	80ec      	strh	r4, [r5, #6]
 8014cfe:	2906      	cmp	r1, #6
 8014d00:	f000 80be 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014d04:	4463      	add	r3, ip
 8014d06:	b29b      	uxth	r3, r3
 8014d08:	42bb      	cmp	r3, r7
 8014d0a:	bf28      	it	cs
 8014d0c:	463b      	movcs	r3, r7
 8014d0e:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8014d12:	eb03 0c04 	add.w	ip, r3, r4
 8014d16:	2501      	movs	r5, #1
 8014d18:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8014d1c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8014d20:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 8014d24:	f8cc e002 	str.w	lr, [ip, #2]
 8014d28:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8014d2c:	f8ac e006 	strh.w	lr, [ip, #6]
 8014d30:	2907      	cmp	r1, #7
 8014d32:	f000 80a5 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014d36:	442b      	add	r3, r5
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	42bb      	cmp	r3, r7
 8014d3c:	bf28      	it	cs
 8014d3e:	463b      	movcs	r3, r7
 8014d40:	eb03 0e04 	add.w	lr, r3, r4
 8014d44:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014d48:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014d4c:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8014d50:	f8cc e002 	str.w	lr, [ip, #2]
 8014d54:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8014d58:	f8ac e006 	strh.w	lr, [ip, #6]
 8014d5c:	2908      	cmp	r1, #8
 8014d5e:	f000 808f 	beq.w	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014d62:	442b      	add	r3, r5
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	42bb      	cmp	r3, r7
 8014d68:	bf28      	it	cs
 8014d6a:	463b      	movcs	r3, r7
 8014d6c:	eb03 0e04 	add.w	lr, r3, r4
 8014d70:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014d74:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014d78:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8014d7c:	f8cc e002 	str.w	lr, [ip, #2]
 8014d80:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8014d84:	f8ac e006 	strh.w	lr, [ip, #6]
 8014d88:	2909      	cmp	r1, #9
 8014d8a:	d079      	beq.n	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014d8c:	442b      	add	r3, r5
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	42bb      	cmp	r3, r7
 8014d92:	bf28      	it	cs
 8014d94:	463b      	movcs	r3, r7
 8014d96:	eb03 0e04 	add.w	lr, r3, r4
 8014d9a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014d9e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014da2:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8014da6:	f8cc e002 	str.w	lr, [ip, #2]
 8014daa:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8014dae:	f8ac e006 	strh.w	lr, [ip, #6]
 8014db2:	290a      	cmp	r1, #10
 8014db4:	d064      	beq.n	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014db6:	442b      	add	r3, r5
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	42bb      	cmp	r3, r7
 8014dbc:	bf28      	it	cs
 8014dbe:	463b      	movcs	r3, r7
 8014dc0:	eb03 0e04 	add.w	lr, r3, r4
 8014dc4:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014dc8:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014dcc:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8014dd0:	f8cc e002 	str.w	lr, [ip, #2]
 8014dd4:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8014dd8:	f8ac e006 	strh.w	lr, [ip, #6]
 8014ddc:	290b      	cmp	r1, #11
 8014dde:	d04f      	beq.n	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014de0:	442b      	add	r3, r5
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	42bb      	cmp	r3, r7
 8014de6:	bf28      	it	cs
 8014de8:	463b      	movcs	r3, r7
 8014dea:	eb03 0e04 	add.w	lr, r3, r4
 8014dee:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014df2:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014df6:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8014dfa:	f8cc e002 	str.w	lr, [ip, #2]
 8014dfe:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8014e02:	f8ac e006 	strh.w	lr, [ip, #6]
 8014e06:	290c      	cmp	r1, #12
 8014e08:	d03a      	beq.n	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014e0a:	442b      	add	r3, r5
 8014e0c:	b29b      	uxth	r3, r3
 8014e0e:	42bb      	cmp	r3, r7
 8014e10:	bf28      	it	cs
 8014e12:	463b      	movcs	r3, r7
 8014e14:	eb03 0e04 	add.w	lr, r3, r4
 8014e18:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014e1c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014e20:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 8014e24:	f8cc e002 	str.w	lr, [ip, #2]
 8014e28:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8014e2c:	f8ac e006 	strh.w	lr, [ip, #6]
 8014e30:	290d      	cmp	r1, #13
 8014e32:	d025      	beq.n	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014e34:	442b      	add	r3, r5
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	42bb      	cmp	r3, r7
 8014e3a:	bf28      	it	cs
 8014e3c:	463b      	movcs	r3, r7
 8014e3e:	eb03 0e04 	add.w	lr, r3, r4
 8014e42:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014e46:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014e4a:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8014e4e:	f8cc e002 	str.w	lr, [ip, #2]
 8014e52:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8014e56:	f8ac e006 	strh.w	lr, [ip, #6]
 8014e5a:	290e      	cmp	r1, #14
 8014e5c:	d010      	beq.n	8014e80 <MotionFX_MagCal_run+0x3c0>
 8014e5e:	442b      	add	r3, r5
 8014e60:	b29b      	uxth	r3, r3
 8014e62:	42bb      	cmp	r3, r7
 8014e64:	bf28      	it	cs
 8014e66:	463b      	movcs	r3, r7
 8014e68:	441c      	add	r4, r3
 8014e6a:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8014e6e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8014e72:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8014e76:	f8c7 0002 	str.w	r0, [r7, #2]
 8014e7a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 8014e7e:	80f8      	strh	r0, [r7, #6]
 8014e80:	3901      	subs	r1, #1
 8014e82:	b2c9      	uxtb	r1, r1
 8014e84:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8014e88:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 8014e8c:	4434      	add	r4, r6
 8014e8e:	8213      	strh	r3, [r2, #16]
 8014e90:	6154      	str	r4, [r2, #20]
 8014e92:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f43f ae83 	beq.w	8014ba2 <MotionFX_MagCal_run+0xe2>
 8014e9c:	8a11      	ldrh	r1, [r2, #16]
 8014e9e:	8a53      	ldrh	r3, [r2, #18]
 8014ea0:	428b      	cmp	r3, r1
 8014ea2:	d022      	beq.n	8014eea <MotionFX_MagCal_run+0x42a>
 8014ea4:	b341      	cbz	r1, 8014ef8 <MotionFX_MagCal_run+0x438>
 8014ea6:	6953      	ldr	r3, [r2, #20]
 8014ea8:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8014eac:	3301      	adds	r3, #1
 8014eae:	4403      	add	r3, r0
 8014eb0:	1c58      	adds	r0, r3, #1
 8014eb2:	d021      	beq.n	8014ef8 <MotionFX_MagCal_run+0x438>
 8014eb4:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8014eb8:	3410      	adds	r4, #16
 8014eba:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8014ebc:	42a0      	cmp	r0, r4
 8014ebe:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8014ec2:	bf84      	itt	hi
 8014ec4:	6553      	strhi	r3, [r2, #84]	; 0x54
 8014ec6:	4618      	movhi	r0, r3
 8014ec8:	4420      	add	r0, r4
 8014eca:	4283      	cmp	r3, r0
 8014ecc:	f4ff ae69 	bcc.w	8014ba2 <MotionFX_MagCal_run+0xe2>
 8014ed0:	b131      	cbz	r1, 8014ee0 <MotionFX_MagCal_run+0x420>
 8014ed2:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8014ed6:	6952      	ldr	r2, [r2, #20]
 8014ed8:	3901      	subs	r1, #1
 8014eda:	fb00 2111 	mls	r1, r0, r1, r2
 8014ede:	b289      	uxth	r1, r1
 8014ee0:	1a5b      	subs	r3, r3, r1
 8014ee2:	b21b      	sxth	r3, r3
 8014ee4:	42a3      	cmp	r3, r4
 8014ee6:	f6ff ae5c 	blt.w	8014ba2 <MotionFX_MagCal_run+0xe2>
 8014eea:	4905      	ldr	r1, [pc, #20]	; (8014f00 <MotionFX_MagCal_run+0x440>)
 8014eec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014ef0:	f101 0014 	add.w	r0, r1, #20
 8014ef4:	f7fd babc 	b.w	8012470 <MEMS_runMagCal>
 8014ef8:	f242 7410 	movw	r4, #10000	; 0x2710
 8014efc:	2300      	movs	r3, #0
 8014efe:	e7dc      	b.n	8014eba <MotionFX_MagCal_run+0x3fa>
 8014f00:	20000180 	.word	0x20000180

08014f04 <MotionFX_MagCal_getParams>:
 8014f04:	b4f0      	push	{r4, r5, r6, r7}
 8014f06:	4f1b      	ldr	r7, [pc, #108]	; (8014f74 <MotionFX_MagCal_getParams+0x70>)
 8014f08:	793b      	ldrb	r3, [r7, #4]
 8014f0a:	b08e      	sub	sp, #56	; 0x38
 8014f0c:	b373      	cbz	r3, 8014f6c <MotionFX_MagCal_getParams+0x68>
 8014f0e:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8014f12:	4606      	mov	r6, r0
 8014f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f16:	ac01      	add	r4, sp, #4
 8014f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f20:	ed9d 7a03 	vldr	s14, [sp, #12]
 8014f24:	eddd 6a02 	vldr	s13, [sp, #8]
 8014f28:	eddd 7a04 	vldr	s15, [sp, #16]
 8014f2c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8014f78 <MotionFX_MagCal_getParams+0x74>
 8014f30:	682d      	ldr	r5, [r5, #0]
 8014f32:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 8014f36:	7337      	strb	r7, [r6, #12]
 8014f38:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014f3c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f52:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014f56:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014f5a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014f5e:	6025      	str	r5, [r4, #0]
 8014f60:	edc6 6a00 	vstr	s13, [r6]
 8014f64:	ed86 7a01 	vstr	s14, [r6, #4]
 8014f68:	edc6 7a02 	vstr	s15, [r6, #8]
 8014f6c:	b00e      	add	sp, #56	; 0x38
 8014f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8014f70:	4770      	bx	lr
 8014f72:	bf00      	nop
 8014f74:	20000178 	.word	0x20000178
 8014f78:	3b03126f 	.word	0x3b03126f

08014f7c <_Znwj>:
 8014f7c:	2801      	cmp	r0, #1
 8014f7e:	bf38      	it	cc
 8014f80:	2001      	movcc	r0, #1
 8014f82:	b510      	push	{r4, lr}
 8014f84:	4604      	mov	r4, r0
 8014f86:	4620      	mov	r0, r4
 8014f88:	f001 ff48 	bl	8016e1c <malloc>
 8014f8c:	b930      	cbnz	r0, 8014f9c <_Znwj+0x20>
 8014f8e:	f000 f807 	bl	8014fa0 <_ZSt15get_new_handlerv>
 8014f92:	b908      	cbnz	r0, 8014f98 <_Znwj+0x1c>
 8014f94:	f001 ff10 	bl	8016db8 <abort>
 8014f98:	4780      	blx	r0
 8014f9a:	e7f4      	b.n	8014f86 <_Znwj+0xa>
 8014f9c:	bd10      	pop	{r4, pc}
	...

08014fa0 <_ZSt15get_new_handlerv>:
 8014fa0:	4b02      	ldr	r3, [pc, #8]	; (8014fac <_ZSt15get_new_handlerv+0xc>)
 8014fa2:	6818      	ldr	r0, [r3, #0]
 8014fa4:	f3bf 8f5b 	dmb	ish
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	20001248 	.word	0x20001248

08014fb0 <ceil>:
 8014fb0:	ec51 0b10 	vmov	r0, r1, d0
 8014fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014fbc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014fc0:	2e13      	cmp	r6, #19
 8014fc2:	ee10 5a10 	vmov	r5, s0
 8014fc6:	ee10 8a10 	vmov	r8, s0
 8014fca:	460c      	mov	r4, r1
 8014fcc:	dc30      	bgt.n	8015030 <ceil+0x80>
 8014fce:	2e00      	cmp	r6, #0
 8014fd0:	da12      	bge.n	8014ff8 <ceil+0x48>
 8014fd2:	a335      	add	r3, pc, #212	; (adr r3, 80150a8 <ceil+0xf8>)
 8014fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd8:	f7eb f8fc 	bl	80001d4 <__adddf3>
 8014fdc:	2200      	movs	r2, #0
 8014fde:	2300      	movs	r3, #0
 8014fe0:	f7eb fd3e 	bl	8000a60 <__aeabi_dcmpgt>
 8014fe4:	b128      	cbz	r0, 8014ff2 <ceil+0x42>
 8014fe6:	2c00      	cmp	r4, #0
 8014fe8:	db55      	blt.n	8015096 <ceil+0xe6>
 8014fea:	432c      	orrs	r4, r5
 8014fec:	d057      	beq.n	801509e <ceil+0xee>
 8014fee:	4c30      	ldr	r4, [pc, #192]	; (80150b0 <ceil+0x100>)
 8014ff0:	2500      	movs	r5, #0
 8014ff2:	4621      	mov	r1, r4
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	e025      	b.n	8015044 <ceil+0x94>
 8014ff8:	4f2e      	ldr	r7, [pc, #184]	; (80150b4 <ceil+0x104>)
 8014ffa:	4137      	asrs	r7, r6
 8014ffc:	ea01 0307 	and.w	r3, r1, r7
 8015000:	4303      	orrs	r3, r0
 8015002:	d01f      	beq.n	8015044 <ceil+0x94>
 8015004:	a328      	add	r3, pc, #160	; (adr r3, 80150a8 <ceil+0xf8>)
 8015006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801500a:	f7eb f8e3 	bl	80001d4 <__adddf3>
 801500e:	2200      	movs	r2, #0
 8015010:	2300      	movs	r3, #0
 8015012:	f7eb fd25 	bl	8000a60 <__aeabi_dcmpgt>
 8015016:	2800      	cmp	r0, #0
 8015018:	d0eb      	beq.n	8014ff2 <ceil+0x42>
 801501a:	2c00      	cmp	r4, #0
 801501c:	bfc2      	ittt	gt
 801501e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015022:	fa43 f606 	asrgt.w	r6, r3, r6
 8015026:	19a4      	addgt	r4, r4, r6
 8015028:	ea24 0407 	bic.w	r4, r4, r7
 801502c:	2500      	movs	r5, #0
 801502e:	e7e0      	b.n	8014ff2 <ceil+0x42>
 8015030:	2e33      	cmp	r6, #51	; 0x33
 8015032:	dd0b      	ble.n	801504c <ceil+0x9c>
 8015034:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015038:	d104      	bne.n	8015044 <ceil+0x94>
 801503a:	ee10 2a10 	vmov	r2, s0
 801503e:	460b      	mov	r3, r1
 8015040:	f7eb f8c8 	bl	80001d4 <__adddf3>
 8015044:	ec41 0b10 	vmov	d0, r0, r1
 8015048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801504c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015050:	f04f 33ff 	mov.w	r3, #4294967295
 8015054:	fa23 f707 	lsr.w	r7, r3, r7
 8015058:	4207      	tst	r7, r0
 801505a:	d0f3      	beq.n	8015044 <ceil+0x94>
 801505c:	a312      	add	r3, pc, #72	; (adr r3, 80150a8 <ceil+0xf8>)
 801505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015062:	f7eb f8b7 	bl	80001d4 <__adddf3>
 8015066:	2200      	movs	r2, #0
 8015068:	2300      	movs	r3, #0
 801506a:	f7eb fcf9 	bl	8000a60 <__aeabi_dcmpgt>
 801506e:	2800      	cmp	r0, #0
 8015070:	d0bf      	beq.n	8014ff2 <ceil+0x42>
 8015072:	2c00      	cmp	r4, #0
 8015074:	dd02      	ble.n	801507c <ceil+0xcc>
 8015076:	2e14      	cmp	r6, #20
 8015078:	d103      	bne.n	8015082 <ceil+0xd2>
 801507a:	3401      	adds	r4, #1
 801507c:	ea25 0507 	bic.w	r5, r5, r7
 8015080:	e7b7      	b.n	8014ff2 <ceil+0x42>
 8015082:	2301      	movs	r3, #1
 8015084:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015088:	fa03 f606 	lsl.w	r6, r3, r6
 801508c:	4435      	add	r5, r6
 801508e:	4545      	cmp	r5, r8
 8015090:	bf38      	it	cc
 8015092:	18e4      	addcc	r4, r4, r3
 8015094:	e7f2      	b.n	801507c <ceil+0xcc>
 8015096:	2500      	movs	r5, #0
 8015098:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801509c:	e7a9      	b.n	8014ff2 <ceil+0x42>
 801509e:	4625      	mov	r5, r4
 80150a0:	e7a7      	b.n	8014ff2 <ceil+0x42>
 80150a2:	bf00      	nop
 80150a4:	f3af 8000 	nop.w
 80150a8:	8800759c 	.word	0x8800759c
 80150ac:	7e37e43c 	.word	0x7e37e43c
 80150b0:	3ff00000 	.word	0x3ff00000
 80150b4:	000fffff 	.word	0x000fffff

080150b8 <floor>:
 80150b8:	ec51 0b10 	vmov	r0, r1, d0
 80150bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80150c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80150c8:	2e13      	cmp	r6, #19
 80150ca:	ee10 5a10 	vmov	r5, s0
 80150ce:	ee10 8a10 	vmov	r8, s0
 80150d2:	460c      	mov	r4, r1
 80150d4:	dc32      	bgt.n	801513c <floor+0x84>
 80150d6:	2e00      	cmp	r6, #0
 80150d8:	da14      	bge.n	8015104 <floor+0x4c>
 80150da:	a333      	add	r3, pc, #204	; (adr r3, 80151a8 <floor+0xf0>)
 80150dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e0:	f7eb f878 	bl	80001d4 <__adddf3>
 80150e4:	2200      	movs	r2, #0
 80150e6:	2300      	movs	r3, #0
 80150e8:	f7eb fcba 	bl	8000a60 <__aeabi_dcmpgt>
 80150ec:	b138      	cbz	r0, 80150fe <floor+0x46>
 80150ee:	2c00      	cmp	r4, #0
 80150f0:	da57      	bge.n	80151a2 <floor+0xea>
 80150f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80150f6:	431d      	orrs	r5, r3
 80150f8:	d001      	beq.n	80150fe <floor+0x46>
 80150fa:	4c2d      	ldr	r4, [pc, #180]	; (80151b0 <floor+0xf8>)
 80150fc:	2500      	movs	r5, #0
 80150fe:	4621      	mov	r1, r4
 8015100:	4628      	mov	r0, r5
 8015102:	e025      	b.n	8015150 <floor+0x98>
 8015104:	4f2b      	ldr	r7, [pc, #172]	; (80151b4 <floor+0xfc>)
 8015106:	4137      	asrs	r7, r6
 8015108:	ea01 0307 	and.w	r3, r1, r7
 801510c:	4303      	orrs	r3, r0
 801510e:	d01f      	beq.n	8015150 <floor+0x98>
 8015110:	a325      	add	r3, pc, #148	; (adr r3, 80151a8 <floor+0xf0>)
 8015112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015116:	f7eb f85d 	bl	80001d4 <__adddf3>
 801511a:	2200      	movs	r2, #0
 801511c:	2300      	movs	r3, #0
 801511e:	f7eb fc9f 	bl	8000a60 <__aeabi_dcmpgt>
 8015122:	2800      	cmp	r0, #0
 8015124:	d0eb      	beq.n	80150fe <floor+0x46>
 8015126:	2c00      	cmp	r4, #0
 8015128:	bfbe      	ittt	lt
 801512a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801512e:	fa43 f606 	asrlt.w	r6, r3, r6
 8015132:	19a4      	addlt	r4, r4, r6
 8015134:	ea24 0407 	bic.w	r4, r4, r7
 8015138:	2500      	movs	r5, #0
 801513a:	e7e0      	b.n	80150fe <floor+0x46>
 801513c:	2e33      	cmp	r6, #51	; 0x33
 801513e:	dd0b      	ble.n	8015158 <floor+0xa0>
 8015140:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015144:	d104      	bne.n	8015150 <floor+0x98>
 8015146:	ee10 2a10 	vmov	r2, s0
 801514a:	460b      	mov	r3, r1
 801514c:	f7eb f842 	bl	80001d4 <__adddf3>
 8015150:	ec41 0b10 	vmov	d0, r0, r1
 8015154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015158:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801515c:	f04f 33ff 	mov.w	r3, #4294967295
 8015160:	fa23 f707 	lsr.w	r7, r3, r7
 8015164:	4207      	tst	r7, r0
 8015166:	d0f3      	beq.n	8015150 <floor+0x98>
 8015168:	a30f      	add	r3, pc, #60	; (adr r3, 80151a8 <floor+0xf0>)
 801516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801516e:	f7eb f831 	bl	80001d4 <__adddf3>
 8015172:	2200      	movs	r2, #0
 8015174:	2300      	movs	r3, #0
 8015176:	f7eb fc73 	bl	8000a60 <__aeabi_dcmpgt>
 801517a:	2800      	cmp	r0, #0
 801517c:	d0bf      	beq.n	80150fe <floor+0x46>
 801517e:	2c00      	cmp	r4, #0
 8015180:	da02      	bge.n	8015188 <floor+0xd0>
 8015182:	2e14      	cmp	r6, #20
 8015184:	d103      	bne.n	801518e <floor+0xd6>
 8015186:	3401      	adds	r4, #1
 8015188:	ea25 0507 	bic.w	r5, r5, r7
 801518c:	e7b7      	b.n	80150fe <floor+0x46>
 801518e:	2301      	movs	r3, #1
 8015190:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015194:	fa03 f606 	lsl.w	r6, r3, r6
 8015198:	4435      	add	r5, r6
 801519a:	4545      	cmp	r5, r8
 801519c:	bf38      	it	cc
 801519e:	18e4      	addcc	r4, r4, r3
 80151a0:	e7f2      	b.n	8015188 <floor+0xd0>
 80151a2:	2500      	movs	r5, #0
 80151a4:	462c      	mov	r4, r5
 80151a6:	e7aa      	b.n	80150fe <floor+0x46>
 80151a8:	8800759c 	.word	0x8800759c
 80151ac:	7e37e43c 	.word	0x7e37e43c
 80151b0:	bff00000 	.word	0xbff00000
 80151b4:	000fffff 	.word	0x000fffff

080151b8 <cosf>:
 80151b8:	ee10 3a10 	vmov	r3, s0
 80151bc:	b507      	push	{r0, r1, r2, lr}
 80151be:	4a1c      	ldr	r2, [pc, #112]	; (8015230 <cosf+0x78>)
 80151c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151c4:	4293      	cmp	r3, r2
 80151c6:	dc04      	bgt.n	80151d2 <cosf+0x1a>
 80151c8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015234 <cosf+0x7c>
 80151cc:	f000 fe9e 	bl	8015f0c <__kernel_cosf>
 80151d0:	e004      	b.n	80151dc <cosf+0x24>
 80151d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80151d6:	db04      	blt.n	80151e2 <cosf+0x2a>
 80151d8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80151dc:	b003      	add	sp, #12
 80151de:	f85d fb04 	ldr.w	pc, [sp], #4
 80151e2:	4668      	mov	r0, sp
 80151e4:	f000 fd52 	bl	8015c8c <__ieee754_rem_pio2f>
 80151e8:	f000 0003 	and.w	r0, r0, #3
 80151ec:	2801      	cmp	r0, #1
 80151ee:	d007      	beq.n	8015200 <cosf+0x48>
 80151f0:	2802      	cmp	r0, #2
 80151f2:	d00e      	beq.n	8015212 <cosf+0x5a>
 80151f4:	b9a0      	cbnz	r0, 8015220 <cosf+0x68>
 80151f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80151fa:	ed9d 0a00 	vldr	s0, [sp]
 80151fe:	e7e5      	b.n	80151cc <cosf+0x14>
 8015200:	eddd 0a01 	vldr	s1, [sp, #4]
 8015204:	ed9d 0a00 	vldr	s0, [sp]
 8015208:	f001 f96a 	bl	80164e0 <__kernel_sinf>
 801520c:	eeb1 0a40 	vneg.f32	s0, s0
 8015210:	e7e4      	b.n	80151dc <cosf+0x24>
 8015212:	eddd 0a01 	vldr	s1, [sp, #4]
 8015216:	ed9d 0a00 	vldr	s0, [sp]
 801521a:	f000 fe77 	bl	8015f0c <__kernel_cosf>
 801521e:	e7f5      	b.n	801520c <cosf+0x54>
 8015220:	eddd 0a01 	vldr	s1, [sp, #4]
 8015224:	ed9d 0a00 	vldr	s0, [sp]
 8015228:	2001      	movs	r0, #1
 801522a:	f001 f959 	bl	80164e0 <__kernel_sinf>
 801522e:	e7d5      	b.n	80151dc <cosf+0x24>
 8015230:	3f490fd8 	.word	0x3f490fd8
 8015234:	00000000 	.word	0x00000000

08015238 <roundf>:
 8015238:	ee10 0a10 	vmov	r0, s0
 801523c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015240:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015244:	2a16      	cmp	r2, #22
 8015246:	dc15      	bgt.n	8015274 <roundf+0x3c>
 8015248:	2a00      	cmp	r2, #0
 801524a:	da08      	bge.n	801525e <roundf+0x26>
 801524c:	3201      	adds	r2, #1
 801524e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015252:	d101      	bne.n	8015258 <roundf+0x20>
 8015254:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015258:	ee00 3a10 	vmov	s0, r3
 801525c:	4770      	bx	lr
 801525e:	4908      	ldr	r1, [pc, #32]	; (8015280 <roundf+0x48>)
 8015260:	4111      	asrs	r1, r2
 8015262:	4208      	tst	r0, r1
 8015264:	d0fa      	beq.n	801525c <roundf+0x24>
 8015266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801526a:	4113      	asrs	r3, r2
 801526c:	4403      	add	r3, r0
 801526e:	ea23 0301 	bic.w	r3, r3, r1
 8015272:	e7f1      	b.n	8015258 <roundf+0x20>
 8015274:	2a80      	cmp	r2, #128	; 0x80
 8015276:	d1f1      	bne.n	801525c <roundf+0x24>
 8015278:	ee30 0a00 	vadd.f32	s0, s0, s0
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop
 8015280:	007fffff 	.word	0x007fffff

08015284 <sinf>:
 8015284:	ee10 3a10 	vmov	r3, s0
 8015288:	b507      	push	{r0, r1, r2, lr}
 801528a:	4a1d      	ldr	r2, [pc, #116]	; (8015300 <sinf+0x7c>)
 801528c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015290:	4293      	cmp	r3, r2
 8015292:	dc05      	bgt.n	80152a0 <sinf+0x1c>
 8015294:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015304 <sinf+0x80>
 8015298:	2000      	movs	r0, #0
 801529a:	f001 f921 	bl	80164e0 <__kernel_sinf>
 801529e:	e004      	b.n	80152aa <sinf+0x26>
 80152a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80152a4:	db04      	blt.n	80152b0 <sinf+0x2c>
 80152a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80152aa:	b003      	add	sp, #12
 80152ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80152b0:	4668      	mov	r0, sp
 80152b2:	f000 fceb 	bl	8015c8c <__ieee754_rem_pio2f>
 80152b6:	f000 0003 	and.w	r0, r0, #3
 80152ba:	2801      	cmp	r0, #1
 80152bc:	d008      	beq.n	80152d0 <sinf+0x4c>
 80152be:	2802      	cmp	r0, #2
 80152c0:	d00d      	beq.n	80152de <sinf+0x5a>
 80152c2:	b9b0      	cbnz	r0, 80152f2 <sinf+0x6e>
 80152c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80152c8:	ed9d 0a00 	vldr	s0, [sp]
 80152cc:	2001      	movs	r0, #1
 80152ce:	e7e4      	b.n	801529a <sinf+0x16>
 80152d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80152d4:	ed9d 0a00 	vldr	s0, [sp]
 80152d8:	f000 fe18 	bl	8015f0c <__kernel_cosf>
 80152dc:	e7e5      	b.n	80152aa <sinf+0x26>
 80152de:	eddd 0a01 	vldr	s1, [sp, #4]
 80152e2:	ed9d 0a00 	vldr	s0, [sp]
 80152e6:	2001      	movs	r0, #1
 80152e8:	f001 f8fa 	bl	80164e0 <__kernel_sinf>
 80152ec:	eeb1 0a40 	vneg.f32	s0, s0
 80152f0:	e7db      	b.n	80152aa <sinf+0x26>
 80152f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80152f6:	ed9d 0a00 	vldr	s0, [sp]
 80152fa:	f000 fe07 	bl	8015f0c <__kernel_cosf>
 80152fe:	e7f5      	b.n	80152ec <sinf+0x68>
 8015300:	3f490fd8 	.word	0x3f490fd8
 8015304:	00000000 	.word	0x00000000

08015308 <tanf>:
 8015308:	ee10 3a10 	vmov	r3, s0
 801530c:	b507      	push	{r0, r1, r2, lr}
 801530e:	4a10      	ldr	r2, [pc, #64]	; (8015350 <tanf+0x48>)
 8015310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015314:	4293      	cmp	r3, r2
 8015316:	dc05      	bgt.n	8015324 <tanf+0x1c>
 8015318:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015354 <tanf+0x4c>
 801531c:	2001      	movs	r0, #1
 801531e:	f001 f927 	bl	8016570 <__kernel_tanf>
 8015322:	e004      	b.n	801532e <tanf+0x26>
 8015324:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015328:	db04      	blt.n	8015334 <tanf+0x2c>
 801532a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801532e:	b003      	add	sp, #12
 8015330:	f85d fb04 	ldr.w	pc, [sp], #4
 8015334:	4668      	mov	r0, sp
 8015336:	f000 fca9 	bl	8015c8c <__ieee754_rem_pio2f>
 801533a:	0040      	lsls	r0, r0, #1
 801533c:	f000 0002 	and.w	r0, r0, #2
 8015340:	eddd 0a01 	vldr	s1, [sp, #4]
 8015344:	ed9d 0a00 	vldr	s0, [sp]
 8015348:	f1c0 0001 	rsb	r0, r0, #1
 801534c:	e7e7      	b.n	801531e <tanf+0x16>
 801534e:	bf00      	nop
 8015350:	3f490fda 	.word	0x3f490fda
 8015354:	00000000 	.word	0x00000000

08015358 <atan2>:
 8015358:	f000 b89a 	b.w	8015490 <__ieee754_atan2>

0801535c <sqrt>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	ed2d 8b02 	vpush	{d8}
 8015362:	ec55 4b10 	vmov	r4, r5, d0
 8015366:	f000 f95d 	bl	8015624 <__ieee754_sqrt>
 801536a:	4b15      	ldr	r3, [pc, #84]	; (80153c0 <sqrt+0x64>)
 801536c:	eeb0 8a40 	vmov.f32	s16, s0
 8015370:	eef0 8a60 	vmov.f32	s17, s1
 8015374:	f993 3000 	ldrsb.w	r3, [r3]
 8015378:	3301      	adds	r3, #1
 801537a:	d019      	beq.n	80153b0 <sqrt+0x54>
 801537c:	4622      	mov	r2, r4
 801537e:	462b      	mov	r3, r5
 8015380:	4620      	mov	r0, r4
 8015382:	4629      	mov	r1, r5
 8015384:	f7eb fb76 	bl	8000a74 <__aeabi_dcmpun>
 8015388:	b990      	cbnz	r0, 80153b0 <sqrt+0x54>
 801538a:	2200      	movs	r2, #0
 801538c:	2300      	movs	r3, #0
 801538e:	4620      	mov	r0, r4
 8015390:	4629      	mov	r1, r5
 8015392:	f7eb fb47 	bl	8000a24 <__aeabi_dcmplt>
 8015396:	b158      	cbz	r0, 80153b0 <sqrt+0x54>
 8015398:	f001 fd16 	bl	8016dc8 <__errno>
 801539c:	2321      	movs	r3, #33	; 0x21
 801539e:	6003      	str	r3, [r0, #0]
 80153a0:	2200      	movs	r2, #0
 80153a2:	2300      	movs	r3, #0
 80153a4:	4610      	mov	r0, r2
 80153a6:	4619      	mov	r1, r3
 80153a8:	f7eb f9f4 	bl	8000794 <__aeabi_ddiv>
 80153ac:	ec41 0b18 	vmov	d8, r0, r1
 80153b0:	eeb0 0a48 	vmov.f32	s0, s16
 80153b4:	eef0 0a68 	vmov.f32	s1, s17
 80153b8:	ecbd 8b02 	vpop	{d8}
 80153bc:	bd38      	pop	{r3, r4, r5, pc}
 80153be:	bf00      	nop
 80153c0:	200000ed 	.word	0x200000ed

080153c4 <acosf>:
 80153c4:	b508      	push	{r3, lr}
 80153c6:	ed2d 8b02 	vpush	{d8}
 80153ca:	eeb0 8a40 	vmov.f32	s16, s0
 80153ce:	f000 f9dd 	bl	801578c <__ieee754_acosf>
 80153d2:	4b13      	ldr	r3, [pc, #76]	; (8015420 <acosf+0x5c>)
 80153d4:	f993 3000 	ldrsb.w	r3, [r3]
 80153d8:	3301      	adds	r3, #1
 80153da:	eef0 8a40 	vmov.f32	s17, s0
 80153de:	d01a      	beq.n	8015416 <acosf+0x52>
 80153e0:	eeb4 8a48 	vcmp.f32	s16, s16
 80153e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e8:	d615      	bvs.n	8015416 <acosf+0x52>
 80153ea:	eeb0 0a48 	vmov.f32	s0, s16
 80153ee:	f001 fc21 	bl	8016c34 <fabsf>
 80153f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80153f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80153fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fe:	dd0a      	ble.n	8015416 <acosf+0x52>
 8015400:	f001 fce2 	bl	8016dc8 <__errno>
 8015404:	ecbd 8b02 	vpop	{d8}
 8015408:	2321      	movs	r3, #33	; 0x21
 801540a:	6003      	str	r3, [r0, #0]
 801540c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015410:	4804      	ldr	r0, [pc, #16]	; (8015424 <acosf+0x60>)
 8015412:	f001 bc59 	b.w	8016cc8 <nanf>
 8015416:	eeb0 0a68 	vmov.f32	s0, s17
 801541a:	ecbd 8b02 	vpop	{d8}
 801541e:	bd08      	pop	{r3, pc}
 8015420:	200000ed 	.word	0x200000ed
 8015424:	080170c4 	.word	0x080170c4

08015428 <asinf>:
 8015428:	b508      	push	{r3, lr}
 801542a:	ed2d 8b02 	vpush	{d8}
 801542e:	eeb0 8a40 	vmov.f32	s16, s0
 8015432:	f000 faa5 	bl	8015980 <__ieee754_asinf>
 8015436:	4b13      	ldr	r3, [pc, #76]	; (8015484 <asinf+0x5c>)
 8015438:	f993 3000 	ldrsb.w	r3, [r3]
 801543c:	3301      	adds	r3, #1
 801543e:	eef0 8a40 	vmov.f32	s17, s0
 8015442:	d01a      	beq.n	801547a <asinf+0x52>
 8015444:	eeb4 8a48 	vcmp.f32	s16, s16
 8015448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801544c:	d615      	bvs.n	801547a <asinf+0x52>
 801544e:	eeb0 0a48 	vmov.f32	s0, s16
 8015452:	f001 fbef 	bl	8016c34 <fabsf>
 8015456:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801545a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801545e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015462:	dd0a      	ble.n	801547a <asinf+0x52>
 8015464:	f001 fcb0 	bl	8016dc8 <__errno>
 8015468:	ecbd 8b02 	vpop	{d8}
 801546c:	2321      	movs	r3, #33	; 0x21
 801546e:	6003      	str	r3, [r0, #0]
 8015470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015474:	4804      	ldr	r0, [pc, #16]	; (8015488 <asinf+0x60>)
 8015476:	f001 bc27 	b.w	8016cc8 <nanf>
 801547a:	eeb0 0a68 	vmov.f32	s0, s17
 801547e:	ecbd 8b02 	vpop	{d8}
 8015482:	bd08      	pop	{r3, pc}
 8015484:	200000ed 	.word	0x200000ed
 8015488:	080170c4 	.word	0x080170c4

0801548c <atan2f>:
 801548c:	f000 bb5e 	b.w	8015b4c <__ieee754_atan2f>

08015490 <__ieee754_atan2>:
 8015490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015494:	ec57 6b11 	vmov	r6, r7, d1
 8015498:	4273      	negs	r3, r6
 801549a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015620 <__ieee754_atan2+0x190>
 801549e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80154a2:	4333      	orrs	r3, r6
 80154a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80154a8:	4573      	cmp	r3, lr
 80154aa:	ec51 0b10 	vmov	r0, r1, d0
 80154ae:	ee11 8a10 	vmov	r8, s2
 80154b2:	d80a      	bhi.n	80154ca <__ieee754_atan2+0x3a>
 80154b4:	4244      	negs	r4, r0
 80154b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154ba:	4304      	orrs	r4, r0
 80154bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80154c0:	4574      	cmp	r4, lr
 80154c2:	ee10 9a10 	vmov	r9, s0
 80154c6:	468c      	mov	ip, r1
 80154c8:	d907      	bls.n	80154da <__ieee754_atan2+0x4a>
 80154ca:	4632      	mov	r2, r6
 80154cc:	463b      	mov	r3, r7
 80154ce:	f7ea fe81 	bl	80001d4 <__adddf3>
 80154d2:	ec41 0b10 	vmov	d0, r0, r1
 80154d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80154de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80154e2:	4334      	orrs	r4, r6
 80154e4:	d103      	bne.n	80154ee <__ieee754_atan2+0x5e>
 80154e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154ea:	f001 b925 	b.w	8016738 <atan>
 80154ee:	17bc      	asrs	r4, r7, #30
 80154f0:	f004 0402 	and.w	r4, r4, #2
 80154f4:	ea53 0909 	orrs.w	r9, r3, r9
 80154f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80154fc:	d107      	bne.n	801550e <__ieee754_atan2+0x7e>
 80154fe:	2c02      	cmp	r4, #2
 8015500:	d060      	beq.n	80155c4 <__ieee754_atan2+0x134>
 8015502:	2c03      	cmp	r4, #3
 8015504:	d1e5      	bne.n	80154d2 <__ieee754_atan2+0x42>
 8015506:	a142      	add	r1, pc, #264	; (adr r1, 8015610 <__ieee754_atan2+0x180>)
 8015508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801550c:	e7e1      	b.n	80154d2 <__ieee754_atan2+0x42>
 801550e:	ea52 0808 	orrs.w	r8, r2, r8
 8015512:	d106      	bne.n	8015522 <__ieee754_atan2+0x92>
 8015514:	f1bc 0f00 	cmp.w	ip, #0
 8015518:	da5f      	bge.n	80155da <__ieee754_atan2+0x14a>
 801551a:	a13f      	add	r1, pc, #252	; (adr r1, 8015618 <__ieee754_atan2+0x188>)
 801551c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015520:	e7d7      	b.n	80154d2 <__ieee754_atan2+0x42>
 8015522:	4572      	cmp	r2, lr
 8015524:	d10f      	bne.n	8015546 <__ieee754_atan2+0xb6>
 8015526:	4293      	cmp	r3, r2
 8015528:	f104 34ff 	add.w	r4, r4, #4294967295
 801552c:	d107      	bne.n	801553e <__ieee754_atan2+0xae>
 801552e:	2c02      	cmp	r4, #2
 8015530:	d84c      	bhi.n	80155cc <__ieee754_atan2+0x13c>
 8015532:	4b35      	ldr	r3, [pc, #212]	; (8015608 <__ieee754_atan2+0x178>)
 8015534:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015538:	e9d4 0100 	ldrd	r0, r1, [r4]
 801553c:	e7c9      	b.n	80154d2 <__ieee754_atan2+0x42>
 801553e:	2c02      	cmp	r4, #2
 8015540:	d848      	bhi.n	80155d4 <__ieee754_atan2+0x144>
 8015542:	4b32      	ldr	r3, [pc, #200]	; (801560c <__ieee754_atan2+0x17c>)
 8015544:	e7f6      	b.n	8015534 <__ieee754_atan2+0xa4>
 8015546:	4573      	cmp	r3, lr
 8015548:	d0e4      	beq.n	8015514 <__ieee754_atan2+0x84>
 801554a:	1a9b      	subs	r3, r3, r2
 801554c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015550:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015554:	da1e      	bge.n	8015594 <__ieee754_atan2+0x104>
 8015556:	2f00      	cmp	r7, #0
 8015558:	da01      	bge.n	801555e <__ieee754_atan2+0xce>
 801555a:	323c      	adds	r2, #60	; 0x3c
 801555c:	db1e      	blt.n	801559c <__ieee754_atan2+0x10c>
 801555e:	4632      	mov	r2, r6
 8015560:	463b      	mov	r3, r7
 8015562:	f7eb f917 	bl	8000794 <__aeabi_ddiv>
 8015566:	ec41 0b10 	vmov	d0, r0, r1
 801556a:	f001 fa85 	bl	8016a78 <fabs>
 801556e:	f001 f8e3 	bl	8016738 <atan>
 8015572:	ec51 0b10 	vmov	r0, r1, d0
 8015576:	2c01      	cmp	r4, #1
 8015578:	d013      	beq.n	80155a2 <__ieee754_atan2+0x112>
 801557a:	2c02      	cmp	r4, #2
 801557c:	d015      	beq.n	80155aa <__ieee754_atan2+0x11a>
 801557e:	2c00      	cmp	r4, #0
 8015580:	d0a7      	beq.n	80154d2 <__ieee754_atan2+0x42>
 8015582:	a319      	add	r3, pc, #100	; (adr r3, 80155e8 <__ieee754_atan2+0x158>)
 8015584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015588:	f7ea fe22 	bl	80001d0 <__aeabi_dsub>
 801558c:	a318      	add	r3, pc, #96	; (adr r3, 80155f0 <__ieee754_atan2+0x160>)
 801558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015592:	e014      	b.n	80155be <__ieee754_atan2+0x12e>
 8015594:	a118      	add	r1, pc, #96	; (adr r1, 80155f8 <__ieee754_atan2+0x168>)
 8015596:	e9d1 0100 	ldrd	r0, r1, [r1]
 801559a:	e7ec      	b.n	8015576 <__ieee754_atan2+0xe6>
 801559c:	2000      	movs	r0, #0
 801559e:	2100      	movs	r1, #0
 80155a0:	e7e9      	b.n	8015576 <__ieee754_atan2+0xe6>
 80155a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80155a6:	4619      	mov	r1, r3
 80155a8:	e793      	b.n	80154d2 <__ieee754_atan2+0x42>
 80155aa:	a30f      	add	r3, pc, #60	; (adr r3, 80155e8 <__ieee754_atan2+0x158>)
 80155ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b0:	f7ea fe0e 	bl	80001d0 <__aeabi_dsub>
 80155b4:	4602      	mov	r2, r0
 80155b6:	460b      	mov	r3, r1
 80155b8:	a10d      	add	r1, pc, #52	; (adr r1, 80155f0 <__ieee754_atan2+0x160>)
 80155ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155be:	f7ea fe07 	bl	80001d0 <__aeabi_dsub>
 80155c2:	e786      	b.n	80154d2 <__ieee754_atan2+0x42>
 80155c4:	a10a      	add	r1, pc, #40	; (adr r1, 80155f0 <__ieee754_atan2+0x160>)
 80155c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155ca:	e782      	b.n	80154d2 <__ieee754_atan2+0x42>
 80155cc:	a10c      	add	r1, pc, #48	; (adr r1, 8015600 <__ieee754_atan2+0x170>)
 80155ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155d2:	e77e      	b.n	80154d2 <__ieee754_atan2+0x42>
 80155d4:	2000      	movs	r0, #0
 80155d6:	2100      	movs	r1, #0
 80155d8:	e77b      	b.n	80154d2 <__ieee754_atan2+0x42>
 80155da:	a107      	add	r1, pc, #28	; (adr r1, 80155f8 <__ieee754_atan2+0x168>)
 80155dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155e0:	e777      	b.n	80154d2 <__ieee754_atan2+0x42>
 80155e2:	bf00      	nop
 80155e4:	f3af 8000 	nop.w
 80155e8:	33145c07 	.word	0x33145c07
 80155ec:	3ca1a626 	.word	0x3ca1a626
 80155f0:	54442d18 	.word	0x54442d18
 80155f4:	400921fb 	.word	0x400921fb
 80155f8:	54442d18 	.word	0x54442d18
 80155fc:	3ff921fb 	.word	0x3ff921fb
 8015600:	54442d18 	.word	0x54442d18
 8015604:	3fe921fb 	.word	0x3fe921fb
 8015608:	080170c8 	.word	0x080170c8
 801560c:	080170e0 	.word	0x080170e0
 8015610:	54442d18 	.word	0x54442d18
 8015614:	c00921fb 	.word	0xc00921fb
 8015618:	54442d18 	.word	0x54442d18
 801561c:	bff921fb 	.word	0xbff921fb
 8015620:	7ff00000 	.word	0x7ff00000

08015624 <__ieee754_sqrt>:
 8015624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015628:	ec55 4b10 	vmov	r4, r5, d0
 801562c:	4e56      	ldr	r6, [pc, #344]	; (8015788 <__ieee754_sqrt+0x164>)
 801562e:	43ae      	bics	r6, r5
 8015630:	ee10 0a10 	vmov	r0, s0
 8015634:	ee10 3a10 	vmov	r3, s0
 8015638:	4629      	mov	r1, r5
 801563a:	462a      	mov	r2, r5
 801563c:	d110      	bne.n	8015660 <__ieee754_sqrt+0x3c>
 801563e:	ee10 2a10 	vmov	r2, s0
 8015642:	462b      	mov	r3, r5
 8015644:	f7ea ff7c 	bl	8000540 <__aeabi_dmul>
 8015648:	4602      	mov	r2, r0
 801564a:	460b      	mov	r3, r1
 801564c:	4620      	mov	r0, r4
 801564e:	4629      	mov	r1, r5
 8015650:	f7ea fdc0 	bl	80001d4 <__adddf3>
 8015654:	4604      	mov	r4, r0
 8015656:	460d      	mov	r5, r1
 8015658:	ec45 4b10 	vmov	d0, r4, r5
 801565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015660:	2d00      	cmp	r5, #0
 8015662:	dc10      	bgt.n	8015686 <__ieee754_sqrt+0x62>
 8015664:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015668:	4330      	orrs	r0, r6
 801566a:	d0f5      	beq.n	8015658 <__ieee754_sqrt+0x34>
 801566c:	b15d      	cbz	r5, 8015686 <__ieee754_sqrt+0x62>
 801566e:	ee10 2a10 	vmov	r2, s0
 8015672:	462b      	mov	r3, r5
 8015674:	ee10 0a10 	vmov	r0, s0
 8015678:	f7ea fdaa 	bl	80001d0 <__aeabi_dsub>
 801567c:	4602      	mov	r2, r0
 801567e:	460b      	mov	r3, r1
 8015680:	f7eb f888 	bl	8000794 <__aeabi_ddiv>
 8015684:	e7e6      	b.n	8015654 <__ieee754_sqrt+0x30>
 8015686:	1509      	asrs	r1, r1, #20
 8015688:	d076      	beq.n	8015778 <__ieee754_sqrt+0x154>
 801568a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801568e:	07ce      	lsls	r6, r1, #31
 8015690:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015694:	bf5e      	ittt	pl
 8015696:	0fda      	lsrpl	r2, r3, #31
 8015698:	005b      	lslpl	r3, r3, #1
 801569a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801569e:	0fda      	lsrs	r2, r3, #31
 80156a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80156a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80156a8:	2000      	movs	r0, #0
 80156aa:	106d      	asrs	r5, r5, #1
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	f04f 0e16 	mov.w	lr, #22
 80156b2:	4684      	mov	ip, r0
 80156b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80156b8:	eb0c 0401 	add.w	r4, ip, r1
 80156bc:	4294      	cmp	r4, r2
 80156be:	bfde      	ittt	le
 80156c0:	1b12      	suble	r2, r2, r4
 80156c2:	eb04 0c01 	addle.w	ip, r4, r1
 80156c6:	1840      	addle	r0, r0, r1
 80156c8:	0052      	lsls	r2, r2, #1
 80156ca:	f1be 0e01 	subs.w	lr, lr, #1
 80156ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80156d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80156d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80156da:	d1ed      	bne.n	80156b8 <__ieee754_sqrt+0x94>
 80156dc:	4671      	mov	r1, lr
 80156de:	2720      	movs	r7, #32
 80156e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80156e4:	4562      	cmp	r2, ip
 80156e6:	eb04 060e 	add.w	r6, r4, lr
 80156ea:	dc02      	bgt.n	80156f2 <__ieee754_sqrt+0xce>
 80156ec:	d113      	bne.n	8015716 <__ieee754_sqrt+0xf2>
 80156ee:	429e      	cmp	r6, r3
 80156f0:	d811      	bhi.n	8015716 <__ieee754_sqrt+0xf2>
 80156f2:	2e00      	cmp	r6, #0
 80156f4:	eb06 0e04 	add.w	lr, r6, r4
 80156f8:	da43      	bge.n	8015782 <__ieee754_sqrt+0x15e>
 80156fa:	f1be 0f00 	cmp.w	lr, #0
 80156fe:	db40      	blt.n	8015782 <__ieee754_sqrt+0x15e>
 8015700:	f10c 0801 	add.w	r8, ip, #1
 8015704:	eba2 020c 	sub.w	r2, r2, ip
 8015708:	429e      	cmp	r6, r3
 801570a:	bf88      	it	hi
 801570c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015710:	1b9b      	subs	r3, r3, r6
 8015712:	4421      	add	r1, r4
 8015714:	46c4      	mov	ip, r8
 8015716:	0052      	lsls	r2, r2, #1
 8015718:	3f01      	subs	r7, #1
 801571a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801571e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015722:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015726:	d1dd      	bne.n	80156e4 <__ieee754_sqrt+0xc0>
 8015728:	4313      	orrs	r3, r2
 801572a:	d006      	beq.n	801573a <__ieee754_sqrt+0x116>
 801572c:	1c4c      	adds	r4, r1, #1
 801572e:	bf13      	iteet	ne
 8015730:	3101      	addne	r1, #1
 8015732:	3001      	addeq	r0, #1
 8015734:	4639      	moveq	r1, r7
 8015736:	f021 0101 	bicne.w	r1, r1, #1
 801573a:	1043      	asrs	r3, r0, #1
 801573c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015740:	0849      	lsrs	r1, r1, #1
 8015742:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015746:	07c2      	lsls	r2, r0, #31
 8015748:	bf48      	it	mi
 801574a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801574e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015752:	460c      	mov	r4, r1
 8015754:	463d      	mov	r5, r7
 8015756:	e77f      	b.n	8015658 <__ieee754_sqrt+0x34>
 8015758:	0ada      	lsrs	r2, r3, #11
 801575a:	3815      	subs	r0, #21
 801575c:	055b      	lsls	r3, r3, #21
 801575e:	2a00      	cmp	r2, #0
 8015760:	d0fa      	beq.n	8015758 <__ieee754_sqrt+0x134>
 8015762:	02d7      	lsls	r7, r2, #11
 8015764:	d50a      	bpl.n	801577c <__ieee754_sqrt+0x158>
 8015766:	f1c1 0420 	rsb	r4, r1, #32
 801576a:	fa23 f404 	lsr.w	r4, r3, r4
 801576e:	1e4d      	subs	r5, r1, #1
 8015770:	408b      	lsls	r3, r1
 8015772:	4322      	orrs	r2, r4
 8015774:	1b41      	subs	r1, r0, r5
 8015776:	e788      	b.n	801568a <__ieee754_sqrt+0x66>
 8015778:	4608      	mov	r0, r1
 801577a:	e7f0      	b.n	801575e <__ieee754_sqrt+0x13a>
 801577c:	0052      	lsls	r2, r2, #1
 801577e:	3101      	adds	r1, #1
 8015780:	e7ef      	b.n	8015762 <__ieee754_sqrt+0x13e>
 8015782:	46e0      	mov	r8, ip
 8015784:	e7be      	b.n	8015704 <__ieee754_sqrt+0xe0>
 8015786:	bf00      	nop
 8015788:	7ff00000 	.word	0x7ff00000

0801578c <__ieee754_acosf>:
 801578c:	b508      	push	{r3, lr}
 801578e:	ee10 3a10 	vmov	r3, s0
 8015792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015796:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801579a:	ed2d 8b0c 	vpush	{d8-d13}
 801579e:	d10a      	bne.n	80157b6 <__ieee754_acosf+0x2a>
 80157a0:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801593c <__ieee754_acosf+0x1b0>
 80157a4:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8015940 <__ieee754_acosf+0x1b4>
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	bfd8      	it	le
 80157ac:	eeb0 0a48 	vmovle.f32	s0, s16
 80157b0:	ecbd 8b0c 	vpop	{d8-d13}
 80157b4:	bd08      	pop	{r3, pc}
 80157b6:	dd04      	ble.n	80157c2 <__ieee754_acosf+0x36>
 80157b8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80157bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80157c0:	e7f6      	b.n	80157b0 <__ieee754_acosf+0x24>
 80157c2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80157c6:	da3e      	bge.n	8015846 <__ieee754_acosf+0xba>
 80157c8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80157cc:	f340 80b3 	ble.w	8015936 <__ieee754_acosf+0x1aa>
 80157d0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80157d4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8015944 <__ieee754_acosf+0x1b8>
 80157d8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015948 <__ieee754_acosf+0x1bc>
 80157dc:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801594c <__ieee754_acosf+0x1c0>
 80157e0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8015950 <__ieee754_acosf+0x1c4>
 80157e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80157e8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8015954 <__ieee754_acosf+0x1c8>
 80157ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80157f0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015958 <__ieee754_acosf+0x1cc>
 80157f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80157f8:	eddf 6a58 	vldr	s13, [pc, #352]	; 801595c <__ieee754_acosf+0x1d0>
 80157fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015800:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8015960 <__ieee754_acosf+0x1d4>
 8015804:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015808:	eddf 6a56 	vldr	s13, [pc, #344]	; 8015964 <__ieee754_acosf+0x1d8>
 801580c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8015810:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015968 <__ieee754_acosf+0x1dc>
 8015814:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015818:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801596c <__ieee754_acosf+0x1e0>
 801581c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015824:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015828:	ee27 7a27 	vmul.f32	s14, s14, s15
 801582c:	eef0 7a66 	vmov.f32	s15, s13
 8015830:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015834:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015970 <__ieee754_acosf+0x1e4>
 8015838:	eea0 8a66 	vfms.f32	s16, s0, s13
 801583c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015840:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015844:	e7b4      	b.n	80157b0 <__ieee754_acosf+0x24>
 8015846:	2b00      	cmp	r3, #0
 8015848:	eddf da3e 	vldr	s27, [pc, #248]	; 8015944 <__ieee754_acosf+0x1b8>
 801584c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8015948 <__ieee754_acosf+0x1bc>
 8015850:	ed9f ca40 	vldr	s24, [pc, #256]	; 8015954 <__ieee754_acosf+0x1c8>
 8015854:	eddf ba40 	vldr	s23, [pc, #256]	; 8015958 <__ieee754_acosf+0x1cc>
 8015858:	ed9f ba40 	vldr	s22, [pc, #256]	; 801595c <__ieee754_acosf+0x1d0>
 801585c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8015960 <__ieee754_acosf+0x1d4>
 8015860:	ed9f da40 	vldr	s26, [pc, #256]	; 8015964 <__ieee754_acosf+0x1d8>
 8015864:	eddf aa39 	vldr	s21, [pc, #228]	; 801594c <__ieee754_acosf+0x1c0>
 8015868:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8015968 <__ieee754_acosf+0x1dc>
 801586c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801596c <__ieee754_acosf+0x1e0>
 8015870:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015874:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015878:	da28      	bge.n	80158cc <__ieee754_acosf+0x140>
 801587a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801587e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015882:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8015886:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801588a:	eeac ca80 	vfma.f32	s24, s25, s0
 801588e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8015892:	eeec ba00 	vfma.f32	s23, s24, s0
 8015896:	eeea 9a00 	vfma.f32	s19, s20, s0
 801589a:	eeab ba80 	vfma.f32	s22, s23, s0
 801589e:	eea9 9a80 	vfma.f32	s18, s19, s0
 80158a2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80158a6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80158aa:	f000 fb2b 	bl	8015f04 <__ieee754_sqrtf>
 80158ae:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80158b2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8015974 <__ieee754_acosf+0x1e8>
 80158b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80158ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80158be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80158c2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8015978 <__ieee754_acosf+0x1ec>
 80158c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80158ca:	e771      	b.n	80157b0 <__ieee754_acosf+0x24>
 80158cc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80158d0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80158d4:	eeb0 0a48 	vmov.f32	s0, s16
 80158d8:	f000 fb14 	bl	8015f04 <__ieee754_sqrtf>
 80158dc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80158e0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80158e4:	eeac ca88 	vfma.f32	s24, s25, s16
 80158e8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80158ec:	eeec ba08 	vfma.f32	s23, s24, s16
 80158f0:	ee10 3a10 	vmov	r3, s0
 80158f4:	eeab ba88 	vfma.f32	s22, s23, s16
 80158f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80158fc:	f023 030f 	bic.w	r3, r3, #15
 8015900:	eeea 9a08 	vfma.f32	s19, s20, s16
 8015904:	ee07 3a90 	vmov	s15, r3
 8015908:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801590c:	eeb0 6a48 	vmov.f32	s12, s16
 8015910:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8015914:	eea9 9a88 	vfma.f32	s18, s19, s16
 8015918:	ee70 6a27 	vadd.f32	s13, s0, s15
 801591c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015920:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015924:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8015928:	eea0 7a26 	vfma.f32	s14, s0, s13
 801592c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015930:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015934:	e73c      	b.n	80157b0 <__ieee754_acosf+0x24>
 8015936:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801597c <__ieee754_acosf+0x1f0>
 801593a:	e739      	b.n	80157b0 <__ieee754_acosf+0x24>
 801593c:	00000000 	.word	0x00000000
 8015940:	40490fdb 	.word	0x40490fdb
 8015944:	3811ef08 	.word	0x3811ef08
 8015948:	3a4f7f04 	.word	0x3a4f7f04
 801594c:	bf303361 	.word	0xbf303361
 8015950:	33a22168 	.word	0x33a22168
 8015954:	bd241146 	.word	0xbd241146
 8015958:	3e4e0aa8 	.word	0x3e4e0aa8
 801595c:	bea6b090 	.word	0xbea6b090
 8015960:	3e2aaaab 	.word	0x3e2aaaab
 8015964:	3d9dc62e 	.word	0x3d9dc62e
 8015968:	4001572d 	.word	0x4001572d
 801596c:	c019d139 	.word	0xc019d139
 8015970:	3fc90fda 	.word	0x3fc90fda
 8015974:	b3a22168 	.word	0xb3a22168
 8015978:	40490fda 	.word	0x40490fda
 801597c:	3fc90fdb 	.word	0x3fc90fdb

08015980 <__ieee754_asinf>:
 8015980:	b538      	push	{r3, r4, r5, lr}
 8015982:	ee10 5a10 	vmov	r5, s0
 8015986:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801598a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801598e:	ed2d 8b04 	vpush	{d8-d9}
 8015992:	d10c      	bne.n	80159ae <__ieee754_asinf+0x2e>
 8015994:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8015b0c <__ieee754_asinf+0x18c>
 8015998:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8015b10 <__ieee754_asinf+0x190>
 801599c:	ee60 7a27 	vmul.f32	s15, s0, s15
 80159a0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80159a4:	eeb0 0a67 	vmov.f32	s0, s15
 80159a8:	ecbd 8b04 	vpop	{d8-d9}
 80159ac:	bd38      	pop	{r3, r4, r5, pc}
 80159ae:	dd04      	ble.n	80159ba <__ieee754_asinf+0x3a>
 80159b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80159b4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80159b8:	e7f6      	b.n	80159a8 <__ieee754_asinf+0x28>
 80159ba:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80159be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80159c2:	da0b      	bge.n	80159dc <__ieee754_asinf+0x5c>
 80159c4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80159c8:	da52      	bge.n	8015a70 <__ieee754_asinf+0xf0>
 80159ca:	eddf 7a52 	vldr	s15, [pc, #328]	; 8015b14 <__ieee754_asinf+0x194>
 80159ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 80159d2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80159d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159da:	dce5      	bgt.n	80159a8 <__ieee754_asinf+0x28>
 80159dc:	f001 f92a 	bl	8016c34 <fabsf>
 80159e0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80159e4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80159e8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80159ec:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015b18 <__ieee754_asinf+0x198>
 80159f0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8015b1c <__ieee754_asinf+0x19c>
 80159f4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8015b20 <__ieee754_asinf+0x1a0>
 80159f8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80159fc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015b24 <__ieee754_asinf+0x1a4>
 8015a00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015a04:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015b28 <__ieee754_asinf+0x1a8>
 8015a08:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015a0c:	eddf 7a47 	vldr	s15, [pc, #284]	; 8015b2c <__ieee754_asinf+0x1ac>
 8015a10:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015a14:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015b30 <__ieee754_asinf+0x1b0>
 8015a18:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015a1c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015b34 <__ieee754_asinf+0x1b4>
 8015a20:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015a24:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015b38 <__ieee754_asinf+0x1b8>
 8015a28:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015a2c:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015b3c <__ieee754_asinf+0x1bc>
 8015a30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015a34:	eeb0 0a48 	vmov.f32	s0, s16
 8015a38:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015a3c:	f000 fa62 	bl	8015f04 <__ieee754_sqrtf>
 8015a40:	4b3f      	ldr	r3, [pc, #252]	; (8015b40 <__ieee754_asinf+0x1c0>)
 8015a42:	ee29 9a08 	vmul.f32	s18, s18, s16
 8015a46:	429c      	cmp	r4, r3
 8015a48:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8015a4c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015a50:	dd3d      	ble.n	8015ace <__ieee754_asinf+0x14e>
 8015a52:	eea0 0a06 	vfma.f32	s0, s0, s12
 8015a56:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8015b44 <__ieee754_asinf+0x1c4>
 8015a5a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8015a5e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015b10 <__ieee754_asinf+0x190>
 8015a62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015a66:	2d00      	cmp	r5, #0
 8015a68:	bfd8      	it	le
 8015a6a:	eeb1 0a40 	vnegle.f32	s0, s0
 8015a6e:	e79b      	b.n	80159a8 <__ieee754_asinf+0x28>
 8015a70:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015a74:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015b18 <__ieee754_asinf+0x198>
 8015a78:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8015b1c <__ieee754_asinf+0x19c>
 8015a7c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8015b30 <__ieee754_asinf+0x1b0>
 8015a80:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015a84:	eddf 6a27 	vldr	s13, [pc, #156]	; 8015b24 <__ieee754_asinf+0x1a4>
 8015a88:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015a8c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8015b28 <__ieee754_asinf+0x1a8>
 8015a90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015a94:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015b2c <__ieee754_asinf+0x1ac>
 8015a98:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015a9c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015b20 <__ieee754_asinf+0x1a0>
 8015aa0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015aa4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8015b34 <__ieee754_asinf+0x1b4>
 8015aa8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015aac:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8015b38 <__ieee754_asinf+0x1b8>
 8015ab0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015ab4:	eddf 6a21 	vldr	s13, [pc, #132]	; 8015b3c <__ieee754_asinf+0x1bc>
 8015ab8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ac0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015ac4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015ac8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015acc:	e76c      	b.n	80159a8 <__ieee754_asinf+0x28>
 8015ace:	ee10 3a10 	vmov	r3, s0
 8015ad2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015ad6:	f023 030f 	bic.w	r3, r3, #15
 8015ada:	ee07 3a10 	vmov	s14, r3
 8015ade:	eea7 8a47 	vfms.f32	s16, s14, s14
 8015ae2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015ae6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015aea:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8015aee:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015b0c <__ieee754_asinf+0x18c>
 8015af2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8015af6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8015afa:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015b48 <__ieee754_asinf+0x1c8>
 8015afe:	eeb0 6a40 	vmov.f32	s12, s0
 8015b02:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015b06:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015b0a:	e7aa      	b.n	8015a62 <__ieee754_asinf+0xe2>
 8015b0c:	b33bbd2e 	.word	0xb33bbd2e
 8015b10:	3fc90fdb 	.word	0x3fc90fdb
 8015b14:	7149f2ca 	.word	0x7149f2ca
 8015b18:	3811ef08 	.word	0x3811ef08
 8015b1c:	3a4f7f04 	.word	0x3a4f7f04
 8015b20:	3e2aaaab 	.word	0x3e2aaaab
 8015b24:	bd241146 	.word	0xbd241146
 8015b28:	3e4e0aa8 	.word	0x3e4e0aa8
 8015b2c:	bea6b090 	.word	0xbea6b090
 8015b30:	3d9dc62e 	.word	0x3d9dc62e
 8015b34:	bf303361 	.word	0xbf303361
 8015b38:	4001572d 	.word	0x4001572d
 8015b3c:	c019d139 	.word	0xc019d139
 8015b40:	3f799999 	.word	0x3f799999
 8015b44:	333bbd2e 	.word	0x333bbd2e
 8015b48:	3f490fdb 	.word	0x3f490fdb

08015b4c <__ieee754_atan2f>:
 8015b4c:	ee10 2a90 	vmov	r2, s1
 8015b50:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015b54:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015b58:	b510      	push	{r4, lr}
 8015b5a:	eef0 7a40 	vmov.f32	s15, s0
 8015b5e:	dc06      	bgt.n	8015b6e <__ieee754_atan2f+0x22>
 8015b60:	ee10 0a10 	vmov	r0, s0
 8015b64:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015b68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015b6c:	dd04      	ble.n	8015b78 <__ieee754_atan2f+0x2c>
 8015b6e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015b72:	eeb0 0a67 	vmov.f32	s0, s15
 8015b76:	bd10      	pop	{r4, pc}
 8015b78:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015b7c:	d103      	bne.n	8015b86 <__ieee754_atan2f+0x3a>
 8015b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b82:	f000 bf83 	b.w	8016a8c <atanf>
 8015b86:	1794      	asrs	r4, r2, #30
 8015b88:	f004 0402 	and.w	r4, r4, #2
 8015b8c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015b90:	b943      	cbnz	r3, 8015ba4 <__ieee754_atan2f+0x58>
 8015b92:	2c02      	cmp	r4, #2
 8015b94:	d05e      	beq.n	8015c54 <__ieee754_atan2f+0x108>
 8015b96:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015c68 <__ieee754_atan2f+0x11c>
 8015b9a:	2c03      	cmp	r4, #3
 8015b9c:	bf08      	it	eq
 8015b9e:	eef0 7a47 	vmoveq.f32	s15, s14
 8015ba2:	e7e6      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015ba4:	b941      	cbnz	r1, 8015bb8 <__ieee754_atan2f+0x6c>
 8015ba6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015c6c <__ieee754_atan2f+0x120>
 8015baa:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8015c70 <__ieee754_atan2f+0x124>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	bfb8      	it	lt
 8015bb2:	eef0 7a40 	vmovlt.f32	s15, s0
 8015bb6:	e7dc      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015bb8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015bbc:	d110      	bne.n	8015be0 <__ieee754_atan2f+0x94>
 8015bbe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8015bc6:	d107      	bne.n	8015bd8 <__ieee754_atan2f+0x8c>
 8015bc8:	2c02      	cmp	r4, #2
 8015bca:	d846      	bhi.n	8015c5a <__ieee754_atan2f+0x10e>
 8015bcc:	4b29      	ldr	r3, [pc, #164]	; (8015c74 <__ieee754_atan2f+0x128>)
 8015bce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015bd2:	edd4 7a00 	vldr	s15, [r4]
 8015bd6:	e7cc      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015bd8:	2c02      	cmp	r4, #2
 8015bda:	d841      	bhi.n	8015c60 <__ieee754_atan2f+0x114>
 8015bdc:	4b26      	ldr	r3, [pc, #152]	; (8015c78 <__ieee754_atan2f+0x12c>)
 8015bde:	e7f6      	b.n	8015bce <__ieee754_atan2f+0x82>
 8015be0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015be4:	d0df      	beq.n	8015ba6 <__ieee754_atan2f+0x5a>
 8015be6:	1a5b      	subs	r3, r3, r1
 8015be8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8015bec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8015bf0:	da1a      	bge.n	8015c28 <__ieee754_atan2f+0xdc>
 8015bf2:	2a00      	cmp	r2, #0
 8015bf4:	da01      	bge.n	8015bfa <__ieee754_atan2f+0xae>
 8015bf6:	313c      	adds	r1, #60	; 0x3c
 8015bf8:	db19      	blt.n	8015c2e <__ieee754_atan2f+0xe2>
 8015bfa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8015bfe:	f001 f819 	bl	8016c34 <fabsf>
 8015c02:	f000 ff43 	bl	8016a8c <atanf>
 8015c06:	eef0 7a40 	vmov.f32	s15, s0
 8015c0a:	2c01      	cmp	r4, #1
 8015c0c:	d012      	beq.n	8015c34 <__ieee754_atan2f+0xe8>
 8015c0e:	2c02      	cmp	r4, #2
 8015c10:	d017      	beq.n	8015c42 <__ieee754_atan2f+0xf6>
 8015c12:	2c00      	cmp	r4, #0
 8015c14:	d0ad      	beq.n	8015b72 <__ieee754_atan2f+0x26>
 8015c16:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8015c7c <__ieee754_atan2f+0x130>
 8015c1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c1e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8015c80 <__ieee754_atan2f+0x134>
 8015c22:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c26:	e7a4      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015c28:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015c6c <__ieee754_atan2f+0x120>
 8015c2c:	e7ed      	b.n	8015c0a <__ieee754_atan2f+0xbe>
 8015c2e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015c84 <__ieee754_atan2f+0x138>
 8015c32:	e7ea      	b.n	8015c0a <__ieee754_atan2f+0xbe>
 8015c34:	ee17 3a90 	vmov	r3, s15
 8015c38:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015c3c:	ee07 3a90 	vmov	s15, r3
 8015c40:	e797      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015c42:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8015c7c <__ieee754_atan2f+0x130>
 8015c46:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c4a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8015c80 <__ieee754_atan2f+0x134>
 8015c4e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015c52:	e78e      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015c54:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015c80 <__ieee754_atan2f+0x134>
 8015c58:	e78b      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015c5a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015c88 <__ieee754_atan2f+0x13c>
 8015c5e:	e788      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015c60:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015c84 <__ieee754_atan2f+0x138>
 8015c64:	e785      	b.n	8015b72 <__ieee754_atan2f+0x26>
 8015c66:	bf00      	nop
 8015c68:	c0490fdb 	.word	0xc0490fdb
 8015c6c:	3fc90fdb 	.word	0x3fc90fdb
 8015c70:	bfc90fdb 	.word	0xbfc90fdb
 8015c74:	080170f8 	.word	0x080170f8
 8015c78:	08017104 	.word	0x08017104
 8015c7c:	33bbbd2e 	.word	0x33bbbd2e
 8015c80:	40490fdb 	.word	0x40490fdb
 8015c84:	00000000 	.word	0x00000000
 8015c88:	3f490fdb 	.word	0x3f490fdb

08015c8c <__ieee754_rem_pio2f>:
 8015c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c8e:	ee10 6a10 	vmov	r6, s0
 8015c92:	4b8e      	ldr	r3, [pc, #568]	; (8015ecc <__ieee754_rem_pio2f+0x240>)
 8015c94:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015c98:	429d      	cmp	r5, r3
 8015c9a:	b087      	sub	sp, #28
 8015c9c:	eef0 7a40 	vmov.f32	s15, s0
 8015ca0:	4604      	mov	r4, r0
 8015ca2:	dc05      	bgt.n	8015cb0 <__ieee754_rem_pio2f+0x24>
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	ed80 0a00 	vstr	s0, [r0]
 8015caa:	6043      	str	r3, [r0, #4]
 8015cac:	2000      	movs	r0, #0
 8015cae:	e01a      	b.n	8015ce6 <__ieee754_rem_pio2f+0x5a>
 8015cb0:	4b87      	ldr	r3, [pc, #540]	; (8015ed0 <__ieee754_rem_pio2f+0x244>)
 8015cb2:	429d      	cmp	r5, r3
 8015cb4:	dc46      	bgt.n	8015d44 <__ieee754_rem_pio2f+0xb8>
 8015cb6:	2e00      	cmp	r6, #0
 8015cb8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015ed4 <__ieee754_rem_pio2f+0x248>
 8015cbc:	4b86      	ldr	r3, [pc, #536]	; (8015ed8 <__ieee754_rem_pio2f+0x24c>)
 8015cbe:	f025 050f 	bic.w	r5, r5, #15
 8015cc2:	dd1f      	ble.n	8015d04 <__ieee754_rem_pio2f+0x78>
 8015cc4:	429d      	cmp	r5, r3
 8015cc6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cca:	d00e      	beq.n	8015cea <__ieee754_rem_pio2f+0x5e>
 8015ccc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8015edc <__ieee754_rem_pio2f+0x250>
 8015cd0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015cd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cd8:	ed80 0a00 	vstr	s0, [r0]
 8015cdc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015ce0:	2001      	movs	r0, #1
 8015ce2:	edc4 7a01 	vstr	s15, [r4, #4]
 8015ce6:	b007      	add	sp, #28
 8015ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cea:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8015ee0 <__ieee754_rem_pio2f+0x254>
 8015cee:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8015ee4 <__ieee754_rem_pio2f+0x258>
 8015cf2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cf6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015cfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015cfe:	edc0 6a00 	vstr	s13, [r0]
 8015d02:	e7eb      	b.n	8015cdc <__ieee754_rem_pio2f+0x50>
 8015d04:	429d      	cmp	r5, r3
 8015d06:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015d0a:	d00e      	beq.n	8015d2a <__ieee754_rem_pio2f+0x9e>
 8015d0c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015edc <__ieee754_rem_pio2f+0x250>
 8015d10:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015d14:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015d18:	ed80 0a00 	vstr	s0, [r0]
 8015d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015d20:	f04f 30ff 	mov.w	r0, #4294967295
 8015d24:	edc4 7a01 	vstr	s15, [r4, #4]
 8015d28:	e7dd      	b.n	8015ce6 <__ieee754_rem_pio2f+0x5a>
 8015d2a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015ee0 <__ieee754_rem_pio2f+0x254>
 8015d2e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8015ee4 <__ieee754_rem_pio2f+0x258>
 8015d32:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015d36:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015d3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015d3e:	edc0 6a00 	vstr	s13, [r0]
 8015d42:	e7eb      	b.n	8015d1c <__ieee754_rem_pio2f+0x90>
 8015d44:	4b68      	ldr	r3, [pc, #416]	; (8015ee8 <__ieee754_rem_pio2f+0x25c>)
 8015d46:	429d      	cmp	r5, r3
 8015d48:	dc72      	bgt.n	8015e30 <__ieee754_rem_pio2f+0x1a4>
 8015d4a:	f000 ff73 	bl	8016c34 <fabsf>
 8015d4e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015eec <__ieee754_rem_pio2f+0x260>
 8015d52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015d56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015d5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015d62:	ee17 0a90 	vmov	r0, s15
 8015d66:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015ed4 <__ieee754_rem_pio2f+0x248>
 8015d6a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015d6e:	281f      	cmp	r0, #31
 8015d70:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015edc <__ieee754_rem_pio2f+0x250>
 8015d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d78:	eeb1 6a47 	vneg.f32	s12, s14
 8015d7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015d80:	ee16 2a90 	vmov	r2, s13
 8015d84:	dc1c      	bgt.n	8015dc0 <__ieee754_rem_pio2f+0x134>
 8015d86:	495a      	ldr	r1, [pc, #360]	; (8015ef0 <__ieee754_rem_pio2f+0x264>)
 8015d88:	1e47      	subs	r7, r0, #1
 8015d8a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8015d8e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015d92:	428b      	cmp	r3, r1
 8015d94:	d014      	beq.n	8015dc0 <__ieee754_rem_pio2f+0x134>
 8015d96:	6022      	str	r2, [r4, #0]
 8015d98:	ed94 7a00 	vldr	s14, [r4]
 8015d9c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015da0:	2e00      	cmp	r6, #0
 8015da2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015da6:	ed84 0a01 	vstr	s0, [r4, #4]
 8015daa:	da9c      	bge.n	8015ce6 <__ieee754_rem_pio2f+0x5a>
 8015dac:	eeb1 7a47 	vneg.f32	s14, s14
 8015db0:	eeb1 0a40 	vneg.f32	s0, s0
 8015db4:	ed84 7a00 	vstr	s14, [r4]
 8015db8:	ed84 0a01 	vstr	s0, [r4, #4]
 8015dbc:	4240      	negs	r0, r0
 8015dbe:	e792      	b.n	8015ce6 <__ieee754_rem_pio2f+0x5a>
 8015dc0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015dc4:	15eb      	asrs	r3, r5, #23
 8015dc6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015dca:	2d08      	cmp	r5, #8
 8015dcc:	dde3      	ble.n	8015d96 <__ieee754_rem_pio2f+0x10a>
 8015dce:	eddf 7a44 	vldr	s15, [pc, #272]	; 8015ee0 <__ieee754_rem_pio2f+0x254>
 8015dd2:	eef0 6a40 	vmov.f32	s13, s0
 8015dd6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015dda:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015dde:	eea6 0a27 	vfma.f32	s0, s12, s15
 8015de2:	eddf 7a40 	vldr	s15, [pc, #256]	; 8015ee4 <__ieee754_rem_pio2f+0x258>
 8015de6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8015dea:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8015dee:	eef0 7a40 	vmov.f32	s15, s0
 8015df2:	ee15 2a90 	vmov	r2, s11
 8015df6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015dfa:	1a5b      	subs	r3, r3, r1
 8015dfc:	2b19      	cmp	r3, #25
 8015dfe:	dc04      	bgt.n	8015e0a <__ieee754_rem_pio2f+0x17e>
 8015e00:	edc4 5a00 	vstr	s11, [r4]
 8015e04:	eeb0 0a66 	vmov.f32	s0, s13
 8015e08:	e7c6      	b.n	8015d98 <__ieee754_rem_pio2f+0x10c>
 8015e0a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015ef4 <__ieee754_rem_pio2f+0x268>
 8015e0e:	eeb0 0a66 	vmov.f32	s0, s13
 8015e12:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015e16:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015e1a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015ef8 <__ieee754_rem_pio2f+0x26c>
 8015e1e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015e22:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015e26:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015e2a:	ed84 7a00 	vstr	s14, [r4]
 8015e2e:	e7b3      	b.n	8015d98 <__ieee754_rem_pio2f+0x10c>
 8015e30:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015e34:	db06      	blt.n	8015e44 <__ieee754_rem_pio2f+0x1b8>
 8015e36:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015e3a:	edc0 7a01 	vstr	s15, [r0, #4]
 8015e3e:	edc0 7a00 	vstr	s15, [r0]
 8015e42:	e733      	b.n	8015cac <__ieee754_rem_pio2f+0x20>
 8015e44:	15ea      	asrs	r2, r5, #23
 8015e46:	3a86      	subs	r2, #134	; 0x86
 8015e48:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8015e4c:	ee07 3a90 	vmov	s15, r3
 8015e50:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015e54:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015efc <__ieee754_rem_pio2f+0x270>
 8015e58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e60:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015e64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015e6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e74:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015e78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e84:	edcd 7a05 	vstr	s15, [sp, #20]
 8015e88:	d11e      	bne.n	8015ec8 <__ieee754_rem_pio2f+0x23c>
 8015e8a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e92:	bf14      	ite	ne
 8015e94:	2302      	movne	r3, #2
 8015e96:	2301      	moveq	r3, #1
 8015e98:	4919      	ldr	r1, [pc, #100]	; (8015f00 <__ieee754_rem_pio2f+0x274>)
 8015e9a:	9101      	str	r1, [sp, #4]
 8015e9c:	2102      	movs	r1, #2
 8015e9e:	9100      	str	r1, [sp, #0]
 8015ea0:	a803      	add	r0, sp, #12
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	f000 f892 	bl	8015fcc <__kernel_rem_pio2f>
 8015ea8:	2e00      	cmp	r6, #0
 8015eaa:	f6bf af1c 	bge.w	8015ce6 <__ieee754_rem_pio2f+0x5a>
 8015eae:	edd4 7a00 	vldr	s15, [r4]
 8015eb2:	eef1 7a67 	vneg.f32	s15, s15
 8015eb6:	edc4 7a00 	vstr	s15, [r4]
 8015eba:	edd4 7a01 	vldr	s15, [r4, #4]
 8015ebe:	eef1 7a67 	vneg.f32	s15, s15
 8015ec2:	edc4 7a01 	vstr	s15, [r4, #4]
 8015ec6:	e779      	b.n	8015dbc <__ieee754_rem_pio2f+0x130>
 8015ec8:	2303      	movs	r3, #3
 8015eca:	e7e5      	b.n	8015e98 <__ieee754_rem_pio2f+0x20c>
 8015ecc:	3f490fd8 	.word	0x3f490fd8
 8015ed0:	4016cbe3 	.word	0x4016cbe3
 8015ed4:	3fc90f80 	.word	0x3fc90f80
 8015ed8:	3fc90fd0 	.word	0x3fc90fd0
 8015edc:	37354443 	.word	0x37354443
 8015ee0:	37354400 	.word	0x37354400
 8015ee4:	2e85a308 	.word	0x2e85a308
 8015ee8:	43490f80 	.word	0x43490f80
 8015eec:	3f22f984 	.word	0x3f22f984
 8015ef0:	08017110 	.word	0x08017110
 8015ef4:	2e85a300 	.word	0x2e85a300
 8015ef8:	248d3132 	.word	0x248d3132
 8015efc:	43800000 	.word	0x43800000
 8015f00:	08017190 	.word	0x08017190

08015f04 <__ieee754_sqrtf>:
 8015f04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015f08:	4770      	bx	lr
	...

08015f0c <__kernel_cosf>:
 8015f0c:	ee10 3a10 	vmov	r3, s0
 8015f10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015f14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015f18:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015f1c:	da05      	bge.n	8015f2a <__kernel_cosf+0x1e>
 8015f1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015f22:	ee17 2a90 	vmov	r2, s15
 8015f26:	2a00      	cmp	r2, #0
 8015f28:	d03d      	beq.n	8015fa6 <__kernel_cosf+0x9a>
 8015f2a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8015f2e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015fac <__kernel_cosf+0xa0>
 8015f32:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8015fb0 <__kernel_cosf+0xa4>
 8015f36:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8015fb4 <__kernel_cosf+0xa8>
 8015f3a:	4a1f      	ldr	r2, [pc, #124]	; (8015fb8 <__kernel_cosf+0xac>)
 8015f3c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015f40:	4293      	cmp	r3, r2
 8015f42:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015fbc <__kernel_cosf+0xb0>
 8015f46:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015f4a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8015fc0 <__kernel_cosf+0xb4>
 8015f4e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015f52:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015fc4 <__kernel_cosf+0xb8>
 8015f56:	eee7 7a25 	vfma.f32	s15, s14, s11
 8015f5a:	eeb0 7a66 	vmov.f32	s14, s13
 8015f5e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015f62:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8015f66:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8015f6a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8015f6e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8015f72:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8015f76:	dc04      	bgt.n	8015f82 <__kernel_cosf+0x76>
 8015f78:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015f7c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8015f80:	4770      	bx	lr
 8015f82:	4a11      	ldr	r2, [pc, #68]	; (8015fc8 <__kernel_cosf+0xbc>)
 8015f84:	4293      	cmp	r3, r2
 8015f86:	bfda      	itte	le
 8015f88:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8015f8c:	ee06 3a90 	vmovle	s13, r3
 8015f90:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8015f94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015f98:	ee36 0a66 	vsub.f32	s0, s12, s13
 8015f9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015fa0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015fa4:	4770      	bx	lr
 8015fa6:	eeb0 0a46 	vmov.f32	s0, s12
 8015faa:	4770      	bx	lr
 8015fac:	ad47d74e 	.word	0xad47d74e
 8015fb0:	310f74f6 	.word	0x310f74f6
 8015fb4:	3d2aaaab 	.word	0x3d2aaaab
 8015fb8:	3e999999 	.word	0x3e999999
 8015fbc:	b493f27c 	.word	0xb493f27c
 8015fc0:	37d00d01 	.word	0x37d00d01
 8015fc4:	bab60b61 	.word	0xbab60b61
 8015fc8:	3f480000 	.word	0x3f480000

08015fcc <__kernel_rem_pio2f>:
 8015fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd0:	ed2d 8b04 	vpush	{d8-d9}
 8015fd4:	b0d7      	sub	sp, #348	; 0x15c
 8015fd6:	4616      	mov	r6, r2
 8015fd8:	4698      	mov	r8, r3
 8015fda:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015fdc:	4bbb      	ldr	r3, [pc, #748]	; (80162cc <__kernel_rem_pio2f+0x300>)
 8015fde:	9001      	str	r0, [sp, #4]
 8015fe0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8015fe4:	1d33      	adds	r3, r6, #4
 8015fe6:	460d      	mov	r5, r1
 8015fe8:	f108 39ff 	add.w	r9, r8, #4294967295
 8015fec:	db29      	blt.n	8016042 <__kernel_rem_pio2f+0x76>
 8015fee:	1ef1      	subs	r1, r6, #3
 8015ff0:	bf48      	it	mi
 8015ff2:	1d31      	addmi	r1, r6, #4
 8015ff4:	10c9      	asrs	r1, r1, #3
 8015ff6:	1c4c      	adds	r4, r1, #1
 8015ff8:	00e3      	lsls	r3, r4, #3
 8015ffa:	9302      	str	r3, [sp, #8]
 8015ffc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8015ffe:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80162dc <__kernel_rem_pio2f+0x310>
 8016002:	eba1 0009 	sub.w	r0, r1, r9
 8016006:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801600a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801600e:	eb07 0c09 	add.w	ip, r7, r9
 8016012:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016016:	2300      	movs	r3, #0
 8016018:	4563      	cmp	r3, ip
 801601a:	dd14      	ble.n	8016046 <__kernel_rem_pio2f+0x7a>
 801601c:	ab1a      	add	r3, sp, #104	; 0x68
 801601e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016022:	46cc      	mov	ip, r9
 8016024:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016028:	f1c8 0b01 	rsb	fp, r8, #1
 801602c:	eb0b 020c 	add.w	r2, fp, ip
 8016030:	4297      	cmp	r7, r2
 8016032:	db27      	blt.n	8016084 <__kernel_rem_pio2f+0xb8>
 8016034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016038:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80162dc <__kernel_rem_pio2f+0x310>
 801603c:	4618      	mov	r0, r3
 801603e:	2200      	movs	r2, #0
 8016040:	e016      	b.n	8016070 <__kernel_rem_pio2f+0xa4>
 8016042:	2100      	movs	r1, #0
 8016044:	e7d7      	b.n	8015ff6 <__kernel_rem_pio2f+0x2a>
 8016046:	42d8      	cmn	r0, r3
 8016048:	bf5d      	ittte	pl
 801604a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801604e:	ee07 2a90 	vmovpl	s15, r2
 8016052:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016056:	eef0 7a47 	vmovmi.f32	s15, s14
 801605a:	ecea 7a01 	vstmia	sl!, {s15}
 801605e:	3301      	adds	r3, #1
 8016060:	e7da      	b.n	8016018 <__kernel_rem_pio2f+0x4c>
 8016062:	ecfe 6a01 	vldmia	lr!, {s13}
 8016066:	ed90 7a00 	vldr	s14, [r0]
 801606a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801606e:	3201      	adds	r2, #1
 8016070:	454a      	cmp	r2, r9
 8016072:	f1a0 0004 	sub.w	r0, r0, #4
 8016076:	ddf4      	ble.n	8016062 <__kernel_rem_pio2f+0x96>
 8016078:	ecea 7a01 	vstmia	sl!, {s15}
 801607c:	3304      	adds	r3, #4
 801607e:	f10c 0c01 	add.w	ip, ip, #1
 8016082:	e7d3      	b.n	801602c <__kernel_rem_pio2f+0x60>
 8016084:	ab06      	add	r3, sp, #24
 8016086:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801608a:	9304      	str	r3, [sp, #16]
 801608c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801608e:	eddf 8a92 	vldr	s17, [pc, #584]	; 80162d8 <__kernel_rem_pio2f+0x30c>
 8016092:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80162d4 <__kernel_rem_pio2f+0x308>
 8016096:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801609a:	9303      	str	r3, [sp, #12]
 801609c:	46ba      	mov	sl, r7
 801609e:	ab56      	add	r3, sp, #344	; 0x158
 80160a0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80160a4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80160a8:	ab06      	add	r3, sp, #24
 80160aa:	4618      	mov	r0, r3
 80160ac:	4652      	mov	r2, sl
 80160ae:	2a00      	cmp	r2, #0
 80160b0:	dc51      	bgt.n	8016156 <__kernel_rem_pio2f+0x18a>
 80160b2:	4620      	mov	r0, r4
 80160b4:	9305      	str	r3, [sp, #20]
 80160b6:	f000 fe0d 	bl	8016cd4 <scalbnf>
 80160ba:	eeb0 8a40 	vmov.f32	s16, s0
 80160be:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80160c2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80160c6:	f000 fdbd 	bl	8016c44 <floorf>
 80160ca:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80160ce:	eea0 8a67 	vfms.f32	s16, s0, s15
 80160d2:	2c00      	cmp	r4, #0
 80160d4:	9b05      	ldr	r3, [sp, #20]
 80160d6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80160da:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80160de:	edcd 7a00 	vstr	s15, [sp]
 80160e2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80160e6:	dd4b      	ble.n	8016180 <__kernel_rem_pio2f+0x1b4>
 80160e8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80160ec:	aa06      	add	r2, sp, #24
 80160ee:	f1c4 0e08 	rsb	lr, r4, #8
 80160f2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80160f6:	ee17 1a90 	vmov	r1, s15
 80160fa:	fa42 f00e 	asr.w	r0, r2, lr
 80160fe:	4401      	add	r1, r0
 8016100:	9100      	str	r1, [sp, #0]
 8016102:	fa00 f00e 	lsl.w	r0, r0, lr
 8016106:	a906      	add	r1, sp, #24
 8016108:	1a12      	subs	r2, r2, r0
 801610a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801610e:	f1c4 0007 	rsb	r0, r4, #7
 8016112:	fa42 fb00 	asr.w	fp, r2, r0
 8016116:	f1bb 0f00 	cmp.w	fp, #0
 801611a:	dd43      	ble.n	80161a4 <__kernel_rem_pio2f+0x1d8>
 801611c:	9a00      	ldr	r2, [sp, #0]
 801611e:	f04f 0e00 	mov.w	lr, #0
 8016122:	3201      	adds	r2, #1
 8016124:	9200      	str	r2, [sp, #0]
 8016126:	4670      	mov	r0, lr
 8016128:	45f2      	cmp	sl, lr
 801612a:	dc6c      	bgt.n	8016206 <__kernel_rem_pio2f+0x23a>
 801612c:	2c00      	cmp	r4, #0
 801612e:	dd04      	ble.n	801613a <__kernel_rem_pio2f+0x16e>
 8016130:	2c01      	cmp	r4, #1
 8016132:	d079      	beq.n	8016228 <__kernel_rem_pio2f+0x25c>
 8016134:	2c02      	cmp	r4, #2
 8016136:	f000 8082 	beq.w	801623e <__kernel_rem_pio2f+0x272>
 801613a:	f1bb 0f02 	cmp.w	fp, #2
 801613e:	d131      	bne.n	80161a4 <__kernel_rem_pio2f+0x1d8>
 8016140:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016144:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016148:	b360      	cbz	r0, 80161a4 <__kernel_rem_pio2f+0x1d8>
 801614a:	4620      	mov	r0, r4
 801614c:	f000 fdc2 	bl	8016cd4 <scalbnf>
 8016150:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016154:	e026      	b.n	80161a4 <__kernel_rem_pio2f+0x1d8>
 8016156:	ee60 7a28 	vmul.f32	s15, s0, s17
 801615a:	3a01      	subs	r2, #1
 801615c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016160:	a942      	add	r1, sp, #264	; 0x108
 8016162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016166:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801616a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801616e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016172:	eca0 0a01 	vstmia	r0!, {s0}
 8016176:	ed9c 0a00 	vldr	s0, [ip]
 801617a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801617e:	e796      	b.n	80160ae <__kernel_rem_pio2f+0xe2>
 8016180:	d107      	bne.n	8016192 <__kernel_rem_pio2f+0x1c6>
 8016182:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016186:	a906      	add	r1, sp, #24
 8016188:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801618c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016190:	e7c1      	b.n	8016116 <__kernel_rem_pio2f+0x14a>
 8016192:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016196:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801619e:	da2f      	bge.n	8016200 <__kernel_rem_pio2f+0x234>
 80161a0:	f04f 0b00 	mov.w	fp, #0
 80161a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80161a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161ac:	f040 8098 	bne.w	80162e0 <__kernel_rem_pio2f+0x314>
 80161b0:	f10a 33ff 	add.w	r3, sl, #4294967295
 80161b4:	469c      	mov	ip, r3
 80161b6:	2200      	movs	r2, #0
 80161b8:	45bc      	cmp	ip, r7
 80161ba:	da48      	bge.n	801624e <__kernel_rem_pio2f+0x282>
 80161bc:	2a00      	cmp	r2, #0
 80161be:	d05f      	beq.n	8016280 <__kernel_rem_pio2f+0x2b4>
 80161c0:	aa06      	add	r2, sp, #24
 80161c2:	3c08      	subs	r4, #8
 80161c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80161c8:	2900      	cmp	r1, #0
 80161ca:	d07d      	beq.n	80162c8 <__kernel_rem_pio2f+0x2fc>
 80161cc:	4620      	mov	r0, r4
 80161ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80161d2:	9301      	str	r3, [sp, #4]
 80161d4:	f000 fd7e 	bl	8016cd4 <scalbnf>
 80161d8:	9b01      	ldr	r3, [sp, #4]
 80161da:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80162d8 <__kernel_rem_pio2f+0x30c>
 80161de:	4619      	mov	r1, r3
 80161e0:	2900      	cmp	r1, #0
 80161e2:	f280 80af 	bge.w	8016344 <__kernel_rem_pio2f+0x378>
 80161e6:	4618      	mov	r0, r3
 80161e8:	2400      	movs	r4, #0
 80161ea:	2800      	cmp	r0, #0
 80161ec:	f2c0 80d0 	blt.w	8016390 <__kernel_rem_pio2f+0x3c4>
 80161f0:	a942      	add	r1, sp, #264	; 0x108
 80161f2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80161f6:	4a36      	ldr	r2, [pc, #216]	; (80162d0 <__kernel_rem_pio2f+0x304>)
 80161f8:	eddf 7a38 	vldr	s15, [pc, #224]	; 80162dc <__kernel_rem_pio2f+0x310>
 80161fc:	2100      	movs	r1, #0
 80161fe:	e0bb      	b.n	8016378 <__kernel_rem_pio2f+0x3ac>
 8016200:	f04f 0b02 	mov.w	fp, #2
 8016204:	e78a      	b.n	801611c <__kernel_rem_pio2f+0x150>
 8016206:	681a      	ldr	r2, [r3, #0]
 8016208:	b948      	cbnz	r0, 801621e <__kernel_rem_pio2f+0x252>
 801620a:	b11a      	cbz	r2, 8016214 <__kernel_rem_pio2f+0x248>
 801620c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016210:	601a      	str	r2, [r3, #0]
 8016212:	2201      	movs	r2, #1
 8016214:	f10e 0e01 	add.w	lr, lr, #1
 8016218:	3304      	adds	r3, #4
 801621a:	4610      	mov	r0, r2
 801621c:	e784      	b.n	8016128 <__kernel_rem_pio2f+0x15c>
 801621e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016222:	601a      	str	r2, [r3, #0]
 8016224:	4602      	mov	r2, r0
 8016226:	e7f5      	b.n	8016214 <__kernel_rem_pio2f+0x248>
 8016228:	f10a 3cff 	add.w	ip, sl, #4294967295
 801622c:	ab06      	add	r3, sp, #24
 801622e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016236:	aa06      	add	r2, sp, #24
 8016238:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801623c:	e77d      	b.n	801613a <__kernel_rem_pio2f+0x16e>
 801623e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016242:	ab06      	add	r3, sp, #24
 8016244:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801624c:	e7f3      	b.n	8016236 <__kernel_rem_pio2f+0x26a>
 801624e:	a906      	add	r1, sp, #24
 8016250:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016254:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016258:	4302      	orrs	r2, r0
 801625a:	e7ad      	b.n	80161b8 <__kernel_rem_pio2f+0x1ec>
 801625c:	3001      	adds	r0, #1
 801625e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016262:	2a00      	cmp	r2, #0
 8016264:	d0fa      	beq.n	801625c <__kernel_rem_pio2f+0x290>
 8016266:	a91a      	add	r1, sp, #104	; 0x68
 8016268:	eb0a 0208 	add.w	r2, sl, r8
 801626c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016270:	f10a 0301 	add.w	r3, sl, #1
 8016274:	eb0a 0100 	add.w	r1, sl, r0
 8016278:	4299      	cmp	r1, r3
 801627a:	da04      	bge.n	8016286 <__kernel_rem_pio2f+0x2ba>
 801627c:	468a      	mov	sl, r1
 801627e:	e70e      	b.n	801609e <__kernel_rem_pio2f+0xd2>
 8016280:	9b04      	ldr	r3, [sp, #16]
 8016282:	2001      	movs	r0, #1
 8016284:	e7eb      	b.n	801625e <__kernel_rem_pio2f+0x292>
 8016286:	9803      	ldr	r0, [sp, #12]
 8016288:	f8dd c004 	ldr.w	ip, [sp, #4]
 801628c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016290:	9000      	str	r0, [sp, #0]
 8016292:	ee07 0a90 	vmov	s15, r0
 8016296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801629a:	2000      	movs	r0, #0
 801629c:	ece2 7a01 	vstmia	r2!, {s15}
 80162a0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80162dc <__kernel_rem_pio2f+0x310>
 80162a4:	4696      	mov	lr, r2
 80162a6:	4548      	cmp	r0, r9
 80162a8:	dd06      	ble.n	80162b8 <__kernel_rem_pio2f+0x2ec>
 80162aa:	a842      	add	r0, sp, #264	; 0x108
 80162ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80162b0:	edc0 7a00 	vstr	s15, [r0]
 80162b4:	3301      	adds	r3, #1
 80162b6:	e7df      	b.n	8016278 <__kernel_rem_pio2f+0x2ac>
 80162b8:	ecfc 6a01 	vldmia	ip!, {s13}
 80162bc:	ed3e 7a01 	vldmdb	lr!, {s14}
 80162c0:	3001      	adds	r0, #1
 80162c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80162c6:	e7ee      	b.n	80162a6 <__kernel_rem_pio2f+0x2da>
 80162c8:	3b01      	subs	r3, #1
 80162ca:	e779      	b.n	80161c0 <__kernel_rem_pio2f+0x1f4>
 80162cc:	080174d4 	.word	0x080174d4
 80162d0:	080174a8 	.word	0x080174a8
 80162d4:	43800000 	.word	0x43800000
 80162d8:	3b800000 	.word	0x3b800000
 80162dc:	00000000 	.word	0x00000000
 80162e0:	9b02      	ldr	r3, [sp, #8]
 80162e2:	eeb0 0a48 	vmov.f32	s0, s16
 80162e6:	1b98      	subs	r0, r3, r6
 80162e8:	f000 fcf4 	bl	8016cd4 <scalbnf>
 80162ec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80162d4 <__kernel_rem_pio2f+0x308>
 80162f0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80162f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162f8:	db1b      	blt.n	8016332 <__kernel_rem_pio2f+0x366>
 80162fa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80162d8 <__kernel_rem_pio2f+0x30c>
 80162fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016302:	aa06      	add	r2, sp, #24
 8016304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016308:	a906      	add	r1, sp, #24
 801630a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801630e:	3408      	adds	r4, #8
 8016310:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016318:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801631c:	ee10 3a10 	vmov	r3, s0
 8016320:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016324:	ee17 2a90 	vmov	r2, s15
 8016328:	f10a 0301 	add.w	r3, sl, #1
 801632c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016330:	e74c      	b.n	80161cc <__kernel_rem_pio2f+0x200>
 8016332:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016336:	aa06      	add	r2, sp, #24
 8016338:	ee10 3a10 	vmov	r3, s0
 801633c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016340:	4653      	mov	r3, sl
 8016342:	e743      	b.n	80161cc <__kernel_rem_pio2f+0x200>
 8016344:	aa42      	add	r2, sp, #264	; 0x108
 8016346:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801634a:	aa06      	add	r2, sp, #24
 801634c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016350:	9201      	str	r2, [sp, #4]
 8016352:	ee07 2a90 	vmov	s15, r2
 8016356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801635a:	3901      	subs	r1, #1
 801635c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016360:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016364:	edc0 7a00 	vstr	s15, [r0]
 8016368:	e73a      	b.n	80161e0 <__kernel_rem_pio2f+0x214>
 801636a:	ecf2 6a01 	vldmia	r2!, {s13}
 801636e:	ecb6 7a01 	vldmia	r6!, {s14}
 8016372:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016376:	3101      	adds	r1, #1
 8016378:	42b9      	cmp	r1, r7
 801637a:	dc01      	bgt.n	8016380 <__kernel_rem_pio2f+0x3b4>
 801637c:	428c      	cmp	r4, r1
 801637e:	daf4      	bge.n	801636a <__kernel_rem_pio2f+0x39e>
 8016380:	aa56      	add	r2, sp, #344	; 0x158
 8016382:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016386:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801638a:	3801      	subs	r0, #1
 801638c:	3401      	adds	r4, #1
 801638e:	e72c      	b.n	80161ea <__kernel_rem_pio2f+0x21e>
 8016390:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016392:	2a02      	cmp	r2, #2
 8016394:	dc0a      	bgt.n	80163ac <__kernel_rem_pio2f+0x3e0>
 8016396:	2a00      	cmp	r2, #0
 8016398:	dc61      	bgt.n	801645e <__kernel_rem_pio2f+0x492>
 801639a:	d03c      	beq.n	8016416 <__kernel_rem_pio2f+0x44a>
 801639c:	9b00      	ldr	r3, [sp, #0]
 801639e:	f003 0007 	and.w	r0, r3, #7
 80163a2:	b057      	add	sp, #348	; 0x15c
 80163a4:	ecbd 8b04 	vpop	{d8-d9}
 80163a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80163ae:	2a03      	cmp	r2, #3
 80163b0:	d1f4      	bne.n	801639c <__kernel_rem_pio2f+0x3d0>
 80163b2:	aa2e      	add	r2, sp, #184	; 0xb8
 80163b4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80163b8:	4608      	mov	r0, r1
 80163ba:	461c      	mov	r4, r3
 80163bc:	2c00      	cmp	r4, #0
 80163be:	f1a0 0004 	sub.w	r0, r0, #4
 80163c2:	dc59      	bgt.n	8016478 <__kernel_rem_pio2f+0x4ac>
 80163c4:	4618      	mov	r0, r3
 80163c6:	2801      	cmp	r0, #1
 80163c8:	f1a1 0104 	sub.w	r1, r1, #4
 80163cc:	dc64      	bgt.n	8016498 <__kernel_rem_pio2f+0x4cc>
 80163ce:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80162dc <__kernel_rem_pio2f+0x310>
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	dc70      	bgt.n	80164b8 <__kernel_rem_pio2f+0x4ec>
 80163d6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80163da:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80163de:	f1bb 0f00 	cmp.w	fp, #0
 80163e2:	d172      	bne.n	80164ca <__kernel_rem_pio2f+0x4fe>
 80163e4:	edc5 6a00 	vstr	s13, [r5]
 80163e8:	ed85 7a01 	vstr	s14, [r5, #4]
 80163ec:	edc5 7a02 	vstr	s15, [r5, #8]
 80163f0:	e7d4      	b.n	801639c <__kernel_rem_pio2f+0x3d0>
 80163f2:	aa2e      	add	r2, sp, #184	; 0xb8
 80163f4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80163f8:	ed91 7a00 	vldr	s14, [r1]
 80163fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016400:	3b01      	subs	r3, #1
 8016402:	2b00      	cmp	r3, #0
 8016404:	daf5      	bge.n	80163f2 <__kernel_rem_pio2f+0x426>
 8016406:	f1bb 0f00 	cmp.w	fp, #0
 801640a:	d001      	beq.n	8016410 <__kernel_rem_pio2f+0x444>
 801640c:	eef1 7a67 	vneg.f32	s15, s15
 8016410:	edc5 7a00 	vstr	s15, [r5]
 8016414:	e7c2      	b.n	801639c <__kernel_rem_pio2f+0x3d0>
 8016416:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80162dc <__kernel_rem_pio2f+0x310>
 801641a:	e7f2      	b.n	8016402 <__kernel_rem_pio2f+0x436>
 801641c:	aa2e      	add	r2, sp, #184	; 0xb8
 801641e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016422:	edd0 7a00 	vldr	s15, [r0]
 8016426:	ee37 7a27 	vadd.f32	s14, s14, s15
 801642a:	3901      	subs	r1, #1
 801642c:	2900      	cmp	r1, #0
 801642e:	daf5      	bge.n	801641c <__kernel_rem_pio2f+0x450>
 8016430:	f1bb 0f00 	cmp.w	fp, #0
 8016434:	d017      	beq.n	8016466 <__kernel_rem_pio2f+0x49a>
 8016436:	eef1 7a47 	vneg.f32	s15, s14
 801643a:	edc5 7a00 	vstr	s15, [r5]
 801643e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016446:	a82f      	add	r0, sp, #188	; 0xbc
 8016448:	2101      	movs	r1, #1
 801644a:	428b      	cmp	r3, r1
 801644c:	da0e      	bge.n	801646c <__kernel_rem_pio2f+0x4a0>
 801644e:	f1bb 0f00 	cmp.w	fp, #0
 8016452:	d001      	beq.n	8016458 <__kernel_rem_pio2f+0x48c>
 8016454:	eef1 7a67 	vneg.f32	s15, s15
 8016458:	edc5 7a01 	vstr	s15, [r5, #4]
 801645c:	e79e      	b.n	801639c <__kernel_rem_pio2f+0x3d0>
 801645e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80162dc <__kernel_rem_pio2f+0x310>
 8016462:	4619      	mov	r1, r3
 8016464:	e7e2      	b.n	801642c <__kernel_rem_pio2f+0x460>
 8016466:	eef0 7a47 	vmov.f32	s15, s14
 801646a:	e7e6      	b.n	801643a <__kernel_rem_pio2f+0x46e>
 801646c:	ecb0 7a01 	vldmia	r0!, {s14}
 8016470:	3101      	adds	r1, #1
 8016472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016476:	e7e8      	b.n	801644a <__kernel_rem_pio2f+0x47e>
 8016478:	edd0 7a00 	vldr	s15, [r0]
 801647c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016480:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016484:	3c01      	subs	r4, #1
 8016486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801648a:	ed80 7a00 	vstr	s14, [r0]
 801648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016492:	edc0 7a01 	vstr	s15, [r0, #4]
 8016496:	e791      	b.n	80163bc <__kernel_rem_pio2f+0x3f0>
 8016498:	edd1 7a00 	vldr	s15, [r1]
 801649c:	edd1 6a01 	vldr	s13, [r1, #4]
 80164a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80164a4:	3801      	subs	r0, #1
 80164a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80164aa:	ed81 7a00 	vstr	s14, [r1]
 80164ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80164b2:	edc1 7a01 	vstr	s15, [r1, #4]
 80164b6:	e786      	b.n	80163c6 <__kernel_rem_pio2f+0x3fa>
 80164b8:	aa2e      	add	r2, sp, #184	; 0xb8
 80164ba:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80164be:	ed91 7a00 	vldr	s14, [r1]
 80164c2:	3b01      	subs	r3, #1
 80164c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164c8:	e783      	b.n	80163d2 <__kernel_rem_pio2f+0x406>
 80164ca:	eef1 6a66 	vneg.f32	s13, s13
 80164ce:	eeb1 7a47 	vneg.f32	s14, s14
 80164d2:	edc5 6a00 	vstr	s13, [r5]
 80164d6:	ed85 7a01 	vstr	s14, [r5, #4]
 80164da:	eef1 7a67 	vneg.f32	s15, s15
 80164de:	e785      	b.n	80163ec <__kernel_rem_pio2f+0x420>

080164e0 <__kernel_sinf>:
 80164e0:	ee10 3a10 	vmov	r3, s0
 80164e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80164e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80164ec:	da04      	bge.n	80164f8 <__kernel_sinf+0x18>
 80164ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80164f2:	ee17 3a90 	vmov	r3, s15
 80164f6:	b35b      	cbz	r3, 8016550 <__kernel_sinf+0x70>
 80164f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80164fc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016554 <__kernel_sinf+0x74>
 8016500:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016558 <__kernel_sinf+0x78>
 8016504:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016508:	eddf 7a14 	vldr	s15, [pc, #80]	; 801655c <__kernel_sinf+0x7c>
 801650c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016510:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016560 <__kernel_sinf+0x80>
 8016514:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016518:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016564 <__kernel_sinf+0x84>
 801651c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016520:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016524:	b930      	cbnz	r0, 8016534 <__kernel_sinf+0x54>
 8016526:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016568 <__kernel_sinf+0x88>
 801652a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801652e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016532:	4770      	bx	lr
 8016534:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016538:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801653c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016540:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016544:	eddf 7a09 	vldr	s15, [pc, #36]	; 801656c <__kernel_sinf+0x8c>
 8016548:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801654c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016550:	4770      	bx	lr
 8016552:	bf00      	nop
 8016554:	2f2ec9d3 	.word	0x2f2ec9d3
 8016558:	b2d72f34 	.word	0xb2d72f34
 801655c:	3638ef1b 	.word	0x3638ef1b
 8016560:	b9500d01 	.word	0xb9500d01
 8016564:	3c088889 	.word	0x3c088889
 8016568:	be2aaaab 	.word	0xbe2aaaab
 801656c:	3e2aaaab 	.word	0x3e2aaaab

08016570 <__kernel_tanf>:
 8016570:	b508      	push	{r3, lr}
 8016572:	ee10 3a10 	vmov	r3, s0
 8016576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801657a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801657e:	eef0 7a40 	vmov.f32	s15, s0
 8016582:	da17      	bge.n	80165b4 <__kernel_tanf+0x44>
 8016584:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016588:	ee17 1a10 	vmov	r1, s14
 801658c:	bb41      	cbnz	r1, 80165e0 <__kernel_tanf+0x70>
 801658e:	1c43      	adds	r3, r0, #1
 8016590:	4313      	orrs	r3, r2
 8016592:	d108      	bne.n	80165a6 <__kernel_tanf+0x36>
 8016594:	f000 fb4e 	bl	8016c34 <fabsf>
 8016598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801659c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80165a0:	eeb0 0a67 	vmov.f32	s0, s15
 80165a4:	bd08      	pop	{r3, pc}
 80165a6:	2801      	cmp	r0, #1
 80165a8:	d0fa      	beq.n	80165a0 <__kernel_tanf+0x30>
 80165aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80165ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80165b2:	e7f5      	b.n	80165a0 <__kernel_tanf+0x30>
 80165b4:	494d      	ldr	r1, [pc, #308]	; (80166ec <__kernel_tanf+0x17c>)
 80165b6:	428a      	cmp	r2, r1
 80165b8:	db12      	blt.n	80165e0 <__kernel_tanf+0x70>
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	bfb8      	it	lt
 80165be:	eef1 7a40 	vneglt.f32	s15, s0
 80165c2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80166f0 <__kernel_tanf+0x180>
 80165c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80165ca:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80166f4 <__kernel_tanf+0x184>
 80165ce:	bfb8      	it	lt
 80165d0:	eef1 0a60 	vneglt.f32	s1, s1
 80165d4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80165d8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80165dc:	eddf 0a46 	vldr	s1, [pc, #280]	; 80166f8 <__kernel_tanf+0x188>
 80165e0:	eddf 5a46 	vldr	s11, [pc, #280]	; 80166fc <__kernel_tanf+0x18c>
 80165e4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016700 <__kernel_tanf+0x190>
 80165e8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016704 <__kernel_tanf+0x194>
 80165ec:	493f      	ldr	r1, [pc, #252]	; (80166ec <__kernel_tanf+0x17c>)
 80165ee:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80165f2:	428a      	cmp	r2, r1
 80165f4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80165f8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80165fc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016708 <__kernel_tanf+0x198>
 8016600:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016604:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801670c <__kernel_tanf+0x19c>
 8016608:	eea5 6a87 	vfma.f32	s12, s11, s14
 801660c:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016710 <__kernel_tanf+0x1a0>
 8016610:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016614:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8016714 <__kernel_tanf+0x1a4>
 8016618:	eea5 6a87 	vfma.f32	s12, s11, s14
 801661c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016718 <__kernel_tanf+0x1a8>
 8016620:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016624:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801671c <__kernel_tanf+0x1ac>
 8016628:	eea5 5a87 	vfma.f32	s10, s11, s14
 801662c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8016720 <__kernel_tanf+0x1b0>
 8016630:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016634:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016724 <__kernel_tanf+0x1b4>
 8016638:	eea5 5a87 	vfma.f32	s10, s11, s14
 801663c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016728 <__kernel_tanf+0x1b8>
 8016640:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016644:	eeb0 7a65 	vmov.f32	s14, s11
 8016648:	eea7 6a26 	vfma.f32	s12, s14, s13
 801664c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016650:	eeb0 7a46 	vmov.f32	s14, s12
 8016654:	eeb0 6a60 	vmov.f32	s12, s1
 8016658:	eea7 6a25 	vfma.f32	s12, s14, s11
 801665c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801672c <__kernel_tanf+0x1bc>
 8016660:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016664:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016668:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801666c:	db1d      	blt.n	80166aa <__kernel_tanf+0x13a>
 801666e:	ee06 0a90 	vmov	s13, r0
 8016672:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016676:	ee27 6a07 	vmul.f32	s12, s14, s14
 801667a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801667e:	179b      	asrs	r3, r3, #30
 8016680:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016684:	f003 0302 	and.w	r3, r3, #2
 8016688:	f1c3 0301 	rsb	r3, r3, #1
 801668c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016690:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016694:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016698:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801669c:	ee07 3a90 	vmov	s15, r3
 80166a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166a4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80166a8:	e77a      	b.n	80165a0 <__kernel_tanf+0x30>
 80166aa:	2801      	cmp	r0, #1
 80166ac:	d01b      	beq.n	80166e6 <__kernel_tanf+0x176>
 80166ae:	4b20      	ldr	r3, [pc, #128]	; (8016730 <__kernel_tanf+0x1c0>)
 80166b0:	ee17 2a10 	vmov	r2, s14
 80166b4:	401a      	ands	r2, r3
 80166b6:	ee06 2a10 	vmov	s12, r2
 80166ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80166be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80166c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80166c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80166ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166ce:	ee16 2a90 	vmov	r2, s13
 80166d2:	4013      	ands	r3, r2
 80166d4:	ee07 3a90 	vmov	s15, r3
 80166d8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80166dc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80166e0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80166e4:	e75c      	b.n	80165a0 <__kernel_tanf+0x30>
 80166e6:	eef0 7a47 	vmov.f32	s15, s14
 80166ea:	e759      	b.n	80165a0 <__kernel_tanf+0x30>
 80166ec:	3f2ca140 	.word	0x3f2ca140
 80166f0:	3f490fda 	.word	0x3f490fda
 80166f4:	33222168 	.word	0x33222168
 80166f8:	00000000 	.word	0x00000000
 80166fc:	b79bae5f 	.word	0xb79bae5f
 8016700:	38a3f445 	.word	0x38a3f445
 8016704:	37d95384 	.word	0x37d95384
 8016708:	3a1a26c8 	.word	0x3a1a26c8
 801670c:	3b6b6916 	.word	0x3b6b6916
 8016710:	3cb327a4 	.word	0x3cb327a4
 8016714:	3e088889 	.word	0x3e088889
 8016718:	3895c07a 	.word	0x3895c07a
 801671c:	398137b9 	.word	0x398137b9
 8016720:	3abede48 	.word	0x3abede48
 8016724:	3c11371f 	.word	0x3c11371f
 8016728:	3d5d0dd1 	.word	0x3d5d0dd1
 801672c:	3eaaaaab 	.word	0x3eaaaaab
 8016730:	fffff000 	.word	0xfffff000
 8016734:	00000000 	.word	0x00000000

08016738 <atan>:
 8016738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801673c:	ec55 4b10 	vmov	r4, r5, d0
 8016740:	4bc3      	ldr	r3, [pc, #780]	; (8016a50 <atan+0x318>)
 8016742:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016746:	429e      	cmp	r6, r3
 8016748:	46ab      	mov	fp, r5
 801674a:	dd18      	ble.n	801677e <atan+0x46>
 801674c:	4bc1      	ldr	r3, [pc, #772]	; (8016a54 <atan+0x31c>)
 801674e:	429e      	cmp	r6, r3
 8016750:	dc01      	bgt.n	8016756 <atan+0x1e>
 8016752:	d109      	bne.n	8016768 <atan+0x30>
 8016754:	b144      	cbz	r4, 8016768 <atan+0x30>
 8016756:	4622      	mov	r2, r4
 8016758:	462b      	mov	r3, r5
 801675a:	4620      	mov	r0, r4
 801675c:	4629      	mov	r1, r5
 801675e:	f7e9 fd39 	bl	80001d4 <__adddf3>
 8016762:	4604      	mov	r4, r0
 8016764:	460d      	mov	r5, r1
 8016766:	e006      	b.n	8016776 <atan+0x3e>
 8016768:	f1bb 0f00 	cmp.w	fp, #0
 801676c:	f300 8131 	bgt.w	80169d2 <atan+0x29a>
 8016770:	a59b      	add	r5, pc, #620	; (adr r5, 80169e0 <atan+0x2a8>)
 8016772:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016776:	ec45 4b10 	vmov	d0, r4, r5
 801677a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801677e:	4bb6      	ldr	r3, [pc, #728]	; (8016a58 <atan+0x320>)
 8016780:	429e      	cmp	r6, r3
 8016782:	dc14      	bgt.n	80167ae <atan+0x76>
 8016784:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016788:	429e      	cmp	r6, r3
 801678a:	dc0d      	bgt.n	80167a8 <atan+0x70>
 801678c:	a396      	add	r3, pc, #600	; (adr r3, 80169e8 <atan+0x2b0>)
 801678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016792:	ee10 0a10 	vmov	r0, s0
 8016796:	4629      	mov	r1, r5
 8016798:	f7e9 fd1c 	bl	80001d4 <__adddf3>
 801679c:	4baf      	ldr	r3, [pc, #700]	; (8016a5c <atan+0x324>)
 801679e:	2200      	movs	r2, #0
 80167a0:	f7ea f95e 	bl	8000a60 <__aeabi_dcmpgt>
 80167a4:	2800      	cmp	r0, #0
 80167a6:	d1e6      	bne.n	8016776 <atan+0x3e>
 80167a8:	f04f 3aff 	mov.w	sl, #4294967295
 80167ac:	e02b      	b.n	8016806 <atan+0xce>
 80167ae:	f000 f963 	bl	8016a78 <fabs>
 80167b2:	4bab      	ldr	r3, [pc, #684]	; (8016a60 <atan+0x328>)
 80167b4:	429e      	cmp	r6, r3
 80167b6:	ec55 4b10 	vmov	r4, r5, d0
 80167ba:	f300 80bf 	bgt.w	801693c <atan+0x204>
 80167be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80167c2:	429e      	cmp	r6, r3
 80167c4:	f300 80a0 	bgt.w	8016908 <atan+0x1d0>
 80167c8:	ee10 2a10 	vmov	r2, s0
 80167cc:	ee10 0a10 	vmov	r0, s0
 80167d0:	462b      	mov	r3, r5
 80167d2:	4629      	mov	r1, r5
 80167d4:	f7e9 fcfe 	bl	80001d4 <__adddf3>
 80167d8:	4ba0      	ldr	r3, [pc, #640]	; (8016a5c <atan+0x324>)
 80167da:	2200      	movs	r2, #0
 80167dc:	f7e9 fcf8 	bl	80001d0 <__aeabi_dsub>
 80167e0:	2200      	movs	r2, #0
 80167e2:	4606      	mov	r6, r0
 80167e4:	460f      	mov	r7, r1
 80167e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80167ea:	4620      	mov	r0, r4
 80167ec:	4629      	mov	r1, r5
 80167ee:	f7e9 fcf1 	bl	80001d4 <__adddf3>
 80167f2:	4602      	mov	r2, r0
 80167f4:	460b      	mov	r3, r1
 80167f6:	4630      	mov	r0, r6
 80167f8:	4639      	mov	r1, r7
 80167fa:	f7e9 ffcb 	bl	8000794 <__aeabi_ddiv>
 80167fe:	f04f 0a00 	mov.w	sl, #0
 8016802:	4604      	mov	r4, r0
 8016804:	460d      	mov	r5, r1
 8016806:	4622      	mov	r2, r4
 8016808:	462b      	mov	r3, r5
 801680a:	4620      	mov	r0, r4
 801680c:	4629      	mov	r1, r5
 801680e:	f7e9 fe97 	bl	8000540 <__aeabi_dmul>
 8016812:	4602      	mov	r2, r0
 8016814:	460b      	mov	r3, r1
 8016816:	4680      	mov	r8, r0
 8016818:	4689      	mov	r9, r1
 801681a:	f7e9 fe91 	bl	8000540 <__aeabi_dmul>
 801681e:	a374      	add	r3, pc, #464	; (adr r3, 80169f0 <atan+0x2b8>)
 8016820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016824:	4606      	mov	r6, r0
 8016826:	460f      	mov	r7, r1
 8016828:	f7e9 fe8a 	bl	8000540 <__aeabi_dmul>
 801682c:	a372      	add	r3, pc, #456	; (adr r3, 80169f8 <atan+0x2c0>)
 801682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016832:	f7e9 fccf 	bl	80001d4 <__adddf3>
 8016836:	4632      	mov	r2, r6
 8016838:	463b      	mov	r3, r7
 801683a:	f7e9 fe81 	bl	8000540 <__aeabi_dmul>
 801683e:	a370      	add	r3, pc, #448	; (adr r3, 8016a00 <atan+0x2c8>)
 8016840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016844:	f7e9 fcc6 	bl	80001d4 <__adddf3>
 8016848:	4632      	mov	r2, r6
 801684a:	463b      	mov	r3, r7
 801684c:	f7e9 fe78 	bl	8000540 <__aeabi_dmul>
 8016850:	a36d      	add	r3, pc, #436	; (adr r3, 8016a08 <atan+0x2d0>)
 8016852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016856:	f7e9 fcbd 	bl	80001d4 <__adddf3>
 801685a:	4632      	mov	r2, r6
 801685c:	463b      	mov	r3, r7
 801685e:	f7e9 fe6f 	bl	8000540 <__aeabi_dmul>
 8016862:	a36b      	add	r3, pc, #428	; (adr r3, 8016a10 <atan+0x2d8>)
 8016864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016868:	f7e9 fcb4 	bl	80001d4 <__adddf3>
 801686c:	4632      	mov	r2, r6
 801686e:	463b      	mov	r3, r7
 8016870:	f7e9 fe66 	bl	8000540 <__aeabi_dmul>
 8016874:	a368      	add	r3, pc, #416	; (adr r3, 8016a18 <atan+0x2e0>)
 8016876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687a:	f7e9 fcab 	bl	80001d4 <__adddf3>
 801687e:	4642      	mov	r2, r8
 8016880:	464b      	mov	r3, r9
 8016882:	f7e9 fe5d 	bl	8000540 <__aeabi_dmul>
 8016886:	a366      	add	r3, pc, #408	; (adr r3, 8016a20 <atan+0x2e8>)
 8016888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801688c:	4680      	mov	r8, r0
 801688e:	4689      	mov	r9, r1
 8016890:	4630      	mov	r0, r6
 8016892:	4639      	mov	r1, r7
 8016894:	f7e9 fe54 	bl	8000540 <__aeabi_dmul>
 8016898:	a363      	add	r3, pc, #396	; (adr r3, 8016a28 <atan+0x2f0>)
 801689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689e:	f7e9 fc97 	bl	80001d0 <__aeabi_dsub>
 80168a2:	4632      	mov	r2, r6
 80168a4:	463b      	mov	r3, r7
 80168a6:	f7e9 fe4b 	bl	8000540 <__aeabi_dmul>
 80168aa:	a361      	add	r3, pc, #388	; (adr r3, 8016a30 <atan+0x2f8>)
 80168ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168b0:	f7e9 fc8e 	bl	80001d0 <__aeabi_dsub>
 80168b4:	4632      	mov	r2, r6
 80168b6:	463b      	mov	r3, r7
 80168b8:	f7e9 fe42 	bl	8000540 <__aeabi_dmul>
 80168bc:	a35e      	add	r3, pc, #376	; (adr r3, 8016a38 <atan+0x300>)
 80168be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c2:	f7e9 fc85 	bl	80001d0 <__aeabi_dsub>
 80168c6:	4632      	mov	r2, r6
 80168c8:	463b      	mov	r3, r7
 80168ca:	f7e9 fe39 	bl	8000540 <__aeabi_dmul>
 80168ce:	a35c      	add	r3, pc, #368	; (adr r3, 8016a40 <atan+0x308>)
 80168d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168d4:	f7e9 fc7c 	bl	80001d0 <__aeabi_dsub>
 80168d8:	4632      	mov	r2, r6
 80168da:	463b      	mov	r3, r7
 80168dc:	f7e9 fe30 	bl	8000540 <__aeabi_dmul>
 80168e0:	4602      	mov	r2, r0
 80168e2:	460b      	mov	r3, r1
 80168e4:	4640      	mov	r0, r8
 80168e6:	4649      	mov	r1, r9
 80168e8:	f7e9 fc74 	bl	80001d4 <__adddf3>
 80168ec:	4622      	mov	r2, r4
 80168ee:	462b      	mov	r3, r5
 80168f0:	f7e9 fe26 	bl	8000540 <__aeabi_dmul>
 80168f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80168f8:	4602      	mov	r2, r0
 80168fa:	460b      	mov	r3, r1
 80168fc:	d14b      	bne.n	8016996 <atan+0x25e>
 80168fe:	4620      	mov	r0, r4
 8016900:	4629      	mov	r1, r5
 8016902:	f7e9 fc65 	bl	80001d0 <__aeabi_dsub>
 8016906:	e72c      	b.n	8016762 <atan+0x2a>
 8016908:	ee10 0a10 	vmov	r0, s0
 801690c:	4b53      	ldr	r3, [pc, #332]	; (8016a5c <atan+0x324>)
 801690e:	2200      	movs	r2, #0
 8016910:	4629      	mov	r1, r5
 8016912:	f7e9 fc5d 	bl	80001d0 <__aeabi_dsub>
 8016916:	4b51      	ldr	r3, [pc, #324]	; (8016a5c <atan+0x324>)
 8016918:	4606      	mov	r6, r0
 801691a:	460f      	mov	r7, r1
 801691c:	2200      	movs	r2, #0
 801691e:	4620      	mov	r0, r4
 8016920:	4629      	mov	r1, r5
 8016922:	f7e9 fc57 	bl	80001d4 <__adddf3>
 8016926:	4602      	mov	r2, r0
 8016928:	460b      	mov	r3, r1
 801692a:	4630      	mov	r0, r6
 801692c:	4639      	mov	r1, r7
 801692e:	f7e9 ff31 	bl	8000794 <__aeabi_ddiv>
 8016932:	f04f 0a01 	mov.w	sl, #1
 8016936:	4604      	mov	r4, r0
 8016938:	460d      	mov	r5, r1
 801693a:	e764      	b.n	8016806 <atan+0xce>
 801693c:	4b49      	ldr	r3, [pc, #292]	; (8016a64 <atan+0x32c>)
 801693e:	429e      	cmp	r6, r3
 8016940:	da1d      	bge.n	801697e <atan+0x246>
 8016942:	ee10 0a10 	vmov	r0, s0
 8016946:	4b48      	ldr	r3, [pc, #288]	; (8016a68 <atan+0x330>)
 8016948:	2200      	movs	r2, #0
 801694a:	4629      	mov	r1, r5
 801694c:	f7e9 fc40 	bl	80001d0 <__aeabi_dsub>
 8016950:	4b45      	ldr	r3, [pc, #276]	; (8016a68 <atan+0x330>)
 8016952:	4606      	mov	r6, r0
 8016954:	460f      	mov	r7, r1
 8016956:	2200      	movs	r2, #0
 8016958:	4620      	mov	r0, r4
 801695a:	4629      	mov	r1, r5
 801695c:	f7e9 fdf0 	bl	8000540 <__aeabi_dmul>
 8016960:	4b3e      	ldr	r3, [pc, #248]	; (8016a5c <atan+0x324>)
 8016962:	2200      	movs	r2, #0
 8016964:	f7e9 fc36 	bl	80001d4 <__adddf3>
 8016968:	4602      	mov	r2, r0
 801696a:	460b      	mov	r3, r1
 801696c:	4630      	mov	r0, r6
 801696e:	4639      	mov	r1, r7
 8016970:	f7e9 ff10 	bl	8000794 <__aeabi_ddiv>
 8016974:	f04f 0a02 	mov.w	sl, #2
 8016978:	4604      	mov	r4, r0
 801697a:	460d      	mov	r5, r1
 801697c:	e743      	b.n	8016806 <atan+0xce>
 801697e:	462b      	mov	r3, r5
 8016980:	ee10 2a10 	vmov	r2, s0
 8016984:	4939      	ldr	r1, [pc, #228]	; (8016a6c <atan+0x334>)
 8016986:	2000      	movs	r0, #0
 8016988:	f7e9 ff04 	bl	8000794 <__aeabi_ddiv>
 801698c:	f04f 0a03 	mov.w	sl, #3
 8016990:	4604      	mov	r4, r0
 8016992:	460d      	mov	r5, r1
 8016994:	e737      	b.n	8016806 <atan+0xce>
 8016996:	4b36      	ldr	r3, [pc, #216]	; (8016a70 <atan+0x338>)
 8016998:	4e36      	ldr	r6, [pc, #216]	; (8016a74 <atan+0x33c>)
 801699a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801699e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80169a2:	e9da 2300 	ldrd	r2, r3, [sl]
 80169a6:	f7e9 fc13 	bl	80001d0 <__aeabi_dsub>
 80169aa:	4622      	mov	r2, r4
 80169ac:	462b      	mov	r3, r5
 80169ae:	f7e9 fc0f 	bl	80001d0 <__aeabi_dsub>
 80169b2:	4602      	mov	r2, r0
 80169b4:	460b      	mov	r3, r1
 80169b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80169ba:	f7e9 fc09 	bl	80001d0 <__aeabi_dsub>
 80169be:	f1bb 0f00 	cmp.w	fp, #0
 80169c2:	4604      	mov	r4, r0
 80169c4:	460d      	mov	r5, r1
 80169c6:	f6bf aed6 	bge.w	8016776 <atan+0x3e>
 80169ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80169ce:	461d      	mov	r5, r3
 80169d0:	e6d1      	b.n	8016776 <atan+0x3e>
 80169d2:	a51d      	add	r5, pc, #116	; (adr r5, 8016a48 <atan+0x310>)
 80169d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80169d8:	e6cd      	b.n	8016776 <atan+0x3e>
 80169da:	bf00      	nop
 80169dc:	f3af 8000 	nop.w
 80169e0:	54442d18 	.word	0x54442d18
 80169e4:	bff921fb 	.word	0xbff921fb
 80169e8:	8800759c 	.word	0x8800759c
 80169ec:	7e37e43c 	.word	0x7e37e43c
 80169f0:	e322da11 	.word	0xe322da11
 80169f4:	3f90ad3a 	.word	0x3f90ad3a
 80169f8:	24760deb 	.word	0x24760deb
 80169fc:	3fa97b4b 	.word	0x3fa97b4b
 8016a00:	a0d03d51 	.word	0xa0d03d51
 8016a04:	3fb10d66 	.word	0x3fb10d66
 8016a08:	c54c206e 	.word	0xc54c206e
 8016a0c:	3fb745cd 	.word	0x3fb745cd
 8016a10:	920083ff 	.word	0x920083ff
 8016a14:	3fc24924 	.word	0x3fc24924
 8016a18:	5555550d 	.word	0x5555550d
 8016a1c:	3fd55555 	.word	0x3fd55555
 8016a20:	2c6a6c2f 	.word	0x2c6a6c2f
 8016a24:	bfa2b444 	.word	0xbfa2b444
 8016a28:	52defd9a 	.word	0x52defd9a
 8016a2c:	3fadde2d 	.word	0x3fadde2d
 8016a30:	af749a6d 	.word	0xaf749a6d
 8016a34:	3fb3b0f2 	.word	0x3fb3b0f2
 8016a38:	fe231671 	.word	0xfe231671
 8016a3c:	3fbc71c6 	.word	0x3fbc71c6
 8016a40:	9998ebc4 	.word	0x9998ebc4
 8016a44:	3fc99999 	.word	0x3fc99999
 8016a48:	54442d18 	.word	0x54442d18
 8016a4c:	3ff921fb 	.word	0x3ff921fb
 8016a50:	440fffff 	.word	0x440fffff
 8016a54:	7ff00000 	.word	0x7ff00000
 8016a58:	3fdbffff 	.word	0x3fdbffff
 8016a5c:	3ff00000 	.word	0x3ff00000
 8016a60:	3ff2ffff 	.word	0x3ff2ffff
 8016a64:	40038000 	.word	0x40038000
 8016a68:	3ff80000 	.word	0x3ff80000
 8016a6c:	bff00000 	.word	0xbff00000
 8016a70:	08017500 	.word	0x08017500
 8016a74:	080174e0 	.word	0x080174e0

08016a78 <fabs>:
 8016a78:	ec51 0b10 	vmov	r0, r1, d0
 8016a7c:	ee10 2a10 	vmov	r2, s0
 8016a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016a84:	ec43 2b10 	vmov	d0, r2, r3
 8016a88:	4770      	bx	lr
	...

08016a8c <atanf>:
 8016a8c:	b538      	push	{r3, r4, r5, lr}
 8016a8e:	ee10 5a10 	vmov	r5, s0
 8016a92:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016a96:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016a9a:	eef0 7a40 	vmov.f32	s15, s0
 8016a9e:	db10      	blt.n	8016ac2 <atanf+0x36>
 8016aa0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016aa4:	dd04      	ble.n	8016ab0 <atanf+0x24>
 8016aa6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8016aae:	bd38      	pop	{r3, r4, r5, pc}
 8016ab0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016be8 <atanf+0x15c>
 8016ab4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8016bec <atanf+0x160>
 8016ab8:	2d00      	cmp	r5, #0
 8016aba:	bfd8      	it	le
 8016abc:	eef0 7a40 	vmovle.f32	s15, s0
 8016ac0:	e7f3      	b.n	8016aaa <atanf+0x1e>
 8016ac2:	4b4b      	ldr	r3, [pc, #300]	; (8016bf0 <atanf+0x164>)
 8016ac4:	429c      	cmp	r4, r3
 8016ac6:	dc10      	bgt.n	8016aea <atanf+0x5e>
 8016ac8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016acc:	da0a      	bge.n	8016ae4 <atanf+0x58>
 8016ace:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016bf4 <atanf+0x168>
 8016ad2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ada:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae2:	dce2      	bgt.n	8016aaa <atanf+0x1e>
 8016ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae8:	e013      	b.n	8016b12 <atanf+0x86>
 8016aea:	f000 f8a3 	bl	8016c34 <fabsf>
 8016aee:	4b42      	ldr	r3, [pc, #264]	; (8016bf8 <atanf+0x16c>)
 8016af0:	429c      	cmp	r4, r3
 8016af2:	dc4f      	bgt.n	8016b94 <atanf+0x108>
 8016af4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8016af8:	429c      	cmp	r4, r3
 8016afa:	dc41      	bgt.n	8016b80 <atanf+0xf4>
 8016afc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016b00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016b04:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016b08:	2300      	movs	r3, #0
 8016b0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016b0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b12:	1c5a      	adds	r2, r3, #1
 8016b14:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016b18:	eddf 5a38 	vldr	s11, [pc, #224]	; 8016bfc <atanf+0x170>
 8016b1c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8016c00 <atanf+0x174>
 8016b20:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8016c04 <atanf+0x178>
 8016b24:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8016c08 <atanf+0x17c>
 8016b28:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016b2c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016b30:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016c0c <atanf+0x180>
 8016b34:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b38:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8016c10 <atanf+0x184>
 8016b3c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b40:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016c14 <atanf+0x188>
 8016b44:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b48:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8016c18 <atanf+0x18c>
 8016b4c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b50:	eddf 5a32 	vldr	s11, [pc, #200]	; 8016c1c <atanf+0x190>
 8016b54:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016b58:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8016c20 <atanf+0x194>
 8016b5c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016b60:	eddf 5a30 	vldr	s11, [pc, #192]	; 8016c24 <atanf+0x198>
 8016b64:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016b68:	eea5 0a87 	vfma.f32	s0, s11, s14
 8016b6c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016b70:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016b74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016b78:	d121      	bne.n	8016bbe <atanf+0x132>
 8016b7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016b7e:	e794      	b.n	8016aaa <atanf+0x1e>
 8016b80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016b84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016b88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016b8c:	2301      	movs	r3, #1
 8016b8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b92:	e7be      	b.n	8016b12 <atanf+0x86>
 8016b94:	4b24      	ldr	r3, [pc, #144]	; (8016c28 <atanf+0x19c>)
 8016b96:	429c      	cmp	r4, r3
 8016b98:	dc0b      	bgt.n	8016bb2 <atanf+0x126>
 8016b9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ba2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016ba6:	2302      	movs	r3, #2
 8016ba8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016bb0:	e7af      	b.n	8016b12 <atanf+0x86>
 8016bb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016bb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016bba:	2303      	movs	r3, #3
 8016bbc:	e7a9      	b.n	8016b12 <atanf+0x86>
 8016bbe:	4a1b      	ldr	r2, [pc, #108]	; (8016c2c <atanf+0x1a0>)
 8016bc0:	491b      	ldr	r1, [pc, #108]	; (8016c30 <atanf+0x1a4>)
 8016bc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016bc6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016bca:	ed93 7a00 	vldr	s14, [r3]
 8016bce:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016bd2:	2d00      	cmp	r5, #0
 8016bd4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016bd8:	ed92 0a00 	vldr	s0, [r2]
 8016bdc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016be0:	bfb8      	it	lt
 8016be2:	eef1 7a67 	vneglt.f32	s15, s15
 8016be6:	e760      	b.n	8016aaa <atanf+0x1e>
 8016be8:	3fc90fdb 	.word	0x3fc90fdb
 8016bec:	bfc90fdb 	.word	0xbfc90fdb
 8016bf0:	3edfffff 	.word	0x3edfffff
 8016bf4:	7149f2ca 	.word	0x7149f2ca
 8016bf8:	3f97ffff 	.word	0x3f97ffff
 8016bfc:	3c8569d7 	.word	0x3c8569d7
 8016c00:	3d4bda59 	.word	0x3d4bda59
 8016c04:	bd15a221 	.word	0xbd15a221
 8016c08:	be4ccccd 	.word	0xbe4ccccd
 8016c0c:	3d886b35 	.word	0x3d886b35
 8016c10:	3dba2e6e 	.word	0x3dba2e6e
 8016c14:	3e124925 	.word	0x3e124925
 8016c18:	3eaaaaab 	.word	0x3eaaaaab
 8016c1c:	bd6ef16b 	.word	0xbd6ef16b
 8016c20:	bd9d8795 	.word	0xbd9d8795
 8016c24:	bde38e38 	.word	0xbde38e38
 8016c28:	401bffff 	.word	0x401bffff
 8016c2c:	08017520 	.word	0x08017520
 8016c30:	08017530 	.word	0x08017530

08016c34 <fabsf>:
 8016c34:	ee10 3a10 	vmov	r3, s0
 8016c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016c3c:	ee00 3a10 	vmov	s0, r3
 8016c40:	4770      	bx	lr
	...

08016c44 <floorf>:
 8016c44:	ee10 3a10 	vmov	r3, s0
 8016c48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016c4c:	3a7f      	subs	r2, #127	; 0x7f
 8016c4e:	2a16      	cmp	r2, #22
 8016c50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016c54:	dc2a      	bgt.n	8016cac <floorf+0x68>
 8016c56:	2a00      	cmp	r2, #0
 8016c58:	da11      	bge.n	8016c7e <floorf+0x3a>
 8016c5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016cbc <floorf+0x78>
 8016c5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016c62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c6a:	dd05      	ble.n	8016c78 <floorf+0x34>
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	da23      	bge.n	8016cb8 <floorf+0x74>
 8016c70:	4a13      	ldr	r2, [pc, #76]	; (8016cc0 <floorf+0x7c>)
 8016c72:	2900      	cmp	r1, #0
 8016c74:	bf18      	it	ne
 8016c76:	4613      	movne	r3, r2
 8016c78:	ee00 3a10 	vmov	s0, r3
 8016c7c:	4770      	bx	lr
 8016c7e:	4911      	ldr	r1, [pc, #68]	; (8016cc4 <floorf+0x80>)
 8016c80:	4111      	asrs	r1, r2
 8016c82:	420b      	tst	r3, r1
 8016c84:	d0fa      	beq.n	8016c7c <floorf+0x38>
 8016c86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016cbc <floorf+0x78>
 8016c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016c8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c96:	ddef      	ble.n	8016c78 <floorf+0x34>
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	bfbe      	ittt	lt
 8016c9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8016ca0:	fa40 f202 	asrlt.w	r2, r0, r2
 8016ca4:	189b      	addlt	r3, r3, r2
 8016ca6:	ea23 0301 	bic.w	r3, r3, r1
 8016caa:	e7e5      	b.n	8016c78 <floorf+0x34>
 8016cac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016cb0:	d3e4      	bcc.n	8016c7c <floorf+0x38>
 8016cb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016cb6:	4770      	bx	lr
 8016cb8:	2300      	movs	r3, #0
 8016cba:	e7dd      	b.n	8016c78 <floorf+0x34>
 8016cbc:	7149f2ca 	.word	0x7149f2ca
 8016cc0:	bf800000 	.word	0xbf800000
 8016cc4:	007fffff 	.word	0x007fffff

08016cc8 <nanf>:
 8016cc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016cd0 <nanf+0x8>
 8016ccc:	4770      	bx	lr
 8016cce:	bf00      	nop
 8016cd0:	7fc00000 	.word	0x7fc00000

08016cd4 <scalbnf>:
 8016cd4:	ee10 3a10 	vmov	r3, s0
 8016cd8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016cdc:	d025      	beq.n	8016d2a <scalbnf+0x56>
 8016cde:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016ce2:	d302      	bcc.n	8016cea <scalbnf+0x16>
 8016ce4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016ce8:	4770      	bx	lr
 8016cea:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016cee:	d122      	bne.n	8016d36 <scalbnf+0x62>
 8016cf0:	4b2a      	ldr	r3, [pc, #168]	; (8016d9c <scalbnf+0xc8>)
 8016cf2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016da0 <scalbnf+0xcc>
 8016cf6:	4298      	cmp	r0, r3
 8016cf8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016cfc:	db16      	blt.n	8016d2c <scalbnf+0x58>
 8016cfe:	ee10 3a10 	vmov	r3, s0
 8016d02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016d06:	3a19      	subs	r2, #25
 8016d08:	4402      	add	r2, r0
 8016d0a:	2afe      	cmp	r2, #254	; 0xfe
 8016d0c:	dd15      	ble.n	8016d3a <scalbnf+0x66>
 8016d0e:	ee10 3a10 	vmov	r3, s0
 8016d12:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016da4 <scalbnf+0xd0>
 8016d16:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016da8 <scalbnf+0xd4>
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	eeb0 7a67 	vmov.f32	s14, s15
 8016d20:	bfb8      	it	lt
 8016d22:	eef0 7a66 	vmovlt.f32	s15, s13
 8016d26:	ee27 0a27 	vmul.f32	s0, s14, s15
 8016d2a:	4770      	bx	lr
 8016d2c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016dac <scalbnf+0xd8>
 8016d30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d34:	4770      	bx	lr
 8016d36:	0dd2      	lsrs	r2, r2, #23
 8016d38:	e7e6      	b.n	8016d08 <scalbnf+0x34>
 8016d3a:	2a00      	cmp	r2, #0
 8016d3c:	dd06      	ble.n	8016d4c <scalbnf+0x78>
 8016d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d42:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016d46:	ee00 3a10 	vmov	s0, r3
 8016d4a:	4770      	bx	lr
 8016d4c:	f112 0f16 	cmn.w	r2, #22
 8016d50:	da1a      	bge.n	8016d88 <scalbnf+0xb4>
 8016d52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016d56:	4298      	cmp	r0, r3
 8016d58:	ee10 3a10 	vmov	r3, s0
 8016d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016d60:	dd0a      	ble.n	8016d78 <scalbnf+0xa4>
 8016d62:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016da4 <scalbnf+0xd0>
 8016d66:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8016da8 <scalbnf+0xd4>
 8016d6a:	eef0 7a40 	vmov.f32	s15, s0
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	bf18      	it	ne
 8016d72:	eeb0 0a47 	vmovne.f32	s0, s14
 8016d76:	e7db      	b.n	8016d30 <scalbnf+0x5c>
 8016d78:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016dac <scalbnf+0xd8>
 8016d7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016db0 <scalbnf+0xdc>
 8016d80:	eef0 7a40 	vmov.f32	s15, s0
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	e7f3      	b.n	8016d70 <scalbnf+0x9c>
 8016d88:	3219      	adds	r2, #25
 8016d8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016d8e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016d92:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016db4 <scalbnf+0xe0>
 8016d96:	ee07 3a10 	vmov	s14, r3
 8016d9a:	e7c4      	b.n	8016d26 <scalbnf+0x52>
 8016d9c:	ffff3cb0 	.word	0xffff3cb0
 8016da0:	4c000000 	.word	0x4c000000
 8016da4:	7149f2ca 	.word	0x7149f2ca
 8016da8:	f149f2ca 	.word	0xf149f2ca
 8016dac:	0da24260 	.word	0x0da24260
 8016db0:	8da24260 	.word	0x8da24260
 8016db4:	33000000 	.word	0x33000000

08016db8 <abort>:
 8016db8:	b508      	push	{r3, lr}
 8016dba:	2006      	movs	r0, #6
 8016dbc:	f000 f8de 	bl	8016f7c <raise>
 8016dc0:	2001      	movs	r0, #1
 8016dc2:	f7eb fa59 	bl	8002278 <_exit>
	...

08016dc8 <__errno>:
 8016dc8:	4b01      	ldr	r3, [pc, #4]	; (8016dd0 <__errno+0x8>)
 8016dca:	6818      	ldr	r0, [r3, #0]
 8016dcc:	4770      	bx	lr
 8016dce:	bf00      	nop
 8016dd0:	200000f0 	.word	0x200000f0

08016dd4 <__libc_init_array>:
 8016dd4:	b570      	push	{r4, r5, r6, lr}
 8016dd6:	4d0d      	ldr	r5, [pc, #52]	; (8016e0c <__libc_init_array+0x38>)
 8016dd8:	4c0d      	ldr	r4, [pc, #52]	; (8016e10 <__libc_init_array+0x3c>)
 8016dda:	1b64      	subs	r4, r4, r5
 8016ddc:	10a4      	asrs	r4, r4, #2
 8016dde:	2600      	movs	r6, #0
 8016de0:	42a6      	cmp	r6, r4
 8016de2:	d109      	bne.n	8016df8 <__libc_init_array+0x24>
 8016de4:	4d0b      	ldr	r5, [pc, #44]	; (8016e14 <__libc_init_array+0x40>)
 8016de6:	4c0c      	ldr	r4, [pc, #48]	; (8016e18 <__libc_init_array+0x44>)
 8016de8:	f000 f8f2 	bl	8016fd0 <_init>
 8016dec:	1b64      	subs	r4, r4, r5
 8016dee:	10a4      	asrs	r4, r4, #2
 8016df0:	2600      	movs	r6, #0
 8016df2:	42a6      	cmp	r6, r4
 8016df4:	d105      	bne.n	8016e02 <__libc_init_array+0x2e>
 8016df6:	bd70      	pop	{r4, r5, r6, pc}
 8016df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dfc:	4798      	blx	r3
 8016dfe:	3601      	adds	r6, #1
 8016e00:	e7ee      	b.n	8016de0 <__libc_init_array+0xc>
 8016e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e06:	4798      	blx	r3
 8016e08:	3601      	adds	r6, #1
 8016e0a:	e7f2      	b.n	8016df2 <__libc_init_array+0x1e>
 8016e0c:	08017548 	.word	0x08017548
 8016e10:	08017548 	.word	0x08017548
 8016e14:	08017548 	.word	0x08017548
 8016e18:	0801754c 	.word	0x0801754c

08016e1c <malloc>:
 8016e1c:	4b02      	ldr	r3, [pc, #8]	; (8016e28 <malloc+0xc>)
 8016e1e:	4601      	mov	r1, r0
 8016e20:	6818      	ldr	r0, [r3, #0]
 8016e22:	f000 b819 	b.w	8016e58 <_malloc_r>
 8016e26:	bf00      	nop
 8016e28:	200000f0 	.word	0x200000f0

08016e2c <memcpy>:
 8016e2c:	440a      	add	r2, r1
 8016e2e:	4291      	cmp	r1, r2
 8016e30:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e34:	d100      	bne.n	8016e38 <memcpy+0xc>
 8016e36:	4770      	bx	lr
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e42:	4291      	cmp	r1, r2
 8016e44:	d1f9      	bne.n	8016e3a <memcpy+0xe>
 8016e46:	bd10      	pop	{r4, pc}

08016e48 <memset>:
 8016e48:	4402      	add	r2, r0
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	4293      	cmp	r3, r2
 8016e4e:	d100      	bne.n	8016e52 <memset+0xa>
 8016e50:	4770      	bx	lr
 8016e52:	f803 1b01 	strb.w	r1, [r3], #1
 8016e56:	e7f9      	b.n	8016e4c <memset+0x4>

08016e58 <_malloc_r>:
 8016e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e5a:	1ccd      	adds	r5, r1, #3
 8016e5c:	f025 0503 	bic.w	r5, r5, #3
 8016e60:	3508      	adds	r5, #8
 8016e62:	2d0c      	cmp	r5, #12
 8016e64:	bf38      	it	cc
 8016e66:	250c      	movcc	r5, #12
 8016e68:	2d00      	cmp	r5, #0
 8016e6a:	4606      	mov	r6, r0
 8016e6c:	db01      	blt.n	8016e72 <_malloc_r+0x1a>
 8016e6e:	42a9      	cmp	r1, r5
 8016e70:	d903      	bls.n	8016e7a <_malloc_r+0x22>
 8016e72:	230c      	movs	r3, #12
 8016e74:	6033      	str	r3, [r6, #0]
 8016e76:	2000      	movs	r0, #0
 8016e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e7a:	f000 f89b 	bl	8016fb4 <__malloc_lock>
 8016e7e:	4921      	ldr	r1, [pc, #132]	; (8016f04 <_malloc_r+0xac>)
 8016e80:	680a      	ldr	r2, [r1, #0]
 8016e82:	4614      	mov	r4, r2
 8016e84:	b99c      	cbnz	r4, 8016eae <_malloc_r+0x56>
 8016e86:	4f20      	ldr	r7, [pc, #128]	; (8016f08 <_malloc_r+0xb0>)
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	b923      	cbnz	r3, 8016e96 <_malloc_r+0x3e>
 8016e8c:	4621      	mov	r1, r4
 8016e8e:	4630      	mov	r0, r6
 8016e90:	f000 f83c 	bl	8016f0c <_sbrk_r>
 8016e94:	6038      	str	r0, [r7, #0]
 8016e96:	4629      	mov	r1, r5
 8016e98:	4630      	mov	r0, r6
 8016e9a:	f000 f837 	bl	8016f0c <_sbrk_r>
 8016e9e:	1c43      	adds	r3, r0, #1
 8016ea0:	d123      	bne.n	8016eea <_malloc_r+0x92>
 8016ea2:	230c      	movs	r3, #12
 8016ea4:	6033      	str	r3, [r6, #0]
 8016ea6:	4630      	mov	r0, r6
 8016ea8:	f000 f88a 	bl	8016fc0 <__malloc_unlock>
 8016eac:	e7e3      	b.n	8016e76 <_malloc_r+0x1e>
 8016eae:	6823      	ldr	r3, [r4, #0]
 8016eb0:	1b5b      	subs	r3, r3, r5
 8016eb2:	d417      	bmi.n	8016ee4 <_malloc_r+0x8c>
 8016eb4:	2b0b      	cmp	r3, #11
 8016eb6:	d903      	bls.n	8016ec0 <_malloc_r+0x68>
 8016eb8:	6023      	str	r3, [r4, #0]
 8016eba:	441c      	add	r4, r3
 8016ebc:	6025      	str	r5, [r4, #0]
 8016ebe:	e004      	b.n	8016eca <_malloc_r+0x72>
 8016ec0:	6863      	ldr	r3, [r4, #4]
 8016ec2:	42a2      	cmp	r2, r4
 8016ec4:	bf0c      	ite	eq
 8016ec6:	600b      	streq	r3, [r1, #0]
 8016ec8:	6053      	strne	r3, [r2, #4]
 8016eca:	4630      	mov	r0, r6
 8016ecc:	f000 f878 	bl	8016fc0 <__malloc_unlock>
 8016ed0:	f104 000b 	add.w	r0, r4, #11
 8016ed4:	1d23      	adds	r3, r4, #4
 8016ed6:	f020 0007 	bic.w	r0, r0, #7
 8016eda:	1ac2      	subs	r2, r0, r3
 8016edc:	d0cc      	beq.n	8016e78 <_malloc_r+0x20>
 8016ede:	1a1b      	subs	r3, r3, r0
 8016ee0:	50a3      	str	r3, [r4, r2]
 8016ee2:	e7c9      	b.n	8016e78 <_malloc_r+0x20>
 8016ee4:	4622      	mov	r2, r4
 8016ee6:	6864      	ldr	r4, [r4, #4]
 8016ee8:	e7cc      	b.n	8016e84 <_malloc_r+0x2c>
 8016eea:	1cc4      	adds	r4, r0, #3
 8016eec:	f024 0403 	bic.w	r4, r4, #3
 8016ef0:	42a0      	cmp	r0, r4
 8016ef2:	d0e3      	beq.n	8016ebc <_malloc_r+0x64>
 8016ef4:	1a21      	subs	r1, r4, r0
 8016ef6:	4630      	mov	r0, r6
 8016ef8:	f000 f808 	bl	8016f0c <_sbrk_r>
 8016efc:	3001      	adds	r0, #1
 8016efe:	d1dd      	bne.n	8016ebc <_malloc_r+0x64>
 8016f00:	e7cf      	b.n	8016ea2 <_malloc_r+0x4a>
 8016f02:	bf00      	nop
 8016f04:	2000124c 	.word	0x2000124c
 8016f08:	20001250 	.word	0x20001250

08016f0c <_sbrk_r>:
 8016f0c:	b538      	push	{r3, r4, r5, lr}
 8016f0e:	4d06      	ldr	r5, [pc, #24]	; (8016f28 <_sbrk_r+0x1c>)
 8016f10:	2300      	movs	r3, #0
 8016f12:	4604      	mov	r4, r0
 8016f14:	4608      	mov	r0, r1
 8016f16:	602b      	str	r3, [r5, #0]
 8016f18:	f7eb f9b8 	bl	800228c <_sbrk>
 8016f1c:	1c43      	adds	r3, r0, #1
 8016f1e:	d102      	bne.n	8016f26 <_sbrk_r+0x1a>
 8016f20:	682b      	ldr	r3, [r5, #0]
 8016f22:	b103      	cbz	r3, 8016f26 <_sbrk_r+0x1a>
 8016f24:	6023      	str	r3, [r4, #0]
 8016f26:	bd38      	pop	{r3, r4, r5, pc}
 8016f28:	20001a40 	.word	0x20001a40

08016f2c <_raise_r>:
 8016f2c:	291f      	cmp	r1, #31
 8016f2e:	b538      	push	{r3, r4, r5, lr}
 8016f30:	4604      	mov	r4, r0
 8016f32:	460d      	mov	r5, r1
 8016f34:	d904      	bls.n	8016f40 <_raise_r+0x14>
 8016f36:	2316      	movs	r3, #22
 8016f38:	6003      	str	r3, [r0, #0]
 8016f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8016f3e:	bd38      	pop	{r3, r4, r5, pc}
 8016f40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016f42:	b112      	cbz	r2, 8016f4a <_raise_r+0x1e>
 8016f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f48:	b94b      	cbnz	r3, 8016f5e <_raise_r+0x32>
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	f000 f830 	bl	8016fb0 <_getpid_r>
 8016f50:	462a      	mov	r2, r5
 8016f52:	4601      	mov	r1, r0
 8016f54:	4620      	mov	r0, r4
 8016f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f5a:	f000 b817 	b.w	8016f8c <_kill_r>
 8016f5e:	2b01      	cmp	r3, #1
 8016f60:	d00a      	beq.n	8016f78 <_raise_r+0x4c>
 8016f62:	1c59      	adds	r1, r3, #1
 8016f64:	d103      	bne.n	8016f6e <_raise_r+0x42>
 8016f66:	2316      	movs	r3, #22
 8016f68:	6003      	str	r3, [r0, #0]
 8016f6a:	2001      	movs	r0, #1
 8016f6c:	e7e7      	b.n	8016f3e <_raise_r+0x12>
 8016f6e:	2400      	movs	r4, #0
 8016f70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016f74:	4628      	mov	r0, r5
 8016f76:	4798      	blx	r3
 8016f78:	2000      	movs	r0, #0
 8016f7a:	e7e0      	b.n	8016f3e <_raise_r+0x12>

08016f7c <raise>:
 8016f7c:	4b02      	ldr	r3, [pc, #8]	; (8016f88 <raise+0xc>)
 8016f7e:	4601      	mov	r1, r0
 8016f80:	6818      	ldr	r0, [r3, #0]
 8016f82:	f7ff bfd3 	b.w	8016f2c <_raise_r>
 8016f86:	bf00      	nop
 8016f88:	200000f0 	.word	0x200000f0

08016f8c <_kill_r>:
 8016f8c:	b538      	push	{r3, r4, r5, lr}
 8016f8e:	4d07      	ldr	r5, [pc, #28]	; (8016fac <_kill_r+0x20>)
 8016f90:	2300      	movs	r3, #0
 8016f92:	4604      	mov	r4, r0
 8016f94:	4608      	mov	r0, r1
 8016f96:	4611      	mov	r1, r2
 8016f98:	602b      	str	r3, [r5, #0]
 8016f9a:	f7eb f95d 	bl	8002258 <_kill>
 8016f9e:	1c43      	adds	r3, r0, #1
 8016fa0:	d102      	bne.n	8016fa8 <_kill_r+0x1c>
 8016fa2:	682b      	ldr	r3, [r5, #0]
 8016fa4:	b103      	cbz	r3, 8016fa8 <_kill_r+0x1c>
 8016fa6:	6023      	str	r3, [r4, #0]
 8016fa8:	bd38      	pop	{r3, r4, r5, pc}
 8016faa:	bf00      	nop
 8016fac:	20001a40 	.word	0x20001a40

08016fb0 <_getpid_r>:
 8016fb0:	f7eb b94a 	b.w	8002248 <_getpid>

08016fb4 <__malloc_lock>:
 8016fb4:	4801      	ldr	r0, [pc, #4]	; (8016fbc <__malloc_lock+0x8>)
 8016fb6:	f000 b809 	b.w	8016fcc <__retarget_lock_acquire_recursive>
 8016fba:	bf00      	nop
 8016fbc:	20001a48 	.word	0x20001a48

08016fc0 <__malloc_unlock>:
 8016fc0:	4801      	ldr	r0, [pc, #4]	; (8016fc8 <__malloc_unlock+0x8>)
 8016fc2:	f000 b804 	b.w	8016fce <__retarget_lock_release_recursive>
 8016fc6:	bf00      	nop
 8016fc8:	20001a48 	.word	0x20001a48

08016fcc <__retarget_lock_acquire_recursive>:
 8016fcc:	4770      	bx	lr

08016fce <__retarget_lock_release_recursive>:
 8016fce:	4770      	bx	lr

08016fd0 <_init>:
 8016fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fd2:	bf00      	nop
 8016fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fd6:	bc08      	pop	{r3}
 8016fd8:	469e      	mov	lr, r3
 8016fda:	4770      	bx	lr

08016fdc <_fini>:
 8016fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fde:	bf00      	nop
 8016fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016fe2:	bc08      	pop	{r3}
 8016fe4:	469e      	mov	lr, r3
 8016fe6:	4770      	bx	lr
