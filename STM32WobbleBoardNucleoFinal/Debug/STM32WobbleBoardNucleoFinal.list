
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003158  08003158  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800316c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800316c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c550  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001989  00000000  00000000  0002c58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002e7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025429  00000000  00000000  0002f020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0c0  00000000  00000000  00054449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5a54  00000000  00000000  0005f509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144f5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002298  00000000  00000000  00144fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030a8 	.word	0x080030a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030a8 	.word	0x080030a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	4a2e      	ldr	r2, [pc, #184]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004ec:	f043 0304 	orr.w	r3, r3, #4
 80004f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f2:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	f003 0304 	and.w	r3, r3, #4
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	4a28      	ldr	r2, [pc, #160]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	4a22      	ldr	r2, [pc, #136]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000534:	f043 0302 	orr.w	r3, r3, #2
 8000538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054e:	f000 fd27 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8000552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000558:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	480f      	ldr	r0, [pc, #60]	; (80005a8 <MX_GPIO_Init+0xd8>)
 800056a:	f000 fb6f 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 800056e:	2320      	movs	r3, #32
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000572:	2301      	movs	r3, #1
 8000574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057a:	2300      	movs	r3, #0
 800057c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	4619      	mov	r1, r3
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fb60 	bl	8000c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2100      	movs	r1, #0
 8000590:	2028      	movs	r0, #40	; 0x28
 8000592:	f000 fb24 	bl	8000bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000596:	2028      	movs	r0, #40	; 0x28
 8000598:	f000 fb3d 	bl	8000c16 <HAL_NVIC_EnableIRQ>

}
 800059c:	bf00      	nop
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40021000 	.word	0x40021000
 80005a8:	48000800 	.word	0x48000800

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 f9be 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f805 	bl	80005c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f7ff ff8a 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005bc:	f000 f902 	bl	80007c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x14>

080005c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b096      	sub	sp, #88	; 0x58
 80005c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	2244      	movs	r2, #68	; 0x44
 80005ce:	2100      	movs	r1, #0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fd61 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e8:	f000 fd18 	bl	800101c <HAL_PWREx_ControlVoltageScaling>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f2:	f000 f879 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000610:	230a      	movs	r3, #10
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000614:	2307      	movs	r3, #7
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4618      	mov	r0, r3
 8000626:	f000 fd4f 	bl	80010c8 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000630:	f000 f85a 	bl	80006e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2104      	movs	r1, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f921 	bl	8001894 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000658:	f000 f846 	bl	80006e8 <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3758      	adds	r7, #88	; 0x58
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <HAL_GPIO_EXTI_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	d129      	bne.n	80006ca <HAL_GPIO_EXTI_Callback+0x66>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x70>)
 8000678:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x74>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d105      	bne.n	800068e <HAL_GPIO_EXTI_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_GPIO_EXTI_Callback+0x78>)
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e004      	b.n	8000698 <HAL_GPIO_EXTI_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000696:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 8000698:	68f8      	ldr	r0, [r7, #12]
 800069a:	f7ff fd95 	bl	80001c8 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart2, cMessage, iMessageLength, 100) != HAL_OK)
 80006a2:	897a      	ldrh	r2, [r7, #10]
 80006a4:	2364      	movs	r3, #100	; 0x64
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	480e      	ldr	r0, [pc, #56]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x80>)
 80006aa:	f002 f803 	bl	80026b4 <HAL_UART_Transmit>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <HAL_GPIO_EXTI_Callback+0x54>
		{
			Error_Handler();
 80006b4:	f000 f818 	bl	80006e8 <Error_Handler>
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_GPIO_EXTI_Callback+0x74>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	461a      	mov	r2, r3
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f000 fc6b 	bl	8000fa0 <HAL_GPIO_WritePin>
	}
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	080030c0 	.word	0x080030c0
 80006d8:	20000028 	.word	0x20000028
 80006dc:	080030c4 	.word	0x080030c4
 80006e0:	080030e4 	.word	0x080030e4
 80006e4:	2000002c 	.word	0x2000002c

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6613      	str	r3, [r2, #96]	; 0x60
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6593      	str	r3, [r2, #88]	; 0x58
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f92e 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8000794:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000798:	f000 fc1a 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f001 ff06 	bl	8002618 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f7ff ff69 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000002c 	.word	0x2000002c
 8000820:	40004400 	.word	0x40004400

08000824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ac      	sub	sp, #176	; 0xb0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2288      	movs	r2, #136	; 0x88
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fc27 	bl	8003098 <memset>
  if(uartHandle->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <HAL_UART_MspInit+0xb0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d13b      	bne.n	80008cc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fa1d 	bl	8001ca0 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ff3c 	bl	80006e8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	6593      	str	r3, [r2, #88]	; 0x58
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b8:	2307      	movs	r3, #7
 80008ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 f9c0 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	37b0      	adds	r7, #176	; 0xb0
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40004400 	.word	0x40004400
 80008d8:	40021000 	.word	0x40021000

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ff5e 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopForever+0xe>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopForever+0x16>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fba1 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fe4d 	bl	80005ac <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000920:	08003160 	.word	0x08003160
  ldr r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000928:	200000b4 	.word	0x200000b4

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_Init+0x3c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0b      	ldr	r2, [pc, #44]	; (800096c <HAL_Init+0x3c>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f93e 	bl	8000bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f80f 	bl	8000970 <HAL_InitTick>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	e001      	b.n	8000962 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800095e:	f7ff fec9 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000962:	79fb      	ldrb	r3, [r7, #7]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <HAL_InitTick+0x6c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d023      	beq.n	80009cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_InitTick+0x70>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_InitTick+0x6c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 f949 	bl	8000c32 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10f      	bne.n	80009c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d809      	bhi.n	80009c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f913 	bl	8000bde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_InitTick+0x74>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e007      	b.n	80009d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	73fb      	strb	r3, [r7, #15]
 80009c4:	e004      	b.n	80009d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e001      	b.n	80009d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200000b0 	.word	0x200000b0

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200000b0 	.word	0x200000b0

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4907      	ldr	r1, [pc, #28]	; (8000ac4 <__NVIC_EnableIRQ+0x38>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	db0a      	blt.n	8000af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	b2da      	uxtb	r2, r3
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <__NVIC_SetPriority+0x4c>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	0112      	lsls	r2, r2, #4
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	440b      	add	r3, r1
 8000aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af0:	e00a      	b.n	8000b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4908      	ldr	r1, [pc, #32]	; (8000b18 <__NVIC_SetPriority+0x50>)
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f003 030f 	and.w	r3, r3, #15
 8000afe:	3b04      	subs	r3, #4
 8000b00:	0112      	lsls	r2, r2, #4
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	440b      	add	r3, r1
 8000b06:	761a      	strb	r2, [r3, #24]
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000e100 	.word	0xe000e100
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	f1c3 0307 	rsb	r3, r3, #7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	bf28      	it	cs
 8000b3a:	2304      	movcs	r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3304      	adds	r3, #4
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	d902      	bls.n	8000b4c <NVIC_EncodePriority+0x30>
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3b03      	subs	r3, #3
 8000b4a:	e000      	b.n	8000b4e <NVIC_EncodePriority+0x32>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43da      	mvns	r2, r3
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	401a      	ands	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b64:	f04f 31ff 	mov.w	r1, #4294967295
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6e:	43d9      	mvns	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	4313      	orrs	r3, r2
         );
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3724      	adds	r7, #36	; 0x24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b94:	d301      	bcc.n	8000b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00f      	b.n	8000bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <SysTick_Config+0x40>)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba2:	210f      	movs	r1, #15
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f7ff ff8e 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <SysTick_Config+0x40>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <SysTick_Config+0x40>)
 8000bb4:	2207      	movs	r2, #7
 8000bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	e000e010 	.word	0xe000e010

08000bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff29 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff3e 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff8e 	bl	8000b1c <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff31 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa2 	bl	8000b84 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e17f      	b.n	8000f5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8171 	beq.w	8000f56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d118      	bne.n	8000d2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d017      	beq.n	8000d68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80ac 	beq.w	8000f56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b5f      	ldr	r3, [pc, #380]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	4a5e      	ldr	r2, [pc, #376]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	; (8000f7c <HAL_GPIO_Init+0x330>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e16:	4a5a      	ldr	r2, [pc, #360]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	3302      	adds	r3, #2
 8000e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	220f      	movs	r2, #15
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e40:	d025      	beq.n	8000e8e <HAL_GPIO_Init+0x242>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_GPIO_Init+0x338>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01f      	beq.n	8000e8a <HAL_GPIO_Init+0x23e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_GPIO_Init+0x33c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0x23a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_GPIO_Init+0x340>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d013      	beq.n	8000e82 <HAL_GPIO_Init+0x236>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_GPIO_Init+0x344>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00d      	beq.n	8000e7e <HAL_GPIO_Init+0x232>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_GPIO_Init+0x348>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d007      	beq.n	8000e7a <HAL_GPIO_Init+0x22e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x34c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_GPIO_Init+0x22a>
 8000e72:	2306      	movs	r3, #6
 8000e74:	e00c      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e76:	2307      	movs	r3, #7
 8000e78:	e00a      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	e008      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e7e:	2304      	movs	r3, #4
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e82:	2303      	movs	r3, #3
 8000e84:	e004      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e86:	2302      	movs	r3, #2
 8000e88:	e002      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_GPIO_Init+0x244>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	f002 0203 	and.w	r2, r2, #3
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	4093      	lsls	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea0:	4937      	ldr	r1, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x334>)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	3302      	adds	r3, #2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eae:	4b3b      	ldr	r3, [pc, #236]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed2:	4a32      	ldr	r2, [pc, #200]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed8:	4b30      	ldr	r3, [pc, #192]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f26:	4a1d      	ldr	r2, [pc, #116]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x350>)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa22 f303 	lsr.w	r3, r2, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f47f ae78 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	371c      	adds	r7, #28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48001000 	.word	0x48001000
 8000f94:	48001400 	.word	0x48001400
 8000f98:	48001800 	.word	0x48001800
 8000f9c:	40010400 	.word	0x40010400

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fb38 	bl	8000664 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <HAL_PWREx_GetVoltageRange+0x18>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40007000 	.word	0x40007000

0800101c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800102a:	d130      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001038:	d038      	beq.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001048:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2232      	movs	r2, #50	; 0x32
 8001050:	fb02 f303 	mul.w	r3, r2, r3
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0c9b      	lsrs	r3, r3, #18
 800105c:	3301      	adds	r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001060:	e002      	b.n	8001068 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	3b01      	subs	r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001074:	d102      	bne.n	800107c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f2      	bne.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001088:	d110      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e00f      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109a:	d007      	beq.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010a4:	4a05      	ldr	r2, [pc, #20]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40007000 	.word	0x40007000
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e3d4      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010da:	4ba1      	ldr	r3, [pc, #644]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e4:	4b9e      	ldr	r3, [pc, #632]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80e4 	beq.w	80012c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d007      	beq.n	8001112 <HAL_RCC_OscConfig+0x4a>
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	f040 808b 	bne.w	8001220 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2b01      	cmp	r3, #1
 800110e:	f040 8087 	bne.w	8001220 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001112:	4b93      	ldr	r3, [pc, #588]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_RCC_OscConfig+0x62>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e3ac      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1a      	ldr	r2, [r3, #32]
 800112e:	4b8c      	ldr	r3, [pc, #560]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d004      	beq.n	8001144 <HAL_RCC_OscConfig+0x7c>
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001142:	e005      	b.n	8001150 <HAL_RCC_OscConfig+0x88>
 8001144:	4b86      	ldr	r3, [pc, #536]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001150:	4293      	cmp	r3, r2
 8001152:	d223      	bcs.n	800119c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd41 	bl	8001be0 <RCC_SetFlashLatencyFromMSIRange>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e38d      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001168:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a7c      	ldr	r2, [pc, #496]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800116e:	f043 0308 	orr.w	r3, r3, #8
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4977      	ldr	r1, [pc, #476]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	4972      	ldr	r1, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
 800119a:	e025      	b.n	80011e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119c:	4b70      	ldr	r3, [pc, #448]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a6f      	ldr	r2, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	496a      	ldr	r1, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ba:	4b69      	ldr	r3, [pc, #420]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	4965      	ldr	r1, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d109      	bne.n	80011e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fd01 	bl	8001be0 <RCC_SetFlashLatencyFromMSIRange>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e34d      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011e8:	f000 fc36 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	495a      	ldr	r1, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80011fa:	5ccb      	ldrb	r3, [r1, r3]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_RCC_OscConfig+0x2a0>)
 8001206:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0x2a4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fbaf 	bl	8000970 <HAL_InitTick>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d052      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	e331      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d032      	beq.n	800128e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001228:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001234:	f7ff fbec 	bl	8000a10 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800123c:	f7ff fbe8 	bl	8000a10 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e31a      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d0f0      	beq.n	800123c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a40      	ldr	r2, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	493b      	ldr	r1, [pc, #236]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001278:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	e01a      	b.n	80012c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a33      	ldr	r2, [pc, #204]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001294:	f023 0301 	bic.w	r3, r3, #1
 8001298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800129a:	f7ff fbb9 	bl	8000a10 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a2:	f7ff fbb5 	bl	8000a10 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e2e7      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b4:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x1da>
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d074      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x21a>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d10e      	bne.n	80012fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d10b      	bne.n	80012fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d064      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d160      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e2c4      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d106      	bne.n	8001312 <HAL_RCC_OscConfig+0x24a>
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800130a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	e01d      	b.n	800134e <HAL_RCC_OscConfig+0x286>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x26e>
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800132e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e00b      	b.n	800134e <HAL_RCC_OscConfig+0x286>
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800133c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d01c      	beq.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff fb5b 	bl	8000a10 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135c:	e011      	b.n	8001382 <HAL_RCC_OscConfig+0x2ba>
 800135e:	bf00      	nop
 8001360:	40021000 	.word	0x40021000
 8001364:	08003108 	.word	0x08003108
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb4e 	bl	8000a10 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e280      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001382:	4baf      	ldr	r3, [pc, #700]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x2a8>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fb3e 	bl	8000a10 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb3a 	bl	8000a10 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e26c      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d0>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d060      	beq.n	8001488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x310>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d119      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d116      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d8:	4b99      	ldr	r3, [pc, #612]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x328>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e249      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b93      	ldr	r3, [pc, #588]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	4990      	ldr	r1, [pc, #576]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001404:	e040      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d023      	beq.n	8001456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4b8c      	ldr	r3, [pc, #560]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a8b      	ldr	r2, [pc, #556]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff faf9 	bl	8000a10 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff faf5 	bl	8000a10 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e227      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	497c      	ldr	r1, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e018      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800145c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff fad5 	bl	8000a10 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fad1 	bl	8000a10 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e203      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03c      	beq.n	800150e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149c:	4b68      	ldr	r3, [pc, #416]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	4a67      	ldr	r2, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fab0 	bl	8000a10 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff faac 	bl	8000a10 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1de      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c6:	4b5e      	ldr	r3, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ef      	beq.n	80014b4 <HAL_RCC_OscConfig+0x3ec>
 80014d4:	e01b      	b.n	800150e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d6:	4b5a      	ldr	r3, [pc, #360]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fa93 	bl	8000a10 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa8f 	bl	8000a10 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e1c1      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a6 	beq.w	8001668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
 8001538:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d118      	bne.n	8001586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa56 	bl	8000a10 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001568:	f7ff fa52 	bl	8000a10 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e184      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d8>
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001594:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159e:	e024      	b.n	80015ea <HAL_RCC_OscConfig+0x522>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d110      	bne.n	80015ca <HAL_RCC_OscConfig+0x502>
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	4a20      	ldr	r2, [pc, #128]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c8:	e00f      	b.n	80015ea <HAL_RCC_OscConfig+0x522>
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d016      	beq.n	8001620 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa0d 	bl	8000a10 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fa09 	bl	8000a10 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e139      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ed      	beq.n	80015fa <HAL_RCC_OscConfig+0x532>
 800161e:	e01a      	b.n	8001656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f9f6 	bl	8000a10 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001626:	e00f      	b.n	8001648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff f9f2 	bl	8000a10 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d906      	bls.n	8001648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e122      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	4b90      	ldr	r3, [pc, #576]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1e8      	bne.n	8001628 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4b8b      	ldr	r3, [pc, #556]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	4a8a      	ldr	r2, [pc, #552]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8108 	beq.w	8001882 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	2b02      	cmp	r3, #2
 8001678:	f040 80d0 	bne.w	800181c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800167c:	4b83      	ldr	r3, [pc, #524]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	429a      	cmp	r2, r3
 800168e:	d130      	bne.n	80016f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	3b01      	subs	r3, #1
 800169c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d127      	bne.n	80016f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d11f      	bne.n	80016f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016bc:	2a07      	cmp	r2, #7
 80016be:	bf14      	ite	ne
 80016c0:	2201      	movne	r2, #1
 80016c2:	2200      	moveq	r2, #0
 80016c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d113      	bne.n	80016f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	3b01      	subs	r3, #1
 80016d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d06e      	beq.n	80017d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	d069      	beq.n	80017cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016f8:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b7      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001714:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a5c      	ldr	r2, [pc, #368]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800171a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800171e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001720:	f7ff f976 	bl	8000a10 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff f972 	bl	8000a10 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0a4      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800173a:	4b54      	ldr	r3, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_RCC_OscConfig+0x7c8>)
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001756:	3a01      	subs	r2, #1
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001760:	0212      	lsls	r2, r2, #8
 8001762:	4311      	orrs	r1, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001768:	0852      	lsrs	r2, r2, #1
 800176a:	3a01      	subs	r2, #1
 800176c:	0552      	lsls	r2, r2, #21
 800176e:	4311      	orrs	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001774:	0852      	lsrs	r2, r2, #1
 8001776:	3a01      	subs	r2, #1
 8001778:	0652      	lsls	r2, r2, #25
 800177a:	4311      	orrs	r1, r2
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001780:	0912      	lsrs	r2, r2, #4
 8001782:	0452      	lsls	r2, r2, #17
 8001784:	430a      	orrs	r2, r1
 8001786:	4941      	ldr	r1, [pc, #260]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001788:	4313      	orrs	r3, r2
 800178a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3e      	ldr	r2, [pc, #248]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001798:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017a4:	f7ff f934 	bl	8000a10 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f930 	bl	8000a10 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e062      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017ca:	e05a      	b.n	8001882 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e059      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d152      	bne.n	8001882 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2a      	ldr	r2, [pc, #168]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 80017ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017f4:	f7ff f90c 	bl	8000a10 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff f908 	bl	8000a10 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e03a      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x734>
 800181a:	e032      	b.n	8001882 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d02d      	beq.n	800187e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800182c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001840:	f023 0303 	bic.w	r3, r3, #3
 8001844:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 800184c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001854:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f8db 	bl	8000a10 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800185e:	f7ff f8d7 	bl	8000a10 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e009      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x7c4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x796>
 800187c:	e001      	b.n	8001882 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40021000 	.word	0x40021000
 8001890:	f99d808c 	.word	0xf99d808c

08001894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0c8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d910      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 0207 	bic.w	r2, r3, #7
 80018be:	4961      	ldr	r1, [pc, #388]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0b0      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d04c      	beq.n	800197e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ec:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d121      	bne.n	800193c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e09e      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d107      	bne.n	8001914 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d115      	bne.n	800193c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e092      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e086      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e07e      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 0203 	bic.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	493f      	ldr	r1, [pc, #252]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800194e:	f7ff f85f 	bl	8000a10 <HAL_GetTick>
 8001952:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001954:	e00a      	b.n	800196c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f7ff f85b 	bl	8000a10 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e066      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 020c 	and.w	r2, r3, #12
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	429a      	cmp	r2, r3
 800197c:	d1eb      	bne.n	8001956 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	492c      	ldr	r1, [pc, #176]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d210      	bcs.n	80019cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 0207 	bic.w	r2, r3, #7
 80019b2:	4924      	ldr	r1, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1b0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e036      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4918      	ldr	r1, [pc, #96]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d009      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4910      	ldr	r1, [pc, #64]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0a:	f000 f825 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_ClockConfig+0x1b4>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	490c      	ldr	r1, [pc, #48]	; (8001a4c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	5ccb      	ldrb	r3, [r1, r3]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe ff9e 	bl	8000970 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a38:	7afb      	ldrb	r3, [r7, #11]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	08003108 	.word	0x08003108
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x34>
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d121      	bne.n	8001aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d11e      	bne.n	8001aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	0a1b      	lsrs	r3, r3, #8
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aa8:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ab4:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10d      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e004      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d134      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0xa6>
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d003      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0xac>
 8001afc:	e005      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b00:	617b      	str	r3, [r7, #20]
      break;
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b06:	617b      	str	r3, [r7, #20]
      break;
 8001b08:	e002      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	617b      	str	r3, [r7, #20]
      break;
 8001b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	fb02 f203 	mul.w	r2, r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	0e5b      	lsrs	r3, r3, #25
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	3301      	adds	r3, #1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b50:	69bb      	ldr	r3, [r7, #24]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003120 	.word	0x08003120
 8001b68:	00f42400 	.word	0x00f42400
 8001b6c:	007a1200 	.word	0x007a1200

08001b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4904      	ldr	r1, [pc, #16]	; (8001bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08003118 	.word	0x08003118

08001bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001bb8:	f7ff ffda 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0adb      	lsrs	r3, r3, #11
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	08003118 	.word	0x08003118

08001be0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bf8:	f7ff fa02 	bl	8001000 <HAL_PWREx_GetVoltageRange>
 8001bfc:	6178      	str	r0, [r7, #20]
 8001bfe:	e014      	b.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c18:	f7ff f9f2 	bl	8001000 <HAL_PWREx_GetVoltageRange>
 8001c1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c30:	d10b      	bne.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b80      	cmp	r3, #128	; 0x80
 8001c36:	d919      	bls.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c3c:	d902      	bls.n	8001c44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c3e:	2302      	movs	r3, #2
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	e013      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c44:	2301      	movs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e010      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b80      	cmp	r3, #128	; 0x80
 8001c4e:	d902      	bls.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c50:	2303      	movs	r3, #3
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e00a      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b80      	cmp	r3, #128	; 0x80
 8001c5a:	d102      	bne.n	8001c62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	e004      	b.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b70      	cmp	r3, #112	; 0x70
 8001c66:	d101      	bne.n	8001c6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c68:	2301      	movs	r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 0207 	bic.w	r2, r3, #7
 8001c74:	4909      	ldr	r1, [pc, #36]	; (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d001      	beq.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ca8:	2300      	movs	r3, #0
 8001caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cac:	2300      	movs	r3, #0
 8001cae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d041      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cc4:	d02a      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cca:	d824      	bhi.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ccc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cd0:	d008      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001cd6:	d81e      	bhi.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce0:	d010      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ce2:	e018      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ce4:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	4a85      	ldr	r2, [pc, #532]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf0:	e015      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fabb 	bl	8002274 <RCCEx_PLLSAI1_Config>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d02:	e00c      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3320      	adds	r3, #32
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fba6 	bl	800245c <RCCEx_PLLSAI2_Config>
 8001d10:	4603      	mov	r3, r0
 8001d12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d14:	e003      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	74fb      	strb	r3, [r7, #19]
      break;
 8001d1a:	e000      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d1e:	7cfb      	ldrb	r3, [r7, #19]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d24:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d32:	4973      	ldr	r1, [pc, #460]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d3a:	e001      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d3c:	7cfb      	ldrb	r3, [r7, #19]
 8001d3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d041      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d54:	d02a      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d5a:	d824      	bhi.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d60:	d008      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d66:	d81e      	bhi.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d010      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d72:	e018      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d74:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4a61      	ldr	r2, [pc, #388]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d80:	e015      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fa73 	bl	8002274 <RCCEx_PLLSAI1_Config>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d92:	e00c      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3320      	adds	r3, #32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fb5e 	bl	800245c <RCCEx_PLLSAI2_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001da4:	e003      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	74fb      	strb	r3, [r7, #19]
      break;
 8001daa:	e000      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001db4:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc2:	494f      	ldr	r1, [pc, #316]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001dca:	e001      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80a0 	beq.w	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00d      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfc:	4a40      	ldr	r2, [pc, #256]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6593      	str	r3, [r2, #88]	; 0x58
 8001e04:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e10:	2301      	movs	r3, #1
 8001e12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e14:	4b3b      	ldr	r3, [pc, #236]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a3a      	ldr	r2, [pc, #232]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fdf6 	bl	8000a10 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e26:	e009      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e28:	f7fe fdf2 	bl	8000a10 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d902      	bls.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	74fb      	strb	r3, [r7, #19]
        break;
 8001e3a:	e005      	b.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e3c:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ef      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e48:	7cfb      	ldrb	r3, [r7, #19]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d15c      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01f      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d019      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e6c:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d016      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fdb1 	bl	8000a10 <HAL_GetTick>
 8001eae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb0:	e00b      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe fdad 	bl	8000a10 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d902      	bls.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	74fb      	strb	r3, [r7, #19]
            break;
 8001ec8:	e006      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ec      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eee:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ef6:	e009      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	74bb      	strb	r3, [r7, #18]
 8001efc:	e006      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0c:	7c7b      	ldrb	r3, [r7, #17]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b9e      	ldr	r3, [pc, #632]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a9d      	ldr	r2, [pc, #628]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2a:	4b98      	ldr	r3, [pc, #608]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f023 0203 	bic.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	4994      	ldr	r1, [pc, #592]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4c:	4b8f      	ldr	r3, [pc, #572]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 020c 	bic.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	498c      	ldr	r1, [pc, #560]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f6e:	4b87      	ldr	r3, [pc, #540]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4983      	ldr	r1, [pc, #524]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f90:	4b7e      	ldr	r3, [pc, #504]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	497b      	ldr	r1, [pc, #492]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc0:	4972      	ldr	r1, [pc, #456]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	496a      	ldr	r1, [pc, #424]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	4961      	ldr	r1, [pc, #388]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002018:	4b5c      	ldr	r3, [pc, #368]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002026:	4959      	ldr	r1, [pc, #356]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002048:	4950      	ldr	r1, [pc, #320]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800205c:	4b4b      	ldr	r3, [pc, #300]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	4948      	ldr	r1, [pc, #288]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800207e:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	493f      	ldr	r1, [pc, #252]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d028      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020a0:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ae:	4937      	ldr	r1, [pc, #220]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020be:	d106      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c0:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a31      	ldr	r2, [pc, #196]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ca:	60d3      	str	r3, [r2, #12]
 80020cc:	e011      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f8c8 	bl	8002274 <RCCEx_PLLSAI1_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d028      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	491f      	ldr	r1, [pc, #124]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800211c:	d106      	bne.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002128:	60d3      	str	r3, [r2, #12]
 800212a:	e011      	b.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002134:	d10c      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3304      	adds	r3, #4
 800213a:	2101      	movs	r1, #1
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f899 	bl	8002274 <RCCEx_PLLSAI1_Config>
 8002142:	4603      	mov	r3, r0
 8002144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02b      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216a:	4908      	ldr	r1, [pc, #32]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217a:	d109      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a02      	ldr	r2, [pc, #8]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002186:	60d3      	str	r3, [r2, #12]
 8002188:	e014      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002198:	d10c      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2101      	movs	r1, #1
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f867 	bl	8002274 <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d02f      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ce:	4928      	ldr	r1, [pc, #160]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021de:	d10d      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	2102      	movs	r1, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f844 	bl	8002274 <RCCEx_PLLSAI1_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d014      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	74bb      	strb	r3, [r7, #18]
 80021fa:	e011      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002204:	d10c      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3320      	adds	r3, #32
 800220a:	2102      	movs	r1, #2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f925 	bl	800245c <RCCEx_PLLSAI2_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800223a:	490d      	ldr	r1, [pc, #52]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225e:	4904      	ldr	r1, [pc, #16]	; (8002270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002266:	7cbb      	ldrb	r3, [r7, #18]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000

08002274 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002282:	4b75      	ldr	r3, [pc, #468]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d018      	beq.n	80022c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0203 	and.w	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d10d      	bne.n	80022ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
       ||
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022a6:	4b6c      	ldr	r3, [pc, #432]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
       ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d047      	beq.n	800234a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	e044      	b.n	800234a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d018      	beq.n	80022fa <RCCEx_PLLSAI1_Config+0x86>
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d825      	bhi.n	8002318 <RCCEx_PLLSAI1_Config+0xa4>
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d002      	beq.n	80022d6 <RCCEx_PLLSAI1_Config+0x62>
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d009      	beq.n	80022e8 <RCCEx_PLLSAI1_Config+0x74>
 80022d4:	e020      	b.n	8002318 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022d6:	4b60      	ldr	r3, [pc, #384]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11d      	bne.n	800231e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e6:	e01a      	b.n	800231e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022e8:	4b5b      	ldr	r3, [pc, #364]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f8:	e013      	b.n	8002322 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022fa:	4b57      	ldr	r3, [pc, #348]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10f      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002306:	4b54      	ldr	r3, [pc, #336]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002316:	e006      	b.n	8002326 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      break;
 800231c:	e004      	b.n	8002328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800231e:	bf00      	nop
 8002320:	e002      	b.n	8002328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002322:	bf00      	nop
 8002324:	e000      	b.n	8002328 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002326:	bf00      	nop
    }

    if(status == HAL_OK)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10d      	bne.n	800234a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800232e:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	430b      	orrs	r3, r1
 8002344:	4944      	ldr	r1, [pc, #272]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d17d      	bne.n	800244c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a40      	ldr	r2, [pc, #256]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002356:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800235a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800235c:	f7fe fb58 	bl	8000a10 <HAL_GetTick>
 8002360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002362:	e009      	b.n	8002378 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002364:	f7fe fb54 	bl	8000a10 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d902      	bls.n	8002378 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	73fb      	strb	r3, [r7, #15]
        break;
 8002376:	e005      	b.n	8002384 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002378:	4b37      	ldr	r3, [pc, #220]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ef      	bne.n	8002364 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d160      	bne.n	800244c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d111      	bne.n	80023b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6892      	ldr	r2, [r2, #8]
 80023a0:	0211      	lsls	r1, r2, #8
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	0912      	lsrs	r2, r2, #4
 80023a8:	0452      	lsls	r2, r2, #17
 80023aa:	430a      	orrs	r2, r1
 80023ac:	492a      	ldr	r1, [pc, #168]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	610b      	str	r3, [r1, #16]
 80023b2:	e027      	b.n	8002404 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d112      	bne.n	80023e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80023c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6892      	ldr	r2, [r2, #8]
 80023ca:	0211      	lsls	r1, r2, #8
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6912      	ldr	r2, [r2, #16]
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0552      	lsls	r2, r2, #21
 80023d6:	430a      	orrs	r2, r1
 80023d8:	491f      	ldr	r1, [pc, #124]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	610b      	str	r3, [r1, #16]
 80023de:	e011      	b.n	8002404 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6892      	ldr	r2, [r2, #8]
 80023f0:	0211      	lsls	r1, r2, #8
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6952      	ldr	r2, [r2, #20]
 80023f6:	0852      	lsrs	r2, r2, #1
 80023f8:	3a01      	subs	r2, #1
 80023fa:	0652      	lsls	r2, r2, #25
 80023fc:	430a      	orrs	r2, r1
 80023fe:	4916      	ldr	r1, [pc, #88]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a13      	ldr	r2, [pc, #76]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800240e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fafe 	bl	8000a10 <HAL_GetTick>
 8002414:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002416:	e009      	b.n	800242c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002418:	f7fe fafa 	bl	8000a10 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d902      	bls.n	800242c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	73fb      	strb	r3, [r7, #15]
          break;
 800242a:	e005      	b.n	8002438 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ef      	beq.n	8002418 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4904      	ldr	r1, [pc, #16]	; (8002458 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800246a:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d018      	beq.n	80024a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0203 	and.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d10d      	bne.n	80024a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
       ||
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800248e:	4b61      	ldr	r3, [pc, #388]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
       ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d047      	beq.n	8002532 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
 80024a6:	e044      	b.n	8002532 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d018      	beq.n	80024e2 <RCCEx_PLLSAI2_Config+0x86>
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d825      	bhi.n	8002500 <RCCEx_PLLSAI2_Config+0xa4>
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <RCCEx_PLLSAI2_Config+0x62>
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d009      	beq.n	80024d0 <RCCEx_PLLSAI2_Config+0x74>
 80024bc:	e020      	b.n	8002500 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024be:	4b55      	ldr	r3, [pc, #340]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d11d      	bne.n	8002506 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ce:	e01a      	b.n	8002506 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d116      	bne.n	800250a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e0:	e013      	b.n	800250a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024e2:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ee:	4b49      	ldr	r3, [pc, #292]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024fe:	e006      	b.n	800250e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
      break;
 8002504:	e004      	b.n	8002510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002506:	bf00      	nop
 8002508:	e002      	b.n	8002510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800250a:	bf00      	nop
 800250c:	e000      	b.n	8002510 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800250e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6819      	ldr	r1, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	430b      	orrs	r3, r1
 800252c:	4939      	ldr	r1, [pc, #228]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800252e:	4313      	orrs	r3, r2
 8002530:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d167      	bne.n	8002608 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002538:	4b36      	ldr	r3, [pc, #216]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a35      	ldr	r2, [pc, #212]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002544:	f7fe fa64 	bl	8000a10 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800254a:	e009      	b.n	8002560 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800254c:	f7fe fa60 	bl	8000a10 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	73fb      	strb	r3, [r7, #15]
        break;
 800255e:	e005      	b.n	800256c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002560:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1ef      	bne.n	800254c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d14a      	bne.n	8002608 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	0211      	lsls	r1, r2, #8
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	0912      	lsrs	r2, r2, #4
 8002590:	0452      	lsls	r2, r2, #17
 8002592:	430a      	orrs	r2, r1
 8002594:	491f      	ldr	r1, [pc, #124]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	614b      	str	r3, [r1, #20]
 800259a:	e011      	b.n	80025c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6892      	ldr	r2, [r2, #8]
 80025ac:	0211      	lsls	r1, r2, #8
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6912      	ldr	r2, [r2, #16]
 80025b2:	0852      	lsrs	r2, r2, #1
 80025b4:	3a01      	subs	r2, #1
 80025b6:	0652      	lsls	r2, r2, #25
 80025b8:	430a      	orrs	r2, r1
 80025ba:	4916      	ldr	r1, [pc, #88]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fa20 	bl	8000a10 <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025d2:	e009      	b.n	80025e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025d4:	f7fe fa1c 	bl	8000a10 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d902      	bls.n	80025e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	73fb      	strb	r3, [r7, #15]
          break;
 80025e6:	e005      	b.n	80025f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ef      	beq.n	80025d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	4904      	ldr	r1, [pc, #16]	; (8002614 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e040      	b.n	80026ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe f8f2 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	; 0x24
 8002644:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f8c0 	bl	80027dc <UART_SetConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e022      	b.n	80026ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fb3e 	bl	8002cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fbc5 	bl	8002e34 <UART_CheckIdleState>
 80026aa:	4603      	mov	r3, r0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	f040 8082 	bne.w	80027d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_UART_Transmit+0x26>
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e07a      	b.n	80027d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_UART_Transmit+0x38>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e073      	b.n	80027d4 <HAL_UART_Transmit+0x120>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2221      	movs	r2, #33	; 0x21
 8002700:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002702:	f7fe f985 	bl	8000a10 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002720:	d108      	bne.n	8002734 <HAL_UART_Transmit+0x80>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	e003      	b.n	800273c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002744:	e02d      	b.n	80027a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2200      	movs	r2, #0
 800274e:	2180      	movs	r1, #128	; 0x80
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fbb8 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e039      	b.n	80027d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002772:	b292      	uxth	r2, r2
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	3302      	adds	r3, #2
 800277a:	61bb      	str	r3, [r7, #24]
 800277c:	e008      	b.n	8002790 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b292      	uxth	r2, r2
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1cb      	bne.n	8002746 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2140      	movs	r1, #64	; 0x40
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb84 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e005      	b.n	80027d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	e000      	b.n	80027d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027d2:	2302      	movs	r3, #2
  }
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027dc:	b5b0      	push	{r4, r5, r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4bad      	ldr	r3, [pc, #692]	; (8002abc <UART_SetConfig+0x2e0>)
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	69f9      	ldr	r1, [r7, #28]
 8002810:	430b      	orrs	r3, r1
 8002812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4aa2      	ldr	r2, [pc, #648]	; (8002ac0 <UART_SetConfig+0x2e4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	4313      	orrs	r3, r2
 8002842:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a99      	ldr	r2, [pc, #612]	; (8002ac4 <UART_SetConfig+0x2e8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d121      	bne.n	80028a6 <UART_SetConfig+0xca>
 8002862:	4b99      	ldr	r3, [pc, #612]	; (8002ac8 <UART_SetConfig+0x2ec>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b03      	cmp	r3, #3
 800286e:	d817      	bhi.n	80028a0 <UART_SetConfig+0xc4>
 8002870:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <UART_SetConfig+0x9c>)
 8002872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002876:	bf00      	nop
 8002878:	08002889 	.word	0x08002889
 800287c:	08002895 	.word	0x08002895
 8002880:	0800288f 	.word	0x0800288f
 8002884:	0800289b 	.word	0x0800289b
 8002888:	2301      	movs	r3, #1
 800288a:	76fb      	strb	r3, [r7, #27]
 800288c:	e0e7      	b.n	8002a5e <UART_SetConfig+0x282>
 800288e:	2302      	movs	r3, #2
 8002890:	76fb      	strb	r3, [r7, #27]
 8002892:	e0e4      	b.n	8002a5e <UART_SetConfig+0x282>
 8002894:	2304      	movs	r3, #4
 8002896:	76fb      	strb	r3, [r7, #27]
 8002898:	e0e1      	b.n	8002a5e <UART_SetConfig+0x282>
 800289a:	2308      	movs	r3, #8
 800289c:	76fb      	strb	r3, [r7, #27]
 800289e:	e0de      	b.n	8002a5e <UART_SetConfig+0x282>
 80028a0:	2310      	movs	r3, #16
 80028a2:	76fb      	strb	r3, [r7, #27]
 80028a4:	e0db      	b.n	8002a5e <UART_SetConfig+0x282>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a88      	ldr	r2, [pc, #544]	; (8002acc <UART_SetConfig+0x2f0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d132      	bne.n	8002916 <UART_SetConfig+0x13a>
 80028b0:	4b85      	ldr	r3, [pc, #532]	; (8002ac8 <UART_SetConfig+0x2ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d828      	bhi.n	8002910 <UART_SetConfig+0x134>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <UART_SetConfig+0xe8>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028f9 	.word	0x080028f9
 80028c8:	08002911 	.word	0x08002911
 80028cc:	08002911 	.word	0x08002911
 80028d0:	08002911 	.word	0x08002911
 80028d4:	08002905 	.word	0x08002905
 80028d8:	08002911 	.word	0x08002911
 80028dc:	08002911 	.word	0x08002911
 80028e0:	08002911 	.word	0x08002911
 80028e4:	080028ff 	.word	0x080028ff
 80028e8:	08002911 	.word	0x08002911
 80028ec:	08002911 	.word	0x08002911
 80028f0:	08002911 	.word	0x08002911
 80028f4:	0800290b 	.word	0x0800290b
 80028f8:	2300      	movs	r3, #0
 80028fa:	76fb      	strb	r3, [r7, #27]
 80028fc:	e0af      	b.n	8002a5e <UART_SetConfig+0x282>
 80028fe:	2302      	movs	r3, #2
 8002900:	76fb      	strb	r3, [r7, #27]
 8002902:	e0ac      	b.n	8002a5e <UART_SetConfig+0x282>
 8002904:	2304      	movs	r3, #4
 8002906:	76fb      	strb	r3, [r7, #27]
 8002908:	e0a9      	b.n	8002a5e <UART_SetConfig+0x282>
 800290a:	2308      	movs	r3, #8
 800290c:	76fb      	strb	r3, [r7, #27]
 800290e:	e0a6      	b.n	8002a5e <UART_SetConfig+0x282>
 8002910:	2310      	movs	r3, #16
 8002912:	76fb      	strb	r3, [r7, #27]
 8002914:	e0a3      	b.n	8002a5e <UART_SetConfig+0x282>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6d      	ldr	r2, [pc, #436]	; (8002ad0 <UART_SetConfig+0x2f4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d120      	bne.n	8002962 <UART_SetConfig+0x186>
 8002920:	4b69      	ldr	r3, [pc, #420]	; (8002ac8 <UART_SetConfig+0x2ec>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800292a:	2b30      	cmp	r3, #48	; 0x30
 800292c:	d013      	beq.n	8002956 <UART_SetConfig+0x17a>
 800292e:	2b30      	cmp	r3, #48	; 0x30
 8002930:	d814      	bhi.n	800295c <UART_SetConfig+0x180>
 8002932:	2b20      	cmp	r3, #32
 8002934:	d009      	beq.n	800294a <UART_SetConfig+0x16e>
 8002936:	2b20      	cmp	r3, #32
 8002938:	d810      	bhi.n	800295c <UART_SetConfig+0x180>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <UART_SetConfig+0x168>
 800293e:	2b10      	cmp	r3, #16
 8002940:	d006      	beq.n	8002950 <UART_SetConfig+0x174>
 8002942:	e00b      	b.n	800295c <UART_SetConfig+0x180>
 8002944:	2300      	movs	r3, #0
 8002946:	76fb      	strb	r3, [r7, #27]
 8002948:	e089      	b.n	8002a5e <UART_SetConfig+0x282>
 800294a:	2302      	movs	r3, #2
 800294c:	76fb      	strb	r3, [r7, #27]
 800294e:	e086      	b.n	8002a5e <UART_SetConfig+0x282>
 8002950:	2304      	movs	r3, #4
 8002952:	76fb      	strb	r3, [r7, #27]
 8002954:	e083      	b.n	8002a5e <UART_SetConfig+0x282>
 8002956:	2308      	movs	r3, #8
 8002958:	76fb      	strb	r3, [r7, #27]
 800295a:	e080      	b.n	8002a5e <UART_SetConfig+0x282>
 800295c:	2310      	movs	r3, #16
 800295e:	76fb      	strb	r3, [r7, #27]
 8002960:	e07d      	b.n	8002a5e <UART_SetConfig+0x282>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a5b      	ldr	r2, [pc, #364]	; (8002ad4 <UART_SetConfig+0x2f8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d120      	bne.n	80029ae <UART_SetConfig+0x1d2>
 800296c:	4b56      	ldr	r3, [pc, #344]	; (8002ac8 <UART_SetConfig+0x2ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002976:	2bc0      	cmp	r3, #192	; 0xc0
 8002978:	d013      	beq.n	80029a2 <UART_SetConfig+0x1c6>
 800297a:	2bc0      	cmp	r3, #192	; 0xc0
 800297c:	d814      	bhi.n	80029a8 <UART_SetConfig+0x1cc>
 800297e:	2b80      	cmp	r3, #128	; 0x80
 8002980:	d009      	beq.n	8002996 <UART_SetConfig+0x1ba>
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d810      	bhi.n	80029a8 <UART_SetConfig+0x1cc>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <UART_SetConfig+0x1b4>
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d006      	beq.n	800299c <UART_SetConfig+0x1c0>
 800298e:	e00b      	b.n	80029a8 <UART_SetConfig+0x1cc>
 8002990:	2300      	movs	r3, #0
 8002992:	76fb      	strb	r3, [r7, #27]
 8002994:	e063      	b.n	8002a5e <UART_SetConfig+0x282>
 8002996:	2302      	movs	r3, #2
 8002998:	76fb      	strb	r3, [r7, #27]
 800299a:	e060      	b.n	8002a5e <UART_SetConfig+0x282>
 800299c:	2304      	movs	r3, #4
 800299e:	76fb      	strb	r3, [r7, #27]
 80029a0:	e05d      	b.n	8002a5e <UART_SetConfig+0x282>
 80029a2:	2308      	movs	r3, #8
 80029a4:	76fb      	strb	r3, [r7, #27]
 80029a6:	e05a      	b.n	8002a5e <UART_SetConfig+0x282>
 80029a8:	2310      	movs	r3, #16
 80029aa:	76fb      	strb	r3, [r7, #27]
 80029ac:	e057      	b.n	8002a5e <UART_SetConfig+0x282>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a49      	ldr	r2, [pc, #292]	; (8002ad8 <UART_SetConfig+0x2fc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d125      	bne.n	8002a04 <UART_SetConfig+0x228>
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <UART_SetConfig+0x2ec>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029c6:	d017      	beq.n	80029f8 <UART_SetConfig+0x21c>
 80029c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029cc:	d817      	bhi.n	80029fe <UART_SetConfig+0x222>
 80029ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d2:	d00b      	beq.n	80029ec <UART_SetConfig+0x210>
 80029d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d8:	d811      	bhi.n	80029fe <UART_SetConfig+0x222>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <UART_SetConfig+0x20a>
 80029de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e2:	d006      	beq.n	80029f2 <UART_SetConfig+0x216>
 80029e4:	e00b      	b.n	80029fe <UART_SetConfig+0x222>
 80029e6:	2300      	movs	r3, #0
 80029e8:	76fb      	strb	r3, [r7, #27]
 80029ea:	e038      	b.n	8002a5e <UART_SetConfig+0x282>
 80029ec:	2302      	movs	r3, #2
 80029ee:	76fb      	strb	r3, [r7, #27]
 80029f0:	e035      	b.n	8002a5e <UART_SetConfig+0x282>
 80029f2:	2304      	movs	r3, #4
 80029f4:	76fb      	strb	r3, [r7, #27]
 80029f6:	e032      	b.n	8002a5e <UART_SetConfig+0x282>
 80029f8:	2308      	movs	r3, #8
 80029fa:	76fb      	strb	r3, [r7, #27]
 80029fc:	e02f      	b.n	8002a5e <UART_SetConfig+0x282>
 80029fe:	2310      	movs	r3, #16
 8002a00:	76fb      	strb	r3, [r7, #27]
 8002a02:	e02c      	b.n	8002a5e <UART_SetConfig+0x282>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2d      	ldr	r2, [pc, #180]	; (8002ac0 <UART_SetConfig+0x2e4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d125      	bne.n	8002a5a <UART_SetConfig+0x27e>
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <UART_SetConfig+0x2ec>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a1c:	d017      	beq.n	8002a4e <UART_SetConfig+0x272>
 8002a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a22:	d817      	bhi.n	8002a54 <UART_SetConfig+0x278>
 8002a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a28:	d00b      	beq.n	8002a42 <UART_SetConfig+0x266>
 8002a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2e:	d811      	bhi.n	8002a54 <UART_SetConfig+0x278>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <UART_SetConfig+0x260>
 8002a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a38:	d006      	beq.n	8002a48 <UART_SetConfig+0x26c>
 8002a3a:	e00b      	b.n	8002a54 <UART_SetConfig+0x278>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	76fb      	strb	r3, [r7, #27]
 8002a40:	e00d      	b.n	8002a5e <UART_SetConfig+0x282>
 8002a42:	2302      	movs	r3, #2
 8002a44:	76fb      	strb	r3, [r7, #27]
 8002a46:	e00a      	b.n	8002a5e <UART_SetConfig+0x282>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	76fb      	strb	r3, [r7, #27]
 8002a4c:	e007      	b.n	8002a5e <UART_SetConfig+0x282>
 8002a4e:	2308      	movs	r3, #8
 8002a50:	76fb      	strb	r3, [r7, #27]
 8002a52:	e004      	b.n	8002a5e <UART_SetConfig+0x282>
 8002a54:	2310      	movs	r3, #16
 8002a56:	76fb      	strb	r3, [r7, #27]
 8002a58:	e001      	b.n	8002a5e <UART_SetConfig+0x282>
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <UART_SetConfig+0x2e4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	f040 8087 	bne.w	8002b78 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a6a:	7efb      	ldrb	r3, [r7, #27]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d837      	bhi.n	8002ae0 <UART_SetConfig+0x304>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0x29c>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002ae1 	.word	0x08002ae1
 8002a80:	08002aa5 	.word	0x08002aa5
 8002a84:	08002ae1 	.word	0x08002ae1
 8002a88:	08002aab 	.word	0x08002aab
 8002a8c:	08002ae1 	.word	0x08002ae1
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002ae1 	.word	0x08002ae1
 8002a98:	08002ab3 	.word	0x08002ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7ff f874 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	6178      	str	r0, [r7, #20]
        break;
 8002aa2:	e022      	b.n	8002aea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <UART_SetConfig+0x300>)
 8002aa6:	617b      	str	r3, [r7, #20]
        break;
 8002aa8:	e01f      	b.n	8002aea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aaa:	f7fe ffd5 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8002aae:	6178      	str	r0, [r7, #20]
        break;
 8002ab0:	e01b      	b.n	8002aea <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab6:	617b      	str	r3, [r7, #20]
        break;
 8002ab8:	e017      	b.n	8002aea <UART_SetConfig+0x30e>
 8002aba:	bf00      	nop
 8002abc:	efff69f3 	.word	0xefff69f3
 8002ac0:	40008000 	.word	0x40008000
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40004400 	.word	0x40004400
 8002ad0:	40004800 	.word	0x40004800
 8002ad4:	40004c00 	.word	0x40004c00
 8002ad8:	40005000 	.word	0x40005000
 8002adc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	76bb      	strb	r3, [r7, #26]
        break;
 8002ae8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80f1 	beq.w	8002cd4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d305      	bcc.n	8002b0e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d902      	bls.n	8002b14 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	76bb      	strb	r3, [r7, #26]
 8002b12:	e0df      	b.n	8002cd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	020b      	lsls	r3, r1, #8
 8002b26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b2a:	0202      	lsls	r2, r0, #8
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6849      	ldr	r1, [r1, #4]
 8002b30:	0849      	lsrs	r1, r1, #1
 8002b32:	4608      	mov	r0, r1
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	1814      	adds	r4, r2, r0
 8002b3a:	eb43 0501 	adc.w	r5, r3, r1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	4620      	mov	r0, r4
 8002b4a:	4629      	mov	r1, r5
 8002b4c:	f7fd fb44 	bl	80001d8 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5e:	d308      	bcc.n	8002b72 <UART_SetConfig+0x396>
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b66:	d204      	bcs.n	8002b72 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	60da      	str	r2, [r3, #12]
 8002b70:	e0b0      	b.n	8002cd4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	76bb      	strb	r3, [r7, #26]
 8002b76:	e0ad      	b.n	8002cd4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b80:	d15b      	bne.n	8002c3a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002b82:	7efb      	ldrb	r3, [r7, #27]
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d828      	bhi.n	8002bda <UART_SetConfig+0x3fe>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <UART_SetConfig+0x3b4>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002bb5 	.word	0x08002bb5
 8002b94:	08002bbd 	.word	0x08002bbd
 8002b98:	08002bc5 	.word	0x08002bc5
 8002b9c:	08002bdb 	.word	0x08002bdb
 8002ba0:	08002bcb 	.word	0x08002bcb
 8002ba4:	08002bdb 	.word	0x08002bdb
 8002ba8:	08002bdb 	.word	0x08002bdb
 8002bac:	08002bdb 	.word	0x08002bdb
 8002bb0:	08002bd3 	.word	0x08002bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7fe ffe8 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	6178      	str	r0, [r7, #20]
        break;
 8002bba:	e013      	b.n	8002be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7fe fffa 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	6178      	str	r0, [r7, #20]
        break;
 8002bc2:	e00f      	b.n	8002be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <UART_SetConfig+0x510>)
 8002bc6:	617b      	str	r3, [r7, #20]
        break;
 8002bc8:	e00c      	b.n	8002be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bca:	f7fe ff45 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8002bce:	6178      	str	r0, [r7, #20]
        break;
 8002bd0:	e008      	b.n	8002be4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bd6:	617b      	str	r3, [r7, #20]
        break;
 8002bd8:	e004      	b.n	8002be4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	76bb      	strb	r3, [r7, #26]
        break;
 8002be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d074      	beq.n	8002cd4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005a      	lsls	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d916      	bls.n	8002c34 <UART_SetConfig+0x458>
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d212      	bcs.n	8002c34 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	89fb      	ldrh	r3, [r7, #14]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	89fa      	ldrh	r2, [r7, #14]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e04f      	b.n	8002cd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	76bb      	strb	r3, [r7, #26]
 8002c38:	e04c      	b.n	8002cd4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c3a:	7efb      	ldrb	r3, [r7, #27]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d828      	bhi.n	8002c92 <UART_SetConfig+0x4b6>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <UART_SetConfig+0x46c>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c93 	.word	0x08002c93
 8002c58:	08002c83 	.word	0x08002c83
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002c93 	.word	0x08002c93
 8002c64:	08002c93 	.word	0x08002c93
 8002c68:	08002c8b 	.word	0x08002c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c6c:	f7fe ff8c 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002c70:	6178      	str	r0, [r7, #20]
        break;
 8002c72:	e013      	b.n	8002c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c74:	f7fe ff9e 	bl	8001bb4 <HAL_RCC_GetPCLK2Freq>
 8002c78:	6178      	str	r0, [r7, #20]
        break;
 8002c7a:	e00f      	b.n	8002c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <UART_SetConfig+0x510>)
 8002c7e:	617b      	str	r3, [r7, #20]
        break;
 8002c80:	e00c      	b.n	8002c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c82:	f7fe fee9 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8002c86:	6178      	str	r0, [r7, #20]
        break;
 8002c88:	e008      	b.n	8002c9c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8e:	617b      	str	r3, [r7, #20]
        break;
 8002c90:	e004      	b.n	8002c9c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	76bb      	strb	r3, [r7, #26]
        break;
 8002c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	085a      	lsrs	r2, r3, #1
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	441a      	add	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b0f      	cmp	r3, #15
 8002cba:	d909      	bls.n	8002cd0 <UART_SetConfig+0x4f4>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc2:	d205      	bcs.n	8002cd0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	e001      	b.n	8002cd4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ce0:	7ebb      	ldrb	r3, [r7, #26]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	00f42400 	.word	0x00f42400

08002cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01a      	beq.n	8002e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dee:	d10a      	bne.n	8002e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e44:	f7fd fde4 	bl	8000a10 <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d10e      	bne.n	8002e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f82d 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e023      	b.n	8002ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d10e      	bne.n	8002ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f817 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e00d      	b.n	8002ebe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b09c      	sub	sp, #112	; 0x70
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	e0a5      	b.n	8003024 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	f000 80a1 	beq.w	8003024 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee2:	f7fd fd95 	bl	8000a10 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d302      	bcc.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d13e      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f0c:	667b      	str	r3, [r7, #100]	; 0x64
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e6      	bne.n	8002ef8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	663b      	str	r3, [r7, #96]	; 0x60
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e5      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e067      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d04f      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f92:	d147      	bne.n	8003024 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f9c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc4:	e841 2300 	strex	r3, r2, [r1]
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e6      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	e853 3f00 	ldrex	r3, [r3]
 8002fde:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3308      	adds	r3, #8
 8002fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ff0:	623a      	str	r2, [r7, #32]
 8002ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	69f9      	ldr	r1, [r7, #28]
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e5      	bne.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e010      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	429a      	cmp	r2, r3
 8003040:	f43f af4a 	beq.w	8002ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3770      	adds	r7, #112	; 0x70
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4d0d      	ldr	r5, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1b64      	subs	r4, r4, r5
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2600      	movs	r6, #0
 800305c:	42a6      	cmp	r6, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4d0b      	ldr	r5, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 f820 	bl	80030a8 <_init>
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2600      	movs	r6, #0
 800306e:	42a6      	cmp	r6, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f855 3b04 	ldr.w	r3, [r5], #4
 8003078:	4798      	blx	r3
 800307a:	3601      	adds	r6, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003082:	4798      	blx	r3
 8003084:	3601      	adds	r6, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	08003158 	.word	0x08003158
 800308c:	08003158 	.word	0x08003158
 8003090:	08003158 	.word	0x08003158
 8003094:	0800315c 	.word	0x0800315c

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <_init>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr

080030b4 <_fini>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr
