
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  0801a638  0801a638  0002a638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b15c  0801b15c  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b15c  0801b15c  0002b15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b164  0801b164  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b164  0801b164  0002b164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b168  0801b168  0002b168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801b16c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801b42c  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801b42c  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f069  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006038  00000000  00000000  0007f359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b60  00000000  00000000  00085398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002918  00000000  00000000  00087ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000312ae  00000000  00000000  0008a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b04f  00000000  00000000  000bbabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001167f0  00000000  00000000  000e6b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd2fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e3e0  00000000  00000000  001fd350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a620 	.word	0x0801a620

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a620 	.word	0x0801a620

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f4e:	801a      	strh	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a21      	ldr	r2, [pc, #132]	; (8000fd8 <_ZN14WobbleBoardAppC1Ev+0x98>)
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f8a3 221a 	strh.w	r2, [r3, #538]	; 0x21a
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
{
}
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	3e4ccccd 	.word	0x3e4ccccd

08000fdc <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f005 f971 	bl	80062cc <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fea:	f001 fd45 	bl	8002a78 <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000fee:	2164      	movs	r1, #100	; 0x64
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fc45 	bl	8001880 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f85e 	bl	80010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000ffc:	f001 f95a 	bl	80022b4 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001000:	200a      	movs	r0, #10
 8001002:	f001 fa12 	bl	800242a <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4618      	mov	r0, r3
 800100c:	f014 fc02 	bl	8015814 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8001010:	7e3b      	ldrb	r3, [r7, #24]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d132      	bne.n	800107c <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001016:	edd7 7a03 	vldr	s15, [r7, #12]
 800101a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8001026:	edd7 7a07 	vldr	s15, [r7, #28]
 800102a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102e:	ee17 2a90 	vmov	r2, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60da      	str	r2, [r3, #12]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001036:	edd7 7a04 	vldr	s15, [r7, #16]
 800103a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800103e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001042:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8001046:	edd7 7a07 	vldr	s15, [r7, #28]
 800104a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104e:	ee17 2a90 	vmov	r2, s15
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	611a      	str	r2, [r3, #16]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001056:	edd7 7a05 	vldr	s15, [r7, #20]
 800105a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80010b4 <_ZN14WobbleBoardApp4InitEv+0xd8>
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 8001066:	edd7 7a07 	vldr	s15, [r7, #28]
 800106a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106e:	ee17 2a90 	vmov	r2, s15
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	615a      	str	r2, [r3, #20]

		MagCalStatus = 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	721a      	strb	r2, [r3, #8]
	}

	DWTInit();
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 fb5b 	bl	8001738 <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8001082:	f000 fdf3 	bl	8001c6c <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	if(Enable6XMotionFusion == 1U)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <_ZN14WobbleBoardApp4InitEv+0xc4>
	{
		Enable6AxisMotionFusion();
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f000 fbd9 	bl	8001850 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>
 800109e:	e002      	b.n	80010a6 <_ZN14WobbleBoardApp4InitEv+0xca>
	}
	else
	{
		Enable9AxisMotionFusion();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 fbe1 	bl	8001868 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>
	}

	StartDataStreaming();
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fb9e 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	43fa0000 	.word	0x43fa0000

080010b8 <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 80010c0:	f000 ff7e 	bl	8001fc0 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 80010c4:	f000 ff84 	bl	8001fd0 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 80010c8:	f000 ff8a 	bl	8001fe0 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80010cc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80010e4 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 80010d0:	f000 ffe5 	bl	800209e <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f000 fff1 	bl	80020bc <BSP_SENSOR_ACC_SetFullScale>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	42c80000 	.word	0x42c80000

080010e8 <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
//			HandleCMD((TMsg *)&msg_cmd);
//		}
//	}
//

	if (MagCalRequest == 1U)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <_ZN14WobbleBoardApp7ProcessEv+0x44>
	{
		MagCalRequest = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	721a      	strb	r2, [r3, #8]
		MagOffset.x = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
		MagOffset.y = 0;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
		MagOffset.z = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001126:	200a      	movs	r0, #10
 8001128:	f001 f97f 	bl	800242a <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!IsInUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <_ZN14WobbleBoardApp7ProcessEv+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x62>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <_ZN14WobbleBoardApp7ProcessEv+0x64>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <_ZN14WobbleBoardApp7ProcessEv+0x70>
	{
		SensorReadRequest = 1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n User Calibration Mode timer counter: %d \r\n",
//			userCalbirationModeTimerCount);
//		printf("%s", DataOut);
	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(IsInUserCalibrationMode)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
 800115e:	2b00      	cmp	r3, #0
 8001160:	d016      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
	{
		CaptureMotionFXGravityXData();
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fbe8 	bl	8001938 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>

		if(HAL_GetTick() - UserCalibrationTimerTimestamp  >= USER_CALIBRATION_TIME)
 8001168:	f005 fa1a 	bl	80065a0 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	8812      	ldrh	r2, [r2, #0]
 800117a:	4293      	cmp	r3, r2
 800117c:	bf2c      	ite	cs
 800117e:	2301      	movcs	r3, #1
 8001180:	2300      	movcc	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <_ZN14WobbleBoardApp7ProcessEv+0xa8>
		{
			ExitUserCalibrationMode(false);
 8001188:	2100      	movs	r1, #0
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 fcda 	bl	8001b44 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
		}
	}

	if (SensorReadRequest == 1U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <_ZN14WobbleBoardApp7ProcessEv+0xcc>
	{
		SensorReadRequest = 0;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f91a 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200014a8 	.word	0x200014a8

080011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3318      	adds	r3, #24
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 ff3f 	bl	8002050 <BSP_SENSOR_ACC_GetAxes>

	if(MotionDataVerbosityLevel == All)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d116      	bne.n	800120a <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4a>

	//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
	//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
	//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6999      	ldr	r1, [r3, #24]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6a12      	ldr	r2, [r2, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011ee:	9201      	str	r2, [sp, #4]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	460b      	mov	r3, r1
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x54>)
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	f017 f8e7 	bl	80183cc <sniprintf>
		printf("%s", DataOut);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	334c      	adds	r3, #76	; 0x4c
 8001202:	4619      	mov	r1, r3
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x58>)
 8001206:	f017 f875 	bl	80182f4 <iprintf>
	}
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0801a638 	.word	0x0801a638
 8001218:	0801a664 	.word	0x0801a664

0800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3324      	adds	r3, #36	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ff1e 	bl	800206a <BSP_SENSOR_GYR_GetAxes>

	if(MotionDataVerbosityLevel == All)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001234:	2b00      	cmp	r3, #0
 8001236:	d116      	bne.n	8001266 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4a>
	{
	//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
	//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
	//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 800124a:	9201      	str	r2, [sp, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x54>)
 8001252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001256:	f017 f8b9 	bl	80183cc <sniprintf>
		printf("%s", DataOut);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	334c      	adds	r3, #76	; 0x4c
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x58>)
 8001262:	f017 f847 	bl	80182f4 <iprintf>
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0801a668 	.word	0x0801a668
 8001274:	0801a664 	.word	0x0801a664

08001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3330      	adds	r3, #48	; 0x30
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fefd 	bl	8002084 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7a1b      	ldrb	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d16d      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e4:	f103 020a 	add.w	r2, r3, #10
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	63da      	str	r2, [r3, #60]	; 0x3c

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80012ec:	f107 020c 	add.w	r2, r7, #12
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 f888 	bl	800240c <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80012fc:	7e3b      	ldrb	r3, [r7, #24]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d135      	bne.n	800136e <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	721a      	strb	r2, [r3, #8]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 8001318:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 2a90 	vmov	r2, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	60da      	str	r2, [r3, #12]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001328:	edd7 7a04 	vldr	s15, [r7, #16]
 800132c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001338:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800133c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001340:	ee17 2a90 	vmov	r2, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	611a      	str	r2, [r3, #16]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001348:	edd7 7a05 	vldr	s15, [r7, #20]
 800134c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 8001350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001354:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001358:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800135c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	615a      	str	r2, [r3, #20]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001368:	200a      	movs	r0, #10
 800136a:	f001 f86a 	bl	8002442 <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	1ad2      	subs	r2, r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	639a      	str	r2, [r3, #56]	; 0x38

	if(MotionDataVerbosityLevel == All)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d116      	bne.n	80013d0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
	{
	//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
	//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
	//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
					 (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013b4:	9201      	str	r2, [sp, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x168>)
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	f017 f804 	bl	80183cc <sniprintf>
		printf("%s", DataOut);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	334c      	adds	r3, #76	; 0x4c
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x16c>)
 80013cc:	f016 ff92 	bl	80182f4 <iprintf>
	}
}
 80013d0:	bf00      	nop
 80013d2:	3730      	adds	r7, #48	; 0x30
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	3b03126f 	.word	0x3b03126f
 80013dc:	43fa0000 	.word	0x43fa0000
 80013e0:	0801a68c 	.word	0x0801a68c
 80013e4:	0801a664 	.word	0x0801a664

080013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

MFX_output_t * WobbleBoardApp::MotionFXDataHandler()
{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	b0a5      	sub	sp, #148	; 0x94
 80013ee:	af06      	add	r7, sp, #24
 80013f0:	6078      	str	r0, [r7, #4]
	// Get the 3 motion sensor data
	// and potentially write them to the terminal
	// depending on motion verbosity log level
	AccelerometerSensorHandler();
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fee4 	bl	80011c0 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
	GyroSensorHandler();
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff0f 	bl	800121c <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
	MagnetometerSensorHandler();
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff3a 	bl	8001278 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

	MFX_input_t dataIn;
	MFX_input_t* pDataIn = &dataIn;
 8001404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t dataOut;
	MFX_output_t* pDataOut = &dataOut;
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	dataIn.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	dataIn.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	dataIn.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	/* Convert acceleration from [mg] to [g] */
	dataIn.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	ee07 3a90 	vmov	s15, r3
 8001460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001464:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	dataIn.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	dataIn.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001494:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8001714 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x32c>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	dataIn.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	dataIn.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	dataIn.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001718 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x330>
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	/* Run Sensor Fusion algorithm */
	DWTStart();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f93f 	bl	800176c <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pDataIn, pDataOut, MOTION_FX_ENGINE_DELTATIME);
 80014ee:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800171c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x334>
 80014f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014f4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014f6:	f000 ff35 	bl	8002364 <MotionFX_manager_run>
	uint32_t elapsed_time_us = DWTStop();
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f94c 	bl	8001798 <_ZN14WobbleBoardApp7DWTStopEv>
 8001500:	66b8      	str	r0, [r7, #104]	; 0x68
//	(void)memcpy(&Msg->Data[95], (void *) & (pDataOut->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pDataOut->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if((MotionDataVerbosityLevel == All || MotionDataVerbosityLevel == MotionFXOnly) &&
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x130>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001512:	2b01      	cmp	r3, #1
 8001514:	f040 80f7 	bne.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
 8001518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80f3 	beq.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
			(pDataOut != nullptr))
	{
		float motionFXGravityX = pDataOut->gravity[0];
 8001520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	677b      	str	r3, [r7, #116]	; 0x74
		if(motionFXGravityX < 0.0f)
 8001526:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800152a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d505      	bpl.n	8001540 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x158>
		{
			motionFXGravityX *= -1.0f;
 8001534:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001538:	eef1 7a67 	vneg.f32	s15, s15
 800153c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		}

		// Only transmit the motion FX data if it's more than the deadzone
		if(motionFXGravityX > DeadZoneMotionFXGravityX)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8001546:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800154a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	f340 80d8 	ble.w	8001706 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x31e>
		{
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800155c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800155e:	68db      	ldr	r3, [r3, #12]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 800156a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156c:	691b      	ldr	r3, [r3, #16]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffea 	bl	8000548 <__aeabi_f2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
					pDataOut->quaternion[0], pDataOut->quaternion[1], pDataOut->quaternion[2]);
 8001578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157a:	695b      	ldr	r3, [r3, #20]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffe3 	bl	8000548 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800158a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800158e:	e9cd 4500 	strd	r4, r5, [sp]
 8001592:	4a63      	ldr	r2, [pc, #396]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001598:	4630      	mov	r0, r6
 800159a:	f016 ff17 	bl	80183cc <sniprintf>
			printf("%s", DataOut);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	334c      	adds	r3, #76	; 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	485f      	ldr	r0, [pc, #380]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015a6:	f016 fea5 	bl	80182f4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015b2:	681b      	ldr	r3, [r3, #0]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4604      	mov	r4, r0
 80015bc:	460d      	mov	r5, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c0:	685b      	ldr	r3, [r3, #4]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ffc0 	bl	8000548 <__aeabi_f2d>
 80015c8:	4680      	mov	r8, r0
 80015ca:	4689      	mov	r9, r1
					pDataOut->rotation[0], pDataOut->rotation[1], pDataOut->rotation[2]);
 80015cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015ce:	689b      	ldr	r3, [r3, #8]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015e2:	e9cd 4500 	strd	r4, r5, [sp]
 80015e6:	4a50      	ldr	r2, [pc, #320]	; (8001728 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x340>)
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4630      	mov	r0, r6
 80015ee:	f016 feed 	bl	80183cc <sniprintf>
			printf("%s", DataOut);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	334c      	adds	r3, #76	; 0x4c
 80015f6:	4619      	mov	r1, r3
 80015f8:	484a      	ldr	r0, [pc, #296]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80015fa:	f016 fe7b 	bl	80182f4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001606:	69db      	ldr	r3, [r3, #28]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	4604      	mov	r4, r0
 8001610:	460d      	mov	r5, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001614:	6a1b      	ldr	r3, [r3, #32]
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff96 	bl	8000548 <__aeabi_f2d>
 800161c:	4680      	mov	r8, r0
 800161e:	4689      	mov	r9, r1
					pDataOut->gravity[0], pDataOut->gravity[1], pDataOut->gravity[2]);
 8001620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff8f 	bl	8000548 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001632:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001636:	e9cd 4500 	strd	r4, r5, [sp]
 800163a:	4a3c      	ldr	r2, [pc, #240]	; (800172c <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x344>)
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4630      	mov	r0, r6
 8001642:	f016 fec3 	bl	80183cc <sniprintf>
			printf("%s", DataOut);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	334c      	adds	r3, #76	; 0x4c
 800164a:	4619      	mov	r1, r3
 800164c:	4835      	ldr	r0, [pc, #212]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 800164e:	f016 fe51 	bl	80182f4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 064c 	add.w	r6, r3, #76	; 0x4c
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff73 	bl	8000548 <__aeabi_f2d>
 8001662:	4604      	mov	r4, r0
 8001664:	460d      	mov	r5, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff6c 	bl	8000548 <__aeabi_f2d>
 8001670:	4680      	mov	r8, r0
 8001672:	4689      	mov	r9, r1
					pDataOut->linear_acceleration[0], pDataOut->linear_acceleration[1], pDataOut->linear_acceleration[2]);
 8001674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001686:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800168a:	e9cd 4500 	strd	r4, r5, [sp]
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x338>)
 8001690:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001694:	4630      	mov	r0, r6
 8001696:	f016 fe99 	bl	80183cc <sniprintf>
			printf("%s", DataOut);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	334c      	adds	r3, #76	; 0x4c
 800169e:	4619      	mov	r1, r3
 80016a0:	4820      	ldr	r0, [pc, #128]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016a2:	f016 fe27 	bl	80182f4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->heading);
 80016ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff49 	bl	8000548 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	e9cd 2300 	strd	r2, r3, [sp]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x348>)
 80016c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c4:	4620      	mov	r0, r4
 80016c6:	f016 fe81 	bl	80183cc <sniprintf>
			printf("%s", DataOut);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	334c      	adds	r3, #76	; 0x4c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4814      	ldr	r0, [pc, #80]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 80016d2:	f016 fe0f 	bl	80182f4 <iprintf>

			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
					pDataOut->headingErr);
 80016dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff31 	bl	8000548 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9cd 2300 	strd	r2, r3, [sp]
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x34c>)
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4620      	mov	r0, r4
 80016f6:	f016 fe69 	bl	80183cc <sniprintf>
			printf("%s", DataOut);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	334c      	adds	r3, #76	; 0x4c
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x33c>)
 8001702:	f016 fdf7 	bl	80182f4 <iprintf>
		}
	}

	return pDataOut;
 8001706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8001708:	4618      	mov	r0, r3
 800170a:	377c      	adds	r7, #124	; 0x7c
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001712:	bf00      	nop
 8001714:	3a83126f 	.word	0x3a83126f
 8001718:	3b03126f 	.word	0x3b03126f
 800171c:	3c23d70a 	.word	0x3c23d70a
 8001720:	0801a6b8 	.word	0x0801a6b8
 8001724:	0801a664 	.word	0x0801a664
 8001728:	0801a6f0 	.word	0x0801a6f0
 800172c:	0801a728 	.word	0x0801a728
 8001730:	0801a75c 	.word	0x0801a75c
 8001734:	0801a77c 	.word	0x0801a77c

08001738 <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6013      	str	r3, [r2, #0]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000edf0 	.word	0xe000edf0
 8001768:	e0001000 	.word	0xe0001000

0800176c <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6013      	str	r3, [r2, #0]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e0001000 	.word	0xe0001000

08001798 <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e0001000 	.word	0xe0001000
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 80017f0:	f000 fbfe 	bl	8001ff0 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 80017f4:	f000 fc04 	bl	8002000 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 80017f8:	f000 fc0a 	bl	8002010 <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 80017fe:	f008 f99b 	bl	8009b38 <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	SensorsEnabled = 1;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200014a8 	.word	0x200014a8

0800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <_ZN14WobbleBoardApp17StopDataStreamingEv+0x30>)
 800182e:	f008 f9eb 	bl	8009c08 <HAL_TIM_Base_Stop>

	/* Disable all sensors */
	BSP_SENSOR_ACC_Disable();
 8001832:	f000 fbf5 	bl	8002020 <BSP_SENSOR_ACC_Disable>
	BSP_SENSOR_GYR_Disable();
 8001836:	f000 fbfb 	bl	8002030 <BSP_SENSOR_GYR_Disable>
	BSP_SENSOR_MAG_Disable();
 800183a:	f000 fc01 	bl	8002040 <BSP_SENSOR_MAG_Disable>

	SensorsEnabled = 0;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200014a8 	.word	0x200014a8

08001850 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>:

void WobbleBoardApp::Enable6AxisMotionFusion()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_9X();
 8001858:	f000 fdce 	bl	80023f8 <MotionFX_manager_stop_9X>
	MotionFX_manager_start_6X();
 800185c:	f000 fdae 	bl	80023bc <MotionFX_manager_start_6X>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001870:	f000 fdae 	bl	80023d0 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001874:	f000 fdb6 	bl	80023e4 <MotionFX_manager_start_9X>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800188a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800188e:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 8001896:	fba2 2303 	umull	r2, r3, r2, r3
 800189a:	09db      	lsrs	r3, r3, #7
 800189c:	3b01      	subs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80018a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018ce:	f008 f8db 	bl	8009a88 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 80018e2:	f000 fce1 	bl	80022a8 <Error_Handler>
  }
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	10624dd3 	.word	0x10624dd3
 80018f8:	200014a8 	.word	0x200014a8

080018fc <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	if(ShouldStartUserCalibrationMode)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f899 	bl	8001a58 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode(true);
	}
}
 8001926:	e003      	b.n	8001930 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x34>
		ExitUserCalibrationMode(true);
 8001928:	2101      	movs	r1, #1
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f90a 	bl	8001b44 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv>:

void WobbleBoardApp::CaptureMotionFXGravityXData()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	MFX_output_t* pMotionFXData = MotionFXDataHandler();
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fd51 	bl	80013e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>
 8001946:	60f8      	str	r0, [r7, #12]
	if(pMotionFXData != nullptr)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d019      	beq.n	8001982 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x4a>
	{
		MotionFXGravityXBuffer[MotionFXDataBufferIndex] = pMotionFXData->gravity[0];
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	69d2      	ldr	r2, [r2, #28]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	3354      	adds	r3, #84	; 0x54
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	601a      	str	r2, [r3, #0]

		MotionFXDataBufferIndex++;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

		// Make sure we don't exceed the buffer length and wrap around
		// instead to keep grabbing data
		if(MotionFXDataBufferIndex >= NUMBER_OF_MOTIONFX_DATA_SAMPLES)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001976:	2b31      	cmp	r3, #49	; 0x31
 8001978:	dd03      	ble.n	8001982 <_ZN14WobbleBoardApp27CaptureMotionFXGravityXDataEv+0x4a>
		{
			MotionFXDataBufferIndex = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		}
	}
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <_ZN14WobbleBoardApp17CalculateDeadZoneEv>:

// Get the average motion fusion gravity X over a time period
float WobbleBoardApp::CalculateDeadZone()
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af02      	add	r7, sp, #8
 8001992:	6078      	str	r0, [r7, #4]
	float accumulatedMotionFXGravityX = 0.0f;
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b31      	cmp	r3, #49	; 0x31
 80019a2:	dc1f      	bgt.n	80019e4 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x58>
	{
		float motionFusionGravityX = MotionFXGravityXBuffer[i];
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	3354      	adds	r3, #84	; 0x54
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]

		// It's possible that it could be negative and we want to
		// negate that so they don't cancel each other out
		// when accumulating the gravity X
		if(motionFusionGravityX < 0.0f)
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	d505      	bpl.n	80019cc <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x40>
		{
			motionFusionGravityX *= -1.0f;
 80019c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019c4:	eef1 7a67 	vneg.f32	s15, s15
 80019c8:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		accumulatedMotionFXGravityX += motionFusionGravityX;
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e7dc      	b.n	800199e <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x12>
	}

	float averageMotionFXGravityX = accumulatedMotionFXGravityX / NUMBER_OF_MOTIONFX_DATA_SAMPLES;
 80019e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e8:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001a4c <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc0>
 80019ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f0:	edc7 7a02 	vstr	s15, [r7, #8]
	if(averageMotionFXGravityX < MIN_DEADZONE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80019fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80019fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d502      	bpl.n	8001a0e <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0x82>
	{
		averageMotionFXGravityX = MIN_DEADZONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	60bb      	str	r3, [r7, #8]
	}

	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X DeadZone Calculated For User: %.1f\r\n",
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001a14:	68b8      	ldr	r0, [r7, #8]
 8001a16:	f7fe fd97 	bl	8000548 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc4>)
 8001a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f016 fccf 	bl	80183cc <sniprintf>
			averageMotionFXGravityX);
	printf("%s", DataOut);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	334c      	adds	r3, #76	; 0x4c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <_ZN14WobbleBoardApp17CalculateDeadZoneEv+0xc8>)
 8001a36:	f016 fc5d 	bl	80182f4 <iprintf>

	return averageMotionFXGravityX;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	ee07 3a90 	vmov	s15, r3
}
 8001a40:	eeb0 0a67 	vmov.f32	s0, s15
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	42480000 	.word	0x42480000
 8001a50:	0801a7a4 	.word	0x0801a7a4
 8001a54:	0801a664 	.word	0x0801a664

08001a58 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 8001a58:	b5b0      	push	{r4, r5, r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	// we will use this to compare against the new
	// elapsed time every tick cycle to see if we have passed
	// the user calibration time to end the user calibration mode
	UserCalibrationTimerTimestamp = HAL_GetTick();

	IsInUserCalibrationMode = true;
 8001a60:	466b      	mov	r3, sp
 8001a62:	461d      	mov	r5, r3
	std::string printString = "Entered User Calibration Mode\r\n";
 8001a64:	f107 0320 	add.w	r3, r7, #32
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f013 ff20 	bl	80158ae <_ZNSaIcEC1Ev>
 8001a6e:	f107 0220 	add.w	r2, r7, #32
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	4931      	ldr	r1, [pc, #196]	; (8001b3c <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe4>)
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f013 ff85 	bl	8015988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	4618      	mov	r0, r3
 8001a84:	f013 ff14 	bl	80158b0 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f013 ff53 	bl	8015938 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001a92:	4603      	mov	r3, r0
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	char PrintBuffer[printStringLength];
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	1e5c      	subs	r4, r3, #1
 8001a9a:	62bc      	str	r4, [r7, #40]	; 0x28
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	00cb      	lsls	r3, r1, #3
 8001ab0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ab4:	00c2      	lsls	r2, r0, #3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	3301      	adds	r3, #1
 8001aba:	4618      	mov	r0, r3
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00cb      	lsls	r3, r1, #3
 8001aca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001ace:	00c2      	lsls	r2, r0, #3
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	3307      	adds	r3, #7
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	ebad 0d03 	sub.w	sp, sp, r3
 8001ade:	466b      	mov	r3, sp
 8001ae0:	3300      	adds	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
	sprintf(PrintBuffer, printString.c_str());
 8001ae4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	4618      	mov	r0, r3
 8001aec:	f013 ff26 	bl	801593c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4619      	mov	r1, r3
 8001af4:	4620      	mov	r0, r4
 8001af6:	f016 fc9d 	bl	8018434 <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b04:	480e      	ldr	r0, [pc, #56]	; (8001b40 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0xe8>)
 8001b06:	f008 fcf3 	bl	800a4f0 <HAL_UART_Transmit>
	StopDataStreaming();
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fe86 	bl	800181c <_ZN14WobbleBoardApp17StopDataStreamingEv>
	UserCalibrationTimerTimestamp = HAL_GetTick();
 8001b10:	f004 fd46 	bl	80065a0 <HAL_GetTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	IsInUserCalibrationMode = true;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	std::string printString = "Entered User Calibration Mode\r\n";
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f013 fefe 	bl	801592c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b30:	46ad      	mov	sp, r5
}
 8001b32:	bf00      	nop
 8001b34:	3730      	adds	r7, #48	; 0x30
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0801a7e4 	.word	0x0801a7e4
 8001b40:	20001548 	.word	0x20001548

08001b44 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb>:

void WobbleBoardApp::ExitUserCalibrationMode(bool Interrupted)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b08e      	sub	sp, #56	; 0x38
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]

	// Stop the user calibration timer
	//HAL_TIM_Base_Stop(&htim15);

	// Start streaming out the motion data again
	StartDataStreaming();
 8001b50:	466b      	mov	r3, sp
 8001b52:	461d      	mov	r5, r3
	IsInUserCalibrationMode = false;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
	ShouldStartUserCalibrationMode = false;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	if(!Interrupted)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x3c>
		DeadZoneMotionFXGravityX = CalculateDeadZone();
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff0b 	bl	800198c <_ZN14WobbleBoardApp17CalculateDeadZoneEv>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	edc3 7a88 	vstr	s15, [r3, #544]	; 0x220
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	2b31      	cmp	r3, #49	; 0x31
 8001b88:	dc0b      	bgt.n	8001ba2 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x5e>
		MotionFXGravityXBuffer[i] = 0.0f;
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	3354      	adds	r3, #84	; 0x54
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < NUMBER_OF_MOTIONFX_DATA_SAMPLES; i++)
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba0:	e7f0      	b.n	8001b84 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x40>
	std::string printString = "Exited User Calibration Mode\r\n";
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f013 fe81 	bl	80158ae <_ZNSaIcEC1Ev>
 8001bac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	492b      	ldr	r1, [pc, #172]	; (8001c64 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x120>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f013 fee6 	bl	8015988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f013 fe75 	bl	80158b0 <_ZNSaIcED1Ev>
	int printStringLength = printString.length();
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f013 feb4 	bl	8015938 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
	char PrintBuffer[printStringLength];
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	1e5c      	subs	r4, r3, #1
 8001bd8:	62fc      	str	r4, [r7, #44]	; 0x2c
 8001bda:	4623      	mov	r3, r4
 8001bdc:	3301      	adds	r3, #1
 8001bde:	4618      	mov	r0, r3
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	00cb      	lsls	r3, r1, #3
 8001bee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001bf2:	00c2      	lsls	r2, r0, #3
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	00cb      	lsls	r3, r1, #3
 8001c08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c0c:	00c2      	lsls	r2, r0, #3
 8001c0e:	4623      	mov	r3, r4
 8001c10:	3301      	adds	r3, #1
 8001c12:	3307      	adds	r3, #7
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	ebad 0d03 	sub.w	sp, sp, r3
 8001c1c:	466b      	mov	r3, sp
 8001c1e:	3300      	adds	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(PrintBuffer, printString.c_str());
 8001c22:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f013 fe87 	bl	801593c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4619      	mov	r1, r3
 8001c32:	4620      	mov	r0, r4
 8001c34:	f016 fbfe 	bl	8018434 <siprintf>
	HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)PrintBuffer, printStringLength, 5000);
 8001c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c42:	4809      	ldr	r0, [pc, #36]	; (8001c68 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEb+0x124>)
 8001c44:	f008 fc54 	bl	800a4f0 <HAL_UART_Transmit>
	StartDataStreaming();
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff fdcd 	bl	80017e8 <_ZN14WobbleBoardApp18StartDataStreamingEv>
	std::string printString = "Exited User Calibration Mode\r\n";
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4618      	mov	r0, r3
 8001c54:	f013 fe6a 	bl	801592c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c58:	46ad      	mov	sp, r5
}
 8001c5a:	bf00      	nop
 8001c5c:	3738      	adds	r7, #56	; 0x38
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	0801a804 	.word	0x0801a804
 8001c68:	20001548 	.word	0x20001548

08001c6c <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <UART_StartReceiveMsg+0x2c>)
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <UART_StartReceiveMsg+0x30>)
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <UART_StartReceiveMsg+0x2c>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <UART_StartReceiveMsg+0x2c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <UART_StartReceiveMsg+0x30>)
 8001c8e:	4802      	ldr	r0, [pc, #8]	; (8001c98 <UART_StartReceiveMsg+0x2c>)
 8001c90:	f008 fcc2 	bl	800a618 <HAL_UART_Receive_DMA>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20001548 	.word	0x20001548
 8001c9c:	200011c0 	.word	0x200011c0

08001ca0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <MX_CRC_Init+0x40>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	; (8001cdc <MX_CRC_Init+0x3c>)
 8001cca:	f004 fd87 	bl	80067dc <HAL_CRC_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001cd4:	f000 fae8 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200013c8 	.word	0x200013c8
 8001ce0:	40023000 	.word	0x40023000

08001ce4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_CRC_MspInit+0x38>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10b      	bne.n	8001d0e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_CRC_MspInit+0x3c>)
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_CRC_MspInit+0x3c>)
 8001cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d00:	6493      	str	r3, [r2, #72]	; 0x48
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_CRC_MspInit+0x3c>)
 8001d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023000 	.word	0x40023000
 8001d20:	40021000 	.word	0x40021000

08001d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_DMA_Init+0x38>)
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <MX_DMA_Init+0x38>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6493      	str	r3, [r2, #72]	; 0x48
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_DMA_Init+0x38>)
 8001d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2010      	movs	r0, #16
 8001d48:	f004 fd11 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d4c:	2010      	movs	r0, #16
 8001d4e:	f004 fd2a 	bl	80067a6 <HAL_NVIC_EnableIRQ>

}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d8e:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a22      	ldr	r2, [pc, #136]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <MX_GPIO_Init+0xd4>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2120      	movs	r1, #32
 8001dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dde:	f005 fa7d 	bl	80072dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001de8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	480f      	ldr	r0, [pc, #60]	; (8001e38 <MX_GPIO_Init+0xd8>)
 8001dfa:	f004 ffd1 	bl	8006da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f004 ffc2 	bl	8006da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	2028      	movs	r0, #40	; 0x28
 8001e22:	f004 fca4 	bl	800676e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e26:	2028      	movs	r0, #40	; 0x28
 8001e28:	f004 fcbd 	bl	80067a6 <HAL_NVIC_EnableIRQ>

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	48000800 	.word	0x48000800

08001e3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <MX_I2C1_Init+0x78>)
 8001e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <MX_I2C1_Init+0x7c>)
 8001e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e76:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e78:	f005 fa60 	bl	800733c <HAL_I2C_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e82:	f000 fa11 	bl	80022a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e8a:	f006 f803 	bl	8007e94 <HAL_I2CEx_ConfigAnalogFilter>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e94:	f000 fa08 	bl	80022a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_I2C1_Init+0x74>)
 8001e9c:	f006 f845 	bl	8007f2a <HAL_I2CEx_ConfigDigitalFilter>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ea6:	f000 f9ff 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200013ec 	.word	0x200013ec
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	00702991 	.word	0x00702991

08001ebc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0ac      	sub	sp, #176	; 0xb0
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	2288      	movs	r2, #136	; 0x88
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f015 fced 	bl	80178bc <memset>
  if(i2cHandle->Instance==I2C1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a21      	ldr	r2, [pc, #132]	; (8001f6c <HAL_I2C_MspInit+0xb0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d13b      	bne.n	8001f64 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001eec:	2340      	movs	r3, #64	; 0x40
 8001eee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f006 feb3 	bl	8008c64 <HAL_RCCEx_PeriphCLKConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f04:	f000 f9d0 	bl	80022a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_I2C_MspInit+0xb4>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	4a18      	ldr	r2, [pc, #96]	; (8001f70 <HAL_I2C_MspInit+0xb4>)
 8001f0e:	f043 0302 	orr.w	r3, r3, #2
 8001f12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_I2C_MspInit+0xb4>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f44:	4619      	mov	r1, r3
 8001f46:	480b      	ldr	r0, [pc, #44]	; (8001f74 <HAL_I2C_MspInit+0xb8>)
 8001f48:	f004 ff2a 	bl	8006da0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_I2C_MspInit+0xb4>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_I2C_MspInit+0xb4>)
 8001f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f56:	6593      	str	r3, [r2, #88]	; 0x58
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_I2C_MspInit+0xb4>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f64:	bf00      	nop
 8001f66:	37b0      	adds	r7, #176	; 0xb0
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40005400 	.word	0x40005400
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48000400 	.word	0x48000400

08001f78 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_I2C_MspDeInit+0x3c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10f      	bne.n	8001faa <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_I2C_MspDeInit+0x40>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_I2C_MspDeInit+0x40>)
 8001f90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f94:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001f96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <HAL_I2C_MspDeInit+0x44>)
 8001f9c:	f005 f8aa 	bl	80070f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001fa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <HAL_I2C_MspDeInit+0x44>)
 8001fa6:	f005 f8a5 	bl	80070f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000400 	.word	0x48000400

08001fc0 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f003 fd2e 	bl	8005a28 <IKS01A2_MOTION_SENSOR_Init>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f003 fd26 	bl	8005a28 <IKS01A2_MOTION_SENSOR_Init>
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f003 fd1e 	bl	8005a28 <IKS01A2_MOTION_SENSOR_Init>
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f003 fe12 	bl	8005c20 <IKS01A2_MOTION_SENSOR_Enable>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002004:	2101      	movs	r1, #1
 8002006:	2000      	movs	r0, #0
 8002008:	f003 fe0a 	bl	8005c20 <IKS01A2_MOTION_SENSOR_Enable>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002014:	2104      	movs	r1, #4
 8002016:	2002      	movs	r0, #2
 8002018:	f003 fe02 	bl	8005c20 <IKS01A2_MOTION_SENSOR_Enable>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8002024:	2102      	movs	r1, #2
 8002026:	2000      	movs	r0, #0
 8002028:	f003 fe3c 	bl	8005ca4 <IKS01A2_MOTION_SENSOR_Disable>
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}

08002030 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8002034:	2101      	movs	r1, #1
 8002036:	2000      	movs	r0, #0
 8002038:	f003 fe34 	bl	8005ca4 <IKS01A2_MOTION_SENSOR_Disable>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8002044:	2104      	movs	r1, #4
 8002046:	2002      	movs	r0, #2
 8002048:	f003 fe2c 	bl	8005ca4 <IKS01A2_MOTION_SENSOR_Disable>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	2102      	movs	r1, #2
 800205c:	2000      	movs	r0, #0
 800205e:	f003 fe63 	bl	8005d28 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	2101      	movs	r1, #1
 8002076:	2000      	movs	r0, #0
 8002078:	f003 fe56 	bl	8005d28 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	2104      	movs	r1, #4
 8002090:	2002      	movs	r0, #2
 8002092:	f003 fe49 	bl	8005d28 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 80020a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80020ac:	2102      	movs	r1, #2
 80020ae:	2000      	movs	r0, #0
 80020b0:	f003 fe7e 	bl	8005db0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	2102      	movs	r1, #2
 80020c8:	2000      	movs	r0, #0
 80020ca:	f003 feb7 	bl	8005e3c <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	226e      	movs	r2, #110	; 0x6e
 80020e2:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3301      	adds	r3, #1
 80020e8:	2277      	movs	r2, #119	; 0x77
 80020ea:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3302      	adds	r3, #2
 80020f0:	2275      	movs	r2, #117	; 0x75
 80020f2:	701a      	strb	r2, [r3, #0]
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	226e      	movs	r2, #110	; 0x6e
 800210c:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3301      	adds	r3, #1
 8002112:	2277      	movs	r2, #119	; 0x77
 8002114:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3302      	adds	r3, #2
 800211a:	2275      	movs	r2, #117	; 0x75
 800211c:	701a      	strb	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	226e      	movs	r2, #110	; 0x6e
 8002136:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3301      	adds	r3, #1
 800213c:	2265      	movs	r2, #101	; 0x65
 800213e:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3302      	adds	r3, #2
 8002144:	2275      	movs	r2, #117	; 0x75
 8002146:	701a      	strb	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002154:	b598      	push	{r3, r4, r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002158:	f004 f9b2 	bl	80064c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800215c:	f000 f82a 	bl	80021b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002160:	f7ff fdfe 	bl	8001d60 <MX_GPIO_Init>
  MX_DMA_Init();
 8002164:	f7ff fdde 	bl	8001d24 <MX_DMA_Init>
  MX_CRC_Init();
 8002168:	f7ff fd9a 	bl	8001ca0 <MX_CRC_Init>
  MX_RTC_Init();
 800216c:	f000 f976 	bl	800245c <MX_RTC_Init>
  MX_TIM15_Init();
 8002170:	f000 fcd0 	bl	8002b14 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8002174:	f44f 700a 	mov.w	r0, #552	; 0x228
 8002178:	f013 fb88 	bl	801588c <_Znwj>
 800217c:	4603      	mov	r3, r0
 800217e:	461c      	mov	r4, r3
 8002180:	4620      	mov	r0, r4
 8002182:	f7fe fedd 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <main+0x5c>)
 8002188:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <main+0x5c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <main+0x48>
  {
	  wobbleBoardApp->Init();
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <main+0x5c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff20 	bl	8000fdc <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <main+0x5c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0fb      	beq.n	800219c <main+0x48>
	  {
		  wobbleBoardApp->Process();
 80021a4:	4b02      	ldr	r3, [pc, #8]	; (80021b0 <main+0x5c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe ff9d 	bl	80010e8 <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 80021ae:	e7f5      	b.n	800219c <main+0x48>
 80021b0:	2000072c 	.word	0x2000072c

080021b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b096      	sub	sp, #88	; 0x58
 80021b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	2244      	movs	r2, #68	; 0x44
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f015 fb7a 	bl	80178bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021da:	f005 ff01 	bl	8007fe0 <HAL_PWREx_ControlVoltageScaling>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 80021ee:	f000 f85b 	bl	80022a8 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80021f2:	230a      	movs	r3, #10
 80021f4:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021fc:	2310      	movs	r3, #16
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002200:	2301      	movs	r3, #1
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002204:	2302      	movs	r3, #2
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002208:	2302      	movs	r3, #2
 800220a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800220c:	2301      	movs	r3, #1
 800220e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8002210:	230a      	movs	r3, #10
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002214:	2307      	movs	r3, #7
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002218:	2302      	movs	r3, #2
 800221a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4618      	mov	r0, r3
 8002226:	f005 ff31 	bl	800808c <HAL_RCC_OscConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 800223a:	f000 f835 	bl	80022a8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223e:	230f      	movs	r3, #15
 8002240:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002242:	2303      	movs	r3, #3
 8002244:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002252:	463b      	mov	r3, r7
 8002254:	2104      	movs	r1, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f006 fafe 	bl	8008858 <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 800226c:	f000 f81c 	bl	80022a8 <Error_Handler>
	}
}
 8002270:	bf00      	nop
 8002272:	3758      	adds	r7, #88	; 0x58
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002288:	d108      	bne.n	800229c <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fb30 	bl	80018fc <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000072c 	.word	0x2000072c

080022a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ac:	b672      	cpsid	i
}
 80022ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <Error_Handler+0x8>
	...

080022b4 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 80022b8:	f012 fd2e 	bl	8014d18 <MotionFX_GetStateSize>
 80022bc:	4603      	mov	r3, r0
 80022be:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 80022c2:	d901      	bls.n	80022c8 <MotionFX_manager_init+0x14>
    Error_Handler();
 80022c4:	f7ff fff0 	bl	80022a8 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 80022c8:	4821      	ldr	r0, [pc, #132]	; (8002350 <MotionFX_manager_init+0x9c>)
 80022ca:	f012 fd29 	bl	8014d20 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 80022ce:	4b21      	ldr	r3, [pc, #132]	; (8002354 <MotionFX_manager_init+0xa0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	481e      	ldr	r0, [pc, #120]	; (8002350 <MotionFX_manager_init+0x9c>)
 80022d6:	f012 fe07 	bl	8014ee8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MotionFX_manager_init+0xa0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	331d      	adds	r3, #29
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fef8 	bl	80020d6 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <MotionFX_manager_init+0xa0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3321      	adds	r3, #33	; 0x21
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff07 	bl	8002100 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <MotionFX_manager_init+0xa0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3325      	adds	r3, #37	; 0x25
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff16 	bl	800212a <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MotionFX_manager_init+0xa0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a15      	ldr	r2, [pc, #84]	; (8002358 <MotionFX_manager_init+0xa4>)
 8002304:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8002306:	4b13      	ldr	r3, [pc, #76]	; (8002354 <MotionFX_manager_init+0xa0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a14      	ldr	r2, [pc, #80]	; (800235c <MotionFX_manager_init+0xa8>)
 800230c:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MotionFX_manager_init+0xa0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <MotionFX_manager_init+0xac>)
 8002314:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MotionFX_manager_init+0xa0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <MotionFX_manager_init+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <MotionFX_manager_init+0xa0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MotionFX_manager_init+0xa0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <MotionFX_manager_init+0x9c>)
 8002338:	f012 fd8c 	bl	8014e54 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 800233c:	2100      	movs	r1, #0
 800233e:	4804      	ldr	r0, [pc, #16]	; (8002350 <MotionFX_manager_init+0x9c>)
 8002340:	f012 fe0e 	bl	8014f60 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002344:	2100      	movs	r1, #0
 8002346:	4802      	ldr	r0, [pc, #8]	; (8002350 <MotionFX_manager_init+0x9c>)
 8002348:	f012 fe2a 	bl	8014fa0 <MotionFX_enable_9X>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000764 	.word	0x20000764
 8002354:	20000004 	.word	0x20000004
 8002358:	3ac88a48 	.word	0x3ac88a48
 800235c:	3b83126f 	.word	0x3b83126f
 8002360:	3b449ba6 	.word	0x3b449ba6

08002364 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <MotionFX_manager_run+0x4c>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <MotionFX_manager_run+0x50>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d10e      	bne.n	800239c <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	68b9      	ldr	r1, [r7, #8]
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <MotionFX_manager_run+0x54>)
 8002386:	f012 fe3b 	bl	8015000 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	9200      	str	r2, [sp, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	4808      	ldr	r0, [pc, #32]	; (80023b8 <MotionFX_manager_run+0x54>)
 8002396:	f012 fe23 	bl	8014fe0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800239a:	e004      	b.n	80023a6 <MotionFX_manager_run+0x42>
    discardedCount++;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <MotionFX_manager_run+0x4c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <MotionFX_manager_run+0x4c>)
 80023a4:	6013      	str	r3, [r2, #0]
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000760 	.word	0x20000760
 80023b4:	20000008 	.word	0x20000008
 80023b8:	20000764 	.word	0x20000764

080023bc <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80023c0:	2101      	movs	r1, #1
 80023c2:	4802      	ldr	r0, [pc, #8]	; (80023cc <MotionFX_manager_start_6X+0x10>)
 80023c4:	f012 fdcc 	bl	8014f60 <MotionFX_enable_6X>
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000764 	.word	0x20000764

080023d0 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80023d4:	2100      	movs	r1, #0
 80023d6:	4802      	ldr	r0, [pc, #8]	; (80023e0 <MotionFX_manager_stop_6X+0x10>)
 80023d8:	f012 fdc2 	bl	8014f60 <MotionFX_enable_6X>
}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000764 	.word	0x20000764

080023e4 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80023e8:	2101      	movs	r1, #1
 80023ea:	4802      	ldr	r0, [pc, #8]	; (80023f4 <MotionFX_manager_start_9X+0x10>)
 80023ec:	f012 fdd8 	bl	8014fa0 <MotionFX_enable_9X>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000764 	.word	0x20000764

080023f8 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80023fc:	2100      	movs	r1, #0
 80023fe:	4802      	ldr	r0, [pc, #8]	; (8002408 <MotionFX_manager_stop_9X+0x10>)
 8002400:	f012 fdce 	bl	8014fa0 <MotionFX_enable_9X>
}
 8002404:	bf00      	nop
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000764 	.word	0x20000764

0800240c <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f012 ffda 	bl	80153d0 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f013 f9f9 	bl	8015814 <MotionFX_MagCal_getParams>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8002432:	2101      	movs	r1, #1
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f012 ff35 	bl	80152a4 <MotionFX_MagCal_init>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800244a:	2100      	movs	r1, #0
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f012 ff29 	bl	80152a4 <MotionFX_MagCal_init>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <MX_RTC_Init+0xb0>)
 8002476:	4a26      	ldr	r2, [pc, #152]	; (8002510 <MX_RTC_Init+0xb4>)
 8002478:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800247a:	4b24      	ldr	r3, [pc, #144]	; (800250c <MX_RTC_Init+0xb0>)
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002480:	4b22      	ldr	r3, [pc, #136]	; (800250c <MX_RTC_Init+0xb0>)
 8002482:	227f      	movs	r2, #127	; 0x7f
 8002484:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002486:	4b21      	ldr	r3, [pc, #132]	; (800250c <MX_RTC_Init+0xb0>)
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <MX_RTC_Init+0xb0>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_RTC_Init+0xb0>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <MX_RTC_Init+0xb0>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_RTC_Init+0xb0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024a4:	4819      	ldr	r0, [pc, #100]	; (800250c <MX_RTC_Init+0xb0>)
 80024a6:	f007 f899 	bl	80095dc <HAL_RTC_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80024b0:	f7ff fefa 	bl	80022a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80024bc:	2300      	movs	r3, #0
 80024be:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2201      	movs	r2, #1
 80024cc:	4619      	mov	r1, r3
 80024ce:	480f      	ldr	r0, [pc, #60]	; (800250c <MX_RTC_Init+0xb0>)
 80024d0:	f007 f8ff 	bl	80096d2 <HAL_RTC_SetTime>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80024da:	f7ff fee5 	bl	80022a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80024de:	2301      	movs	r3, #1
 80024e0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80024e2:	2301      	movs	r3, #1
 80024e4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80024ee:	463b      	mov	r3, r7
 80024f0:	2201      	movs	r2, #1
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_RTC_Init+0xb0>)
 80024f6:	f007 f989 	bl	800980c <HAL_RTC_SetDate>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002500:	f7ff fed2 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20001438 	.word	0x20001438
 8002510:	40002800 	.word	0x40002800

08002514 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b0a4      	sub	sp, #144	; 0x90
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800251c:	f107 0308 	add.w	r3, r7, #8
 8002520:	2288      	movs	r2, #136	; 0x88
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f015 f9c9 	bl	80178bc <memset>
  if(rtcHandle->Instance==RTC)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a10      	ldr	r2, [pc, #64]	; (8002570 <HAL_RTC_MspInit+0x5c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d118      	bne.n	8002566 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002534:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800253a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4618      	mov	r0, r3
 8002548:	f006 fb8c 	bl	8008c64 <HAL_RCCEx_PeriphCLKConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002552:	f7ff fea9 	bl	80022a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_RTC_MspInit+0x60>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_RTC_MspInit+0x60>)
 800255e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002566:	bf00      	nop
 8002568:	3790      	adds	r7, #144	; 0x90
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40002800 	.word	0x40002800
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_MspInit+0x44>)
 8002580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_MspInit+0x44>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6613      	str	r3, [r2, #96]	; 0x60
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_MspInit+0x44>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_MspInit+0x44>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_MspInit+0x44>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6593      	str	r3, [r2, #88]	; 0x58
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <HAL_MspInit+0x44>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	603b      	str	r3, [r7, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c4:	e7fe      	b.n	80025c4 <NMI_Handler+0x4>

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800260c:	f003 ffb4 	bl	8006578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMA1_Channel6_IRQHandler+0x10>)
 800261a:	f004 fae1 	bl	8006be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20001500 	.word	0x20001500

08002628 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800262e:	f007 fb12 	bl	8009c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000145c 	.word	0x2000145c

0800263c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <TIM3_IRQHandler+0x10>)
 8002642:	f007 fb08 	bl	8009c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200014a8 	.word	0x200014a8

08002650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002654:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002658:	f004 fe58 	bl	800730c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <BSP_I2C1_Init+0x70>)
 800266c:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <BSP_I2C1_Init+0x74>)
 800266e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <BSP_I2C1_Init+0x78>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	4918      	ldr	r1, [pc, #96]	; (80026d8 <BSP_I2C1_Init+0x78>)
 8002678:	600a      	str	r2, [r1, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d122      	bne.n	80026c4 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800267e:	4814      	ldr	r0, [pc, #80]	; (80026d0 <BSP_I2C1_Init+0x70>)
 8002680:	f005 f948 	bl	8007914 <HAL_I2C_GetState>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d11c      	bne.n	80026c4 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800268a:	4811      	ldr	r0, [pc, #68]	; (80026d0 <BSP_I2C1_Init+0x70>)
 800268c:	f000 f8ba 	bl	8002804 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <BSP_I2C1_Init+0x70>)
 8002698:	f7ff fbd0 	bl	8001e3c <MX_I2C1_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80026a2:	f06f 0307 	mvn.w	r3, #7
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	e00c      	b.n	80026c4 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026aa:	2100      	movs	r1, #0
 80026ac:	4808      	ldr	r0, [pc, #32]	; (80026d0 <BSP_I2C1_Init+0x70>)
 80026ae:	f005 fbf1 	bl	8007e94 <HAL_I2CEx_ConfigAnalogFilter>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80026b8:	f06f 0307 	mvn.w	r3, #7
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	e001      	b.n	80026c4 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200013ec 	.word	0x200013ec
 80026d4:	40005400 	.word	0x40005400
 80026d8:	200010e4 	.word	0x200010e4

080026dc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <BSP_I2C1_DeInit+0x48>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d014      	beq.n	8002718 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <BSP_I2C1_DeInit+0x48>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <BSP_I2C1_DeInit+0x48>)
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <BSP_I2C1_DeInit+0x48>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002700:	4809      	ldr	r0, [pc, #36]	; (8002728 <BSP_I2C1_DeInit+0x4c>)
 8002702:	f000 f8c5 	bl	8002890 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002706:	4808      	ldr	r0, [pc, #32]	; (8002728 <BSP_I2C1_DeInit+0x4c>)
 8002708:	f004 fea7 	bl	800745a <HAL_I2C_DeInit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002712:	f06f 0307 	mvn.w	r3, #7
 8002716:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200010e4 	.word	0x200010e4
 8002728:	200013ec 	.word	0x200013ec

0800272c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af04      	add	r7, sp, #16
 8002732:	60ba      	str	r2, [r7, #8]
 8002734:	461a      	mov	r2, r3
 8002736:	4603      	mov	r3, r0
 8002738:	81fb      	strh	r3, [r7, #14]
 800273a:	460b      	mov	r3, r1
 800273c:	81bb      	strh	r3, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002746:	89ba      	ldrh	r2, [r7, #12]
 8002748:	89f9      	ldrh	r1, [r7, #14]
 800274a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274e:	9302      	str	r3, [sp, #8]
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2301      	movs	r3, #1
 800275a:	480c      	ldr	r0, [pc, #48]	; (800278c <BSP_I2C1_WriteReg+0x60>)
 800275c:	f004 feac 	bl	80074b8 <HAL_I2C_Mem_Write>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00c      	beq.n	8002780 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002766:	4809      	ldr	r0, [pc, #36]	; (800278c <BSP_I2C1_WriteReg+0x60>)
 8002768:	f005 f8e2 	bl	8007930 <HAL_I2C_GetError>
 800276c:	4603      	mov	r3, r0
 800276e:	2b04      	cmp	r3, #4
 8002770:	d103      	bne.n	800277a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002772:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	e002      	b.n	8002780 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800277a:	f06f 0303 	mvn.w	r3, #3
 800277e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002780:	697b      	ldr	r3, [r7, #20]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200013ec 	.word	0x200013ec

08002790 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af04      	add	r7, sp, #16
 8002796:	60ba      	str	r2, [r7, #8]
 8002798:	461a      	mov	r2, r3
 800279a:	4603      	mov	r3, r0
 800279c:	81fb      	strh	r3, [r7, #14]
 800279e:	460b      	mov	r3, r1
 80027a0:	81bb      	strh	r3, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80027aa:	89ba      	ldrh	r2, [r7, #12]
 80027ac:	89f9      	ldrh	r1, [r7, #14]
 80027ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b2:	9302      	str	r3, [sp, #8]
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2301      	movs	r3, #1
 80027be:	480c      	ldr	r0, [pc, #48]	; (80027f0 <BSP_I2C1_ReadReg+0x60>)
 80027c0:	f004 ff8e 	bl	80076e0 <HAL_I2C_Mem_Read>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80027ca:	4809      	ldr	r0, [pc, #36]	; (80027f0 <BSP_I2C1_ReadReg+0x60>)
 80027cc:	f005 f8b0 	bl	8007930 <HAL_I2C_GetError>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d103      	bne.n	80027de <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80027d6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	e002      	b.n	80027e4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027de:	f06f 0303 	mvn.w	r3, #3
 80027e2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80027e4:	697b      	ldr	r3, [r7, #20]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200013ec 	.word	0x200013ec

080027f4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80027f8:	f003 fed2 	bl	80065a0 <HAL_GetTick>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <I2C1_MspInit+0x84>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <I2C1_MspInit+0x84>)
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <I2C1_MspInit+0x84>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800282a:	2312      	movs	r3, #18
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002836:	2304      	movs	r3, #4
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800283a:	f107 0314 	add.w	r3, r7, #20
 800283e:	4619      	mov	r1, r3
 8002840:	4812      	ldr	r0, [pc, #72]	; (800288c <I2C1_MspInit+0x88>)
 8002842:	f004 faad 	bl	8006da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800284c:	2312      	movs	r3, #18
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002858:	2304      	movs	r3, #4
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	480a      	ldr	r0, [pc, #40]	; (800288c <I2C1_MspInit+0x88>)
 8002864:	f004 fa9c 	bl	8006da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <I2C1_MspInit+0x84>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <I2C1_MspInit+0x84>)
 800286e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002872:	6593      	str	r3, [r2, #88]	; 0x58
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <I2C1_MspInit+0x84>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	48000400 	.word	0x48000400

08002890 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <I2C1_MspDeInit+0x30>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <I2C1_MspDeInit+0x30>)
 800289e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028a2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80028a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028a8:	4806      	ldr	r0, [pc, #24]	; (80028c4 <I2C1_MspDeInit+0x34>)
 80028aa:	f004 fc23 	bl	80070f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80028ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028b2:	4804      	ldr	r0, [pc, #16]	; (80028c4 <I2C1_MspDeInit+0x34>)
 80028b4:	f004 fc1e 	bl	80070f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	48000400 	.word	0x48000400

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
	return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:

int _kill(int pid, int sig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028e2:	f014 ff89 	bl	80177f8 <__errno>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2216      	movs	r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
	return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:

void _exit (int status)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800290a:	e7fe      	b.n	800290a <_exit+0x12>

0800290c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291e:	f3af 8000 	nop.w
 8002922:	4601      	mov	r1, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf0      	blt.n	800291e <_read+0x12>
	}

return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f003 fd25 	bl	80063b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf1      	blt.n	8002958 <_write+0x12>
	}
	return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_close>:

int _close(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	605a      	str	r2, [r3, #4]
	return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_isatty>:

int _isatty(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f014 feee 	bl	80177f8 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20018000 	.word	0x20018000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	200010e8 	.word	0x200010e8
 8002a50:	20001a08 	.word	0x20001a08

08002a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <SystemInit+0x20>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <SystemInit+0x20>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a7e:	f107 0310 	add.w	r3, r7, #16
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <MX_TIM3_Init+0x98>)
 8002a9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002abc:	4813      	ldr	r0, [pc, #76]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002abe:	f006 ffe3 	bl	8009a88 <HAL_TIM_Base_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ac8:	f7ff fbee 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ad2:	f107 0310 	add.w	r3, r7, #16
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002ada:	f007 f9db 	bl	8009e94 <HAL_TIM_ConfigClockSource>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ae4:	f7ff fbe0 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	; (8002b0c <MX_TIM3_Init+0x94>)
 8002af6:	f007 fbfd 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002b00:	f7ff fbd2 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200014a8 	.word	0x200014a8
 8002b10:	40000400 	.word	0x40000400

08002b14 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	605a      	str	r2, [r3, #4]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002b32:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <MX_TIM15_Init+0xa0>)
 8002b36:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 10000 -1;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b3e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65536 - 1;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b4c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002b60:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b62:	f006 ff91 	bl	8009a88 <HAL_TIM_Base_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002b6c:	f7ff fb9c 	bl	80022a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480c      	ldr	r0, [pc, #48]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b7e:	f007 f989 	bl	8009e94 <HAL_TIM_ConfigClockSource>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002b88:	f7ff fb8e 	bl	80022a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MX_TIM15_Init+0x9c>)
 8002b9a:	f007 fbab 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002ba4:	f7ff fb80 	bl	80022a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	2000145c 	.word	0x2000145c
 8002bb4:	40014000 	.word	0x40014000

08002bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d114      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	201d      	movs	r0, #29
 8002be8:	f003 fdc1 	bl	800676e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bec:	201d      	movs	r0, #29
 8002bee:	f003 fdda 	bl	80067a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002bf2:	e018      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <HAL_TIM_Base_MspInit+0x80>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c08:	6613      	str	r3, [r2, #96]	; 0x60
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2018      	movs	r0, #24
 8002c1c:	f003 fda7 	bl	800676e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c20:	2018      	movs	r0, #24
 8002c22:	f003 fdc0 	bl	80067a6 <HAL_NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40014000 	.word	0x40014000

08002c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c40:	f7ff ff08 	bl	8002a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c44:	480c      	ldr	r0, [pc, #48]	; (8002c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c46:	490d      	ldr	r1, [pc, #52]	; (8002c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <LoopForever+0xe>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	; (8002c88 <LoopForever+0x16>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c6a:	f014 fdcb 	bl	8017804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c6e:	f7ff fa71 	bl	8002154 <main>

08002c72 <LoopForever>:

LoopForever:
    b LoopForever
 8002c72:	e7fe      	b.n	8002c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8002c80:	0801b16c 	.word	0x0801b16c
  ldr r2, =_sbss
 8002c84:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002c88:	20001a08 	.word	0x20001a08

08002c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <ADC1_2_IRQHandler>
	...

08002c90 <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e04d      	b.n	8002d48 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	7b1a      	ldrb	r2, [r3, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	699a      	ldr	r2, [r3, #24]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002ce8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 8002cee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	e020      	b.n	8002d48 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4798      	blx	r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e016      	b.n	8002d48 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d112      	bne.n	8002d48 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002d30:	7afb      	ldrb	r3, [r7, #11]
 8002d32:	461a      	mov	r2, r3
 8002d34:	2123      	movs	r1, #35	; 0x23
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fb55 	bl	80033e6 <LSM303AGR_ACC_Write_Reg>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002d42:	f04f 33ff 	mov.w	r3, #4294967295
 8002d46:	e000      	b.n	8002d4a <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002d48:	68fb      	ldr	r3, [r7, #12]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	08003bf5 	.word	0x08003bf5
 8002d58:	08003c57 	.word	0x08003c57

08002d5c <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	331c      	adds	r3, #28
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f94a 	bl	8004004 <lsm303agr_xl_block_data_update_set>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002d76:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7a:	e02c      	b.n	8002dd6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	331c      	adds	r3, #28
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f001 faed 	bl	8004362 <lsm303agr_xl_fifo_mode_set>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	e020      	b.n	8002dd6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2205      	movs	r2, #5
 8002d98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	331c      	adds	r3, #28
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 f84e 	bl	8003e44 <lsm303agr_xl_data_rate_set>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e010      	b.n	8002dd6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	331c      	adds	r3, #28
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f8c4 	bl	8003f48 <lsm303agr_xl_full_scale_set>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	e004      	b.n	8002dd6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f87c 	bl	8002ee4 <LSM303AGR_ACC_Disable>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295
 8002df6:	e008      	b.n	8002e0a <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	331c      	adds	r3, #28
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 fa55 	bl	80042d2 <lsm303agr_xl_device_id_get>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	e000      	b.n	8002e36 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002e80:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	43c80000 	.word	0x43c80000

08002e9c <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e014      	b.n	8002edc <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f103 021c 	add.w	r2, r3, #28
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	f000 ffbf 	bl	8003e44 <lsm303agr_xl_data_rate_set>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed0:	e004      	b.n	8002edc <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e01f      	b.n	8002f3a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f103 021c 	add.w	r2, r3, #28
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	332a      	adds	r3, #42	; 0x2a
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 ffc2 	bl	8003e90 <lsm303agr_xl_data_rate_get>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002f12:	f04f 33ff 	mov.w	r3, #4294967295
 8002f16:	e010      	b.n	8002f3a <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	331c      	adds	r3, #28
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ff90 	bl	8003e44 <lsm303agr_xl_data_rate_set>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	e004      	b.n	8002f3a <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	331c      	adds	r3, #28
 8002f54:	f107 020b 	add.w	r2, r7, #11
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 ff3e 	bl	8003ddc <lsm303agr_xl_operating_mode_get>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	e031      	b.n	8002fd0 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d01a      	beq.n	8002fa8 <LSM303AGR_ACC_GetSensitivity+0x66>
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	dc22      	bgt.n	8002fbc <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00a      	beq.n	8002f94 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002f7e:	e01d      	b.n	8002fbc <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fca8 	bl	80038d8 <LSM303AGR_ACC_GetSensitivityHR>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01a      	beq.n	8002fc4 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e01d      	b.n	8002fd0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fce4 	bl	8003964 <LSM303AGR_ACC_GetSensitivityNM>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d012      	beq.n	8002fc8 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e013      	b.n	8002fd0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fd20 	bl	80039f0 <LSM303AGR_ACC_GetSensitivityLP>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e009      	b.n	8002fd0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc0:	60fb      	str	r3, [r7, #12]
      break;
 8002fc2:	e004      	b.n	8002fce <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e002      	b.n	8002fce <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002fc8:	bf00      	nop
 8002fca:	e000      	b.n	8002fce <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002fcc:	bf00      	nop
  }

  return ret;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	331c      	adds	r3, #28
 8002fea:	f107 020b 	add.w	r2, r7, #11
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fef3 	bl	8003ddc <lsm303agr_xl_operating_mode_get>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	e09d      	b.n	800313e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	331c      	adds	r3, #28
 8003006:	f107 020a 	add.w	r2, r7, #10
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ff3f 	bl	8003e90 <lsm303agr_xl_data_rate_get>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	e08f      	b.n	800313e <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800301e:	7afb      	ldrb	r3, [r7, #11]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d147      	bne.n	80030b4 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8003024:	7abb      	ldrb	r3, [r7, #10]
 8003026:	2b09      	cmp	r3, #9
 8003028:	d840      	bhi.n	80030ac <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003059 	.word	0x08003059
 8003034:	08003063 	.word	0x08003063
 8003038:	0800306d 	.word	0x0800306d
 800303c:	08003075 	.word	0x08003075
 8003040:	0800307d 	.word	0x0800307d
 8003044:	08003085 	.word	0x08003085
 8003048:	0800308d 	.word	0x0800308d
 800304c:	08003095 	.word	0x08003095
 8003050:	0800309d 	.word	0x0800309d
 8003054:	080030a5 	.word	0x080030a5
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
        break;
 8003060:	e06c      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003068:	601a      	str	r2, [r3, #0]
        break;
 800306a:	e067      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4a36      	ldr	r2, [pc, #216]	; (8003148 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003070:	601a      	str	r2, [r3, #0]
        break;
 8003072:	e063      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4a35      	ldr	r2, [pc, #212]	; (800314c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003078:	601a      	str	r2, [r3, #0]
        break;
 800307a:	e05f      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4a34      	ldr	r2, [pc, #208]	; (8003150 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003080:	601a      	str	r2, [r3, #0]
        break;
 8003082:	e05b      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4a33      	ldr	r2, [pc, #204]	; (8003154 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003088:	601a      	str	r2, [r3, #0]
        break;
 800308a:	e057      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4a32      	ldr	r2, [pc, #200]	; (8003158 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003090:	601a      	str	r2, [r3, #0]
        break;
 8003092:	e053      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4a31      	ldr	r2, [pc, #196]	; (800315c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003098:	601a      	str	r2, [r3, #0]
        break;
 800309a:	e04f      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4a30      	ldr	r2, [pc, #192]	; (8003160 <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80030a0:	601a      	str	r2, [r3, #0]
        break;
 80030a2:	e04b      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 80030a8:	601a      	str	r2, [r3, #0]
        break;
 80030aa:	e047      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	60fb      	str	r3, [r7, #12]
        break;
 80030b2:	e043      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 80030b4:	7abb      	ldrb	r3, [r7, #10]
 80030b6:	2b09      	cmp	r3, #9
 80030b8:	d83c      	bhi.n	8003134 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030e9 	.word	0x080030e9
 80030c4:	080030f3 	.word	0x080030f3
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	08003105 	.word	0x08003105
 80030d0:	0800310d 	.word	0x0800310d
 80030d4:	08003115 	.word	0x08003115
 80030d8:	0800311d 	.word	0x0800311d
 80030dc:	08003125 	.word	0x08003125
 80030e0:	08003135 	.word	0x08003135
 80030e4:	0800312d 	.word	0x0800312d
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
        break;
 80030f0:	e024      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030f8:	601a      	str	r2, [r3, #0]
        break;
 80030fa:	e01f      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4a12      	ldr	r2, [pc, #72]	; (8003148 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8003100:	601a      	str	r2, [r3, #0]
        break;
 8003102:	e01b      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	4a11      	ldr	r2, [pc, #68]	; (800314c <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8003108:	601a      	str	r2, [r3, #0]
        break;
 800310a:	e017      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8003110:	601a      	str	r2, [r3, #0]
        break;
 8003112:	e013      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8003118:	601a      	str	r2, [r3, #0]
        break;
 800311a:	e00f      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4a0e      	ldr	r2, [pc, #56]	; (8003158 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8003120:	601a      	str	r2, [r3, #0]
        break;
 8003122:	e00b      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4a0d      	ldr	r2, [pc, #52]	; (800315c <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8003128:	601a      	str	r2, [r3, #0]
        break;
 800312a:	e007      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8003130:	601a      	str	r2, [r3, #0]
        break;
 8003132:	e003      	b.n	800313c <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
 8003138:	60fb      	str	r3, [r7, #12]
        break;
 800313a:	bf00      	nop
    }
  }

  return ret;
 800313c:	68fb      	ldr	r3, [r7, #12]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	41200000 	.word	0x41200000
 800314c:	41c80000 	.word	0x41c80000
 8003150:	42480000 	.word	0x42480000
 8003154:	42c80000 	.word	0x42c80000
 8003158:	43480000 	.word	0x43480000
 800315c:	43c80000 	.word	0x43c80000
 8003160:	44ca8000 	.word	0x44ca8000
 8003164:	45a80000 	.word	0x45a80000
 8003168:	44a80000 	.word	0x44a80000

0800316c <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800317e:	2b01      	cmp	r3, #1
 8003180:	d106      	bne.n	8003190 <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003182:	ed97 0a00 	vldr	s0, [r7]
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fc78 	bl	8003a7c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 800318c:	4603      	mov	r3, r0
 800318e:	e005      	b.n	800319c <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003190:	ed97 0a00 	vldr	s0, [r7]
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fcd3 	bl	8003b40 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 800319a:	4603      	mov	r3, r0
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	331c      	adds	r3, #28
 80031b6:	f107 020b 	add.w	r2, r7, #11
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fee9 	bl	8003f94 <lsm303agr_xl_full_scale_get>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295
 80031cc:	e023      	b.n	8003216 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80031ce:	7afb      	ldrb	r3, [r7, #11]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d81b      	bhi.n	800320c <LSM303AGR_ACC_GetFullScale+0x68>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <LSM303AGR_ACC_GetFullScale+0x38>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	080031ed 	.word	0x080031ed
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	080031fd 	.word	0x080031fd
 80031e8:	08003205 	.word	0x08003205
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2202      	movs	r2, #2
 80031f0:	601a      	str	r2, [r3, #0]
      break;
 80031f2:	e00f      	b.n	8003214 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2204      	movs	r2, #4
 80031f8:	601a      	str	r2, [r3, #0]
      break;
 80031fa:	e00b      	b.n	8003214 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2208      	movs	r2, #8
 8003200:	601a      	str	r2, [r3, #0]
      break;
 8003202:	e007      	b.n	8003214 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2210      	movs	r2, #16
 8003208:	601a      	str	r2, [r3, #0]
      break;
 800320a:	e003      	b.n	8003214 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	60fb      	str	r3, [r7, #12]
      break;
 8003212:	bf00      	nop
  }

  return ret;
 8003214:	68fb      	ldr	r3, [r7, #12]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop

08003220 <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	dd0b      	ble.n	8003248 <LSM303AGR_ACC_SetFullScale+0x28>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b04      	cmp	r3, #4
 8003234:	dd06      	ble.n	8003244 <LSM303AGR_ACC_SetFullScale+0x24>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	dc01      	bgt.n	8003240 <LSM303AGR_ACC_SetFullScale+0x20>
 800323c:	2302      	movs	r3, #2
 800323e:	e004      	b.n	800324a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003240:	2303      	movs	r3, #3
 8003242:	e002      	b.n	800324a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LSM303AGR_ACC_SetFullScale+0x2a>
 8003248:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 800324a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	331c      	adds	r3, #28
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fe77 	bl	8003f48 <lsm303agr_xl_full_scale_set>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	e000      	b.n	8003268 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	331c      	adds	r3, #28
 8003286:	f107 020f 	add.w	r2, r7, #15
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fda5 	bl	8003ddc <lsm303agr_xl_operating_mode_get>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295
 800329c:	e04a      	b.n	8003334 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d00c      	beq.n	80032be <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	dc0e      	bgt.n	80032c6 <LSM303AGR_ACC_GetAxesRaw+0x56>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <LSM303AGR_ACC_GetAxesRaw+0x42>
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d003      	beq.n	80032b8 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80032b0:	e009      	b.n	80032c6 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80032b2:	2310      	movs	r3, #16
 80032b4:	83fb      	strh	r3, [r7, #30]
      break;
 80032b6:	e00a      	b.n	80032ce <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80032b8:	2340      	movs	r3, #64	; 0x40
 80032ba:	83fb      	strh	r3, [r7, #30]
      break;
 80032bc:	e007      	b.n	80032ce <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80032be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c2:	83fb      	strh	r3, [r7, #30]
      break;
 80032c4:	e003      	b.n	80032ce <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80032c6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ca:	61bb      	str	r3, [r7, #24]
      break;
 80032cc:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d101      	bne.n	80032da <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	e02c      	b.n	8003334 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	331c      	adds	r3, #28
 80032de:	f107 0210 	add.w	r2, r7, #16
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 feb3 	bl	8004050 <lsm303agr_acceleration_raw_get>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	e01e      	b.n	8003334 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80032f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003300:	fb92 f3f3 	sdiv	r3, r2, r3
 8003304:	b21a      	sxth	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 800330a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800330e:	461a      	mov	r2, r3
 8003310:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003314:	fb92 f3f3 	sdiv	r3, r2, r3
 8003318:	b21a      	sxth	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800331e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003322:	461a      	mov	r2, r3
 8003324:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003328:	fb92 f3f3 	sdiv	r3, r2, r3
 800332c:	b21a      	sxth	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	809a      	strh	r2, [r3, #4]

  return ret;
 8003332:	69bb      	ldr	r3, [r7, #24]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 800334c:	f107 0310 	add.w	r3, r7, #16
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ff8c 	bl	8003270 <LSM303AGR_ACC_GetAxesRaw>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e03c      	b.n	80033de <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fde9 	bl	8002f42 <LSM303AGR_ACC_GetSensitivity>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	e030      	b.n	80033de <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800337c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003388:	edd7 7a03 	vldr	s15, [r7, #12]
 800338c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003394:	ee17 2a90 	vmov	r2, s15
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800339c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033a0:	ee07 3a90 	vmov	s15, r3
 80033a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b4:	ee17 2a90 	vmov	r2, s15
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80033bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d4:	ee17 2a90 	vmov	r2, s15
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	460b      	mov	r3, r1
 80033f0:	70fb      	strb	r3, [r7, #3]
 80033f2:	4613      	mov	r3, r2
 80033f4:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f103 001c 	add.w	r0, r3, #28
 80033fc:	1cba      	adds	r2, r7, #2
 80033fe:	78f9      	ldrb	r1, [r7, #3]
 8003400:	2301      	movs	r3, #1
 8003402:	f000 fcd3 	bl	8003dac <lsm303agr_write_reg>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	e000      	b.n	8003414 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d103      	bne.n	8003438 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e04b      	b.n	80034d0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	7b1a      	ldrb	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1a      	ldr	r2, [pc, #104]	; (80034dc <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003474:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 800347a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800348a:	f04f 33ff 	mov.w	r3, #4294967295
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e01e      	b.n	80034d0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4798      	blx	r3
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e014      	b.n	80034d0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	331c      	adds	r3, #28
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ff75 	bl	80043ae <lsm303agr_mag_i2c_interface_set>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	e000      	b.n	80034d2 <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	08003cb9 	.word	0x08003cb9
 80034e0:	08003d1b 	.word	0x08003d1b

080034e4 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	331c      	adds	r3, #28
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe7c 	bl	80041f0 <lsm303agr_mag_block_data_update_set>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d002      	beq.n	8003504 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80034fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003502:	e028      	b.n	8003556 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	331c      	adds	r3, #28
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fdeb 	bl	80040e6 <lsm303agr_mag_operating_mode_set>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	e01c      	b.n	8003556 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	331c      	adds	r3, #28
 8003520:	2103      	movs	r1, #3
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fe05 	bl	8004132 <lsm303agr_mag_data_rate_set>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e010      	b.n	8003556 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	331c      	adds	r3, #28
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 feeb 	bl	8004316 <lsm303agr_mag_self_test_set>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003546:	f04f 33ff 	mov.w	r3, #4294967295
 800354a:	e004      	b.n	8003556 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f874 	bl	8003654 <LSM303AGR_MAG_Disable>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8003572:	f04f 33ff 	mov.w	r3, #4294967295
 8003576:	e004      	b.n	8003582 <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	331c      	adds	r3, #28
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 feaa 	bl	80042f4 <lsm303agr_mag_device_id_get>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e000      	b.n	80035ae <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2200      	movs	r2, #0
 80035cc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2201      	movs	r2, #1
 80035d2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2200      	movs	r2, #0
 80035de:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2232      	movs	r2, #50	; 0x32
 80035ea:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	4a04      	ldr	r2, [pc, #16]	; (8003610 <LSM303AGR_MAG_GetCapabilities+0x58>)
 8003600:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	42c80000 	.word	0x42c80000

08003614 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e010      	b.n	800364c <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	331c      	adds	r3, #28
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fd58 	bl	80040e6 <lsm303agr_mag_operating_mode_set>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	e004      	b.n	800364c <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e010      	b.n	800368c <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	331c      	adds	r3, #28
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd38 	bl	80040e6 <lsm303agr_mag_operating_mode_set>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	e004      	b.n	800368c <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80036a4:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	331c      	adds	r3, #28
 80036c6:	f107 020b 	add.w	r2, r7, #11
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd57 	bl	8004180 <lsm303agr_mag_data_rate_get>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	e023      	b.n	8003726 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80036de:	7afb      	ldrb	r3, [r7, #11]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d81b      	bhi.n	800371c <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80036e4:	a201      	add	r2, pc, #4	; (adr r2, 80036ec <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80036e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ea:	bf00      	nop
 80036ec:	080036fd 	.word	0x080036fd
 80036f0:	08003705 	.word	0x08003705
 80036f4:	0800370d 	.word	0x0800370d
 80036f8:	08003715 	.word	0x08003715
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 8003700:	601a      	str	r2, [r3, #0]
      break;
 8003702:	e00f      	b.n	8003724 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003708:	601a      	str	r2, [r3, #0]
      break;
 800370a:	e00b      	b.n	8003724 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4a0a      	ldr	r2, [pc, #40]	; (8003738 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 8003710:	601a      	str	r2, [r3, #0]
      break;
 8003712:	e007      	b.n	8003724 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003718:	601a      	str	r2, [r3, #0]
      break;
 800371a:	e003      	b.n	8003724 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	60fb      	str	r3, [r7, #12]
      break;
 8003722:	bf00      	nop
  }

  return ret;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	41200000 	.word	0x41200000
 8003734:	41a00000 	.word	0x41a00000
 8003738:	42480000 	.word	0x42480000
 800373c:	42c80000 	.word	0x42c80000

08003740 <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 800374c:	edd7 7a00 	vldr	s15, [r7]
 8003750:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375c:	d801      	bhi.n	8003762 <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800375e:	2300      	movs	r3, #0
 8003760:	e016      	b.n	8003790 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003762:	edd7 7a00 	vldr	s15, [r7]
 8003766:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800376a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003772:	d801      	bhi.n	8003778 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003774:	2301      	movs	r3, #1
 8003776:	e00b      	b.n	8003790 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003778:	edd7 7a00 	vldr	s15, [r7]
 800377c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80037b8 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 8003780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	d801      	bhi.n	800378e <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 800378a:	2302      	movs	r3, #2
 800378c:	e000      	b.n	8003790 <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800378e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 8003790:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	331c      	adds	r3, #28
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fcc9 	bl	8004132 <lsm303agr_mag_data_rate_set>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	e000      	b.n	80037ae <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	42480000 	.word	0x42480000

080037bc <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2232      	movs	r2, #50	; 0x32
 80037ca:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	331c      	adds	r3, #28
 8003800:	f107 0208 	add.w	r2, r7, #8
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fd18 	bl	800423c <lsm303agr_magnetic_raw_get>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 8003812:	f04f 33ff 	mov.w	r3, #4294967295
 8003816:	e00c      	b.n	8003832 <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003818:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003820:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003828:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	331c      	adds	r3, #28
 8003848:	f107 0210 	add.w	r2, r7, #16
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fcf4 	bl	800423c <lsm303agr_magnetic_raw_get>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295
 800385e:	e036      	b.n	80038ce <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff14 	bl	8003694 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800386c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003870:	ee07 3a90 	vmov	s15, r3
 8003874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003878:	edd7 7a03 	vldr	s15, [r7, #12]
 800387c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003880:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003884:	ee17 2a90 	vmov	r2, s15
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800388c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003898:	edd7 7a03 	vldr	s15, [r7, #12]
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038a4:	ee17 2a90 	vmov	r2, s15
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80038ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c4:	ee17 2a90 	vmov	r2, s15
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	331c      	adds	r3, #28
 80038ea:	f107 020b 	add.w	r2, r7, #11
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fb4f 	bl	8003f94 <lsm303agr_xl_full_scale_get>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	e023      	b.n	800394a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	2b03      	cmp	r3, #3
 8003906:	d81b      	bhi.n	8003940 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003921 	.word	0x08003921
 8003914:	08003929 	.word	0x08003929
 8003918:	08003931 	.word	0x08003931
 800391c:	08003939 	.word	0x08003939
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003924:	601a      	str	r2, [r3, #0]
      break;
 8003926:	e00f      	b.n	8003948 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 800392c:	601a      	str	r2, [r3, #0]
      break;
 800392e:	e00b      	b.n	8003948 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003934:	601a      	str	r2, [r3, #0]
      break;
 8003936:	e007      	b.n	8003948 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4a09      	ldr	r2, [pc, #36]	; (8003960 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 800393c:	601a      	str	r2, [r3, #0]
      break;
 800393e:	e003      	b.n	8003948 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
 8003944:	60fb      	str	r3, [r7, #12]
      break;
 8003946:	bf00      	nop
  }

  return ret;
 8003948:	68fb      	ldr	r3, [r7, #12]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	3f7ae148 	.word	0x3f7ae148
 8003958:	3ff9999a 	.word	0x3ff9999a
 800395c:	4079999a 	.word	0x4079999a
 8003960:	413b851f 	.word	0x413b851f

08003964 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	331c      	adds	r3, #28
 8003976:	f107 020b 	add.w	r2, r7, #11
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fb09 	bl	8003f94 <lsm303agr_xl_full_scale_get>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003988:	f04f 33ff 	mov.w	r3, #4294967295
 800398c:	e023      	b.n	80039d6 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800398e:	7afb      	ldrb	r3, [r7, #11]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d81b      	bhi.n	80039cc <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039ad 	.word	0x080039ad
 80039a0:	080039b5 	.word	0x080039b5
 80039a4:	080039bd 	.word	0x080039bd
 80039a8:	080039c5 	.word	0x080039c5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80039b0:	601a      	str	r2, [r3, #0]
      break;
 80039b2:	e00f      	b.n	80039d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80039b8:	601a      	str	r2, [r3, #0]
      break;
 80039ba:	e00b      	b.n	80039d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80039c0:	601a      	str	r2, [r3, #0]
      break;
 80039c2:	e007      	b.n	80039d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4a09      	ldr	r2, [pc, #36]	; (80039ec <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80039c8:	601a      	str	r2, [r3, #0]
      break;
 80039ca:	e003      	b.n	80039d4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	60fb      	str	r3, [r7, #12]
      break;
 80039d2:	bf00      	nop
  }

  return ret;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	4079999a 	.word	0x4079999a
 80039e4:	40fa3d71 	.word	0x40fa3d71
 80039e8:	417a147b 	.word	0x417a147b
 80039ec:	423b999a 	.word	0x423b999a

080039f0 <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	331c      	adds	r3, #28
 8003a02:	f107 020b 	add.w	r2, r7, #11
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fac3 	bl	8003f94 <lsm303agr_xl_full_scale_get>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	e023      	b.n	8003a62 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003a1a:	7afb      	ldrb	r3, [r7, #11]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d81b      	bhi.n	8003a58 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a39 	.word	0x08003a39
 8003a2c:	08003a41 	.word	0x08003a41
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a51 	.word	0x08003a51
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	; (8003a6c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003a3c:	601a      	str	r2, [r3, #0]
      break;
 8003a3e:	e00f      	b.n	8003a60 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003a44:	601a      	str	r2, [r3, #0]
      break;
 8003a46:	e00b      	b.n	8003a60 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003a4c:	601a      	str	r2, [r3, #0]
      break;
 8003a4e:	e007      	b.n	8003a60 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003a54:	601a      	str	r2, [r3, #0]
      break;
 8003a56:	e003      	b.n	8003a60 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	60fb      	str	r3, [r7, #12]
      break;
 8003a5e:	bf00      	nop
  }

  return ret;
 8003a60:	68fb      	ldr	r3, [r7, #12]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	417a147b 	.word	0x417a147b
 8003a70:	41fa147b 	.word	0x41fa147b
 8003a74:	427a147b 	.word	0x427a147b
 8003a78:	433b947b 	.word	0x433b947b

08003a7c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003a88:	edd7 7a00 	vldr	s15, [r7]
 8003a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	d801      	bhi.n	8003a9e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e037      	b.n	8003b0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003a9e:	edd7 7a00 	vldr	s15, [r7]
 8003aa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aae:	d801      	bhi.n	8003ab4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e02c      	b.n	8003b0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003ab4:	edd7 7a00 	vldr	s15, [r7]
 8003ab8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac4:	d801      	bhi.n	8003aca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e021      	b.n	8003b0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003aca:	edd7 7a00 	vldr	s15, [r7]
 8003ace:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003b34 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 8003ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ada:	d801      	bhi.n	8003ae0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003adc:	2304      	movs	r3, #4
 8003ade:	e016      	b.n	8003b0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003ae0:	edd7 7a00 	vldr	s15, [r7]
 8003ae4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003b38 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	d801      	bhi.n	8003af6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003af2:	2305      	movs	r3, #5
 8003af4:	e00b      	b.n	8003b0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003af6:	edd7 7a00 	vldr	s15, [r7]
 8003afa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003b3c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8003afe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d801      	bhi.n	8003b0c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003b08:	2306      	movs	r3, #6
 8003b0a:	e000      	b.n	8003b0e <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003b0c:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003b0e:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	331c      	adds	r3, #28
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f993 	bl	8003e44 <lsm303agr_xl_data_rate_set>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003b24:	f04f 33ff 	mov.w	r3, #4294967295
 8003b28:	e000      	b.n	8003b2c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	42480000 	.word	0x42480000
 8003b38:	42c80000 	.word	0x42c80000
 8003b3c:	43480000 	.word	0x43480000

08003b40 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003b4c:	edd7 7a00 	vldr	s15, [r7]
 8003b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5c:	d801      	bhi.n	8003b62 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e037      	b.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003b62:	edd7 7a00 	vldr	s15, [r7]
 8003b66:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	d801      	bhi.n	8003b78 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e02c      	b.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003b78:	edd7 7a00 	vldr	s15, [r7]
 8003b7c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b88:	d801      	bhi.n	8003b8e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e021      	b.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003b8e:	edd7 7a00 	vldr	s15, [r7]
 8003b92:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003be8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8003b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9e:	d801      	bhi.n	8003ba4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e016      	b.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003ba4:	edd7 7a00 	vldr	s15, [r7]
 8003ba8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003bec <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d801      	bhi.n	8003bba <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003bb6:	2305      	movs	r3, #5
 8003bb8:	e00b      	b.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003bba:	edd7 7a00 	vldr	s15, [r7]
 8003bbe:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003bf0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bca:	d801      	bhi.n	8003bd0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003bcc:	2306      	movs	r3, #6
 8003bce:	e000      	b.n	8003bd2 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003bd0:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	42480000 	.word	0x42480000
 8003bec:	42c80000 	.word	0x42c80000
 8003bf0:	43480000 	.word	0x43480000

08003bf4 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	460b      	mov	r3, r1
 8003c02:	72fb      	strb	r3, [r7, #11]
 8003c04:	4613      	mov	r3, r2
 8003c06:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10e      	bne.n	8003c32 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	695c      	ldr	r4, [r3, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	7b1b      	ldrb	r3, [r3, #12]
 8003c1c:	b298      	uxth	r0, r3
 8003c1e:	7afb      	ldrb	r3, [r7, #11]
 8003c20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	b299      	uxth	r1, r3
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	47a0      	blx	r4
 8003c2e:	4603      	mov	r3, r0
 8003c30:	e00d      	b.n	8003c4e <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	695c      	ldr	r4, [r3, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	7b1b      	ldrb	r3, [r3, #12]
 8003c3a:	b298      	uxth	r0, r3
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	b299      	uxth	r1, r3
 8003c46:	893b      	ldrh	r3, [r7, #8]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	47a0      	blx	r4
 8003c4c:	4603      	mov	r3, r0
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}

08003c56 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003c56:	b590      	push	{r4, r7, lr}
 8003c58:	b087      	sub	sp, #28
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	461a      	mov	r2, r3
 8003c62:	460b      	mov	r3, r1
 8003c64:	72fb      	strb	r3, [r7, #11]
 8003c66:	4613      	mov	r3, r2
 8003c68:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10e      	bne.n	8003c94 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	691c      	ldr	r4, [r3, #16]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	7b1b      	ldrb	r3, [r3, #12]
 8003c7e:	b298      	uxth	r0, r3
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	b299      	uxth	r1, r3
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	47a0      	blx	r4
 8003c90:	4603      	mov	r3, r0
 8003c92:	e00d      	b.n	8003cb0 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	691c      	ldr	r4, [r3, #16]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	7b1b      	ldrb	r3, [r3, #12]
 8003c9c:	b298      	uxth	r0, r3
 8003c9e:	7afb      	ldrb	r3, [r7, #11]
 8003ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	b299      	uxth	r1, r3
 8003ca8:	893b      	ldrh	r3, [r7, #8]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	47a0      	blx	r4
 8003cae:	4603      	mov	r3, r0
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}

08003cb8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	72fb      	strb	r3, [r7, #11]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10e      	bne.n	8003cf6 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	695c      	ldr	r4, [r3, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	7b1b      	ldrb	r3, [r3, #12]
 8003ce0:	b298      	uxth	r0, r3
 8003ce2:	7afb      	ldrb	r3, [r7, #11]
 8003ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	b299      	uxth	r1, r3
 8003cec:	893b      	ldrh	r3, [r7, #8]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	47a0      	blx	r4
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	e00d      	b.n	8003d12 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	695c      	ldr	r4, [r3, #20]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	7b1b      	ldrb	r3, [r3, #12]
 8003cfe:	b298      	uxth	r0, r3
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	47a0      	blx	r4
 8003d10:	4603      	mov	r3, r0
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}

08003d1a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003d1a:	b590      	push	{r4, r7, lr}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	461a      	mov	r2, r3
 8003d26:	460b      	mov	r3, r1
 8003d28:	72fb      	strb	r3, [r7, #11]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10e      	bne.n	8003d58 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	691c      	ldr	r4, [r3, #16]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	7b1b      	ldrb	r3, [r3, #12]
 8003d42:	b298      	uxth	r0, r3
 8003d44:	7afb      	ldrb	r3, [r7, #11]
 8003d46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	b299      	uxth	r1, r3
 8003d4e:	893b      	ldrh	r3, [r7, #8]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	47a0      	blx	r4
 8003d54:	4603      	mov	r3, r0
 8003d56:	e00d      	b.n	8003d74 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	691c      	ldr	r4, [r3, #16]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	7b1b      	ldrb	r3, [r3, #12]
 8003d60:	b298      	uxth	r0, r3
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b299      	uxth	r1, r3
 8003d6c:	893b      	ldrh	r3, [r7, #8]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	47a0      	blx	r4
 8003d72:	4603      	mov	r3, r0
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd90      	pop	{r4, r7, pc}

08003d7c <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003d7c:	b590      	push	{r4, r7, lr}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	461a      	mov	r2, r3
 8003d88:	460b      	mov	r3, r1
 8003d8a:	72fb      	strb	r3, [r7, #11]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685c      	ldr	r4, [r3, #4]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6898      	ldr	r0, [r3, #8]
 8003d98:	893b      	ldrh	r3, [r7, #8]
 8003d9a:	7af9      	ldrb	r1, [r7, #11]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	47a0      	blx	r4
 8003da0:	6178      	str	r0, [r7, #20]
  return ret;
 8003da2:	697b      	ldr	r3, [r7, #20]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd90      	pop	{r4, r7, pc}

08003dac <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	460b      	mov	r3, r1
 8003dba:	72fb      	strb	r3, [r7, #11]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681c      	ldr	r4, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6898      	ldr	r0, [r3, #8]
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	7af9      	ldrb	r1, [r7, #11]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	47a0      	blx	r4
 8003dd0:	6178      	str	r0, [r7, #20]
  return ret;
 8003dd2:	697b      	ldr	r3, [r7, #20]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd90      	pop	{r4, r7, pc}

08003ddc <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003de6:	f107 020c 	add.w	r2, r7, #12
 8003dea:	2301      	movs	r3, #1
 8003dec:	2120      	movs	r1, #32
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffc4 	bl	8003d7c <lsm303agr_read_reg>
 8003df4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d107      	bne.n	8003e0c <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003dfc:	f107 0210 	add.w	r2, r7, #16
 8003e00:	2301      	movs	r3, #1
 8003e02:	2123      	movs	r1, #35	; 0x23
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ffb9 	bl	8003d7c <lsm303agr_read_reg>
 8003e0a:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003e0c:	7b3b      	ldrb	r3, [r7, #12]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e00c      	b.n	8003e3a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003e20:	7c3b      	ldrb	r3, [r7, #16]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e002      	b.n	8003e3a <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003e50:	f107 0208 	add.w	r2, r7, #8
 8003e54:	2301      	movs	r3, #1
 8003e56:	2120      	movs	r1, #32
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff8f 	bl	8003d7c <lsm303agr_read_reg>
 8003e5e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	7a3b      	ldrb	r3, [r7, #8]
 8003e70:	f362 1307 	bfi	r3, r2, #4, #4
 8003e74:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003e76:	f107 0208 	add.w	r2, r7, #8
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2120      	movs	r1, #32
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff94 	bl	8003dac <lsm303agr_write_reg>
 8003e84:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003e9a:	f107 0208 	add.w	r2, r7, #8
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	2120      	movs	r1, #32
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ff6a 	bl	8003d7c <lsm303agr_read_reg>
 8003ea8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003eaa:	7a3b      	ldrb	r3, [r7, #8]
 8003eac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d83e      	bhi.n	8003f34 <lsm303agr_xl_data_rate_get+0xa4>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <lsm303agr_xl_data_rate_get+0x2c>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ee5 	.word	0x08003ee5
 8003ec0:	08003eed 	.word	0x08003eed
 8003ec4:	08003ef5 	.word	0x08003ef5
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f1d 	.word	0x08003f1d
 8003edc:	08003f25 	.word	0x08003f25
 8003ee0:	08003f2d 	.word	0x08003f2d
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
      break;
 8003eea:	e027      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
      break;
 8003ef2:	e023      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	701a      	strb	r2, [r3, #0]
      break;
 8003efa:	e01f      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2203      	movs	r2, #3
 8003f00:	701a      	strb	r2, [r3, #0]
      break;
 8003f02:	e01b      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2204      	movs	r2, #4
 8003f08:	701a      	strb	r2, [r3, #0]
      break;
 8003f0a:	e017      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2205      	movs	r2, #5
 8003f10:	701a      	strb	r2, [r3, #0]
      break;
 8003f12:	e013      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2206      	movs	r2, #6
 8003f18:	701a      	strb	r2, [r3, #0]
      break;
 8003f1a:	e00f      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2207      	movs	r2, #7
 8003f20:	701a      	strb	r2, [r3, #0]
      break;
 8003f22:	e00b      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
      break;
 8003f2a:	e007      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2209      	movs	r2, #9
 8003f30:	701a      	strb	r2, [r3, #0]
      break;
 8003f32:	e003      	b.n	8003f3c <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
      break;
 8003f3a:	bf00      	nop
  }

  return ret;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop

08003f48 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	460b      	mov	r3, r1
 8003f52:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003f54:	f107 0208 	add.w	r2, r7, #8
 8003f58:	2301      	movs	r3, #1
 8003f5a:	2123      	movs	r1, #35	; 0x23
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff0d 	bl	8003d7c <lsm303agr_read_reg>
 8003f62:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	7a3b      	ldrb	r3, [r7, #8]
 8003f74:	f362 1305 	bfi	r3, r2, #4, #2
 8003f78:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003f7a:	f107 0208 	add.w	r2, r7, #8
 8003f7e:	2301      	movs	r3, #1
 8003f80:	2123      	movs	r1, #35	; 0x23
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff12 	bl	8003dac <lsm303agr_write_reg>
 8003f88:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003f9e:	f107 0208 	add.w	r2, r7, #8
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	2123      	movs	r1, #35	; 0x23
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fee8 	bl	8003d7c <lsm303agr_read_reg>
 8003fac:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003fae:	7a3b      	ldrb	r3, [r7, #8]
 8003fb0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d81a      	bhi.n	8003ff0 <lsm303agr_xl_full_scale_get+0x5c>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <lsm303agr_xl_full_scale_get+0x2c>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fd9 	.word	0x08003fd9
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fe9 	.word	0x08003fe9
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
      break;
 8003fd6:	e00f      	b.n	8003ff8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
      break;
 8003fde:	e00b      	b.n	8003ff8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	701a      	strb	r2, [r3, #0]
      break;
 8003fe6:	e007      	b.n	8003ff8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2203      	movs	r2, #3
 8003fec:	701a      	strb	r2, [r3, #0]
      break;
 8003fee:	e003      	b.n	8003ff8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
      break;
 8003ff6:	bf00      	nop
  }

  return ret;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop

08004004 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004010:	f107 0208 	add.w	r2, r7, #8
 8004014:	2301      	movs	r3, #1
 8004016:	2123      	movs	r1, #35	; 0x23
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff feaf 	bl	8003d7c <lsm303agr_read_reg>
 800401e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	7a3b      	ldrb	r3, [r7, #8]
 8004030:	f362 13c7 	bfi	r3, r2, #7, #1
 8004034:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004036:	f107 0208 	add.w	r2, r7, #8
 800403a:	2301      	movs	r3, #1
 800403c:	2123      	movs	r1, #35	; 0x23
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff feb4 	bl	8003dac <lsm303agr_write_reg>
 8004044:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004046:	68fb      	ldr	r3, [r7, #12]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800405a:	f107 020c 	add.w	r2, r7, #12
 800405e:	2306      	movs	r3, #6
 8004060:	2128      	movs	r1, #40	; 0x28
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe8a 	bl	8003d7c <lsm303agr_read_reg>
 8004068:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800406a:	7b7b      	ldrb	r3, [r7, #13]
 800406c:	b21a      	sxth	r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004078:	b29b      	uxth	r3, r3
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	b29a      	uxth	r2, r3
 800407e:	7b3b      	ldrb	r3, [r7, #12]
 8004080:	b29b      	uxth	r3, r3
 8004082:	4413      	add	r3, r2
 8004084:	b29b      	uxth	r3, r3
 8004086:	b21a      	sxth	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800408c:	7bfa      	ldrb	r2, [r7, #15]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3302      	adds	r3, #2
 8004092:	b212      	sxth	r2, r2
 8004094:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	3302      	adds	r3, #2
 800409a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	7bbb      	ldrb	r3, [r7, #14]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	3302      	adds	r3, #2
 80040b0:	b212      	sxth	r2, r2
 80040b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80040b4:	7c7a      	ldrb	r2, [r7, #17]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	3304      	adds	r3, #4
 80040ba:	b212      	sxth	r2, r2
 80040bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	3304      	adds	r3, #4
 80040c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	7c3b      	ldrb	r3, [r7, #16]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	3304      	adds	r3, #4
 80040d8:	b212      	sxth	r2, r2
 80040da:	801a      	strh	r2, [r3, #0]
  return ret;
 80040dc:	697b      	ldr	r3, [r7, #20]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80040f2:	f107 0208 	add.w	r2, r7, #8
 80040f6:	2301      	movs	r3, #1
 80040f8:	2160      	movs	r1, #96	; 0x60
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff fe3e 	bl	8003d7c <lsm303agr_read_reg>
 8004100:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10f      	bne.n	8004128 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	b2da      	uxtb	r2, r3
 8004110:	7a3b      	ldrb	r3, [r7, #8]
 8004112:	f362 0301 	bfi	r3, r2, #0, #2
 8004116:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004118:	f107 0208 	add.w	r2, r7, #8
 800411c:	2301      	movs	r3, #1
 800411e:	2160      	movs	r1, #96	; 0x60
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff fe43 	bl	8003dac <lsm303agr_write_reg>
 8004126:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004128:	68fb      	ldr	r3, [r7, #12]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b084      	sub	sp, #16
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800413e:	f107 0208 	add.w	r2, r7, #8
 8004142:	2301      	movs	r3, #1
 8004144:	2160      	movs	r1, #96	; 0x60
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff fe18 	bl	8003d7c <lsm303agr_read_reg>
 800414c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10f      	bne.n	8004174 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	b2da      	uxtb	r2, r3
 800415c:	7a3b      	ldrb	r3, [r7, #8]
 800415e:	f362 0383 	bfi	r3, r2, #2, #2
 8004162:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004164:	f107 0208 	add.w	r2, r7, #8
 8004168:	2301      	movs	r3, #1
 800416a:	2160      	movs	r1, #96	; 0x60
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe1d 	bl	8003dac <lsm303agr_write_reg>
 8004172:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004174:	68fb      	ldr	r3, [r7, #12]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800418a:	f107 0208 	add.w	r2, r7, #8
 800418e:	2301      	movs	r3, #1
 8004190:	2160      	movs	r1, #96	; 0x60
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fdf2 	bl	8003d7c <lsm303agr_read_reg>
 8004198:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 800419a:	7a3b      	ldrb	r3, [r7, #8]
 800419c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d81a      	bhi.n	80041dc <lsm303agr_mag_data_rate_get+0x5c>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <lsm303agr_mag_data_rate_get+0x2c>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041c5 	.word	0x080041c5
 80041b4:	080041cd 	.word	0x080041cd
 80041b8:	080041d5 	.word	0x080041d5
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
      break;
 80041c2:	e00f      	b.n	80041e4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
      break;
 80041ca:	e00b      	b.n	80041e4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2202      	movs	r2, #2
 80041d0:	701a      	strb	r2, [r3, #0]
      break;
 80041d2:	e007      	b.n	80041e4 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2203      	movs	r2, #3
 80041d8:	701a      	strb	r2, [r3, #0]
      break;
 80041da:	e003      	b.n	80041e4 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
      break;
 80041e2:	bf00      	nop
  }

  return ret;
 80041e4:	68fb      	ldr	r3, [r7, #12]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80041fc:	f107 0208 	add.w	r2, r7, #8
 8004200:	2301      	movs	r3, #1
 8004202:	2162      	movs	r1, #98	; 0x62
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fdb9 	bl	8003d7c <lsm303agr_read_reg>
 800420a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004212:	78fb      	ldrb	r3, [r7, #3]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	b2da      	uxtb	r2, r3
 800421a:	7a3b      	ldrb	r3, [r7, #8]
 800421c:	f362 1304 	bfi	r3, r2, #4, #1
 8004220:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004222:	f107 0208 	add.w	r2, r7, #8
 8004226:	2301      	movs	r3, #1
 8004228:	2162      	movs	r1, #98	; 0x62
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7ff fdbe 	bl	8003dac <lsm303agr_write_reg>
 8004230:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004246:	f107 020c 	add.w	r2, r7, #12
 800424a:	2306      	movs	r3, #6
 800424c:	2168      	movs	r1, #104	; 0x68
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fd94 	bl	8003d7c <lsm303agr_read_reg>
 8004254:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004256:	7b7b      	ldrb	r3, [r7, #13]
 8004258:	b21a      	sxth	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004264:	b29b      	uxth	r3, r3
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	b29a      	uxth	r2, r3
 800426a:	7b3b      	ldrb	r3, [r7, #12]
 800426c:	b29b      	uxth	r3, r3
 800426e:	4413      	add	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	b21a      	sxth	r2, r3
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	3302      	adds	r3, #2
 800427e:	b212      	sxth	r2, r2
 8004280:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	3302      	adds	r3, #2
 8004286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800428a:	b29b      	uxth	r3, r3
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	b29a      	uxth	r2, r3
 8004290:	7bbb      	ldrb	r3, [r7, #14]
 8004292:	b29b      	uxth	r3, r3
 8004294:	4413      	add	r3, r2
 8004296:	b29a      	uxth	r2, r3
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	3302      	adds	r3, #2
 800429c:	b212      	sxth	r2, r2
 800429e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80042a0:	7c7a      	ldrb	r2, [r7, #17]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	3304      	adds	r3, #4
 80042a6:	b212      	sxth	r2, r2
 80042a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	7c3b      	ldrb	r3, [r7, #16]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4413      	add	r3, r2
 80042be:	b29a      	uxth	r2, r3
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	3304      	adds	r3, #4
 80042c4:	b212      	sxth	r2, r2
 80042c6:	801a      	strh	r2, [r3, #0]
  return ret;
 80042c8:	697b      	ldr	r3, [r7, #20]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 80042dc:	2301      	movs	r3, #1
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	210f      	movs	r1, #15
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff fd4a 	bl	8003d7c <lsm303agr_read_reg>
 80042e8:	60f8      	str	r0, [r7, #12]
  return ret;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 80042fe:	2301      	movs	r3, #1
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	214f      	movs	r1, #79	; 0x4f
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fd39 	bl	8003d7c <lsm303agr_read_reg>
 800430a:	60f8      	str	r0, [r7, #12]
  return ret;
 800430c:	68fb      	ldr	r3, [r7, #12]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004322:	f107 0208 	add.w	r2, r7, #8
 8004326:	2301      	movs	r3, #1
 8004328:	2162      	movs	r1, #98	; 0x62
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fd26 	bl	8003d7c <lsm303agr_read_reg>
 8004330:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10f      	bne.n	8004358 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	7a3b      	ldrb	r3, [r7, #8]
 8004342:	f362 0341 	bfi	r3, r2, #1, #1
 8004346:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004348:	f107 0208 	add.w	r2, r7, #8
 800434c:	2301      	movs	r3, #1
 800434e:	2162      	movs	r1, #98	; 0x62
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fd2b 	bl	8003dac <lsm303agr_write_reg>
 8004356:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800436e:	f107 0208 	add.w	r2, r7, #8
 8004372:	2301      	movs	r3, #1
 8004374:	212e      	movs	r1, #46	; 0x2e
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fd00 	bl	8003d7c <lsm303agr_read_reg>
 800437c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10f      	bne.n	80043a4 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	b2da      	uxtb	r2, r3
 800438c:	7a3b      	ldrb	r3, [r7, #8]
 800438e:	f362 1387 	bfi	r3, r2, #6, #2
 8004392:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004394:	f107 0208 	add.w	r2, r7, #8
 8004398:	2301      	movs	r3, #1
 800439a:	212e      	movs	r1, #46	; 0x2e
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fd05 	bl	8003dac <lsm303agr_write_reg>
 80043a2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80043a4:	68fb      	ldr	r3, [r7, #12]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80043ba:	f107 0208 	add.w	r2, r7, #8
 80043be:	2301      	movs	r3, #1
 80043c0:	2162      	movs	r1, #98	; 0x62
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fcda 	bl	8003d7c <lsm303agr_read_reg>
 80043c8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10f      	bne.n	80043f0 <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	7a3b      	ldrb	r3, [r7, #8]
 80043da:	f362 1345 	bfi	r3, r2, #5, #1
 80043de:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80043e0:	f107 0208 	add.w	r2, r7, #8
 80043e4:	2301      	movs	r3, #1
 80043e6:	2162      	movs	r1, #98	; 0x62
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fcdf 	bl	8003dac <lsm303agr_write_reg>
 80043ee:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80043f0:	68fb      	ldr	r3, [r7, #12]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004410:	f04f 33ff 	mov.w	r3, #4294967295
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	e04d      	b.n	80044b4 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	7b1a      	ldrb	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1b      	ldr	r2, [pc, #108]	; (80044c0 <LSM6DSL_RegisterBusIO+0xc4>)
 8004454:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <LSM6DSL_RegisterBusIO+0xc8>)
 800445a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e020      	b.n	80044b4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4798      	blx	r3
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e016      	b.n	80044b4 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d112      	bne.n	80044b4 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004498:	230c      	movs	r3, #12
 800449a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800449c:	7afb      	ldrb	r3, [r7, #11]
 800449e:	461a      	mov	r2, r3
 80044a0:	2112      	movs	r1, #18
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fd2d 	bl	8004f02 <LSM6DSL_Write_Reg>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80044b4:	68fb      	ldr	r3, [r7, #12]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	08005371 	.word	0x08005371
 80044c4:	080053a7 	.word	0x080053a7

080044c8 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	331c      	adds	r3, #28
 80044d4:	2101      	movs	r1, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	f001 fa59 	bl	800598e <lsm6dsl_auto_increment_set>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	e054      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	331c      	adds	r3, #28
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f980 	bl	80057f4 <lsm6dsl_block_data_update_set>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	e048      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	331c      	adds	r3, #28
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fa67 	bl	80059da <lsm6dsl_fifo_mode_set>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004512:	f04f 33ff 	mov.w	r3, #4294967295
 8004516:	e03c      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2204      	movs	r2, #4
 800451c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	331c      	adds	r3, #28
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f000 ffe6 	bl	80054f8 <lsm6dsl_xl_data_rate_set>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004532:	f04f 33ff 	mov.w	r3, #4294967295
 8004536:	e02c      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	331c      	adds	r3, #28
 800453c:	2100      	movs	r1, #0
 800453e:	4618      	mov	r0, r3
 8004540:	f000 ff7c 	bl	800543c <lsm6dsl_xl_full_scale_set>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295
 800454e:	e020      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2204      	movs	r2, #4
 8004554:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	331c      	adds	r3, #28
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f001 f8c0 	bl	80056e4 <lsm6dsl_gy_data_rate_set>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	e010      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	331c      	adds	r3, #28
 8004574:	2106      	movs	r1, #6
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f84c 	bl	8005614 <lsm6dsl_gy_full_scale_set>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004582:	f04f 33ff 	mov.w	r3, #4294967295
 8004586:	e004      	b.n	8004592 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f888 	bl	80046b8 <LSM6DSL_ACC_Disable>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	e015      	b.n	80045e0 <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fa9a 	bl	8004aee <LSM6DSL_GYRO_Disable>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	e00c      	b.n	80045e0 <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	331c      	adds	r3, #28
 80045f6:	6839      	ldr	r1, [r7, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 f9b7 	bl	800596c <lsm6dsl_device_id_get>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004604:	f04f 33ff 	mov.w	r3, #4294967295
 8004608:	e000      	b.n	800460c <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2201      	movs	r2, #1
 8004622:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2201      	movs	r2, #1
 8004628:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800463c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2210      	movs	r2, #16
 8004642:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	4a07      	ldr	r2, [pc, #28]	; (800466c <LSM6DSL_GetCapabilities+0x58>)
 800464e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	4a06      	ldr	r2, [pc, #24]	; (800466c <LSM6DSL_GetCapabilities+0x58>)
 8004654:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	45d02000 	.word	0x45d02000

08004670 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e014      	b.n	80046b0 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f103 021c 	add.w	r2, r3, #28
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f000 ff2f 	bl	80054f8 <lsm6dsl_xl_data_rate_set>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80046a0:	f04f 33ff 	mov.w	r3, #4294967295
 80046a4:	e004      	b.n	80046b0 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e01f      	b.n	800470e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f103 021c 	add.w	r2, r3, #28
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	332b      	adds	r3, #43	; 0x2b
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 ff32 	bl	8005544 <lsm6dsl_xl_data_rate_get>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80046e6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ea:	e010      	b.n	800470e <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	331c      	adds	r3, #28
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 ff00 	bl	80054f8 <lsm6dsl_xl_data_rate_set>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	e004      	b.n	800470e <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	331c      	adds	r3, #28
 800472a:	f107 020b 	add.w	r2, r7, #11
 800472e:	4611      	mov	r1, r2
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fea9 	bl	8005488 <lsm6dsl_xl_full_scale_get>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800473c:	f04f 33ff 	mov.w	r3, #4294967295
 8004740:	e023      	b.n	800478a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004742:	7afb      	ldrb	r3, [r7, #11]
 8004744:	2b03      	cmp	r3, #3
 8004746:	d81b      	bhi.n	8004780 <LSM6DSL_ACC_GetSensitivity+0x68>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004761 	.word	0x08004761
 8004754:	08004779 	.word	0x08004779
 8004758:	08004769 	.word	0x08004769
 800475c:	08004771 	.word	0x08004771
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004764:	601a      	str	r2, [r3, #0]
      break;
 8004766:	e00f      	b.n	8004788 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800476c:	601a      	str	r2, [r3, #0]
      break;
 800476e:	e00b      	b.n	8004788 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	4a0a      	ldr	r2, [pc, #40]	; (800479c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004774:	601a      	str	r2, [r3, #0]
      break;
 8004776:	e007      	b.n	8004788 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800477c:	601a      	str	r2, [r3, #0]
      break;
 800477e:	e003      	b.n	8004788 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295
 8004784:	60fb      	str	r3, [r7, #12]
      break;
 8004786:	bf00      	nop
  }

  return ret;
 8004788:	68fb      	ldr	r3, [r7, #12]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	3d79db23 	.word	0x3d79db23
 8004798:	3df9db23 	.word	0x3df9db23
 800479c:	3e79db23 	.word	0x3e79db23
 80047a0:	3ef9db23 	.word	0x3ef9db23

080047a4 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	331c      	adds	r3, #28
 80047b6:	f107 020b 	add.w	r2, r7, #11
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fec1 	bl	8005544 <lsm6dsl_xl_data_rate_get>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80047c8:	f04f 33ff 	mov.w	r3, #4294967295
 80047cc:	e054      	b.n	8004878 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80047ce:	7afb      	ldrb	r3, [r7, #11]
 80047d0:	2b0b      	cmp	r3, #11
 80047d2:	d84c      	bhi.n	800486e <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	0800480d 	.word	0x0800480d
 80047e0:	0800481f 	.word	0x0800481f
 80047e4:	08004827 	.word	0x08004827
 80047e8:	0800482f 	.word	0x0800482f
 80047ec:	08004837 	.word	0x08004837
 80047f0:	0800483f 	.word	0x0800483f
 80047f4:	08004847 	.word	0x08004847
 80047f8:	0800484f 	.word	0x0800484f
 80047fc:	08004857 	.word	0x08004857
 8004800:	0800485f 	.word	0x0800485f
 8004804:	08004867 	.word	0x08004867
 8004808:	08004817 	.word	0x08004817
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
      break;
 8004814:	e02f      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	4a19      	ldr	r2, [pc, #100]	; (8004880 <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 800481a:	601a      	str	r2, [r3, #0]
      break;
 800481c:	e02b      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 8004822:	601a      	str	r2, [r3, #0]
      break;
 8004824:	e027      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	4a17      	ldr	r2, [pc, #92]	; (8004888 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 800482a:	601a      	str	r2, [r3, #0]
      break;
 800482c:	e023      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	; (800488c <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 8004832:	601a      	str	r2, [r3, #0]
      break;
 8004834:	e01f      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 800483a:	601a      	str	r2, [r3, #0]
      break;
 800483c:	e01b      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	4a14      	ldr	r2, [pc, #80]	; (8004894 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 8004842:	601a      	str	r2, [r3, #0]
      break;
 8004844:	e017      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	4a13      	ldr	r2, [pc, #76]	; (8004898 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 800484a:	601a      	str	r2, [r3, #0]
      break;
 800484c:	e013      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	4a12      	ldr	r2, [pc, #72]	; (800489c <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 8004852:	601a      	str	r2, [r3, #0]
      break;
 8004854:	e00f      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	4a11      	ldr	r2, [pc, #68]	; (80048a0 <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 800485a:	601a      	str	r2, [r3, #0]
      break;
 800485c:	e00b      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 8004862:	601a      	str	r2, [r3, #0]
      break;
 8004864:	e007      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 800486a:	601a      	str	r2, [r3, #0]
      break;
 800486c:	e003      	b.n	8004876 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	60fb      	str	r3, [r7, #12]
      break;
 8004874:	bf00      	nop
  }

  return ret;
 8004876:	68fb      	ldr	r3, [r7, #12]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	3fcccccd 	.word	0x3fcccccd
 8004884:	41480000 	.word	0x41480000
 8004888:	41d00000 	.word	0x41d00000
 800488c:	42500000 	.word	0x42500000
 8004890:	42d00000 	.word	0x42d00000
 8004894:	43500000 	.word	0x43500000
 8004898:	43d00000 	.word	0x43d00000
 800489c:	44504000 	.word	0x44504000
 80048a0:	44cf8000 	.word	0x44cf8000
 80048a4:	45502000 	.word	0x45502000
 80048a8:	45d02000 	.word	0x45d02000

080048ac <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d106      	bne.n	80048d0 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80048c2:	ed97 0a00 	vldr	s0, [r7]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fb36 	bl	8004f38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80048cc:	4603      	mov	r3, r0
 80048ce:	e005      	b.n	80048dc <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80048d0:	ed97 0a00 	vldr	s0, [r7]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fbbb 	bl	8005050 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80048da:	4603      	mov	r3, r0
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	331c      	adds	r3, #28
 80048f6:	f107 020b 	add.w	r2, r7, #11
 80048fa:	4611      	mov	r1, r2
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fdc3 	bl	8005488 <lsm6dsl_xl_full_scale_get>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004908:	f04f 33ff 	mov.w	r3, #4294967295
 800490c:	e023      	b.n	8004956 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800490e:	7afb      	ldrb	r3, [r7, #11]
 8004910:	2b03      	cmp	r3, #3
 8004912:	d81b      	bhi.n	800494c <LSM6DSL_ACC_GetFullScale+0x68>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <LSM6DSL_ACC_GetFullScale+0x38>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	0800492d 	.word	0x0800492d
 8004920:	08004945 	.word	0x08004945
 8004924:	08004935 	.word	0x08004935
 8004928:	0800493d 	.word	0x0800493d
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2202      	movs	r2, #2
 8004930:	601a      	str	r2, [r3, #0]
      break;
 8004932:	e00f      	b.n	8004954 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2204      	movs	r2, #4
 8004938:	601a      	str	r2, [r3, #0]
      break;
 800493a:	e00b      	b.n	8004954 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2208      	movs	r2, #8
 8004940:	601a      	str	r2, [r3, #0]
      break;
 8004942:	e007      	b.n	8004954 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2210      	movs	r2, #16
 8004948:	601a      	str	r2, [r3, #0]
      break;
 800494a:	e003      	b.n	8004954 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	60fb      	str	r3, [r7, #12]
      break;
 8004952:	bf00      	nop
  }

  return ret;
 8004954:	68fb      	ldr	r3, [r7, #12]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop

08004960 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b02      	cmp	r3, #2
 800496e:	dd0b      	ble.n	8004988 <LSM6DSL_ACC_SetFullScale+0x28>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b04      	cmp	r3, #4
 8004974:	dd06      	ble.n	8004984 <LSM6DSL_ACC_SetFullScale+0x24>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	dc01      	bgt.n	8004980 <LSM6DSL_ACC_SetFullScale+0x20>
 800497c:	2303      	movs	r3, #3
 800497e:	e004      	b.n	800498a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004980:	2301      	movs	r3, #1
 8004982:	e002      	b.n	800498a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004984:	2302      	movs	r3, #2
 8004986:	e000      	b.n	800498a <LSM6DSL_ACC_SetFullScale+0x2a>
 8004988:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 800498a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	331c      	adds	r3, #28
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd51 	bl	800543c <lsm6dsl_xl_full_scale_set>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80049a0:	f04f 33ff 	mov.w	r3, #4294967295
 80049a4:	e000      	b.n	80049a8 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	331c      	adds	r3, #28
 80049be:	f107 0208 	add.w	r2, r7, #8
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 ff86 	bl	80058d6 <lsm6dsl_acceleration_raw_get>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	e00c      	b.n	80049f0 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80049d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80049de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80049e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	331c      	adds	r3, #28
 8004a0c:	f107 0210 	add.w	r2, r7, #16
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 ff5f 	bl	80058d6 <lsm6dsl_acceleration_raw_get>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a22:	e03c      	b.n	8004a9e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff fe74 	bl	8004718 <LSM6DSL_ACC_GetSensitivity>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e030      	b.n	8004a9e <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004a3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a54:	ee17 2a90 	vmov	r2, s15
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004a5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a74:	ee17 2a90 	vmov	r2, s15
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a94:	ee17 2a90 	vmov	r2, s15
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e014      	b.n	8004ae6 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f103 021c 	add.w	r2, r3, #28
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fe0a 	bl	80056e4 <lsm6dsl_gy_data_rate_set>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ada:	e004      	b.n	8004ae6 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e01f      	b.n	8004b44 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f103 021c 	add.w	r2, r3, #28
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	332c      	adds	r3, #44	; 0x2c
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f000 fe0d 	bl	8005730 <lsm6dsl_gy_data_rate_get>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b20:	e010      	b.n	8004b44 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	331c      	adds	r3, #28
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fddb 	bl	80056e4 <lsm6dsl_gy_data_rate_set>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	e004      	b.n	8004b44 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	331c      	adds	r3, #28
 8004b5e:	f107 020b 	add.w	r2, r7, #11
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fd7b 	bl	8005660 <lsm6dsl_gy_full_scale_get>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004b70:	f04f 33ff 	mov.w	r3, #4294967295
 8004b74:	e02d      	b.n	8004bd2 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004b76:	7afb      	ldrb	r3, [r7, #11]
 8004b78:	2b06      	cmp	r3, #6
 8004b7a:	d825      	bhi.n	8004bc8 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004ba1 	.word	0x08004ba1
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bc9 	.word	0x08004bc9
 8004b94:	08004bb9 	.word	0x08004bb9
 8004b98:	08004bc9 	.word	0x08004bc9
 8004b9c:	08004bc1 	.word	0x08004bc1
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4a0e      	ldr	r2, [pc, #56]	; (8004bdc <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004ba4:	601a      	str	r2, [r3, #0]
      break;
 8004ba6:	e013      	b.n	8004bd0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	4a0d      	ldr	r2, [pc, #52]	; (8004be0 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004bac:	601a      	str	r2, [r3, #0]
      break;
 8004bae:	e00f      	b.n	8004bd0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4a0c      	ldr	r2, [pc, #48]	; (8004be4 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004bb4:	601a      	str	r2, [r3, #0]
      break;
 8004bb6:	e00b      	b.n	8004bd0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004bbc:	601a      	str	r2, [r3, #0]
      break;
 8004bbe:	e007      	b.n	8004bd0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004bc4:	601a      	str	r2, [r3, #0]
      break;
 8004bc6:	e003      	b.n	8004bd0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	60fb      	str	r3, [r7, #12]
      break;
 8004bce:	bf00      	nop
  }

  return ret;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	408c0000 	.word	0x408c0000
 8004be0:	410c0000 	.word	0x410c0000
 8004be4:	418c0000 	.word	0x418c0000
 8004be8:	420c0000 	.word	0x420c0000
 8004bec:	428c0000 	.word	0x428c0000

08004bf0 <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	331c      	adds	r3, #28
 8004c02:	f107 020b 	add.w	r2, r7, #11
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fd91 	bl	8005730 <lsm6dsl_gy_data_rate_get>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295
 8004c18:	e04e      	b.n	8004cb8 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	2b0a      	cmp	r3, #10
 8004c1e:	d846      	bhi.n	8004cae <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c55 	.word	0x08004c55
 8004c2c:	08004c5f 	.word	0x08004c5f
 8004c30:	08004c67 	.word	0x08004c67
 8004c34:	08004c6f 	.word	0x08004c6f
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c7f 	.word	0x08004c7f
 8004c40:	08004c87 	.word	0x08004c87
 8004c44:	08004c8f 	.word	0x08004c8f
 8004c48:	08004c97 	.word	0x08004c97
 8004c4c:	08004c9f 	.word	0x08004c9f
 8004c50:	08004ca7 	.word	0x08004ca7
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
      break;
 8004c5c:	e02b      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8004c62:	601a      	str	r2, [r3, #0]
      break;
 8004c64:	e027      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004c6a:	601a      	str	r2, [r3, #0]
      break;
 8004c6c:	e023      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8004c72:	601a      	str	r2, [r3, #0]
      break;
 8004c74:	e01f      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	4a14      	ldr	r2, [pc, #80]	; (8004ccc <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004c7a:	601a      	str	r2, [r3, #0]
      break;
 8004c7c:	e01b      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8004c82:	601a      	str	r2, [r3, #0]
      break;
 8004c84:	e017      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	4a12      	ldr	r2, [pc, #72]	; (8004cd4 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004c8a:	601a      	str	r2, [r3, #0]
      break;
 8004c8c:	e013      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8004c92:	601a      	str	r2, [r3, #0]
      break;
 8004c94:	e00f      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8004c9a:	601a      	str	r2, [r3, #0]
      break;
 8004c9c:	e00b      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8004ca2:	601a      	str	r2, [r3, #0]
      break;
 8004ca4:	e007      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004caa:	601a      	str	r2, [r3, #0]
      break;
 8004cac:	e003      	b.n	8004cb6 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb2:	60fb      	str	r3, [r7, #12]
      break;
 8004cb4:	bf00      	nop
  }

  return ret;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	41480000 	.word	0x41480000
 8004cc4:	41d00000 	.word	0x41d00000
 8004cc8:	42500000 	.word	0x42500000
 8004ccc:	42d00000 	.word	0x42d00000
 8004cd0:	43500000 	.word	0x43500000
 8004cd4:	43d00000 	.word	0x43d00000
 8004cd8:	44504000 	.word	0x44504000
 8004cdc:	44cf8000 	.word	0x44cf8000
 8004ce0:	45502000 	.word	0x45502000
 8004ce4:	45d02000 	.word	0x45d02000

08004ce8 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d106      	bne.n	8004d0c <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004cfe:	ed97 0a00 	vldr	s0, [r7]
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fa26 	bl	8005154 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	e005      	b.n	8004d18 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004d0c:	ed97 0a00 	vldr	s0, [r7]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 faab 	bl	800526c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004d16:	4603      	mov	r3, r0
  }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	331c      	adds	r3, #28
 8004d32:	f107 020b 	add.w	r2, r7, #11
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fc91 	bl	8005660 <lsm6dsl_gy_full_scale_get>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	e030      	b.n	8004dac <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d828      	bhi.n	8004da2 <LSM6DSL_GYRO_GetFullScale+0x82>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d75 	.word	0x08004d75
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d8f 	.word	0x08004d8f
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004d99 	.word	0x08004d99
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	227d      	movs	r2, #125	; 0x7d
 8004d78:	601a      	str	r2, [r3, #0]
      break;
 8004d7a:	e016      	b.n	8004daa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	22fa      	movs	r2, #250	; 0xfa
 8004d80:	601a      	str	r2, [r3, #0]
      break;
 8004d82:	e012      	b.n	8004daa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d8a:	601a      	str	r2, [r3, #0]
      break;
 8004d8c:	e00d      	b.n	8004daa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d94:	601a      	str	r2, [r3, #0]
      break;
 8004d96:	e008      	b.n	8004daa <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004d9e:	601a      	str	r2, [r3, #0]
      break;
 8004da0:	e003      	b.n	8004daa <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295
 8004da6:	60fb      	str	r3, [r7, #12]
      break;
 8004da8:	bf00      	nop
  }

  return ret;
 8004daa:	68fb      	ldr	r3, [r7, #12]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b7d      	cmp	r3, #125	; 0x7d
 8004dc2:	dd12      	ble.n	8004dea <LSM6DSL_GYRO_SetFullScale+0x36>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2bfa      	cmp	r3, #250	; 0xfa
 8004dc8:	dd0d      	ble.n	8004de6 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dd0:	dd07      	ble.n	8004de2 <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd8:	dc01      	bgt.n	8004dde <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004dda:	2304      	movs	r3, #4
 8004ddc:	e006      	b.n	8004dec <LSM6DSL_GYRO_SetFullScale+0x38>
 8004dde:	2306      	movs	r3, #6
 8004de0:	e004      	b.n	8004dec <LSM6DSL_GYRO_SetFullScale+0x38>
 8004de2:	2302      	movs	r3, #2
 8004de4:	e002      	b.n	8004dec <LSM6DSL_GYRO_SetFullScale+0x38>
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <LSM6DSL_GYRO_SetFullScale+0x38>
 8004dea:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004dec:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	331c      	adds	r3, #28
 8004df2:	7bfa      	ldrb	r2, [r7, #15]
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fc0c 	bl	8005614 <lsm6dsl_gy_full_scale_set>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004e02:	f04f 33ff 	mov.w	r3, #4294967295
 8004e06:	e000      	b.n	8004e0a <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	331c      	adds	r3, #28
 8004e20:	f107 0208 	add.w	r2, r7, #8
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fd0a 	bl	8005840 <lsm6dsl_angular_rate_raw_get>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
 8004e36:	e00c      	b.n	8004e52 <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004e38:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004e40:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004e48:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	331c      	adds	r3, #28
 8004e68:	f107 0210 	add.w	r2, r7, #16
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fce6 	bl	8005840 <lsm6dsl_angular_rate_raw_get>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7e:	e03c      	b.n	8004efa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004e80:	f107 030c 	add.w	r3, r7, #12
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff fe60 	bl	8004b4c <LSM6DSL_GYRO_GetSensitivity>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004e92:	f04f 33ff 	mov.w	r3, #4294967295
 8004e96:	e030      	b.n	8004efa <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004e98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e9c:	ee07 3a90 	vmov	s15, r3
 8004ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eb0:	ee17 2a90 	vmov	r2, s15
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004eb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ed0:	ee17 2a90 	vmov	r2, s15
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004ed8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ee4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ef0:	ee17 2a90 	vmov	r2, s15
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f103 001c 	add.w	r0, r3, #28
 8004f18:	1cba      	adds	r2, r7, #2
 8004f1a:	78f9      	ldrb	r1, [r7, #3]
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f000 fa75 	bl	800540c <lsm6dsl_write_reg>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	e000      	b.n	8004f30 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004f44:	edd7 7a00 	vldr	s15, [r7]
 8004f48:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f54:	d801      	bhi.n	8004f5a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e058      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004f5a:	edd7 7a00 	vldr	s15, [r7]
 8004f5e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6a:	d801      	bhi.n	8004f70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e04d      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004f70:	edd7 7a00 	vldr	s15, [r7]
 8004f74:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005034 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f80:	d801      	bhi.n	8004f86 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004f82:	2303      	movs	r3, #3
 8004f84:	e042      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004f86:	edd7 7a00 	vldr	s15, [r7]
 8004f8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005038 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f96:	d801      	bhi.n	8004f9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	e037      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004f9c:	edd7 7a00 	vldr	s15, [r7]
 8004fa0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800503c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	d801      	bhi.n	8004fb2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004fae:	2305      	movs	r3, #5
 8004fb0:	e02c      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004fb2:	edd7 7a00 	vldr	s15, [r7]
 8004fb6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005040 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc2:	d801      	bhi.n	8004fc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004fc4:	2306      	movs	r3, #6
 8004fc6:	e021      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004fc8:	edd7 7a00 	vldr	s15, [r7]
 8004fcc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005044 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd8:	d801      	bhi.n	8004fde <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004fda:	2307      	movs	r3, #7
 8004fdc:	e016      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004fde:	edd7 7a00 	vldr	s15, [r7]
 8004fe2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005048 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fee:	d801      	bhi.n	8004ff4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	e00b      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ff4:	edd7 7a00 	vldr	s15, [r7]
 8004ff8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800504c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005004:	d801      	bhi.n	800500a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005006:	2309      	movs	r3, #9
 8005008:	e000      	b.n	800500c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800500a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 800500c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	331c      	adds	r3, #28
 8005012:	7bfa      	ldrb	r2, [r7, #15]
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fa6e 	bl	80054f8 <lsm6dsl_xl_data_rate_set>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	e000      	b.n	800502a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	42500000 	.word	0x42500000
 8005038:	42d00000 	.word	0x42d00000
 800503c:	43500000 	.word	0x43500000
 8005040:	43d00000 	.word	0x43d00000
 8005044:	44504000 	.word	0x44504000
 8005048:	44cf8000 	.word	0x44cf8000
 800504c:	45502000 	.word	0x45502000

08005050 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 800505c:	edd7 7a00 	vldr	s15, [r7]
 8005060:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800506c:	d801      	bhi.n	8005072 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 800506e:	2301      	movs	r3, #1
 8005070:	e058      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005072:	edd7 7a00 	vldr	s15, [r7]
 8005076:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800507a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005082:	d801      	bhi.n	8005088 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005084:	2302      	movs	r3, #2
 8005086:	e04d      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005088:	edd7 7a00 	vldr	s15, [r7]
 800508c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005138 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	d801      	bhi.n	800509e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800509a:	2303      	movs	r3, #3
 800509c:	e042      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800509e:	edd7 7a00 	vldr	s15, [r7]
 80050a2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800513c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 80050a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ae:	d801      	bhi.n	80050b4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 80050b0:	2304      	movs	r3, #4
 80050b2:	e037      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80050b4:	edd7 7a00 	vldr	s15, [r7]
 80050b8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005140 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80050bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c4:	d801      	bhi.n	80050ca <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80050c6:	2305      	movs	r3, #5
 80050c8:	e02c      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80050ca:	edd7 7a00 	vldr	s15, [r7]
 80050ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005144 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80050d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	d801      	bhi.n	80050e0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 80050dc:	2306      	movs	r3, #6
 80050de:	e021      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80050e0:	edd7 7a00 	vldr	s15, [r7]
 80050e4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005148 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80050e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f0:	d801      	bhi.n	80050f6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80050f2:	2307      	movs	r3, #7
 80050f4:	e016      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80050f6:	edd7 7a00 	vldr	s15, [r7]
 80050fa:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800514c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80050fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005106:	d801      	bhi.n	800510c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005108:	2308      	movs	r3, #8
 800510a:	e00b      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800510c:	edd7 7a00 	vldr	s15, [r7]
 8005110:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005150 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	d801      	bhi.n	8005122 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800511e:	2309      	movs	r3, #9
 8005120:	e000      	b.n	8005124 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005122:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	42500000 	.word	0x42500000
 800513c:	42d00000 	.word	0x42d00000
 8005140:	43500000 	.word	0x43500000
 8005144:	43d00000 	.word	0x43d00000
 8005148:	44504000 	.word	0x44504000
 800514c:	44cf8000 	.word	0x44cf8000
 8005150:	45502000 	.word	0x45502000

08005154 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005160:	edd7 7a00 	vldr	s15, [r7]
 8005164:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005170:	d801      	bhi.n	8005176 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005172:	2301      	movs	r3, #1
 8005174:	e058      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005176:	edd7 7a00 	vldr	s15, [r7]
 800517a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800517e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005186:	d801      	bhi.n	800518c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005188:	2302      	movs	r3, #2
 800518a:	e04d      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800518c:	edd7 7a00 	vldr	s15, [r7]
 8005190:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005250 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519c:	d801      	bhi.n	80051a2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800519e:	2303      	movs	r3, #3
 80051a0:	e042      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051a2:	edd7 7a00 	vldr	s15, [r7]
 80051a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005254 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80051aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b2:	d801      	bhi.n	80051b8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80051b4:	2304      	movs	r3, #4
 80051b6:	e037      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051b8:	edd7 7a00 	vldr	s15, [r7]
 80051bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005258 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80051c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c8:	d801      	bhi.n	80051ce <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80051ca:	2305      	movs	r3, #5
 80051cc:	e02c      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051ce:	edd7 7a00 	vldr	s15, [r7]
 80051d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800525c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80051d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051de:	d801      	bhi.n	80051e4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80051e0:	2306      	movs	r3, #6
 80051e2:	e021      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051e4:	edd7 7a00 	vldr	s15, [r7]
 80051e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005260 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80051ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f4:	d801      	bhi.n	80051fa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80051f6:	2307      	movs	r3, #7
 80051f8:	e016      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80051fa:	edd7 7a00 	vldr	s15, [r7]
 80051fe:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005264 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	d801      	bhi.n	8005210 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800520c:	2308      	movs	r3, #8
 800520e:	e00b      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005210:	edd7 7a00 	vldr	s15, [r7]
 8005214:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005268 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005220:	d801      	bhi.n	8005226 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005222:	2309      	movs	r3, #9
 8005224:	e000      	b.n	8005228 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005226:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005228:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	331c      	adds	r3, #28
 800522e:	7bfa      	ldrb	r2, [r7, #15]
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fa56 	bl	80056e4 <lsm6dsl_gy_data_rate_set>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e000      	b.n	8005246 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	42500000 	.word	0x42500000
 8005254:	42d00000 	.word	0x42d00000
 8005258:	43500000 	.word	0x43500000
 800525c:	43d00000 	.word	0x43d00000
 8005260:	44504000 	.word	0x44504000
 8005264:	44cf8000 	.word	0x44cf8000
 8005268:	45502000 	.word	0x45502000

0800526c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8005278:	edd7 7a00 	vldr	s15, [r7]
 800527c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005288:	d801      	bhi.n	800528e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800528a:	2301      	movs	r3, #1
 800528c:	e058      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800528e:	edd7 7a00 	vldr	s15, [r7]
 8005292:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	d801      	bhi.n	80052a4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e04d      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052a4:	edd7 7a00 	vldr	s15, [r7]
 80052a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005354 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80052ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b4:	d801      	bhi.n	80052ba <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80052b6:	2303      	movs	r3, #3
 80052b8:	e042      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052ba:	edd7 7a00 	vldr	s15, [r7]
 80052be:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005358 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80052c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ca:	d801      	bhi.n	80052d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80052cc:	2304      	movs	r3, #4
 80052ce:	e037      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052d0:	edd7 7a00 	vldr	s15, [r7]
 80052d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800535c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80052d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	d801      	bhi.n	80052e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80052e2:	2305      	movs	r3, #5
 80052e4:	e02c      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052e6:	edd7 7a00 	vldr	s15, [r7]
 80052ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005360 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80052ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	d801      	bhi.n	80052fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80052f8:	2306      	movs	r3, #6
 80052fa:	e021      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80052fc:	edd7 7a00 	vldr	s15, [r7]
 8005300:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005364 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530c:	d801      	bhi.n	8005312 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800530e:	2307      	movs	r3, #7
 8005310:	e016      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005312:	edd7 7a00 	vldr	s15, [r7]
 8005316:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005368 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800531a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005322:	d801      	bhi.n	8005328 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005324:	2308      	movs	r3, #8
 8005326:	e00b      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005328:	edd7 7a00 	vldr	s15, [r7]
 800532c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800536c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005338:	d801      	bhi.n	800533e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800533a:	2309      	movs	r3, #9
 800533c:	e000      	b.n	8005340 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800533e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	42500000 	.word	0x42500000
 8005358:	42d00000 	.word	0x42d00000
 800535c:	43500000 	.word	0x43500000
 8005360:	43d00000 	.word	0x43d00000
 8005364:	44504000 	.word	0x44504000
 8005368:	44cf8000 	.word	0x44cf8000
 800536c:	45502000 	.word	0x45502000

08005370 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005370:	b590      	push	{r4, r7, lr}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	461a      	mov	r2, r3
 800537c:	460b      	mov	r3, r1
 800537e:	72fb      	strb	r3, [r7, #11]
 8005380:	4613      	mov	r3, r2
 8005382:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	695c      	ldr	r4, [r3, #20]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	7b1b      	ldrb	r3, [r3, #12]
 8005390:	b298      	uxth	r0, r3
 8005392:	7afb      	ldrb	r3, [r7, #11]
 8005394:	b299      	uxth	r1, r3
 8005396:	893b      	ldrh	r3, [r7, #8]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	47a0      	blx	r4
 800539c:	4603      	mov	r3, r0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	371c      	adds	r7, #28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd90      	pop	{r4, r7, pc}

080053a6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053a6:	b590      	push	{r4, r7, lr}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	460b      	mov	r3, r1
 80053b4:	72fb      	strb	r3, [r7, #11]
 80053b6:	4613      	mov	r3, r2
 80053b8:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	691c      	ldr	r4, [r3, #16]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	7b1b      	ldrb	r3, [r3, #12]
 80053c6:	b298      	uxth	r0, r3
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	b299      	uxth	r1, r3
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	47a0      	blx	r4
 80053d2:	4603      	mov	r3, r0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd90      	pop	{r4, r7, pc}

080053dc <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	607a      	str	r2, [r7, #4]
 80053e6:	461a      	mov	r2, r3
 80053e8:	460b      	mov	r3, r1
 80053ea:	72fb      	strb	r3, [r7, #11]
 80053ec:	4613      	mov	r3, r2
 80053ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685c      	ldr	r4, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6898      	ldr	r0, [r3, #8]
 80053f8:	893b      	ldrh	r3, [r7, #8]
 80053fa:	7af9      	ldrb	r1, [r7, #11]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	47a0      	blx	r4
 8005400:	6178      	str	r0, [r7, #20]
  return ret;
 8005402:	697b      	ldr	r3, [r7, #20]
}
 8005404:	4618      	mov	r0, r3
 8005406:	371c      	adds	r7, #28
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}

0800540c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800540c:	b590      	push	{r4, r7, lr}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	461a      	mov	r2, r3
 8005418:	460b      	mov	r3, r1
 800541a:	72fb      	strb	r3, [r7, #11]
 800541c:	4613      	mov	r3, r2
 800541e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681c      	ldr	r4, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6898      	ldr	r0, [r3, #8]
 8005428:	893b      	ldrh	r3, [r7, #8]
 800542a:	7af9      	ldrb	r1, [r7, #11]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	47a0      	blx	r4
 8005430:	6178      	str	r0, [r7, #20]
  return ret;
 8005432:	697b      	ldr	r3, [r7, #20]
}
 8005434:	4618      	mov	r0, r3
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	bd90      	pop	{r4, r7, pc}

0800543c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005448:	f107 0208 	add.w	r2, r7, #8
 800544c:	2301      	movs	r3, #1
 800544e:	2110      	movs	r1, #16
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff ffc3 	bl	80053dc <lsm6dsl_read_reg>
 8005456:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	b2da      	uxtb	r2, r3
 8005466:	7a3b      	ldrb	r3, [r7, #8]
 8005468:	f362 0383 	bfi	r3, r2, #2, #2
 800546c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800546e:	f107 0208 	add.w	r2, r7, #8
 8005472:	2301      	movs	r3, #1
 8005474:	2110      	movs	r1, #16
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7ff ffc8 	bl	800540c <lsm6dsl_write_reg>
 800547c:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800547e:	68fb      	ldr	r3, [r7, #12]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005492:	f107 0208 	add.w	r2, r7, #8
 8005496:	2301      	movs	r3, #1
 8005498:	2110      	movs	r1, #16
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff9e 	bl	80053dc <lsm6dsl_read_reg>
 80054a0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80054a2:	7a3b      	ldrb	r3, [r7, #8]
 80054a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d81a      	bhi.n	80054e4 <lsm6dsl_xl_full_scale_get+0x5c>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <lsm6dsl_xl_full_scale_get+0x2c>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054cd 	.word	0x080054cd
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054dd 	.word	0x080054dd
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
      break;
 80054ca:	e00f      	b.n	80054ec <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
      break;
 80054d2:	e00b      	b.n	80054ec <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2202      	movs	r2, #2
 80054d8:	701a      	strb	r2, [r3, #0]
      break;
 80054da:	e007      	b.n	80054ec <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2203      	movs	r2, #3
 80054e0:	701a      	strb	r2, [r3, #0]
      break;
 80054e2:	e003      	b.n	80054ec <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	2204      	movs	r2, #4
 80054e8:	701a      	strb	r2, [r3, #0]
      break;
 80054ea:	bf00      	nop
  }

  return ret;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop

080054f8 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005504:	f107 0208 	add.w	r2, r7, #8
 8005508:	2301      	movs	r3, #1
 800550a:	2110      	movs	r1, #16
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff65 	bl	80053dc <lsm6dsl_read_reg>
 8005512:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10f      	bne.n	800553a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	7a3b      	ldrb	r3, [r7, #8]
 8005524:	f362 1307 	bfi	r3, r2, #4, #4
 8005528:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800552a:	f107 0208 	add.w	r2, r7, #8
 800552e:	2301      	movs	r3, #1
 8005530:	2110      	movs	r1, #16
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ff6a 	bl	800540c <lsm6dsl_write_reg>
 8005538:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800553a:	68fb      	ldr	r3, [r7, #12]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800554e:	f107 0208 	add.w	r2, r7, #8
 8005552:	2301      	movs	r3, #1
 8005554:	2110      	movs	r1, #16
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff ff40 	bl	80053dc <lsm6dsl_read_reg>
 800555c:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800555e:	7a3b      	ldrb	r3, [r7, #8]
 8005560:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b0b      	cmp	r3, #11
 8005568:	d84a      	bhi.n	8005600 <lsm6dsl_xl_data_rate_get+0xbc>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <lsm6dsl_xl_data_rate_get+0x2c>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	080055a1 	.word	0x080055a1
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055b1 	.word	0x080055b1
 800557c:	080055b9 	.word	0x080055b9
 8005580:	080055c1 	.word	0x080055c1
 8005584:	080055c9 	.word	0x080055c9
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055d9 	.word	0x080055d9
 8005590:	080055e1 	.word	0x080055e1
 8005594:	080055e9 	.word	0x080055e9
 8005598:	080055f1 	.word	0x080055f1
 800559c:	080055f9 	.word	0x080055f9
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
      break;
 80055a6:	e02f      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
      break;
 80055ae:	e02b      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
      break;
 80055b6:	e027      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2203      	movs	r2, #3
 80055bc:	701a      	strb	r2, [r3, #0]
      break;
 80055be:	e023      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2204      	movs	r2, #4
 80055c4:	701a      	strb	r2, [r3, #0]
      break;
 80055c6:	e01f      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2205      	movs	r2, #5
 80055cc:	701a      	strb	r2, [r3, #0]
      break;
 80055ce:	e01b      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2206      	movs	r2, #6
 80055d4:	701a      	strb	r2, [r3, #0]
      break;
 80055d6:	e017      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2207      	movs	r2, #7
 80055dc:	701a      	strb	r2, [r3, #0]
      break;
 80055de:	e013      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2208      	movs	r2, #8
 80055e4:	701a      	strb	r2, [r3, #0]
      break;
 80055e6:	e00f      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2209      	movs	r2, #9
 80055ec:	701a      	strb	r2, [r3, #0]
      break;
 80055ee:	e00b      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	220a      	movs	r2, #10
 80055f4:	701a      	strb	r2, [r3, #0]
      break;
 80055f6:	e007      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	220b      	movs	r2, #11
 80055fc:	701a      	strb	r2, [r3, #0]
      break;
 80055fe:	e003      	b.n	8005608 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	220c      	movs	r2, #12
 8005604:	701a      	strb	r2, [r3, #0]
      break;
 8005606:	bf00      	nop
  }

  return ret;
 8005608:	68fb      	ldr	r3, [r7, #12]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop

08005614 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005620:	f107 0208 	add.w	r2, r7, #8
 8005624:	2301      	movs	r3, #1
 8005626:	2111      	movs	r1, #17
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7ff fed7 	bl	80053dc <lsm6dsl_read_reg>
 800562e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	b2da      	uxtb	r2, r3
 800563e:	7a3b      	ldrb	r3, [r7, #8]
 8005640:	f362 0343 	bfi	r3, r2, #1, #3
 8005644:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005646:	f107 0208 	add.w	r2, r7, #8
 800564a:	2301      	movs	r3, #1
 800564c:	2111      	movs	r1, #17
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fedc 	bl	800540c <lsm6dsl_write_reg>
 8005654:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800566a:	f107 0208 	add.w	r2, r7, #8
 800566e:	2301      	movs	r3, #1
 8005670:	2111      	movs	r1, #17
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff feb2 	bl	80053dc <lsm6dsl_read_reg>
 8005678:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 800567a:	7a3b      	ldrb	r3, [r7, #8]
 800567c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b06      	cmp	r3, #6
 8005684:	d824      	bhi.n	80056d0 <lsm6dsl_gy_full_scale_get+0x70>
 8005686:	a201      	add	r2, pc, #4	; (adr r2, 800568c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	080056a9 	.word	0x080056a9
 8005690:	080056b1 	.word	0x080056b1
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056d1 	.word	0x080056d1
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056d1 	.word	0x080056d1
 80056a4:	080056c9 	.word	0x080056c9
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
      break;
 80056ae:	e013      	b.n	80056d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
      break;
 80056b6:	e00f      	b.n	80056d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2202      	movs	r2, #2
 80056bc:	701a      	strb	r2, [r3, #0]
      break;
 80056be:	e00b      	b.n	80056d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2204      	movs	r2, #4
 80056c4:	701a      	strb	r2, [r3, #0]
      break;
 80056c6:	e007      	b.n	80056d8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2206      	movs	r2, #6
 80056cc:	701a      	strb	r2, [r3, #0]
      break;
 80056ce:	e003      	b.n	80056d8 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2207      	movs	r2, #7
 80056d4:	701a      	strb	r2, [r3, #0]
      break;
 80056d6:	bf00      	nop
  }

  return ret;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop

080056e4 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	460b      	mov	r3, r1
 80056ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056f0:	f107 0208 	add.w	r2, r7, #8
 80056f4:	2301      	movs	r3, #1
 80056f6:	2111      	movs	r1, #17
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fe6f 	bl	80053dc <lsm6dsl_read_reg>
 80056fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10f      	bne.n	8005726 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	b2da      	uxtb	r2, r3
 800570e:	7a3b      	ldrb	r3, [r7, #8]
 8005710:	f362 1307 	bfi	r3, r2, #4, #4
 8005714:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005716:	f107 0208 	add.w	r2, r7, #8
 800571a:	2301      	movs	r3, #1
 800571c:	2111      	movs	r1, #17
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fe74 	bl	800540c <lsm6dsl_write_reg>
 8005724:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005726:	68fb      	ldr	r3, [r7, #12]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800573a:	f107 0208 	add.w	r2, r7, #8
 800573e:	2301      	movs	r3, #1
 8005740:	2111      	movs	r1, #17
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fe4a 	bl	80053dc <lsm6dsl_read_reg>
 8005748:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 800574a:	7a3b      	ldrb	r3, [r7, #8]
 800574c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b0a      	cmp	r3, #10
 8005754:	d844      	bhi.n	80057e0 <lsm6dsl_gy_data_rate_get+0xb0>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <lsm6dsl_gy_data_rate_get+0x2c>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005789 	.word	0x08005789
 8005760:	08005791 	.word	0x08005791
 8005764:	08005799 	.word	0x08005799
 8005768:	080057a1 	.word	0x080057a1
 800576c:	080057a9 	.word	0x080057a9
 8005770:	080057b1 	.word	0x080057b1
 8005774:	080057b9 	.word	0x080057b9
 8005778:	080057c1 	.word	0x080057c1
 800577c:	080057c9 	.word	0x080057c9
 8005780:	080057d1 	.word	0x080057d1
 8005784:	080057d9 	.word	0x080057d9
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
      break;
 800578e:	e02b      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
      break;
 8005796:	e027      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2202      	movs	r2, #2
 800579c:	701a      	strb	r2, [r3, #0]
      break;
 800579e:	e023      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2203      	movs	r2, #3
 80057a4:	701a      	strb	r2, [r3, #0]
      break;
 80057a6:	e01f      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2204      	movs	r2, #4
 80057ac:	701a      	strb	r2, [r3, #0]
      break;
 80057ae:	e01b      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2205      	movs	r2, #5
 80057b4:	701a      	strb	r2, [r3, #0]
      break;
 80057b6:	e017      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2206      	movs	r2, #6
 80057bc:	701a      	strb	r2, [r3, #0]
      break;
 80057be:	e013      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2207      	movs	r2, #7
 80057c4:	701a      	strb	r2, [r3, #0]
      break;
 80057c6:	e00f      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	701a      	strb	r2, [r3, #0]
      break;
 80057ce:	e00b      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2209      	movs	r2, #9
 80057d4:	701a      	strb	r2, [r3, #0]
      break;
 80057d6:	e007      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	220a      	movs	r2, #10
 80057dc:	701a      	strb	r2, [r3, #0]
      break;
 80057de:	e003      	b.n	80057e8 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	220b      	movs	r2, #11
 80057e4:	701a      	strb	r2, [r3, #0]
      break;
 80057e6:	bf00      	nop
  }

  return ret;
 80057e8:	68fb      	ldr	r3, [r7, #12]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop

080057f4 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005800:	f107 0208 	add.w	r2, r7, #8
 8005804:	2301      	movs	r3, #1
 8005806:	2112      	movs	r1, #18
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff fde7 	bl	80053dc <lsm6dsl_read_reg>
 800580e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10f      	bne.n	8005836 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	b2da      	uxtb	r2, r3
 800581e:	7a3b      	ldrb	r3, [r7, #8]
 8005820:	f362 1386 	bfi	r3, r2, #6, #1
 8005824:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005826:	f107 0208 	add.w	r2, r7, #8
 800582a:	2301      	movs	r3, #1
 800582c:	2112      	movs	r1, #18
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fdec 	bl	800540c <lsm6dsl_write_reg>
 8005834:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800584a:	f107 020c 	add.w	r2, r7, #12
 800584e:	2306      	movs	r3, #6
 8005850:	2122      	movs	r1, #34	; 0x22
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fdc2 	bl	80053dc <lsm6dsl_read_reg>
 8005858:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800585a:	7b7b      	ldrb	r3, [r7, #13]
 800585c:	b21a      	sxth	r2, r3
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005868:	b29b      	uxth	r3, r3
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	b29a      	uxth	r2, r3
 800586e:	7b3b      	ldrb	r3, [r7, #12]
 8005870:	b29b      	uxth	r3, r3
 8005872:	4413      	add	r3, r2
 8005874:	b29b      	uxth	r3, r3
 8005876:	b21a      	sxth	r2, r3
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800587c:	7bfa      	ldrb	r2, [r7, #15]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	3302      	adds	r3, #2
 8005882:	b212      	sxth	r2, r2
 8005884:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	3302      	adds	r3, #2
 800588a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800588e:	b29b      	uxth	r3, r3
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	b29a      	uxth	r2, r3
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	b29b      	uxth	r3, r3
 8005898:	4413      	add	r3, r2
 800589a:	b29a      	uxth	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	3302      	adds	r3, #2
 80058a0:	b212      	sxth	r2, r2
 80058a2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80058a4:	7c7a      	ldrb	r2, [r7, #17]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	3304      	adds	r3, #4
 80058aa:	b212      	sxth	r2, r2
 80058ac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	3304      	adds	r3, #4
 80058b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	7c3b      	ldrb	r3, [r7, #16]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	4413      	add	r3, r2
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	b212      	sxth	r2, r2
 80058ca:	801a      	strh	r2, [r3, #0]
  return ret;
 80058cc:	697b      	ldr	r3, [r7, #20]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80058e0:	f107 020c 	add.w	r2, r7, #12
 80058e4:	2306      	movs	r3, #6
 80058e6:	2128      	movs	r1, #40	; 0x28
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fd77 	bl	80053dc <lsm6dsl_read_reg>
 80058ee:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80058f0:	7b7b      	ldrb	r3, [r7, #13]
 80058f2:	b21a      	sxth	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	b29a      	uxth	r2, r3
 8005904:	7b3b      	ldrb	r3, [r7, #12]
 8005906:	b29b      	uxth	r3, r3
 8005908:	4413      	add	r3, r2
 800590a:	b29b      	uxth	r3, r3
 800590c:	b21a      	sxth	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005912:	7bfa      	ldrb	r2, [r7, #15]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	3302      	adds	r3, #2
 8005918:	b212      	sxth	r2, r2
 800591a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	3302      	adds	r3, #2
 8005920:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005924:	b29b      	uxth	r3, r3
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	b29a      	uxth	r2, r3
 800592a:	7bbb      	ldrb	r3, [r7, #14]
 800592c:	b29b      	uxth	r3, r3
 800592e:	4413      	add	r3, r2
 8005930:	b29a      	uxth	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	3302      	adds	r3, #2
 8005936:	b212      	sxth	r2, r2
 8005938:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800593a:	7c7a      	ldrb	r2, [r7, #17]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	b212      	sxth	r2, r2
 8005942:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	3304      	adds	r3, #4
 8005948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800594c:	b29b      	uxth	r3, r3
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	b29a      	uxth	r2, r3
 8005952:	7c3b      	ldrb	r3, [r7, #16]
 8005954:	b29b      	uxth	r3, r3
 8005956:	4413      	add	r3, r2
 8005958:	b29a      	uxth	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	3304      	adds	r3, #4
 800595e:	b212      	sxth	r2, r2
 8005960:	801a      	strh	r2, [r3, #0]
  return ret;
 8005962:	697b      	ldr	r3, [r7, #20]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005976:	2301      	movs	r3, #1
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	210f      	movs	r1, #15
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff fd2d 	bl	80053dc <lsm6dsl_read_reg>
 8005982:	60f8      	str	r0, [r7, #12]
  return ret;
 8005984:	68fb      	ldr	r3, [r7, #12]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800599a:	f107 0208 	add.w	r2, r7, #8
 800599e:	2301      	movs	r3, #1
 80059a0:	2112      	movs	r1, #18
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fd1a 	bl	80053dc <lsm6dsl_read_reg>
 80059a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10f      	bne.n	80059d0 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	7a3b      	ldrb	r3, [r7, #8]
 80059ba:	f362 0382 	bfi	r3, r2, #2, #1
 80059be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80059c0:	f107 0208 	add.w	r2, r7, #8
 80059c4:	2301      	movs	r3, #1
 80059c6:	2112      	movs	r1, #18
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fd1f 	bl	800540c <lsm6dsl_write_reg>
 80059ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80059e6:	f107 0208 	add.w	r2, r7, #8
 80059ea:	2301      	movs	r3, #1
 80059ec:	210a      	movs	r1, #10
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fcf4 	bl	80053dc <lsm6dsl_read_reg>
 80059f4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10f      	bne.n	8005a1c <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	7a3b      	ldrb	r3, [r7, #8]
 8005a06:	f362 0302 	bfi	r3, r2, #0, #3
 8005a0a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005a0c:	f107 0208 	add.w	r2, r7, #8
 8005a10:	2301      	movs	r3, #1
 8005a12:	210a      	movs	r1, #10
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fcf9 	bl	800540c <lsm6dsl_write_reg>
 8005a1a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08e      	sub	sp, #56	; 0x38
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005a36:	2301      	movs	r3, #1
 8005a38:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d06e      	beq.n	8005b22 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	f200 809d 	bhi.w	8005b86 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <IKS01A2_MOTION_SENSOR_Init+0x32>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d032      	beq.n	8005abe <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005a58:	e095      	b.n	8005b86 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005a5a:	6838      	ldr	r0, [r7, #0]
 8005a5c:	f000 fa32 	bl	8005ec4 <LSM6DSL_0_Probe>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005a66:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6a:	e0cc      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005a6c:	4a68      	ldr	r2, [pc, #416]	; (8005c10 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	4967      	ldr	r1, [pc, #412]	; (8005c14 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a7e:	f107 010c 	add.w	r1, r7, #12
 8005a82:	4610      	mov	r0, r2
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005a8c:	f06f 0306 	mvn.w	r3, #6
 8005a90:	e0b9      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005a92:	7b3b      	ldrb	r3, [r7, #12]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d103      	bne.n	8005aa0 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	f043 0302 	orr.w	r3, r3, #2
 8005a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005aa0:	7b7b      	ldrb	r3, [r7, #13]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d103      	bne.n	8005aae <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	f043 0301 	orr.w	r3, r3, #1
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d16c      	bne.n	8005b8e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	f043 0304 	orr.w	r3, r3, #4
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005abc:	e067      	b.n	8005b8e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005abe:	6838      	ldr	r0, [r7, #0]
 8005ac0:	f000 fabc 	bl	800603c <LSM303AGR_ACC_0_Probe>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ace:	e09a      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005ad0:	4a4f      	ldr	r2, [pc, #316]	; (8005c10 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	494e      	ldr	r1, [pc, #312]	; (8005c14 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005ae2:	f107 010c 	add.w	r1, r7, #12
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4798      	blx	r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005af0:	f06f 0306 	mvn.w	r3, #6
 8005af4:	e087      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005af6:	7b3b      	ldrb	r3, [r7, #12]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d103      	bne.n	8005b04 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	f043 0302 	orr.w	r3, r3, #2
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b04:	7b7b      	ldrb	r3, [r7, #13]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d103      	bne.n	8005b12 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	f043 0301 	orr.w	r3, r3, #1
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d13c      	bne.n	8005b92 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	f043 0304 	orr.w	r3, r3, #4
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b20:	e037      	b.n	8005b92 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 8005b22:	6838      	ldr	r0, [r7, #0]
 8005b24:	f000 fb2e 	bl	8006184 <LSM303AGR_MAG_0_Probe>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b32:	e068      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005b34:	4a36      	ldr	r2, [pc, #216]	; (8005c10 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	4935      	ldr	r1, [pc, #212]	; (8005c14 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b46:	f107 010c 	add.w	r1, r7, #12
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4798      	blx	r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005b54:	f06f 0306 	mvn.w	r3, #6
 8005b58:	e055      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005b5a:	7b3b      	ldrb	r3, [r7, #12]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d103      	bne.n	8005b68 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005b68:	7b7b      	ldrb	r3, [r7, #13]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d103      	bne.n	8005b76 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10c      	bne.n	8005b96 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	f043 0304 	orr.w	r3, r3, #4
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005b84:	e007      	b.n	8005b96 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005b86:	f06f 0301 	mvn.w	r3, #1
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005b8c:	e004      	b.n	8005b98 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e002      	b.n	8005b98 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005b92:	bf00      	nop
 8005b94:	e000      	b.n	8005b98 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 8005b96:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba0:	e031      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba6:	e02a      	b.n	8005bfe <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	4013      	ands	r3, r2
 8005bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d11e      	bne.n	8005bf2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	4013      	ands	r3, r2
 8005bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d118      	bne.n	8005bf2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bc8:	4814      	ldr	r0, [pc, #80]	; (8005c1c <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	490e      	ldr	r1, [pc, #56]	; (8005c14 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005be2:	4610      	mov	r0, r2
 8005be4:	4798      	blx	r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005bec:	f06f 0304 	mvn.w	r3, #4
 8005bf0:	e009      	b.n	8005c06 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d9d1      	bls.n	8005ba8 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3738      	adds	r7, #56	; 0x38
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20001110 	.word	0x20001110
 8005c14:	200014f4 	.word	0x200014f4
 8005c18:	200000d0 	.word	0x200000d0
 8005c1c:	200010ec 	.word	0x200010ec

08005c20 <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d903      	bls.n	8005c38 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005c30:	f06f 0301 	mvn.w	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]
 8005c36:	e028      	b.n	8005c8a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	4013      	ands	r3, r2
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d11c      	bne.n	8005c84 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c4a:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c52:	4812      	ldr	r0, [pc, #72]	; (8005c9c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	4413      	add	r3, r2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	490e      	ldr	r1, [pc, #56]	; (8005ca0 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4798      	blx	r3
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c76:	f06f 0304 	mvn.w	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	e005      	b.n	8005c8a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e002      	b.n	8005c8a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005c84:	f06f 0301 	mvn.w	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	2000111c 	.word	0x2000111c
 8005c98:	200000d0 	.word	0x200000d0
 8005c9c:	200010ec 	.word	0x200010ec
 8005ca0:	200014f4 	.word	0x200014f4

08005ca4 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d903      	bls.n	8005cbc <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cb4:	f06f 0301 	mvn.w	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e028      	b.n	8005d0e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005cbc:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d11c      	bne.n	8005d08 <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005cce:	4a13      	ldr	r2, [pc, #76]	; (8005d1c <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005cd6:	4812      	ldr	r0, [pc, #72]	; (8005d20 <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	4413      	add	r3, r2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	490e      	ldr	r1, [pc, #56]	; (8005d24 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cfa:	f06f 0304 	mvn.w	r3, #4
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	e005      	b.n	8005d0e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e002      	b.n	8005d0e <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d08:	f06f 0301 	mvn.w	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	2000111c 	.word	0x2000111c
 8005d1c:	200000d0 	.word	0x200000d0
 8005d20:	200010ec 	.word	0x200010ec
 8005d24:	200014f4 	.word	0x200014f4

08005d28 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d903      	bls.n	8005d42 <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d3a:	f06f 0301 	mvn.w	r3, #1
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	e029      	b.n	8005d96 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d11d      	bne.n	8005d90 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d5c:	4812      	ldr	r0, [pc, #72]	; (8005da8 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	440b      	add	r3, r1
 8005d68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	490f      	ldr	r1, [pc, #60]	; (8005dac <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d82:	f06f 0304 	mvn.w	r3, #4
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	e005      	b.n	8005d96 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
 8005d8e:	e002      	b.n	8005d96 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d90:	f06f 0301 	mvn.w	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d96:	697b      	ldr	r3, [r7, #20]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	2000111c 	.word	0x2000111c
 8005da4:	200000d0 	.word	0x200000d0
 8005da8:	200010ec 	.word	0x200010ec
 8005dac:	200014f4 	.word	0x200014f4

08005db0 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d903      	bls.n	8005dcc <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dc4:	f06f 0301 	mvn.w	r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e02a      	b.n	8005e22 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005dcc:	4a17      	ldr	r2, [pc, #92]	; (8005e2c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d11e      	bne.n	8005e1c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005dde:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005de6:	4813      	ldr	r0, [pc, #76]	; (8005e34 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	440b      	add	r3, r1
 8005df2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	490f      	ldr	r1, [pc, #60]	; (8005e38 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e00:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e0e:	f06f 0304 	mvn.w	r3, #4
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e005      	b.n	8005e22 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e002      	b.n	8005e22 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005e1c:	f06f 0301 	mvn.w	r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005e22:	697b      	ldr	r3, [r7, #20]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	2000111c 	.word	0x2000111c
 8005e30:	200000d0 	.word	0x200000d0
 8005e34:	200010ec 	.word	0x200010ec
 8005e38:	200014f4 	.word	0x200014f4

08005e3c <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d903      	bls.n	8005e56 <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e4e:	f06f 0301 	mvn.w	r3, #1
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e029      	b.n	8005eaa <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005e56:	4a17      	ldr	r2, [pc, #92]	; (8005eb4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d11d      	bne.n	8005ea4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005e68:	4a13      	ldr	r2, [pc, #76]	; (8005eb8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e70:	4812      	ldr	r0, [pc, #72]	; (8005ebc <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	490f      	ldr	r1, [pc, #60]	; (8005ec0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e96:	f06f 0304 	mvn.w	r3, #4
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	e005      	b.n	8005eaa <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e002      	b.n	8005eaa <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005ea4:	f06f 0301 	mvn.w	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005eaa:	697b      	ldr	r3, [r7, #20]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	2000111c 	.word	0x2000111c
 8005eb8:	200000d0 	.word	0x200000d0
 8005ebc:	200010ec 	.word	0x200010ec
 8005ec0:	200014f4 	.word	0x200014f4

08005ec4 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b092      	sub	sp, #72	; 0x48
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005ed4:	23d7      	movs	r3, #215	; 0xd7
 8005ed6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005eda:	4b4a      	ldr	r3, [pc, #296]	; (8006004 <LSM6DSL_0_Probe+0x140>)
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005ede:	4b4a      	ldr	r3, [pc, #296]	; (8006008 <LSM6DSL_0_Probe+0x144>)
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	; (800600c <LSM6DSL_0_Probe+0x148>)
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <LSM6DSL_0_Probe+0x14c>)
 8005ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005eea:	4b4a      	ldr	r3, [pc, #296]	; (8006014 <LSM6DSL_0_Probe+0x150>)
 8005eec:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005eee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4848      	ldr	r0, [pc, #288]	; (8006018 <LSM6DSL_0_Probe+0x154>)
 8005ef6:	f7fe fa81 	bl	80043fc <LSM6DSL_RegisterBusIO>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f00:	f06f 0306 	mvn.w	r3, #6
 8005f04:	647b      	str	r3, [r7, #68]	; 0x44
 8005f06:	e077      	b.n	8005ff8 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005f08:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4842      	ldr	r0, [pc, #264]	; (8006018 <LSM6DSL_0_Probe+0x154>)
 8005f10:	f7fe fb6a 	bl	80045e8 <LSM6DSL_ReadID>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f1a:	f06f 0306 	mvn.w	r3, #6
 8005f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f20:	e06a      	b.n	8005ff8 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f26:	2b6a      	cmp	r3, #106	; 0x6a
 8005f28:	d003      	beq.n	8005f32 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005f2a:	f06f 0306 	mvn.w	r3, #6
 8005f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f30:	e062      	b.n	8005ff8 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005f32:	f107 0308 	add.w	r3, r7, #8
 8005f36:	4619      	mov	r1, r3
 8005f38:	4837      	ldr	r0, [pc, #220]	; (8006018 <LSM6DSL_0_Probe+0x154>)
 8005f3a:	f7fe fb6b 	bl	8004614 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005f3e:	7a7b      	ldrb	r3, [r7, #9]
 8005f40:	461a      	mov	r2, r3
 8005f42:	7a3b      	ldrb	r3, [r7, #8]
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	431a      	orrs	r2, r3
 8005f48:	7abb      	ldrb	r3, [r7, #10]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	4a33      	ldr	r2, [pc, #204]	; (800601c <LSM6DSL_0_Probe+0x158>)
 8005f50:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005f52:	4b33      	ldr	r3, [pc, #204]	; (8006020 <LSM6DSL_0_Probe+0x15c>)
 8005f54:	4a30      	ldr	r2, [pc, #192]	; (8006018 <LSM6DSL_0_Probe+0x154>)
 8005f56:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <LSM6DSL_0_Probe+0x160>)
 8005f5a:	4a33      	ldr	r2, [pc, #204]	; (8006028 <LSM6DSL_0_Probe+0x164>)
 8005f5c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11d      	bne.n	8005fa0 <LSM6DSL_0_Probe+0xdc>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <LSM6DSL_0_Probe+0xdc>
 8005f6e:	7a7b      	ldrb	r3, [r7, #9]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d115      	bne.n	8005fa0 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005f74:	4b2d      	ldr	r3, [pc, #180]	; (800602c <LSM6DSL_0_Probe+0x168>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	4a2d      	ldr	r2, [pc, #180]	; (8006030 <LSM6DSL_0_Probe+0x16c>)
 8005f7a:	492e      	ldr	r1, [pc, #184]	; (8006034 <LSM6DSL_0_Probe+0x170>)
 8005f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005f80:	4b28      	ldr	r3, [pc, #160]	; (8006024 <LSM6DSL_0_Probe+0x160>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a26      	ldr	r2, [pc, #152]	; (8006020 <LSM6DSL_0_Probe+0x15c>)
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	4798      	blx	r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f94:	f06f 0304 	mvn.w	r3, #4
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9a:	e001      	b.n	8005fa0 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d11d      	bne.n	8005fe2 <LSM6DSL_0_Probe+0x11e>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d018      	beq.n	8005fe2 <LSM6DSL_0_Probe+0x11e>
 8005fb0:	7a3b      	ldrb	r3, [r7, #8]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d115      	bne.n	8005fe2 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	; (800602c <LSM6DSL_0_Probe+0x168>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <LSM6DSL_0_Probe+0x16c>)
 8005fbc:	491e      	ldr	r1, [pc, #120]	; (8006038 <LSM6DSL_0_Probe+0x174>)
 8005fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <LSM6DSL_0_Probe+0x160>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <LSM6DSL_0_Probe+0x15c>)
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fd6:	f06f 0304 	mvn.w	r3, #4
 8005fda:	647b      	str	r3, [r7, #68]	; 0x44
 8005fdc:	e001      	b.n	8005fe2 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <LSM6DSL_0_Probe+0x134>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f003 0304 	and.w	r3, r3, #4
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ff2:	f06f 0304 	mvn.w	r3, #4
 8005ff6:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3748      	adds	r7, #72	; 0x48
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	08002661 	.word	0x08002661
 8006008:	080026dd 	.word	0x080026dd
 800600c:	08002791 	.word	0x08002791
 8006010:	0800272d 	.word	0x0800272d
 8006014:	080027f5 	.word	0x080027f5
 8006018:	20001128 	.word	0x20001128
 800601c:	2000111c 	.word	0x2000111c
 8006020:	200014f4 	.word	0x200014f4
 8006024:	20001110 	.word	0x20001110
 8006028:	20000078 	.word	0x20000078
 800602c:	200000d0 	.word	0x200000d0
 8006030:	200010ec 	.word	0x200010ec
 8006034:	200000ac 	.word	0x200000ac
 8006038:	20000088 	.word	0x20000088

0800603c <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b092      	sub	sp, #72	; 0x48
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8006044:	2300      	movs	r3, #0
 8006046:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006048:	2300      	movs	r3, #0
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800604c:	2333      	movs	r3, #51	; 0x33
 800604e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <LSM303AGR_ACC_0_Probe+0x114>)
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8006056:	4b3f      	ldr	r3, [pc, #252]	; (8006154 <LSM303AGR_ACC_0_Probe+0x118>)
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800605a:	4b3f      	ldr	r3, [pc, #252]	; (8006158 <LSM303AGR_ACC_0_Probe+0x11c>)
 800605c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800605e:	4b3f      	ldr	r3, [pc, #252]	; (800615c <LSM303AGR_ACC_0_Probe+0x120>)
 8006060:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8006062:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <LSM303AGR_ACC_0_Probe+0x124>)
 8006064:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8006066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800606a:	4619      	mov	r1, r3
 800606c:	483d      	ldr	r0, [pc, #244]	; (8006164 <LSM303AGR_ACC_0_Probe+0x128>)
 800606e:	f7fc fe0f 	bl	8002c90 <LSM303AGR_ACC_RegisterBusIO>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006078:	f06f 0306 	mvn.w	r3, #6
 800607c:	647b      	str	r3, [r7, #68]	; 0x44
 800607e:	e062      	b.n	8006146 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8006080:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8006084:	4619      	mov	r1, r3
 8006086:	4837      	ldr	r0, [pc, #220]	; (8006164 <LSM303AGR_ACC_0_Probe+0x128>)
 8006088:	f7fc fec3 	bl	8002e12 <LSM303AGR_ACC_ReadID>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006092:	f06f 0306 	mvn.w	r3, #6
 8006096:	647b      	str	r3, [r7, #68]	; 0x44
 8006098:	e055      	b.n	8006146 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800609a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800609e:	2b33      	cmp	r3, #51	; 0x33
 80060a0:	d003      	beq.n	80060aa <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80060a2:	f06f 0306 	mvn.w	r3, #6
 80060a6:	647b      	str	r3, [r7, #68]	; 0x44
 80060a8:	e04d      	b.n	8006146 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 80060aa:	f107 0308 	add.w	r3, r7, #8
 80060ae:	4619      	mov	r1, r3
 80060b0:	482c      	ldr	r0, [pc, #176]	; (8006164 <LSM303AGR_ACC_0_Probe+0x128>)
 80060b2:	f7fc fec5 	bl	8002e40 <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060b6:	7a7b      	ldrb	r3, [r7, #9]
 80060b8:	461a      	mov	r2, r3
 80060ba:	7a3b      	ldrb	r3, [r7, #8]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 80060c0:	7abb      	ldrb	r3, [r7, #10]
 80060c2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80060c4:	4313      	orrs	r3, r2
 80060c6:	4a28      	ldr	r2, [pc, #160]	; (8006168 <LSM303AGR_ACC_0_Probe+0x12c>)
 80060c8:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80060ca:	4b28      	ldr	r3, [pc, #160]	; (800616c <LSM303AGR_ACC_0_Probe+0x130>)
 80060cc:	4a25      	ldr	r2, [pc, #148]	; (8006164 <LSM303AGR_ACC_0_Probe+0x128>)
 80060ce:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80060d0:	4b27      	ldr	r3, [pc, #156]	; (8006170 <LSM303AGR_ACC_0_Probe+0x134>)
 80060d2:	4a28      	ldr	r2, [pc, #160]	; (8006174 <LSM303AGR_ACC_0_Probe+0x138>)
 80060d4:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d11e      	bne.n	800611a <LSM303AGR_ACC_0_Probe+0xde>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d019      	beq.n	800611a <LSM303AGR_ACC_0_Probe+0xde>
 80060e6:	7a3b      	ldrb	r3, [r7, #8]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d116      	bne.n	800611a <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80060ec:	4b22      	ldr	r3, [pc, #136]	; (8006178 <LSM303AGR_ACC_0_Probe+0x13c>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <LSM303AGR_ACC_0_Probe+0x140>)
 80060f2:	3303      	adds	r3, #3
 80060f4:	4922      	ldr	r1, [pc, #136]	; (8006180 <LSM303AGR_ACC_0_Probe+0x144>)
 80060f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80060fa:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <LSM303AGR_ACC_0_Probe+0x134>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1a      	ldr	r2, [pc, #104]	; (800616c <LSM303AGR_ACC_0_Probe+0x130>)
 8006102:	6852      	ldr	r2, [r2, #4]
 8006104:	4610      	mov	r0, r2
 8006106:	4798      	blx	r3
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800610e:	f06f 0304 	mvn.w	r3, #4
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
 8006114:	e001      	b.n	800611a <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006116:	2300      	movs	r3, #0
 8006118:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800611a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611c:	2b00      	cmp	r3, #0
 800611e:	d107      	bne.n	8006130 <LSM303AGR_ACC_0_Probe+0xf4>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800612a:	f06f 0304 	mvn.w	r3, #4
 800612e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8006130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <LSM303AGR_ACC_0_Probe+0x10a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006140:	f06f 0304 	mvn.w	r3, #4
 8006144:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8006146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006148:	4618      	mov	r0, r3
 800614a:	3748      	adds	r7, #72	; 0x48
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	08002661 	.word	0x08002661
 8006154:	080026dd 	.word	0x080026dd
 8006158:	08002791 	.word	0x08002791
 800615c:	0800272d 	.word	0x0800272d
 8006160:	080027f5 	.word	0x080027f5
 8006164:	20001158 	.word	0x20001158
 8006168:	2000111c 	.word	0x2000111c
 800616c:	200014f4 	.word	0x200014f4
 8006170:	20001110 	.word	0x20001110
 8006174:	20000010 	.word	0x20000010
 8006178:	200000d0 	.word	0x200000d0
 800617c:	200010ec 	.word	0x200010ec
 8006180:	20000020 	.word	0x20000020

08006184 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b092      	sub	sp, #72	; 0x48
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800618c:	2300      	movs	r3, #0
 800618e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8006190:	2300      	movs	r3, #0
 8006192:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8006194:	233d      	movs	r3, #61	; 0x3d
 8006196:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800619a:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <LSM303AGR_MAG_0_Probe+0x114>)
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800619e:	4b3f      	ldr	r3, [pc, #252]	; (800629c <LSM303AGR_MAG_0_Probe+0x118>)
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80061a2:	4b3f      	ldr	r3, [pc, #252]	; (80062a0 <LSM303AGR_MAG_0_Probe+0x11c>)
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80061a6:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <LSM303AGR_MAG_0_Probe+0x120>)
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80061aa:	4b3f      	ldr	r3, [pc, #252]	; (80062a8 <LSM303AGR_MAG_0_Probe+0x124>)
 80061ac:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 80061ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061b2:	4619      	mov	r1, r3
 80061b4:	483d      	ldr	r0, [pc, #244]	; (80062ac <LSM303AGR_MAG_0_Probe+0x128>)
 80061b6:	f7fd f931 	bl	800341c <LSM303AGR_MAG_RegisterBusIO>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061c0:	f06f 0306 	mvn.w	r3, #6
 80061c4:	647b      	str	r3, [r7, #68]	; 0x44
 80061c6:	e062      	b.n	800628e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 80061c8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80061cc:	4619      	mov	r1, r3
 80061ce:	4837      	ldr	r0, [pc, #220]	; (80062ac <LSM303AGR_MAG_0_Probe+0x128>)
 80061d0:	f7fd f9db 	bl	800358a <LSM303AGR_MAG_ReadID>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061da:	f06f 0306 	mvn.w	r3, #6
 80061de:	647b      	str	r3, [r7, #68]	; 0x44
 80061e0:	e055      	b.n	800628e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 80061e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d003      	beq.n	80061f2 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80061ea:	f06f 0306 	mvn.w	r3, #6
 80061ee:	647b      	str	r3, [r7, #68]	; 0x44
 80061f0:	e04d      	b.n	800628e <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	4619      	mov	r1, r3
 80061f8:	482c      	ldr	r0, [pc, #176]	; (80062ac <LSM303AGR_MAG_0_Probe+0x128>)
 80061fa:	f7fd f9dd 	bl	80035b8 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 80061fe:	7a7b      	ldrb	r3, [r7, #9]
 8006200:	461a      	mov	r2, r3
 8006202:	7a3b      	ldrb	r3, [r7, #8]
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8006208:	7abb      	ldrb	r3, [r7, #10]
 800620a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800620c:	4313      	orrs	r3, r2
 800620e:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <LSM303AGR_MAG_0_Probe+0x12c>)
 8006210:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8006212:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <LSM303AGR_MAG_0_Probe+0x130>)
 8006214:	4a25      	ldr	r2, [pc, #148]	; (80062ac <LSM303AGR_MAG_0_Probe+0x128>)
 8006216:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8006218:	4b27      	ldr	r3, [pc, #156]	; (80062b8 <LSM303AGR_MAG_0_Probe+0x134>)
 800621a:	4a28      	ldr	r2, [pc, #160]	; (80062bc <LSM303AGR_MAG_0_Probe+0x138>)
 800621c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11e      	bne.n	8006262 <LSM303AGR_MAG_0_Probe+0xde>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d019      	beq.n	8006262 <LSM303AGR_MAG_0_Probe+0xde>
 800622e:	7abb      	ldrb	r3, [r7, #10]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d116      	bne.n	8006262 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8006234:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <LSM303AGR_MAG_0_Probe+0x13c>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <LSM303AGR_MAG_0_Probe+0x140>)
 800623a:	3306      	adds	r3, #6
 800623c:	4922      	ldr	r1, [pc, #136]	; (80062c8 <LSM303AGR_MAG_0_Probe+0x144>)
 800623e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8006242:	4b1d      	ldr	r3, [pc, #116]	; (80062b8 <LSM303AGR_MAG_0_Probe+0x134>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <LSM303AGR_MAG_0_Probe+0x130>)
 800624a:	6892      	ldr	r2, [r2, #8]
 800624c:	4610      	mov	r0, r2
 800624e:	4798      	blx	r3
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006256:	f06f 0304 	mvn.w	r3, #4
 800625a:	647b      	str	r3, [r7, #68]	; 0x44
 800625c:	e001      	b.n	8006262 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800625e:	2300      	movs	r3, #0
 8006260:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8006262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <LSM303AGR_MAG_0_Probe+0xf4>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006272:	f06f 0304 	mvn.w	r3, #4
 8006276:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8006278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800627a:	2b00      	cmp	r3, #0
 800627c:	d107      	bne.n	800628e <LSM303AGR_MAG_0_Probe+0x10a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006288:	f06f 0304 	mvn.w	r3, #4
 800628c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 800628e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006290:	4618      	mov	r0, r3
 8006292:	3748      	adds	r7, #72	; 0x48
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	08002661 	.word	0x08002661
 800629c:	080026dd 	.word	0x080026dd
 80062a0:	08002791 	.word	0x08002791
 80062a4:	0800272d 	.word	0x0800272d
 80062a8:	080027f5 	.word	0x080027f5
 80062ac:	20001184 	.word	0x20001184
 80062b0:	2000111c 	.word	0x2000111c
 80062b4:	200014f4 	.word	0x200014f4
 80062b8:	20001110 	.word	0x20001110
 80062bc:	20000044 	.word	0x20000044
 80062c0:	200000d0 	.word	0x200000d0
 80062c4:	200010ec 	.word	0x200010ec
 80062c8:	20000054 	.word	0x20000054

080062cc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	4603      	mov	r3, r0
 80062d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d903      	bls.n	80062e8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80062e0:	f06f 0301 	mvn.w	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e025      	b.n	8006334 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80062e8:	79fb      	ldrb	r3, [r7, #7]
 80062ea:	79fa      	ldrb	r2, [r7, #7]
 80062ec:	4914      	ldr	r1, [pc, #80]	; (8006340 <BSP_COM_Init+0x74>)
 80062ee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80062f2:	4814      	ldr	r0, [pc, #80]	; (8006344 <BSP_COM_Init+0x78>)
 80062f4:	4613      	mov	r3, r2
 80062f6:	015b      	lsls	r3, r3, #5
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4403      	add	r3, r0
 80062fe:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8006300:	79fa      	ldrb	r2, [r7, #7]
 8006302:	4613      	mov	r3, r2
 8006304:	015b      	lsls	r3, r3, #5
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4a0e      	ldr	r2, [pc, #56]	; (8006344 <BSP_COM_Init+0x78>)
 800630c:	4413      	add	r3, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f86a 	bl	80063e8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006314:	79fa      	ldrb	r2, [r7, #7]
 8006316:	4613      	mov	r3, r2
 8006318:	015b      	lsls	r3, r3, #5
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a09      	ldr	r2, [pc, #36]	; (8006344 <BSP_COM_Init+0x78>)
 8006320:	4413      	add	r3, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f000 f810 	bl	8006348 <MX_USART2_UART_Init>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800632e:	f06f 0303 	mvn.w	r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006334:	68fb      	ldr	r3, [r7, #12]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	200000e4 	.word	0x200000e4
 8006344:	20001548 	.word	0x20001548

08006348 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a15      	ldr	r2, [pc, #84]	; (80063ac <MX_USART2_UART_Init+0x64>)
 8006358:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006360:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	220c      	movs	r2, #12
 8006378:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f004 f854 	bl	800a440 <HAL_UART_Init>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40004400 	.word	0x40004400

080063b0 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <__io_putchar+0x30>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	4613      	mov	r3, r2
 80063c0:	015b      	lsls	r3, r3, #5
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <__io_putchar+0x34>)
 80063c8:	1898      	adds	r0, r3, r2
 80063ca:	1d39      	adds	r1, r7, #4
 80063cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063d0:	2201      	movs	r2, #1
 80063d2:	f004 f88d 	bl	800a4f0 <HAL_UART_Transmit>
  return ch;
 80063d6:	687b      	ldr	r3, [r7, #4]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	200011b0 	.word	0x200011b0
 80063e4:	20001548 	.word	0x20001548

080063e8 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <USART2_MspInit+0xcc>)
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	4a2f      	ldr	r2, [pc, #188]	; (80064b4 <USART2_MspInit+0xcc>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fa:	6593      	str	r3, [r2, #88]	; 0x58
 80063fc:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <USART2_MspInit+0xcc>)
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006408:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <USART2_MspInit+0xcc>)
 800640a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640c:	4a29      	ldr	r2, [pc, #164]	; (80064b4 <USART2_MspInit+0xcc>)
 800640e:	f043 0301 	orr.w	r3, r3, #1
 8006412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006414:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <USART2_MspInit+0xcc>)
 8006416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8006420:	2304      	movs	r3, #4
 8006422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006424:	2302      	movs	r3, #2
 8006426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006428:	2300      	movs	r3, #0
 800642a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800642c:	2303      	movs	r3, #3
 800642e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8006430:	2307      	movs	r3, #7
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	4619      	mov	r1, r3
 800643a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800643e:	f000 fcaf 	bl	8006da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8006442:	2308      	movs	r3, #8
 8006444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006446:	2302      	movs	r3, #2
 8006448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800644e:	2303      	movs	r3, #3
 8006450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8006452:	2307      	movs	r3, #7
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006456:	f107 0314 	add.w	r3, r7, #20
 800645a:	4619      	mov	r1, r3
 800645c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006460:	f000 fc9e 	bl	8006da0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006464:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <USART2_MspInit+0xd0>)
 8006466:	4a15      	ldr	r2, [pc, #84]	; (80064bc <USART2_MspInit+0xd4>)
 8006468:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800646a:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <USART2_MspInit+0xd0>)
 800646c:	2202      	movs	r2, #2
 800646e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006470:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <USART2_MspInit+0xd0>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006476:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <USART2_MspInit+0xd0>)
 8006478:	2200      	movs	r2, #0
 800647a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <USART2_MspInit+0xd0>)
 800647e:	2280      	movs	r2, #128	; 0x80
 8006480:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006482:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <USART2_MspInit+0xd0>)
 8006484:	2200      	movs	r2, #0
 8006486:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <USART2_MspInit+0xd0>)
 800648a:	2200      	movs	r2, #0
 800648c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800648e:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <USART2_MspInit+0xd0>)
 8006490:	2220      	movs	r2, #32
 8006492:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006494:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <USART2_MspInit+0xd0>)
 8006496:	2200      	movs	r2, #0
 8006498:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 800649a:	4807      	ldr	r0, [pc, #28]	; (80064b8 <USART2_MspInit+0xd0>)
 800649c:	f000 fa88 	bl	80069b0 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a05      	ldr	r2, [pc, #20]	; (80064b8 <USART2_MspInit+0xd0>)
 80064a4:	671a      	str	r2, [r3, #112]	; 0x70
 80064a6:	4a04      	ldr	r2, [pc, #16]	; (80064b8 <USART2_MspInit+0xd0>)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80064ac:	bf00      	nop
 80064ae:	3728      	adds	r7, #40	; 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40021000 	.word	0x40021000
 80064b8:	20001500 	.word	0x20001500
 80064bc:	4002006c 	.word	0x4002006c

080064c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064ca:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <HAL_Init+0x3c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a0b      	ldr	r2, [pc, #44]	; (80064fc <HAL_Init+0x3c>)
 80064d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d6:	2003      	movs	r0, #3
 80064d8:	f000 f93e 	bl	8006758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064dc:	2000      	movs	r0, #0
 80064de:	f000 f80f 	bl	8006500 <HAL_InitTick>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	71fb      	strb	r3, [r7, #7]
 80064ec:	e001      	b.n	80064f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064ee:	f7fc f843 	bl	8002578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064f2:	79fb      	ldrb	r3, [r7, #7]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40022000 	.word	0x40022000

08006500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800650c:	4b17      	ldr	r3, [pc, #92]	; (800656c <HAL_InitTick+0x6c>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d023      	beq.n	800655c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006514:	4b16      	ldr	r3, [pc, #88]	; (8006570 <HAL_InitTick+0x70>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b14      	ldr	r3, [pc, #80]	; (800656c <HAL_InitTick+0x6c>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006522:	fbb3 f3f1 	udiv	r3, r3, r1
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f949 	bl	80067c2 <HAL_SYSTICK_Config>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10f      	bne.n	8006556 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b0f      	cmp	r3, #15
 800653a:	d809      	bhi.n	8006550 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800653c:	2200      	movs	r2, #0
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	f000 f913 	bl	800676e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006548:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <HAL_InitTick+0x74>)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	e007      	b.n	8006560 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	e004      	b.n	8006560 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	73fb      	strb	r3, [r7, #15]
 800655a:	e001      	b.n	8006560 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	200000ec 	.word	0x200000ec
 8006570:	2000000c 	.word	0x2000000c
 8006574:	200000e8 	.word	0x200000e8

08006578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <HAL_IncTick+0x20>)
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <HAL_IncTick+0x24>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4413      	add	r3, r2
 8006588:	4a04      	ldr	r2, [pc, #16]	; (800659c <HAL_IncTick+0x24>)
 800658a:	6013      	str	r3, [r2, #0]
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	200000ec 	.word	0x200000ec
 800659c:	200015cc 	.word	0x200015cc

080065a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  return uwTick;
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <HAL_GetTick+0x14>)
 80065a6:	681b      	ldr	r3, [r3, #0]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	200015cc 	.word	0x200015cc

080065b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065c8:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <__NVIC_SetPriorityGrouping+0x44>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065d4:	4013      	ands	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065ea:	4a04      	ldr	r2, [pc, #16]	; (80065fc <__NVIC_SetPriorityGrouping+0x44>)
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	60d3      	str	r3, [r2, #12]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	e000ed00 	.word	0xe000ed00

08006600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006600:	b480      	push	{r7}
 8006602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <__NVIC_GetPriorityGrouping+0x18>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	0a1b      	lsrs	r3, r3, #8
 800660a:	f003 0307 	and.w	r3, r3, #7
}
 800660e:	4618      	mov	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800662a:	2b00      	cmp	r3, #0
 800662c:	db0b      	blt.n	8006646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	f003 021f 	and.w	r2, r3, #31
 8006634:	4907      	ldr	r1, [pc, #28]	; (8006654 <__NVIC_EnableIRQ+0x38>)
 8006636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	2001      	movs	r0, #1
 800663e:	fa00 f202 	lsl.w	r2, r0, r2
 8006642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	e000e100 	.word	0xe000e100

08006658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006668:	2b00      	cmp	r3, #0
 800666a:	db0a      	blt.n	8006682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	490c      	ldr	r1, [pc, #48]	; (80066a4 <__NVIC_SetPriority+0x4c>)
 8006672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006676:	0112      	lsls	r2, r2, #4
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	440b      	add	r3, r1
 800667c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006680:	e00a      	b.n	8006698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4908      	ldr	r1, [pc, #32]	; (80066a8 <__NVIC_SetPriority+0x50>)
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	3b04      	subs	r3, #4
 8006690:	0112      	lsls	r2, r2, #4
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	440b      	add	r3, r1
 8006696:	761a      	strb	r2, [r3, #24]
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	e000e100 	.word	0xe000e100
 80066a8:	e000ed00 	.word	0xe000ed00

080066ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b089      	sub	sp, #36	; 0x24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f1c3 0307 	rsb	r3, r3, #7
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	bf28      	it	cs
 80066ca:	2304      	movcs	r3, #4
 80066cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	3304      	adds	r3, #4
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d902      	bls.n	80066dc <NVIC_EncodePriority+0x30>
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	3b03      	subs	r3, #3
 80066da:	e000      	b.n	80066de <NVIC_EncodePriority+0x32>
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	401a      	ands	r2, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066f4:	f04f 31ff 	mov.w	r1, #4294967295
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	fa01 f303 	lsl.w	r3, r1, r3
 80066fe:	43d9      	mvns	r1, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006704:	4313      	orrs	r3, r2
         );
}
 8006706:	4618      	mov	r0, r3
 8006708:	3724      	adds	r7, #36	; 0x24
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3b01      	subs	r3, #1
 8006720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006724:	d301      	bcc.n	800672a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006726:	2301      	movs	r3, #1
 8006728:	e00f      	b.n	800674a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800672a:	4a0a      	ldr	r2, [pc, #40]	; (8006754 <SysTick_Config+0x40>)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3b01      	subs	r3, #1
 8006730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006732:	210f      	movs	r1, #15
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	f7ff ff8e 	bl	8006658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <SysTick_Config+0x40>)
 800673e:	2200      	movs	r2, #0
 8006740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006742:	4b04      	ldr	r3, [pc, #16]	; (8006754 <SysTick_Config+0x40>)
 8006744:	2207      	movs	r2, #7
 8006746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	e000e010 	.word	0xe000e010

08006758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ff29 	bl	80065b8 <__NVIC_SetPriorityGrouping>
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	4603      	mov	r3, r0
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800677c:	2300      	movs	r3, #0
 800677e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006780:	f7ff ff3e 	bl	8006600 <__NVIC_GetPriorityGrouping>
 8006784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	6978      	ldr	r0, [r7, #20]
 800678c:	f7ff ff8e 	bl	80066ac <NVIC_EncodePriority>
 8006790:	4602      	mov	r2, r0
 8006792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006796:	4611      	mov	r1, r2
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff ff5d 	bl	8006658 <__NVIC_SetPriority>
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	4603      	mov	r3, r0
 80067ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff31 	bl	800661c <__NVIC_EnableIRQ>
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff ffa2 	bl	8006714 <SysTick_Config>
 80067d0:	4603      	mov	r3, r0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e054      	b.n	8006898 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	7f5b      	ldrb	r3, [r3, #29]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fb fa70 	bl	8001ce4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	791b      	ldrb	r3, [r3, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10c      	bne.n	800682c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <HAL_CRC_Init+0xc4>)
 8006818:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0218 	bic.w	r2, r2, #24
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	e00c      	b.n	8006846 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6899      	ldr	r1, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	461a      	mov	r2, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f834 	bl	80068a4 <HAL_CRCEx_Polynomial_Set>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e028      	b.n	8006898 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	795b      	ldrb	r3, [r3, #5]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f04f 32ff 	mov.w	r2, #4294967295
 8006856:	611a      	str	r2, [r3, #16]
 8006858:	e004      	b.n	8006864 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6912      	ldr	r2, [r2, #16]
 8006862:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	04c11db7 	.word	0x04c11db7

080068a4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80068b4:	231f      	movs	r3, #31
 80068b6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80068b8:	bf00      	nop
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	613a      	str	r2, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <HAL_CRCEx_Polynomial_Set+0x34>
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	fa22 f303 	lsr.w	r3, r2, r3
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0f0      	beq.n	80068ba <HAL_CRCEx_Polynomial_Set+0x16>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b18      	cmp	r3, #24
 80068dc:	d846      	bhi.n	800696c <HAL_CRCEx_Polynomial_Set+0xc8>
 80068de:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	08006973 	.word	0x08006973
 80068e8:	0800696d 	.word	0x0800696d
 80068ec:	0800696d 	.word	0x0800696d
 80068f0:	0800696d 	.word	0x0800696d
 80068f4:	0800696d 	.word	0x0800696d
 80068f8:	0800696d 	.word	0x0800696d
 80068fc:	0800696d 	.word	0x0800696d
 8006900:	0800696d 	.word	0x0800696d
 8006904:	08006961 	.word	0x08006961
 8006908:	0800696d 	.word	0x0800696d
 800690c:	0800696d 	.word	0x0800696d
 8006910:	0800696d 	.word	0x0800696d
 8006914:	0800696d 	.word	0x0800696d
 8006918:	0800696d 	.word	0x0800696d
 800691c:	0800696d 	.word	0x0800696d
 8006920:	0800696d 	.word	0x0800696d
 8006924:	08006955 	.word	0x08006955
 8006928:	0800696d 	.word	0x0800696d
 800692c:	0800696d 	.word	0x0800696d
 8006930:	0800696d 	.word	0x0800696d
 8006934:	0800696d 	.word	0x0800696d
 8006938:	0800696d 	.word	0x0800696d
 800693c:	0800696d 	.word	0x0800696d
 8006940:	0800696d 	.word	0x0800696d
 8006944:	08006949 	.word	0x08006949
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b06      	cmp	r3, #6
 800694c:	d913      	bls.n	8006976 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006952:	e010      	b.n	8006976 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b07      	cmp	r3, #7
 8006958:	d90f      	bls.n	800697a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800695e:	e00c      	b.n	800697a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	2b0f      	cmp	r3, #15
 8006964:	d90b      	bls.n	800697e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800696a:	e008      	b.n	800697e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	75fb      	strb	r3, [r7, #23]
      break;
 8006970:	e006      	b.n	8006980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006972:	bf00      	nop
 8006974:	e004      	b.n	8006980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006976:	bf00      	nop
 8006978:	e002      	b.n	8006980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800697a:	bf00      	nop
 800697c:	e000      	b.n	8006980 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800697e:	bf00      	nop
  }
  if (status == HAL_OK)
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10d      	bne.n	80069a2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f023 0118 	bic.w	r1, r3, #24
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	430a      	orrs	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e098      	b.n	8006af4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	4b4d      	ldr	r3, [pc, #308]	; (8006b00 <HAL_DMA_Init+0x150>)
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d80f      	bhi.n	80069ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	4b4b      	ldr	r3, [pc, #300]	; (8006b04 <HAL_DMA_Init+0x154>)
 80069d6:	4413      	add	r3, r2
 80069d8:	4a4b      	ldr	r2, [pc, #300]	; (8006b08 <HAL_DMA_Init+0x158>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	091b      	lsrs	r3, r3, #4
 80069e0:	009a      	lsls	r2, r3, #2
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a48      	ldr	r2, [pc, #288]	; (8006b0c <HAL_DMA_Init+0x15c>)
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40
 80069ec:	e00e      	b.n	8006a0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	4b46      	ldr	r3, [pc, #280]	; (8006b10 <HAL_DMA_Init+0x160>)
 80069f6:	4413      	add	r3, r2
 80069f8:	4a43      	ldr	r2, [pc, #268]	; (8006b08 <HAL_DMA_Init+0x158>)
 80069fa:	fba2 2303 	umull	r2, r3, r2, r3
 80069fe:	091b      	lsrs	r3, r3, #4
 8006a00:	009a      	lsls	r2, r3, #2
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a42      	ldr	r2, [pc, #264]	; (8006b14 <HAL_DMA_Init+0x164>)
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a66:	d039      	beq.n	8006adc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	4a27      	ldr	r2, [pc, #156]	; (8006b0c <HAL_DMA_Init+0x15c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d11a      	bne.n	8006aa8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006a72:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <HAL_DMA_Init+0x168>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	f003 031c 	and.w	r3, r3, #28
 8006a7e:	210f      	movs	r1, #15
 8006a80:	fa01 f303 	lsl.w	r3, r1, r3
 8006a84:	43db      	mvns	r3, r3
 8006a86:	4924      	ldr	r1, [pc, #144]	; (8006b18 <HAL_DMA_Init+0x168>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006a8c:	4b22      	ldr	r3, [pc, #136]	; (8006b18 <HAL_DMA_Init+0x168>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6859      	ldr	r1, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	f003 031c 	and.w	r3, r3, #28
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	491d      	ldr	r1, [pc, #116]	; (8006b18 <HAL_DMA_Init+0x168>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]
 8006aa6:	e019      	b.n	8006adc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <HAL_DMA_Init+0x16c>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f003 031c 	and.w	r3, r3, #28
 8006ab4:	210f      	movs	r1, #15
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	4917      	ldr	r1, [pc, #92]	; (8006b1c <HAL_DMA_Init+0x16c>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006ac2:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <HAL_DMA_Init+0x16c>)
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6859      	ldr	r1, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	f003 031c 	and.w	r3, r3, #28
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	4911      	ldr	r1, [pc, #68]	; (8006b1c <HAL_DMA_Init+0x16c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40020407 	.word	0x40020407
 8006b04:	bffdfff8 	.word	0xbffdfff8
 8006b08:	cccccccd 	.word	0xcccccccd
 8006b0c:	40020000 	.word	0x40020000
 8006b10:	bffdfbf8 	.word	0xbffdfbf8
 8006b14:	40020400 	.word	0x40020400
 8006b18:	400200a8 	.word	0x400200a8
 8006b1c:	400204a8 	.word	0x400204a8

08006b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_DMA_Start_IT+0x20>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e04b      	b.n	8006bd8 <HAL_DMA_Start_IT+0xb8>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d13a      	bne.n	8006bca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0201 	bic.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f8e0 	bl	8006d3e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 020e 	orr.w	r2, r2, #14
 8006b94:	601a      	str	r2, [r3, #0]
 8006b96:	e00f      	b.n	8006bb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0204 	bic.w	r2, r2, #4
 8006ba6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 020a 	orr.w	r2, r2, #10
 8006bb6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e005      	b.n	8006bd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfc:	f003 031c 	and.w	r3, r3, #28
 8006c00:	2204      	movs	r2, #4
 8006c02:	409a      	lsls	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d026      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x7a>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 0304 	and.w	r3, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d021      	beq.n	8006c5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0204 	bic.w	r2, r2, #4
 8006c32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c38:	f003 021c 	and.w	r2, r3, #28
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	2104      	movs	r1, #4
 8006c42:	fa01 f202 	lsl.w	r2, r1, r2
 8006c46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d071      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006c58:	e06c      	b.n	8006d34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5e:	f003 031c 	and.w	r3, r3, #28
 8006c62:	2202      	movs	r2, #2
 8006c64:	409a      	lsls	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d02e      	beq.n	8006ccc <HAL_DMA_IRQHandler+0xec>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d029      	beq.n	8006ccc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f022 020a 	bic.w	r2, r2, #10
 8006c94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca2:	f003 021c 	and.w	r2, r3, #28
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2102      	movs	r1, #2
 8006cac:	fa01 f202 	lsl.w	r2, r1, r2
 8006cb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d038      	beq.n	8006d34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006cca:	e033      	b.n	8006d34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd0:	f003 031c 	and.w	r3, r3, #28
 8006cd4:	2208      	movs	r2, #8
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d02a      	beq.n	8006d36 <HAL_DMA_IRQHandler+0x156>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d025      	beq.n	8006d36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 020e 	bic.w	r2, r2, #14
 8006cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	f003 021c 	and.w	r2, r3, #28
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	2101      	movs	r1, #1
 8006d08:	fa01 f202 	lsl.w	r2, r1, r2
 8006d0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
}
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d50:	f003 021c 	and.w	r2, r3, #28
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	2101      	movs	r1, #1
 8006d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d108      	bne.n	8006d82 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d80:	e007      	b.n	8006d92 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	60da      	str	r2, [r3, #12]
}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dae:	e17f      	b.n	80070b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	2101      	movs	r1, #1
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 8171 	beq.w	80070aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d005      	beq.n	8006de0 <HAL_GPIO_Init+0x40>
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f003 0303 	and.w	r3, r3, #3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d130      	bne.n	8006e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	2203      	movs	r2, #3
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	43db      	mvns	r3, r3
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4013      	ands	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e16:	2201      	movs	r2, #1
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4013      	ands	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	091b      	lsrs	r3, r3, #4
 8006e2c:	f003 0201 	and.w	r2, r3, #1
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d118      	bne.n	8006e80 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006e54:	2201      	movs	r2, #1
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4013      	ands	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	08db      	lsrs	r3, r3, #3
 8006e6a:	f003 0201 	and.w	r2, r3, #1
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d017      	beq.n	8006ebc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	2203      	movs	r2, #3
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d123      	bne.n	8006f10 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	08da      	lsrs	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3208      	adds	r2, #8
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	220f      	movs	r2, #15
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	08da      	lsrs	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3208      	adds	r2, #8
 8006f0a:	6939      	ldr	r1, [r7, #16]
 8006f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	43db      	mvns	r3, r3
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4013      	ands	r3, r2
 8006f26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 0203 	and.w	r2, r3, #3
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80ac 	beq.w	80070aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f52:	4b5f      	ldr	r3, [pc, #380]	; (80070d0 <HAL_GPIO_Init+0x330>)
 8006f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f56:	4a5e      	ldr	r2, [pc, #376]	; (80070d0 <HAL_GPIO_Init+0x330>)
 8006f58:	f043 0301 	orr.w	r3, r3, #1
 8006f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8006f5e:	4b5c      	ldr	r3, [pc, #368]	; (80070d0 <HAL_GPIO_Init+0x330>)
 8006f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	60bb      	str	r3, [r7, #8]
 8006f68:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006f6a:	4a5a      	ldr	r2, [pc, #360]	; (80070d4 <HAL_GPIO_Init+0x334>)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	3302      	adds	r3, #2
 8006f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	220f      	movs	r2, #15
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43db      	mvns	r3, r3
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f94:	d025      	beq.n	8006fe2 <HAL_GPIO_Init+0x242>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a4f      	ldr	r2, [pc, #316]	; (80070d8 <HAL_GPIO_Init+0x338>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01f      	beq.n	8006fde <HAL_GPIO_Init+0x23e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a4e      	ldr	r2, [pc, #312]	; (80070dc <HAL_GPIO_Init+0x33c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d019      	beq.n	8006fda <HAL_GPIO_Init+0x23a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a4d      	ldr	r2, [pc, #308]	; (80070e0 <HAL_GPIO_Init+0x340>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_GPIO_Init+0x236>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a4c      	ldr	r2, [pc, #304]	; (80070e4 <HAL_GPIO_Init+0x344>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00d      	beq.n	8006fd2 <HAL_GPIO_Init+0x232>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a4b      	ldr	r2, [pc, #300]	; (80070e8 <HAL_GPIO_Init+0x348>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d007      	beq.n	8006fce <HAL_GPIO_Init+0x22e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a4a      	ldr	r2, [pc, #296]	; (80070ec <HAL_GPIO_Init+0x34c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d101      	bne.n	8006fca <HAL_GPIO_Init+0x22a>
 8006fc6:	2306      	movs	r3, #6
 8006fc8:	e00c      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fca:	2307      	movs	r3, #7
 8006fcc:	e00a      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fce:	2305      	movs	r3, #5
 8006fd0:	e008      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	e006      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e004      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e002      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e000      	b.n	8006fe4 <HAL_GPIO_Init+0x244>
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	f002 0203 	and.w	r2, r2, #3
 8006fea:	0092      	lsls	r2, r2, #2
 8006fec:	4093      	lsls	r3, r2
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006ff4:	4937      	ldr	r1, [pc, #220]	; (80070d4 <HAL_GPIO_Init+0x334>)
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	089b      	lsrs	r3, r3, #2
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007002:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <HAL_GPIO_Init+0x350>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	43db      	mvns	r3, r3
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4013      	ands	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007026:	4a32      	ldr	r2, [pc, #200]	; (80070f0 <HAL_GPIO_Init+0x350>)
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800702c:	4b30      	ldr	r3, [pc, #192]	; (80070f0 <HAL_GPIO_Init+0x350>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	43db      	mvns	r3, r3
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4013      	ands	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007050:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <HAL_GPIO_Init+0x350>)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007056:	4b26      	ldr	r3, [pc, #152]	; (80070f0 <HAL_GPIO_Init+0x350>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	43db      	mvns	r3, r3
 8007060:	693a      	ldr	r2, [r7, #16]
 8007062:	4013      	ands	r3, r2
 8007064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800707a:	4a1d      	ldr	r2, [pc, #116]	; (80070f0 <HAL_GPIO_Init+0x350>)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <HAL_GPIO_Init+0x350>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	43db      	mvns	r3, r3
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4013      	ands	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80070a4:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <HAL_GPIO_Init+0x350>)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	3301      	adds	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f47f ae78 	bne.w	8006db0 <HAL_GPIO_Init+0x10>
  }
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	371c      	adds	r7, #28
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40010000 	.word	0x40010000
 80070d8:	48000400 	.word	0x48000400
 80070dc:	48000800 	.word	0x48000800
 80070e0:	48000c00 	.word	0x48000c00
 80070e4:	48001000 	.word	0x48001000
 80070e8:	48001400 	.word	0x48001400
 80070ec:	48001800 	.word	0x48001800
 80070f0:	40010400 	.word	0x40010400

080070f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007102:	e0cd      	b.n	80072a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007104:	2201      	movs	r2, #1
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	4013      	ands	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 80c0 	beq.w	800729a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800711a:	4a68      	ldr	r2, [pc, #416]	; (80072bc <HAL_GPIO_DeInit+0x1c8>)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	089b      	lsrs	r3, r3, #2
 8007120:	3302      	adds	r3, #2
 8007122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007126:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	220f      	movs	r2, #15
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4013      	ands	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007142:	d025      	beq.n	8007190 <HAL_GPIO_DeInit+0x9c>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a5e      	ldr	r2, [pc, #376]	; (80072c0 <HAL_GPIO_DeInit+0x1cc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d01f      	beq.n	800718c <HAL_GPIO_DeInit+0x98>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a5d      	ldr	r2, [pc, #372]	; (80072c4 <HAL_GPIO_DeInit+0x1d0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d019      	beq.n	8007188 <HAL_GPIO_DeInit+0x94>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a5c      	ldr	r2, [pc, #368]	; (80072c8 <HAL_GPIO_DeInit+0x1d4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_GPIO_DeInit+0x90>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a5b      	ldr	r2, [pc, #364]	; (80072cc <HAL_GPIO_DeInit+0x1d8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d00d      	beq.n	8007180 <HAL_GPIO_DeInit+0x8c>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a5a      	ldr	r2, [pc, #360]	; (80072d0 <HAL_GPIO_DeInit+0x1dc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <HAL_GPIO_DeInit+0x88>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a59      	ldr	r2, [pc, #356]	; (80072d4 <HAL_GPIO_DeInit+0x1e0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d101      	bne.n	8007178 <HAL_GPIO_DeInit+0x84>
 8007174:	2306      	movs	r3, #6
 8007176:	e00c      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 8007178:	2307      	movs	r3, #7
 800717a:	e00a      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 800717c:	2305      	movs	r3, #5
 800717e:	e008      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 8007180:	2304      	movs	r3, #4
 8007182:	e006      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 8007184:	2303      	movs	r3, #3
 8007186:	e004      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 8007188:	2302      	movs	r3, #2
 800718a:	e002      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_GPIO_DeInit+0x9e>
 8007190:	2300      	movs	r3, #0
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	f002 0203 	and.w	r2, r2, #3
 8007198:	0092      	lsls	r2, r2, #2
 800719a:	4093      	lsls	r3, r2
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d132      	bne.n	8007208 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80071a2:	4b4d      	ldr	r3, [pc, #308]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	494b      	ldr	r1, [pc, #300]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80071b0:	4b49      	ldr	r3, [pc, #292]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	43db      	mvns	r3, r3
 80071b8:	4947      	ldr	r1, [pc, #284]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80071be:	4b46      	ldr	r3, [pc, #280]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	43db      	mvns	r3, r3
 80071c6:	4944      	ldr	r1, [pc, #272]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071c8:	4013      	ands	r3, r2
 80071ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80071cc:	4b42      	ldr	r3, [pc, #264]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	43db      	mvns	r3, r3
 80071d4:	4940      	ldr	r1, [pc, #256]	; (80072d8 <HAL_GPIO_DeInit+0x1e4>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	220f      	movs	r2, #15
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80071ea:	4a34      	ldr	r2, [pc, #208]	; (80072bc <HAL_GPIO_DeInit+0x1c8>)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	089b      	lsrs	r3, r3, #2
 80071f0:	3302      	adds	r3, #2
 80071f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	43da      	mvns	r2, r3
 80071fa:	4830      	ldr	r0, [pc, #192]	; (80072bc <HAL_GPIO_DeInit+0x1c8>)
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	089b      	lsrs	r3, r3, #2
 8007200:	400a      	ands	r2, r1
 8007202:	3302      	adds	r3, #2
 8007204:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	2103      	movs	r1, #3
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	08da      	lsrs	r2, r3, #3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3208      	adds	r2, #8
 8007224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	220f      	movs	r2, #15
 8007232:	fa02 f303 	lsl.w	r3, r2, r3
 8007236:	43db      	mvns	r3, r3
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	08d2      	lsrs	r2, r2, #3
 800723c:	4019      	ands	r1, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3208      	adds	r2, #8
 8007242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	2103      	movs	r1, #3
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	43db      	mvns	r3, r3
 8007256:	401a      	ands	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	2101      	movs	r1, #1
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	fa01 f303 	lsl.w	r3, r1, r3
 8007268:	43db      	mvns	r3, r3
 800726a:	401a      	ands	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	2103      	movs	r1, #3
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	43db      	mvns	r3, r3
 8007280:	401a      	ands	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728a:	2101      	movs	r1, #1
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	43db      	mvns	r3, r3
 8007294:	401a      	ands	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3301      	adds	r3, #1
 800729e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	fa22 f303 	lsr.w	r3, r2, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f47f af2b 	bne.w	8007104 <HAL_GPIO_DeInit+0x10>
  }
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40010000 	.word	0x40010000
 80072c0:	48000400 	.word	0x48000400
 80072c4:	48000800 	.word	0x48000800
 80072c8:	48000c00 	.word	0x48000c00
 80072cc:	48001000 	.word	0x48001000
 80072d0:	48001400 	.word	0x48001400
 80072d4:	48001800 	.word	0x48001800
 80072d8:	40010400 	.word	0x40010400

080072dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	807b      	strh	r3, [r7, #2]
 80072e8:	4613      	mov	r3, r2
 80072ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80072ec:	787b      	ldrb	r3, [r7, #1]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072f2:	887a      	ldrh	r2, [r7, #2]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072f8:	e002      	b.n	8007300 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072fa:	887a      	ldrh	r2, [r7, #2]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007316:	4b08      	ldr	r3, [pc, #32]	; (8007338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	88fb      	ldrh	r3, [r7, #6]
 800731c:	4013      	ands	r3, r2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d006      	beq.n	8007330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007322:	4a05      	ldr	r2, [pc, #20]	; (8007338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	4618      	mov	r0, r3
 800732c:	f7fa ffa4 	bl	8002278 <HAL_GPIO_EXTI_Callback>
  }
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40010400 	.word	0x40010400

0800733c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e081      	b.n	8007452 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fa fdaa 	bl	8001ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2224      	movs	r2, #36	; 0x24
 800736c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800738c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800739c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d107      	bne.n	80073b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	e006      	b.n	80073c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80073c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d104      	bne.n	80073d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691a      	ldr	r2, [r3, #16]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69d9      	ldr	r1, [r3, #28]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1a      	ldr	r2, [r3, #32]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e021      	b.n	80074b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2224      	movs	r2, #36	; 0x24
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7fa fd77 	bl	8001f78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af02      	add	r7, sp, #8
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	4608      	mov	r0, r1
 80074c2:	4611      	mov	r1, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	817b      	strh	r3, [r7, #10]
 80074ca:	460b      	mov	r3, r1
 80074cc:	813b      	strh	r3, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b20      	cmp	r3, #32
 80074dc:	f040 80f9 	bne.w	80076d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_I2C_Mem_Write+0x34>
 80074e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0ed      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_I2C_Mem_Write+0x4e>
 8007502:	2302      	movs	r3, #2
 8007504:	e0e6      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800750e:	f7ff f847 	bl	80065a0 <HAL_GetTick>
 8007512:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2319      	movs	r3, #25
 800751a:	2201      	movs	r2, #1
 800751c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fadd 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0d1      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2221      	movs	r2, #33	; 0x21
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6a3a      	ldr	r2, [r7, #32]
 800754a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007558:	88f8      	ldrh	r0, [r7, #6]
 800755a:	893a      	ldrh	r2, [r7, #8]
 800755c:	8979      	ldrh	r1, [r7, #10]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	4603      	mov	r3, r0
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f9ed 	bl	8007948 <I2C_RequestMemoryWrite>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e0a9      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2bff      	cmp	r3, #255	; 0xff
 8007588:	d90e      	bls.n	80075a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007594:	b2da      	uxtb	r2, r3
 8007596:	8979      	ldrh	r1, [r7, #10]
 8007598:	2300      	movs	r3, #0
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f000 fc45 	bl	8007e30 <I2C_TransferConfig>
 80075a6:	e00f      	b.n	80075c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	8979      	ldrh	r1, [r7, #10]
 80075ba:	2300      	movs	r3, #0
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 fc34 	bl	8007e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fac7 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e07b      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e0:	781a      	ldrb	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d034      	beq.n	8007680 <HAL_I2C_Mem_Write+0x1c8>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d130      	bne.n	8007680 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	2200      	movs	r2, #0
 8007626:	2180      	movs	r1, #128	; 0x80
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa59 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e04d      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2bff      	cmp	r3, #255	; 0xff
 8007640:	d90e      	bls.n	8007660 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764c:	b2da      	uxtb	r2, r3
 800764e:	8979      	ldrh	r1, [r7, #10]
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fbe9 	bl	8007e30 <I2C_TransferConfig>
 800765e:	e00f      	b.n	8007680 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766e:	b2da      	uxtb	r2, r3
 8007670:	8979      	ldrh	r1, [r7, #10]
 8007672:	2300      	movs	r3, #0
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fbd8 	bl	8007e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d19e      	bne.n	80075c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 faa6 	bl	8007be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e01a      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2220      	movs	r2, #32
 80076a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6859      	ldr	r1, [r3, #4]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b0a      	ldr	r3, [pc, #40]	; (80076dc <HAL_I2C_Mem_Write+0x224>)
 80076b2:	400b      	ands	r3, r1
 80076b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	fe00e800 	.word	0xfe00e800

080076e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	461a      	mov	r2, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	817b      	strh	r3, [r7, #10]
 80076f2:	460b      	mov	r3, r1
 80076f4:	813b      	strh	r3, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b20      	cmp	r3, #32
 8007704:	f040 80fd 	bne.w	8007902 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <HAL_I2C_Mem_Read+0x34>
 800770e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800771a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e0f1      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <HAL_I2C_Mem_Read+0x4e>
 800772a:	2302      	movs	r3, #2
 800772c:	e0ea      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007736:	f7fe ff33 	bl	80065a0 <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	2319      	movs	r3, #25
 8007742:	2201      	movs	r2, #1
 8007744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 f9c9 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e0d5      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2222      	movs	r2, #34	; 0x22
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2240      	movs	r2, #64	; 0x40
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007780:	88f8      	ldrh	r0, [r7, #6]
 8007782:	893a      	ldrh	r2, [r7, #8]
 8007784:	8979      	ldrh	r1, [r7, #10]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	9301      	str	r3, [sp, #4]
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	4603      	mov	r3, r0
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f92d 	bl	80079f0 <I2C_RequestMemoryRead>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e0ad      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2bff      	cmp	r3, #255	; 0xff
 80077b0:	d90e      	bls.n	80077d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	22ff      	movs	r2, #255	; 0xff
 80077b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	8979      	ldrh	r1, [r7, #10]
 80077c0:	4b52      	ldr	r3, [pc, #328]	; (800790c <HAL_I2C_Mem_Read+0x22c>)
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 fb31 	bl	8007e30 <I2C_TransferConfig>
 80077ce:	e00f      	b.n	80077f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	8979      	ldrh	r1, [r7, #10]
 80077e2:	4b4a      	ldr	r3, [pc, #296]	; (800790c <HAL_I2C_Mem_Read+0x22c>)
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fb20 	bl	8007e30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f6:	2200      	movs	r2, #0
 80077f8:	2104      	movs	r1, #4
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f970 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d001      	beq.n	800780a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e07c      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	b2d2      	uxtb	r2, r2
 8007816:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d034      	beq.n	80078b0 <HAL_I2C_Mem_Read+0x1d0>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d130      	bne.n	80078b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	2200      	movs	r2, #0
 8007856:	2180      	movs	r1, #128	; 0x80
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f941 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d001      	beq.n	8007868 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e04d      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2bff      	cmp	r3, #255	; 0xff
 8007870:	d90e      	bls.n	8007890 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	22ff      	movs	r2, #255	; 0xff
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800787c:	b2da      	uxtb	r2, r3
 800787e:	8979      	ldrh	r1, [r7, #10]
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 fad1 	bl	8007e30 <I2C_TransferConfig>
 800788e:	e00f      	b.n	80078b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007894:	b29a      	uxth	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	8979      	ldrh	r1, [r7, #10]
 80078a2:	2300      	movs	r3, #0
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 fac0 	bl	8007e30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d19a      	bne.n	80077f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f98e 	bl	8007be0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e01a      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2220      	movs	r2, #32
 80078d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <HAL_I2C_Mem_Read+0x230>)
 80078e2:	400b      	ands	r3, r1
 80078e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007902:	2302      	movs	r3, #2
  }
}
 8007904:	4618      	mov	r0, r3
 8007906:	3718      	adds	r7, #24
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	80002400 	.word	0x80002400
 8007910:	fe00e800 	.word	0xfe00e800

08007914 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007922:	b2db      	uxtb	r3, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	8979      	ldrh	r1, [r7, #10]
 8007968:	4b20      	ldr	r3, [pc, #128]	; (80079ec <I2C_RequestMemoryWrite+0xa4>)
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fa5d 	bl	8007e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	69b9      	ldr	r1, [r7, #24]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f8f0 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e02c      	b.n	80079e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800798a:	88fb      	ldrh	r3, [r7, #6]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d105      	bne.n	800799c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007990:	893b      	ldrh	r3, [r7, #8]
 8007992:	b2da      	uxtb	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	629a      	str	r2, [r3, #40]	; 0x28
 800799a:	e015      	b.n	80079c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800799c:	893b      	ldrh	r3, [r7, #8]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	69b9      	ldr	r1, [r7, #24]
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f000 f8d6 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e012      	b.n	80079e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80079be:	893b      	ldrh	r3, [r7, #8]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	2200      	movs	r2, #0
 80079d0:	2180      	movs	r1, #128	; 0x80
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f884 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	80002000 	.word	0x80002000

080079f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	4608      	mov	r0, r1
 80079fa:	4611      	mov	r1, r2
 80079fc:	461a      	mov	r2, r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	817b      	strh	r3, [r7, #10]
 8007a02:	460b      	mov	r3, r1
 8007a04:	813b      	strh	r3, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	8979      	ldrh	r1, [r7, #10]
 8007a10:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <I2C_RequestMemoryRead+0xa4>)
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	2300      	movs	r3, #0
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fa0a 	bl	8007e30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	69b9      	ldr	r1, [r7, #24]
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 f89d 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e02c      	b.n	8007a8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a30:	88fb      	ldrh	r3, [r7, #6]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d105      	bne.n	8007a42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a36:	893b      	ldrh	r3, [r7, #8]
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a40:	e015      	b.n	8007a6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a42:	893b      	ldrh	r3, [r7, #8]
 8007a44:	0a1b      	lsrs	r3, r3, #8
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	69b9      	ldr	r1, [r7, #24]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f883 	bl	8007b60 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e012      	b.n	8007a8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a64:	893b      	ldrh	r3, [r7, #8]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2200      	movs	r2, #0
 8007a76:	2140      	movs	r1, #64	; 0x40
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f000 f831 	bl	8007ae0 <I2C_WaitOnFlagUntilTimeout>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e000      	b.n	8007a8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	80002000 	.word	0x80002000

08007a98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d103      	bne.n	8007ab6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d007      	beq.n	8007ad4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	619a      	str	r2, [r3, #24]
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	4613      	mov	r3, r2
 8007aee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007af0:	e022      	b.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d01e      	beq.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fe fd51 	bl	80065a0 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d113      	bne.n	8007b38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e00f      	b.n	8007b58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4013      	ands	r3, r2
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	bf0c      	ite	eq
 8007b48:	2301      	moveq	r3, #1
 8007b4a:	2300      	movne	r3, #0
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	79fb      	ldrb	r3, [r7, #7]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d0cd      	beq.n	8007af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b6c:	e02c      	b.n	8007bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 f870 	bl	8007c58 <I2C_IsErrorOccurred>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e02a      	b.n	8007bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d01e      	beq.n	8007bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fe fd09 	bl	80065a0 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d113      	bne.n	8007bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba4:	f043 0220 	orr.w	r2, r3, #32
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e007      	b.n	8007bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d1cb      	bne.n	8007b6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bec:	e028      	b.n	8007c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68b9      	ldr	r1, [r7, #8]
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f830 	bl	8007c58 <I2C_IsErrorOccurred>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e026      	b.n	8007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c02:	f7fe fccd 	bl	80065a0 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d113      	bne.n	8007c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1c:	f043 0220 	orr.w	r2, r3, #32
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e007      	b.n	8007c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d1cf      	bne.n	8007bee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007c72:	2300      	movs	r3, #0
 8007c74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	f003 0310 	and.w	r3, r3, #16
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d075      	beq.n	8007d70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2210      	movs	r2, #16
 8007c8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007c8c:	e056      	b.n	8007d3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c94:	d052      	beq.n	8007d3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c96:	f7fe fc83 	bl	80065a0 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d302      	bcc.n	8007cac <I2C_IsErrorOccurred+0x54>
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d147      	bne.n	8007d3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cbe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cce:	d12e      	bne.n	8007d2e <I2C_IsErrorOccurred+0xd6>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cd6:	d02a      	beq.n	8007d2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007cd8:	7cfb      	ldrb	r3, [r7, #19]
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d027      	beq.n	8007d2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007cee:	f7fe fc57 	bl	80065a0 <HAL_GetTick>
 8007cf2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cf4:	e01b      	b.n	8007d2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007cf6:	f7fe fc53 	bl	80065a0 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b19      	cmp	r3, #25
 8007d02:	d914      	bls.n	8007d2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d1dc      	bne.n	8007cf6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d003      	beq.n	8007d52 <I2C_IsErrorOccurred+0xfa>
 8007d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d09d      	beq.n	8007c8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d103      	bne.n	8007d62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f043 0304 	orr.w	r3, r3, #4
 8007d68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	f043 0308 	orr.w	r3, r3, #8
 8007daa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007db4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f043 0302 	orr.w	r3, r3, #2
 8007dcc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01c      	beq.n	8007e20 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff fe56 	bl	8007a98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <I2C_IsErrorOccurred+0x1d4>)
 8007df8:	400b      	ands	r3, r1
 8007dfa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3728      	adds	r7, #40	; 0x28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	fe00e800 	.word	0xfe00e800

08007e30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	607b      	str	r3, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	817b      	strh	r3, [r7, #10]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e42:	897b      	ldrh	r3, [r7, #10]
 8007e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e48:	7a7b      	ldrb	r3, [r7, #9]
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e50:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e5e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	0d5b      	lsrs	r3, r3, #21
 8007e6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007e6e:	4b08      	ldr	r3, [pc, #32]	; (8007e90 <I2C_TransferConfig+0x60>)
 8007e70:	430b      	orrs	r3, r1
 8007e72:	43db      	mvns	r3, r3
 8007e74:	ea02 0103 	and.w	r1, r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e82:	bf00      	nop
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	03ff63ff 	.word	0x03ff63ff

08007e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b20      	cmp	r3, #32
 8007ea8:	d138      	bne.n	8007f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	e032      	b.n	8007f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2224      	movs	r2, #36	; 0x24
 8007ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0201 	bic.w	r2, r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	e000      	b.n	8007f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f1c:	2302      	movs	r3, #2
  }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d139      	bne.n	8007fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e033      	b.n	8007fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2224      	movs	r2, #36	; 0x24
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e000      	b.n	8007fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
  }
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007fc8:	4b04      	ldr	r3, [pc, #16]	; (8007fdc <HAL_PWREx_GetVoltageRange+0x18>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	40007000 	.word	0x40007000

08007fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fee:	d130      	bne.n	8008052 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ff0:	4b23      	ldr	r3, [pc, #140]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ffc:	d038      	beq.n	8008070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ffe:	4b20      	ldr	r3, [pc, #128]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800800c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2232      	movs	r2, #50	; 0x32
 8008014:	fb02 f303 	mul.w	r3, r2, r3
 8008018:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800801a:	fba2 2303 	umull	r2, r3, r2, r3
 800801e:	0c9b      	lsrs	r3, r3, #18
 8008020:	3301      	adds	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008024:	e002      	b.n	800802c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b01      	subs	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008038:	d102      	bne.n	8008040 <HAL_PWREx_ControlVoltageScaling+0x60>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1f2      	bne.n	8008026 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800804c:	d110      	bne.n	8008070 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e00f      	b.n	8008072 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008052:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800805a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800805e:	d007      	beq.n	8008070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008060:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008068:	4a05      	ldr	r2, [pc, #20]	; (8008080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800806a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800806e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40007000 	.word	0x40007000
 8008084:	2000000c 	.word	0x2000000c
 8008088:	431bde83 	.word	0x431bde83

0800808c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e3d4      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800809e:	4ba1      	ldr	r3, [pc, #644]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 030c 	and.w	r3, r3, #12
 80080a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080a8:	4b9e      	ldr	r3, [pc, #632]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80e4 	beq.w	8008288 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_RCC_OscConfig+0x4a>
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	2b0c      	cmp	r3, #12
 80080ca:	f040 808b 	bne.w	80081e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	f040 8087 	bne.w	80081e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80080d6:	4b93      	ldr	r3, [pc, #588]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_RCC_OscConfig+0x62>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e3ac      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1a      	ldr	r2, [r3, #32]
 80080f2:	4b8c      	ldr	r3, [pc, #560]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <HAL_RCC_OscConfig+0x7c>
 80080fe:	4b89      	ldr	r3, [pc, #548]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008106:	e005      	b.n	8008114 <HAL_RCC_OscConfig+0x88>
 8008108:	4b86      	ldr	r3, [pc, #536]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800810a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800810e:	091b      	lsrs	r3, r3, #4
 8008110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008114:	4293      	cmp	r3, r2
 8008116:	d223      	bcs.n	8008160 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fd41 	bl	8008ba4 <RCC_SetFlashLatencyFromMSIRange>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e38d      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800812c:	4b7d      	ldr	r3, [pc, #500]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a7c      	ldr	r2, [pc, #496]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008132:	f043 0308 	orr.w	r3, r3, #8
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4b7a      	ldr	r3, [pc, #488]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	4977      	ldr	r1, [pc, #476]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008146:	4313      	orrs	r3, r2
 8008148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800814a:	4b76      	ldr	r3, [pc, #472]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	021b      	lsls	r3, r3, #8
 8008158:	4972      	ldr	r1, [pc, #456]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800815a:	4313      	orrs	r3, r2
 800815c:	604b      	str	r3, [r1, #4]
 800815e:	e025      	b.n	80081ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008160:	4b70      	ldr	r3, [pc, #448]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a6f      	ldr	r2, [pc, #444]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008166:	f043 0308 	orr.w	r3, r3, #8
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	4b6d      	ldr	r3, [pc, #436]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	496a      	ldr	r1, [pc, #424]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800817a:	4313      	orrs	r3, r2
 800817c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800817e:	4b69      	ldr	r3, [pc, #420]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	4965      	ldr	r1, [pc, #404]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800818e:	4313      	orrs	r3, r2
 8008190:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d109      	bne.n	80081ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fd01 	bl	8008ba4 <RCC_SetFlashLatencyFromMSIRange>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e34d      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081ac:	f000 fc36 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b5c      	ldr	r3, [pc, #368]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	495a      	ldr	r1, [pc, #360]	; (8008328 <HAL_RCC_OscConfig+0x29c>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
 80081c8:	4a58      	ldr	r2, [pc, #352]	; (800832c <HAL_RCC_OscConfig+0x2a0>)
 80081ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80081cc:	4b58      	ldr	r3, [pc, #352]	; (8008330 <HAL_RCC_OscConfig+0x2a4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe f995 	bl	8006500 <HAL_InitTick>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d052      	beq.n	8008286 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	e331      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d032      	beq.n	8008252 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80081ec:	4b4d      	ldr	r3, [pc, #308]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a4c      	ldr	r2, [pc, #304]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80081f8:	f7fe f9d2 	bl	80065a0 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008200:	f7fe f9ce 	bl	80065a0 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e31a      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008212:	4b44      	ldr	r3, [pc, #272]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800821e:	4b41      	ldr	r3, [pc, #260]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a40      	ldr	r2, [pc, #256]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008224:	f043 0308 	orr.w	r3, r3, #8
 8008228:	6013      	str	r3, [r2, #0]
 800822a:	4b3e      	ldr	r3, [pc, #248]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	493b      	ldr	r1, [pc, #236]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008238:	4313      	orrs	r3, r2
 800823a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800823c:	4b39      	ldr	r3, [pc, #228]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	021b      	lsls	r3, r3, #8
 800824a:	4936      	ldr	r1, [pc, #216]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800824c:	4313      	orrs	r3, r2
 800824e:	604b      	str	r3, [r1, #4]
 8008250:	e01a      	b.n	8008288 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008252:	4b34      	ldr	r3, [pc, #208]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a33      	ldr	r2, [pc, #204]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800825e:	f7fe f99f 	bl	80065a0 <HAL_GetTick>
 8008262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008264:	e008      	b.n	8008278 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008266:	f7fe f99b 	bl	80065a0 <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b02      	cmp	r3, #2
 8008272:	d901      	bls.n	8008278 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008274:	2303      	movs	r3, #3
 8008276:	e2e7      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008278:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1f0      	bne.n	8008266 <HAL_RCC_OscConfig+0x1da>
 8008284:	e000      	b.n	8008288 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008286:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d074      	beq.n	800837e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b08      	cmp	r3, #8
 8008298:	d005      	beq.n	80082a6 <HAL_RCC_OscConfig+0x21a>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b0c      	cmp	r3, #12
 800829e:	d10e      	bne.n	80082be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d10b      	bne.n	80082be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a6:	4b1f      	ldr	r3, [pc, #124]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d064      	beq.n	800837c <HAL_RCC_OscConfig+0x2f0>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d160      	bne.n	800837c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e2c4      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c6:	d106      	bne.n	80082d6 <HAL_RCC_OscConfig+0x24a>
 80082c8:	4b16      	ldr	r3, [pc, #88]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a15      	ldr	r2, [pc, #84]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	e01d      	b.n	8008312 <HAL_RCC_OscConfig+0x286>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082de:	d10c      	bne.n	80082fa <HAL_RCC_OscConfig+0x26e>
 80082e0:	4b10      	ldr	r3, [pc, #64]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a0f      	ldr	r2, [pc, #60]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0c      	ldr	r2, [pc, #48]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e00b      	b.n	8008312 <HAL_RCC_OscConfig+0x286>
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a09      	ldr	r2, [pc, #36]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	4b07      	ldr	r3, [pc, #28]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a06      	ldr	r2, [pc, #24]	; (8008324 <HAL_RCC_OscConfig+0x298>)
 800830c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008310:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01c      	beq.n	8008354 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831a:	f7fe f941 	bl	80065a0 <HAL_GetTick>
 800831e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008320:	e011      	b.n	8008346 <HAL_RCC_OscConfig+0x2ba>
 8008322:	bf00      	nop
 8008324:	40021000 	.word	0x40021000
 8008328:	0801a870 	.word	0x0801a870
 800832c:	2000000c 	.word	0x2000000c
 8008330:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008334:	f7fe f934 	bl	80065a0 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b64      	cmp	r3, #100	; 0x64
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e280      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008346:	4baf      	ldr	r3, [pc, #700]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0f0      	beq.n	8008334 <HAL_RCC_OscConfig+0x2a8>
 8008352:	e014      	b.n	800837e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fe f924 	bl	80065a0 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800835c:	f7fe f920 	bl	80065a0 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b64      	cmp	r3, #100	; 0x64
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e26c      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800836e:	4ba5      	ldr	r3, [pc, #660]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f0      	bne.n	800835c <HAL_RCC_OscConfig+0x2d0>
 800837a:	e000      	b.n	800837e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800837c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d060      	beq.n	800844c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d005      	beq.n	800839c <HAL_RCC_OscConfig+0x310>
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	2b0c      	cmp	r3, #12
 8008394:	d119      	bne.n	80083ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d116      	bne.n	80083ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800839c:	4b99      	ldr	r3, [pc, #612]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_RCC_OscConfig+0x328>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e249      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b4:	4b93      	ldr	r3, [pc, #588]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	061b      	lsls	r3, r3, #24
 80083c2:	4990      	ldr	r1, [pc, #576]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083c8:	e040      	b.n	800844c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d023      	beq.n	800841a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083d2:	4b8c      	ldr	r3, [pc, #560]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a8b      	ldr	r2, [pc, #556]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80083d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083de:	f7fe f8df 	bl	80065a0 <HAL_GetTick>
 80083e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083e4:	e008      	b.n	80083f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083e6:	f7fe f8db 	bl	80065a0 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e227      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083f8:	4b82      	ldr	r3, [pc, #520]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0f0      	beq.n	80083e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008404:	4b7f      	ldr	r3, [pc, #508]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	061b      	lsls	r3, r3, #24
 8008412:	497c      	ldr	r1, [pc, #496]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008414:	4313      	orrs	r3, r2
 8008416:	604b      	str	r3, [r1, #4]
 8008418:	e018      	b.n	800844c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800841a:	4b7a      	ldr	r3, [pc, #488]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a79      	ldr	r2, [pc, #484]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008424:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008426:	f7fe f8bb 	bl	80065a0 <HAL_GetTick>
 800842a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800842c:	e008      	b.n	8008440 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800842e:	f7fe f8b7 	bl	80065a0 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d901      	bls.n	8008440 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e203      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008440:	4b70      	ldr	r3, [pc, #448]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1f0      	bne.n	800842e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0308 	and.w	r3, r3, #8
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03c      	beq.n	80084d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01c      	beq.n	800849a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008460:	4b68      	ldr	r3, [pc, #416]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008466:	4a67      	ldr	r2, [pc, #412]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fe f896 	bl	80065a0 <HAL_GetTick>
 8008474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008476:	e008      	b.n	800848a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008478:	f7fe f892 	bl	80065a0 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b02      	cmp	r3, #2
 8008484:	d901      	bls.n	800848a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e1de      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800848a:	4b5e      	ldr	r3, [pc, #376]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800848c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0ef      	beq.n	8008478 <HAL_RCC_OscConfig+0x3ec>
 8008498:	e01b      	b.n	80084d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800849a:	4b5a      	ldr	r3, [pc, #360]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800849c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084a0:	4a58      	ldr	r2, [pc, #352]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084aa:	f7fe f879 	bl	80065a0 <HAL_GetTick>
 80084ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b2:	f7fe f875 	bl	80065a0 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e1c1      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084c4:	4b4f      	ldr	r3, [pc, #316]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80084c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1ef      	bne.n	80084b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80a6 	beq.w	800862c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084e0:	2300      	movs	r3, #0
 80084e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80084e4:	4b47      	ldr	r3, [pc, #284]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10d      	bne.n	800850c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084f0:	4b44      	ldr	r3, [pc, #272]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	4a43      	ldr	r2, [pc, #268]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80084f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fa:	6593      	str	r3, [r2, #88]	; 0x58
 80084fc:	4b41      	ldr	r3, [pc, #260]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80084fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008504:	60bb      	str	r3, [r7, #8]
 8008506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008508:	2301      	movs	r3, #1
 800850a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800850c:	4b3e      	ldr	r3, [pc, #248]	; (8008608 <HAL_RCC_OscConfig+0x57c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d118      	bne.n	800854a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008518:	4b3b      	ldr	r3, [pc, #236]	; (8008608 <HAL_RCC_OscConfig+0x57c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a3a      	ldr	r2, [pc, #232]	; (8008608 <HAL_RCC_OscConfig+0x57c>)
 800851e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008522:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008524:	f7fe f83c 	bl	80065a0 <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800852c:	f7fe f838 	bl	80065a0 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e184      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800853e:	4b32      	ldr	r3, [pc, #200]	; (8008608 <HAL_RCC_OscConfig+0x57c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d108      	bne.n	8008564 <HAL_RCC_OscConfig+0x4d8>
 8008552:	4b2c      	ldr	r3, [pc, #176]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008558:	4a2a      	ldr	r2, [pc, #168]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008562:	e024      	b.n	80085ae <HAL_RCC_OscConfig+0x522>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2b05      	cmp	r3, #5
 800856a:	d110      	bne.n	800858e <HAL_RCC_OscConfig+0x502>
 800856c:	4b25      	ldr	r3, [pc, #148]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	4a24      	ldr	r2, [pc, #144]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008574:	f043 0304 	orr.w	r3, r3, #4
 8008578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800857c:	4b21      	ldr	r3, [pc, #132]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008582:	4a20      	ldr	r2, [pc, #128]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008584:	f043 0301 	orr.w	r3, r3, #1
 8008588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800858c:	e00f      	b.n	80085ae <HAL_RCC_OscConfig+0x522>
 800858e:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008594:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800859e:	4b19      	ldr	r3, [pc, #100]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80085a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a4:	4a17      	ldr	r2, [pc, #92]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80085a6:	f023 0304 	bic.w	r3, r3, #4
 80085aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d016      	beq.n	80085e4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b6:	f7fd fff3 	bl	80065a0 <HAL_GetTick>
 80085ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085bc:	e00a      	b.n	80085d4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085be:	f7fd ffef 	bl	80065a0 <HAL_GetTick>
 80085c2:	4602      	mov	r2, r0
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e139      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <HAL_RCC_OscConfig+0x578>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0ed      	beq.n	80085be <HAL_RCC_OscConfig+0x532>
 80085e2:	e01a      	b.n	800861a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085e4:	f7fd ffdc 	bl	80065a0 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085ea:	e00f      	b.n	800860c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ec:	f7fd ffd8 	bl	80065a0 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d906      	bls.n	800860c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e122      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
 8008602:	bf00      	nop
 8008604:	40021000 	.word	0x40021000
 8008608:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800860c:	4b90      	ldr	r3, [pc, #576]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 800860e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e8      	bne.n	80085ec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800861a:	7ffb      	ldrb	r3, [r7, #31]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d105      	bne.n	800862c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008620:	4b8b      	ldr	r3, [pc, #556]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008624:	4a8a      	ldr	r2, [pc, #552]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8108 	beq.w	8008846 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	2b02      	cmp	r3, #2
 800863c:	f040 80d0 	bne.w	80087e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008640:	4b83      	ldr	r3, [pc, #524]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f003 0203 	and.w	r2, r3, #3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	429a      	cmp	r2, r3
 8008652:	d130      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	3b01      	subs	r3, #1
 8008660:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008662:	429a      	cmp	r2, r3
 8008664:	d127      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008670:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008672:	429a      	cmp	r2, r3
 8008674:	d11f      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008680:	2a07      	cmp	r2, #7
 8008682:	bf14      	ite	ne
 8008684:	2201      	movne	r2, #1
 8008686:	2200      	moveq	r2, #0
 8008688:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800868a:	4293      	cmp	r3, r2
 800868c:	d113      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	3b01      	subs	r3, #1
 800869c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800869e:	429a      	cmp	r2, r3
 80086a0:	d109      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ac:	085b      	lsrs	r3, r3, #1
 80086ae:	3b01      	subs	r3, #1
 80086b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d06e      	beq.n	8008794 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b0c      	cmp	r3, #12
 80086ba:	d069      	beq.n	8008790 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80086bc:	4b64      	ldr	r3, [pc, #400]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80086c8:	4b61      	ldr	r3, [pc, #388]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0b7      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80086d8:	4b5d      	ldr	r3, [pc, #372]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a5c      	ldr	r2, [pc, #368]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80086de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80086e4:	f7fd ff5c 	bl	80065a0 <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ec:	f7fd ff58 	bl	80065a0 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e0a4      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086fe:	4b54      	ldr	r3, [pc, #336]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800870a:	4b51      	ldr	r3, [pc, #324]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	4b51      	ldr	r3, [pc, #324]	; (8008854 <HAL_RCC_OscConfig+0x7c8>)
 8008710:	4013      	ands	r3, r2
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800871a:	3a01      	subs	r2, #1
 800871c:	0112      	lsls	r2, r2, #4
 800871e:	4311      	orrs	r1, r2
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008724:	0212      	lsls	r2, r2, #8
 8008726:	4311      	orrs	r1, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800872c:	0852      	lsrs	r2, r2, #1
 800872e:	3a01      	subs	r2, #1
 8008730:	0552      	lsls	r2, r2, #21
 8008732:	4311      	orrs	r1, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008738:	0852      	lsrs	r2, r2, #1
 800873a:	3a01      	subs	r2, #1
 800873c:	0652      	lsls	r2, r2, #25
 800873e:	4311      	orrs	r1, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008744:	0912      	lsrs	r2, r2, #4
 8008746:	0452      	lsls	r2, r2, #17
 8008748:	430a      	orrs	r2, r1
 800874a:	4941      	ldr	r1, [pc, #260]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 800874c:	4313      	orrs	r3, r2
 800874e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008750:	4b3f      	ldr	r3, [pc, #252]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a3e      	ldr	r2, [pc, #248]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800875a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800875c:	4b3c      	ldr	r3, [pc, #240]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	4a3b      	ldr	r2, [pc, #236]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008768:	f7fd ff1a 	bl	80065a0 <HAL_GetTick>
 800876c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800876e:	e008      	b.n	8008782 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008770:	f7fd ff16 	bl	80065a0 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e062      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008782:	4b33      	ldr	r3, [pc, #204]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0f0      	beq.n	8008770 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800878e:	e05a      	b.n	8008846 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e059      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008794:	4b2e      	ldr	r3, [pc, #184]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d152      	bne.n	8008846 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a2a      	ldr	r2, [pc, #168]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087ac:	4b28      	ldr	r3, [pc, #160]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	4a27      	ldr	r2, [pc, #156]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087b8:	f7fd fef2 	bl	80065a0 <HAL_GetTick>
 80087bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087c0:	f7fd feee 	bl	80065a0 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e03a      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087d2:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f0      	beq.n	80087c0 <HAL_RCC_OscConfig+0x734>
 80087de:	e032      	b.n	8008846 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b0c      	cmp	r3, #12
 80087e4:	d02d      	beq.n	8008842 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e6:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a19      	ldr	r2, [pc, #100]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80087f2:	4b17      	ldr	r3, [pc, #92]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80087fe:	4b14      	ldr	r3, [pc, #80]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	4a13      	ldr	r2, [pc, #76]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800880a:	4b11      	ldr	r3, [pc, #68]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	4a10      	ldr	r2, [pc, #64]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008810:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008818:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800881a:	f7fd fec1 	bl	80065a0 <HAL_GetTick>
 800881e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008822:	f7fd febd 	bl	80065a0 <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e009      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <HAL_RCC_OscConfig+0x7c4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d1f0      	bne.n	8008822 <HAL_RCC_OscConfig+0x796>
 8008840:	e001      	b.n	8008846 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40021000 	.word	0x40021000
 8008854:	f99d808c 	.word	0xf99d808c

08008858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0c8      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800886c:	4b66      	ldr	r3, [pc, #408]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d910      	bls.n	800889c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887a:	4b63      	ldr	r3, [pc, #396]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f023 0207 	bic.w	r2, r3, #7
 8008882:	4961      	ldr	r1, [pc, #388]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	4313      	orrs	r3, r2
 8008888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800888a:	4b5f      	ldr	r3, [pc, #380]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d001      	beq.n	800889c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e0b0      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 0301 	and.w	r3, r3, #1
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d04c      	beq.n	8008942 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d107      	bne.n	80088c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088b0:	4b56      	ldr	r3, [pc, #344]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d121      	bne.n	8008900 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e09e      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d107      	bne.n	80088d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088c8:	4b50      	ldr	r3, [pc, #320]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d115      	bne.n	8008900 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e092      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d107      	bne.n	80088f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80088e0:	4b4a      	ldr	r3, [pc, #296]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e086      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088f0:	4b46      	ldr	r3, [pc, #280]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e07e      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008900:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f023 0203 	bic.w	r2, r3, #3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	493f      	ldr	r1, [pc, #252]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 800890e:	4313      	orrs	r3, r2
 8008910:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008912:	f7fd fe45 	bl	80065a0 <HAL_GetTick>
 8008916:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008918:	e00a      	b.n	8008930 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800891a:	f7fd fe41 	bl	80065a0 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	4293      	cmp	r3, r2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e066      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008930:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 020c 	and.w	r2, r3, #12
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	429a      	cmp	r2, r3
 8008940:	d1eb      	bne.n	800891a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800894e:	4b2f      	ldr	r3, [pc, #188]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	492c      	ldr	r1, [pc, #176]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 800895c:	4313      	orrs	r3, r2
 800895e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008960:	4b29      	ldr	r3, [pc, #164]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0307 	and.w	r3, r3, #7
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d210      	bcs.n	8008990 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800896e:	4b26      	ldr	r3, [pc, #152]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f023 0207 	bic.w	r2, r3, #7
 8008976:	4924      	ldr	r1, [pc, #144]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	4313      	orrs	r3, r2
 800897c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800897e:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <HAL_RCC_ClockConfig+0x1b0>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0307 	and.w	r3, r3, #7
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d001      	beq.n	8008990 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e036      	b.n	80089fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800899c:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	4918      	ldr	r1, [pc, #96]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 0308 	and.w	r3, r3, #8
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d009      	beq.n	80089ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	4910      	ldr	r1, [pc, #64]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80089ce:	f000 f825 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 80089d2:	4602      	mov	r2, r0
 80089d4:	4b0d      	ldr	r3, [pc, #52]	; (8008a0c <HAL_RCC_ClockConfig+0x1b4>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	091b      	lsrs	r3, r3, #4
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	490c      	ldr	r1, [pc, #48]	; (8008a10 <HAL_RCC_ClockConfig+0x1b8>)
 80089e0:	5ccb      	ldrb	r3, [r1, r3]
 80089e2:	f003 031f 	and.w	r3, r3, #31
 80089e6:	fa22 f303 	lsr.w	r3, r2, r3
 80089ea:	4a0a      	ldr	r2, [pc, #40]	; (8008a14 <HAL_RCC_ClockConfig+0x1bc>)
 80089ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <HAL_RCC_ClockConfig+0x1c0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd fd84 	bl	8006500 <HAL_InitTick>
 80089f8:	4603      	mov	r3, r0
 80089fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40022000 	.word	0x40022000
 8008a0c:	40021000 	.word	0x40021000
 8008a10:	0801a870 	.word	0x0801a870
 8008a14:	2000000c 	.word	0x2000000c
 8008a18:	200000e8 	.word	0x200000e8

08008a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	2300      	movs	r3, #0
 8008a28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a2a:	4b3e      	ldr	r3, [pc, #248]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	f003 030c 	and.w	r3, r3, #12
 8008a32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a34:	4b3b      	ldr	r3, [pc, #236]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <HAL_RCC_GetSysClockFreq+0x34>
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	2b0c      	cmp	r3, #12
 8008a48:	d121      	bne.n	8008a8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d11e      	bne.n	8008a8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008a50:	4b34      	ldr	r3, [pc, #208]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008a5c:	4b31      	ldr	r3, [pc, #196]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	61fb      	str	r3, [r7, #28]
 8008a6a:	e005      	b.n	8008a78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008a6c:	4b2d      	ldr	r3, [pc, #180]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	091b      	lsrs	r3, r3, #4
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008a78:	4a2b      	ldr	r2, [pc, #172]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10d      	bne.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008a8c:	e00a      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d102      	bne.n	8008a9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008a94:	4b25      	ldr	r3, [pc, #148]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8008a96:	61bb      	str	r3, [r7, #24]
 8008a98:	e004      	b.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d101      	bne.n	8008aa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008aa0:	4b23      	ldr	r3, [pc, #140]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8008aa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b0c      	cmp	r3, #12
 8008aa8:	d134      	bne.n	8008b14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RCC_GetSysClockFreq+0xa6>
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d003      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0xac>
 8008ac0:	e005      	b.n	8008ace <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008ac2:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x110>)
 8008ac4:	617b      	str	r3, [r7, #20]
      break;
 8008ac6:	e005      	b.n	8008ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008ac8:	4b19      	ldr	r3, [pc, #100]	; (8008b30 <HAL_RCC_GetSysClockFreq+0x114>)
 8008aca:	617b      	str	r3, [r7, #20]
      break;
 8008acc:	e002      	b.n	8008ad4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	617b      	str	r3, [r7, #20]
      break;
 8008ad2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ad4:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	3301      	adds	r3, #1
 8008ae0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008ae2:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	fb02 f203 	mul.w	r2, r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008afa:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x108>)
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	0e5b      	lsrs	r3, r3, #25
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	3301      	adds	r3, #1
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008b14:	69bb      	ldr	r3, [r7, #24]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3724      	adds	r7, #36	; 0x24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40021000 	.word	0x40021000
 8008b28:	0801a888 	.word	0x0801a888
 8008b2c:	00f42400 	.word	0x00f42400
 8008b30:	007a1200 	.word	0x007a1200

08008b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b38:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	2000000c 	.word	0x2000000c

08008b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008b50:	f7ff fff0 	bl	8008b34 <HAL_RCC_GetHCLKFreq>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	4904      	ldr	r1, [pc, #16]	; (8008b74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b62:	5ccb      	ldrb	r3, [r1, r3]
 8008b64:	f003 031f 	and.w	r3, r3, #31
 8008b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40021000 	.word	0x40021000
 8008b74:	0801a880 	.word	0x0801a880

08008b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008b7c:	f7ff ffda 	bl	8008b34 <HAL_RCC_GetHCLKFreq>
 8008b80:	4602      	mov	r2, r0
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	0adb      	lsrs	r3, r3, #11
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	4904      	ldr	r1, [pc, #16]	; (8008ba0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008b8e:	5ccb      	ldrb	r3, [r1, r3]
 8008b90:	f003 031f 	and.w	r3, r3, #31
 8008b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40021000 	.word	0x40021000
 8008ba0:	0801a880 	.word	0x0801a880

08008ba4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008bac:	2300      	movs	r3, #0
 8008bae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008bb0:	4b2a      	ldr	r3, [pc, #168]	; (8008c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008bbc:	f7ff fa02 	bl	8007fc4 <HAL_PWREx_GetVoltageRange>
 8008bc0:	6178      	str	r0, [r7, #20]
 8008bc2:	e014      	b.n	8008bee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	4a24      	ldr	r2, [pc, #144]	; (8008c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bce:	6593      	str	r3, [r2, #88]	; 0x58
 8008bd0:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008bdc:	f7ff f9f2 	bl	8007fc4 <HAL_PWREx_GetVoltageRange>
 8008be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008be2:	4b1e      	ldr	r3, [pc, #120]	; (8008c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	4a1d      	ldr	r2, [pc, #116]	; (8008c5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bf4:	d10b      	bne.n	8008c0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b80      	cmp	r3, #128	; 0x80
 8008bfa:	d919      	bls.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2ba0      	cmp	r3, #160	; 0xa0
 8008c00:	d902      	bls.n	8008c08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c02:	2302      	movs	r3, #2
 8008c04:	613b      	str	r3, [r7, #16]
 8008c06:	e013      	b.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c08:	2301      	movs	r3, #1
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	e010      	b.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b80      	cmp	r3, #128	; 0x80
 8008c12:	d902      	bls.n	8008c1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008c14:	2303      	movs	r3, #3
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	e00a      	b.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b80      	cmp	r3, #128	; 0x80
 8008c1e:	d102      	bne.n	8008c26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008c20:	2302      	movs	r3, #2
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	e004      	b.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b70      	cmp	r3, #112	; 0x70
 8008c2a:	d101      	bne.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f023 0207 	bic.w	r2, r3, #7
 8008c38:	4909      	ldr	r1, [pc, #36]	; (8008c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0307 	and.w	r3, r3, #7
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d001      	beq.n	8008c52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e000      	b.n	8008c54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40021000 	.word	0x40021000
 8008c60:	40022000 	.word	0x40022000

08008c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c70:	2300      	movs	r3, #0
 8008c72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d041      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c88:	d02a      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008c8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008c8e:	d824      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c94:	d008      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008c96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c9a:	d81e      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ca4:	d010      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ca6:	e018      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ca8:	4b86      	ldr	r3, [pc, #536]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4a85      	ldr	r2, [pc, #532]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cb4:	e015      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	2100      	movs	r1, #0
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fabb 	bl	8009238 <RCCEx_PLLSAI1_Config>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cc6:	e00c      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3320      	adds	r3, #32
 8008ccc:	2100      	movs	r1, #0
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fba6 	bl	8009420 <RCCEx_PLLSAI2_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008cd8:	e003      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8008cde:	e000      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ce2:	7cfb      	ldrb	r3, [r7, #19]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10b      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ce8:	4b76      	ldr	r3, [pc, #472]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cf6:	4973      	ldr	r1, [pc, #460]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008cfe:	e001      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d00:	7cfb      	ldrb	r3, [r7, #19]
 8008d02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d041      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d18:	d02a      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008d1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d1e:	d824      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d24:	d008      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d2a:	d81e      	bhi.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d34:	d010      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008d36:	e018      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008d38:	4b62      	ldr	r3, [pc, #392]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4a61      	ldr	r2, [pc, #388]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d44:	e015      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 fa73 	bl	8009238 <RCCEx_PLLSAI1_Config>
 8008d52:	4603      	mov	r3, r0
 8008d54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d56:	e00c      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3320      	adds	r3, #32
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fb5e 	bl	8009420 <RCCEx_PLLSAI2_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008d68:	e003      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	74fb      	strb	r3, [r7, #19]
      break;
 8008d6e:	e000      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d72:	7cfb      	ldrb	r3, [r7, #19]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10b      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008d78:	4b52      	ldr	r3, [pc, #328]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d86:	494f      	ldr	r1, [pc, #316]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008d8e:	e001      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 80a0 	beq.w	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008da2:	2300      	movs	r3, #0
 8008da4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008da6:	4b47      	ldr	r3, [pc, #284]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008db2:	2301      	movs	r3, #1
 8008db4:	e000      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008db6:	2300      	movs	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00d      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dbc:	4b41      	ldr	r3, [pc, #260]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc0:	4a40      	ldr	r2, [pc, #256]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8008dc8:	4b3e      	ldr	r3, [pc, #248]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dd8:	4b3b      	ldr	r3, [pc, #236]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a3a      	ldr	r2, [pc, #232]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008de2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008de4:	f7fd fbdc 	bl	80065a0 <HAL_GetTick>
 8008de8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008dea:	e009      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dec:	f7fd fbd8 	bl	80065a0 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d902      	bls.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	74fb      	strb	r3, [r7, #19]
        break;
 8008dfe:	e005      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008e00:	4b31      	ldr	r3, [pc, #196]	; (8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0ef      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008e0c:	7cfb      	ldrb	r3, [r7, #19]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d15c      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e12:	4b2c      	ldr	r3, [pc, #176]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01f      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d019      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e30:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e3c:	4b21      	ldr	r3, [pc, #132]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e42:	4a20      	ldr	r2, [pc, #128]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e4c:	4b1d      	ldr	r3, [pc, #116]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e52:	4a1c      	ldr	r2, [pc, #112]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e5c:	4a19      	ldr	r2, [pc, #100]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6e:	f7fd fb97 	bl	80065a0 <HAL_GetTick>
 8008e72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e74:	e00b      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e76:	f7fd fb93 	bl	80065a0 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d902      	bls.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	74fb      	strb	r3, [r7, #19]
            break;
 8008e8c:	e006      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e8e:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0ec      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008e9c:	7cfb      	ldrb	r3, [r7, #19]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10c      	bne.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ea2:	4b08      	ldr	r3, [pc, #32]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb2:	4904      	ldr	r1, [pc, #16]	; (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008eba:	e009      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ebc:	7cfb      	ldrb	r3, [r7, #19]
 8008ebe:	74bb      	strb	r3, [r7, #18]
 8008ec0:	e006      	b.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008ec2:	bf00      	nop
 8008ec4:	40021000 	.word	0x40021000
 8008ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	7cfb      	ldrb	r3, [r7, #19]
 8008ece:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ed0:	7c7b      	ldrb	r3, [r7, #17]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d105      	bne.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ed6:	4b9e      	ldr	r3, [pc, #632]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eda:	4a9d      	ldr	r2, [pc, #628]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008eee:	4b98      	ldr	r3, [pc, #608]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef4:	f023 0203 	bic.w	r2, r3, #3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	4994      	ldr	r1, [pc, #592]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f10:	4b8f      	ldr	r3, [pc, #572]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f16:	f023 020c 	bic.w	r2, r3, #12
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f1e:	498c      	ldr	r1, [pc, #560]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f32:	4b87      	ldr	r3, [pc, #540]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	4983      	ldr	r1, [pc, #524]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0308 	and.w	r3, r3, #8
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f54:	4b7e      	ldr	r3, [pc, #504]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f62:	497b      	ldr	r1, [pc, #492]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0310 	and.w	r3, r3, #16
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f76:	4b76      	ldr	r3, [pc, #472]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f84:	4972      	ldr	r1, [pc, #456]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f98:	4b6d      	ldr	r3, [pc, #436]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa6:	496a      	ldr	r1, [pc, #424]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fba:	4b65      	ldr	r3, [pc, #404]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc8:	4961      	ldr	r1, [pc, #388]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008fdc:	4b5c      	ldr	r3, [pc, #368]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fea:	4959      	ldr	r1, [pc, #356]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ffe:	4b54      	ldr	r3, [pc, #336]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900c:	4950      	ldr	r1, [pc, #320]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009020:	4b4b      	ldr	r3, [pc, #300]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009026:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902e:	4948      	ldr	r1, [pc, #288]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009030:	4313      	orrs	r3, r2
 8009032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009042:	4b43      	ldr	r3, [pc, #268]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009050:	493f      	ldr	r1, [pc, #252]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d028      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009064:	4b3a      	ldr	r3, [pc, #232]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800906a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009072:	4937      	ldr	r1, [pc, #220]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009074:	4313      	orrs	r3, r2
 8009076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009082:	d106      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009084:	4b32      	ldr	r3, [pc, #200]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	4a31      	ldr	r2, [pc, #196]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800908a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800908e:	60d3      	str	r3, [r2, #12]
 8009090:	e011      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800909a:	d10c      	bne.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3304      	adds	r3, #4
 80090a0:	2101      	movs	r1, #1
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f8c8 	bl	8009238 <RCCEx_PLLSAI1_Config>
 80090a8:	4603      	mov	r3, r0
 80090aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80090ac:	7cfb      	ldrb	r3, [r7, #19]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80090b2:	7cfb      	ldrb	r3, [r7, #19]
 80090b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d028      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80090c2:	4b23      	ldr	r3, [pc, #140]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d0:	491f      	ldr	r1, [pc, #124]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e0:	d106      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090e2:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4a1a      	ldr	r2, [pc, #104]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ec:	60d3      	str	r3, [r2, #12]
 80090ee:	e011      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090f8:	d10c      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3304      	adds	r3, #4
 80090fe:	2101      	movs	r1, #1
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f899 	bl	8009238 <RCCEx_PLLSAI1_Config>
 8009106:	4603      	mov	r3, r0
 8009108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800910a:	7cfb      	ldrb	r3, [r7, #19]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d001      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009110:	7cfb      	ldrb	r3, [r7, #19]
 8009112:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d02b      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009120:	4b0b      	ldr	r3, [pc, #44]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800912e:	4908      	ldr	r1, [pc, #32]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009130:	4313      	orrs	r3, r2
 8009132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800913a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800913e:	d109      	bne.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009140:	4b03      	ldr	r3, [pc, #12]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	4a02      	ldr	r2, [pc, #8]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800914a:	60d3      	str	r3, [r2, #12]
 800914c:	e014      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800914e:	bf00      	nop
 8009150:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800915c:	d10c      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3304      	adds	r3, #4
 8009162:	2101      	movs	r1, #1
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f867 	bl	8009238 <RCCEx_PLLSAI1_Config>
 800916a:	4603      	mov	r3, r0
 800916c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800916e:	7cfb      	ldrb	r3, [r7, #19]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009174:	7cfb      	ldrb	r3, [r7, #19]
 8009176:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d02f      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009184:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009192:	4928      	ldr	r1, [pc, #160]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009194:	4313      	orrs	r3, r2
 8009196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800919e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091a2:	d10d      	bne.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	2102      	movs	r1, #2
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f844 	bl	8009238 <RCCEx_PLLSAI1_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091b4:	7cfb      	ldrb	r3, [r7, #19]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d014      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80091ba:	7cfb      	ldrb	r3, [r7, #19]
 80091bc:	74bb      	strb	r3, [r7, #18]
 80091be:	e011      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c8:	d10c      	bne.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3320      	adds	r3, #32
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f925 	bl	8009420 <RCCEx_PLLSAI2_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80091da:	7cfb      	ldrb	r3, [r7, #19]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80091e0:	7cfb      	ldrb	r3, [r7, #19]
 80091e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80091f0:	4b10      	ldr	r3, [pc, #64]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80091f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091fe:	490d      	ldr	r1, [pc, #52]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009200:	4313      	orrs	r3, r2
 8009202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00b      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009212:	4b08      	ldr	r3, [pc, #32]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009222:	4904      	ldr	r1, [pc, #16]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009224:	4313      	orrs	r3, r2
 8009226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800922a:	7cbb      	ldrb	r3, [r7, #18]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	40021000 	.word	0x40021000

08009238 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009246:	4b75      	ldr	r3, [pc, #468]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f003 0303 	and.w	r3, r3, #3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d018      	beq.n	8009284 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009252:	4b72      	ldr	r3, [pc, #456]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0203 	and.w	r2, r3, #3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d10d      	bne.n	800927e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
       ||
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800926a:	4b6c      	ldr	r3, [pc, #432]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	091b      	lsrs	r3, r3, #4
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
       ||
 800927a:	429a      	cmp	r2, r3
 800927c:	d047      	beq.n	800930e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	73fb      	strb	r3, [r7, #15]
 8009282:	e044      	b.n	800930e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d018      	beq.n	80092be <RCCEx_PLLSAI1_Config+0x86>
 800928c:	2b03      	cmp	r3, #3
 800928e:	d825      	bhi.n	80092dc <RCCEx_PLLSAI1_Config+0xa4>
 8009290:	2b01      	cmp	r3, #1
 8009292:	d002      	beq.n	800929a <RCCEx_PLLSAI1_Config+0x62>
 8009294:	2b02      	cmp	r3, #2
 8009296:	d009      	beq.n	80092ac <RCCEx_PLLSAI1_Config+0x74>
 8009298:	e020      	b.n	80092dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800929a:	4b60      	ldr	r3, [pc, #384]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d11d      	bne.n	80092e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092aa:	e01a      	b.n	80092e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80092ac:	4b5b      	ldr	r3, [pc, #364]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d116      	bne.n	80092e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092bc:	e013      	b.n	80092e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80092be:	4b57      	ldr	r3, [pc, #348]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10f      	bne.n	80092ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80092ca:	4b54      	ldr	r3, [pc, #336]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092da:	e006      	b.n	80092ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
      break;
 80092e0:	e004      	b.n	80092ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092e2:	bf00      	nop
 80092e4:	e002      	b.n	80092ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092e6:	bf00      	nop
 80092e8:	e000      	b.n	80092ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80092ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10d      	bne.n	800930e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80092f2:	4b4a      	ldr	r3, [pc, #296]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6819      	ldr	r1, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	3b01      	subs	r3, #1
 8009304:	011b      	lsls	r3, r3, #4
 8009306:	430b      	orrs	r3, r1
 8009308:	4944      	ldr	r1, [pc, #272]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800930a:	4313      	orrs	r3, r2
 800930c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d17d      	bne.n	8009410 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009314:	4b41      	ldr	r3, [pc, #260]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a40      	ldr	r2, [pc, #256]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800931a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800931e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009320:	f7fd f93e 	bl	80065a0 <HAL_GetTick>
 8009324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009326:	e009      	b.n	800933c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009328:	f7fd f93a 	bl	80065a0 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	2b02      	cmp	r3, #2
 8009334:	d902      	bls.n	800933c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	73fb      	strb	r3, [r7, #15]
        break;
 800933a:	e005      	b.n	8009348 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800933c:	4b37      	ldr	r3, [pc, #220]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ef      	bne.n	8009328 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d160      	bne.n	8009410 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d111      	bne.n	8009378 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009354:	4b31      	ldr	r3, [pc, #196]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800935c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6892      	ldr	r2, [r2, #8]
 8009364:	0211      	lsls	r1, r2, #8
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	68d2      	ldr	r2, [r2, #12]
 800936a:	0912      	lsrs	r2, r2, #4
 800936c:	0452      	lsls	r2, r2, #17
 800936e:	430a      	orrs	r2, r1
 8009370:	492a      	ldr	r1, [pc, #168]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009372:	4313      	orrs	r3, r2
 8009374:	610b      	str	r3, [r1, #16]
 8009376:	e027      	b.n	80093c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d112      	bne.n	80093a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800937e:	4b27      	ldr	r3, [pc, #156]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009386:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6892      	ldr	r2, [r2, #8]
 800938e:	0211      	lsls	r1, r2, #8
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6912      	ldr	r2, [r2, #16]
 8009394:	0852      	lsrs	r2, r2, #1
 8009396:	3a01      	subs	r2, #1
 8009398:	0552      	lsls	r2, r2, #21
 800939a:	430a      	orrs	r2, r1
 800939c:	491f      	ldr	r1, [pc, #124]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	610b      	str	r3, [r1, #16]
 80093a2:	e011      	b.n	80093c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80093a4:	4b1d      	ldr	r3, [pc, #116]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80093ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6892      	ldr	r2, [r2, #8]
 80093b4:	0211      	lsls	r1, r2, #8
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6952      	ldr	r2, [r2, #20]
 80093ba:	0852      	lsrs	r2, r2, #1
 80093bc:	3a01      	subs	r2, #1
 80093be:	0652      	lsls	r2, r2, #25
 80093c0:	430a      	orrs	r2, r1
 80093c2:	4916      	ldr	r1, [pc, #88]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80093c8:	4b14      	ldr	r3, [pc, #80]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a13      	ldr	r2, [pc, #76]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093d4:	f7fd f8e4 	bl	80065a0 <HAL_GetTick>
 80093d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093da:	e009      	b.n	80093f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80093dc:	f7fd f8e0 	bl	80065a0 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d902      	bls.n	80093f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	73fb      	strb	r3, [r7, #15]
          break;
 80093ee:	e005      	b.n	80093fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80093f0:	4b0a      	ldr	r3, [pc, #40]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0ef      	beq.n	80093dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009402:	4b06      	ldr	r3, [pc, #24]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	4904      	ldr	r1, [pc, #16]	; (800941c <RCCEx_PLLSAI1_Config+0x1e4>)
 800940c:	4313      	orrs	r3, r2
 800940e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40021000 	.word	0x40021000

08009420 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800942e:	4b6a      	ldr	r3, [pc, #424]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f003 0303 	and.w	r3, r3, #3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d018      	beq.n	800946c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800943a:	4b67      	ldr	r3, [pc, #412]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f003 0203 	and.w	r2, r3, #3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d10d      	bne.n	8009466 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
       ||
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009452:	4b61      	ldr	r3, [pc, #388]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	091b      	lsrs	r3, r3, #4
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
       ||
 8009462:	429a      	cmp	r2, r3
 8009464:	d047      	beq.n	80094f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	73fb      	strb	r3, [r7, #15]
 800946a:	e044      	b.n	80094f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b03      	cmp	r3, #3
 8009472:	d018      	beq.n	80094a6 <RCCEx_PLLSAI2_Config+0x86>
 8009474:	2b03      	cmp	r3, #3
 8009476:	d825      	bhi.n	80094c4 <RCCEx_PLLSAI2_Config+0xa4>
 8009478:	2b01      	cmp	r3, #1
 800947a:	d002      	beq.n	8009482 <RCCEx_PLLSAI2_Config+0x62>
 800947c:	2b02      	cmp	r3, #2
 800947e:	d009      	beq.n	8009494 <RCCEx_PLLSAI2_Config+0x74>
 8009480:	e020      	b.n	80094c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009482:	4b55      	ldr	r3, [pc, #340]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0302 	and.w	r3, r3, #2
 800948a:	2b00      	cmp	r3, #0
 800948c:	d11d      	bne.n	80094ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009492:	e01a      	b.n	80094ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009494:	4b50      	ldr	r3, [pc, #320]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800949c:	2b00      	cmp	r3, #0
 800949e:	d116      	bne.n	80094ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094a4:	e013      	b.n	80094ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094a6:	4b4c      	ldr	r3, [pc, #304]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10f      	bne.n	80094d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80094b2:	4b49      	ldr	r3, [pc, #292]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d109      	bne.n	80094d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094c2:	e006      	b.n	80094d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	73fb      	strb	r3, [r7, #15]
      break;
 80094c8:	e004      	b.n	80094d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80094ca:	bf00      	nop
 80094cc:	e002      	b.n	80094d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80094ce:	bf00      	nop
 80094d0:	e000      	b.n	80094d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80094d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80094da:	4b3f      	ldr	r3, [pc, #252]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6819      	ldr	r1, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	430b      	orrs	r3, r1
 80094f0:	4939      	ldr	r1, [pc, #228]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d167      	bne.n	80095cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80094fc:	4b36      	ldr	r3, [pc, #216]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a35      	ldr	r2, [pc, #212]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009508:	f7fd f84a 	bl	80065a0 <HAL_GetTick>
 800950c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800950e:	e009      	b.n	8009524 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009510:	f7fd f846 	bl	80065a0 <HAL_GetTick>
 8009514:	4602      	mov	r2, r0
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d902      	bls.n	8009524 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	73fb      	strb	r3, [r7, #15]
        break;
 8009522:	e005      	b.n	8009530 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009524:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1ef      	bne.n	8009510 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d14a      	bne.n	80095cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d111      	bne.n	8009560 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800953c:	4b26      	ldr	r3, [pc, #152]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6892      	ldr	r2, [r2, #8]
 800954c:	0211      	lsls	r1, r2, #8
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	68d2      	ldr	r2, [r2, #12]
 8009552:	0912      	lsrs	r2, r2, #4
 8009554:	0452      	lsls	r2, r2, #17
 8009556:	430a      	orrs	r2, r1
 8009558:	491f      	ldr	r1, [pc, #124]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800955a:	4313      	orrs	r3, r2
 800955c:	614b      	str	r3, [r1, #20]
 800955e:	e011      	b.n	8009584 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009560:	4b1d      	ldr	r3, [pc, #116]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009568:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	6892      	ldr	r2, [r2, #8]
 8009570:	0211      	lsls	r1, r2, #8
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	6912      	ldr	r2, [r2, #16]
 8009576:	0852      	lsrs	r2, r2, #1
 8009578:	3a01      	subs	r2, #1
 800957a:	0652      	lsls	r2, r2, #25
 800957c:	430a      	orrs	r2, r1
 800957e:	4916      	ldr	r1, [pc, #88]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009580:	4313      	orrs	r3, r2
 8009582:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009584:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800958a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800958e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009590:	f7fd f806 	bl	80065a0 <HAL_GetTick>
 8009594:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009596:	e009      	b.n	80095ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009598:	f7fd f802 	bl	80065a0 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d902      	bls.n	80095ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	73fb      	strb	r3, [r7, #15]
          break;
 80095aa:	e005      	b.n	80095b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80095ac:	4b0a      	ldr	r3, [pc, #40]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0ef      	beq.n	8009598 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d106      	bne.n	80095cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80095be:	4b06      	ldr	r3, [pc, #24]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	4904      	ldr	r1, [pc, #16]	; (80095d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	40021000 	.word	0x40021000

080095dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d06c      	beq.n	80096c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7f8 ff86 	bl	8002514 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	22ca      	movs	r2, #202	; 0xca
 8009616:	625a      	str	r2, [r3, #36]	; 0x24
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2253      	movs	r2, #83	; 0x53
 800961e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f9a0 	bl	8009966 <RTC_EnterInitMode>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800962a:	7bfb      	ldrb	r3, [r7, #15]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d14b      	bne.n	80096c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6812      	ldr	r2, [r2, #0]
 800963a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800963e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009642:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6899      	ldr	r1, [r3, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	431a      	orrs	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	68d2      	ldr	r2, [r2, #12]
 800966a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6919      	ldr	r1, [r3, #16]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	041a      	lsls	r2, r3, #16
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f9a3 	bl	80099cc <RTC_ExitInitMode>
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d11b      	bne.n	80096c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0203 	bic.w	r2, r2, #3
 800969e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69da      	ldr	r2, [r3, #28]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	431a      	orrs	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	22ff      	movs	r2, #255	; 0xff
 80096be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80096d2:	b590      	push	{r4, r7, lr}
 80096d4:	b087      	sub	sp, #28
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d101      	bne.n	80096ec <HAL_RTC_SetTime+0x1a>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e08b      	b.n	8009804 <HAL_RTC_SetTime+0x132>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	22ca      	movs	r2, #202	; 0xca
 8009702:	625a      	str	r2, [r3, #36]	; 0x24
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2253      	movs	r2, #83	; 0x53
 800970a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 f92a 	bl	8009966 <RTC_EnterInitMode>
 8009712:	4603      	mov	r3, r0
 8009714:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009716:	7cfb      	ldrb	r3, [r7, #19]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d163      	bne.n	80097e4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d126      	bne.n	8009770 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f984 	bl	8009a48 <RTC_ByteToBcd2>
 8009740:	4603      	mov	r3, r0
 8009742:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	785b      	ldrb	r3, [r3, #1]
 8009748:	4618      	mov	r0, r3
 800974a:	f000 f97d 	bl	8009a48 <RTC_ByteToBcd2>
 800974e:	4603      	mov	r3, r0
 8009750:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009752:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	789b      	ldrb	r3, [r3, #2]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 f975 	bl	8009a48 <RTC_ByteToBcd2>
 800975e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009760:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	78db      	ldrb	r3, [r3, #3]
 8009768:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800976a:	4313      	orrs	r3, r2
 800976c:	617b      	str	r3, [r7, #20]
 800976e:	e018      	b.n	80097a2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2200      	movs	r2, #0
 8009782:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	785b      	ldrb	r3, [r3, #1]
 800978e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009790:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009796:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	78db      	ldrb	r3, [r3, #3]
 800979c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80097ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80097b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6899      	ldr	r1, [r3, #8]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	68da      	ldr	r2, [r3, #12]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 f8f6 	bl	80099cc <RTC_ExitInitMode>
 80097e0:	4603      	mov	r3, r0
 80097e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	22ff      	movs	r2, #255	; 0xff
 80097ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80097ec:	7cfb      	ldrb	r3, [r7, #19]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d103      	bne.n	80097fa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009802:	7cfb      	ldrb	r3, [r7, #19]
}
 8009804:	4618      	mov	r0, r3
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	bd90      	pop	{r4, r7, pc}

0800980c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800980c:	b590      	push	{r4, r7, lr}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_RTC_SetDate+0x1a>
 8009822:	2302      	movs	r3, #2
 8009824:	e075      	b.n	8009912 <HAL_RTC_SetDate+0x106>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2202      	movs	r2, #2
 8009832:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10e      	bne.n	800985a <HAL_RTC_SetDate+0x4e>
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	785b      	ldrb	r3, [r3, #1]
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b00      	cmp	r3, #0
 8009846:	d008      	beq.n	800985a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	785b      	ldrb	r3, [r3, #1]
 800984c:	f023 0310 	bic.w	r3, r3, #16
 8009850:	b2db      	uxtb	r3, r3
 8009852:	330a      	adds	r3, #10
 8009854:	b2da      	uxtb	r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d11c      	bne.n	800989a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	78db      	ldrb	r3, [r3, #3]
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f8ef 	bl	8009a48 <RTC_ByteToBcd2>
 800986a:	4603      	mov	r3, r0
 800986c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f8e8 	bl	8009a48 <RTC_ByteToBcd2>
 8009878:	4603      	mov	r3, r0
 800987a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800987c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	789b      	ldrb	r3, [r3, #2]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f8e0 	bl	8009a48 <RTC_ByteToBcd2>
 8009888:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800988a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009894:	4313      	orrs	r3, r2
 8009896:	617b      	str	r3, [r7, #20]
 8009898:	e00e      	b.n	80098b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	78db      	ldrb	r3, [r3, #3]
 800989e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80098ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80098b4:	4313      	orrs	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	22ca      	movs	r2, #202	; 0xca
 80098be:	625a      	str	r2, [r3, #36]	; 0x24
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2253      	movs	r2, #83	; 0x53
 80098c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 f84c 	bl	8009966 <RTC_EnterInitMode>
 80098ce:	4603      	mov	r3, r0
 80098d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80098d2:	7cfb      	ldrb	r3, [r7, #19]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10c      	bne.n	80098f2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80098e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80098e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f86f 	bl	80099cc <RTC_ExitInitMode>
 80098ee:	4603      	mov	r3, r0
 80098f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	22ff      	movs	r2, #255	; 0xff
 80098f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80098fa:	7cfb      	ldrb	r3, [r7, #19]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d103      	bne.n	8009908 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009910:	7cfb      	ldrb	r3, [r7, #19]
}
 8009912:	4618      	mov	r0, r3
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	bd90      	pop	{r4, r7, pc}

0800991a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009930:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009932:	f7fc fe35 	bl	80065a0 <HAL_GetTick>
 8009936:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009938:	e009      	b.n	800994e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800993a:	f7fc fe31 	bl	80065a0 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009948:	d901      	bls.n	800994e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e007      	b.n	800995e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	f003 0320 	and.w	r3, r3, #32
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0ee      	beq.n	800993a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997c:	2b00      	cmp	r3, #0
 800997e:	d120      	bne.n	80099c2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800998a:	f7fc fe09 	bl	80065a0 <HAL_GetTick>
 800998e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009990:	e00d      	b.n	80099ae <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009992:	f7fc fe05 	bl	80065a0 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099a0:	d905      	bls.n	80099ae <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2203      	movs	r2, #3
 80099aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d102      	bne.n	80099c2 <RTC_EnterInitMode+0x5c>
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d1e7      	bne.n	8009992 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80099d8:	4b1a      	ldr	r3, [pc, #104]	; (8009a44 <RTC_ExitInitMode+0x78>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	4a19      	ldr	r2, [pc, #100]	; (8009a44 <RTC_ExitInitMode+0x78>)
 80099de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80099e4:	4b17      	ldr	r3, [pc, #92]	; (8009a44 <RTC_ExitInitMode+0x78>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10c      	bne.n	8009a0a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff ff92 	bl	800991a <HAL_RTC_WaitForSynchro>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d01e      	beq.n	8009a3a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2203      	movs	r2, #3
 8009a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	73fb      	strb	r3, [r7, #15]
 8009a08:	e017      	b.n	8009a3a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <RTC_ExitInitMode+0x78>)
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	4a0d      	ldr	r2, [pc, #52]	; (8009a44 <RTC_ExitInitMode+0x78>)
 8009a10:	f023 0320 	bic.w	r3, r3, #32
 8009a14:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff ff7f 	bl	800991a <HAL_RTC_WaitForSynchro>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d005      	beq.n	8009a2e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2203      	movs	r2, #3
 8009a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <RTC_ExitInitMode+0x78>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	4a04      	ldr	r2, [pc, #16]	; (8009a44 <RTC_ExitInitMode+0x78>)
 8009a34:	f043 0320 	orr.w	r3, r3, #32
 8009a38:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	40002800 	.word	0x40002800

08009a48 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009a5a:	e005      	b.n	8009a68 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009a62:	7afb      	ldrb	r3, [r7, #11]
 8009a64:	3b0a      	subs	r3, #10
 8009a66:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	2b09      	cmp	r3, #9
 8009a6c:	d8f6      	bhi.n	8009a5c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	011b      	lsls	r3, r3, #4
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	b2db      	uxtb	r3, r3
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3714      	adds	r7, #20
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e049      	b.n	8009b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7f9 f882 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f000 fae0 	bl	800a08c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d001      	beq.n	8009b50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	e047      	b.n	8009be0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2202      	movs	r2, #2
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a23      	ldr	r2, [pc, #140]	; (8009bec <HAL_TIM_Base_Start+0xb4>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d01d      	beq.n	8009b9e <HAL_TIM_Base_Start+0x66>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b6a:	d018      	beq.n	8009b9e <HAL_TIM_Base_Start+0x66>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1f      	ldr	r2, [pc, #124]	; (8009bf0 <HAL_TIM_Base_Start+0xb8>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d013      	beq.n	8009b9e <HAL_TIM_Base_Start+0x66>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a1e      	ldr	r2, [pc, #120]	; (8009bf4 <HAL_TIM_Base_Start+0xbc>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00e      	beq.n	8009b9e <HAL_TIM_Base_Start+0x66>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a1c      	ldr	r2, [pc, #112]	; (8009bf8 <HAL_TIM_Base_Start+0xc0>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d009      	beq.n	8009b9e <HAL_TIM_Base_Start+0x66>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <HAL_TIM_Base_Start+0xc4>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d004      	beq.n	8009b9e <HAL_TIM_Base_Start+0x66>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a19      	ldr	r2, [pc, #100]	; (8009c00 <HAL_TIM_Base_Start+0xc8>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d115      	bne.n	8009bca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	4b17      	ldr	r3, [pc, #92]	; (8009c04 <HAL_TIM_Base_Start+0xcc>)
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2b06      	cmp	r3, #6
 8009bae:	d015      	beq.n	8009bdc <HAL_TIM_Base_Start+0xa4>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb6:	d011      	beq.n	8009bdc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0201 	orr.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc8:	e008      	b.n	8009bdc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 0201 	orr.w	r2, r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	e000      	b.n	8009bde <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bdc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	40012c00 	.word	0x40012c00
 8009bf0:	40000400 	.word	0x40000400
 8009bf4:	40000800 	.word	0x40000800
 8009bf8:	40000c00 	.word	0x40000c00
 8009bfc:	40013400 	.word	0x40013400
 8009c00:	40014000 	.word	0x40014000
 8009c04:	00010007 	.word	0x00010007

08009c08 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6a1a      	ldr	r2, [r3, #32]
 8009c16:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10f      	bne.n	8009c40 <HAL_TIM_Base_Stop+0x38>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6a1a      	ldr	r2, [r3, #32]
 8009c26:	f240 4344 	movw	r3, #1092	; 0x444
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d107      	bne.n	8009c40 <HAL_TIM_Base_Stop+0x38>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0201 	bic.w	r2, r2, #1
 8009c3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d122      	bne.n	8009cb2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d11b      	bne.n	8009cb2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f06f 0202 	mvn.w	r2, #2
 8009c82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	f003 0303 	and.w	r3, r3, #3
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d003      	beq.n	8009ca0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9d8 	bl	800a04e <HAL_TIM_IC_CaptureCallback>
 8009c9e:	e005      	b.n	8009cac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f9ca 	bl	800a03a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f9db 	bl	800a062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d122      	bne.n	8009d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	f003 0304 	and.w	r3, r3, #4
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d11b      	bne.n	8009d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f06f 0204 	mvn.w	r2, #4
 8009cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f9ae 	bl	800a04e <HAL_TIM_IC_CaptureCallback>
 8009cf2:	e005      	b.n	8009d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f9a0 	bl	800a03a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f9b1 	bl	800a062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d122      	bne.n	8009d5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f003 0308 	and.w	r3, r3, #8
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	d11b      	bne.n	8009d5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f06f 0208 	mvn.w	r2, #8
 8009d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2204      	movs	r2, #4
 8009d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f984 	bl	800a04e <HAL_TIM_IC_CaptureCallback>
 8009d46:	e005      	b.n	8009d54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f976 	bl	800a03a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f987 	bl	800a062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b10      	cmp	r3, #16
 8009d66:	d122      	bne.n	8009dae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	2b10      	cmp	r3, #16
 8009d74:	d11b      	bne.n	8009dae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f06f 0210 	mvn.w	r2, #16
 8009d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2208      	movs	r2, #8
 8009d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	69db      	ldr	r3, [r3, #28]
 8009d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d003      	beq.n	8009d9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 f95a 	bl	800a04e <HAL_TIM_IC_CaptureCallback>
 8009d9a:	e005      	b.n	8009da8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f94c 	bl	800a03a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f95d 	bl	800a062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f003 0301 	and.w	r3, r3, #1
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d10e      	bne.n	8009dda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d107      	bne.n	8009dda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f06f 0201 	mvn.w	r2, #1
 8009dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f926 	bl	800a026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de4:	2b80      	cmp	r3, #128	; 0x80
 8009de6:	d10e      	bne.n	8009e06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df2:	2b80      	cmp	r3, #128	; 0x80
 8009df4:	d107      	bne.n	8009e06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fb09 	bl	800a418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e14:	d10e      	bne.n	8009e34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e20:	2b80      	cmp	r3, #128	; 0x80
 8009e22:	d107      	bne.n	8009e34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fafc 	bl	800a42c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3e:	2b40      	cmp	r3, #64	; 0x40
 8009e40:	d10e      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4c:	2b40      	cmp	r3, #64	; 0x40
 8009e4e:	d107      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f90b 	bl	800a076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	d10e      	bne.n	8009e8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	f003 0320 	and.w	r3, r3, #32
 8009e78:	2b20      	cmp	r3, #32
 8009e7a:	d107      	bne.n	8009e8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f06f 0220 	mvn.w	r2, #32
 8009e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fabc 	bl	800a404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8009eac:	2302      	movs	r3, #2
 8009eae:	e0b6      	b.n	800a01e <HAL_TIM_ConfigClockSource+0x18a>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ece:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eec:	d03e      	beq.n	8009f6c <HAL_TIM_ConfigClockSource+0xd8>
 8009eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef2:	f200 8087 	bhi.w	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efa:	f000 8086 	beq.w	800a00a <HAL_TIM_ConfigClockSource+0x176>
 8009efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f02:	d87f      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f04:	2b70      	cmp	r3, #112	; 0x70
 8009f06:	d01a      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0xaa>
 8009f08:	2b70      	cmp	r3, #112	; 0x70
 8009f0a:	d87b      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f0c:	2b60      	cmp	r3, #96	; 0x60
 8009f0e:	d050      	beq.n	8009fb2 <HAL_TIM_ConfigClockSource+0x11e>
 8009f10:	2b60      	cmp	r3, #96	; 0x60
 8009f12:	d877      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f14:	2b50      	cmp	r3, #80	; 0x50
 8009f16:	d03c      	beq.n	8009f92 <HAL_TIM_ConfigClockSource+0xfe>
 8009f18:	2b50      	cmp	r3, #80	; 0x50
 8009f1a:	d873      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d058      	beq.n	8009fd2 <HAL_TIM_ConfigClockSource+0x13e>
 8009f20:	2b40      	cmp	r3, #64	; 0x40
 8009f22:	d86f      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f24:	2b30      	cmp	r3, #48	; 0x30
 8009f26:	d064      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8009f28:	2b30      	cmp	r3, #48	; 0x30
 8009f2a:	d86b      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d060      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	d867      	bhi.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d05c      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8009f38:	2b10      	cmp	r3, #16
 8009f3a:	d05a      	beq.n	8009ff2 <HAL_TIM_ConfigClockSource+0x15e>
 8009f3c:	e062      	b.n	800a004 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	6899      	ldr	r1, [r3, #8]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f000 f9b1 	bl	800a2b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	609a      	str	r2, [r3, #8]
      break;
 8009f6a:	e04f      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	6899      	ldr	r1, [r3, #8]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f000 f99a 	bl	800a2b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f8e:	609a      	str	r2, [r3, #8]
      break;
 8009f90:	e03c      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	6859      	ldr	r1, [r3, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	f000 f90e 	bl	800a1c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2150      	movs	r1, #80	; 0x50
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f967 	bl	800a27e <TIM_ITRx_SetConfig>
      break;
 8009fb0:	e02c      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	6859      	ldr	r1, [r3, #4]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f000 f92d 	bl	800a21e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2160      	movs	r1, #96	; 0x60
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f957 	bl	800a27e <TIM_ITRx_SetConfig>
      break;
 8009fd0:	e01c      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	6859      	ldr	r1, [r3, #4]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f000 f8ee 	bl	800a1c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2140      	movs	r1, #64	; 0x40
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f947 	bl	800a27e <TIM_ITRx_SetConfig>
      break;
 8009ff0:	e00c      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f000 f93e 	bl	800a27e <TIM_ITRx_SetConfig>
      break;
 800a002:	e003      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
      break;
 800a008:	e000      	b.n	800a00c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a00a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a026:	b480      	push	{r7}
 800a028:	b083      	sub	sp, #12
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a02e:	bf00      	nop
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a042:	bf00      	nop
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
	...

0800a08c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a40      	ldr	r2, [pc, #256]	; (800a1a0 <TIM_Base_SetConfig+0x114>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d013      	beq.n	800a0cc <TIM_Base_SetConfig+0x40>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0aa:	d00f      	beq.n	800a0cc <TIM_Base_SetConfig+0x40>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a3d      	ldr	r2, [pc, #244]	; (800a1a4 <TIM_Base_SetConfig+0x118>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00b      	beq.n	800a0cc <TIM_Base_SetConfig+0x40>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a3c      	ldr	r2, [pc, #240]	; (800a1a8 <TIM_Base_SetConfig+0x11c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d007      	beq.n	800a0cc <TIM_Base_SetConfig+0x40>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a3b      	ldr	r2, [pc, #236]	; (800a1ac <TIM_Base_SetConfig+0x120>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d003      	beq.n	800a0cc <TIM_Base_SetConfig+0x40>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a3a      	ldr	r2, [pc, #232]	; (800a1b0 <TIM_Base_SetConfig+0x124>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d108      	bne.n	800a0de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a2f      	ldr	r2, [pc, #188]	; (800a1a0 <TIM_Base_SetConfig+0x114>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d01f      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ec:	d01b      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a2c      	ldr	r2, [pc, #176]	; (800a1a4 <TIM_Base_SetConfig+0x118>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d017      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a2b      	ldr	r2, [pc, #172]	; (800a1a8 <TIM_Base_SetConfig+0x11c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d013      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a2a      	ldr	r2, [pc, #168]	; (800a1ac <TIM_Base_SetConfig+0x120>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00f      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a29      	ldr	r2, [pc, #164]	; (800a1b0 <TIM_Base_SetConfig+0x124>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00b      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a28      	ldr	r2, [pc, #160]	; (800a1b4 <TIM_Base_SetConfig+0x128>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d007      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a27      	ldr	r2, [pc, #156]	; (800a1b8 <TIM_Base_SetConfig+0x12c>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d003      	beq.n	800a126 <TIM_Base_SetConfig+0x9a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a26      	ldr	r2, [pc, #152]	; (800a1bc <TIM_Base_SetConfig+0x130>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d108      	bne.n	800a138 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a10      	ldr	r2, [pc, #64]	; (800a1a0 <TIM_Base_SetConfig+0x114>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0xf8>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a12      	ldr	r2, [pc, #72]	; (800a1b0 <TIM_Base_SetConfig+0x124>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0xf8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <TIM_Base_SetConfig+0x128>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0xf8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a10      	ldr	r2, [pc, #64]	; (800a1b8 <TIM_Base_SetConfig+0x12c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0xf8>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a0f      	ldr	r2, [pc, #60]	; (800a1bc <TIM_Base_SetConfig+0x130>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d103      	bne.n	800a18c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	615a      	str	r2, [r3, #20]
}
 800a192:	bf00      	nop
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
 800a19e:	bf00      	nop
 800a1a0:	40012c00 	.word	0x40012c00
 800a1a4:	40000400 	.word	0x40000400
 800a1a8:	40000800 	.word	0x40000800
 800a1ac:	40000c00 	.word	0x40000c00
 800a1b0:	40013400 	.word	0x40013400
 800a1b4:	40014000 	.word	0x40014000
 800a1b8:	40014400 	.word	0x40014400
 800a1bc:	40014800 	.word	0x40014800

0800a1c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f023 0201 	bic.w	r2, r3, #1
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f023 030a 	bic.w	r3, r3, #10
 800a1fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4313      	orrs	r3, r2
 800a204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	693a      	ldr	r2, [r7, #16]
 800a20a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	621a      	str	r2, [r3, #32]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a21e:	b480      	push	{r7}
 800a220:	b087      	sub	sp, #28
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	f023 0210 	bic.w	r2, r3, #16
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	031b      	lsls	r3, r3, #12
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	4313      	orrs	r3, r2
 800a252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a25a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	011b      	lsls	r3, r3, #4
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	621a      	str	r2, [r3, #32]
}
 800a272:	bf00      	nop
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a27e:	b480      	push	{r7}
 800a280:	b085      	sub	sp, #20
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	f043 0307 	orr.w	r3, r3, #7
 800a2a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	609a      	str	r2, [r3, #8]
}
 800a2a8:	bf00      	nop
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	021a      	lsls	r2, r3, #8
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	431a      	orrs	r2, r3
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	609a      	str	r2, [r3, #8]
}
 800a2e8:	bf00      	nop
 800a2ea:	371c      	adds	r7, #28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a308:	2302      	movs	r3, #2
 800a30a:	e068      	b.n	800a3de <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a2e      	ldr	r2, [pc, #184]	; (800a3ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d004      	beq.n	800a340 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a2d      	ldr	r2, [pc, #180]	; (800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d108      	bne.n	800a352 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a346:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	68fa      	ldr	r2, [r7, #12]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a358:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4313      	orrs	r3, r2
 800a362:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a1e      	ldr	r2, [pc, #120]	; (800a3ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d01d      	beq.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37e:	d018      	beq.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1b      	ldr	r2, [pc, #108]	; (800a3f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d013      	beq.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1a      	ldr	r2, [pc, #104]	; (800a3f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d00e      	beq.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a18      	ldr	r2, [pc, #96]	; (800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d009      	beq.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a13      	ldr	r2, [pc, #76]	; (800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d004      	beq.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a14      	ldr	r2, [pc, #80]	; (800a400 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d10c      	bne.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	40012c00 	.word	0x40012c00
 800a3f0:	40013400 	.word	0x40013400
 800a3f4:	40000400 	.word	0x40000400
 800a3f8:	40000800 	.word	0x40000800
 800a3fc:	40000c00 	.word	0x40000c00
 800a400:	40014000 	.word	0x40014000

0800a404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e040      	b.n	800a4d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f83a 	bl	800a4dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2224      	movs	r2, #36	; 0x24
 800a46c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0201 	bic.w	r2, r2, #1
 800a47c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f94a 	bl	800a718 <UART_SetConfig>
 800a484:	4603      	mov	r3, r0
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e022      	b.n	800a4d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fbc8 	bl	800ac2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0201 	orr.w	r2, r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fc4f 	bl	800ad70 <UART_CheckIdleState>
 800a4d2:	4603      	mov	r3, r0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b08a      	sub	sp, #40	; 0x28
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	603b      	str	r3, [r7, #0]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a504:	2b20      	cmp	r3, #32
 800a506:	f040 8082 	bne.w	800a60e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <HAL_UART_Transmit+0x26>
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e07a      	b.n	800a610 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a520:	2b01      	cmp	r3, #1
 800a522:	d101      	bne.n	800a528 <HAL_UART_Transmit+0x38>
 800a524:	2302      	movs	r3, #2
 800a526:	e073      	b.n	800a610 <HAL_UART_Transmit+0x120>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2221      	movs	r2, #33	; 0x21
 800a53c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a53e:	f7fc f82f 	bl	80065a0 <HAL_GetTick>
 800a542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	88fa      	ldrh	r2, [r7, #6]
 800a548:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	88fa      	ldrh	r2, [r7, #6]
 800a550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a55c:	d108      	bne.n	800a570 <HAL_UART_Transmit+0x80>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d104      	bne.n	800a570 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a566:	2300      	movs	r3, #0
 800a568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	61bb      	str	r3, [r7, #24]
 800a56e:	e003      	b.n	800a578 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a580:	e02d      	b.n	800a5de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	9300      	str	r3, [sp, #0]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2200      	movs	r2, #0
 800a58a:	2180      	movs	r1, #128	; 0x80
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fc38 	bl	800ae02 <UART_WaitOnFlagUntilTimeout>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d001      	beq.n	800a59c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	e039      	b.n	800a610 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10b      	bne.n	800a5ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	881a      	ldrh	r2, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5ae:	b292      	uxth	r2, r2
 800a5b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	61bb      	str	r3, [r7, #24]
 800a5b8:	e008      	b.n	800a5cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	781a      	ldrb	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	b292      	uxth	r2, r2
 800a5c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1cb      	bne.n	800a582 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2140      	movs	r1, #64	; 0x40
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f000 fc04 	bl	800ae02 <UART_WaitOnFlagUntilTimeout>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e005      	b.n	800a610 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e000      	b.n	800a610 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a60e:	2302      	movs	r3, #2
  }
}
 800a610:	4618      	mov	r0, r3
 800a612:	3720      	adds	r7, #32
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08a      	sub	sp, #40	; 0x28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	4613      	mov	r3, r2
 800a624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	d142      	bne.n	800a6b4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <HAL_UART_Receive_DMA+0x22>
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d101      	bne.n	800a63e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e03b      	b.n	800a6b6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a644:	2b01      	cmp	r3, #1
 800a646:	d101      	bne.n	800a64c <HAL_UART_Receive_DMA+0x34>
 800a648:	2302      	movs	r3, #2
 800a64a:	e034      	b.n	800a6b6 <HAL_UART_Receive_DMA+0x9e>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a18      	ldr	r2, [pc, #96]	; (800a6c0 <HAL_UART_Receive_DMA+0xa8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d01f      	beq.n	800a6a4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d018      	beq.n	800a6a4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	e853 3f00 	ldrex	r3, [r3]
 800a67e:	613b      	str	r3, [r7, #16]
   return(result);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	461a      	mov	r2, r3
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	623b      	str	r3, [r7, #32]
 800a692:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a694:	69f9      	ldr	r1, [r7, #28]
 800a696:	6a3a      	ldr	r2, [r7, #32]
 800a698:	e841 2300 	strex	r3, r2, [r1]
 800a69c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d1e6      	bne.n	800a672 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a6a4:	88fb      	ldrh	r3, [r7, #6]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	68b9      	ldr	r1, [r7, #8]
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 fc6e 	bl	800af8c <UART_Start_Receive_DMA>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	e000      	b.n	800a6b6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a6b4:	2302      	movs	r3, #2
  }
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3728      	adds	r7, #40	; 0x28
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	40008000 	.word	0x40008000

0800a6c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a718:	b5b0      	push	{r4, r5, r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	431a      	orrs	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	4313      	orrs	r3, r2
 800a73a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4bad      	ldr	r3, [pc, #692]	; (800a9f8 <UART_SetConfig+0x2e0>)
 800a744:	4013      	ands	r3, r2
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6812      	ldr	r2, [r2, #0]
 800a74a:	69f9      	ldr	r1, [r7, #28]
 800a74c:	430b      	orrs	r3, r1
 800a74e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	68da      	ldr	r2, [r3, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4aa2      	ldr	r2, [pc, #648]	; (800a9fc <UART_SetConfig+0x2e4>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d004      	beq.n	800a780 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69fa      	ldr	r2, [r7, #28]
 800a790:	430a      	orrs	r2, r1
 800a792:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a99      	ldr	r2, [pc, #612]	; (800aa00 <UART_SetConfig+0x2e8>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d121      	bne.n	800a7e2 <UART_SetConfig+0xca>
 800a79e:	4b99      	ldr	r3, [pc, #612]	; (800aa04 <UART_SetConfig+0x2ec>)
 800a7a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a4:	f003 0303 	and.w	r3, r3, #3
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d817      	bhi.n	800a7dc <UART_SetConfig+0xc4>
 800a7ac:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <UART_SetConfig+0x9c>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7d1 	.word	0x0800a7d1
 800a7bc:	0800a7cb 	.word	0x0800a7cb
 800a7c0:	0800a7d7 	.word	0x0800a7d7
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	76fb      	strb	r3, [r7, #27]
 800a7c8:	e0e7      	b.n	800a99a <UART_SetConfig+0x282>
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	76fb      	strb	r3, [r7, #27]
 800a7ce:	e0e4      	b.n	800a99a <UART_SetConfig+0x282>
 800a7d0:	2304      	movs	r3, #4
 800a7d2:	76fb      	strb	r3, [r7, #27]
 800a7d4:	e0e1      	b.n	800a99a <UART_SetConfig+0x282>
 800a7d6:	2308      	movs	r3, #8
 800a7d8:	76fb      	strb	r3, [r7, #27]
 800a7da:	e0de      	b.n	800a99a <UART_SetConfig+0x282>
 800a7dc:	2310      	movs	r3, #16
 800a7de:	76fb      	strb	r3, [r7, #27]
 800a7e0:	e0db      	b.n	800a99a <UART_SetConfig+0x282>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a88      	ldr	r2, [pc, #544]	; (800aa08 <UART_SetConfig+0x2f0>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d132      	bne.n	800a852 <UART_SetConfig+0x13a>
 800a7ec:	4b85      	ldr	r3, [pc, #532]	; (800aa04 <UART_SetConfig+0x2ec>)
 800a7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f2:	f003 030c 	and.w	r3, r3, #12
 800a7f6:	2b0c      	cmp	r3, #12
 800a7f8:	d828      	bhi.n	800a84c <UART_SetConfig+0x134>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <UART_SetConfig+0xe8>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a835 	.word	0x0800a835
 800a804:	0800a84d 	.word	0x0800a84d
 800a808:	0800a84d 	.word	0x0800a84d
 800a80c:	0800a84d 	.word	0x0800a84d
 800a810:	0800a841 	.word	0x0800a841
 800a814:	0800a84d 	.word	0x0800a84d
 800a818:	0800a84d 	.word	0x0800a84d
 800a81c:	0800a84d 	.word	0x0800a84d
 800a820:	0800a83b 	.word	0x0800a83b
 800a824:	0800a84d 	.word	0x0800a84d
 800a828:	0800a84d 	.word	0x0800a84d
 800a82c:	0800a84d 	.word	0x0800a84d
 800a830:	0800a847 	.word	0x0800a847
 800a834:	2300      	movs	r3, #0
 800a836:	76fb      	strb	r3, [r7, #27]
 800a838:	e0af      	b.n	800a99a <UART_SetConfig+0x282>
 800a83a:	2302      	movs	r3, #2
 800a83c:	76fb      	strb	r3, [r7, #27]
 800a83e:	e0ac      	b.n	800a99a <UART_SetConfig+0x282>
 800a840:	2304      	movs	r3, #4
 800a842:	76fb      	strb	r3, [r7, #27]
 800a844:	e0a9      	b.n	800a99a <UART_SetConfig+0x282>
 800a846:	2308      	movs	r3, #8
 800a848:	76fb      	strb	r3, [r7, #27]
 800a84a:	e0a6      	b.n	800a99a <UART_SetConfig+0x282>
 800a84c:	2310      	movs	r3, #16
 800a84e:	76fb      	strb	r3, [r7, #27]
 800a850:	e0a3      	b.n	800a99a <UART_SetConfig+0x282>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a6d      	ldr	r2, [pc, #436]	; (800aa0c <UART_SetConfig+0x2f4>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d120      	bne.n	800a89e <UART_SetConfig+0x186>
 800a85c:	4b69      	ldr	r3, [pc, #420]	; (800aa04 <UART_SetConfig+0x2ec>)
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a862:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a866:	2b30      	cmp	r3, #48	; 0x30
 800a868:	d013      	beq.n	800a892 <UART_SetConfig+0x17a>
 800a86a:	2b30      	cmp	r3, #48	; 0x30
 800a86c:	d814      	bhi.n	800a898 <UART_SetConfig+0x180>
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d009      	beq.n	800a886 <UART_SetConfig+0x16e>
 800a872:	2b20      	cmp	r3, #32
 800a874:	d810      	bhi.n	800a898 <UART_SetConfig+0x180>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <UART_SetConfig+0x168>
 800a87a:	2b10      	cmp	r3, #16
 800a87c:	d006      	beq.n	800a88c <UART_SetConfig+0x174>
 800a87e:	e00b      	b.n	800a898 <UART_SetConfig+0x180>
 800a880:	2300      	movs	r3, #0
 800a882:	76fb      	strb	r3, [r7, #27]
 800a884:	e089      	b.n	800a99a <UART_SetConfig+0x282>
 800a886:	2302      	movs	r3, #2
 800a888:	76fb      	strb	r3, [r7, #27]
 800a88a:	e086      	b.n	800a99a <UART_SetConfig+0x282>
 800a88c:	2304      	movs	r3, #4
 800a88e:	76fb      	strb	r3, [r7, #27]
 800a890:	e083      	b.n	800a99a <UART_SetConfig+0x282>
 800a892:	2308      	movs	r3, #8
 800a894:	76fb      	strb	r3, [r7, #27]
 800a896:	e080      	b.n	800a99a <UART_SetConfig+0x282>
 800a898:	2310      	movs	r3, #16
 800a89a:	76fb      	strb	r3, [r7, #27]
 800a89c:	e07d      	b.n	800a99a <UART_SetConfig+0x282>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a5b      	ldr	r2, [pc, #364]	; (800aa10 <UART_SetConfig+0x2f8>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d120      	bne.n	800a8ea <UART_SetConfig+0x1d2>
 800a8a8:	4b56      	ldr	r3, [pc, #344]	; (800aa04 <UART_SetConfig+0x2ec>)
 800a8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a8b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a8b4:	d013      	beq.n	800a8de <UART_SetConfig+0x1c6>
 800a8b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a8b8:	d814      	bhi.n	800a8e4 <UART_SetConfig+0x1cc>
 800a8ba:	2b80      	cmp	r3, #128	; 0x80
 800a8bc:	d009      	beq.n	800a8d2 <UART_SetConfig+0x1ba>
 800a8be:	2b80      	cmp	r3, #128	; 0x80
 800a8c0:	d810      	bhi.n	800a8e4 <UART_SetConfig+0x1cc>
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <UART_SetConfig+0x1b4>
 800a8c6:	2b40      	cmp	r3, #64	; 0x40
 800a8c8:	d006      	beq.n	800a8d8 <UART_SetConfig+0x1c0>
 800a8ca:	e00b      	b.n	800a8e4 <UART_SetConfig+0x1cc>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	76fb      	strb	r3, [r7, #27]
 800a8d0:	e063      	b.n	800a99a <UART_SetConfig+0x282>
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	76fb      	strb	r3, [r7, #27]
 800a8d6:	e060      	b.n	800a99a <UART_SetConfig+0x282>
 800a8d8:	2304      	movs	r3, #4
 800a8da:	76fb      	strb	r3, [r7, #27]
 800a8dc:	e05d      	b.n	800a99a <UART_SetConfig+0x282>
 800a8de:	2308      	movs	r3, #8
 800a8e0:	76fb      	strb	r3, [r7, #27]
 800a8e2:	e05a      	b.n	800a99a <UART_SetConfig+0x282>
 800a8e4:	2310      	movs	r3, #16
 800a8e6:	76fb      	strb	r3, [r7, #27]
 800a8e8:	e057      	b.n	800a99a <UART_SetConfig+0x282>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a49      	ldr	r2, [pc, #292]	; (800aa14 <UART_SetConfig+0x2fc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d125      	bne.n	800a940 <UART_SetConfig+0x228>
 800a8f4:	4b43      	ldr	r3, [pc, #268]	; (800aa04 <UART_SetConfig+0x2ec>)
 800a8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a902:	d017      	beq.n	800a934 <UART_SetConfig+0x21c>
 800a904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a908:	d817      	bhi.n	800a93a <UART_SetConfig+0x222>
 800a90a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a90e:	d00b      	beq.n	800a928 <UART_SetConfig+0x210>
 800a910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a914:	d811      	bhi.n	800a93a <UART_SetConfig+0x222>
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <UART_SetConfig+0x20a>
 800a91a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91e:	d006      	beq.n	800a92e <UART_SetConfig+0x216>
 800a920:	e00b      	b.n	800a93a <UART_SetConfig+0x222>
 800a922:	2300      	movs	r3, #0
 800a924:	76fb      	strb	r3, [r7, #27]
 800a926:	e038      	b.n	800a99a <UART_SetConfig+0x282>
 800a928:	2302      	movs	r3, #2
 800a92a:	76fb      	strb	r3, [r7, #27]
 800a92c:	e035      	b.n	800a99a <UART_SetConfig+0x282>
 800a92e:	2304      	movs	r3, #4
 800a930:	76fb      	strb	r3, [r7, #27]
 800a932:	e032      	b.n	800a99a <UART_SetConfig+0x282>
 800a934:	2308      	movs	r3, #8
 800a936:	76fb      	strb	r3, [r7, #27]
 800a938:	e02f      	b.n	800a99a <UART_SetConfig+0x282>
 800a93a:	2310      	movs	r3, #16
 800a93c:	76fb      	strb	r3, [r7, #27]
 800a93e:	e02c      	b.n	800a99a <UART_SetConfig+0x282>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a2d      	ldr	r2, [pc, #180]	; (800a9fc <UART_SetConfig+0x2e4>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d125      	bne.n	800a996 <UART_SetConfig+0x27e>
 800a94a:	4b2e      	ldr	r3, [pc, #184]	; (800aa04 <UART_SetConfig+0x2ec>)
 800a94c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a958:	d017      	beq.n	800a98a <UART_SetConfig+0x272>
 800a95a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a95e:	d817      	bhi.n	800a990 <UART_SetConfig+0x278>
 800a960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a964:	d00b      	beq.n	800a97e <UART_SetConfig+0x266>
 800a966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a96a:	d811      	bhi.n	800a990 <UART_SetConfig+0x278>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d003      	beq.n	800a978 <UART_SetConfig+0x260>
 800a970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a974:	d006      	beq.n	800a984 <UART_SetConfig+0x26c>
 800a976:	e00b      	b.n	800a990 <UART_SetConfig+0x278>
 800a978:	2300      	movs	r3, #0
 800a97a:	76fb      	strb	r3, [r7, #27]
 800a97c:	e00d      	b.n	800a99a <UART_SetConfig+0x282>
 800a97e:	2302      	movs	r3, #2
 800a980:	76fb      	strb	r3, [r7, #27]
 800a982:	e00a      	b.n	800a99a <UART_SetConfig+0x282>
 800a984:	2304      	movs	r3, #4
 800a986:	76fb      	strb	r3, [r7, #27]
 800a988:	e007      	b.n	800a99a <UART_SetConfig+0x282>
 800a98a:	2308      	movs	r3, #8
 800a98c:	76fb      	strb	r3, [r7, #27]
 800a98e:	e004      	b.n	800a99a <UART_SetConfig+0x282>
 800a990:	2310      	movs	r3, #16
 800a992:	76fb      	strb	r3, [r7, #27]
 800a994:	e001      	b.n	800a99a <UART_SetConfig+0x282>
 800a996:	2310      	movs	r3, #16
 800a998:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a17      	ldr	r2, [pc, #92]	; (800a9fc <UART_SetConfig+0x2e4>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	f040 8087 	bne.w	800aab4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9a6:	7efb      	ldrb	r3, [r7, #27]
 800a9a8:	2b08      	cmp	r3, #8
 800a9aa:	d837      	bhi.n	800aa1c <UART_SetConfig+0x304>
 800a9ac:	a201      	add	r2, pc, #4	; (adr r2, 800a9b4 <UART_SetConfig+0x29c>)
 800a9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b2:	bf00      	nop
 800a9b4:	0800a9d9 	.word	0x0800a9d9
 800a9b8:	0800aa1d 	.word	0x0800aa1d
 800a9bc:	0800a9e1 	.word	0x0800a9e1
 800a9c0:	0800aa1d 	.word	0x0800aa1d
 800a9c4:	0800a9e7 	.word	0x0800a9e7
 800a9c8:	0800aa1d 	.word	0x0800aa1d
 800a9cc:	0800aa1d 	.word	0x0800aa1d
 800a9d0:	0800aa1d 	.word	0x0800aa1d
 800a9d4:	0800a9ef 	.word	0x0800a9ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9d8:	f7fe f8b8 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 800a9dc:	6178      	str	r0, [r7, #20]
        break;
 800a9de:	e022      	b.n	800aa26 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9e0:	4b0d      	ldr	r3, [pc, #52]	; (800aa18 <UART_SetConfig+0x300>)
 800a9e2:	617b      	str	r3, [r7, #20]
        break;
 800a9e4:	e01f      	b.n	800aa26 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9e6:	f7fe f819 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 800a9ea:	6178      	str	r0, [r7, #20]
        break;
 800a9ec:	e01b      	b.n	800aa26 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9f2:	617b      	str	r3, [r7, #20]
        break;
 800a9f4:	e017      	b.n	800aa26 <UART_SetConfig+0x30e>
 800a9f6:	bf00      	nop
 800a9f8:	efff69f3 	.word	0xefff69f3
 800a9fc:	40008000 	.word	0x40008000
 800aa00:	40013800 	.word	0x40013800
 800aa04:	40021000 	.word	0x40021000
 800aa08:	40004400 	.word	0x40004400
 800aa0c:	40004800 	.word	0x40004800
 800aa10:	40004c00 	.word	0x40004c00
 800aa14:	40005000 	.word	0x40005000
 800aa18:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	76bb      	strb	r3, [r7, #26]
        break;
 800aa24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 80f1 	beq.w	800ac10 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	4613      	mov	r3, r2
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	4413      	add	r3, r2
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d305      	bcc.n	800aa4a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d902      	bls.n	800aa50 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	76bb      	strb	r3, [r7, #26]
 800aa4e:	e0df      	b.n	800ac10 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f04f 0100 	mov.w	r1, #0
 800aa58:	f04f 0200 	mov.w	r2, #0
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	020b      	lsls	r3, r1, #8
 800aa62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa66:	0202      	lsls	r2, r0, #8
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	6849      	ldr	r1, [r1, #4]
 800aa6c:	0849      	lsrs	r1, r1, #1
 800aa6e:	4608      	mov	r0, r1
 800aa70:	f04f 0100 	mov.w	r1, #0
 800aa74:	1814      	adds	r4, r2, r0
 800aa76:	eb43 0501 	adc.w	r5, r3, r1
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	4620      	mov	r0, r4
 800aa86:	4629      	mov	r1, r5
 800aa88:	f7f6 f8de 	bl	8000c48 <__aeabi_uldivmod>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4613      	mov	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa9a:	d308      	bcc.n	800aaae <UART_SetConfig+0x396>
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaa2:	d204      	bcs.n	800aaae <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	60da      	str	r2, [r3, #12]
 800aaac:	e0b0      	b.n	800ac10 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800aaae:	2301      	movs	r3, #1
 800aab0:	76bb      	strb	r3, [r7, #26]
 800aab2:	e0ad      	b.n	800ac10 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aabc:	d15b      	bne.n	800ab76 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800aabe:	7efb      	ldrb	r3, [r7, #27]
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d828      	bhi.n	800ab16 <UART_SetConfig+0x3fe>
 800aac4:	a201      	add	r2, pc, #4	; (adr r2, 800aacc <UART_SetConfig+0x3b4>)
 800aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800aaf1 	.word	0x0800aaf1
 800aad0:	0800aaf9 	.word	0x0800aaf9
 800aad4:	0800ab01 	.word	0x0800ab01
 800aad8:	0800ab17 	.word	0x0800ab17
 800aadc:	0800ab07 	.word	0x0800ab07
 800aae0:	0800ab17 	.word	0x0800ab17
 800aae4:	0800ab17 	.word	0x0800ab17
 800aae8:	0800ab17 	.word	0x0800ab17
 800aaec:	0800ab0f 	.word	0x0800ab0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaf0:	f7fe f82c 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 800aaf4:	6178      	str	r0, [r7, #20]
        break;
 800aaf6:	e013      	b.n	800ab20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaf8:	f7fe f83e 	bl	8008b78 <HAL_RCC_GetPCLK2Freq>
 800aafc:	6178      	str	r0, [r7, #20]
        break;
 800aafe:	e00f      	b.n	800ab20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab00:	4b49      	ldr	r3, [pc, #292]	; (800ac28 <UART_SetConfig+0x510>)
 800ab02:	617b      	str	r3, [r7, #20]
        break;
 800ab04:	e00c      	b.n	800ab20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab06:	f7fd ff89 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 800ab0a:	6178      	str	r0, [r7, #20]
        break;
 800ab0c:	e008      	b.n	800ab20 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab12:	617b      	str	r3, [r7, #20]
        break;
 800ab14:	e004      	b.n	800ab20 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	76bb      	strb	r3, [r7, #26]
        break;
 800ab1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d074      	beq.n	800ac10 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	005a      	lsls	r2, r3, #1
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	441a      	add	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab3a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	2b0f      	cmp	r3, #15
 800ab40:	d916      	bls.n	800ab70 <UART_SetConfig+0x458>
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab48:	d212      	bcs.n	800ab70 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f023 030f 	bic.w	r3, r3, #15
 800ab52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	085b      	lsrs	r3, r3, #1
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	89fb      	ldrh	r3, [r7, #14]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	89fa      	ldrh	r2, [r7, #14]
 800ab6c:	60da      	str	r2, [r3, #12]
 800ab6e:	e04f      	b.n	800ac10 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	76bb      	strb	r3, [r7, #26]
 800ab74:	e04c      	b.n	800ac10 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab76:	7efb      	ldrb	r3, [r7, #27]
 800ab78:	2b08      	cmp	r3, #8
 800ab7a:	d828      	bhi.n	800abce <UART_SetConfig+0x4b6>
 800ab7c:	a201      	add	r2, pc, #4	; (adr r2, 800ab84 <UART_SetConfig+0x46c>)
 800ab7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab82:	bf00      	nop
 800ab84:	0800aba9 	.word	0x0800aba9
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abb9 	.word	0x0800abb9
 800ab90:	0800abcf 	.word	0x0800abcf
 800ab94:	0800abbf 	.word	0x0800abbf
 800ab98:	0800abcf 	.word	0x0800abcf
 800ab9c:	0800abcf 	.word	0x0800abcf
 800aba0:	0800abcf 	.word	0x0800abcf
 800aba4:	0800abc7 	.word	0x0800abc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aba8:	f7fd ffd0 	bl	8008b4c <HAL_RCC_GetPCLK1Freq>
 800abac:	6178      	str	r0, [r7, #20]
        break;
 800abae:	e013      	b.n	800abd8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abb0:	f7fd ffe2 	bl	8008b78 <HAL_RCC_GetPCLK2Freq>
 800abb4:	6178      	str	r0, [r7, #20]
        break;
 800abb6:	e00f      	b.n	800abd8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abb8:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <UART_SetConfig+0x510>)
 800abba:	617b      	str	r3, [r7, #20]
        break;
 800abbc:	e00c      	b.n	800abd8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abbe:	f7fd ff2d 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 800abc2:	6178      	str	r0, [r7, #20]
        break;
 800abc4:	e008      	b.n	800abd8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abca:	617b      	str	r3, [r7, #20]
        break;
 800abcc:	e004      	b.n	800abd8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800abce:	2300      	movs	r3, #0
 800abd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	76bb      	strb	r3, [r7, #26]
        break;
 800abd6:	bf00      	nop
    }

    if (pclk != 0U)
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d018      	beq.n	800ac10 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	085a      	lsrs	r2, r3, #1
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	441a      	add	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2b0f      	cmp	r3, #15
 800abf6:	d909      	bls.n	800ac0c <UART_SetConfig+0x4f4>
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abfe:	d205      	bcs.n	800ac0c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60da      	str	r2, [r3, #12]
 800ac0a:	e001      	b.n	800ac10 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ac1c:	7ebb      	ldrb	r3, [r7, #26]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3720      	adds	r7, #32
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bdb0      	pop	{r4, r5, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	00f42400 	.word	0x00f42400

0800ac2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00a      	beq.n	800ac56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00a      	beq.n	800ac9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	f003 0308 	and.w	r3, r3, #8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	f003 0310 	and.w	r3, r3, #16
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00a      	beq.n	800acde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace2:	f003 0320 	and.w	r3, r3, #32
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00a      	beq.n	800ad00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	430a      	orrs	r2, r1
 800acfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d01a      	beq.n	800ad42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad2a:	d10a      	bne.n	800ad42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d00a      	beq.n	800ad64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	430a      	orrs	r2, r1
 800ad62:	605a      	str	r2, [r3, #4]
  }
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad80:	f7fb fc0e 	bl	80065a0 <HAL_GetTick>
 800ad84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b08      	cmp	r3, #8
 800ad92:	d10e      	bne.n	800adb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad98:	9300      	str	r3, [sp, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f82d 	bl	800ae02 <UART_WaitOnFlagUntilTimeout>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e023      	b.n	800adfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0304 	and.w	r3, r3, #4
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d10e      	bne.n	800adde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f817 	bl	800ae02 <UART_WaitOnFlagUntilTimeout>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adda:	2303      	movs	r3, #3
 800addc:	e00d      	b.n	800adfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b09c      	sub	sp, #112	; 0x70
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	60f8      	str	r0, [r7, #12]
 800ae0a:	60b9      	str	r1, [r7, #8]
 800ae0c:	603b      	str	r3, [r7, #0]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae12:	e0a5      	b.n	800af60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae1a:	f000 80a1 	beq.w	800af60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae1e:	f7fb fbbf 	bl	80065a0 <HAL_GetTick>
 800ae22:	4602      	mov	r2, r0
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	1ad3      	subs	r3, r2, r3
 800ae28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d302      	bcc.n	800ae34 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d13e      	bne.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae3c:	e853 3f00 	ldrex	r3, [r3]
 800ae40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae48:	667b      	str	r3, [r7, #100]	; 0x64
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	461a      	mov	r2, r3
 800ae50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae5a:	e841 2300 	strex	r3, r2, [r1]
 800ae5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1e6      	bne.n	800ae34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f023 0301 	bic.w	r3, r3, #1
 800ae7c:	663b      	str	r3, [r7, #96]	; 0x60
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3308      	adds	r3, #8
 800ae84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae86:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1e5      	bne.n	800ae66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2220      	movs	r2, #32
 800ae9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2220      	movs	r2, #32
 800aea4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e067      	b.n	800af82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d04f      	beq.n	800af60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aece:	d147      	bne.n	800af60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aed8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	e853 3f00 	ldrex	r3, [r3]
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aeee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
 800aefa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af00:	e841 2300 	strex	r3, r2, [r1]
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1e6      	bne.n	800aeda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3308      	adds	r3, #8
 800af12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	e853 3f00 	ldrex	r3, [r3]
 800af1a:	613b      	str	r3, [r7, #16]
   return(result);
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f023 0301 	bic.w	r3, r3, #1
 800af22:	66bb      	str	r3, [r7, #104]	; 0x68
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af2c:	623a      	str	r2, [r7, #32]
 800af2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af30:	69f9      	ldr	r1, [r7, #28]
 800af32:	6a3a      	ldr	r2, [r7, #32]
 800af34:	e841 2300 	strex	r3, r2, [r1]
 800af38:	61bb      	str	r3, [r7, #24]
   return(result);
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1e5      	bne.n	800af0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2220      	movs	r2, #32
 800af4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2220      	movs	r2, #32
 800af50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e010      	b.n	800af82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	69da      	ldr	r2, [r3, #28]
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	4013      	ands	r3, r2
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	bf0c      	ite	eq
 800af70:	2301      	moveq	r3, #1
 800af72:	2300      	movne	r3, #0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	461a      	mov	r2, r3
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	f43f af4a 	beq.w	800ae14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3770      	adds	r7, #112	; 0x70
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
	...

0800af8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b096      	sub	sp, #88	; 0x58
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	4613      	mov	r3, r2
 800af98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	88fa      	ldrh	r2, [r7, #6]
 800afa4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2222      	movs	r2, #34	; 0x22
 800afb4:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d02b      	beq.n	800b016 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	4a42      	ldr	r2, [pc, #264]	; (800b0cc <UART_Start_Receive_DMA+0x140>)
 800afc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	4a41      	ldr	r2, [pc, #260]	; (800b0d0 <UART_Start_Receive_DMA+0x144>)
 800afcc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd2:	4a40      	ldr	r2, [pc, #256]	; (800b0d4 <UART_Start_Receive_DMA+0x148>)
 800afd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afda:	2200      	movs	r2, #0
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3324      	adds	r3, #36	; 0x24
 800afe8:	4619      	mov	r1, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afee:	461a      	mov	r2, r3
 800aff0:	88fb      	ldrh	r3, [r7, #6]
 800aff2:	f7fb fd95 	bl	8006b20 <HAL_DMA_Start_IT>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00c      	beq.n	800b016 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2210      	movs	r2, #16
 800b000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2220      	movs	r2, #32
 800b010:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e055      	b.n	800b0c2 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d018      	beq.n	800b058 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b03a:	657b      	str	r3, [r7, #84]	; 0x54
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	461a      	mov	r2, r3
 800b042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b044:	64bb      	str	r3, [r7, #72]	; 0x48
 800b046:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b048:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b04a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b04c:	e841 2300 	strex	r3, r2, [r1]
 800b050:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1e6      	bne.n	800b026 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3308      	adds	r3, #8
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	f043 0301 	orr.w	r3, r3, #1
 800b06e:	653b      	str	r3, [r7, #80]	; 0x50
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3308      	adds	r3, #8
 800b076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b078:	637a      	str	r2, [r7, #52]	; 0x34
 800b07a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b07c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b07e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b080:	e841 2300 	strex	r3, r2, [r1]
 800b084:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1e5      	bne.n	800b058 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	3308      	adds	r3, #8
 800b092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	e853 3f00 	ldrex	r3, [r3]
 800b09a:	613b      	str	r3, [r7, #16]
   return(result);
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0ac:	623a      	str	r2, [r7, #32]
 800b0ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	69f9      	ldr	r1, [r7, #28]
 800b0b2:	6a3a      	ldr	r2, [r7, #32]
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e5      	bne.n	800b08c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3758      	adds	r7, #88	; 0x58
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	0800b1eb 	.word	0x0800b1eb
 800b0d0:	0800b30f 	.word	0x0800b30f
 800b0d4:	0800b347 	.word	0x0800b347

0800b0d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b089      	sub	sp, #36	; 0x24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	e853 3f00 	ldrex	r3, [r3]
 800b0ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b0f4:	61fb      	str	r3, [r7, #28]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	61bb      	str	r3, [r7, #24]
 800b100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	6979      	ldr	r1, [r7, #20]
 800b104:	69ba      	ldr	r2, [r7, #24]
 800b106:	e841 2300 	strex	r3, r2, [r1]
 800b10a:	613b      	str	r3, [r7, #16]
   return(result);
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e6      	bne.n	800b0e0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2220      	movs	r2, #32
 800b116:	679a      	str	r2, [r3, #120]	; 0x78
}
 800b118:	bf00      	nop
 800b11a:	3724      	adds	r7, #36	; 0x24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b095      	sub	sp, #84	; 0x54
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b140:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14a:	643b      	str	r3, [r7, #64]	; 0x40
 800b14c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b150:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e6      	bne.n	800b12c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3308      	adds	r3, #8
 800b164:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	f023 0301 	bic.w	r3, r3, #1
 800b174:	64bb      	str	r3, [r7, #72]	; 0x48
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3308      	adds	r3, #8
 800b17c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b17e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e5      	bne.n	800b15e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b196:	2b01      	cmp	r3, #1
 800b198:	d118      	bne.n	800b1cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	e853 3f00 	ldrex	r3, [r3]
 800b1a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	f023 0310 	bic.w	r3, r3, #16
 800b1ae:	647b      	str	r3, [r7, #68]	; 0x44
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b8:	61bb      	str	r3, [r7, #24]
 800b1ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1bc:	6979      	ldr	r1, [r7, #20]
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	e841 2300 	strex	r3, r2, [r1]
 800b1c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1e6      	bne.n	800b19a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b1de:	bf00      	nop
 800b1e0:	3754      	adds	r7, #84	; 0x54
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b09c      	sub	sp, #112	; 0x70
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	d170      	bne.n	800b2e8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800b206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b208:	2200      	movs	r2, #0
 800b20a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b216:	e853 3f00 	ldrex	r3, [r3]
 800b21a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b21c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b21e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b222:	66bb      	str	r3, [r7, #104]	; 0x68
 800b224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	461a      	mov	r2, r3
 800b22a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b22c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b22e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b230:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b232:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b234:	e841 2300 	strex	r3, r2, [r1]
 800b238:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1e6      	bne.n	800b20e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3308      	adds	r3, #8
 800b246:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	e853 3f00 	ldrex	r3, [r3]
 800b24e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b252:	f023 0301 	bic.w	r3, r3, #1
 800b256:	667b      	str	r3, [r7, #100]	; 0x64
 800b258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3308      	adds	r3, #8
 800b25e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b260:	647a      	str	r2, [r7, #68]	; 0x44
 800b262:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b268:	e841 2300 	strex	r3, r2, [r1]
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1e5      	bne.n	800b240 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	e853 3f00 	ldrex	r3, [r3]
 800b282:	623b      	str	r3, [r7, #32]
   return(result);
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b28a:	663b      	str	r3, [r7, #96]	; 0x60
 800b28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b294:	633a      	str	r2, [r7, #48]	; 0x30
 800b296:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29c:	e841 2300 	strex	r3, r2, [r1]
 800b2a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1e5      	bne.n	800b274 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d118      	bne.n	800b2e8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	e853 3f00 	ldrex	r3, [r3]
 800b2c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0310 	bic.w	r3, r3, #16
 800b2ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d8:	69b9      	ldr	r1, [r7, #24]
 800b2da:	69fa      	ldr	r2, [r7, #28]
 800b2dc:	e841 2300 	strex	r3, r2, [r1]
 800b2e0:	617b      	str	r3, [r7, #20]
   return(result);
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1e6      	bne.n	800b2b6 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d107      	bne.n	800b300 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b2fa:	f7ff fa01 	bl	800a700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2fe:	e002      	b.n	800b306 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b300:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b302:	f7ff f9df 	bl	800a6c4 <HAL_UART_RxCpltCallback>
}
 800b306:	bf00      	nop
 800b308:	3770      	adds	r7, #112	; 0x70
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b320:	2b01      	cmp	r3, #1
 800b322:	d109      	bne.n	800b338 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b32a:	085b      	lsrs	r3, r3, #1
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f7ff f9e5 	bl	800a700 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b336:	e002      	b.n	800b33e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff f9cd 	bl	800a6d8 <HAL_UART_RxHalfCpltCallback>
}
 800b33e:	bf00      	nop
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b358:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b35e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b36a:	2b80      	cmp	r3, #128	; 0x80
 800b36c:	d109      	bne.n	800b382 <UART_DMAError+0x3c>
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	2b21      	cmp	r3, #33	; 0x21
 800b372:	d106      	bne.n	800b382 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2200      	movs	r2, #0
 800b378:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b37c:	6978      	ldr	r0, [r7, #20]
 800b37e:	f7ff feab 	bl	800b0d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38c:	2b40      	cmp	r3, #64	; 0x40
 800b38e:	d109      	bne.n	800b3a4 <UART_DMAError+0x5e>
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b22      	cmp	r3, #34	; 0x22
 800b394:	d106      	bne.n	800b3a4 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2200      	movs	r2, #0
 800b39a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b39e:	6978      	ldr	r0, [r7, #20]
 800b3a0:	f7ff fec0 	bl	800b124 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3aa:	f043 0210 	orr.w	r2, r3, #16
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3b4:	6978      	ldr	r0, [r7, #20]
 800b3b6:	f7ff f999 	bl	800a6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ba:	bf00      	nop
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <DataHist_parameters>:
 800b3c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b3ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b3cc:	7020      	strb	r0, [r4, #0]
 800b3ce:	6808      	ldr	r0, [r1, #0]
 800b3d0:	6060      	str	r0, [r4, #4]
 800b3d2:	6848      	ldr	r0, [r1, #4]
 800b3d4:	60a0      	str	r0, [r4, #8]
 800b3d6:	6888      	ldr	r0, [r1, #8]
 800b3d8:	60e0      	str	r0, [r4, #12]
 800b3da:	68c8      	ldr	r0, [r1, #12]
 800b3dc:	6120      	str	r0, [r4, #16]
 800b3de:	6908      	ldr	r0, [r1, #16]
 800b3e0:	6160      	str	r0, [r4, #20]
 800b3e2:	6948      	ldr	r0, [r1, #20]
 800b3e4:	61a0      	str	r0, [r4, #24]
 800b3e6:	6988      	ldr	r0, [r1, #24]
 800b3e8:	61e0      	str	r0, [r4, #28]
 800b3ea:	69c8      	ldr	r0, [r1, #28]
 800b3ec:	6220      	str	r0, [r4, #32]
 800b3ee:	6a09      	ldr	r1, [r1, #32]
 800b3f0:	6261      	str	r1, [r4, #36]	; 0x24
 800b3f2:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b3f6:	8811      	ldrh	r1, [r2, #0]
 800b3f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b3fc:	8521      	strh	r1, [r4, #40]	; 0x28
 800b3fe:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b402:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b406:	f04f 0e00 	mov.w	lr, #0
 800b40a:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b40e:	4641      	mov	r1, r8
 800b410:	f852 0b04 	ldr.w	r0, [r2], #4
 800b414:	f841 0b04 	str.w	r0, [r1], #4
 800b418:	4562      	cmp	r2, ip
 800b41a:	d1f9      	bne.n	800b410 <DataHist_parameters+0x4c>
 800b41c:	f10e 0e1e 	add.w	lr, lr, #30
 800b420:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b424:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b428:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b42c:	d1ed      	bne.n	800b40a <DataHist_parameters+0x46>
 800b42e:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b432:	881a      	ldrh	r2, [r3, #0]
 800b434:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b438:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b43c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b440:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b444:	f04f 0c00 	mov.w	ip, #0
 800b448:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b44c:	4672      	mov	r2, lr
 800b44e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b452:	f842 1b04 	str.w	r1, [r2], #4
 800b456:	4283      	cmp	r3, r0
 800b458:	d1f9      	bne.n	800b44e <DataHist_parameters+0x8a>
 800b45a:	f10c 0c1e 	add.w	ip, ip, #30
 800b45e:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b462:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b466:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b46a:	d1ed      	bne.n	800b448 <DataHist_parameters+0x84>
 800b46c:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b470:	883b      	ldrh	r3, [r7, #0]
 800b472:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b476:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b47a:	3780      	adds	r7, #128	; 0x80
 800b47c:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b480:	2000      	movs	r0, #0
 800b482:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b486:	4662      	mov	r2, ip
 800b488:	f853 1b04 	ldr.w	r1, [r3], #4
 800b48c:	f842 1b04 	str.w	r1, [r2], #4
 800b490:	42bb      	cmp	r3, r7
 800b492:	d1f9      	bne.n	800b488 <DataHist_parameters+0xc4>
 800b494:	301e      	adds	r0, #30
 800b496:	285a      	cmp	r0, #90	; 0x5a
 800b498:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b49c:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b4a0:	d1ef      	bne.n	800b482 <DataHist_parameters+0xbe>
 800b4a2:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b4a6:	8833      	ldrh	r3, [r6, #0]
 800b4a8:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b4ac:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b4b0:	3680      	adds	r6, #128	; 0x80
 800b4b2:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b4bc:	463a      	mov	r2, r7
 800b4be:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4c2:	f842 1b04 	str.w	r1, [r2], #4
 800b4c6:	429e      	cmp	r6, r3
 800b4c8:	d1f9      	bne.n	800b4be <DataHist_parameters+0xfa>
 800b4ca:	301e      	adds	r0, #30
 800b4cc:	285a      	cmp	r0, #90	; 0x5a
 800b4ce:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b4d2:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b4d6:	d1ef      	bne.n	800b4b8 <DataHist_parameters+0xf4>
 800b4d8:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b4dc:	69aa      	ldr	r2, [r5, #24]
 800b4de:	f8c3 c004 	str.w	ip, [r3, #4]
 800b4e2:	782b      	ldrb	r3, [r5, #0]
 800b4e4:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b4e8:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b4ec:	619a      	str	r2, [r3, #24]
 800b4ee:	686a      	ldr	r2, [r5, #4]
 800b4f0:	605a      	str	r2, [r3, #4]
 800b4f2:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b4f6:	68a9      	ldr	r1, [r5, #8]
 800b4f8:	6011      	str	r1, [r2, #0]
 800b4fa:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b4fe:	68e9      	ldr	r1, [r5, #12]
 800b500:	6011      	str	r1, [r2, #0]
 800b502:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b506:	6929      	ldr	r1, [r5, #16]
 800b508:	6011      	str	r1, [r2, #0]
 800b50a:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b50e:	6969      	ldr	r1, [r5, #20]
 800b510:	6011      	str	r1, [r2, #0]
 800b512:	69ea      	ldr	r2, [r5, #28]
 800b514:	61da      	str	r2, [r3, #28]
 800b516:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b51a:	6a2a      	ldr	r2, [r5, #32]
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b522:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b52a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b52c:	601a      	str	r2, [r3, #0]
 800b52e:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b532:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53a:	bf00      	nop

0800b53c <rotVect>:
 800b53c:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b540:	ed92 5a01 	vldr	s10, [r2, #4]
 800b544:	edd2 5a00 	vldr	s11, [r2]
 800b548:	ed92 6a02 	vldr	s12, [r2, #8]
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	f991 3000 	ldrsb.w	r3, [r1]
 800b554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b558:	ee06 3a90 	vmov	s13, r3
 800b55c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b560:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b564:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b568:	ee07 3a10 	vmov	s14, r3
 800b56c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b570:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b574:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b578:	edc0 7a00 	vstr	s15, [r0]
 800b57c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b580:	ed92 5a01 	vldr	s10, [r2, #4]
 800b584:	edd2 5a00 	vldr	s11, [r2]
 800b588:	ed92 6a02 	vldr	s12, [r2, #8]
 800b58c:	ee07 3a90 	vmov	s15, r3
 800b590:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b598:	ee06 3a90 	vmov	s13, r3
 800b59c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b5a0:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b5a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5a8:	ee07 3a10 	vmov	s14, r3
 800b5ac:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5b4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5b8:	edc0 7a01 	vstr	s15, [r0, #4]
 800b5bc:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b5c0:	ed92 5a01 	vldr	s10, [r2, #4]
 800b5c4:	edd2 5a00 	vldr	s11, [r2]
 800b5c8:	ed92 6a02 	vldr	s12, [r2, #8]
 800b5cc:	ee07 3a90 	vmov	s15, r3
 800b5d0:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5d8:	ee06 3a90 	vmov	s13, r3
 800b5dc:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b5e0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b5e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5e8:	ee07 3a10 	vmov	s14, r3
 800b5ec:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b5f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5f4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b5f8:	edc0 7a02 	vstr	s15, [r0, #8]
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop

0800b600 <findAxis>:
 800b600:	f990 3000 	ldrsb.w	r3, [r0]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d027      	beq.n	800b658 <findAxis+0x58>
 800b608:	3301      	adds	r3, #1
 800b60a:	d00e      	beq.n	800b62a <findAxis+0x2a>
 800b60c:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d053      	beq.n	800b6bc <findAxis+0xbc>
 800b614:	3301      	adds	r3, #1
 800b616:	d048      	beq.n	800b6aa <findAxis+0xaa>
 800b618:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d053      	beq.n	800b6c8 <findAxis+0xc8>
 800b620:	3301      	adds	r3, #1
 800b622:	d104      	bne.n	800b62e <findAxis+0x2e>
 800b624:	2364      	movs	r3, #100	; 0x64
 800b626:	700b      	strb	r3, [r1, #0]
 800b628:	e001      	b.n	800b62e <findAxis+0x2e>
 800b62a:	2377      	movs	r3, #119	; 0x77
 800b62c:	700b      	strb	r3, [r1, #0]
 800b62e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d016      	beq.n	800b664 <findAxis+0x64>
 800b636:	3301      	adds	r3, #1
 800b638:	d02e      	beq.n	800b698 <findAxis+0x98>
 800b63a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d039      	beq.n	800b6b6 <findAxis+0xb6>
 800b642:	3301      	adds	r3, #1
 800b644:	d034      	beq.n	800b6b0 <findAxis+0xb0>
 800b646:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d03f      	beq.n	800b6ce <findAxis+0xce>
 800b64e:	3301      	adds	r3, #1
 800b650:	d10a      	bne.n	800b668 <findAxis+0x68>
 800b652:	2364      	movs	r3, #100	; 0x64
 800b654:	704b      	strb	r3, [r1, #1]
 800b656:	e007      	b.n	800b668 <findAxis+0x68>
 800b658:	2365      	movs	r3, #101	; 0x65
 800b65a:	700b      	strb	r3, [r1, #0]
 800b65c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d1e8      	bne.n	800b636 <findAxis+0x36>
 800b664:	2365      	movs	r3, #101	; 0x65
 800b666:	704b      	strb	r3, [r1, #1]
 800b668:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d010      	beq.n	800b692 <findAxis+0x92>
 800b670:	3301      	adds	r3, #1
 800b672:	d014      	beq.n	800b69e <findAxis+0x9e>
 800b674:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d022      	beq.n	800b6c2 <findAxis+0xc2>
 800b67c:	3301      	adds	r3, #1
 800b67e:	d011      	beq.n	800b6a4 <findAxis+0xa4>
 800b680:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d025      	beq.n	800b6d4 <findAxis+0xd4>
 800b688:	3301      	adds	r3, #1
 800b68a:	bf04      	itt	eq
 800b68c:	2364      	moveq	r3, #100	; 0x64
 800b68e:	708b      	strbeq	r3, [r1, #2]
 800b690:	4770      	bx	lr
 800b692:	2365      	movs	r3, #101	; 0x65
 800b694:	708b      	strb	r3, [r1, #2]
 800b696:	4770      	bx	lr
 800b698:	2377      	movs	r3, #119	; 0x77
 800b69a:	704b      	strb	r3, [r1, #1]
 800b69c:	e7e4      	b.n	800b668 <findAxis+0x68>
 800b69e:	2377      	movs	r3, #119	; 0x77
 800b6a0:	708b      	strb	r3, [r1, #2]
 800b6a2:	4770      	bx	lr
 800b6a4:	2373      	movs	r3, #115	; 0x73
 800b6a6:	708b      	strb	r3, [r1, #2]
 800b6a8:	4770      	bx	lr
 800b6aa:	2373      	movs	r3, #115	; 0x73
 800b6ac:	700b      	strb	r3, [r1, #0]
 800b6ae:	e7be      	b.n	800b62e <findAxis+0x2e>
 800b6b0:	2373      	movs	r3, #115	; 0x73
 800b6b2:	704b      	strb	r3, [r1, #1]
 800b6b4:	e7d8      	b.n	800b668 <findAxis+0x68>
 800b6b6:	236e      	movs	r3, #110	; 0x6e
 800b6b8:	704b      	strb	r3, [r1, #1]
 800b6ba:	e7d5      	b.n	800b668 <findAxis+0x68>
 800b6bc:	236e      	movs	r3, #110	; 0x6e
 800b6be:	700b      	strb	r3, [r1, #0]
 800b6c0:	e7b5      	b.n	800b62e <findAxis+0x2e>
 800b6c2:	236e      	movs	r3, #110	; 0x6e
 800b6c4:	708b      	strb	r3, [r1, #2]
 800b6c6:	4770      	bx	lr
 800b6c8:	2375      	movs	r3, #117	; 0x75
 800b6ca:	700b      	strb	r3, [r1, #0]
 800b6cc:	e7af      	b.n	800b62e <findAxis+0x2e>
 800b6ce:	2375      	movs	r3, #117	; 0x75
 800b6d0:	704b      	strb	r3, [r1, #1]
 800b6d2:	e7c9      	b.n	800b668 <findAxis+0x68>
 800b6d4:	2375      	movs	r3, #117	; 0x75
 800b6d6:	708b      	strb	r3, [r1, #2]
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	0000      	movs	r0, r0
	...

0800b6e0 <findDirection>:
 800b6e0:	b5d0      	push	{r4, r6, r7, lr}
 800b6e2:	ed2d 8b04 	vpush	{d8-d9}
 800b6e6:	eef0 8ac0 	vabs.f32	s17, s0
 800b6ea:	eeb0 8ae0 	vabs.f32	s16, s1
 800b6ee:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	eeb0 9ac1 	vabs.f32	s18, s2
 800b6fc:	dd36      	ble.n	800b76c <findDirection+0x8c>
 800b6fe:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b706:	dd31      	ble.n	800b76c <findDirection+0x8c>
 800b708:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b710:	ee18 0a90 	vmov	r0, s17
 800b714:	f340 8094 	ble.w	800b840 <findDirection+0x160>
 800b718:	f7f4 ff16 	bl	8000548 <__aeabi_f2d>
 800b71c:	4606      	mov	r6, r0
 800b71e:	ee18 0a10 	vmov	r0, s16
 800b722:	460f      	mov	r7, r1
 800b724:	f7f4 ff10 	bl	8000548 <__aeabi_f2d>
 800b728:	a387      	add	r3, pc, #540	; (adr r3, 800b948 <findDirection+0x268>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 ff63 	bl	80005f8 <__aeabi_dmul>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4630      	mov	r0, r6
 800b738:	4639      	mov	r1, r7
 800b73a:	f7f5 f9ed 	bl	8000b18 <__aeabi_dcmpgt>
 800b73e:	b188      	cbz	r0, 800b764 <findDirection+0x84>
 800b740:	ee19 0a10 	vmov	r0, s18
 800b744:	f7f4 ff00 	bl	8000548 <__aeabi_f2d>
 800b748:	a37f      	add	r3, pc, #508	; (adr r3, 800b948 <findDirection+0x268>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 ff53 	bl	80005f8 <__aeabi_dmul>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f5 f9dd 	bl	8000b18 <__aeabi_dcmpgt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	bf18      	it	ne
 800b762:	2404      	movne	r4, #4
 800b764:	ecbd 8b04 	vpop	{d8-d9}
 800b768:	4620      	mov	r0, r4
 800b76a:	bdd0      	pop	{r4, r6, r7, pc}
 800b76c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b774:	dd32      	ble.n	800b7dc <findDirection+0xfc>
 800b776:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77e:	ee18 0a10 	vmov	r0, s16
 800b782:	f340 8086 	ble.w	800b892 <findDirection+0x1b2>
 800b786:	f7f4 fedf 	bl	8000548 <__aeabi_f2d>
 800b78a:	4606      	mov	r6, r0
 800b78c:	ee18 0a90 	vmov	r0, s17
 800b790:	460f      	mov	r7, r1
 800b792:	f7f4 fed9 	bl	8000548 <__aeabi_f2d>
 800b796:	a36c      	add	r3, pc, #432	; (adr r3, 800b948 <findDirection+0x268>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f4 ff2c 	bl	80005f8 <__aeabi_dmul>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	f7f5 f9b6 	bl	8000b18 <__aeabi_dcmpgt>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d0d9      	beq.n	800b764 <findDirection+0x84>
 800b7b0:	ee19 0a10 	vmov	r0, s18
 800b7b4:	f7f4 fec8 	bl	8000548 <__aeabi_f2d>
 800b7b8:	a363      	add	r3, pc, #396	; (adr r3, 800b948 <findDirection+0x268>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 ff1b 	bl	80005f8 <__aeabi_dmul>
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	f7f5 f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 800b7ce:	ecbd 8b04 	vpop	{d8-d9}
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	bf18      	it	ne
 800b7d6:	2401      	movne	r4, #1
 800b7d8:	4620      	mov	r0, r4
 800b7da:	bdd0      	pop	{r4, r6, r7, pc}
 800b7dc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e4:	ee19 0a10 	vmov	r0, s18
 800b7e8:	dd7f      	ble.n	800b8ea <findDirection+0x20a>
 800b7ea:	f7f4 fead 	bl	8000548 <__aeabi_f2d>
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	ee18 0a10 	vmov	r0, s16
 800b7f4:	460f      	mov	r7, r1
 800b7f6:	f7f4 fea7 	bl	8000548 <__aeabi_f2d>
 800b7fa:	a353      	add	r3, pc, #332	; (adr r3, 800b948 <findDirection+0x268>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	f7f4 fefa 	bl	80005f8 <__aeabi_dmul>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f5 f984 	bl	8000b18 <__aeabi_dcmpgt>
 800b810:	2800      	cmp	r0, #0
 800b812:	d0a7      	beq.n	800b764 <findDirection+0x84>
 800b814:	ee18 0a90 	vmov	r0, s17
 800b818:	f7f4 fe96 	bl	8000548 <__aeabi_f2d>
 800b81c:	a34a      	add	r3, pc, #296	; (adr r3, 800b948 <findDirection+0x268>)
 800b81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b822:	f7f4 fee9 	bl	80005f8 <__aeabi_dmul>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f5 f973 	bl	8000b18 <__aeabi_dcmpgt>
 800b832:	ecbd 8b04 	vpop	{d8-d9}
 800b836:	2800      	cmp	r0, #0
 800b838:	bf18      	it	ne
 800b83a:	2400      	movne	r4, #0
 800b83c:	4620      	mov	r0, r4
 800b83e:	bdd0      	pop	{r4, r6, r7, pc}
 800b840:	f7f4 fe82 	bl	8000548 <__aeabi_f2d>
 800b844:	4606      	mov	r6, r0
 800b846:	ee18 0a10 	vmov	r0, s16
 800b84a:	460f      	mov	r7, r1
 800b84c:	f7f4 fe7c 	bl	8000548 <__aeabi_f2d>
 800b850:	a33d      	add	r3, pc, #244	; (adr r3, 800b948 <findDirection+0x268>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	f7f4 fecf 	bl	80005f8 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	f7f5 f959 	bl	8000b18 <__aeabi_dcmpgt>
 800b866:	2800      	cmp	r0, #0
 800b868:	f43f af7c 	beq.w	800b764 <findDirection+0x84>
 800b86c:	ee19 0a10 	vmov	r0, s18
 800b870:	f7f4 fe6a 	bl	8000548 <__aeabi_f2d>
 800b874:	a334      	add	r3, pc, #208	; (adr r3, 800b948 <findDirection+0x268>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f7f4 febd 	bl	80005f8 <__aeabi_dmul>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f5 f947 	bl	8000b18 <__aeabi_dcmpgt>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	bf18      	it	ne
 800b88e:	2405      	movne	r4, #5
 800b890:	e768      	b.n	800b764 <findDirection+0x84>
 800b892:	f7f4 fe59 	bl	8000548 <__aeabi_f2d>
 800b896:	4606      	mov	r6, r0
 800b898:	ee18 0a90 	vmov	r0, s17
 800b89c:	460f      	mov	r7, r1
 800b89e:	f7f4 fe53 	bl	8000548 <__aeabi_f2d>
 800b8a2:	a329      	add	r3, pc, #164	; (adr r3, 800b948 <findDirection+0x268>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f5 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	f43f af53 	beq.w	800b764 <findDirection+0x84>
 800b8be:	ee19 0a10 	vmov	r0, s18
 800b8c2:	f7f4 fe41 	bl	8000548 <__aeabi_f2d>
 800b8c6:	a320      	add	r3, pc, #128	; (adr r3, 800b948 <findDirection+0x268>)
 800b8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8cc:	f7f4 fe94 	bl	80005f8 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	f7f5 f91e 	bl	8000b18 <__aeabi_dcmpgt>
 800b8dc:	ecbd 8b04 	vpop	{d8-d9}
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	bf18      	it	ne
 800b8e4:	2403      	movne	r4, #3
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	bdd0      	pop	{r4, r6, r7, pc}
 800b8ea:	f7f4 fe2d 	bl	8000548 <__aeabi_f2d>
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	ee18 0a10 	vmov	r0, s16
 800b8f4:	460f      	mov	r7, r1
 800b8f6:	f7f4 fe27 	bl	8000548 <__aeabi_f2d>
 800b8fa:	a313      	add	r3, pc, #76	; (adr r3, 800b948 <findDirection+0x268>)
 800b8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b900:	f7f4 fe7a 	bl	80005f8 <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f5 f904 	bl	8000b18 <__aeabi_dcmpgt>
 800b910:	2800      	cmp	r0, #0
 800b912:	f43f af27 	beq.w	800b764 <findDirection+0x84>
 800b916:	ee18 0a90 	vmov	r0, s17
 800b91a:	f7f4 fe15 	bl	8000548 <__aeabi_f2d>
 800b91e:	a30a      	add	r3, pc, #40	; (adr r3, 800b948 <findDirection+0x268>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe68 	bl	80005f8 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	4630      	mov	r0, r6
 800b92e:	4639      	mov	r1, r7
 800b930:	f7f5 f8f2 	bl	8000b18 <__aeabi_dcmpgt>
 800b934:	ecbd 8b04 	vpop	{d8-d9}
 800b938:	2800      	cmp	r0, #0
 800b93a:	bf18      	it	ne
 800b93c:	2402      	movne	r4, #2
 800b93e:	4620      	mov	r0, r4
 800b940:	bdd0      	pop	{r4, r6, r7, pc}
 800b942:	bf00      	nop
 800b944:	f3af 8000 	nop.w
 800b948:	e0000000 	.word	0xe0000000
 800b94c:	3ff6b851 	.word	0x3ff6b851

0800b950 <updateOrientation>:
 800b950:	b410      	push	{r4}
 800b952:	2300      	movs	r3, #0
 800b954:	6003      	str	r3, [r0, #0]
 800b956:	6043      	str	r3, [r0, #4]
 800b958:	7203      	strb	r3, [r0, #8]
 800b95a:	780c      	ldrb	r4, [r1, #0]
 800b95c:	784a      	ldrb	r2, [r1, #1]
 800b95e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b962:	2b17      	cmp	r3, #23
 800b964:	bf98      	it	ls
 800b966:	3420      	addls	r4, #32
 800b968:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b96c:	bf98      	it	ls
 800b96e:	b2e4      	uxtbls	r4, r4
 800b970:	2b17      	cmp	r3, #23
 800b972:	788b      	ldrb	r3, [r1, #2]
 800b974:	bf98      	it	ls
 800b976:	3220      	addls	r2, #32
 800b978:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b97c:	bf98      	it	ls
 800b97e:	b2d2      	uxtbls	r2, r2
 800b980:	2917      	cmp	r1, #23
 800b982:	bf98      	it	ls
 800b984:	3320      	addls	r3, #32
 800b986:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b98a:	bf98      	it	ls
 800b98c:	b2db      	uxtbls	r3, r3
 800b98e:	2c13      	cmp	r4, #19
 800b990:	d80d      	bhi.n	800b9ae <updateOrientation+0x5e>
 800b992:	e8df f004 	tbb	[pc, r4]
 800b996:	0a36      	.short	0x0a36
 800b998:	0c0c0c0c 	.word	0x0c0c0c0c
 800b99c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9a0:	0c0c0c39 	.word	0x0c0c0c39
 800b9a4:	3f0c3c0c 	.word	0x3f0c3c0c
 800b9a8:	420c      	.short	0x420c
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	7001      	strb	r1, [r0, #0]
 800b9ae:	3a64      	subs	r2, #100	; 0x64
 800b9b0:	2a13      	cmp	r2, #19
 800b9b2:	d80d      	bhi.n	800b9d0 <updateOrientation+0x80>
 800b9b4:	e8df f002 	tbb	[pc, r2]
 800b9b8:	0c0c0a34 	.word	0x0c0c0a34
 800b9bc:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9c0:	0c370c0c 	.word	0x0c370c0c
 800b9c4:	3a0c0c0c 	.word	0x3a0c0c0c
 800b9c8:	400c3d0c 	.word	0x400c3d0c
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	7042      	strb	r2, [r0, #1]
 800b9d0:	3b64      	subs	r3, #100	; 0x64
 800b9d2:	2b13      	cmp	r3, #19
 800b9d4:	d80d      	bhi.n	800b9f2 <updateOrientation+0xa2>
 800b9d6:	e8df f003 	tbb	[pc, r3]
 800b9da:	320a      	.short	0x320a
 800b9dc:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9e0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b9e4:	0c0c0c37 	.word	0x0c0c0c37
 800b9e8:	410c3c0c 	.word	0x410c3c0c
 800b9ec:	0f0c      	.short	0x0f0c
 800b9ee:	23ff      	movs	r3, #255	; 0xff
 800b9f0:	7203      	strb	r3, [r0, #8]
 800b9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	23ff      	movs	r3, #255	; 0xff
 800b9fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9fe:	7083      	strb	r3, [r0, #2]
 800ba00:	4770      	bx	lr
 800ba02:	21ff      	movs	r1, #255	; 0xff
 800ba04:	7181      	strb	r1, [r0, #6]
 800ba06:	e7d2      	b.n	800b9ae <updateOrientation+0x5e>
 800ba08:	2101      	movs	r1, #1
 800ba0a:	70c1      	strb	r1, [r0, #3]
 800ba0c:	e7cf      	b.n	800b9ae <updateOrientation+0x5e>
 800ba0e:	21ff      	movs	r1, #255	; 0xff
 800ba10:	70c1      	strb	r1, [r0, #3]
 800ba12:	e7cc      	b.n	800b9ae <updateOrientation+0x5e>
 800ba14:	2101      	movs	r1, #1
 800ba16:	7181      	strb	r1, [r0, #6]
 800ba18:	e7c9      	b.n	800b9ae <updateOrientation+0x5e>
 800ba1a:	21ff      	movs	r1, #255	; 0xff
 800ba1c:	7001      	strb	r1, [r0, #0]
 800ba1e:	e7c6      	b.n	800b9ae <updateOrientation+0x5e>
 800ba20:	22ff      	movs	r2, #255	; 0xff
 800ba22:	71c2      	strb	r2, [r0, #7]
 800ba24:	e7d4      	b.n	800b9d0 <updateOrientation+0x80>
 800ba26:	2201      	movs	r2, #1
 800ba28:	7102      	strb	r2, [r0, #4]
 800ba2a:	e7d1      	b.n	800b9d0 <updateOrientation+0x80>
 800ba2c:	22ff      	movs	r2, #255	; 0xff
 800ba2e:	7102      	strb	r2, [r0, #4]
 800ba30:	e7ce      	b.n	800b9d0 <updateOrientation+0x80>
 800ba32:	2201      	movs	r2, #1
 800ba34:	71c2      	strb	r2, [r0, #7]
 800ba36:	e7cb      	b.n	800b9d0 <updateOrientation+0x80>
 800ba38:	22ff      	movs	r2, #255	; 0xff
 800ba3a:	7042      	strb	r2, [r0, #1]
 800ba3c:	e7c8      	b.n	800b9d0 <updateOrientation+0x80>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba44:	7083      	strb	r3, [r0, #2]
 800ba46:	4770      	bx	lr
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba4e:	7143      	strb	r3, [r0, #5]
 800ba50:	4770      	bx	lr
 800ba52:	23ff      	movs	r3, #255	; 0xff
 800ba54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba58:	7143      	strb	r3, [r0, #5]
 800ba5a:	4770      	bx	lr
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba62:	7203      	strb	r3, [r0, #8]
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop

0800ba68 <qmult>:
 800ba68:	ed91 2a03 	vldr	s4, [r1, #12]
 800ba6c:	ed90 3a01 	vldr	s6, [r0, #4]
 800ba70:	edd0 5a02 	vldr	s11, [r0, #8]
 800ba74:	edd1 4a01 	vldr	s9, [r1, #4]
 800ba78:	ed90 4a00 	vldr	s8, [r0]
 800ba7c:	edd1 3a00 	vldr	s7, [r1]
 800ba80:	ed91 5a02 	vldr	s10, [r1, #8]
 800ba84:	edd0 2a03 	vldr	s5, [r0, #12]
 800ba88:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800ba8c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800ba90:	ee22 7a25 	vmul.f32	s14, s4, s11
 800ba94:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800ba98:	eea4 6a02 	vfma.f32	s12, s8, s4
 800ba9c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800baa0:	eea3 7a23 	vfma.f32	s14, s6, s7
 800baa4:	eee4 7a63 	vfms.f32	s15, s8, s7
 800baa8:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800baac:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800bab0:	eea5 7a22 	vfma.f32	s14, s10, s5
 800bab4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800bab8:	eea3 6a45 	vfms.f32	s12, s6, s10
 800babc:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800bac0:	eea4 7a64 	vfms.f32	s14, s8, s9
 800bac4:	eee5 7a65 	vfms.f32	s15, s10, s11
 800bac8:	ed82 6a00 	vstr	s12, [r2]
 800bacc:	edc2 6a01 	vstr	s13, [r2, #4]
 800bad0:	ed82 7a02 	vstr	s14, [r2, #8]
 800bad4:	edc2 7a03 	vstr	s15, [r2, #12]
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop

0800badc <MEMS_setMagIndexToOne>:
 800badc:	291f      	cmp	r1, #31
 800bade:	b430      	push	{r4, r5}
 800bae0:	d920      	bls.n	800bb24 <MEMS_setMagIndexToOne+0x48>
 800bae2:	6885      	ldr	r5, [r0, #8]
 800bae4:	3920      	subs	r1, #32
 800bae6:	2401      	movs	r4, #1
 800bae8:	fa04 f101 	lsl.w	r1, r4, r1
 800baec:	ea21 0105 	bic.w	r1, r1, r5
 800baf0:	4069      	eors	r1, r5
 800baf2:	2a1f      	cmp	r2, #31
 800baf4:	6081      	str	r1, [r0, #8]
 800baf6:	d91f      	bls.n	800bb38 <MEMS_setMagIndexToOne+0x5c>
 800baf8:	6901      	ldr	r1, [r0, #16]
 800bafa:	f1a2 0420 	sub.w	r4, r2, #32
 800bafe:	2201      	movs	r2, #1
 800bb00:	40a2      	lsls	r2, r4
 800bb02:	ea22 0201 	bic.w	r2, r2, r1
 800bb06:	404a      	eors	r2, r1
 800bb08:	2b1f      	cmp	r3, #31
 800bb0a:	6102      	str	r2, [r0, #16]
 800bb0c:	d91e      	bls.n	800bb4c <MEMS_setMagIndexToOne+0x70>
 800bb0e:	69c2      	ldr	r2, [r0, #28]
 800bb10:	f1a3 0120 	sub.w	r1, r3, #32
 800bb14:	2301      	movs	r3, #1
 800bb16:	408b      	lsls	r3, r1
 800bb18:	ea23 0302 	bic.w	r3, r3, r2
 800bb1c:	4053      	eors	r3, r2
 800bb1e:	bc30      	pop	{r4, r5}
 800bb20:	61c3      	str	r3, [r0, #28]
 800bb22:	4770      	bx	lr
 800bb24:	68c5      	ldr	r5, [r0, #12]
 800bb26:	2401      	movs	r4, #1
 800bb28:	fa04 f101 	lsl.w	r1, r4, r1
 800bb2c:	ea21 0105 	bic.w	r1, r1, r5
 800bb30:	4069      	eors	r1, r5
 800bb32:	2a1f      	cmp	r2, #31
 800bb34:	60c1      	str	r1, [r0, #12]
 800bb36:	d8df      	bhi.n	800baf8 <MEMS_setMagIndexToOne+0x1c>
 800bb38:	6944      	ldr	r4, [r0, #20]
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	fa01 f202 	lsl.w	r2, r1, r2
 800bb40:	ea22 0204 	bic.w	r2, r2, r4
 800bb44:	4062      	eors	r2, r4
 800bb46:	2b1f      	cmp	r3, #31
 800bb48:	6142      	str	r2, [r0, #20]
 800bb4a:	d8e0      	bhi.n	800bb0e <MEMS_setMagIndexToOne+0x32>
 800bb4c:	6981      	ldr	r1, [r0, #24]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	fa02 f303 	lsl.w	r3, r2, r3
 800bb54:	ea23 0301 	bic.w	r3, r3, r1
 800bb58:	404b      	eors	r3, r1
 800bb5a:	bc30      	pop	{r4, r5}
 800bb5c:	6183      	str	r3, [r0, #24]
 800bb5e:	4770      	bx	lr

0800bb60 <getRotationMatrix>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4605      	mov	r5, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	4610      	mov	r0, r2
 800bb68:	2100      	movs	r1, #0
 800bb6a:	2224      	movs	r2, #36	; 0x24
 800bb6c:	f00b fea6 	bl	80178bc <memset>
 800bb70:	edd5 5a00 	vldr	s11, [r5]
 800bb74:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800bc9c <getRotationMatrix+0x13c>
 800bb78:	edc0 5a02 	vstr	s11, [r0, #8]
 800bb7c:	ed95 7a01 	vldr	s14, [r5, #4]
 800bb80:	ed80 7a05 	vstr	s14, [r0, #20]
 800bb84:	ed95 5a02 	vldr	s10, [r5, #8]
 800bb88:	ed80 5a08 	vstr	s10, [r0, #32]
 800bb8c:	ed94 4a02 	vldr	s8, [r4, #8]
 800bb90:	edd4 3a01 	vldr	s7, [r4, #4]
 800bb94:	edd4 4a00 	vldr	s9, [r4]
 800bb98:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800bb9c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800bba0:	eee3 7a85 	vfma.f32	s15, s7, s10
 800bba4:	4603      	mov	r3, r0
 800bba6:	eee4 6a87 	vfma.f32	s13, s9, s14
 800bbaa:	eeb0 7ae7 	vabs.f32	s14, s15
 800bbae:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800bbb2:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800bbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbba:	eea4 6a25 	vfma.f32	s12, s8, s11
 800bbbe:	bfdc      	itt	le
 800bbc0:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800bbc4:	eeb0 7a43 	vmovle.f32	s14, s6
 800bbc8:	eeb0 5ac6 	vabs.f32	s10, s12
 800bbcc:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bbd0:	edc0 6a06 	vstr	s13, [r0, #24]
 800bbd4:	bfd4      	ite	le
 800bbd6:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800bbda:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	ed80 6a03 	vstr	s12, [r0, #12]
 800bbe6:	edc0 7a00 	vstr	s15, [r0]
 800bbea:	d447      	bmi.n	800bc7c <getRotationMatrix+0x11c>
 800bbec:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800bbf0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800bbf4:	eef0 5a66 	vmov.f32	s11, s13
 800bbf8:	edd3 6a06 	vldr	s13, [r3, #24]
 800bbfc:	eeb0 5ae6 	vabs.f32	s10, s13
 800bc00:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800bc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc08:	d543      	bpl.n	800bc92 <getRotationMatrix+0x132>
 800bc0a:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bc0e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800bc12:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bc16:	eeb0 7a45 	vmov.f32	s14, s10
 800bc1a:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800bc1e:	eef0 5a44 	vmov.f32	s11, s8
 800bc22:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800bc26:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800bc2a:	ee65 5a07 	vmul.f32	s11, s10, s14
 800bc2e:	edd3 3a08 	vldr	s7, [r3, #32]
 800bc32:	edd3 4a02 	vldr	s9, [r3, #8]
 800bc36:	ed93 4a05 	vldr	s8, [r3, #20]
 800bc3a:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800bc3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc42:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bc46:	ee26 7a87 	vmul.f32	s14, s13, s14
 800bc4a:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800bc4e:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800bc52:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800bc56:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800bc5a:	eee4 5a07 	vfma.f32	s11, s8, s14
 800bc5e:	eee6 6a24 	vfma.f32	s13, s12, s9
 800bc62:	edc3 7a00 	vstr	s15, [r3]
 800bc66:	ed83 6a03 	vstr	s12, [r3, #12]
 800bc6a:	ed83 7a06 	vstr	s14, [r3, #24]
 800bc6e:	ed83 5a04 	vstr	s10, [r3, #16]
 800bc72:	edc3 5a01 	vstr	s11, [r3, #4]
 800bc76:	edc3 6a07 	vstr	s13, [r3, #28]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800bc80:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800bc84:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800bc88:	eeb0 7a45 	vmov.f32	s14, s10
 800bc8c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800bc90:	e7b2      	b.n	800bbf8 <getRotationMatrix+0x98>
 800bc92:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800bc96:	eee5 5a05 	vfma.f32	s11, s10, s10
 800bc9a:	e7c2      	b.n	800bc22 <getRotationMatrix+0xc2>
 800bc9c:	00000000 	.word	0x00000000

0800bca0 <b_dcm2q>:
 800bca0:	ed90 5a08 	vldr	s10, [r0, #32]
 800bca4:	edd0 7a00 	vldr	s15, [r0]
 800bca8:	edd0 6a04 	vldr	s13, [r0, #16]
 800bcac:	ee37 7a85 	vadd.f32	s14, s15, s10
 800bcb0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800bcb4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bcb8:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bcbc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800bcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc4:	bfc5      	ittet	gt
 800bcc6:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800bcca:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800bcce:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800bddc <b_dcm2q+0x13c>
 800bcd2:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800bcd6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bcda:	ee35 6a47 	vsub.f32	s12, s10, s14
 800bcde:	ee35 7a07 	vadd.f32	s14, s10, s14
 800bce2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800bce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcea:	bfc5      	ittet	gt
 800bcec:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800bcf0:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800bcf4:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800bddc <b_dcm2q+0x13c>
 800bcf8:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800bcfc:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800bd00:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800bd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd08:	dd5b      	ble.n	800bdc2 <b_dcm2q+0x122>
 800bd0a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800bd0e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800bd12:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800bd16:	eef1 4ac7 	vsqrt.f32	s9, s14
 800bd1a:	ee64 4a84 	vmul.f32	s9, s9, s8
 800bd1e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd22:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bd26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd2a:	edd0 6a07 	vldr	s13, [r0, #28]
 800bd2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd36:	bf85      	ittet	hi
 800bd38:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800bd3c:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800bd40:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800bddc <b_dcm2q+0x13c>
 800bd44:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800bd48:	edd0 7a05 	vldr	s15, [r0, #20]
 800bd4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd58:	d43c      	bmi.n	800bdd4 <b_dcm2q+0x134>
 800bd5a:	bfd8      	it	le
 800bd5c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800bd60:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd68:	ed81 7a00 	vstr	s14, [r1]
 800bd6c:	edd0 7a06 	vldr	s15, [r0, #24]
 800bd70:	ed90 7a02 	vldr	s14, [r0, #8]
 800bd74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd80:	d425      	bmi.n	800bdce <b_dcm2q+0x12e>
 800bd82:	bfd8      	it	le
 800bd84:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800bd88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bd8c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800bd90:	edc1 5a01 	vstr	s11, [r1, #4]
 800bd94:	edd0 7a01 	vldr	s15, [r0, #4]
 800bd98:	ed90 7a03 	vldr	s14, [r0, #12]
 800bd9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bda0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda8:	d40e      	bmi.n	800bdc8 <b_dcm2q+0x128>
 800bdaa:	bfd8      	it	le
 800bdac:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800bdb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800bdb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bdb8:	edc1 4a03 	vstr	s9, [r1, #12]
 800bdbc:	ed81 6a02 	vstr	s12, [r1, #8]
 800bdc0:	4770      	bx	lr
 800bdc2:	eddf 4a06 	vldr	s9, [pc, #24]	; 800bddc <b_dcm2q+0x13c>
 800bdc6:	e7aa      	b.n	800bd1e <b_dcm2q+0x7e>
 800bdc8:	eeb1 6a46 	vneg.f32	s12, s12
 800bdcc:	e7f0      	b.n	800bdb0 <b_dcm2q+0x110>
 800bdce:	eef1 5a65 	vneg.f32	s11, s11
 800bdd2:	e7d9      	b.n	800bd88 <b_dcm2q+0xe8>
 800bdd4:	eeb1 7a47 	vneg.f32	s14, s14
 800bdd8:	e7c2      	b.n	800bd60 <b_dcm2q+0xc0>
 800bdda:	bf00      	nop
 800bddc:	00000000 	.word	0x00000000

0800bde0 <q2hpr>:
 800bde0:	b510      	push	{r4, lr}
 800bde2:	ed90 7a00 	vldr	s14, [r0]
 800bde6:	edd0 6a01 	vldr	s13, [r0, #4]
 800bdea:	edd0 7a02 	vldr	s15, [r0, #8]
 800bdee:	ed90 5a03 	vldr	s10, [r0, #12]
 800bdf2:	ed2d 8b0a 	vpush	{d8-d12}
 800bdf6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bdfa:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bdfe:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800be02:	ee67 0a07 	vmul.f32	s1, s14, s14
 800be06:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800be0a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800be0e:	ee27 7a05 	vmul.f32	s14, s14, s10
 800be12:	ee66 6a85 	vmul.f32	s13, s13, s10
 800be16:	ee67 7a85 	vmul.f32	s15, s15, s10
 800be1a:	ee78 aa08 	vadd.f32	s21, s16, s16
 800be1e:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800be22:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800be26:	ee30 ca00 	vadd.f32	s24, s0, s0
 800be2a:	ee36 ba06 	vadd.f32	s22, s12, s12
 800be2e:	ee77 8a07 	vadd.f32	s17, s14, s14
 800be32:	ee75 baa5 	vadd.f32	s23, s11, s11
 800be36:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800be3a:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800be3e:	460c      	mov	r4, r1
 800be40:	bb8a      	cbnz	r2, 800bea6 <q2hpr+0xc6>
 800be42:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800be46:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800be4a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800be4e:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800be52:	f00a f833 	bl	8015ebc <atan2f>
 800be56:	eeb0 8a40 	vmov.f32	s16, s0
 800be5a:	ed84 8a00 	vstr	s16, [r4]
 800be5e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800be62:	f009 fff9 	bl	8015e58 <asinf>
 800be66:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800be6a:	eef0 8a40 	vmov.f32	s17, s0
 800be6e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800be72:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800be76:	f00a f821 	bl	8015ebc <atan2f>
 800be7a:	eef1 8a68 	vneg.f32	s17, s17
 800be7e:	eeb0 9a40 	vmov.f32	s18, s0
 800be82:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800be86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be8a:	ed84 9a02 	vstr	s18, [r4, #8]
 800be8e:	edc4 8a01 	vstr	s17, [r4, #4]
 800be92:	d505      	bpl.n	800bea0 <q2hpr+0xc0>
 800be94:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800beec <q2hpr+0x10c>
 800be98:	ee38 8a00 	vadd.f32	s16, s16, s0
 800be9c:	ed84 8a00 	vstr	s16, [r4]
 800bea0:	ecbd 8b0a 	vpop	{d8-d12}
 800bea4:	bd10      	pop	{r4, pc}
 800bea6:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800beaa:	f009 ffd5 	bl	8015e58 <asinf>
 800beae:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800beb2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800beb6:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800beba:	eeb0 9a40 	vmov.f32	s18, s0
 800bebe:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bec2:	f009 fffb 	bl	8015ebc <atan2f>
 800bec6:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800beca:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bece:	eef0 8a40 	vmov.f32	s17, s0
 800bed2:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bed6:	eeb1 0a48 	vneg.f32	s0, s16
 800beda:	f009 ffef 	bl	8015ebc <atan2f>
 800bede:	eef1 8a68 	vneg.f32	s17, s17
 800bee2:	eeb0 8a40 	vmov.f32	s16, s0
 800bee6:	ed84 0a00 	vstr	s0, [r4]
 800beea:	e7ca      	b.n	800be82 <q2hpr+0xa2>
 800beec:	40c90fdb 	.word	0x40c90fdb

0800bef0 <llEvaluate.constprop.0>:
 800bef0:	edd2 0a00 	vldr	s1, [r2]
 800bef4:	ed90 1a00 	vldr	s2, [r0]
 800bef8:	edd0 1a04 	vldr	s3, [r0, #16]
 800befc:	edd2 5a01 	vldr	s11, [r2, #4]
 800bf00:	ed90 6a08 	vldr	s12, [r0, #32]
 800bf04:	ed90 2a05 	vldr	s4, [r0, #20]
 800bf08:	ed92 7a02 	vldr	s14, [r2, #8]
 800bf0c:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bf10:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bf14:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bf18:	edd2 7a03 	vldr	s15, [r2, #12]
 800bf1c:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bf20:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bf24:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bf28:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	f10d 0810 	add.w	r8, sp, #16
 800bf36:	2704      	movs	r7, #4
 800bf38:	f101 0510 	add.w	r5, r1, #16
 800bf3c:	2f04      	cmp	r7, #4
 800bf3e:	4686      	mov	lr, r0
 800bf40:	f04f 0c03 	mov.w	ip, #3
 800bf44:	b27b      	sxtb	r3, r7
 800bf46:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800bf4a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800bf4e:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800bf52:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800bf56:	eea6 7a43 	vfms.f32	s14, s12, s6
 800bf5a:	edcd 6a00 	vstr	s13, [sp]
 800bf5e:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800bf62:	eee6 7a63 	vfms.f32	s15, s12, s7
 800bf66:	ed8d 6a01 	vstr	s12, [sp, #4]
 800bf6a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800bf6e:	edcd 6a02 	vstr	s13, [sp, #8]
 800bf72:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bf76:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bf7a:	ed78 7a01 	vldmdb	r8!, {s15}
 800bf7e:	ed65 7a01 	vstmdb	r5!, {s15}
 800bf82:	d029      	beq.n	800bfd8 <llEvaluate.constprop.0+0xe8>
 800bf84:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800bf88:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800bf8c:	4432      	add	r2, r6
 800bf8e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800bf92:	edd2 6a00 	vldr	s13, [r2]
 800bf96:	ed94 7a00 	vldr	s14, [r4]
 800bf9a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	2a04      	cmp	r2, #4
 800bfa4:	b25b      	sxtb	r3, r3
 800bfa6:	edc5 7a00 	vstr	s15, [r5]
 800bfaa:	d1ed      	bne.n	800bf88 <llEvaluate.constprop.0+0x98>
 800bfac:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bfb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bfb4:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800bfb8:	ed85 7a00 	vstr	s14, [r5]
 800bfbc:	d013      	beq.n	800bfe6 <llEvaluate.constprop.0+0xf6>
 800bfbe:	3f01      	subs	r7, #1
 800bfc0:	b2ff      	uxtb	r7, r7
 800bfc2:	ed78 7a01 	vldmdb	r8!, {s15}
 800bfc6:	2f04      	cmp	r7, #4
 800bfc8:	f1ae 0e14 	sub.w	lr, lr, #20
 800bfcc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bfd0:	b27b      	sxtb	r3, r7
 800bfd2:	ed65 7a01 	vstmdb	r5!, {s15}
 800bfd6:	d1d5      	bne.n	800bf84 <llEvaluate.constprop.0+0x94>
 800bfd8:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bfdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bfe0:	ed85 7a00 	vstr	s14, [r5]
 800bfe4:	e7eb      	b.n	800bfbe <llEvaluate.constprop.0+0xce>
 800bfe6:	b004      	add	sp, #16
 800bfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bfec <MEMS_updateMagBufferIndex>:
 800bfec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bff0:	ed2d 8b02 	vpush	{d8}
 800bff4:	7804      	ldrb	r4, [r0, #0]
 800bff6:	7842      	ldrb	r2, [r0, #1]
 800bff8:	4606      	mov	r6, r0
 800bffa:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800bffe:	2300      	movs	r3, #0
 800c000:	4294      	cmp	r4, r2
 800c002:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800c006:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800c00a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800c00e:	b083      	sub	sp, #12
 800c010:	460d      	mov	r5, r1
 800c012:	f100 0001 	add.w	r0, r0, #1
 800c016:	f000 8083 	beq.w	800c120 <MEMS_updateMagBufferIndex+0x134>
 800c01a:	1b00      	subs	r0, r0, r4
 800c01c:	fb90 f8f2 	sdiv	r8, r0, r2
 800c020:	fb02 0018 	mls	r0, r2, r8, r0
 800c024:	2800      	cmp	r0, #0
 800c026:	bfb6      	itet	lt
 800c028:	eb02 0800 	addlt.w	r8, r2, r0
 800c02c:	fa0f f880 	sxthge.w	r8, r0
 800c030:	fa0f f888 	sxthlt.w	r8, r8
 800c034:	b934      	cbnz	r4, 800c044 <MEMS_updateMagBufferIndex+0x58>
 800c036:	23ff      	movs	r3, #255	; 0xff
 800c038:	70b3      	strb	r3, [r6, #2]
 800c03a:	b003      	add	sp, #12
 800c03c:	ecbd 8b02 	vpop	{d8}
 800c040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c044:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c048:	2700      	movs	r7, #0
 800c04a:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800c04e:	463b      	mov	r3, r7
 800c050:	e000      	b.n	800c054 <MEMS_updateMagBufferIndex+0x68>
 800c052:	7872      	ldrb	r2, [r6, #1]
 800c054:	4443      	add	r3, r8
 800c056:	fb93 f4f2 	sdiv	r4, r3, r2
 800c05a:	fb02 3314 	mls	r3, r2, r4, r3
 800c05e:	b2dc      	uxtb	r4, r3
 800c060:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800c064:	3701      	adds	r7, #1
 800c066:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800c06a:	fb92 f3f5 	sdiv	r3, r2, r5
 800c06e:	fb05 2313 	mls	r3, r5, r3, r2
 800c072:	2b00      	cmp	r3, #0
 800c074:	bfb8      	it	lt
 800c076:	195b      	addlt	r3, r3, r5
 800c078:	b21b      	sxth	r3, r3
 800c07a:	ee00 3a10 	vmov	s0, r3
 800c07e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c082:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c086:	f009 fdef 	bl	8015c68 <roundf>
 800c08a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800c08e:	fb92 f3f5 	sdiv	r3, r2, r5
 800c092:	fb05 2313 	mls	r3, r5, r3, r2
 800c096:	2b00      	cmp	r3, #0
 800c098:	bfb8      	it	lt
 800c09a:	195b      	addlt	r3, r3, r5
 800c09c:	b21b      	sxth	r3, r3
 800c09e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c0a2:	ee00 3a10 	vmov	s0, r3
 800c0a6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c0aa:	edcd 7a01 	vstr	s15, [sp, #4]
 800c0ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c0b2:	f009 fdd9 	bl	8015c68 <roundf>
 800c0b6:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800c0ba:	fb92 f3f5 	sdiv	r3, r2, r5
 800c0be:	fb05 2313 	mls	r3, r5, r3, r2
 800c0c2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c0c6:	18ea      	adds	r2, r5, r3
 800c0c8:	b219      	sxth	r1, r3
 800c0ca:	b212      	sxth	r2, r2
 800c0cc:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800c0d0:	edcd 7a01 	vstr	s15, [sp, #4]
 800c0d4:	ee00 1a10 	vmov	s0, r1
 800c0d8:	ee07 2a90 	vmov	s15, r2
 800c0dc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c0e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c0ea:	bfb8      	it	lt
 800c0ec:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800c0f0:	f009 fdba 	bl	8015c68 <roundf>
 800c0f4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800c0f8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800c0fc:	edcd 7a01 	vstr	s15, [sp, #4]
 800c100:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c104:	4622      	mov	r2, r4
 800c106:	4649      	mov	r1, r9
 800c108:	4630      	mov	r0, r6
 800c10a:	f7ff fce7 	bl	800badc <MEMS_setMagIndexToOne>
 800c10e:	7832      	ldrb	r2, [r6, #0]
 800c110:	b2fb      	uxtb	r3, r7
 800c112:	429a      	cmp	r2, r3
 800c114:	d89d      	bhi.n	800c052 <MEMS_updateMagBufferIndex+0x66>
 800c116:	b003      	add	sp, #12
 800c118:	ecbd 8b02 	vpop	{d8}
 800c11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c120:	fb90 f8f4 	sdiv	r8, r0, r4
 800c124:	fb04 0018 	mls	r0, r4, r8, r0
 800c128:	fa0f f880 	sxth.w	r8, r0
 800c12c:	e782      	b.n	800c034 <MEMS_updateMagBufferIndex+0x48>
 800c12e:	bf00      	nop

0800c130 <getMagStats.constprop.0>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c136:	2400      	movs	r4, #0
 800c138:	4607      	mov	r7, r0
 800c13a:	6034      	str	r4, [r6, #0]
 800c13c:	601c      	str	r4, [r3, #0]
 800c13e:	7800      	ldrb	r0, [r0, #0]
 800c140:	787d      	ldrb	r5, [r7, #1]
 800c142:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800c146:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c14a:	42a8      	cmp	r0, r5
 800c14c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800c150:	f000 80c0 	beq.w	800c2d4 <getMagStats.constprop.0+0x1a4>
 800c154:	3401      	adds	r4, #1
 800c156:	eba4 0c00 	sub.w	ip, r4, r0
 800c15a:	fb9c f4f5 	sdiv	r4, ip, r5
 800c15e:	fb05 c414 	mls	r4, r5, r4, ip
 800c162:	2c00      	cmp	r4, #0
 800c164:	bfb8      	it	lt
 800c166:	1964      	addlt	r4, r4, r5
 800c168:	b224      	sxth	r4, r4
 800c16a:	ee04 0a90 	vmov	s9, r0
 800c16e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800c2f0 <getMagStats.constprop.0+0x1c0>
 800c172:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800c176:	ee25 5a85 	vmul.f32	s10, s11, s10
 800c17a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c17e:	2800      	cmp	r0, #0
 800c180:	f000 80b2 	beq.w	800c2e8 <getMagStats.constprop.0+0x1b8>
 800c184:	3801      	subs	r0, #1
 800c186:	fa54 fc80 	uxtab	ip, r4, r0
 800c18a:	f8b1 9000 	ldrh.w	r9, [r1]
 800c18e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800c192:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800c196:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800c2f4 <getMagStats.constprop.0+0x1c4>
 800c19a:	2000      	movs	r0, #0
 800c19c:	e002      	b.n	800c1a4 <getMagStats.constprop.0+0x74>
 800c19e:	ed93 3a00 	vldr	s6, [r3]
 800c1a2:	3401      	adds	r4, #1
 800c1a4:	fb94 f1f5 	sdiv	r1, r4, r5
 800c1a8:	fb05 4111 	mls	r1, r5, r1, r4
 800c1ac:	b2c9      	uxtb	r1, r1
 800c1ae:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800c1b2:	edd2 3a00 	vldr	s7, [r2]
 800c1b6:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800c1ba:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800c1be:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800c1c0:	ed92 4a04 	vldr	s8, [r2, #16]
 800c1c4:	ed92 6a08 	vldr	s12, [r2, #32]
 800c1c8:	ebaa 0a09 	sub.w	sl, sl, r9
 800c1cc:	ebab 0b08 	sub.w	fp, fp, r8
 800c1d0:	fa0f fa8a 	sxth.w	sl, sl
 800c1d4:	ee07 aa10 	vmov	s14, sl
 800c1d8:	fa0f fa8b 	sxth.w	sl, fp
 800c1dc:	ee06 aa90 	vmov	s13, sl
 800c1e0:	eba1 010e 	sub.w	r1, r1, lr
 800c1e4:	b209      	sxth	r1, r1
 800c1e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c1ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c1ee:	ee07 1a90 	vmov	s15, r1
 800c1f2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c1f6:	ee66 6a84 	vmul.f32	s13, s13, s8
 800c1fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1fe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800c202:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800c206:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c20a:	ee16 1a90 	vmov	r1, s13
 800c20e:	ee17 aa10 	vmov	sl, s14
 800c212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c216:	fb11 f101 	smulbb	r1, r1, r1
 800c21a:	fa0f fa8a 	sxth.w	sl, sl
 800c21e:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800c222:	ee17 1a90 	vmov	r1, s15
 800c226:	b209      	sxth	r1, r1
 800c228:	fb01 a101 	mla	r1, r1, r1, sl
 800c22c:	ee07 1a90 	vmov	s15, r1
 800c230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c234:	f100 0a01 	add.w	sl, r0, #1
 800c238:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c23c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c240:	ee17 1a90 	vmov	r1, s15
 800c244:	b209      	sxth	r1, r1
 800c246:	ee07 1a10 	vmov	s14, r1
 800c24a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c24e:	ee77 7a45 	vsub.f32	s15, s14, s10
 800c252:	ee37 7a03 	vadd.f32	s14, s14, s6
 800c256:	eef0 7ae7 	vabs.f32	s15, s15
 800c25a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c25e:	ed83 7a00 	vstr	s14, [r3]
 800c262:	ee17 1a90 	vmov	r1, s15
 800c266:	b209      	sxth	r1, r1
 800c268:	fb01 fb01 	mul.w	fp, r1, r1
 800c26c:	ee07 ba90 	vmov	s15, fp
 800c270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c274:	ee07 1a90 	vmov	s15, r1
 800c278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c27c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800c280:	edd6 7a00 	vldr	s15, [r6]
 800c284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c28c:	bf48      	it	mi
 800c28e:	fa5f f08a 	uxtbmi.w	r0, sl
 800c292:	45a4      	cmp	ip, r4
 800c294:	edc6 7a00 	vstr	s15, [r6]
 800c298:	d181      	bne.n	800c19e <getMagStats.constprop.0+0x6e>
 800c29a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800c29e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c2f8 <getMagStats.constprop.0+0x1c8>
 800c2a2:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800c2a6:	eef1 7ae6 	vsqrt.f32	s15, s13
 800c2aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c2ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b6:	bfb8      	it	lt
 800c2b8:	eef0 7a47 	vmovlt.f32	s15, s14
 800c2bc:	edc6 7a00 	vstr	s15, [r6]
 800c2c0:	edd3 7a00 	vldr	s15, [r3]
 800c2c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2c8:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800c2cc:	edc3 7a00 	vstr	s15, [r3]
 800c2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d4:	1c65      	adds	r5, r4, #1
 800c2d6:	fb95 f4f0 	sdiv	r4, r5, r0
 800c2da:	fb00 5414 	mls	r4, r0, r4, r5
 800c2de:	ee04 0a90 	vmov	s9, r0
 800c2e2:	b224      	sxth	r4, r4
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	e742      	b.n	800c16e <getMagStats.constprop.0+0x3e>
 800c2e8:	edd6 7a00 	vldr	s15, [r6]
 800c2ec:	e7d5      	b.n	800c29a <getMagStats.constprop.0+0x16a>
 800c2ee:	bf00      	nop
 800c2f0:	423c0000 	.word	0x423c0000
 800c2f4:	00000000 	.word	0x00000000
 800c2f8:	3f59999a 	.word	0x3f59999a

0800c2fc <MFX_emptyAttitude>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	ed2d 8b10 	vpush	{d8-d15}
 800c304:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c308:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c30c:	f04f 0a00 	mov.w	sl, #0
 800c310:	4fef      	ldr	r7, [pc, #956]	; (800c6d0 <MFX_emptyAttitude+0x3d4>)
 800c312:	f8c4 a008 	str.w	sl, [r4, #8]
 800c316:	e9c4 aa00 	strd	sl, sl, [r4]
 800c31a:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c31e:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c322:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c326:	4680      	mov	r8, r0
 800c328:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c32c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c330:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c334:	0c1b      	lsrs	r3, r3, #16
 800c336:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c33a:	ab27      	add	r3, sp, #156	; 0x9c
 800c33c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c340:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c344:	ab2d      	add	r3, sp, #180	; 0xb4
 800c346:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c34a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c34e:	ab30      	add	r3, sp, #192	; 0xc0
 800c350:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c354:	ab33      	add	r3, sp, #204	; 0xcc
 800c356:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c35a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c35e:	f04f 0c00 	mov.w	ip, #0
 800c362:	ab36      	add	r3, sp, #216	; 0xd8
 800c364:	f04f 0b00 	mov.w	fp, #0
 800c368:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c36c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c370:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c374:	4628      	mov	r0, r5
 800c376:	2224      	movs	r2, #36	; 0x24
 800c378:	f00b faa0 	bl	80178bc <memset>
 800c37c:	4651      	mov	r1, sl
 800c37e:	4620      	mov	r0, r4
 800c380:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c384:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c6d4 <MFX_emptyAttitude+0x3d8>
 800c388:	eddf ead3 	vldr	s29, [pc, #844]	; 800c6d8 <MFX_emptyAttitude+0x3dc>
 800c38c:	f00b fa96 	bl	80178bc <memset>
 800c390:	edd5 4a00 	vldr	s9, [r5]
 800c394:	ed95 5a01 	vldr	s10, [r5, #4]
 800c398:	edd5 5a02 	vldr	s11, [r5, #8]
 800c39c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c3a0:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c3a4:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c3a8:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c3ac:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c3b0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c3b4:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c3b8:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c3bc:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c3c0:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c3c4:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c3c8:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c3cc:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c3d0:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c3d4:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c3d8:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c3dc:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c3e0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c3e4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c3e8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c3ec:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c3f0:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c3f4:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c3f8:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c3fc:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c400:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c404:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c408:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c40c:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c410:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c414:	ed95 6a03 	vldr	s12, [r5, #12]
 800c418:	edd5 6a04 	vldr	s13, [r5, #16]
 800c41c:	ed95 7a05 	vldr	s14, [r5, #20]
 800c420:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c424:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c428:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c42c:	edcd 6a07 	vstr	s13, [sp, #28]
 800c430:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c434:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c438:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c43c:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c440:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c444:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c448:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c44c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c450:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c454:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c458:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c45c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c460:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c464:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c468:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c46c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c470:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c474:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c478:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c47c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c480:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c484:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c488:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c48c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c490:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c494:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c498:	edd5 7a06 	vldr	s15, [r5, #24]
 800c49c:	edd5 fa07 	vldr	s31, [r5, #28]
 800c4a0:	ed95 fa08 	vldr	s30, [r5, #32]
 800c4a4:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c4a8:	edcd 7a05 	vstr	s15, [sp, #20]
 800c4ac:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c4b0:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c4b4:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c4b8:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c4bc:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c4c0:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c4c4:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c4c8:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c4cc:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c4d0:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c4d4:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c4d8:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c4dc:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c4e0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c4e4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c4e8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c4ec:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c4f0:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c4f4:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c4f8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c4fc:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c500:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c504:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c508:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c50c:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c510:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c514:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c518:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c51c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c51e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c526:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	f8cc 3000 	str.w	r3, [ip]
 800c532:	4651      	mov	r1, sl
 800c534:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c538:	4620      	mov	r0, r4
 800c53a:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c53e:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c542:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c546:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c54a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c54e:	f00b f9b5 	bl	80178bc <memset>
 800c552:	4621      	mov	r1, r4
 800c554:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c558:	a898      	add	r0, sp, #608	; 0x260
 800c55a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c55e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c562:	f00b f983 	bl	801786c <memcpy>
 800c566:	4651      	mov	r1, sl
 800c568:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c56c:	4620      	mov	r0, r4
 800c56e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c572:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c576:	f00b f9a1 	bl	80178bc <memset>
 800c57a:	4621      	mov	r1, r4
 800c57c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c580:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c582:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c586:	f00b f971 	bl	801786c <memcpy>
 800c58a:	4651      	mov	r1, sl
 800c58c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c590:	4620      	mov	r0, r4
 800c592:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c596:	f00b f991 	bl	80178bc <memset>
 800c59a:	4621      	mov	r1, r4
 800c59c:	8037      	strh	r7, [r6, #0]
 800c59e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5a2:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c5a6:	f00b f961 	bl	801786c <memcpy>
 800c5aa:	4651      	mov	r1, sl
 800c5ac:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	ed86 8a01 	vstr	s16, [r6, #4]
 800c5b6:	f00b f981 	bl	80178bc <memset>
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	802f      	strh	r7, [r5, #0]
 800c5be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c5c2:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c5c6:	f00b f951 	bl	801786c <memcpy>
 800c5ca:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c5ce:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c5d2:	2701      	movs	r7, #1
 800c5d4:	9600      	str	r6, [sp, #0]
 800c5d6:	9403      	str	r4, [sp, #12]
 800c5d8:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c6dc <MFX_emptyAttitude+0x3e0>
 800c5dc:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c6e0 <MFX_emptyAttitude+0x3e4>
 800c5e0:	ed85 8a01 	vstr	s16, [r5, #4]
 800c5e4:	483f      	ldr	r0, [pc, #252]	; (800c6e4 <MFX_emptyAttitude+0x3e8>)
 800c5e6:	4d40      	ldr	r5, [pc, #256]	; (800c6e8 <MFX_emptyAttitude+0x3ec>)
 800c5e8:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c70c <MFX_emptyAttitude+0x410>
 800c5ec:	951c      	str	r5, [sp, #112]	; 0x70
 800c5ee:	abf2      	add	r3, sp, #968	; 0x3c8
 800c5f0:	aa96      	add	r2, sp, #600	; 0x258
 800c5f2:	a90d      	add	r1, sp, #52	; 0x34
 800c5f4:	9017      	str	r0, [sp, #92]	; 0x5c
 800c5f6:	4d3d      	ldr	r5, [pc, #244]	; (800c6ec <MFX_emptyAttitude+0x3f0>)
 800c5f8:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	ae27      	add	r6, sp, #156	; 0x9c
 800c600:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c604:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c608:	951b      	str	r5, [sp, #108]	; 0x6c
 800c60a:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c60e:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c612:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c616:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c61a:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c61e:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c622:	f7fe fecf 	bl	800b3c4 <DataHist_parameters>
 800c626:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c628:	4b31      	ldr	r3, [pc, #196]	; (800c6f0 <MFX_emptyAttitude+0x3f4>)
 800c62a:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c62e:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c632:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c636:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c63a:	f8c8 300c 	str.w	r3, [r8, #12]
 800c63e:	4b2d      	ldr	r3, [pc, #180]	; (800c6f4 <MFX_emptyAttitude+0x3f8>)
 800c640:	f8c8 3014 	str.w	r3, [r8, #20]
 800c644:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c648:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c6f8 <MFX_emptyAttitude+0x3fc>
 800c64c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c6fc <MFX_emptyAttitude+0x400>
 800c650:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c700 <MFX_emptyAttitude+0x404>
 800c654:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c704 <MFX_emptyAttitude+0x408>
 800c658:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c708 <MFX_emptyAttitude+0x40c>
 800c65c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c660:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c710 <MFX_emptyAttitude+0x414>
 800c664:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c714 <MFX_emptyAttitude+0x418>
 800c668:	edc8 2a06 	vstr	s5, [r8, #24]
 800c66c:	f04f 0b00 	mov.w	fp, #0
 800c670:	f04f 0c00 	mov.w	ip, #0
 800c674:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c678:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c67c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c680:	ad2d      	add	r5, sp, #180	; 0xb4
 800c682:	469b      	mov	fp, r3
 800c684:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c718 <MFX_emptyAttitude+0x41c>
 800c688:	ed88 3a07 	vstr	s6, [r8, #28]
 800c68c:	f240 1301 	movw	r3, #257	; 0x101
 800c690:	edc8 3a08 	vstr	s7, [r8, #32]
 800c694:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c698:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c69c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c6a0:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c6a4:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c6a8:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c6ac:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c6b0:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c6b4:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c6b8:	f8c8 3000 	str.w	r3, [r8]
 800c6bc:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c6c0:	ed88 8a02 	vstr	s16, [r8, #8]
 800c6c4:	ed88 8a04 	vstr	s16, [r8, #16]
 800c6c8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c6cc:	e028      	b.n	800c720 <MFX_emptyAttitude+0x424>
 800c6ce:	bf00      	nop
 800c6d0:	0801a824 	.word	0x0801a824
 800c6d4:	00000000 	.word	0x00000000
 800c6d8:	447a0000 	.word	0x447a0000
 800c6dc:	3e93ffa3 	.word	0x3e93ffa3
 800c6e0:	3e5cec8f 	.word	0x3e5cec8f
 800c6e4:	3ea25c13 	.word	0x3ea25c13
 800c6e8:	40a00000 	.word	0x40a00000
 800c6ec:	3d57bb3d 	.word	0x3d57bb3d
 800c6f0:	01010100 	.word	0x01010100
 800c6f4:	41200000 	.word	0x41200000
 800c6f8:	3a9d4952 	.word	0x3a9d4952
 800c6fc:	3ac49ba6 	.word	0x3ac49ba6
 800c700:	3b03126f 	.word	0x3b03126f
 800c704:	402ab021 	.word	0x402ab021
 800c708:	3a83126f 	.word	0x3a83126f
 800c70c:	3e006d36 	.word	0x3e006d36
 800c710:	3f639581 	.word	0x3f639581
 800c714:	3f13f7cf 	.word	0x3f13f7cf
 800c718:	3f2ac083 	.word	0x3f2ac083
 800c71c:	3f4ccccd 	.word	0x3f4ccccd
 800c720:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c722:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c726:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c72a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c72e:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c732:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c736:	ab33      	add	r3, sp, #204	; 0xcc
 800c738:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c73c:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c740:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c744:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c746:	ab36      	add	r3, sp, #216	; 0xd8
 800c748:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c74c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c750:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c754:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c756:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c71c <MFX_emptyAttitude+0x420>
 800c75a:	4bd6      	ldr	r3, [pc, #856]	; (800cab4 <MFX_emptyAttitude+0x7b8>)
 800c75c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c760:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c764:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c768:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c76c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c770:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c774:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c778:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c77c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c780:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c784:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c788:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c78c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c790:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c794:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c798:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c79c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c7a0:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c7a4:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c7a8:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c7ac:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c7b0:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c7b4:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c7b8:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c7bc:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c7c0:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c7c4:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c7c8:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c7cc:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c7d0:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c7d4:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c7d8:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c7dc:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c7e0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c7e4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c7e8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c7ec:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c7f0:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c7f4:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c7f8:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c7fc:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c800:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c804:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c808:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c80c:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c810:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c814:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c818:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c81c:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c820:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c824:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c828:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c82c:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c830:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c834:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c838:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c83c:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c840:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c844:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c848:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c84c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c850:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c854:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c858:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c85c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c860:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c864:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c868:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c86c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c870:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c874:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c878:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c87c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c880:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c884:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c888:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c88c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c890:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c894:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c898:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c89c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c8a0:	eddd 6a07 	vldr	s13, [sp, #28]
 800c8a4:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c8a8:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c8ac:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c8b0:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c8b4:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c8b8:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c8bc:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c8c0:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c8c4:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c8c8:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c8cc:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c8d0:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c8d4:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c8d8:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c8dc:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c8e0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c8e4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c8e8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c8ec:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c8f0:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c8f4:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c8f8:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c8fc:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c900:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c904:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c908:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c90c:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c910:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c914:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c918:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c91c:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c920:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c924:	eddd 7a05 	vldr	s15, [sp, #20]
 800c928:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c92c:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c930:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c934:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c938:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c93c:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c940:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c944:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c948:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c94c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c950:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c954:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c958:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c95c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c960:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c964:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c968:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c96c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c970:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c974:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c978:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c97c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c980:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c984:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c988:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c98c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c990:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c994:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c998:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c99c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c9a0:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c9a4:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c9a8:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c9ac:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c9b0:	7820      	ldrb	r0, [r4, #0]
 800c9b2:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c9b6:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c9ba:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c9be:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c9c2:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c9c6:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c9ca:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c9ce:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c9d2:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c9d6:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c9da:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c9de:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c9e2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c9e6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c9ea:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c9ee:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c9f2:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c9f6:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c9fa:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c9fe:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800ca02:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800ca06:	f8cd e00c 	str.w	lr, [sp, #12]
 800ca0a:	9500      	str	r5, [sp, #0]
 800ca0c:	f7fe fcda 	bl	800b3c4 <DataHist_parameters>
 800ca10:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800ca14:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800ca18:	9205      	str	r2, [sp, #20]
 800ca1a:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800ca1e:	ed8b ba00 	vstr	s22, [fp]
 800ca22:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800ca26:	ed83 ba00 	vstr	s22, [r3]
 800ca2a:	9b05      	ldr	r3, [sp, #20]
 800ca2c:	9106      	str	r1, [sp, #24]
 800ca2e:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800ca32:	ed89 ba00 	vstr	s22, [r9]
 800ca36:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800ca3a:	ed83 8a00 	vstr	s16, [r3]
 800ca3e:	9b06      	ldr	r3, [sp, #24]
 800ca40:	9207      	str	r2, [sp, #28]
 800ca42:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800ca46:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800ca4a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800ca4e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800ca52:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800ca56:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800ca5a:	ed8e ba00 	vstr	s22, [lr]
 800ca5e:	ed8c ba00 	vstr	s22, [ip]
 800ca62:	ed87 ba00 	vstr	s22, [r7]
 800ca66:	ed86 ba00 	vstr	s22, [r6]
 800ca6a:	ed85 ba00 	vstr	s22, [r5]
 800ca6e:	ed84 ba00 	vstr	s22, [r4]
 800ca72:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800ca76:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800ca7a:	ed83 ba00 	vstr	s22, [r3]
 800ca7e:	9b07      	ldr	r3, [sp, #28]
 800ca80:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800ca84:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800ca88:	ed80 8a00 	vstr	s16, [r0]
 800ca8c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800ca90:	ed81 ba00 	vstr	s22, [r1]
 800ca94:	ed83 ba00 	vstr	s22, [r3]
 800ca98:	230a      	movs	r3, #10
 800ca9a:	ed82 ba00 	vstr	s22, [r2]
 800ca9e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800caa2:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800caa6:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800caaa:	ecbd 8b10 	vpop	{d8-d15}
 800caae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab2:	bf00      	nop
 800cab4:	3f333333 	.word	0x3f333333

0800cab8 <output_update>:
 800cab8:	ed90 7a00 	vldr	s14, [r0]
 800cabc:	edd0 7a01 	vldr	s15, [r0, #4]
 800cac0:	ed90 5a03 	vldr	s10, [r0, #12]
 800cac4:	edd0 5a02 	vldr	s11, [r0, #8]
 800cac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cacc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cad0:	ee27 6a07 	vmul.f32	s12, s14, s14
 800cad4:	ee67 6a05 	vmul.f32	s13, s14, s10
 800cad8:	ee36 6a24 	vadd.f32	s12, s12, s9
 800cadc:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800cae0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cae4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cae8:	ee36 6a06 	vadd.f32	s12, s12, s12
 800caec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800caf0:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800caf4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800caf8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800cafc:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800cb00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800cb04:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800cb08:	ee37 7a07 	vadd.f32	s14, s14, s14
 800cb0c:	460f      	mov	r7, r1
 800cb0e:	4615      	mov	r5, r2
 800cb10:	461e      	mov	r6, r3
 800cb12:	f1bc 0f00 	cmp.w	ip, #0
 800cb16:	d146      	bne.n	800cba6 <output_update+0xee>
 800cb18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb1c:	eef1 6a66 	vneg.f32	s13, s13
 800cb20:	edc3 7a01 	vstr	s15, [r3, #4]
 800cb24:	edc3 6a00 	vstr	s13, [r3]
 800cb28:	ed83 5a02 	vstr	s10, [r3, #8]
 800cb2c:	4662      	mov	r2, ip
 800cb2e:	4629      	mov	r1, r5
 800cb30:	4604      	mov	r4, r0
 800cb32:	f7ff f955 	bl	800bde0 <q2hpr>
 800cb36:	edd5 6a01 	vldr	s13, [r5, #4]
 800cb3a:	ed95 7a00 	vldr	s14, [r5]
 800cb3e:	edd5 7a02 	vldr	s15, [r5, #8]
 800cb42:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800cc54 <output_update+0x19c>
 800cb46:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cb4a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800cb4e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800cb52:	ed85 7a00 	vstr	s14, [r5]
 800cb56:	edc5 6a01 	vstr	s13, [r5, #4]
 800cb5a:	edc5 7a02 	vstr	s15, [r5, #8]
 800cb5e:	ed97 7a01 	vldr	s14, [r7, #4]
 800cb62:	edd6 7a00 	vldr	s15, [r6]
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb6c:	edc8 7a00 	vstr	s15, [r8]
 800cb70:	ed97 7a00 	vldr	s14, [r7]
 800cb74:	edd6 7a01 	vldr	s15, [r6, #4]
 800cb78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb7c:	edc8 7a01 	vstr	s15, [r8, #4]
 800cb80:	edd6 7a02 	vldr	s15, [r6, #8]
 800cb84:	ed97 7a02 	vldr	s14, [r7, #8]
 800cb88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb8c:	edc8 7a02 	vstr	s15, [r8, #8]
 800cb90:	edd4 7a02 	vldr	s15, [r4, #8]
 800cb94:	6863      	ldr	r3, [r4, #4]
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	eef1 7a67 	vneg.f32	s15, s15
 800cb9c:	6062      	str	r2, [r4, #4]
 800cb9e:	edc4 7a02 	vstr	s15, [r4, #8]
 800cba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba6:	f1bc 0f01 	cmp.w	ip, #1
 800cbaa:	d015      	beq.n	800cbd8 <output_update+0x120>
 800cbac:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cc54 <output_update+0x19c>
 800cbb0:	edd2 6a00 	vldr	s13, [r2]
 800cbb4:	ed92 7a01 	vldr	s14, [r2, #4]
 800cbb8:	edd2 7a02 	vldr	s15, [r2, #8]
 800cbbc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cbc0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cbc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cbc8:	edc2 6a00 	vstr	s13, [r2]
 800cbcc:	ed82 7a01 	vstr	s14, [r2, #4]
 800cbd0:	edc2 7a02 	vstr	s15, [r2, #8]
 800cbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbdc:	ee36 6a65 	vsub.f32	s12, s12, s11
 800cbe0:	eef1 6a66 	vneg.f32	s13, s13
 800cbe4:	edc3 7a00 	vstr	s15, [r3]
 800cbe8:	ed83 6a02 	vstr	s12, [r3, #8]
 800cbec:	edc3 6a01 	vstr	s13, [r3, #4]
 800cbf0:	4662      	mov	r2, ip
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	f7ff f8f4 	bl	800bde0 <q2hpr>
 800cbf8:	edd5 6a00 	vldr	s13, [r5]
 800cbfc:	ed95 7a01 	vldr	s14, [r5, #4]
 800cc00:	edd5 7a02 	vldr	s15, [r5, #8]
 800cc04:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800cc54 <output_update+0x19c>
 800cc08:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cc0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cc10:	ee66 6a86 	vmul.f32	s13, s13, s12
 800cc14:	ed85 7a01 	vstr	s14, [r5, #4]
 800cc18:	edc5 6a00 	vstr	s13, [r5]
 800cc1c:	edc5 7a02 	vstr	s15, [r5, #8]
 800cc20:	ed97 7a00 	vldr	s14, [r7]
 800cc24:	edd6 7a00 	vldr	s15, [r6]
 800cc28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc2c:	edc8 7a00 	vstr	s15, [r8]
 800cc30:	ed97 7a01 	vldr	s14, [r7, #4]
 800cc34:	edd6 7a01 	vldr	s15, [r6, #4]
 800cc38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc3c:	edc8 7a01 	vstr	s15, [r8, #4]
 800cc40:	edd6 7a02 	vldr	s15, [r6, #8]
 800cc44:	ed97 7a02 	vldr	s14, [r7, #8]
 800cc48:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc4c:	edc8 7a02 	vstr	s15, [r8, #8]
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	42652ee1 	.word	0x42652ee1

0800cc58 <kalman_3gyro.constprop.0>:
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	ed2d 8b10 	vpush	{d8-d15}
 800cc60:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800cc64:	edd2 9a02 	vldr	s19, [r2, #8]
 800cc68:	edd2 8a03 	vldr	s17, [r2, #12]
 800cc6c:	edd2 6a04 	vldr	s13, [r2, #16]
 800cc70:	ed92 6a05 	vldr	s12, [r2, #20]
 800cc74:	6854      	ldr	r4, [r2, #4]
 800cc76:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800cc7a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cc7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc82:	4683      	mov	fp, r0
 800cc84:	edd2 7a00 	vldr	s15, [r2]
 800cc88:	48e3      	ldr	r0, [pc, #908]	; (800d018 <kalman_3gyro.constprop.0+0x3c0>)
 800cc8a:	9108      	str	r1, [sp, #32]
 800cc8c:	904a      	str	r0, [sp, #296]	; 0x128
 800cc8e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800cc92:	460d      	mov	r5, r1
 800cc94:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800cc98:	2100      	movs	r1, #0
 800cc9a:	9328      	str	r3, [sp, #160]	; 0xa0
 800cc9c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800cca0:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800cca4:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800cca8:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800ccac:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800ccb0:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800ccb4:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800ccb8:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800ccbc:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800ccc0:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800ccc4:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800ccc8:	946f      	str	r4, [sp, #444]	; 0x1bc
 800ccca:	9470      	str	r4, [sp, #448]	; 0x1c0
 800cccc:	9471      	str	r4, [sp, #452]	; 0x1c4
 800ccce:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800ccd2:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800ccd6:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800ccda:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800ccde:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800cce2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800cce6:	eeb0 8a60 	vmov.f32	s16, s1
 800ccea:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800ccee:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800ccf2:	ed8d 1a07 	vstr	s2, [sp, #28]
 800ccf6:	f00a fde1 	bl	80178bc <memset>
 800ccfa:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800ccfe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cd02:	600b      	str	r3, [r1, #0]
 800cd04:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800cd08:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800cd0c:	600b      	str	r3, [r1, #0]
 800cd0e:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800cd12:	600b      	str	r3, [r1, #0]
 800cd14:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800cd18:	600b      	str	r3, [r1, #0]
 800cd1a:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800cd1e:	600b      	str	r3, [r1, #0]
 800cd20:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800cd24:	600b      	str	r3, [r1, #0]
 800cd26:	2a00      	cmp	r2, #0
 800cd28:	f001 82c2 	beq.w	800e2b0 <kalman_3gyro.constprop.0+0x1658>
 800cd2c:	ed95 5a02 	vldr	s10, [r5, #8]
 800cd30:	edd5 5a01 	vldr	s11, [r5, #4]
 800cd34:	ed95 3a00 	vldr	s6, [r5]
 800cd38:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800cd3c:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800cd40:	ee35 4a05 	vadd.f32	s8, s10, s10
 800cd44:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800cd48:	ee25 5a27 	vmul.f32	s10, s10, s15
 800cd4c:	ee63 7a27 	vmul.f32	s15, s6, s15
 800cd50:	ee33 3a03 	vadd.f32	s6, s6, s6
 800cd54:	9b08      	ldr	r3, [sp, #32]
 800cd56:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800cd5a:	ed82 4a00 	vstr	s8, [r2]
 800cd5e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800cd62:	edc2 4a00 	vstr	s9, [r2]
 800cd66:	ed93 6a05 	vldr	s12, [r3, #20]
 800cd6a:	edd3 6a04 	vldr	s13, [r3, #16]
 800cd6e:	ed93 7a03 	vldr	s14, [r3, #12]
 800cd72:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800cd76:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800cd7a:	ed82 5a00 	vstr	s10, [r2]
 800cd7e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800cd82:	ed82 3a00 	vstr	s6, [r2]
 800cd86:	eef1 3a46 	vneg.f32	s7, s12
 800cd8a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800cd8e:	edc2 5a00 	vstr	s11, [r2]
 800cd92:	eeb1 4a66 	vneg.f32	s8, s13
 800cd96:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800cd9a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800cd9e:	edc2 7a00 	vstr	s15, [r2]
 800cda2:	ee34 3a04 	vadd.f32	s6, s8, s8
 800cda6:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800cdaa:	eef1 4a47 	vneg.f32	s9, s14
 800cdae:	ed82 5a00 	vstr	s10, [r2]
 800cdb2:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800cdb6:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800cdba:	ed81 3a00 	vstr	s6, [r1]
 800cdbe:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800cdc2:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800cdc6:	ed81 5a00 	vstr	s10, [r1]
 800cdca:	ee77 7a07 	vadd.f32	s15, s14, s14
 800cdce:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800cdd2:	edc1 5a00 	vstr	s11, [r1]
 800cdd6:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800cdda:	edc1 7a00 	vstr	s15, [r1]
 800cdde:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800cde2:	2300      	movs	r3, #0
 800cde4:	600b      	str	r3, [r1, #0]
 800cde6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800cdea:	ee76 2a06 	vadd.f32	s5, s12, s12
 800cdee:	600b      	str	r3, [r1, #0]
 800cdf0:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800cdf4:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800cdf8:	600b      	str	r3, [r1, #0]
 800cdfa:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800cdfe:	edc2 2a00 	vstr	s5, [r2]
 800ce02:	600b      	str	r3, [r1, #0]
 800ce04:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800ce08:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800ce0c:	600b      	str	r3, [r1, #0]
 800ce0e:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800ce12:	a87b      	add	r0, sp, #492	; 0x1ec
 800ce14:	600b      	str	r3, [r1, #0]
 800ce16:	2230      	movs	r2, #48	; 0x30
 800ce18:	2100      	movs	r1, #0
 800ce1a:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800ce1e:	934b      	str	r3, [sp, #300]	; 0x12c
 800ce20:	934f      	str	r3, [sp, #316]	; 0x13c
 800ce22:	9353      	str	r3, [sp, #332]	; 0x14c
 800ce24:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800ce28:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800ce2c:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800ce30:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800ce34:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800ce38:	942c      	str	r4, [sp, #176]	; 0xb0
 800ce3a:	f00a fd3f 	bl	80178bc <memset>
 800ce3e:	eddb 6a06 	vldr	s13, [fp, #24]
 800ce42:	ed9b 7a07 	vldr	s14, [fp, #28]
 800ce46:	eddb 7a08 	vldr	s15, [fp, #32]
 800ce4a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800ce4e:	ee68 6a26 	vmul.f32	s13, s16, s13
 800ce52:	ee28 7a07 	vmul.f32	s14, s16, s14
 800ce56:	ee68 7a27 	vmul.f32	s15, s16, s15
 800ce5a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800ce5e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800ce62:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f043 84a8 	bne.w	80107bc <kalman_3gyro.constprop.0+0x3b64>
 800ce6c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f043 81e7 	bne.w	8010244 <kalman_3gyro.constprop.0+0x35ec>
 800ce76:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800ce80:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800ce84:	9310      	str	r3, [sp, #64]	; 0x40
 800ce86:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800ce8a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800ce8e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800ce92:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce94:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800ce98:	edd0 7a00 	vldr	s15, [r0]
 800ce9c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cea0:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cea4:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cea8:	ed93 6a00 	vldr	s12, [r3]
 800ceac:	ed91 7a00 	vldr	s14, [r1]
 800ceb0:	edd2 6a00 	vldr	s13, [r2]
 800ceb4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800ceb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cebc:	2300      	movs	r3, #0
 800cebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec2:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cec6:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800ceca:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cece:	933a      	str	r3, [sp, #232]	; 0xe8
 800ced0:	933b      	str	r3, [sp, #236]	; 0xec
 800ced2:	933c      	str	r3, [sp, #240]	; 0xf0
 800ced4:	933d      	str	r3, [sp, #244]	; 0xf4
 800ced6:	d14e      	bne.n	800cf76 <kalman_3gyro.constprop.0+0x31e>
 800ced8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee0:	d149      	bne.n	800cf76 <kalman_3gyro.constprop.0+0x31e>
 800cee2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceea:	d144      	bne.n	800cf76 <kalman_3gyro.constprop.0+0x31e>
 800ceec:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef4:	d13f      	bne.n	800cf76 <kalman_3gyro.constprop.0+0x31e>
 800cef6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cef8:	9336      	str	r3, [sp, #216]	; 0xd8
 800cefa:	7802      	ldrb	r2, [r0, #0]
 800cefc:	9337      	str	r3, [sp, #220]	; 0xdc
 800cefe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf02:	9338      	str	r3, [sp, #224]	; 0xe0
 800cf04:	2300      	movs	r3, #0
 800cf06:	ed90 7a03 	vldr	s14, [r0, #12]
 800cf0a:	edd0 6a01 	vldr	s13, [r0, #4]
 800cf0e:	edd0 7a02 	vldr	s15, [r0, #8]
 800cf12:	9139      	str	r1, [sp, #228]	; 0xe4
 800cf14:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cf18:	2a00      	cmp	r2, #0
 800cf1a:	f003 8568 	beq.w	80109ee <kalman_3gyro.constprop.0+0x3d96>
 800cf1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf22:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cf26:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cf2a:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cf2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf36:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cf3a:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cf3e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cf42:	2100      	movs	r1, #0
 800cf44:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800cf48:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800cf4c:	f00a fcb6 	bl	80178bc <memset>
 800cf50:	4b32      	ldr	r3, [pc, #200]	; (800d01c <kalman_3gyro.constprop.0+0x3c4>)
 800cf52:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800cf56:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800cf5a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800cf5e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800cf62:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800cf66:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800cf6a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800cf6e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800cf72:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800d020 <kalman_3gyro.constprop.0+0x3c8>
 800cf7c:	ed93 7a01 	vldr	s14, [r3, #4]
 800cf80:	edd3 5a00 	vldr	s11, [r3]
 800cf84:	edd3 7a02 	vldr	s15, [r3, #8]
 800cf88:	ee67 6a07 	vmul.f32	s13, s14, s14
 800cf8c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cf90:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800cf94:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cf98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9c:	f101 8127 	bmi.w	800e1ee <kalman_3gyro.constprop.0+0x1596>
 800cfa0:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800cfa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfa8:	ee79 6a66 	vsub.f32	s13, s18, s13
 800cfac:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800cfb0:	eef0 6ae6 	vabs.f32	s13, s13
 800cfb4:	ee76 aaea 	vsub.f32	s21, s13, s21
 800cfb8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800cfbc:	ed93 5a04 	vldr	s10, [r3, #16]
 800cfc0:	ed93 3a03 	vldr	s6, [r3, #12]
 800cfc4:	edd3 1a05 	vldr	s3, [r3, #20]
 800cfc8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800d020 <kalman_3gyro.constprop.0+0x3c8>
 800cfcc:	9b04      	ldr	r3, [sp, #16]
 800cfce:	ed95 ca00 	vldr	s24, [r5]
 800cfd2:	ed93 ba00 	vldr	s22, [r3]
 800cfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfda:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800cfde:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800cfe2:	461e      	mov	r6, r3
 800cfe4:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800cfe8:	9502      	str	r5, [sp, #8]
 800cfea:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800cfee:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800cff2:	9327      	str	r3, [sp, #156]	; 0x9c
 800cff4:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800cff8:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800cffc:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800d000:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800d004:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800d008:	9501      	str	r5, [sp, #4]
 800d00a:	ee65 6a05 	vmul.f32	s13, s10, s10
 800d00e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800d012:	eee3 6a03 	vfma.f32	s13, s6, s6
 800d016:	e009      	b.n	800d02c <kalman_3gyro.constprop.0+0x3d4>
 800d018:	3a9d4952 	.word	0x3a9d4952
 800d01c:	40a00000 	.word	0x40a00000
 800d020:	3c23d70a 	.word	0x3c23d70a
 800d024:	3dcccccd 	.word	0x3dcccccd
 800d028:	4b000000 	.word	0x4b000000
 800d02c:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800d030:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800d034:	ee25 8a82 	vmul.f32	s16, s11, s4
 800d038:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800d03c:	950c      	str	r5, [sp, #48]	; 0x30
 800d03e:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800d042:	ee67 fa02 	vmul.f32	s31, s14, s4
 800d046:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	bf58      	it	pl
 800d050:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800d054:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800d058:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800d05c:	bf48      	it	mi
 800d05e:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800d024 <kalman_3gyro.constprop.0+0x3cc>
 800d062:	ed96 6a00 	vldr	s12, [r6]
 800d066:	edda 4a00 	vldr	s9, [sl]
 800d06a:	ed93 fa00 	vldr	s30, [r3]
 800d06e:	ed90 ea00 	vldr	s28, [r0]
 800d072:	edd4 3a00 	vldr	s7, [r4]
 800d076:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800d07a:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800d07e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800d082:	9617      	str	r6, [sp, #92]	; 0x5c
 800d084:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800d088:	961a      	str	r6, [sp, #104]	; 0x68
 800d08a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800d08e:	9611      	str	r6, [sp, #68]	; 0x44
 800d090:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800d094:	9618      	str	r6, [sp, #96]	; 0x60
 800d096:	9e02      	ldr	r6, [sp, #8]
 800d098:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800d09c:	9303      	str	r3, [sp, #12]
 800d09e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800d0a2:	ee27 2a82 	vmul.f32	s4, s15, s4
 800d0a6:	ee23 3a26 	vmul.f32	s6, s6, s13
 800d0aa:	ee25 5a26 	vmul.f32	s10, s10, s13
 800d0ae:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800d0b2:	edd1 6a00 	vldr	s13, [r1]
 800d0b6:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800d0ba:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800d0be:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800d0c2:	edcd 6a05 	vstr	s13, [sp, #20]
 800d0c6:	ed8d 6a06 	vstr	s12, [sp, #24]
 800d0ca:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800d0ce:	ed92 6a00 	vldr	s12, [r2]
 800d0d2:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800d0d6:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800d0da:	edd6 2a00 	vldr	s5, [r6]
 800d0de:	eddc 4a00 	vldr	s9, [ip]
 800d0e2:	9e01      	ldr	r6, [sp, #4]
 800d0e4:	edd0 ca00 	vldr	s25, [r0]
 800d0e8:	ed96 1a00 	vldr	s2, [r6]
 800d0ec:	9803      	ldr	r0, [sp, #12]
 800d0ee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d0f0:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800d0f4:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800d0f8:	eddc 0a00 	vldr	s1, [ip]
 800d0fc:	ed96 da00 	vldr	s26, [r6]
 800d100:	edd0 4a00 	vldr	s9, [r0]
 800d104:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d106:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800d10a:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800d10e:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800d112:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800d116:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800d11a:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800d11e:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800d122:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800d126:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800d12a:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800d12e:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800d132:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800d136:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800d13a:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800d13e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800d142:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800d146:	edd6 4a00 	vldr	s9, [r6]
 800d14a:	edd9 6a00 	vldr	s13, [r9]
 800d14e:	edde ba00 	vldr	s23, [lr]
 800d152:	ed95 4a00 	vldr	s8, [r5]
 800d156:	ed94 0a00 	vldr	s0, [r4]
 800d15a:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800d15e:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800d162:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800d166:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800d16a:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800d16e:	edd9 ea00 	vldr	s29, [r9]
 800d172:	edd1 2a00 	vldr	s5, [r1]
 800d176:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800d17a:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800d17e:	ed92 1a00 	vldr	s2, [r2]
 800d182:	edd3 ca00 	vldr	s25, [r3]
 800d186:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800d18a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800d18e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d190:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d192:	edd3 4a00 	vldr	s9, [r3]
 800d196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d198:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800d19c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800d1a0:	edd3 fa00 	vldr	s31, [r3]
 800d1a4:	eef0 4a6f 	vmov.f32	s9, s31
 800d1a8:	edd6 fa00 	vldr	s31, [r6]
 800d1ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800d1ae:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800d1b2:	eea3 5a08 	vfma.f32	s10, s6, s16
 800d1b6:	ed96 3a00 	vldr	s6, [r6]
 800d1ba:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800d1bc:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800d1c0:	ee25 8aad 	vmul.f32	s16, s11, s27
 800d1c4:	eddd 5a06 	vldr	s11, [sp, #24]
 800d1c8:	edd6 fa00 	vldr	s31, [r6]
 800d1cc:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d1ce:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800d1d2:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800d1d6:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800d1da:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800d1de:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800d1e2:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800d1e6:	edd8 5a00 	vldr	s11, [r8]
 800d1ea:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800d1ee:	eef0 5a44 	vmov.f32	s11, s8
 800d1f2:	ed97 4a00 	vldr	s8, [r7]
 800d1f6:	ee76 6aae 	vadd.f32	s13, s13, s29
 800d1fa:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800d1fe:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800d202:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800d206:	eede 2a83 	vfnms.f32	s5, s29, s6
 800d20a:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800d20e:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800d212:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800d216:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800d21a:	eede 4a03 	vfnms.f32	s9, s28, s6
 800d21e:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800d222:	ee72 2aac 	vadd.f32	s5, s5, s25
 800d226:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800d22a:	edd6 ca00 	vldr	s25, [r6]
 800d22e:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800d232:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800d234:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800d238:	ed96 ea00 	vldr	s28, [r6]
 800d23c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d23e:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800d242:	ed96 da00 	vldr	s26, [r6]
 800d246:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d248:	ee7f faac 	vadd.f32	s31, s31, s25
 800d24c:	edd6 ca00 	vldr	s25, [r6]
 800d250:	eedd ca03 	vfnms.f32	s25, s26, s6
 800d254:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800d258:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d25a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800d25e:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800d262:	eee0 5a03 	vfma.f32	s11, s0, s6
 800d266:	eddd ba05 	vldr	s23, [sp, #20]
 800d26a:	ed96 0a00 	vldr	s0, [r6]
 800d26e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800d270:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800d274:	eeee fa03 	vfma.f32	s31, s28, s6
 800d278:	eead 6a03 	vfma.f32	s12, s26, s6
 800d27c:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800d280:	eea0 4a03 	vfma.f32	s8, s0, s6
 800d284:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800d288:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800d024 <kalman_3gyro.constprop.0+0x3cc>
 800d28c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800d290:	ee2c ca00 	vmul.f32	s24, s24, s0
 800d294:	ee6b ba80 	vmul.f32	s23, s23, s0
 800d298:	ed96 1a00 	vldr	s2, [r6]
 800d29c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800d2a0:	eee0 4a83 	vfma.f32	s9, s1, s6
 800d2a4:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800d2a8:	ee6f faab 	vmul.f32	s31, s31, s23
 800d2ac:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800d2b0:	ee60 6a26 	vmul.f32	s13, s0, s13
 800d2b4:	eddc 0a00 	vldr	s1, [ip]
 800d2b8:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800d2bc:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800d2c0:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d2c4:	eea0 1a83 	vfma.f32	s2, s1, s6
 800d2c8:	ee26 6a06 	vmul.f32	s12, s12, s12
 800d2cc:	ee6f faaf 	vmul.f32	s31, s31, s31
 800d2d0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800d2d4:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800d2d8:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800d2dc:	eee4 fa04 	vfma.f32	s31, s8, s8
 800d2e0:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800d2e4:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800d2e8:	ee60 2a22 	vmul.f32	s5, s0, s5
 800d2ec:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800d2f0:	eee1 fa01 	vfma.f32	s31, s2, s2
 800d2f4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d2f8:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d2fc:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800d028 <kalman_3gyro.constprop.0+0x3d0>
 800d300:	eef0 4ac8 	vabs.f32	s9, s16
 800d304:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30c:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d310:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d314:	eef1 caef 	vsqrt.f32	s25, s31
 800d318:	eef1 bae6 	vsqrt.f32	s23, s13
 800d31c:	ee67 daad 	vmul.f32	s27, s15, s27
 800d320:	eeb0 ca45 	vmov.f32	s24, s10
 800d324:	d517      	bpl.n	800d356 <kalman_3gyro.constprop.0+0x6fe>
 800d326:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d32a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d332:	f2c1 806f 	blt.w	800e414 <kalman_3gyro.constprop.0+0x17bc>
 800d336:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d33a:	ee17 0a90 	vmov	r0, s15
 800d33e:	f7f3 f903 	bl	8000548 <__aeabi_f2d>
 800d342:	ec41 0b10 	vmov	d0, r0, r1
 800d346:	f008 fbcf 	bl	8015ae8 <floor>
 800d34a:	ec51 0b10 	vmov	r0, r1, d0
 800d34e:	f7f3 fc2b 	bl	8000ba8 <__aeabi_d2f>
 800d352:	ee08 0a10 	vmov	s16, r0
 800d356:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800d028 <kalman_3gyro.constprop.0+0x3d0>
 800d35a:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d35e:	eef0 6ace 	vabs.f32	s13, s28
 800d362:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36a:	d517      	bpl.n	800d39c <kalman_3gyro.constprop.0+0x744>
 800d36c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d370:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d378:	f2c1 8040 	blt.w	800e3fc <kalman_3gyro.constprop.0+0x17a4>
 800d37c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d380:	ee17 0a90 	vmov	r0, s15
 800d384:	f7f3 f8e0 	bl	8000548 <__aeabi_f2d>
 800d388:	ec41 0b10 	vmov	d0, r0, r1
 800d38c:	f008 fbac 	bl	8015ae8 <floor>
 800d390:	ec51 0b10 	vmov	r0, r1, d0
 800d394:	f7f3 fc08 	bl	8000ba8 <__aeabi_d2f>
 800d398:	ee0e 0a10 	vmov	s28, r0
 800d39c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800d028 <kalman_3gyro.constprop.0+0x3d0>
 800d3a0:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d3a4:	eeb0 7aed 	vabs.f32	s14, s27
 800d3a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b0:	d517      	bpl.n	800d3e2 <kalman_3gyro.constprop.0+0x78a>
 800d3b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3b6:	eef4 dae7 	vcmpe.f32	s27, s15
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	f2c1 8011 	blt.w	800e3e4 <kalman_3gyro.constprop.0+0x178c>
 800d3c2:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d3c6:	ee17 0a90 	vmov	r0, s15
 800d3ca:	f7f3 f8bd 	bl	8000548 <__aeabi_f2d>
 800d3ce:	ec41 0b10 	vmov	d0, r0, r1
 800d3d2:	f008 fb89 	bl	8015ae8 <floor>
 800d3d6:	ec51 0b10 	vmov	r0, r1, d0
 800d3da:	f7f3 fbe5 	bl	8000ba8 <__aeabi_d2f>
 800d3de:	ee0d 0a90 	vmov	s27, r0
 800d3e2:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d3e6:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d3ea:	1e61      	subs	r1, r4, #1
 800d3ec:	b249      	sxtb	r1, r1
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	dd1a      	ble.n	800d428 <kalman_3gyro.constprop.0+0x7d0>
 800d3f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d3f6:	1ea0      	subs	r0, r4, #2
 800d3f8:	0089      	lsls	r1, r1, #2
 800d3fa:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d3fe:	b2c0      	uxtb	r0, r0
 800d400:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d404:	440a      	add	r2, r1
 800d406:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d40a:	445b      	add	r3, fp
 800d40c:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d410:	6819      	ldr	r1, [r3, #0]
 800d412:	6858      	ldr	r0, [r3, #4]
 800d414:	60d9      	str	r1, [r3, #12]
 800d416:	6899      	ldr	r1, [r3, #8]
 800d418:	6118      	str	r0, [r3, #16]
 800d41a:	6159      	str	r1, [r3, #20]
 800d41c:	3b0c      	subs	r3, #12
 800d41e:	4293      	cmp	r3, r2
 800d420:	d1f6      	bne.n	800d410 <kalman_3gyro.constprop.0+0x7b8>
 800d422:	9b04      	ldr	r3, [sp, #16]
 800d424:	ed93 ba00 	vldr	s22, [r3]
 800d428:	ed88 8a00 	vstr	s16, [r8]
 800d42c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d430:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d434:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d436:	ed83 ea00 	vstr	s28, [r3]
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d6d4 <kalman_3gyro.constprop.0+0xa7c>
 800d440:	edc3 da00 	vstr	s27, [r3]
 800d444:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d448:	3301      	adds	r3, #1
 800d44a:	b2db      	uxtb	r3, r3
 800d44c:	429c      	cmp	r4, r3
 800d44e:	bf28      	it	cs
 800d450:	461c      	movcs	r4, r3
 800d452:	9b08      	ldr	r3, [sp, #32]
 800d454:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d458:	edd3 da03 	vldr	s27, [r3, #12]
 800d45c:	ed93 ba04 	vldr	s22, [r3, #16]
 800d460:	edd3 6a05 	vldr	s13, [r3, #20]
 800d464:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d468:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d46c:	eeb0 7aed 	vabs.f32	s14, s27
 800d470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d478:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d47c:	d517      	bpl.n	800d4ae <kalman_3gyro.constprop.0+0x856>
 800d47e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d482:	eef4 dae7 	vcmpe.f32	s27, s15
 800d486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48a:	f2c0 879f 	blt.w	800e3cc <kalman_3gyro.constprop.0+0x1774>
 800d48e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d492:	ee17 0a90 	vmov	r0, s15
 800d496:	f7f3 f857 	bl	8000548 <__aeabi_f2d>
 800d49a:	ec41 0b10 	vmov	d0, r0, r1
 800d49e:	f008 fb23 	bl	8015ae8 <floor>
 800d4a2:	ec51 0b10 	vmov	r0, r1, d0
 800d4a6:	f7f3 fb7f 	bl	8000ba8 <__aeabi_d2f>
 800d4aa:	ee0d 0a90 	vmov	s27, r0
 800d4ae:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d6d4 <kalman_3gyro.constprop.0+0xa7c>
 800d4b2:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d4b6:	eeb0 7acb 	vabs.f32	s14, s22
 800d4ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c2:	d517      	bpl.n	800d4f4 <kalman_3gyro.constprop.0+0x89c>
 800d4c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d4c8:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	f2c0 8770 	blt.w	800e3b4 <kalman_3gyro.constprop.0+0x175c>
 800d4d4:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d4d8:	ee17 0a90 	vmov	r0, s15
 800d4dc:	f7f3 f834 	bl	8000548 <__aeabi_f2d>
 800d4e0:	ec41 0b10 	vmov	d0, r0, r1
 800d4e4:	f008 fb00 	bl	8015ae8 <floor>
 800d4e8:	ec51 0b10 	vmov	r0, r1, d0
 800d4ec:	f7f3 fb5c 	bl	8000ba8 <__aeabi_d2f>
 800d4f0:	ee0b 0a10 	vmov	s22, r0
 800d4f4:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d6d4 <kalman_3gyro.constprop.0+0xa7c>
 800d4f8:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d4fc:	eeb0 7ac8 	vabs.f32	s14, s16
 800d500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d508:	d517      	bpl.n	800d53a <kalman_3gyro.constprop.0+0x8e2>
 800d50a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d50e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d516:	f2c0 8741 	blt.w	800e39c <kalman_3gyro.constprop.0+0x1744>
 800d51a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d51e:	ee17 0a90 	vmov	r0, s15
 800d522:	f7f3 f811 	bl	8000548 <__aeabi_f2d>
 800d526:	ec41 0b10 	vmov	d0, r0, r1
 800d52a:	f008 fadd 	bl	8015ae8 <floor>
 800d52e:	ec51 0b10 	vmov	r0, r1, d0
 800d532:	f7f3 fb39 	bl	8000ba8 <__aeabi_d2f>
 800d536:	ee08 0a10 	vmov	s16, r0
 800d53a:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d53e:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d542:	1e61      	subs	r1, r4, #1
 800d544:	b249      	sxtb	r1, r1
 800d546:	2900      	cmp	r1, #0
 800d548:	dd17      	ble.n	800d57a <kalman_3gyro.constprop.0+0x922>
 800d54a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d54e:	1ea2      	subs	r2, r4, #2
 800d550:	0089      	lsls	r1, r1, #2
 800d552:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d556:	b2d2      	uxtb	r2, r2
 800d558:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d55c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d560:	4401      	add	r1, r0
 800d562:	445b      	add	r3, fp
 800d564:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	6858      	ldr	r0, [r3, #4]
 800d56c:	60da      	str	r2, [r3, #12]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	6118      	str	r0, [r3, #16]
 800d572:	615a      	str	r2, [r3, #20]
 800d574:	3b0c      	subs	r3, #12
 800d576:	4299      	cmp	r1, r3
 800d578:	d1f6      	bne.n	800d568 <kalman_3gyro.constprop.0+0x910>
 800d57a:	9b02      	ldr	r3, [sp, #8]
 800d57c:	edc7 da00 	vstr	s27, [r7]
 800d580:	ed83 ba00 	vstr	s22, [r3]
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d6d4 <kalman_3gyro.constprop.0+0xa7c>
 800d58a:	ed83 8a00 	vstr	s16, [r3]
 800d58e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d592:	3301      	adds	r3, #1
 800d594:	b2db      	uxtb	r3, r3
 800d596:	429c      	cmp	r4, r3
 800d598:	bf28      	it	cs
 800d59a:	461c      	movcs	r4, r3
 800d59c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d59e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d5a2:	ed93 7a00 	vldr	s14, [r3]
 800d5a6:	9b08      	ldr	r3, [sp, #32]
 800d5a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d5ac:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d5b0:	edd3 da06 	vldr	s27, [r3, #24]
 800d5b4:	ed93 ba07 	vldr	s22, [r3, #28]
 800d5b8:	edd3 6a08 	vldr	s13, [r3, #32]
 800d5bc:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d5c0:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d5c4:	eeb0 7aed 	vabs.f32	s14, s27
 800d5c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d0:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d5d4:	d517      	bpl.n	800d606 <kalman_3gyro.constprop.0+0x9ae>
 800d5d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d5da:	eef4 dae7 	vcmpe.f32	s27, s15
 800d5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e2:	f2c0 86cf 	blt.w	800e384 <kalman_3gyro.constprop.0+0x172c>
 800d5e6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d5ea:	ee17 0a90 	vmov	r0, s15
 800d5ee:	f7f2 ffab 	bl	8000548 <__aeabi_f2d>
 800d5f2:	ec41 0b10 	vmov	d0, r0, r1
 800d5f6:	f008 fa77 	bl	8015ae8 <floor>
 800d5fa:	ec51 0b10 	vmov	r0, r1, d0
 800d5fe:	f7f3 fad3 	bl	8000ba8 <__aeabi_d2f>
 800d602:	ee0d 0a90 	vmov	s27, r0
 800d606:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d6d4 <kalman_3gyro.constprop.0+0xa7c>
 800d60a:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d60e:	eeb0 7acb 	vabs.f32	s14, s22
 800d612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61a:	d517      	bpl.n	800d64c <kalman_3gyro.constprop.0+0x9f4>
 800d61c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d620:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d628:	f2c0 86a0 	blt.w	800e36c <kalman_3gyro.constprop.0+0x1714>
 800d62c:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d630:	ee17 0a90 	vmov	r0, s15
 800d634:	f7f2 ff88 	bl	8000548 <__aeabi_f2d>
 800d638:	ec41 0b10 	vmov	d0, r0, r1
 800d63c:	f008 fa54 	bl	8015ae8 <floor>
 800d640:	ec51 0b10 	vmov	r0, r1, d0
 800d644:	f7f3 fab0 	bl	8000ba8 <__aeabi_d2f>
 800d648:	ee0b 0a10 	vmov	s22, r0
 800d64c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d6d4 <kalman_3gyro.constprop.0+0xa7c>
 800d650:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d654:	eeb0 7ac8 	vabs.f32	s14, s16
 800d658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d660:	d517      	bpl.n	800d692 <kalman_3gyro.constprop.0+0xa3a>
 800d662:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d666:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66e:	f2c0 8671 	blt.w	800e354 <kalman_3gyro.constprop.0+0x16fc>
 800d672:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d676:	ee17 0a90 	vmov	r0, s15
 800d67a:	f7f2 ff65 	bl	8000548 <__aeabi_f2d>
 800d67e:	ec41 0b10 	vmov	d0, r0, r1
 800d682:	f008 fa31 	bl	8015ae8 <floor>
 800d686:	ec51 0b10 	vmov	r0, r1, d0
 800d68a:	f7f3 fa8d 	bl	8000ba8 <__aeabi_d2f>
 800d68e:	ee08 0a10 	vmov	s16, r0
 800d692:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d696:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d69a:	1e63      	subs	r3, r4, #1
 800d69c:	b25b      	sxtb	r3, r3
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	dd1c      	ble.n	800d6dc <kalman_3gyro.constprop.0+0xa84>
 800d6a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d6a6:	1ea2      	subs	r2, r4, #2
 800d6a8:	0099      	lsls	r1, r3, #2
 800d6aa:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d6b4:	4408      	add	r0, r1
 800d6b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d6ba:	445b      	add	r3, fp
 800d6bc:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	6859      	ldr	r1, [r3, #4]
 800d6c4:	60da      	str	r2, [r3, #12]
 800d6c6:	689a      	ldr	r2, [r3, #8]
 800d6c8:	6119      	str	r1, [r3, #16]
 800d6ca:	615a      	str	r2, [r3, #20]
 800d6cc:	3b0c      	subs	r3, #12
 800d6ce:	4283      	cmp	r3, r0
 800d6d0:	d1f6      	bne.n	800d6c0 <kalman_3gyro.constprop.0+0xa68>
 800d6d2:	e003      	b.n	800d6dc <kalman_3gyro.constprop.0+0xa84>
 800d6d4:	4b000000 	.word	0x4b000000
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6de:	edc3 da00 	vstr	s27, [r3]
 800d6e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6e4:	ed83 ba00 	vstr	s22, [r3]
 800d6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6ea:	ed83 8a00 	vstr	s16, [r3]
 800d6ee:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	429c      	cmp	r4, r3
 800d6f8:	bf28      	it	cs
 800d6fa:	461c      	movcs	r4, r3
 800d6fc:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d700:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d704:	aa54      	add	r2, sp, #336	; 0x150
 800d706:	a92d      	add	r1, sp, #180	; 0xb4
 800d708:	a830      	add	r0, sp, #192	; 0xc0
 800d70a:	461c      	mov	r4, r3
 800d70c:	9314      	str	r3, [sp, #80]	; 0x50
 800d70e:	f7fe fa27 	bl	800bb60 <getRotationMatrix>
 800d712:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d716:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d71a:	6820      	ldr	r0, [r4, #0]
 800d71c:	6861      	ldr	r1, [r4, #4]
 800d71e:	68a2      	ldr	r2, [r4, #8]
 800d720:	68e3      	ldr	r3, [r4, #12]
 800d722:	4635      	mov	r5, r6
 800d724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d726:	3410      	adds	r4, #16
 800d728:	42bc      	cmp	r4, r7
 800d72a:	462e      	mov	r6, r5
 800d72c:	d1f5      	bne.n	800d71a <kalman_3gyro.constprop.0+0xac2>
 800d72e:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d732:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d736:	6820      	ldr	r0, [r4, #0]
 800d738:	6028      	str	r0, [r5, #0]
 800d73a:	eef0 7ae7 	vabs.f32	s15, s15
 800d73e:	eeb0 7ac7 	vabs.f32	s14, s14
 800d742:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74a:	f140 85a4 	bpl.w	800e296 <kalman_3gyro.constprop.0+0x163e>
 800d74e:	2303      	movs	r3, #3
 800d750:	2706      	movs	r7, #6
 800d752:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d756:	2604      	movs	r6, #4
 800d758:	2400      	movs	r4, #0
 800d75a:	eef0 7a47 	vmov.f32	s15, s14
 800d75e:	4632      	mov	r2, r6
 800d760:	46a2      	mov	sl, r4
 800d762:	2107      	movs	r1, #7
 800d764:	f04f 0c01 	mov.w	ip, #1
 800d768:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d76c:	eeb0 7ac7 	vabs.f32	s14, s14
 800d770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d778:	f340 85ae 	ble.w	800e2d8 <kalman_3gyro.constprop.0+0x1680>
 800d77c:	2304      	movs	r3, #4
 800d77e:	2007      	movs	r0, #7
 800d780:	2108      	movs	r1, #8
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	461c      	mov	r4, r3
 800d786:	9002      	str	r0, [sp, #8]
 800d788:	460a      	mov	r2, r1
 800d78a:	2306      	movs	r3, #6
 800d78c:	2003      	movs	r0, #3
 800d78e:	2605      	movs	r6, #5
 800d790:	f04f 0800 	mov.w	r8, #0
 800d794:	f04f 0a01 	mov.w	sl, #1
 800d798:	f04f 0c02 	mov.w	ip, #2
 800d79c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d79e:	442c      	add	r4, r5
 800d7a0:	442a      	add	r2, r5
 800d7a2:	edd4 6a00 	vldr	s13, [r4]
 800d7a6:	ed92 7a00 	vldr	s14, [r2]
 800d7aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ae:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d7b2:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d7b6:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d7ba:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d7be:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d7c2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d7c6:	970c      	str	r7, [sp, #48]	; 0x30
 800d7c8:	9f01      	ldr	r7, [sp, #4]
 800d7ca:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d7ce:	00b6      	lsls	r6, r6, #2
 800d7d0:	960a      	str	r6, [sp, #40]	; 0x28
 800d7d2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d7d6:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d7da:	edc4 7a00 	vstr	s15, [r4]
 800d7de:	edd2 7a00 	vldr	s15, [r2]
 800d7e2:	ed99 7a00 	vldr	s14, [r9]
 800d7e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d7ea:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d7ee:	9204      	str	r2, [sp, #16]
 800d7f0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d7f4:	9205      	str	r2, [sp, #20]
 800d7f6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d7fa:	9209      	str	r2, [sp, #36]	; 0x24
 800d7fc:	00ba      	lsls	r2, r7, #2
 800d7fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d800:	9206      	str	r2, [sp, #24]
 800d802:	0080      	lsls	r0, r0, #2
 800d804:	9003      	str	r0, [sp, #12]
 800d806:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d80a:	0089      	lsls	r1, r1, #2
 800d80c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d80e:	edc9 6a00 	vstr	s13, [r9]
 800d812:	ed94 6a00 	vldr	s12, [r4]
 800d816:	ed97 7a00 	vldr	s14, [r7]
 800d81a:	edd5 7a00 	vldr	s15, [r5]
 800d81e:	9902      	ldr	r1, [sp, #8]
 800d820:	9a02      	ldr	r2, [sp, #8]
 800d822:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d826:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d82a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d82e:	0092      	lsls	r2, r2, #2
 800d830:	edc5 7a00 	vstr	s15, [r5]
 800d834:	ed97 7a00 	vldr	s14, [r7]
 800d838:	edde 7a00 	vldr	s15, [lr]
 800d83c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	edce 7a00 	vstr	s15, [lr]
 800d846:	edd0 5a00 	vldr	s11, [r0]
 800d84a:	ed91 7a00 	vldr	s14, [r1]
 800d84e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d852:	eef0 7ae7 	vabs.f32	s15, s15
 800d856:	ed81 7a00 	vstr	s14, [r1]
 800d85a:	ed90 6a00 	vldr	s12, [r0]
 800d85e:	ed96 7a00 	vldr	s14, [r6]
 800d862:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d866:	ed86 7a00 	vstr	s14, [r6]
 800d86a:	ed95 7a00 	vldr	s14, [r5]
 800d86e:	eeb0 7ac7 	vabs.f32	s14, s14
 800d872:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87a:	dd10      	ble.n	800d89e <kalman_3gyro.constprop.0+0xc46>
 800d87c:	4652      	mov	r2, sl
 800d87e:	46c2      	mov	sl, r8
 800d880:	4690      	mov	r8, r2
 800d882:	461a      	mov	r2, r3
 800d884:	9b01      	ldr	r3, [sp, #4]
 800d886:	9902      	ldr	r1, [sp, #8]
 800d888:	9803      	ldr	r0, [sp, #12]
 800d88a:	9006      	str	r0, [sp, #24]
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	9303      	str	r3, [sp, #12]
 800d890:	008b      	lsls	r3, r1, #2
 800d892:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d896:	9105      	str	r1, [sp, #20]
 800d898:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d89c:	9104      	str	r1, [sp, #16]
 800d89e:	9903      	ldr	r1, [sp, #12]
 800d8a0:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d8a4:	4401      	add	r1, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	9906      	ldr	r1, [sp, #24]
 800d8aa:	ed94 7a00 	vldr	s14, [r4]
 800d8ae:	4401      	add	r1, r0
 800d8b0:	edd1 7a00 	vldr	s15, [r1]
 800d8b4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d8b8:	4608      	mov	r0, r1
 800d8ba:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d8be:	440a      	add	r2, r1
 800d8c0:	440b      	add	r3, r1
 800d8c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8c4:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d8c8:	4429      	add	r1, r5
 800d8ca:	460d      	mov	r5, r1
 800d8cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d8ce:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d8d2:	4431      	add	r1, r6
 800d8d4:	468e      	mov	lr, r1
 800d8d6:	ed84 3a00 	vstr	s6, [r4]
 800d8da:	ed92 7a00 	vldr	s14, [r2]
 800d8de:	edd3 7a00 	vldr	s15, [r3]
 800d8e2:	9904      	ldr	r1, [sp, #16]
 800d8e4:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d8e8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d8ec:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d8f0:	440e      	add	r6, r1
 800d8f2:	1879      	adds	r1, r7, r1
 800d8f4:	edc3 7a00 	vstr	s15, [r3]
 800d8f8:	9101      	str	r1, [sp, #4]
 800d8fa:	9b05      	ldr	r3, [sp, #20]
 800d8fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8fe:	edd2 0a00 	vldr	s1, [r2]
 800d902:	ed95 1a00 	vldr	s2, [r5]
 800d906:	ed9e 2a00 	vldr	s4, [lr]
 800d90a:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d90e:	edd6 6a00 	vldr	s13, [r6]
 800d912:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d916:	1874      	adds	r4, r6, r1
 800d918:	18f7      	adds	r7, r6, r3
 800d91a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d91e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d922:	eb06 0903 	add.w	r9, r6, r3
 800d926:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d92a:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d92e:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d932:	4633      	mov	r3, r6
 800d934:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d938:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d93c:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d940:	448c      	add	ip, r1
 800d942:	9901      	ldr	r1, [sp, #4]
 800d944:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d948:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d94c:	ed94 7a00 	vldr	s14, [r4]
 800d950:	ed93 6a00 	vldr	s12, [r3]
 800d954:	edd0 7a00 	vldr	s15, [r0]
 800d958:	ed99 8a00 	vldr	s16, [r9]
 800d95c:	ed91 ba00 	vldr	s22, [r1]
 800d960:	ed97 4a00 	vldr	s8, [r7]
 800d964:	edd6 4a00 	vldr	s9, [r6]
 800d968:	eddc da00 	vldr	s27, [ip]
 800d96c:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d970:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d974:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d978:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d97c:	46a2      	mov	sl, r4
 800d97e:	4613      	mov	r3, r2
 800d980:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d984:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d988:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d98c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d990:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d994:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d998:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d99c:	ed94 5a00 	vldr	s10, [r4]
 800d9a0:	edda 3a00 	vldr	s7, [sl]
 800d9a4:	edd2 5a00 	vldr	s11, [r2]
 800d9a8:	edd3 7a00 	vldr	s15, [r3]
 800d9ac:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d9b0:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d9b4:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d9b8:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d9bc:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d9c0:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d9c4:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d9c8:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d9cc:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d9d0:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d9d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d9d8:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d9dc:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d9e0:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d9e4:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d9e8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d9ec:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d9f0:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d9f4:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d9f8:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d9fc:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800da00:	eee2 4a45 	vfms.f32	s9, s4, s10
 800da04:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800da08:	ee28 7a07 	vmul.f32	s14, s16, s14
 800da0c:	ee37 3a85 	vadd.f32	s6, s15, s10
 800da10:	ee68 4a24 	vmul.f32	s9, s16, s9
 800da14:	ee26 8a08 	vmul.f32	s16, s12, s16
 800da18:	ee37 6a43 	vsub.f32	s12, s14, s6
 800da1c:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800da20:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800da2c:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800da30:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800da34:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800da38:	bfc8      	it	gt
 800da3a:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800da3e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800da42:	bfcc      	ite	gt
 800da44:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800da48:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d6d8 <kalman_3gyro.constprop.0+0xa80>
 800da4c:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800da50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da54:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800da58:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800da5c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800da60:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800da64:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800da68:	f100 84e4 	bmi.w	800e434 <kalman_3gyro.constprop.0+0x17dc>
 800da6c:	bfd8      	it	le
 800da6e:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800da72:	ee37 6a87 	vadd.f32	s12, s15, s14
 800da76:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800da7a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800da7e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800da82:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800da86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da8a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800da8e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800da92:	bf84      	itt	hi
 800da94:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800da98:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800da9c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800daa0:	bf8c      	ite	hi
 800daa2:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800daa6:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800de28 <kalman_3gyro.constprop.0+0x11d0>
 800daaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daae:	f100 84bd 	bmi.w	800e42c <kalman_3gyro.constprop.0+0x17d4>
 800dab2:	bfd8      	it	le
 800dab4:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800dab8:	ee37 7a05 	vadd.f32	s14, s14, s10
 800dabc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800dac0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dac4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dac8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad0:	bf84      	itt	hi
 800dad2:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800dad6:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800dada:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800dade:	bf8c      	ite	hi
 800dae0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800dae4:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800de28 <kalman_3gyro.constprop.0+0x11d0>
 800dae8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800daec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf0:	ee63 3a86 	vmul.f32	s7, s7, s12
 800daf4:	f102 8399 	bmi.w	801022a <kalman_3gyro.constprop.0+0x35d2>
 800daf8:	bfd8      	it	le
 800dafa:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800dafe:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800db02:	1e53      	subs	r3, r2, #1
 800db04:	b25b      	sxtb	r3, r3
 800db06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db10:	dd1c      	ble.n	800db4c <kalman_3gyro.constprop.0+0xef4>
 800db12:	3a02      	subs	r2, #2
 800db14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db18:	b2d2      	uxtb	r2, r2
 800db1a:	f1ab 000c 	sub.w	r0, fp, #12
 800db1e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800db22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800db26:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800db2a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800db2e:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800db32:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800db36:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800db3a:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800db3e:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800db42:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800db46:	3b0c      	subs	r3, #12
 800db48:	4283      	cmp	r3, r0
 800db4a:	d1f0      	bne.n	800db2e <kalman_3gyro.constprop.0+0xed6>
 800db4c:	eddd 6a07 	vldr	s13, [sp, #28]
 800db50:	4ab6      	ldr	r2, [pc, #728]	; (800de2c <kalman_3gyro.constprop.0+0x11d4>)
 800db52:	4bb7      	ldr	r3, [pc, #732]	; (800de30 <kalman_3gyro.constprop.0+0x11d8>)
 800db54:	ed92 8a00 	vldr	s16, [r2]
 800db58:	ed93 ba00 	vldr	s22, [r3]
 800db5c:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800db60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db64:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800db68:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800db6c:	f1c1 0101 	rsb	r1, r1, #1
 800db70:	910c      	str	r1, [sp, #48]	; 0x30
 800db72:	a92d      	add	r1, sp, #180	; 0xb4
 800db74:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800db78:	9123      	str	r1, [sp, #140]	; 0x8c
 800db7a:	2100      	movs	r1, #0
 800db7c:	9109      	str	r1, [sp, #36]	; 0x24
 800db7e:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800db82:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800db86:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800db8a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800db8e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800db92:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800db96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db9a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800db9e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800dba2:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800dba6:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800dbaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb4:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dbb8:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800dbbc:	18e0      	adds	r0, r4, r3
 800dbbe:	f803 0f01 	strb.w	r0, [r3, #1]!
 800dbc2:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800dbc6:	f841 0b04 	str.w	r0, [r1], #4
 800dbca:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800dbce:	4298      	cmp	r0, r3
 800dbd0:	f102 020c 	add.w	r2, r2, #12
 800dbd4:	d1f2      	bne.n	800dbbc <kalman_3gyro.constprop.0+0xf64>
 800dbd6:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800dbda:	ed93 7a00 	vldr	s14, [r3]
 800dbde:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800dbe2:	edd3 7a00 	vldr	s15, [r3]
 800dbe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbee:	bf84      	itt	hi
 800dbf0:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800dbf4:	f8a9 3000 	strhhi.w	r3, [r9]
 800dbf8:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800dbfc:	ed93 7a00 	vldr	s14, [r3]
 800dc00:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800dc04:	edd3 7a00 	vldr	s15, [r3]
 800dc08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc10:	bf84      	itt	hi
 800dc12:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800dc16:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800dc1a:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800dc1e:	ed93 7a00 	vldr	s14, [r3]
 800dc22:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800dc26:	edd3 7a00 	vldr	s15, [r3]
 800dc2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc32:	bf84      	itt	hi
 800dc34:	f240 5306 	movwhi	r3, #1286	; 0x506
 800dc38:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800dc3c:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800dc40:	ed93 7a00 	vldr	s14, [r3]
 800dc44:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800dc48:	edd3 7a00 	vldr	s15, [r3]
 800dc4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc54:	bf84      	itt	hi
 800dc56:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800dc5a:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800dc5e:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800dc62:	ed93 7a00 	vldr	s14, [r3]
 800dc66:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800dc6a:	edd3 7a00 	vldr	s15, [r3]
 800dc6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc76:	bf84      	itt	hi
 800dc78:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800dc7c:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800dc80:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800dc84:	ed93 7a00 	vldr	s14, [r3]
 800dc88:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800dc8c:	edd3 7a00 	vldr	s15, [r3]
 800dc90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc98:	bf84      	itt	hi
 800dc9a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800dc9e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800dca2:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800dca6:	ed93 7a00 	vldr	s14, [r3]
 800dcaa:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800dcae:	edd3 7a00 	vldr	s15, [r3]
 800dcb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcba:	bf84      	itt	hi
 800dcbc:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800dcc0:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800dcc4:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800dcc8:	ed93 7a00 	vldr	s14, [r3]
 800dccc:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800dcd0:	edd3 7a00 	vldr	s15, [r3]
 800dcd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcdc:	bf84      	itt	hi
 800dcde:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800dce2:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800dce6:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800dcea:	ed93 7a00 	vldr	s14, [r3]
 800dcee:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800dcf2:	edd3 7a00 	vldr	s15, [r3]
 800dcf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfe:	bf84      	itt	hi
 800dd00:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800dd04:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800dd08:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800dd0c:	ed93 7a00 	vldr	s14, [r3]
 800dd10:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800dd14:	edd3 7a00 	vldr	s15, [r3]
 800dd18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd20:	bf84      	itt	hi
 800dd22:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800dd26:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800dd2a:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800dd2e:	ed93 7a00 	vldr	s14, [r3]
 800dd32:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800dd36:	edd3 7a00 	vldr	s15, [r3]
 800dd3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd42:	bf84      	itt	hi
 800dd44:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800dd48:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800dd4c:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800dd50:	ed93 7a00 	vldr	s14, [r3]
 800dd54:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800dd58:	edd3 7a00 	vldr	s15, [r3]
 800dd5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd64:	bf84      	itt	hi
 800dd66:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800dd6a:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800dd6e:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800dd72:	ed93 7a00 	vldr	s14, [r3]
 800dd76:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800dd7a:	edd3 7a00 	vldr	s15, [r3]
 800dd7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd86:	bf84      	itt	hi
 800dd88:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800dd8c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800dd90:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800dd94:	ed93 7a00 	vldr	s14, [r3]
 800dd98:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800dd9c:	edd3 7a00 	vldr	s15, [r3]
 800dda0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda8:	bf84      	itt	hi
 800ddaa:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800ddae:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800ddb2:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800ddb6:	ed93 7a00 	vldr	s14, [r3]
 800ddba:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800ddbe:	edd3 7a00 	vldr	s15, [r3]
 800ddc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddca:	bf84      	itt	hi
 800ddcc:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800ddd0:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800ddd4:	221e      	movs	r2, #30
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	4650      	mov	r0, sl
 800ddda:	f009 fd6f 	bl	80178bc <memset>
 800ddde:	2304      	movs	r3, #4
 800dde0:	9307      	str	r3, [sp, #28]
 800dde2:	2302      	movs	r3, #2
 800dde4:	9305      	str	r3, [sp, #20]
 800dde6:	9b05      	ldr	r3, [sp, #20]
 800dde8:	9306      	str	r3, [sp, #24]
 800ddea:	1c5f      	adds	r7, r3, #1
 800ddec:	005b      	lsls	r3, r3, #1
 800ddee:	9305      	str	r3, [sp, #20]
 800ddf0:	f04f 0b01 	mov.w	fp, #1
 800ddf4:	9b05      	ldr	r3, [sp, #20]
 800ddf6:	f8cd b004 	str.w	fp, [sp, #4]
 800ddfa:	445b      	add	r3, fp
 800ddfc:	2b1f      	cmp	r3, #31
 800ddfe:	bfa8      	it	ge
 800de00:	231f      	movge	r3, #31
 800de02:	465a      	mov	r2, fp
 800de04:	eba3 0802 	sub.w	r8, r3, r2
 800de08:	f1b8 0f00 	cmp.w	r8, #0
 800de0c:	469b      	mov	fp, r3
 800de0e:	f107 35ff 	add.w	r5, r7, #4294967295
 800de12:	dd44      	ble.n	800de9e <kalman_3gyro.constprop.0+0x1246>
 800de14:	f10b 33ff 	add.w	r3, fp, #4294967295
 800de18:	9302      	str	r3, [sp, #8]
 800de1a:	f1ab 0302 	sub.w	r3, fp, #2
 800de1e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800de22:	4616      	mov	r6, r2
 800de24:	2400      	movs	r4, #0
 800de26:	e00f      	b.n	800de48 <kalman_3gyro.constprop.0+0x11f0>
 800de28:	00000000 	.word	0x00000000
 800de2c:	200019e4 	.word	0x200019e4
 800de30:	200019f4 	.word	0x200019f4
 800de34:	3f333333 	.word	0x3f333333
 800de38:	3f4ccccd 	.word	0x3f4ccccd
 800de3c:	3f666666 	.word	0x3f666666
 800de40:	3ecccccc 	.word	0x3ecccccc
 800de44:	3dcccccd 	.word	0x3dcccccd
 800de48:	1e71      	subs	r1, r6, #1
 800de4a:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800de4e:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800de52:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800de56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de5a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800de5e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800de62:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800de66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6e:	f105 0c02 	add.w	ip, r5, #2
 800de72:	f105 0801 	add.w	r8, r5, #1
 800de76:	f240 81d3 	bls.w	800e220 <kalman_3gyro.constprop.0+0x15c8>
 800de7a:	45e3      	cmp	fp, ip
 800de7c:	f80a 0004 	strb.w	r0, [sl, r4]
 800de80:	f000 81bf 	beq.w	800e202 <kalman_3gyro.constprop.0+0x15aa>
 800de84:	4645      	mov	r5, r8
 800de86:	9b03      	ldr	r3, [sp, #12]
 800de88:	3401      	adds	r4, #1
 800de8a:	42a3      	cmp	r3, r4
 800de8c:	dcdc      	bgt.n	800de48 <kalman_3gyro.constprop.0+0x11f0>
 800de8e:	4698      	mov	r8, r3
 800de90:	9b01      	ldr	r3, [sp, #4]
 800de92:	1e58      	subs	r0, r3, #1
 800de94:	4448      	add	r0, r9
 800de96:	4642      	mov	r2, r8
 800de98:	4651      	mov	r1, sl
 800de9a:	f009 fce7 	bl	801786c <memcpy>
 800de9e:	9b06      	ldr	r3, [sp, #24]
 800dea0:	eb0b 0703 	add.w	r7, fp, r3
 800dea4:	2f1e      	cmp	r7, #30
 800dea6:	dda5      	ble.n	800ddf4 <kalman_3gyro.constprop.0+0x119c>
 800dea8:	9b07      	ldr	r3, [sp, #28]
 800deaa:	3b01      	subs	r3, #1
 800deac:	9307      	str	r3, [sp, #28]
 800deae:	d19a      	bne.n	800dde6 <kalman_3gyro.constprop.0+0x118e>
 800deb0:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800deb4:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800deb8:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800debc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dec0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dec4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800dec8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800decc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ded0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ded8:	460a      	mov	r2, r1
 800deda:	bf4c      	ite	mi
 800dedc:	2201      	movmi	r2, #1
 800dede:	2200      	movpl	r2, #0
 800dee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee4:	bf4c      	ite	mi
 800dee6:	2301      	movmi	r3, #1
 800dee8:	2300      	movpl	r3, #0
 800deea:	429a      	cmp	r2, r3
 800deec:	f000 81b4 	beq.w	800e258 <kalman_3gyro.constprop.0+0x1600>
 800def0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800def4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800def8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800defc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800defe:	ece3 7a01 	vstmia	r3!, {s15}
 800df02:	930b      	str	r3, [sp, #44]	; 0x2c
 800df04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df06:	3304      	adds	r3, #4
 800df08:	930a      	str	r3, [sp, #40]	; 0x28
 800df0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df0c:	2b03      	cmp	r3, #3
 800df0e:	f47f ae4c 	bne.w	800dbaa <kalman_3gyro.constprop.0+0xf52>
 800df12:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800df16:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800df1a:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800df1e:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800de34 <kalman_3gyro.constprop.0+0x11dc>
 800df22:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800df26:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800de38 <kalman_3gyro.constprop.0+0x11e0>
 800df2a:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800df2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800df32:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800df36:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800df3a:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800df3e:	eee6 7a06 	vfma.f32	s15, s12, s12
 800df42:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800df46:	eeb0 6a67 	vmov.f32	s12, s15
 800df4a:	edcd 7a03 	vstr	s15, [sp, #12]
 800df4e:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800df52:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800df56:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800df5a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800df5e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800df62:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800df66:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800df6a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800df6e:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800df72:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800df76:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800df7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df7e:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800df82:	ee64 7a27 	vmul.f32	s15, s8, s15
 800df86:	ee25 7a07 	vmul.f32	s14, s10, s14
 800df8a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800df8e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800df92:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800df96:	2b00      	cmp	r3, #0
 800df98:	f040 81a4 	bne.w	800e2e4 <kalman_3gyro.constprop.0+0x168c>
 800df9c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dfa0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800dfa4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dfa8:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800dfac:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800dfb0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800dfb4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dfb8:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800dfbc:	f8c8 3020 	str.w	r3, [r8, #32]
 800dfc0:	ed88 7a07 	vstr	s14, [r8, #28]
 800dfc4:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800dfc8:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800dfcc:	ed93 7a00 	vldr	s14, [r3]
 800dfd0:	ed92 8a00 	vldr	s16, [r2]
 800dfd4:	eddb ea02 	vldr	s29, [fp, #8]
 800dfd8:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800dfdc:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800dfe0:	ed92 5a00 	vldr	s10, [r2]
 800dfe4:	ee28 8a07 	vmul.f32	s16, s16, s14
 800dfe8:	ed93 7a00 	vldr	s14, [r3]
 800dfec:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dff0:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800dff4:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800dff8:	ed92 5a00 	vldr	s10, [r2]
 800dffc:	ed93 7a00 	vldr	s14, [r3]
 800e000:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e004:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800e008:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800e00c:	ed92 5a00 	vldr	s10, [r2]
 800e010:	ed93 7a00 	vldr	s14, [r3]
 800e014:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e018:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800e01c:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800e020:	ed92 5a00 	vldr	s10, [r2]
 800e024:	ed93 7a00 	vldr	s14, [r3]
 800e028:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e030:	eea5 8a07 	vfma.f32	s16, s10, s14
 800e034:	f340 8232 	ble.w	800e49c <kalman_3gyro.constprop.0+0x1844>
 800e038:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800e03c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e044:	f100 815e 	bmi.w	800e304 <kalman_3gyro.constprop.0+0x16ac>
 800e048:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800e04c:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800e050:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	f142 84bd 	bpl.w	80109d6 <kalman_3gyro.constprop.0+0x3d7e>
 800e05c:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800e060:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e068:	f342 850a 	ble.w	8010a80 <kalman_3gyro.constprop.0+0x3e28>
 800e06c:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800e070:	eef4 2ac8 	vcmpe.f32	s5, s16
 800e074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e078:	f342 86c5 	ble.w	8010e06 <kalman_3gyro.constprop.0+0x41ae>
 800e07c:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800e080:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800e084:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800e088:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e08c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e090:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800e094:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e098:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e09c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a4:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e0a8:	f202 86c5 	bhi.w	8010e36 <kalman_3gyro.constprop.0+0x41de>
 800e0ac:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800e0b0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b8:	f342 86c5 	ble.w	8010e46 <kalman_3gyro.constprop.0+0x41ee>
 800e0bc:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800e0c0:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800e0c4:	ee38 3a64 	vsub.f32	s6, s16, s9
 800e0c8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e0cc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e0d0:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e0d4:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800e0d8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e0dc:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800e0e0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e8:	f202 86c5 	bhi.w	8010e76 <kalman_3gyro.constprop.0+0x421e>
 800e0ec:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800e0f0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f8:	f343 8371 	ble.w	80117de <kalman_3gyro.constprop.0+0x4b86>
 800e0fc:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800e100:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800e104:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e108:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e10c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e110:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e114:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e118:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e11c:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800e120:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e128:	f202 86c5 	bhi.w	8010eb6 <kalman_3gyro.constprop.0+0x425e>
 800e12c:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800e130:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e138:	f343 8359 	ble.w	80117ee <kalman_3gyro.constprop.0+0x4b96>
 800e13c:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800e140:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800e144:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e148:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e14c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e150:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e154:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e158:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e15c:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800e160:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e168:	f2c2 86c5 	blt.w	8010ef6 <kalman_3gyro.constprop.0+0x429e>
 800e16c:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800e170:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e178:	f143 832d 	bpl.w	80117d6 <kalman_3gyro.constprop.0+0x4b7e>
 800e17c:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800e180:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800e184:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e188:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e18c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e190:	ee24 4a03 	vmul.f32	s8, s8, s6
 800e194:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800e198:	ee3e ea23 	vadd.f32	s28, s28, s7
 800e19c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800e1a0:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800e1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a8:	f2c2 86c5 	blt.w	8010f36 <kalman_3gyro.constprop.0+0x42de>
 800e1ac:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800e1b0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b8:	f142 86c5 	bpl.w	8010f46 <kalman_3gyro.constprop.0+0x42ee>
 800e1bc:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800e1c0:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800e1c4:	ee78 3a64 	vsub.f32	s7, s16, s9
 800e1c8:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e1cc:	ee37 7a64 	vsub.f32	s14, s14, s9
 800e1d0:	ee25 5a23 	vmul.f32	s10, s10, s7
 800e1d4:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800e1d8:	ee3e ea04 	vadd.f32	s28, s28, s8
 800e1dc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e1e0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800e1e4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800e1e8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800e1ec:	e15a      	b.n	800e4a4 <kalman_3gyro.constprop.0+0x184c>
 800e1ee:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800de3c <kalman_3gyro.constprop.0+0x11e4>
 800e1f2:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800de40 <kalman_3gyro.constprop.0+0x11e8>
 800e1f6:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800de44 <kalman_3gyro.constprop.0+0x11ec>
 800e1fa:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800e1fe:	f7fe bedd 	b.w	800cfbc <kalman_3gyro.constprop.0+0x364>
 800e202:	1c60      	adds	r0, r4, #1
 800e204:	42be      	cmp	r6, r7
 800e206:	eba7 0206 	sub.w	r2, r7, r6
 800e20a:	4449      	add	r1, r9
 800e20c:	4450      	add	r0, sl
 800e20e:	f6bf ae39 	bge.w	800de84 <kalman_3gyro.constprop.0+0x122c>
 800e212:	443c      	add	r4, r7
 800e214:	1ba4      	subs	r4, r4, r6
 800e216:	f009 fb29 	bl	801786c <memcpy>
 800e21a:	463e      	mov	r6, r7
 800e21c:	4645      	mov	r5, r8
 800e21e:	e632      	b.n	800de86 <kalman_3gyro.constprop.0+0x122e>
 800e220:	3601      	adds	r6, #1
 800e222:	42be      	cmp	r6, r7
 800e224:	f80a 2004 	strb.w	r2, [sl, r4]
 800e228:	f47f ae2d 	bne.w	800de86 <kalman_3gyro.constprop.0+0x122e>
 800e22c:	9b02      	ldr	r3, [sp, #8]
 800e22e:	f105 0801 	add.w	r8, r5, #1
 800e232:	1c60      	adds	r0, r4, #1
 800e234:	45c3      	cmp	fp, r8
 800e236:	eba3 0205 	sub.w	r2, r3, r5
 800e23a:	eb09 0105 	add.w	r1, r9, r5
 800e23e:	4450      	add	r0, sl
 800e240:	f77f ae21 	ble.w	800de86 <kalman_3gyro.constprop.0+0x122e>
 800e244:	f009 fb12 	bl	801786c <memcpy>
 800e248:	9b02      	ldr	r3, [sp, #8]
 800e24a:	441c      	add	r4, r3
 800e24c:	9b04      	ldr	r3, [sp, #16]
 800e24e:	1b5a      	subs	r2, r3, r5
 800e250:	1b64      	subs	r4, r4, r5
 800e252:	eb02 0508 	add.w	r5, r2, r8
 800e256:	e616      	b.n	800de86 <kalman_3gyro.constprop.0+0x122e>
 800e258:	eef4 7a48 	vcmp.f32	s15, s16
 800e25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e260:	f43f ae46 	beq.w	800def0 <kalman_3gyro.constprop.0+0x1298>
 800e264:	eef4 7a4b 	vcmp.f32	s15, s22
 800e268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e26c:	f43f ae40 	beq.w	800def0 <kalman_3gyro.constprop.0+0x1298>
 800e270:	eeb4 7a48 	vcmp.f32	s14, s16
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	f43f ae3a 	beq.w	800def0 <kalman_3gyro.constprop.0+0x1298>
 800e27c:	eeb4 7a4b 	vcmp.f32	s14, s22
 800e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e284:	f43f ae34 	beq.w	800def0 <kalman_3gyro.constprop.0+0x1298>
 800e288:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e28c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e290:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e294:	e632      	b.n	800defc <kalman_3gyro.constprop.0+0x12a4>
 800e296:	2304      	movs	r3, #4
 800e298:	9301      	str	r3, [sp, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	461c      	mov	r4, r3
 800e29e:	2307      	movs	r3, #7
 800e2a0:	4694      	mov	ip, r2
 800e2a2:	2106      	movs	r1, #6
 800e2a4:	9302      	str	r3, [sp, #8]
 800e2a6:	2603      	movs	r6, #3
 800e2a8:	f04f 0a01 	mov.w	sl, #1
 800e2ac:	f7ff ba5c 	b.w	800d768 <kalman_3gyro.constprop.0+0xb10>
 800e2b0:	9a08      	ldr	r2, [sp, #32]
 800e2b2:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e43c <kalman_3gyro.constprop.0+0x17e4>
 800e2b6:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e440 <kalman_3gyro.constprop.0+0x17e8>
 800e2ba:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e444 <kalman_3gyro.constprop.0+0x17ec>
 800e2be:	4b62      	ldr	r3, [pc, #392]	; (800e448 <kalman_3gyro.constprop.0+0x17f0>)
 800e2c0:	edc2 7a00 	vstr	s15, [r2]
 800e2c4:	eeb0 4a65 	vmov.f32	s8, s11
 800e2c8:	eeb0 3a67 	vmov.f32	s6, s15
 800e2cc:	eef0 4a45 	vmov.f32	s9, s10
 800e2d0:	6053      	str	r3, [r2, #4]
 800e2d2:	6093      	str	r3, [r2, #8]
 800e2d4:	f7fe bd3e 	b.w	800cd54 <kalman_3gyro.constprop.0+0xfc>
 800e2d8:	2308      	movs	r3, #8
 800e2da:	2005      	movs	r0, #5
 800e2dc:	f04f 0802 	mov.w	r8, #2
 800e2e0:	f7ff ba5c 	b.w	800d79c <kalman_3gyro.constprop.0+0xb44>
 800e2e4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800e2ee:	ed88 7a07 	vstr	s14, [r8, #28]
 800e2f2:	ed88 7a08 	vstr	s14, [r8, #32]
 800e2f6:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e2fa:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e2fe:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e302:	e65f      	b.n	800dfc4 <kalman_3gyro.constprop.0+0x136c>
 800e304:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e308:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e310:	f342 83b2 	ble.w	8010a78 <kalman_3gyro.constprop.0+0x3e20>
 800e314:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31c:	f2c2 86e9 	blt.w	80110f2 <kalman_3gyro.constprop.0+0x449a>
 800e320:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e324:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	f342 8712 	ble.w	8011154 <kalman_3gyro.constprop.0+0x44fc>
 800e330:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e334:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e338:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e33c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e340:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e344:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e348:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e34c:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e350:	f002 bed8 	b.w	8011104 <kalman_3gyro.constprop.0+0x44ac>
 800e354:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e358:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	f342 84bd 	ble.w	8010cde <kalman_3gyro.constprop.0+0x4086>
 800e364:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e368:	f7ff b993 	b.w	800d692 <kalman_3gyro.constprop.0+0xa3a>
 800e36c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e370:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e378:	f342 849f 	ble.w	8010cba <kalman_3gyro.constprop.0+0x4062>
 800e37c:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e380:	f7ff b964 	b.w	800d64c <kalman_3gyro.constprop.0+0x9f4>
 800e384:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e388:	eef4 dac7 	vcmpe.f32	s27, s14
 800e38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e390:	f342 84b7 	ble.w	8010d02 <kalman_3gyro.constprop.0+0x40aa>
 800e394:	eddf da2d 	vldr	s27, [pc, #180]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e398:	f7ff b935 	b.w	800d606 <kalman_3gyro.constprop.0+0x9ae>
 800e39c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3a0:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a8:	f342 8475 	ble.w	8010c96 <kalman_3gyro.constprop.0+0x403e>
 800e3ac:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e3b0:	f7ff b8c3 	b.w	800d53a <kalman_3gyro.constprop.0+0x8e2>
 800e3b4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3b8:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c0:	f342 83a0 	ble.w	8010b04 <kalman_3gyro.constprop.0+0x3eac>
 800e3c4:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e3c8:	f7ff b894 	b.w	800d4f4 <kalman_3gyro.constprop.0+0x89c>
 800e3cc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3d0:	eef4 dac7 	vcmpe.f32	s27, s14
 800e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d8:	f342 8382 	ble.w	8010ae0 <kalman_3gyro.constprop.0+0x3e88>
 800e3dc:	eddf da1b 	vldr	s27, [pc, #108]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e3e0:	f7ff b865 	b.w	800d4ae <kalman_3gyro.constprop.0+0x856>
 800e3e4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e3e8:	eef4 dac7 	vcmpe.f32	s27, s14
 800e3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f0:	f342 8364 	ble.w	8010abc <kalman_3gyro.constprop.0+0x3e64>
 800e3f4:	eddf da15 	vldr	s27, [pc, #84]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e3f8:	f7fe bff3 	b.w	800d3e2 <kalman_3gyro.constprop.0+0x78a>
 800e3fc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e400:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e408:	f342 8346 	ble.w	8010a98 <kalman_3gyro.constprop.0+0x3e40>
 800e40c:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e410:	f7fe bfc4 	b.w	800d39c <kalman_3gyro.constprop.0+0x744>
 800e414:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e418:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e420:	f342 839e 	ble.w	8010b60 <kalman_3gyro.constprop.0+0x3f08>
 800e424:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e44c <kalman_3gyro.constprop.0+0x17f4>
 800e428:	f7fe bf95 	b.w	800d356 <kalman_3gyro.constprop.0+0x6fe>
 800e42c:	eef1 3a63 	vneg.f32	s7, s7
 800e430:	f7ff bb42 	b.w	800dab8 <kalman_3gyro.constprop.0+0xe60>
 800e434:	eef1 3a63 	vneg.f32	s7, s7
 800e438:	f7ff bb1b 	b.w	800da72 <kalman_3gyro.constprop.0+0xe1a>
 800e43c:	00000000 	.word	0x00000000
 800e440:	3fb33333 	.word	0x3fb33333
 800e444:	bfb33333 	.word	0xbfb33333
 800e448:	3f333333 	.word	0x3f333333
 800e44c:	80000000 	.word	0x80000000
 800e450:	3fb77778 	.word	0x3fb77778
 800e454:	3f99999a 	.word	0x3f99999a
 800e458:	3f4ccccd 	.word	0x3f4ccccd
 800e45c:	42d40000 	.word	0x42d40000
 800e460:	46979000 	.word	0x46979000
 800e464:	4415c000 	.word	0x4415c000
 800e468:	3ba3d70a 	.word	0x3ba3d70a
 800e46c:	3b449ba6 	.word	0x3b449ba6
 800e470:	3c75c28f 	.word	0x3c75c28f
 800e474:	3c23d70a 	.word	0x3c23d70a
 800e478:	3d4cccc0 	.word	0x3d4cccc0
 800e47c:	43480000 	.word	0x43480000
 800e480:	3d4ccccd 	.word	0x3d4ccccd
 800e484:	3cf5c28f 	.word	0x3cf5c28f
 800e488:	3eb33334 	.word	0x3eb33334
 800e48c:	3f933333 	.word	0x3f933333
 800e490:	4247ffff 	.word	0x4247ffff
 800e494:	3dcccccd 	.word	0x3dcccccd
 800e498:	3e4ccccd 	.word	0x3e4ccccd
 800e49c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e4a0:	eeb0 ba4e 	vmov.f32	s22, s28
 800e4a4:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e4a8:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e4ac:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e494 <kalman_3gyro.constprop.0+0x183c>
 800e4b0:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e4b4:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e4b8:	eef0 daed 	vabs.f32	s27, s27
 800e4bc:	eeb0 5ac5 	vabs.f32	s10, s10
 800e4c0:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e4c4:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4cc:	f340 821c 	ble.w	800e908 <kalman_3gyro.constprop.0+0x1cb0>
 800e4d0:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e450 <kalman_3gyro.constprop.0+0x17f8>
 800e4d4:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4dc:	f302 828b 	bgt.w	80109f6 <kalman_3gyro.constprop.0+0x3d9e>
 800e4e0:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e4e4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e4e8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e4ec:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e4f0:	eeb0 5a64 	vmov.f32	s10, s9
 800e4f4:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4fc:	f89b 3000 	ldrb.w	r3, [fp]
 800e500:	bfb8      	it	lt
 800e502:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e506:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 81f9 	beq.w	800e902 <kalman_3gyro.constprop.0+0x1caa>
 800e510:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f000 81de 	beq.w	800e8d6 <kalman_3gyro.constprop.0+0x1c7e>
 800e51a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e51e:	2300      	movs	r3, #0
 800e520:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e524:	eeb0 6a61 	vmov.f32	s12, s3
 800e528:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e52c:	9908      	ldr	r1, [sp, #32]
 800e52e:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e532:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e536:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e53a:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e53e:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e542:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e546:	2200      	movs	r2, #0
 800e548:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e54c:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e550:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e554:	9233      	str	r2, [sp, #204]	; 0xcc
 800e556:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e55a:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e55e:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e562:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e566:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e56a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e56e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e572:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e576:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e57a:	eeb0 3a42 	vmov.f32	s6, s4
 800e57e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e582:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e586:	eef0 aa46 	vmov.f32	s21, s12
 800e58a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e58e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e592:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e596:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e59a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e59e:	eef0 2a44 	vmov.f32	s5, s8
 800e5a2:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e5a6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e5aa:	eeb0 fa64 	vmov.f32	s30, s9
 800e5ae:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e5b2:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e5b6:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e5ba:	eeb0 1a6a 	vmov.f32	s2, s21
 800e5be:	eef0 aa66 	vmov.f32	s21, s13
 800e5c2:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e5c6:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e5ca:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e5ce:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e5d2:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e5d6:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e5da:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e5de:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e5e2:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e5e6:	eef0 3a64 	vmov.f32	s7, s9
 800e5ea:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e5ee:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e5f2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e5f6:	edd1 5a02 	vldr	s11, [r1, #8]
 800e5fa:	ed91 5a05 	vldr	s10, [r1, #20]
 800e5fe:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e602:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e606:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e60a:	edd1 1a01 	vldr	s3, [r1, #4]
 800e60e:	edd1 fa00 	vldr	s31, [r1]
 800e612:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e616:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e61a:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e61e:	edd1 5a03 	vldr	s11, [r1, #12]
 800e622:	edd1 1a04 	vldr	s3, [r1, #16]
 800e626:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e454 <kalman_3gyro.constprop.0+0x17fc>
 800e62a:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e62e:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e632:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e636:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e63a:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e63e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e646:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e64a:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e64e:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e652:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e656:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e65a:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e65e:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e662:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e666:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e66a:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e66e:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e672:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e676:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e67a:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e67e:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e682:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e686:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e68a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e68e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e692:	d506      	bpl.n	800e6a2 <kalman_3gyro.constprop.0+0x1a4a>
 800e694:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e458 <kalman_3gyro.constprop.0+0x1800>
 800e698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a0:	dc01      	bgt.n	800e6a6 <kalman_3gyro.constprop.0+0x1a4e>
 800e6a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6a6:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e6aa:	eef0 7ae7 	vabs.f32	s15, s15
 800e6ae:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e6b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ba:	f340 8141 	ble.w	800e940 <kalman_3gyro.constprop.0+0x1ce8>
 800e6be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e6c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ca:	f142 8198 	bpl.w	80109fe <kalman_3gyro.constprop.0+0x3da6>
 800e6ce:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e468 <kalman_3gyro.constprop.0+0x1810>
 800e6d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6d6:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e474 <kalman_3gyro.constprop.0+0x181c>
 800e6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6e2:	f102 8221 	bmi.w	8010b28 <kalman_3gyro.constprop.0+0x3ed0>
 800e6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ea:	f142 8221 	bpl.w	8010b30 <kalman_3gyro.constprop.0+0x3ed8>
 800e6ee:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e470 <kalman_3gyro.constprop.0+0x1818>
 800e6f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fa:	f282 84a4 	bge.w	8011046 <kalman_3gyro.constprop.0+0x43ee>
 800e6fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e702:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e484 <kalman_3gyro.constprop.0+0x182c>
 800e706:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e70e:	f2c2 84b0 	blt.w	8011072 <kalman_3gyro.constprop.0+0x441a>
 800e712:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e480 <kalman_3gyro.constprop.0+0x1828>
 800e716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71e:	f142 84b0 	bpl.w	8011082 <kalman_3gyro.constprop.0+0x442a>
 800e722:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e484 <kalman_3gyro.constprop.0+0x182c>
 800e726:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e490 <kalman_3gyro.constprop.0+0x1838>
 800e72a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e72e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e732:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e736:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e73a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e73e:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e494 <kalman_3gyro.constprop.0+0x183c>
 800e742:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e74a:	f2c2 84b0 	blt.w	80110ae <kalman_3gyro.constprop.0+0x4456>
 800e74e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e498 <kalman_3gyro.constprop.0+0x1840>
 800e752:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75a:	f142 84b0 	bpl.w	80110be <kalman_3gyro.constprop.0+0x4466>
 800e75e:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e494 <kalman_3gyro.constprop.0+0x183c>
 800e762:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e45c <kalman_3gyro.constprop.0+0x1804>
 800e766:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e76a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e76e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e772:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e776:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e77a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e77e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e786:	db0d      	blt.n	800e7a4 <kalman_3gyro.constprop.0+0x1b4c>
 800e788:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e78c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e460 <kalman_3gyro.constprop.0+0x1808>
 800e790:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e464 <kalman_3gyro.constprop.0+0x180c>
 800e794:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e798:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e79c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e7a0:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e7a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7a8:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e7ac:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e7b0:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e7b4:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e470 <kalman_3gyro.constprop.0+0x1818>
 800e7b8:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e468 <kalman_3gyro.constprop.0+0x1810>
 800e7bc:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e474 <kalman_3gyro.constprop.0+0x181c>
 800e7c0:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e46c <kalman_3gyro.constprop.0+0x1814>
 800e7c4:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7cc:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e7d0:	bfb8      	it	lt
 800e7d2:	eef0 4a46 	vmovlt.f32	s9, s12
 800e7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7da:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e7de:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e7e2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e7e6:	f142 841f 	bpl.w	8011028 <kalman_3gyro.constprop.0+0x43d0>
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	f2c2 841f 	blt.w	8011030 <kalman_3gyro.constprop.0+0x43d8>
 800e7f2:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e470 <kalman_3gyro.constprop.0+0x1818>
 800e7f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fe:	f142 83ba 	bpl.w	8010f76 <kalman_3gyro.constprop.0+0x431e>
 800e802:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e474 <kalman_3gyro.constprop.0+0x181c>
 800e806:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e478 <kalman_3gyro.constprop.0+0x1820>
 800e80a:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e47c <kalman_3gyro.constprop.0+0x1824>
 800e80e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e816:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e81a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e81e:	eeb0 ca66 	vmov.f32	s24, s13
 800e822:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e484 <kalman_3gyro.constprop.0+0x182c>
 800e826:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82e:	f2c2 83ba 	blt.w	8010fa6 <kalman_3gyro.constprop.0+0x434e>
 800e832:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e480 <kalman_3gyro.constprop.0+0x1828>
 800e836:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83e:	f142 83ba 	bpl.w	8010fb6 <kalman_3gyro.constprop.0+0x435e>
 800e842:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e484 <kalman_3gyro.constprop.0+0x182c>
 800e846:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e488 <kalman_3gyro.constprop.0+0x1830>
 800e84a:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e490 <kalman_3gyro.constprop.0+0x1838>
 800e84e:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e48c <kalman_3gyro.constprop.0+0x1834>
 800e852:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e856:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e85a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e85e:	eeb0 ca66 	vmov.f32	s24, s13
 800e862:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e494 <kalman_3gyro.constprop.0+0x183c>
 800e866:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86e:	f2c2 83ba 	blt.w	8010fe6 <kalman_3gyro.constprop.0+0x438e>
 800e872:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e498 <kalman_3gyro.constprop.0+0x1840>
 800e876:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e87e:	f142 83ba 	bpl.w	8010ff6 <kalman_3gyro.constprop.0+0x439e>
 800e882:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e910 <kalman_3gyro.constprop.0+0x1cb8>
 800e886:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e914 <kalman_3gyro.constprop.0+0x1cbc>
 800e88a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e88e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e892:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e896:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e89a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e89e:	eeb0 ca66 	vmov.f32	s24, s13
 800e8a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e8a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ae:	f2c2 80b0 	blt.w	8010a12 <kalman_3gyro.constprop.0+0x3dba>
 800e8b2:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e8b6:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e8ba:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e918 <kalman_3gyro.constprop.0+0x1cc0>
 800e8be:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e91c <kalman_3gyro.constprop.0+0x1cc4>
 800e8c2:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e8c6:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e8ca:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e8ce:	eeb0 ca66 	vmov.f32	s24, s13
 800e8d2:	f002 b89e 	b.w	8010a12 <kalman_3gyro.constprop.0+0x3dba>
 800e8d6:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e8da:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e8de:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e8e2:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e8e6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e8ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e8ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e8f2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e8f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fe:	f102 8246 	bmi.w	8010d8e <kalman_3gyro.constprop.0+0x4136>
 800e902:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e906:	e60b      	b.n	800e520 <kalman_3gyro.constprop.0+0x18c8>
 800e908:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e90c:	e5f2      	b.n	800e4f4 <kalman_3gyro.constprop.0+0x189c>
 800e90e:	bf00      	nop
 800e910:	3dcccccd 	.word	0x3dcccccd
 800e914:	410c0000 	.word	0x410c0000
 800e918:	42c80000 	.word	0x42c80000
 800e91c:	424a0000 	.word	0x424a0000
 800e920:	3c23d70a 	.word	0x3c23d70a
 800e924:	3b449ba6 	.word	0x3b449ba6
 800e928:	3fb33333 	.word	0x3fb33333
 800e92c:	3ecccccd 	.word	0x3ecccccd
 800e930:	3f8f5c29 	.word	0x3f8f5c29
 800e934:	3f59999a 	.word	0x3f59999a
 800e938:	3e4ccccd 	.word	0x3e4ccccd
 800e93c:	3f99999a 	.word	0x3f99999a
 800e940:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e944:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e920 <kalman_3gyro.constprop.0+0x1cc8>
 800e948:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e924 <kalman_3gyro.constprop.0+0x1ccc>
 800e94c:	eeb0 7a4c 	vmov.f32	s14, s24
 800e950:	eef0 4a4c 	vmov.f32	s9, s24
 800e954:	eddd 6a01 	vldr	s13, [sp, #4]
 800e958:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e95c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e960:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e964:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e968:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e96c:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e970:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e974:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e978:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e97c:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e980:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e984:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e988:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e98c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e990:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e994:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e998:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e99c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e9a0:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e9a4:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e9a8:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e9ac:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e9b0:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e9b4:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e9b8:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e9bc:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e9c0:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e9c4:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e9c8:	2a00      	cmp	r2, #0
 800e9ca:	f001 8411 	beq.w	80101f0 <kalman_3gyro.constprop.0+0x3598>
 800e9ce:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e9d2:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e9d6:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e9da:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e9de:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e9e2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e9e6:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e9ea:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e9ee:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e9f2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e9f6:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e9fa:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e9fe:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800ea02:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800ea06:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800ea0a:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800ea0e:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800ea12:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800ea16:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800ea1a:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800ea1e:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800ea22:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800ea26:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800ea2a:	b159      	cbz	r1, 800ea44 <kalman_3gyro.constprop.0+0x1dec>
 800ea2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ea30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea38:	dd04      	ble.n	800ea44 <kalman_3gyro.constprop.0+0x1dec>
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800ea40:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800ea44:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea4c:	dd09      	ble.n	800ea62 <kalman_3gyro.constprop.0+0x1e0a>
 800ea4e:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800ea52:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ea56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5a:	db02      	blt.n	800ea62 <kalman_3gyro.constprop.0+0x1e0a>
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f002 8001 	beq.w	8010a64 <kalman_3gyro.constprop.0+0x3e0c>
 800ea62:	b132      	cbz	r2, 800ea72 <kalman_3gyro.constprop.0+0x1e1a>
 800ea64:	f240 1001 	movw	r0, #257	; 0x101
 800ea68:	2301      	movs	r3, #1
 800ea6a:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800ea6e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800ea72:	2301      	movs	r3, #1
 800ea74:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800ea78:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800ea7c:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e928 <kalman_3gyro.constprop.0+0x1cd0>
 800ea80:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800ea84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea88:	dc09      	bgt.n	800ea9e <kalman_3gyro.constprop.0+0x1e46>
 800ea8a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e92c <kalman_3gyro.constprop.0+0x1cd4>
 800ea8e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea96:	d402      	bmi.n	800ea9e <kalman_3gyro.constprop.0+0x1e46>
 800ea98:	2a00      	cmp	r2, #0
 800ea9a:	f042 80e4 	bne.w	8010c66 <kalman_3gyro.constprop.0+0x400e>
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eaa4:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eaa8:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eaac:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800eab0:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e930 <kalman_3gyro.constprop.0+0x1cd8>
 800eab4:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabc:	dc09      	bgt.n	800ead2 <kalman_3gyro.constprop.0+0x1e7a>
 800eabe:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e934 <kalman_3gyro.constprop.0+0x1cdc>
 800eac2:	eeb4 aae7 	vcmpe.f32	s20, s15
 800eac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaca:	d402      	bmi.n	800ead2 <kalman_3gyro.constprop.0+0x1e7a>
 800eacc:	2900      	cmp	r1, #0
 800eace:	f042 8097 	bne.w	8010c00 <kalman_3gyro.constprop.0+0x3fa8>
 800ead2:	2300      	movs	r3, #0
 800ead4:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800ead8:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800eadc:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800eae0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800eae4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eae8:	eef4 dae7 	vcmpe.f32	s27, s15
 800eaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf0:	f341 836b 	ble.w	80101ca <kalman_3gyro.constprop.0+0x3572>
 800eaf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eaf8:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800eafc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800eb00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800eb04:	2300      	movs	r3, #0
 800eb06:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800eb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb0e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800eb12:	eef4 dac7 	vcmpe.f32	s27, s14
 800eb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1a:	bfc4      	itt	gt
 800eb1c:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800eb20:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800eb24:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800eb28:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800eb2c:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800eb30:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800eb34:	2b0e      	cmp	r3, #14
 800eb36:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800eb3a:	dc02      	bgt.n	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 800eb3c:	3305      	adds	r3, #5
 800eb3e:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800eb42:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800eb46:	eef4 7acd 	vcmpe.f32	s15, s26
 800eb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb4e:	f340 82e9 	ble.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800eb52:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800eb56:	eef4 7aeb 	vcmpe.f32	s15, s23
 800eb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb5e:	f340 82e1 	ble.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800eb62:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800eb66:	eef4 7aec 	vcmpe.f32	s15, s25
 800eb6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb6e:	f340 82d9 	ble.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800eb72:	9b08      	ldr	r3, [sp, #32]
 800eb74:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e938 <kalman_3gyro.constprop.0+0x1ce0>
 800eb78:	ed93 7a06 	vldr	s14, [r3, #24]
 800eb7c:	eef0 6ac7 	vabs.f32	s13, s14
 800eb80:	eef4 6ae7 	vcmpe.f32	s13, s15
 800eb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb88:	f140 82cc 	bpl.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800eb8c:	edd3 6a07 	vldr	s13, [r3, #28]
 800eb90:	eeb0 6ae6 	vabs.f32	s12, s13
 800eb94:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800eb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9c:	f140 82c2 	bpl.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800eba0:	ed93 6a08 	vldr	s12, [r3, #32]
 800eba4:	eef0 4ac6 	vabs.f32	s9, s12
 800eba8:	eef4 4ae7 	vcmpe.f32	s9, s15
 800ebac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb0:	f140 82b8 	bpl.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ebb4:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e93c <kalman_3gyro.constprop.0+0x1ce4>
 800ebb8:	eef0 5ae5 	vabs.f32	s11, s11
 800ebbc:	eef4 5ae7 	vcmpe.f32	s11, s15
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	f140 82ae 	bpl.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ebc8:	eef0 1ae1 	vabs.f32	s3, s3
 800ebcc:	eef4 1ae7 	vcmpe.f32	s3, s15
 800ebd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd4:	f140 82a6 	bpl.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ebd8:	eeb0 5ac5 	vabs.f32	s10, s10
 800ebdc:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800ebe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe4:	f140 829e 	bpl.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ebe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebea:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800ebee:	edd3 5a00 	vldr	s11, [r3]
 800ebf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebf4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ebf6:	ed93 5a00 	vldr	s10, [r3]
 800ebfa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ebfc:	eef4 5ac5 	vcmpe.f32	s11, s10
 800ec00:	2a09      	cmp	r2, #9
 800ec02:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800ec06:	ed93 4a00 	vldr	s8, [r3]
 800ec0a:	edd4 3a00 	vldr	s7, [r4]
 800ec0e:	bf8c      	ite	hi
 800ec10:	230a      	movhi	r3, #10
 800ec12:	2305      	movls	r3, #5
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	bfb4      	ite	lt
 800ec1a:	eef0 7a45 	vmovlt.f32	s15, s10
 800ec1e:	eef0 7a65 	vmovge.f32	s15, s11
 800ec22:	bf8c      	ite	hi
 800ec24:	eef0 4a45 	vmovhi.f32	s9, s10
 800ec28:	eef0 4a65 	vmovls.f32	s9, s11
 800ec2c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ec30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec34:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ec38:	bfb8      	it	lt
 800ec3a:	eef0 7a63 	vmovlt.f32	s15, s7
 800ec3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec42:	bf88      	it	hi
 800ec44:	eef0 4a63 	vmovhi.f32	s9, s7
 800ec48:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ec4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec50:	ee35 5a85 	vadd.f32	s10, s11, s10
 800ec54:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ec58:	edd1 5a00 	vldr	s11, [r1]
 800ec5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ec5e:	bfb8      	it	lt
 800ec60:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	bf88      	it	hi
 800ec6a:	eef0 4a44 	vmovhi.f32	s9, s8
 800ec6e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800ec72:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ec76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7a:	eef4 4ae5 	vcmpe.f32	s9, s11
 800ec7e:	bfb8      	it	lt
 800ec80:	eef0 7a65 	vmovlt.f32	s15, s11
 800ec84:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ec88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8c:	bf88      	it	hi
 800ec8e:	eef0 4a65 	vmovhi.f32	s9, s11
 800ec92:	2b05      	cmp	r3, #5
 800ec94:	ee35 5a25 	vadd.f32	s10, s10, s11
 800ec98:	edd1 5a00 	vldr	s11, [r1]
 800ec9c:	d065      	beq.n	800ed6a <kalman_3gyro.constprop.0+0x2112>
 800ec9e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800eca2:	edd1 3a00 	vldr	s7, [r1]
 800eca6:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800ecaa:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ecae:	ed91 4a00 	vldr	s8, [r1]
 800ecb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb6:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ecba:	bfb8      	it	lt
 800ecbc:	eef0 7a63 	vmovlt.f32	s15, s7
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	bf88      	it	hi
 800ecc6:	eef0 4a63 	vmovhi.f32	s9, s7
 800ecca:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ecce:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800ecd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ecda:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ecde:	edd1 3a00 	vldr	s7, [r1]
 800ece2:	bfb8      	it	lt
 800ece4:	eef0 7a44 	vmovlt.f32	s15, s8
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	bf88      	it	hi
 800ecee:	eef0 4a44 	vmovhi.f32	s9, s8
 800ecf2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ecf6:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800ecfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecfe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed02:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ed06:	ed91 4a00 	vldr	s8, [r1]
 800ed0a:	bfb8      	it	lt
 800ed0c:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed14:	bf88      	it	hi
 800ed16:	eef0 4a63 	vmovhi.f32	s9, s7
 800ed1a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed22:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed26:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ed2a:	bfb8      	it	lt
 800ed2c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed34:	bf88      	it	hi
 800ed36:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed3a:	2b0a      	cmp	r3, #10
 800ed3c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed40:	d113      	bne.n	800ed6a <kalman_3gyro.constprop.0+0x2112>
 800ed42:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ed46:	ed91 4a00 	vldr	s8, [r1]
 800ed4a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed52:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ed56:	bfb8      	it	lt
 800ed58:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed5c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ed60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed64:	bf88      	it	hi
 800ed66:	eef0 4a44 	vmovhi.f32	s9, s8
 800ed6a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ed6e:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800f10c <kalman_3gyro.constprop.0+0x24b4>
 800ed72:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800f110 <kalman_3gyro.constprop.0+0x24b8>
 800ed76:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed7a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ed7e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ed82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed86:	f300 81cd 	bgt.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ed8a:	eef0 7ac5 	vabs.f32	s15, s10
 800ed8e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ed92:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800f114 <kalman_3gyro.constprop.0+0x24bc>
 800ed96:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ed9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9e:	f300 81c1 	bgt.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800eda2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eda4:	ed91 5a00 	vldr	s10, [r1]
 800eda8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800edaa:	ed91 4a00 	vldr	s8, [r1]
 800edae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800edb0:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800edb4:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800edb8:	ed90 3a00 	vldr	s6, [r0]
 800edbc:	edd1 3a00 	vldr	s7, [r1]
 800edc0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800edc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edc6:	bfb4      	ite	lt
 800edc8:	eef0 7a44 	vmovlt.f32	s15, s8
 800edcc:	eef0 7a45 	vmovge.f32	s15, s10
 800edd0:	bf8c      	ite	hi
 800edd2:	eef0 4a44 	vmovhi.f32	s9, s8
 800edd6:	eef0 4a45 	vmovls.f32	s9, s10
 800edda:	eef4 7ac3 	vcmpe.f32	s15, s6
 800edde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ede6:	bfb8      	it	lt
 800ede8:	eef0 7a43 	vmovlt.f32	s15, s6
 800edec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf0:	bf88      	it	hi
 800edf2:	eef0 4a43 	vmovhi.f32	s9, s6
 800edf6:	eef4 7ae3 	vcmpe.f32	s15, s7
 800edfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfe:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee02:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ee06:	ed91 4a00 	vldr	s8, [r1]
 800ee0a:	bfb8      	it	lt
 800ee0c:	eef0 7a63 	vmovlt.f32	s15, s7
 800ee10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee14:	bf88      	it	hi
 800ee16:	eef0 4a63 	vmovhi.f32	s9, s7
 800ee1a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ee1e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ee22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee26:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ee2a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ee2e:	bfb8      	it	lt
 800ee30:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee38:	bf88      	it	hi
 800ee3a:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee3e:	2b05      	cmp	r3, #5
 800ee40:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ee44:	d065      	beq.n	800ef12 <kalman_3gyro.constprop.0+0x22ba>
 800ee46:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800ee4a:	edd1 3a00 	vldr	s7, [r1]
 800ee4e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800ee52:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ee56:	ed91 4a00 	vldr	s8, [r1]
 800ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee5e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ee62:	bfb8      	it	lt
 800ee64:	eef0 7a63 	vmovlt.f32	s15, s7
 800ee68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6c:	bf88      	it	hi
 800ee6e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ee72:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ee76:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800ee7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee7e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ee82:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ee86:	edd1 3a00 	vldr	s7, [r1]
 800ee8a:	bfb8      	it	lt
 800ee8c:	eef0 7a44 	vmovlt.f32	s15, s8
 800ee90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee94:	bf88      	it	hi
 800ee96:	eef0 4a44 	vmovhi.f32	s9, s8
 800ee9a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ee9e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800eea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea6:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eeaa:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eeae:	ed91 4a00 	vldr	s8, [r1]
 800eeb2:	bfb8      	it	lt
 800eeb4:	eef0 7a63 	vmovlt.f32	s15, s7
 800eeb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eebc:	bf88      	it	hi
 800eebe:	eef0 4a63 	vmovhi.f32	s9, s7
 800eec2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eece:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eed2:	bfb8      	it	lt
 800eed4:	eef0 7a44 	vmovlt.f32	s15, s8
 800eed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eedc:	bf88      	it	hi
 800eede:	eef0 4a44 	vmovhi.f32	s9, s8
 800eee2:	2b0a      	cmp	r3, #10
 800eee4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eee8:	d113      	bne.n	800ef12 <kalman_3gyro.constprop.0+0x22ba>
 800eeea:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800eeee:	ed91 4a00 	vldr	s8, [r1]
 800eef2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefa:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eefe:	bfb8      	it	lt
 800ef00:	eef0 7a44 	vmovlt.f32	s15, s8
 800ef04:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ef08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0c:	bf88      	it	hi
 800ef0e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ef12:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ef16:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800f10c <kalman_3gyro.constprop.0+0x24b4>
 800ef1a:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800f110 <kalman_3gyro.constprop.0+0x24b8>
 800ef1e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef22:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ef26:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ef2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2e:	f300 80f9 	bgt.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ef32:	eef0 7ac5 	vabs.f32	s15, s10
 800ef36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ef3a:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800f114 <kalman_3gyro.constprop.0+0x24bc>
 800ef3e:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ef42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef46:	f300 80ed 	bgt.w	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800ef4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ef4c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800ef4e:	edd1 4a00 	vldr	s9, [r1]
 800ef52:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ef54:	ed91 3a00 	vldr	s6, [r1]
 800ef58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef5a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ef5e:	ed91 4a00 	vldr	s8, [r1]
 800ef62:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800ef66:	edd1 3a00 	vldr	s7, [r1]
 800ef6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6e:	bfb4      	ite	lt
 800ef70:	eef0 7a43 	vmovlt.f32	s15, s6
 800ef74:	eef0 7a64 	vmovge.f32	s15, s9
 800ef78:	bf8c      	ite	hi
 800ef7a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800ef7e:	eeb0 5a64 	vmovls.f32	s10, s9
 800ef82:	eef4 3ae7 	vcmpe.f32	s7, s15
 800ef86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800ef8e:	bfa8      	it	ge
 800ef90:	eef0 7a63 	vmovge.f32	s15, s7
 800ef94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef98:	bf98      	it	ls
 800ef9a:	eeb0 5a63 	vmovls.f32	s10, s7
 800ef9e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800efa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efa6:	ee34 3a83 	vadd.f32	s6, s9, s6
 800efaa:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800efae:	edd5 4a00 	vldr	s9, [r5]
 800efb2:	bfa8      	it	ge
 800efb4:	eef0 7a44 	vmovge.f32	s15, s8
 800efb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efbc:	bf98      	it	ls
 800efbe:	eeb0 5a44 	vmovls.f32	s10, s8
 800efc2:	eef4 7ae4 	vcmpe.f32	s15, s9
 800efc6:	ee73 3a83 	vadd.f32	s7, s7, s6
 800efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efce:	eef4 4ac5 	vcmpe.f32	s9, s10
 800efd2:	bfb8      	it	lt
 800efd4:	eef0 7a64 	vmovlt.f32	s15, s9
 800efd8:	ee34 4a23 	vadd.f32	s8, s8, s7
 800efdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe0:	bf98      	it	ls
 800efe2:	eeb0 5a64 	vmovls.f32	s10, s9
 800efe6:	2b05      	cmp	r3, #5
 800efe8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800efec:	d065      	beq.n	800f0ba <kalman_3gyro.constprop.0+0x2462>
 800efee:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800eff2:	ed95 4a00 	vldr	s8, [r5]
 800eff6:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800effa:	eef4 7ac4 	vcmpe.f32	s15, s8
 800effe:	ed95 3a00 	vldr	s6, [r5]
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f00a:	bfb8      	it	lt
 800f00c:	eef0 7a44 	vmovlt.f32	s15, s8
 800f010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f014:	bf88      	it	hi
 800f016:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f01a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800f01e:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800f022:	edd5 3a00 	vldr	s7, [r5]
 800f026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02a:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800f02e:	bfb8      	it	lt
 800f030:	eef0 7a43 	vmovlt.f32	s15, s6
 800f034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f038:	bf88      	it	hi
 800f03a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800f03e:	eef4 7ae3 	vcmpe.f32	s15, s7
 800f042:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800f046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04a:	ee34 4a24 	vadd.f32	s8, s8, s9
 800f04e:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800f052:	edd5 4a00 	vldr	s9, [r5]
 800f056:	bfb8      	it	lt
 800f058:	eef0 7a63 	vmovlt.f32	s15, s7
 800f05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f060:	bf88      	it	hi
 800f062:	eeb0 5a63 	vmovhi.f32	s10, s7
 800f066:	eef4 7ae4 	vcmpe.f32	s15, s9
 800f06a:	ee34 4a03 	vadd.f32	s8, s8, s6
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800f076:	bfb8      	it	lt
 800f078:	eef0 7a64 	vmovlt.f32	s15, s9
 800f07c:	ee34 4a23 	vadd.f32	s8, s8, s7
 800f080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f084:	bf88      	it	hi
 800f086:	eeb0 5a64 	vmovhi.f32	s10, s9
 800f08a:	2b0a      	cmp	r3, #10
 800f08c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800f090:	d113      	bne.n	800f0ba <kalman_3gyro.constprop.0+0x2462>
 800f092:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800f096:	ed93 4a00 	vldr	s8, [r3]
 800f09a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a2:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800f0a6:	bfb8      	it	lt
 800f0a8:	eef0 7a44 	vmovlt.f32	s15, s8
 800f0ac:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b4:	bf88      	it	hi
 800f0b6:	eeb0 5a44 	vmovhi.f32	s10, s8
 800f0ba:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f0be:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800f10c <kalman_3gyro.constprop.0+0x24b4>
 800f0c2:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800f110 <kalman_3gyro.constprop.0+0x24b8>
 800f0c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f0ca:	ee64 4a85 	vmul.f32	s9, s9, s10
 800f0ce:	eef4 7ac4 	vcmpe.f32	s15, s8
 800f0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d6:	dc25      	bgt.n	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800f0d8:	eef0 7ae4 	vabs.f32	s15, s9
 800f0dc:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f0e0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800f114 <kalman_3gyro.constprop.0+0x24bc>
 800f0e4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800f0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ec:	dc1a      	bgt.n	800f124 <kalman_3gyro.constprop.0+0x24cc>
 800f0ee:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800f0f2:	2d00      	cmp	r5, #0
 800f0f4:	f000 80e0 	beq.w	800f2b8 <kalman_3gyro.constprop.0+0x2660>
 800f0f8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	f002 8439 	beq.w	8011974 <kalman_3gyro.constprop.0+0x4d1c>
 800f102:	2201      	movs	r2, #1
 800f104:	462b      	mov	r3, r5
 800f106:	9201      	str	r2, [sp, #4]
 800f108:	e01c      	b.n	800f144 <kalman_3gyro.constprop.0+0x24ec>
 800f10a:	bf00      	nop
 800f10c:	3be56041 	.word	0x3be56041
 800f110:	3dcccccd 	.word	0x3dcccccd
 800f114:	3e333333 	.word	0x3e333333
 800f118:	3d088889 	.word	0x3d088889
 800f11c:	42480000 	.word	0x42480000
 800f120:	00000000 	.word	0x00000000
 800f124:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800f128:	2100      	movs	r1, #0
 800f12a:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800f12e:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800f132:	2b00      	cmp	r3, #0
 800f134:	f000 80c1 	beq.w	800f2ba <kalman_3gyro.constprop.0+0x2662>
 800f138:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800f13c:	2a01      	cmp	r2, #1
 800f13e:	f001 8615 	beq.w	8010d6c <kalman_3gyro.constprop.0+0x4114>
 800f142:	9101      	str	r1, [sp, #4]
 800f144:	2b02      	cmp	r3, #2
 800f146:	f041 87d2 	bne.w	80110ee <kalman_3gyro.constprop.0+0x4496>
 800f14a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800f14e:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800f152:	f240 1301 	movw	r3, #257	; 0x101
 800f156:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800f15a:	2301      	movs	r3, #1
 800f15c:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800f160:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800f164:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800f168:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800f16c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800f170:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800f174:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800f178:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800f17c:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800f180:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800f184:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f188:	eef4 7ac8 	vcmpe.f32	s15, s16
 800f18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f190:	f2c2 809a 	blt.w	80112c8 <kalman_3gyro.constprop.0+0x4670>
 800f194:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800f198:	2a00      	cmp	r2, #0
 800f19a:	f002 83db 	beq.w	8011954 <kalman_3gyro.constprop.0+0x4cfc>
 800f19e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800f1a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f1ac:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800f1b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f1b4:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800f1b8:	f002 84da 	beq.w	8011b70 <kalman_3gyro.constprop.0+0x4f18>
 800f1bc:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800f1c0:	f002 80d0 	beq.w	8011364 <kalman_3gyro.constprop.0+0x470c>
 800f1c4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f1c8:	2a00      	cmp	r2, #0
 800f1ca:	f042 80d0 	bne.w	801136e <kalman_3gyro.constprop.0+0x4716>
 800f1ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1d0:	a830      	add	r0, sp, #192	; 0xc0
 800f1d2:	f04f 31ff 	mov.w	r1, #4294967295
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	edd2 7a00 	vldr	s15, [r2]
 800f1dc:	3101      	adds	r1, #1
 800f1de:	330c      	adds	r3, #12
 800f1e0:	3204      	adds	r2, #4
 800f1e2:	461c      	mov	r4, r3
 800f1e4:	ed94 7a00 	vldr	s14, [r4]
 800f1e8:	330c      	adds	r3, #12
 800f1ea:	4598      	cmp	r8, r3
 800f1ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f1f0:	d1f7      	bne.n	800f1e2 <kalman_3gyro.constprop.0+0x258a>
 800f1f2:	2902      	cmp	r1, #2
 800f1f4:	ece0 7a01 	vstmia	r0!, {s15}
 800f1f8:	f108 0804 	add.w	r8, r8, #4
 800f1fc:	d1eb      	bne.n	800f1d6 <kalman_3gyro.constprop.0+0x257e>
 800f1fe:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f118 <kalman_3gyro.constprop.0+0x24c0>
 800f202:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800f206:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800f20a:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800f20e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800f210:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800f214:	ee24 4a27 	vmul.f32	s8, s8, s15
 800f218:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800f21c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f220:	460a      	mov	r2, r1
 800f222:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800f226:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800f22a:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800f22e:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800f232:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23a:	f103 030c 	add.w	r3, r3, #12
 800f23e:	bf88      	it	hi
 800f240:	eef0 7a47 	vmovhi.f32	s15, s14
 800f244:	4293      	cmp	r3, r2
 800f246:	d1f2      	bne.n	800f22e <kalman_3gyro.constprop.0+0x25d6>
 800f248:	1d1a      	adds	r2, r3, #4
 800f24a:	4290      	cmp	r0, r2
 800f24c:	ece4 7a01 	vstmia	r4!, {s15}
 800f250:	d1e9      	bne.n	800f226 <kalman_3gyro.constprop.0+0x25ce>
 800f252:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f254:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800f258:	edd3 7a00 	vldr	s15, [r3]
 800f25c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800f260:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800f264:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800f268:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800f26c:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800f270:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800f274:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800f278:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800f27c:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800f280:	b14b      	cbz	r3, 800f296 <kalman_3gyro.constprop.0+0x263e>
 800f282:	ed9d 7a03 	vldr	s14, [sp, #12]
 800f286:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f28a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f292:	f102 8553 	bmi.w	8011d3c <kalman_3gyro.constprop.0+0x50e4>
 800f296:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800f29a:	2a1e      	cmp	r2, #30
 800f29c:	f002 84dd 	beq.w	8011c5a <kalman_3gyro.constprop.0+0x5002>
 800f2a0:	1c53      	adds	r3, r2, #1
 800f2a2:	2aff      	cmp	r2, #255	; 0xff
 800f2a4:	bf14      	ite	ne
 800f2a6:	b2db      	uxtbne	r3, r3
 800f2a8:	23ff      	moveq	r3, #255	; 0xff
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800f2b0:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f2b4:	9b01      	ldr	r3, [sp, #4]
 800f2b6:	e012      	b.n	800f2de <kalman_3gyro.constprop.0+0x2686>
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800f2be:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800f2c2:	9181      	str	r1, [sp, #516]	; 0x204
 800f2c4:	9282      	str	r2, [sp, #520]	; 0x208
 800f2c6:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800f2ca:	9183      	str	r1, [sp, #524]	; 0x20c
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f2d2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f2d6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800f2da:	f88b 2001 	strb.w	r2, [fp, #1]
 800f2de:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800f11c <kalman_3gyro.constprop.0+0x24c4>
 800f2e2:	eeb4 cae7 	vcmpe.f32	s24, s15
 800f2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ea:	f2c0 875f 	blt.w	80101ac <kalman_3gyro.constprop.0+0x3554>
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800f2f4:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f2f8:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f2fc:	2b01      	cmp	r3, #1
 800f2fe:	d125      	bne.n	800f34c <kalman_3gyro.constprop.0+0x26f4>
 800f300:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f304:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f308:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f30c:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f310:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f314:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f318:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f31c:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f320:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f324:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f328:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f32c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f330:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f334:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f338:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f33c:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f340:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f344:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f348:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f34c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f350:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f354:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f358:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f35c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f360:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f364:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f368:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f36c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f370:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f374:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f378:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f37c:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f380:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f384:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f388:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f38c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f390:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f394:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f398:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f39c:	9301      	str	r3, [sp, #4]
 800f39e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f3a2:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f3a6:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f3aa:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f3ae:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f3b2:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f3b6:	2500      	movs	r5, #0
 800f3b8:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f3bc:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f3c0:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f3c4:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f3c8:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f3cc:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f3d0:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f3d4:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f3d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f3dc:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f3e0:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f3e4:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f3e8:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f3ec:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f3f0:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f3f4:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f3f8:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f3fc:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f400:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f404:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f408:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f40c:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f410:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f414:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f418:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f41c:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f420:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f424:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800f120 <kalman_3gyro.constprop.0+0x24c8>
 800f428:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f42c:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f430:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f434:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f438:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f43c:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f440:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f444:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f44c:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f450:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f454:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f458:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f45c:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f460:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f464:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f468:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f46c:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f470:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f474:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f478:	e005      	b.n	800f486 <kalman_3gyro.constprop.0+0x282e>
 800f47a:	3501      	adds	r5, #1
 800f47c:	2d0c      	cmp	r5, #12
 800f47e:	f104 0404 	add.w	r4, r4, #4
 800f482:	f000 84fe 	beq.w	800fe82 <kalman_3gyro.constprop.0+0x322a>
 800f486:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0f5      	beq.n	800f47a <kalman_3gyro.constprop.0+0x2822>
 800f48e:	edd4 da00 	vldr	s27, [r4]
 800f492:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f496:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f49a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f49e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f4a2:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f4a6:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f4aa:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f4ae:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f4b2:	9b01      	ldr	r3, [sp, #4]
 800f4b4:	ed89 8a00 	vstr	s16, [r9]
 800f4b8:	ed89 8a01 	vstr	s16, [r9, #4]
 800f4bc:	ed89 8a02 	vstr	s16, [r9, #8]
 800f4c0:	ed89 8a03 	vstr	s16, [r9, #12]
 800f4c4:	ed89 8a04 	vstr	s16, [r9, #16]
 800f4c8:	ed89 8a05 	vstr	s16, [r9, #20]
 800f4cc:	ed89 8a06 	vstr	s16, [r9, #24]
 800f4d0:	ed89 8a07 	vstr	s16, [r9, #28]
 800f4d4:	ed89 8a08 	vstr	s16, [r9, #32]
 800f4d8:	464e      	mov	r6, r9
 800f4da:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f4de:	464a      	mov	r2, r9
 800f4e0:	ecb3 7a01 	vldmia	r3!, {s14}
 800f4e4:	ecf2 7a01 	vldmia	r2!, {s15}
 800f4e8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f0:	d006      	beq.n	800f500 <kalman_3gyro.constprop.0+0x28a8>
 800f4f2:	eef5 da40 	vcmp.f32	s27, #0.0
 800f4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fa:	bf18      	it	ne
 800f4fc:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f500:	ed93 7a08 	vldr	s14, [r3, #32]
 800f504:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50c:	d006      	beq.n	800f51c <kalman_3gyro.constprop.0+0x28c4>
 800f50e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f516:	bf18      	it	ne
 800f518:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f51c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f520:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f528:	d006      	beq.n	800f538 <kalman_3gyro.constprop.0+0x28e0>
 800f52a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f52e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f532:	bf18      	it	ne
 800f534:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f538:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f53c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	d006      	beq.n	800f554 <kalman_3gyro.constprop.0+0x28fc>
 800f546:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54e:	bf18      	it	ne
 800f550:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f554:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f558:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	d006      	beq.n	800f570 <kalman_3gyro.constprop.0+0x2918>
 800f562:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56a:	bf18      	it	ne
 800f56c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f570:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f574:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57c:	d006      	beq.n	800f58c <kalman_3gyro.constprop.0+0x2934>
 800f57e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f586:	bf18      	it	ne
 800f588:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f58c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f590:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	d006      	beq.n	800f5a8 <kalman_3gyro.constprop.0+0x2950>
 800f59a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a2:	bf18      	it	ne
 800f5a4:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f5a8:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f5ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b4:	d006      	beq.n	800f5c4 <kalman_3gyro.constprop.0+0x296c>
 800f5b6:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	bf18      	it	ne
 800f5c0:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f5c4:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f5c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d0:	d006      	beq.n	800f5e0 <kalman_3gyro.constprop.0+0x2988>
 800f5d2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	bf18      	it	ne
 800f5dc:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f5e0:	428b      	cmp	r3, r1
 800f5e2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f5e6:	f47f af7b 	bne.w	800f4e0 <kalman_3gyro.constprop.0+0x2888>
 800f5ea:	eef5 da40 	vcmp.f32	s27, #0.0
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	edd9 8a00 	vldr	s17, [r9]
 800f5f6:	f040 8543 	bne.w	8010080 <kalman_3gyro.constprop.0+0x3428>
 800f5fa:	eef0 7a6d 	vmov.f32	s15, s27
 800f5fe:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f606:	ed99 9a01 	vldr	s18, [r9, #4]
 800f60a:	d006      	beq.n	800f61a <kalman_3gyro.constprop.0+0x29c2>
 800f60c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f614:	bf18      	it	ne
 800f616:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f61a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f622:	edd9 aa02 	vldr	s21, [r9, #8]
 800f626:	d006      	beq.n	800f636 <kalman_3gyro.constprop.0+0x29de>
 800f628:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f630:	bf18      	it	ne
 800f632:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f636:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63e:	edd9 ba03 	vldr	s23, [r9, #12]
 800f642:	d006      	beq.n	800f652 <kalman_3gyro.constprop.0+0x29fa>
 800f644:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64c:	bf18      	it	ne
 800f64e:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f652:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65a:	edd9 ca04 	vldr	s25, [r9, #16]
 800f65e:	d006      	beq.n	800f66e <kalman_3gyro.constprop.0+0x2a16>
 800f660:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f668:	bf18      	it	ne
 800f66a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f66e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f676:	ed99 ca05 	vldr	s24, [r9, #20]
 800f67a:	d006      	beq.n	800f68a <kalman_3gyro.constprop.0+0x2a32>
 800f67c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f684:	bf18      	it	ne
 800f686:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f68a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f692:	ed99 da06 	vldr	s26, [r9, #24]
 800f696:	d006      	beq.n	800f6a6 <kalman_3gyro.constprop.0+0x2a4e>
 800f698:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a0:	bf18      	it	ne
 800f6a2:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f6a6:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ae:	ed99 aa07 	vldr	s20, [r9, #28]
 800f6b2:	d006      	beq.n	800f6c2 <kalman_3gyro.constprop.0+0x2a6a>
 800f6b4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6bc:	bf18      	it	ne
 800f6be:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f6c2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ca:	ed99 ba08 	vldr	s22, [r9, #32]
 800f6ce:	d006      	beq.n	800f6de <kalman_3gyro.constprop.0+0x2a86>
 800f6d0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6d8:	bf18      	it	ne
 800f6da:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f6de:	ab87      	add	r3, sp, #540	; 0x21c
 800f6e0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f6e4:	ed92 7a00 	vldr	s14, [r2]
 800f6e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6ec:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f6f0:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f6f4:	2d05      	cmp	r5, #5
 800f6f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f6fa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f6fe:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f702:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f706:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f70a:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f70e:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f712:	ee2d da27 	vmul.f32	s26, s26, s15
 800f716:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f71a:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f71e:	edc9 8a00 	vstr	s17, [r9]
 800f722:	ed89 9a01 	vstr	s18, [r9, #4]
 800f726:	edc9 aa02 	vstr	s21, [r9, #8]
 800f72a:	edc9 ba03 	vstr	s23, [r9, #12]
 800f72e:	edc9 ca04 	vstr	s25, [r9, #16]
 800f732:	ed89 ca05 	vstr	s24, [r9, #20]
 800f736:	ed89 da06 	vstr	s26, [r9, #24]
 800f73a:	ed89 aa07 	vstr	s20, [r9, #28]
 800f73e:	ed89 ba08 	vstr	s22, [r9, #32]
 800f742:	f340 8497 	ble.w	8010074 <kalman_3gyro.constprop.0+0x341c>
 800f746:	eef5 da40 	vcmp.f32	s27, #0.0
 800f74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74e:	f000 8510 	beq.w	8010172 <kalman_3gyro.constprop.0+0x351a>
 800f752:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f756:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75e:	d001      	beq.n	800f764 <kalman_3gyro.constprop.0+0x2b0c>
 800f760:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f764:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76c:	d008      	beq.n	800f780 <kalman_3gyro.constprop.0+0x2b28>
 800f76e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f772:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77a:	bf18      	it	ne
 800f77c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f780:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f788:	d008      	beq.n	800f79c <kalman_3gyro.constprop.0+0x2b44>
 800f78a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f78e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f796:	bf18      	it	ne
 800f798:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f79c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a4:	d008      	beq.n	800f7b8 <kalman_3gyro.constprop.0+0x2b60>
 800f7a6:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f7aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b2:	bf18      	it	ne
 800f7b4:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f7b8:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c0:	d008      	beq.n	800f7d4 <kalman_3gyro.constprop.0+0x2b7c>
 800f7c2:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f7c6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ce:	bf18      	it	ne
 800f7d0:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f7d4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7dc:	d008      	beq.n	800f7f0 <kalman_3gyro.constprop.0+0x2b98>
 800f7de:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f7e2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ea:	bf18      	it	ne
 800f7ec:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f7f0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f8:	d008      	beq.n	800f80c <kalman_3gyro.constprop.0+0x2bb4>
 800f7fa:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f7fe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f806:	bf18      	it	ne
 800f808:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f80c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f814:	d008      	beq.n	800f828 <kalman_3gyro.constprop.0+0x2bd0>
 800f816:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f81a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f822:	bf18      	it	ne
 800f824:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f828:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f830:	d008      	beq.n	800f844 <kalman_3gyro.constprop.0+0x2bec>
 800f832:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f836:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f83e:	bf18      	it	ne
 800f840:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f844:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f846:	4413      	add	r3, r2
 800f848:	edd3 9a00 	vldr	s19, [r3]
 800f84c:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f850:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f854:	2100      	movs	r1, #0
 800f856:	4650      	mov	r0, sl
 800f858:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f85c:	edcd 5a04 	vstr	s11, [sp, #16]
 800f860:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f864:	edcd 6a02 	vstr	s13, [sp, #8]
 800f868:	f008 f828 	bl	80178bc <memset>
 800f86c:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f870:	eddd 5a04 	vldr	s11, [sp, #16]
 800f874:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f878:	eddd 6a02 	vldr	s13, [sp, #8]
 800f87c:	4651      	mov	r1, sl
 800f87e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f882:	4653      	mov	r3, sl
 800f884:	ecf6 7a01 	vldmia	r6!, {s15}
 800f888:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f890:	d062      	beq.n	800f958 <kalman_3gyro.constprop.0+0x2d00>
 800f892:	eef5 da40 	vcmp.f32	s27, #0.0
 800f896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f89a:	d005      	beq.n	800f8a8 <kalman_3gyro.constprop.0+0x2c50>
 800f89c:	ed93 7a00 	vldr	s14, [r3]
 800f8a0:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f8a4:	ed83 7a00 	vstr	s14, [r3]
 800f8a8:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b0:	d005      	beq.n	800f8be <kalman_3gyro.constprop.0+0x2c66>
 800f8b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f8b6:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f8ba:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f8be:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c6:	d005      	beq.n	800f8d4 <kalman_3gyro.constprop.0+0x2c7c>
 800f8c8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f8cc:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f8d0:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f8d4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8dc:	d005      	beq.n	800f8ea <kalman_3gyro.constprop.0+0x2c92>
 800f8de:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f8e2:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f8e6:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f8ea:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8f2:	d005      	beq.n	800f900 <kalman_3gyro.constprop.0+0x2ca8>
 800f8f4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f8f8:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f8fc:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f900:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f908:	d005      	beq.n	800f916 <kalman_3gyro.constprop.0+0x2cbe>
 800f90a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f90e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f912:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f916:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91e:	d005      	beq.n	800f92c <kalman_3gyro.constprop.0+0x2cd4>
 800f920:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f924:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f928:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f92c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f934:	d005      	beq.n	800f942 <kalman_3gyro.constprop.0+0x2cea>
 800f936:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f93a:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f93e:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f942:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94a:	d005      	beq.n	800f958 <kalman_3gyro.constprop.0+0x2d00>
 800f94c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f950:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f954:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f958:	4296      	cmp	r6, r2
 800f95a:	f103 0304 	add.w	r3, r3, #4
 800f95e:	d191      	bne.n	800f884 <kalman_3gyro.constprop.0+0x2c2c>
 800f960:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f964:	4656      	mov	r6, sl
 800f966:	463b      	mov	r3, r7
 800f968:	2208      	movs	r2, #8
 800f96a:	2000      	movs	r0, #0
 800f96c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f970:	e074      	b.n	800fa5c <kalman_3gyro.constprop.0+0x2e04>
 800f972:	edd6 7a00 	vldr	s15, [r6]
 800f976:	ed83 8a01 	vstr	s16, [r3, #4]
 800f97a:	eef1 7a67 	vneg.f32	s15, s15
 800f97e:	2801      	cmp	r0, #1
 800f980:	edc6 7a00 	vstr	s15, [r6]
 800f984:	f1a2 0c07 	sub.w	ip, r2, #7
 800f988:	f000 831e 	beq.w	800ffc8 <kalman_3gyro.constprop.0+0x3370>
 800f98c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f990:	eddc 7a00 	vldr	s15, [ip]
 800f994:	ed83 8a02 	vstr	s16, [r3, #8]
 800f998:	eef1 7a67 	vneg.f32	s15, s15
 800f99c:	2802      	cmp	r0, #2
 800f99e:	edcc 7a00 	vstr	s15, [ip]
 800f9a2:	f1a2 0c06 	sub.w	ip, r2, #6
 800f9a6:	f000 82f8 	beq.w	800ff9a <kalman_3gyro.constprop.0+0x3342>
 800f9aa:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9ae:	eddc 7a00 	vldr	s15, [ip]
 800f9b2:	ed83 8a03 	vstr	s16, [r3, #12]
 800f9b6:	eef1 7a67 	vneg.f32	s15, s15
 800f9ba:	2803      	cmp	r0, #3
 800f9bc:	edcc 7a00 	vstr	s15, [ip]
 800f9c0:	f1a2 0c05 	sub.w	ip, r2, #5
 800f9c4:	d170      	bne.n	800faa8 <kalman_3gyro.constprop.0+0x2e50>
 800f9c6:	edd6 7a03 	vldr	s15, [r6, #12]
 800f9ca:	ed83 8a04 	vstr	s16, [r3, #16]
 800f9ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9d2:	f1a2 0e04 	sub.w	lr, r2, #4
 800f9d6:	edc6 7a03 	vstr	s15, [r6, #12]
 800f9da:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f9de:	edde 7a00 	vldr	s15, [lr]
 800f9e2:	ed83 8a05 	vstr	s16, [r3, #20]
 800f9e6:	eef1 7a67 	vneg.f32	s15, s15
 800f9ea:	f1a2 0c03 	sub.w	ip, r2, #3
 800f9ee:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f9f2:	edce 7a00 	vstr	s15, [lr]
 800f9f6:	eddc 7a00 	vldr	s15, [ip]
 800f9fa:	ed83 8a06 	vstr	s16, [r3, #24]
 800f9fe:	eef1 7a67 	vneg.f32	s15, s15
 800fa02:	edcc 7a00 	vstr	s15, [ip]
 800fa06:	f1a2 0c02 	sub.w	ip, r2, #2
 800fa0a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa0e:	eddc 7a00 	vldr	s15, [ip]
 800fa12:	ed83 8a07 	vstr	s16, [r3, #28]
 800fa16:	eef1 7a67 	vneg.f32	s15, s15
 800fa1a:	2807      	cmp	r0, #7
 800fa1c:	edcc 7a00 	vstr	s15, [ip]
 800fa20:	f102 3cff 	add.w	ip, r2, #4294967295
 800fa24:	f040 80a2 	bne.w	800fb6c <kalman_3gyro.constprop.0+0x2f14>
 800fa28:	edd6 7a07 	vldr	s15, [r6, #28]
 800fa2c:	ed83 8a08 	vstr	s16, [r3, #32]
 800fa30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa34:	edc6 7a07 	vstr	s15, [r6, #28]
 800fa38:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800fa3c:	eddc 7a00 	vldr	s15, [ip]
 800fa40:	3001      	adds	r0, #1
 800fa42:	eef1 7a67 	vneg.f32	s15, s15
 800fa46:	2809      	cmp	r0, #9
 800fa48:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fa4c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800fa50:	f102 0209 	add.w	r2, r2, #9
 800fa54:	edcc 7a00 	vstr	s15, [ip]
 800fa58:	f000 809f 	beq.w	800fb9a <kalman_3gyro.constprop.0+0x2f42>
 800fa5c:	ed83 8a00 	vstr	s16, [r3]
 800fa60:	2800      	cmp	r0, #0
 800fa62:	d186      	bne.n	800f972 <kalman_3gyro.constprop.0+0x2d1a>
 800fa64:	edda 7a00 	vldr	s15, [sl]
 800fa68:	ed83 8a01 	vstr	s16, [r3, #4]
 800fa6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa70:	f1a2 0e07 	sub.w	lr, r2, #7
 800fa74:	edc6 7a00 	vstr	s15, [r6]
 800fa78:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fa7c:	edde 7a00 	vldr	s15, [lr]
 800fa80:	ed83 8a02 	vstr	s16, [r3, #8]
 800fa84:	eef1 7a67 	vneg.f32	s15, s15
 800fa88:	f1a2 0c06 	sub.w	ip, r2, #6
 800fa8c:	edce 7a00 	vstr	s15, [lr]
 800fa90:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fa94:	eddc 7a00 	vldr	s15, [ip]
 800fa98:	ed83 8a03 	vstr	s16, [r3, #12]
 800fa9c:	eef1 7a67 	vneg.f32	s15, s15
 800faa0:	edcc 7a00 	vstr	s15, [ip]
 800faa4:	f1a2 0c05 	sub.w	ip, r2, #5
 800faa8:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800faac:	eddc 7a00 	vldr	s15, [ip]
 800fab0:	ed83 8a04 	vstr	s16, [r3, #16]
 800fab4:	eef1 7a67 	vneg.f32	s15, s15
 800fab8:	2804      	cmp	r0, #4
 800faba:	edcc 7a00 	vstr	s15, [ip]
 800fabe:	f1a2 0c04 	sub.w	ip, r2, #4
 800fac2:	d031      	beq.n	800fb28 <kalman_3gyro.constprop.0+0x2ed0>
 800fac4:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fac8:	eddc 7a00 	vldr	s15, [ip]
 800facc:	ed83 8a05 	vstr	s16, [r3, #20]
 800fad0:	eef1 7a67 	vneg.f32	s15, s15
 800fad4:	2805      	cmp	r0, #5
 800fad6:	edcc 7a00 	vstr	s15, [ip]
 800fada:	f1a2 0c03 	sub.w	ip, r2, #3
 800fade:	f000 8245 	beq.w	800ff6c <kalman_3gyro.constprop.0+0x3314>
 800fae2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fae6:	eddc 7a00 	vldr	s15, [ip]
 800faea:	ed83 8a06 	vstr	s16, [r3, #24]
 800faee:	eef1 7a67 	vneg.f32	s15, s15
 800faf2:	2806      	cmp	r0, #6
 800faf4:	edcc 7a00 	vstr	s15, [ip]
 800faf8:	f1a2 0c02 	sub.w	ip, r2, #2
 800fafc:	d185      	bne.n	800fa0a <kalman_3gyro.constprop.0+0x2db2>
 800fafe:	edd6 7a06 	vldr	s15, [r6, #24]
 800fb02:	ed83 8a07 	vstr	s16, [r3, #28]
 800fb06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb0a:	f102 3cff 	add.w	ip, r2, #4294967295
 800fb0e:	edc6 7a06 	vstr	s15, [r6, #24]
 800fb12:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb16:	eddc 7a00 	vldr	s15, [ip]
 800fb1a:	ed83 8a08 	vstr	s16, [r3, #32]
 800fb1e:	eef1 7a67 	vneg.f32	s15, s15
 800fb22:	edcc 7a00 	vstr	s15, [ip]
 800fb26:	e787      	b.n	800fa38 <kalman_3gyro.constprop.0+0x2de0>
 800fb28:	edd6 7a04 	vldr	s15, [r6, #16]
 800fb2c:	ed83 8a05 	vstr	s16, [r3, #20]
 800fb30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fb34:	f1a2 0e03 	sub.w	lr, r2, #3
 800fb38:	edc6 7a04 	vstr	s15, [r6, #16]
 800fb3c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fb40:	edde 7a00 	vldr	s15, [lr]
 800fb44:	ed83 8a06 	vstr	s16, [r3, #24]
 800fb48:	eef1 7a67 	vneg.f32	s15, s15
 800fb4c:	f1a2 0c02 	sub.w	ip, r2, #2
 800fb50:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb54:	edce 7a00 	vstr	s15, [lr]
 800fb58:	eddc 7a00 	vldr	s15, [ip]
 800fb5c:	ed83 8a07 	vstr	s16, [r3, #28]
 800fb60:	eef1 7a67 	vneg.f32	s15, s15
 800fb64:	edcc 7a00 	vstr	s15, [ip]
 800fb68:	f102 3cff 	add.w	ip, r2, #4294967295
 800fb6c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fb70:	eddc 7a00 	vldr	s15, [ip]
 800fb74:	ed83 8a08 	vstr	s16, [r3, #32]
 800fb78:	eef1 7a67 	vneg.f32	s15, s15
 800fb7c:	2808      	cmp	r0, #8
 800fb7e:	edcc 7a00 	vstr	s15, [ip]
 800fb82:	f47f af59 	bne.w	800fa38 <kalman_3gyro.constprop.0+0x2de0>
 800fb86:	ed96 7a08 	vldr	s14, [r6, #32]
 800fb8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb92:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fb96:	edc2 7a00 	vstr	s15, [r2]
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800fba0:	ecb1 3a01 	vldmia	r1!, {s6}
 800fba4:	edd1 3a08 	vldr	s7, [r1, #32]
 800fba8:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800fbac:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800fbb0:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800fbb4:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800fbb8:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800fbbc:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800fbc0:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800fbc4:	465a      	mov	r2, fp
 800fbc6:	463b      	mov	r3, r7
 800fbc8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800fbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd0:	d00c      	beq.n	800fbec <kalman_3gyro.constprop.0+0x2f94>
 800fbd2:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800fbd6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbde:	d005      	beq.n	800fbec <kalman_3gyro.constprop.0+0x2f94>
 800fbe0:	edd3 7a00 	vldr	s15, [r3]
 800fbe4:	eee3 7a22 	vfma.f32	s15, s6, s5
 800fbe8:	edc3 7a00 	vstr	s15, [r3]
 800fbec:	eef5 3a40 	vcmp.f32	s7, #0.0
 800fbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf4:	d00c      	beq.n	800fc10 <kalman_3gyro.constprop.0+0x2fb8>
 800fbf6:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800fbfa:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc02:	d005      	beq.n	800fc10 <kalman_3gyro.constprop.0+0x2fb8>
 800fc04:	edd3 7a00 	vldr	s15, [r3]
 800fc08:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800fc0c:	edc3 7a00 	vstr	s15, [r3]
 800fc10:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800fc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc18:	d00c      	beq.n	800fc34 <kalman_3gyro.constprop.0+0x2fdc>
 800fc1a:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800fc1e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc26:	d005      	beq.n	800fc34 <kalman_3gyro.constprop.0+0x2fdc>
 800fc28:	edd3 7a00 	vldr	s15, [r3]
 800fc2c:	eee4 7a22 	vfma.f32	s15, s8, s5
 800fc30:	edc3 7a00 	vstr	s15, [r3]
 800fc34:	eef5 4a40 	vcmp.f32	s9, #0.0
 800fc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3c:	d00c      	beq.n	800fc58 <kalman_3gyro.constprop.0+0x3000>
 800fc3e:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800fc42:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4a:	d005      	beq.n	800fc58 <kalman_3gyro.constprop.0+0x3000>
 800fc4c:	edd3 7a00 	vldr	s15, [r3]
 800fc50:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800fc54:	edc3 7a00 	vstr	s15, [r3]
 800fc58:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800fc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc60:	d00c      	beq.n	800fc7c <kalman_3gyro.constprop.0+0x3024>
 800fc62:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800fc66:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6e:	d005      	beq.n	800fc7c <kalman_3gyro.constprop.0+0x3024>
 800fc70:	edd3 7a00 	vldr	s15, [r3]
 800fc74:	eee5 7a22 	vfma.f32	s15, s10, s5
 800fc78:	edc3 7a00 	vstr	s15, [r3]
 800fc7c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800fc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc84:	d00c      	beq.n	800fca0 <kalman_3gyro.constprop.0+0x3048>
 800fc86:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800fc8a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc92:	d005      	beq.n	800fca0 <kalman_3gyro.constprop.0+0x3048>
 800fc94:	edd3 7a00 	vldr	s15, [r3]
 800fc98:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800fc9c:	edc3 7a00 	vstr	s15, [r3]
 800fca0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca8:	d00c      	beq.n	800fcc4 <kalman_3gyro.constprop.0+0x306c>
 800fcaa:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800fcae:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb6:	d005      	beq.n	800fcc4 <kalman_3gyro.constprop.0+0x306c>
 800fcb8:	edd3 7a00 	vldr	s15, [r3]
 800fcbc:	eee6 7a22 	vfma.f32	s15, s12, s5
 800fcc0:	edc3 7a00 	vstr	s15, [r3]
 800fcc4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fccc:	d00c      	beq.n	800fce8 <kalman_3gyro.constprop.0+0x3090>
 800fcce:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800fcd2:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcda:	d005      	beq.n	800fce8 <kalman_3gyro.constprop.0+0x3090>
 800fcdc:	edd3 7a00 	vldr	s15, [r3]
 800fce0:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800fce4:	edc3 7a00 	vstr	s15, [r3]
 800fce8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fcec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf0:	d00c      	beq.n	800fd0c <kalman_3gyro.constprop.0+0x30b4>
 800fcf2:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800fcf6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfe:	d005      	beq.n	800fd0c <kalman_3gyro.constprop.0+0x30b4>
 800fd00:	edd3 7a00 	vldr	s15, [r3]
 800fd04:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fd08:	edc3 7a00 	vstr	s15, [r3]
 800fd0c:	3224      	adds	r2, #36	; 0x24
 800fd0e:	4296      	cmp	r6, r2
 800fd10:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fd14:	f47f af58 	bne.w	800fbc8 <kalman_3gyro.constprop.0+0x2f70>
 800fd18:	3001      	adds	r0, #1
 800fd1a:	2809      	cmp	r0, #9
 800fd1c:	f107 0704 	add.w	r7, r7, #4
 800fd20:	f47f af3e 	bne.w	800fba0 <kalman_3gyro.constprop.0+0x2f48>
 800fd24:	9801      	ldr	r0, [sp, #4]
 800fd26:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fd2a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fd2e:	f007 fd9d 	bl	801786c <memcpy>
 800fd32:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3a:	f000 817c 	beq.w	8010036 <kalman_3gyro.constprop.0+0x33de>
 800fd3e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd46:	f000 8176 	beq.w	8010036 <kalman_3gyro.constprop.0+0x33de>
 800fd4a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd52:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fd56:	f040 8212 	bne.w	801017e <kalman_3gyro.constprop.0+0x3526>
 800fd5a:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fd5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd62:	f000 8177 	beq.w	8010054 <kalman_3gyro.constprop.0+0x33fc>
 800fd66:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd6e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fd72:	f040 81cb 	bne.w	801010c <kalman_3gyro.constprop.0+0x34b4>
 800fd76:	eef0 ba47 	vmov.f32	s23, s14
 800fd7a:	eef0 aa49 	vmov.f32	s21, s18
 800fd7e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd86:	f000 8138 	beq.w	800fffa <kalman_3gyro.constprop.0+0x33a2>
 800fd8a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd92:	f000 824e 	beq.w	8010232 <kalman_3gyro.constprop.0+0x35da>
 800fd96:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fda2:	eef0 7a48 	vmov.f32	s15, s16
 800fda6:	f040 81c5 	bne.w	8010134 <kalman_3gyro.constprop.0+0x34dc>
 800fdaa:	eeb0 ca47 	vmov.f32	s24, s14
 800fdae:	eef0 ca67 	vmov.f32	s25, s15
 800fdb2:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fdb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdba:	f000 8179 	beq.w	80100b0 <kalman_3gyro.constprop.0+0x3458>
 800fdbe:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	f000 8125 	beq.w	8010014 <kalman_3gyro.constprop.0+0x33bc>
 800fdca:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd2:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fdd6:	eef0 7a48 	vmov.f32	s15, s16
 800fdda:	f040 81be 	bne.w	801015a <kalman_3gyro.constprop.0+0x3502>
 800fdde:	eeb0 aa47 	vmov.f32	s20, s14
 800fde2:	eeb0 da67 	vmov.f32	s26, s15
 800fde6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	f000 811f 	beq.w	8010030 <kalman_3gyro.constprop.0+0x33d8>
 800fdf2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfa:	f000 821d 	beq.w	8010238 <kalman_3gyro.constprop.0+0x35e0>
 800fdfe:	eef0 7a48 	vmov.f32	s15, s16
 800fe02:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fe06:	eef0 9a67 	vmov.f32	s19, s15
 800fe0a:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fe0e:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fe12:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fe16:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fe1a:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fe1e:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fe22:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fe26:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800fe2a:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800fe2e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fe32:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fe36:	ee74 baab 	vadd.f32	s23, s9, s23
 800fe3a:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fe3e:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fe42:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fe46:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800fe4a:	ee77 9a29 	vadd.f32	s19, s14, s19
 800fe4e:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800fe52:	3501      	adds	r5, #1
 800fe54:	2d0c      	cmp	r5, #12
 800fe56:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800fe5a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800fe5e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800fe62:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800fe66:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800fe6a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800fe6e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800fe72:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800fe76:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800fe7a:	f104 0404 	add.w	r4, r4, #4
 800fe7e:	f47f ab02 	bne.w	800f486 <kalman_3gyro.constprop.0+0x282e>
 800fe82:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800fe86:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fe8a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fe8e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800fe92:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fe96:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fe9a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fe9e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea6:	f100 81b5 	bmi.w	8010214 <kalman_3gyro.constprop.0+0x35bc>
 800feaa:	eef1 4ae7 	vsqrt.f32	s9, s15
 800feae:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 8010240 <kalman_3gyro.constprop.0+0x35e8>
 800feb2:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800feb6:	ee67 4a86 	vmul.f32	s9, s15, s12
 800feba:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800febe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fec2:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800fec6:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800feca:	aa36      	add	r2, sp, #216	; 0xd8
 800fecc:	edc3 4a00 	vstr	s9, [r3]
 800fed0:	edc3 5a01 	vstr	s11, [r3, #4]
 800fed4:	edc3 7a02 	vstr	s15, [r3, #8]
 800fed8:	ed83 5a03 	vstr	s10, [r3, #12]
 800fedc:	4618      	mov	r0, r3
 800fede:	4611      	mov	r1, r2
 800fee0:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800fee4:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800fee8:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800feec:	f7fb fdbc 	bl	800ba68 <qmult>
 800fef0:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800fef4:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800fef8:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800fefc:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800ff00:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800ff04:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ff06:	ee66 7a06 	vmul.f32	s15, s12, s12
 800ff0a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ff0e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ff12:	ae54      	add	r6, sp, #336	; 0x150
 800ff14:	af5c      	add	r7, sp, #368	; 0x170
 800ff16:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ff1a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ff1e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800ff22:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800ff26:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ff2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ff2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ff32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff36:	edc3 5a00 	vstr	s11, [r3]
 800ff3a:	ed83 6a01 	vstr	s12, [r3, #4]
 800ff3e:	edc3 6a02 	vstr	s13, [r3, #8]
 800ff42:	ed83 7a03 	vstr	s14, [r3, #12]
 800ff46:	4634      	mov	r4, r6
 800ff48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff4a:	42bc      	cmp	r4, r7
 800ff4c:	6028      	str	r0, [r5, #0]
 800ff4e:	6069      	str	r1, [r5, #4]
 800ff50:	60aa      	str	r2, [r5, #8]
 800ff52:	60eb      	str	r3, [r5, #12]
 800ff54:	4626      	mov	r6, r4
 800ff56:	f105 0510 	add.w	r5, r5, #16
 800ff5a:	d1f4      	bne.n	800ff46 <kalman_3gyro.constprop.0+0x32ee>
 800ff5c:	6820      	ldr	r0, [r4, #0]
 800ff5e:	6028      	str	r0, [r5, #0]
 800ff60:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800ff64:	ecbd 8b10 	vpop	{d8-d15}
 800ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6c:	edd6 7a05 	vldr	s15, [r6, #20]
 800ff70:	ed83 8a06 	vstr	s16, [r3, #24]
 800ff74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff78:	f1a2 0e02 	sub.w	lr, r2, #2
 800ff7c:	edc6 7a05 	vstr	s15, [r6, #20]
 800ff80:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800ff84:	edde 7a00 	vldr	s15, [lr]
 800ff88:	ed83 8a07 	vstr	s16, [r3, #28]
 800ff8c:	eef1 7a67 	vneg.f32	s15, s15
 800ff90:	f102 3cff 	add.w	ip, r2, #4294967295
 800ff94:	edce 7a00 	vstr	s15, [lr]
 800ff98:	e5bb      	b.n	800fb12 <kalman_3gyro.constprop.0+0x2eba>
 800ff9a:	edd6 7a02 	vldr	s15, [r6, #8]
 800ff9e:	ed83 8a03 	vstr	s16, [r3, #12]
 800ffa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffa6:	f1a2 0c05 	sub.w	ip, r2, #5
 800ffaa:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800ffae:	edc6 7a02 	vstr	s15, [r6, #8]
 800ffb2:	eddc 7a00 	vldr	s15, [ip]
 800ffb6:	ed83 8a04 	vstr	s16, [r3, #16]
 800ffba:	eef1 7a67 	vneg.f32	s15, s15
 800ffbe:	edcc 7a00 	vstr	s15, [ip]
 800ffc2:	f1a2 0c04 	sub.w	ip, r2, #4
 800ffc6:	e57d      	b.n	800fac4 <kalman_3gyro.constprop.0+0x2e6c>
 800ffc8:	edd6 7a01 	vldr	s15, [r6, #4]
 800ffcc:	ed83 8a02 	vstr	s16, [r3, #8]
 800ffd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffd4:	f1a2 0c06 	sub.w	ip, r2, #6
 800ffd8:	edc6 7a01 	vstr	s15, [r6, #4]
 800ffdc:	e558      	b.n	800fa90 <kalman_3gyro.constprop.0+0x2e38>
 800ffde:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ffe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe6:	ee69 7aab 	vmul.f32	s15, s19, s23
 800ffea:	eeb0 7a48 	vmov.f32	s14, s16
 800ffee:	f040 8097 	bne.w	8010120 <kalman_3gyro.constprop.0+0x34c8>
 800fff2:	eef0 ca67 	vmov.f32	s25, s15
 800fff6:	eef0 ba47 	vmov.f32	s23, s14
 800fffa:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010002:	f43f aed6 	beq.w	800fdb2 <kalman_3gyro.constprop.0+0x315a>
 8010006:	eef5 9a40 	vcmp.f32	s19, #0.0
 801000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801000e:	d142      	bne.n	8010096 <kalman_3gyro.constprop.0+0x343e>
 8010010:	eeb0 ca69 	vmov.f32	s24, s19
 8010014:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8010018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001c:	f040 80ba 	bne.w	8010194 <kalman_3gyro.constprop.0+0x353c>
 8010020:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8010024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010028:	eeb0 da4a 	vmov.f32	s26, s20
 801002c:	f47f aee1 	bne.w	800fdf2 <kalman_3gyro.constprop.0+0x319a>
 8010030:	eef0 9a4b 	vmov.f32	s19, s22
 8010034:	e6e9      	b.n	800fe0a <kalman_3gyro.constprop.0+0x31b2>
 8010036:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	d051      	beq.n	80100e4 <kalman_3gyro.constprop.0+0x348c>
 8010040:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010048:	f040 8097 	bne.w	801017a <kalman_3gyro.constprop.0+0x3522>
 801004c:	eef0 aa69 	vmov.f32	s21, s19
 8010050:	eef0 8a69 	vmov.f32	s17, s19
 8010054:	eef5 ba40 	vcmp.f32	s23, #0.0
 8010058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005c:	f43f ae8f 	beq.w	800fd7e <kalman_3gyro.constprop.0+0x3126>
 8010060:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010068:	d1b9      	bne.n	800ffde <kalman_3gyro.constprop.0+0x3386>
 801006a:	eef0 ca69 	vmov.f32	s25, s19
 801006e:	eef0 ba69 	vmov.f32	s23, s19
 8010072:	e7c2      	b.n	800fffa <kalman_3gyro.constprop.0+0x33a2>
 8010074:	aa7b      	add	r2, sp, #492	; 0x1ec
 8010076:	4413      	add	r3, r2
 8010078:	edd3 9a00 	vldr	s19, [r3]
 801007c:	f7ff bbe8 	b.w	800f850 <kalman_3gyro.constprop.0+0x2bf8>
 8010080:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	bf14      	ite	ne
 801008a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 801008e:	eef0 7a68 	vmoveq.f32	s15, s17
 8010092:	f7ff bab4 	b.w	800f5fe <kalman_3gyro.constprop.0+0x29a6>
 8010096:	eeb5 da40 	vcmp.f32	s26, #0.0
 801009a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 80100a2:	eeb0 7a48 	vmov.f32	s14, s16
 80100a6:	d14e      	bne.n	8010146 <kalman_3gyro.constprop.0+0x34ee>
 80100a8:	eeb0 da67 	vmov.f32	s26, s15
 80100ac:	eeb0 ca47 	vmov.f32	s24, s14
 80100b0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80100b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b8:	f43f ae95 	beq.w	800fde6 <kalman_3gyro.constprop.0+0x318e>
 80100bc:	eef5 9a40 	vcmp.f32	s19, #0.0
 80100c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c4:	f000 84bd 	beq.w	8010a42 <kalman_3gyro.constprop.0+0x3dea>
 80100c8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80100cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d0:	ee69 7a8a 	vmul.f32	s15, s19, s20
 80100d4:	eeb0 7a48 	vmov.f32	s14, s16
 80100d8:	d148      	bne.n	801016c <kalman_3gyro.constprop.0+0x3514>
 80100da:	eef0 9a67 	vmov.f32	s19, s15
 80100de:	eeb0 aa47 	vmov.f32	s20, s14
 80100e2:	e692      	b.n	800fe0a <kalman_3gyro.constprop.0+0x31b2>
 80100e4:	eef5 aa40 	vcmp.f32	s21, #0.0
 80100e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ec:	d05b      	beq.n	80101a6 <kalman_3gyro.constprop.0+0x354e>
 80100ee:	eef5 9a40 	vcmp.f32	s19, #0.0
 80100f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f6:	d0a9      	beq.n	801004c <kalman_3gyro.constprop.0+0x33f4>
 80100f8:	eef5 ba40 	vcmp.f32	s23, #0.0
 80100fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010100:	ee29 7aaa 	vmul.f32	s14, s19, s21
 8010104:	eef0 8a49 	vmov.f32	s17, s18
 8010108:	f43f ae35 	beq.w	800fd76 <kalman_3gyro.constprop.0+0x311e>
 801010c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8010110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010114:	ee69 7aab 	vmul.f32	s15, s19, s23
 8010118:	eef0 aa49 	vmov.f32	s21, s18
 801011c:	f43f af69 	beq.w	800fff2 <kalman_3gyro.constprop.0+0x339a>
 8010120:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8010124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010128:	eef0 ba47 	vmov.f32	s23, s14
 801012c:	ee29 7aac 	vmul.f32	s14, s19, s25
 8010130:	f43f ae3b 	beq.w	800fdaa <kalman_3gyro.constprop.0+0x3152>
 8010134:	eeb5 da40 	vcmp.f32	s26, #0.0
 8010138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013c:	eef0 ca67 	vmov.f32	s25, s15
 8010140:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8010144:	d0b0      	beq.n	80100a8 <kalman_3gyro.constprop.0+0x3450>
 8010146:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801014a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014e:	eeb0 ca47 	vmov.f32	s24, s14
 8010152:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8010156:	f43f ae42 	beq.w	800fdde <kalman_3gyro.constprop.0+0x3186>
 801015a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010162:	eeb0 da67 	vmov.f32	s26, s15
 8010166:	ee69 7a8a 	vmul.f32	s15, s19, s20
 801016a:	d0b6      	beq.n	80100da <kalman_3gyro.constprop.0+0x3482>
 801016c:	eeb0 aa47 	vmov.f32	s20, s14
 8010170:	e647      	b.n	800fe02 <kalman_3gyro.constprop.0+0x31aa>
 8010172:	eef0 7a6d 	vmov.f32	s15, s27
 8010176:	f7ff baf5 	b.w	800f764 <kalman_3gyro.constprop.0+0x2b0c>
 801017a:	eef0 8a48 	vmov.f32	s17, s16
 801017e:	eef5 aa40 	vcmp.f32	s21, #0.0
 8010182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010186:	ee29 9a29 	vmul.f32	s18, s18, s19
 801018a:	f47f adec 	bne.w	800fd66 <kalman_3gyro.constprop.0+0x310e>
 801018e:	eef0 aa49 	vmov.f32	s21, s18
 8010192:	e75f      	b.n	8010054 <kalman_3gyro.constprop.0+0x33fc>
 8010194:	ed9f ba2a 	vldr	s22, [pc, #168]	; 8010240 <kalman_3gyro.constprop.0+0x35e8>
 8010198:	eef0 9a48 	vmov.f32	s19, s16
 801019c:	eeb0 aa48 	vmov.f32	s20, s16
 80101a0:	eeb0 da48 	vmov.f32	s26, s16
 80101a4:	e631      	b.n	800fe0a <kalman_3gyro.constprop.0+0x31b2>
 80101a6:	eef0 8a6a 	vmov.f32	s17, s21
 80101aa:	e753      	b.n	8010054 <kalman_3gyro.constprop.0+0x33fc>
 80101ac:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 80101b0:	2a31      	cmp	r2, #49	; 0x31
 80101b2:	f63f a8a3 	bhi.w	800f2fc <kalman_3gyro.constprop.0+0x26a4>
 80101b6:	2100      	movs	r1, #0
 80101b8:	3201      	adds	r2, #1
 80101ba:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 80101be:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 80101c2:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 80101c6:	f7ff b899 	b.w	800f2fc <kalman_3gyro.constprop.0+0x26a4>
 80101ca:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f340 8423 	ble.w	8010a1a <kalman_3gyro.constprop.0+0x3dc2>
 80101d4:	3b01      	subs	r3, #1
 80101d6:	2200      	movs	r2, #0
 80101d8:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80101dc:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 80101e0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 80101e4:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 80101e8:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 80101ec:	f7fe bca9 	b.w	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 80101f0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80101f4:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80101f8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 80101fc:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8010200:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 8010204:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8010208:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 801020c:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 8010210:	f7fe bc18 	b.w	800ea44 <kalman_3gyro.constprop.0+0x1dec>
 8010214:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8010218:	eef0 4a46 	vmov.f32	s9, s12
 801021c:	eeb1 5ae5 	vsqrt.f32	s10, s11
 8010220:	eef0 7a47 	vmov.f32	s15, s14
 8010224:	eef0 5a66 	vmov.f32	s11, s13
 8010228:	e64b      	b.n	800fec2 <kalman_3gyro.constprop.0+0x326a>
 801022a:	eeb1 7a47 	vneg.f32	s14, s14
 801022e:	f7fd bc66 	b.w	800dafe <kalman_3gyro.constprop.0+0xea6>
 8010232:	eef0 ca69 	vmov.f32	s25, s19
 8010236:	e6e0      	b.n	800fffa <kalman_3gyro.constprop.0+0x33a2>
 8010238:	eeb0 ba69 	vmov.f32	s22, s19
 801023c:	e5e5      	b.n	800fe0a <kalman_3gyro.constprop.0+0x31b2>
 801023e:	bf00      	nop
 8010240:	00000000 	.word	0x00000000
 8010244:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 8010248:	49dc      	ldr	r1, [pc, #880]	; (80105bc <kalman_3gyro.constprop.0+0x3964>)
 801024a:	4bdd      	ldr	r3, [pc, #884]	; (80105c0 <kalman_3gyro.constprop.0+0x3968>)
 801024c:	4add      	ldr	r2, [pc, #884]	; (80105c4 <kalman_3gyro.constprop.0+0x396c>)
 801024e:	2000      	movs	r0, #0
 8010250:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8010254:	6029      	str	r1, [r5, #0]
 8010256:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 801025a:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 801025e:	6002      	str	r2, [r0, #0]
 8010260:	600b      	str	r3, [r1, #0]
 8010262:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8010266:	9004      	str	r0, [sp, #16]
 8010268:	9110      	str	r1, [sp, #64]	; 0x40
 801026a:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 80b4 	beq.w	80103dc <kalman_3gyro.constprop.0+0x3784>
 8010274:	240c      	movs	r4, #12
 8010276:	eddf bad4 	vldr	s23, [pc, #848]	; 80105c8 <kalman_3gyro.constprop.0+0x3970>
 801027a:	ed9f bad4 	vldr	s22, [pc, #848]	; 80105cc <kalman_3gyro.constprop.0+0x3974>
 801027e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 80105d0 <kalman_3gyro.constprop.0+0x3978>
 8010282:	ed9f aad4 	vldr	s20, [pc, #848]	; 80105d4 <kalman_3gyro.constprop.0+0x397c>
 8010286:	eddf aad4 	vldr	s21, [pc, #848]	; 80105d8 <kalman_3gyro.constprop.0+0x3980>
 801028a:	9f08      	ldr	r7, [sp, #32]
 801028c:	fb14 8403 	smlabb	r4, r4, r3, r8
 8010290:	4646      	mov	r6, r8
 8010292:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010296:	e06b      	b.n	8010370 <kalman_3gyro.constprop.0+0x3718>
 8010298:	eeb4 7aca 	vcmpe.f32	s14, s20
 801029c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a0:	f300 815a 	bgt.w	8010558 <kalman_3gyro.constprop.0+0x3900>
 80102a4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102a8:	ee17 0a90 	vmov	r0, s15
 80102ac:	f7f0 f94c 	bl	8000548 <__aeabi_f2d>
 80102b0:	ec41 0b10 	vmov	d0, r0, r1
 80102b4:	f005 fb94 	bl	80159e0 <ceil>
 80102b8:	ec51 0b10 	vmov	r0, r1, d0
 80102bc:	f7f0 fc74 	bl	8000ba8 <__aeabi_d2f>
 80102c0:	ee07 0a90 	vmov	s15, r0
 80102c4:	edc6 7a00 	vstr	s15, [r6]
 80102c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80102cc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80102d0:	eef0 6ae7 	vabs.f32	s13, s15
 80102d4:	eef4 6acb 	vcmpe.f32	s13, s22
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	d51b      	bpl.n	8010316 <kalman_3gyro.constprop.0+0x36be>
 80102de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80102e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e6:	f280 8120 	bge.w	801052a <kalman_3gyro.constprop.0+0x38d2>
 80102ea:	eeb4 7aca 	vcmpe.f32	s14, s20
 80102ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f2:	f300 812e 	bgt.w	8010552 <kalman_3gyro.constprop.0+0x38fa>
 80102f6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80102fa:	ee17 0a90 	vmov	r0, s15
 80102fe:	f7f0 f923 	bl	8000548 <__aeabi_f2d>
 8010302:	ec41 0b10 	vmov	d0, r0, r1
 8010306:	f005 fb6b 	bl	80159e0 <ceil>
 801030a:	ec51 0b10 	vmov	r0, r1, d0
 801030e:	f7f0 fc4b 	bl	8000ba8 <__aeabi_d2f>
 8010312:	ee07 0a90 	vmov	s15, r0
 8010316:	edc6 7a01 	vstr	s15, [r6, #4]
 801031a:	ed97 7a02 	vldr	s14, [r7, #8]
 801031e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010322:	eef0 6ae7 	vabs.f32	s13, s15
 8010326:	eef4 6acb 	vcmpe.f32	s13, s22
 801032a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801032e:	d51a      	bpl.n	8010366 <kalman_3gyro.constprop.0+0x370e>
 8010330:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010338:	da3b      	bge.n	80103b2 <kalman_3gyro.constprop.0+0x375a>
 801033a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	f300 8103 	bgt.w	801054c <kalman_3gyro.constprop.0+0x38f4>
 8010346:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801034a:	ee17 0a90 	vmov	r0, s15
 801034e:	f7f0 f8fb 	bl	8000548 <__aeabi_f2d>
 8010352:	ec41 0b10 	vmov	d0, r0, r1
 8010356:	f005 fb43 	bl	80159e0 <ceil>
 801035a:	ec51 0b10 	vmov	r0, r1, d0
 801035e:	f7f0 fc23 	bl	8000ba8 <__aeabi_d2f>
 8010362:	ee07 0a90 	vmov	s15, r0
 8010366:	edc6 7a02 	vstr	s15, [r6, #8]
 801036a:	360c      	adds	r6, #12
 801036c:	42b4      	cmp	r4, r6
 801036e:	d035      	beq.n	80103dc <kalman_3gyro.constprop.0+0x3784>
 8010370:	ed97 7a00 	vldr	s14, [r7]
 8010374:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010378:	eef0 6ae7 	vabs.f32	s13, s15
 801037c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010384:	d59e      	bpl.n	80102c4 <kalman_3gyro.constprop.0+0x366c>
 8010386:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801038a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038e:	db83      	blt.n	8010298 <kalman_3gyro.constprop.0+0x3640>
 8010390:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010394:	ee17 0a90 	vmov	r0, s15
 8010398:	f7f0 f8d6 	bl	8000548 <__aeabi_f2d>
 801039c:	ec41 0b10 	vmov	d0, r0, r1
 80103a0:	f005 fba2 	bl	8015ae8 <floor>
 80103a4:	ec51 0b10 	vmov	r0, r1, d0
 80103a8:	f7f0 fbfe 	bl	8000ba8 <__aeabi_d2f>
 80103ac:	ee07 0a90 	vmov	s15, r0
 80103b0:	e788      	b.n	80102c4 <kalman_3gyro.constprop.0+0x366c>
 80103b2:	ee77 7a89 	vadd.f32	s15, s15, s18
 80103b6:	360c      	adds	r6, #12
 80103b8:	ee17 0a90 	vmov	r0, s15
 80103bc:	f7f0 f8c4 	bl	8000548 <__aeabi_f2d>
 80103c0:	ec41 0b10 	vmov	d0, r0, r1
 80103c4:	f005 fb90 	bl	8015ae8 <floor>
 80103c8:	ec51 0b10 	vmov	r0, r1, d0
 80103cc:	f7f0 fbec 	bl	8000ba8 <__aeabi_d2f>
 80103d0:	ee07 0a90 	vmov	s15, r0
 80103d4:	ed46 7a01 	vstr	s15, [r6, #-4]
 80103d8:	42b4      	cmp	r4, r6
 80103da:	d1c9      	bne.n	8010370 <kalman_3gyro.constprop.0+0x3718>
 80103dc:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 80103e0:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f000 80cf 	beq.w	8010588 <kalman_3gyro.constprop.0+0x3930>
 80103ea:	240c      	movs	r4, #12
 80103ec:	eddf ba7b 	vldr	s23, [pc, #492]	; 80105dc <kalman_3gyro.constprop.0+0x3984>
 80103f0:	ed9f ba76 	vldr	s22, [pc, #472]	; 80105cc <kalman_3gyro.constprop.0+0x3974>
 80103f4:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80105e0 <kalman_3gyro.constprop.0+0x3988>
 80103f8:	ed9f aa7a 	vldr	s20, [pc, #488]	; 80105e4 <kalman_3gyro.constprop.0+0x398c>
 80103fc:	eddf aa76 	vldr	s21, [pc, #472]	; 80105d8 <kalman_3gyro.constprop.0+0x3980>
 8010400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010404:	fb14 7403 	smlabb	r4, r4, r3, r7
 8010408:	463e      	mov	r6, r7
 801040a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 801040e:	e06b      	b.n	80104e8 <kalman_3gyro.constprop.0+0x3890>
 8010410:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010418:	f300 81a2 	bgt.w	8010760 <kalman_3gyro.constprop.0+0x3b08>
 801041c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010420:	ee17 0a90 	vmov	r0, s15
 8010424:	f7f0 f890 	bl	8000548 <__aeabi_f2d>
 8010428:	ec41 0b10 	vmov	d0, r0, r1
 801042c:	f005 fad8 	bl	80159e0 <ceil>
 8010430:	ec51 0b10 	vmov	r0, r1, d0
 8010434:	f7f0 fbb8 	bl	8000ba8 <__aeabi_d2f>
 8010438:	ee07 0a90 	vmov	s15, r0
 801043c:	edc6 7a00 	vstr	s15, [r6]
 8010440:	ed99 7a04 	vldr	s14, [r9, #16]
 8010444:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010448:	eef0 6ae7 	vabs.f32	s13, s15
 801044c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010454:	d51b      	bpl.n	801048e <kalman_3gyro.constprop.0+0x3836>
 8010456:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801045a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801045e:	f280 8168 	bge.w	8010732 <kalman_3gyro.constprop.0+0x3ada>
 8010462:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046a:	f300 8176 	bgt.w	801075a <kalman_3gyro.constprop.0+0x3b02>
 801046e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010472:	ee17 0a90 	vmov	r0, s15
 8010476:	f7f0 f867 	bl	8000548 <__aeabi_f2d>
 801047a:	ec41 0b10 	vmov	d0, r0, r1
 801047e:	f005 faaf 	bl	80159e0 <ceil>
 8010482:	ec51 0b10 	vmov	r0, r1, d0
 8010486:	f7f0 fb8f 	bl	8000ba8 <__aeabi_d2f>
 801048a:	ee07 0a90 	vmov	s15, r0
 801048e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010492:	ed99 7a05 	vldr	s14, [r9, #20]
 8010496:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801049a:	eef0 6ae7 	vabs.f32	s13, s15
 801049e:	eef4 6acb 	vcmpe.f32	s13, s22
 80104a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a6:	d51a      	bpl.n	80104de <kalman_3gyro.constprop.0+0x3886>
 80104a8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80104ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b0:	da55      	bge.n	801055e <kalman_3gyro.constprop.0+0x3906>
 80104b2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80104b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104ba:	f300 814b 	bgt.w	8010754 <kalman_3gyro.constprop.0+0x3afc>
 80104be:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80104c2:	ee17 0a90 	vmov	r0, s15
 80104c6:	f7f0 f83f 	bl	8000548 <__aeabi_f2d>
 80104ca:	ec41 0b10 	vmov	d0, r0, r1
 80104ce:	f005 fa87 	bl	80159e0 <ceil>
 80104d2:	ec51 0b10 	vmov	r0, r1, d0
 80104d6:	f7f0 fb67 	bl	8000ba8 <__aeabi_d2f>
 80104da:	ee07 0a90 	vmov	s15, r0
 80104de:	edc6 7a02 	vstr	s15, [r6, #8]
 80104e2:	360c      	adds	r6, #12
 80104e4:	42b4      	cmp	r4, r6
 80104e6:	d04f      	beq.n	8010588 <kalman_3gyro.constprop.0+0x3930>
 80104e8:	ed99 7a03 	vldr	s14, [r9, #12]
 80104ec:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80104f0:	eef0 6ae7 	vabs.f32	s13, s15
 80104f4:	eef4 6acb 	vcmpe.f32	s13, s22
 80104f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fc:	d59e      	bpl.n	801043c <kalman_3gyro.constprop.0+0x37e4>
 80104fe:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010506:	db83      	blt.n	8010410 <kalman_3gyro.constprop.0+0x37b8>
 8010508:	ee77 7a89 	vadd.f32	s15, s15, s18
 801050c:	ee17 0a90 	vmov	r0, s15
 8010510:	f7f0 f81a 	bl	8000548 <__aeabi_f2d>
 8010514:	ec41 0b10 	vmov	d0, r0, r1
 8010518:	f005 fae6 	bl	8015ae8 <floor>
 801051c:	ec51 0b10 	vmov	r0, r1, d0
 8010520:	f7f0 fb42 	bl	8000ba8 <__aeabi_d2f>
 8010524:	ee07 0a90 	vmov	s15, r0
 8010528:	e788      	b.n	801043c <kalman_3gyro.constprop.0+0x37e4>
 801052a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801052e:	ee17 0a90 	vmov	r0, s15
 8010532:	f7f0 f809 	bl	8000548 <__aeabi_f2d>
 8010536:	ec41 0b10 	vmov	d0, r0, r1
 801053a:	f005 fad5 	bl	8015ae8 <floor>
 801053e:	ec51 0b10 	vmov	r0, r1, d0
 8010542:	f7f0 fb31 	bl	8000ba8 <__aeabi_d2f>
 8010546:	ee07 0a90 	vmov	s15, r0
 801054a:	e6e4      	b.n	8010316 <kalman_3gyro.constprop.0+0x36be>
 801054c:	eef0 7a6a 	vmov.f32	s15, s21
 8010550:	e709      	b.n	8010366 <kalman_3gyro.constprop.0+0x370e>
 8010552:	eef0 7a6a 	vmov.f32	s15, s21
 8010556:	e6de      	b.n	8010316 <kalman_3gyro.constprop.0+0x36be>
 8010558:	eef0 7a6a 	vmov.f32	s15, s21
 801055c:	e6b2      	b.n	80102c4 <kalman_3gyro.constprop.0+0x366c>
 801055e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010562:	360c      	adds	r6, #12
 8010564:	ee17 0a90 	vmov	r0, s15
 8010568:	f7ef ffee 	bl	8000548 <__aeabi_f2d>
 801056c:	ec41 0b10 	vmov	d0, r0, r1
 8010570:	f005 faba 	bl	8015ae8 <floor>
 8010574:	ec51 0b10 	vmov	r0, r1, d0
 8010578:	f7f0 fb16 	bl	8000ba8 <__aeabi_d2f>
 801057c:	ee07 0a90 	vmov	s15, r0
 8010580:	ed46 7a01 	vstr	s15, [r6, #-4]
 8010584:	42b4      	cmp	r4, r6
 8010586:	d1af      	bne.n	80104e8 <kalman_3gyro.constprop.0+0x3890>
 8010588:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 801058c:	2b00      	cmp	r3, #0
 801058e:	f43c ac7e 	beq.w	800ce8e <kalman_3gyro.constprop.0+0x236>
 8010592:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 8010596:	240c      	movs	r4, #12
 8010598:	eddf ba13 	vldr	s23, [pc, #76]	; 80105e8 <kalman_3gyro.constprop.0+0x3990>
 801059c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 80105cc <kalman_3gyro.constprop.0+0x3974>
 80105a0:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80105ec <kalman_3gyro.constprop.0+0x3994>
 80105a4:	ed9f aa12 	vldr	s20, [pc, #72]	; 80105f0 <kalman_3gyro.constprop.0+0x3998>
 80105a8:	eddf aa0b 	vldr	s21, [pc, #44]	; 80105d8 <kalman_3gyro.constprop.0+0x3980>
 80105ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80105b0:	960f      	str	r6, [sp, #60]	; 0x3c
 80105b2:	fb14 6403 	smlabb	r4, r4, r3, r6
 80105b6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80105ba:	e099      	b.n	80106f0 <kalman_3gyro.constprop.0+0x3a98>
 80105bc:	3a7001e0 	.word	0x3a7001e0
 80105c0:	3a8c0118 	.word	0x3a8c0118
 80105c4:	3a000100 	.word	0x3a000100
 80105c8:	44888777 	.word	0x44888777
 80105cc:	4b000000 	.word	0x4b000000
 80105d0:	39f001e1 	.word	0x39f001e1
 80105d4:	b9f001e1 	.word	0xb9f001e1
 80105d8:	80000000 	.word	0x80000000
 80105dc:	44fffe00 	.word	0x44fffe00
 80105e0:	39800100 	.word	0x39800100
 80105e4:	b9800100 	.word	0xb9800100
 80105e8:	446a0ccd 	.word	0x446a0ccd
 80105ec:	3a0c0118 	.word	0x3a0c0118
 80105f0:	ba0c0118 	.word	0xba0c0118
 80105f4:	bf666666 	.word	0xbf666666
 80105f8:	3d072b02 	.word	0x3d072b02
 80105fc:	3cb43958 	.word	0x3cb43958
 8010600:	3cf5c28f 	.word	0x3cf5c28f
 8010604:	3d75c28f 	.word	0x3d75c28f
 8010608:	3d23d70a 	.word	0x3d23d70a
 801060c:	3ca3d70a 	.word	0x3ca3d70a
 8010610:	3d4ccccd 	.word	0x3d4ccccd
 8010614:	3d8f5c29 	.word	0x3d8f5c29
 8010618:	eeb4 7aca 	vcmpe.f32	s14, s20
 801061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010620:	f300 80c6 	bgt.w	80107b0 <kalman_3gyro.constprop.0+0x3b58>
 8010624:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010628:	ee17 0a90 	vmov	r0, s15
 801062c:	f7ef ff8c 	bl	8000548 <__aeabi_f2d>
 8010630:	ec41 0b10 	vmov	d0, r0, r1
 8010634:	f005 f9d4 	bl	80159e0 <ceil>
 8010638:	ec51 0b10 	vmov	r0, r1, d0
 801063c:	f7f0 fab4 	bl	8000ba8 <__aeabi_d2f>
 8010640:	ee07 0a90 	vmov	s15, r0
 8010644:	edc6 7a00 	vstr	s15, [r6]
 8010648:	ed99 7a07 	vldr	s14, [r9, #28]
 801064c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010650:	eef0 6ae7 	vabs.f32	s13, s15
 8010654:	eef4 6acb 	vcmpe.f32	s13, s22
 8010658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065c:	d51b      	bpl.n	8010696 <kalman_3gyro.constprop.0+0x3a3e>
 801065e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010666:	f280 808f 	bge.w	8010788 <kalman_3gyro.constprop.0+0x3b30>
 801066a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801066e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010672:	f300 809a 	bgt.w	80107aa <kalman_3gyro.constprop.0+0x3b52>
 8010676:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801067a:	ee17 0a90 	vmov	r0, s15
 801067e:	f7ef ff63 	bl	8000548 <__aeabi_f2d>
 8010682:	ec41 0b10 	vmov	d0, r0, r1
 8010686:	f005 f9ab 	bl	80159e0 <ceil>
 801068a:	ec51 0b10 	vmov	r0, r1, d0
 801068e:	f7f0 fa8b 	bl	8000ba8 <__aeabi_d2f>
 8010692:	ee07 0a90 	vmov	s15, r0
 8010696:	edc6 7a01 	vstr	s15, [r6, #4]
 801069a:	ed99 7a08 	vldr	s14, [r9, #32]
 801069e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80106a2:	eef0 6ae7 	vabs.f32	s13, s15
 80106a6:	eef4 6acb 	vcmpe.f32	s13, s22
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	d519      	bpl.n	80106e4 <kalman_3gyro.constprop.0+0x3a8c>
 80106b0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80106b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b8:	da55      	bge.n	8010766 <kalman_3gyro.constprop.0+0x3b0e>
 80106ba:	eeb4 7aca 	vcmpe.f32	s14, s20
 80106be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106c2:	dc78      	bgt.n	80107b6 <kalman_3gyro.constprop.0+0x3b5e>
 80106c4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80106c8:	ee17 0a90 	vmov	r0, s15
 80106cc:	f7ef ff3c 	bl	8000548 <__aeabi_f2d>
 80106d0:	ec41 0b10 	vmov	d0, r0, r1
 80106d4:	f005 f984 	bl	80159e0 <ceil>
 80106d8:	ec51 0b10 	vmov	r0, r1, d0
 80106dc:	f7f0 fa64 	bl	8000ba8 <__aeabi_d2f>
 80106e0:	ee07 0a90 	vmov	s15, r0
 80106e4:	edc6 7a02 	vstr	s15, [r6, #8]
 80106e8:	360c      	adds	r6, #12
 80106ea:	42b4      	cmp	r4, r6
 80106ec:	f43c abd2 	beq.w	800ce94 <kalman_3gyro.constprop.0+0x23c>
 80106f0:	ed99 7a06 	vldr	s14, [r9, #24]
 80106f4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80106f8:	eef0 6ae7 	vabs.f32	s13, s15
 80106fc:	eef4 6acb 	vcmpe.f32	s13, s22
 8010700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010704:	d59e      	bpl.n	8010644 <kalman_3gyro.constprop.0+0x39ec>
 8010706:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070e:	db83      	blt.n	8010618 <kalman_3gyro.constprop.0+0x39c0>
 8010710:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010714:	ee17 0a90 	vmov	r0, s15
 8010718:	f7ef ff16 	bl	8000548 <__aeabi_f2d>
 801071c:	ec41 0b10 	vmov	d0, r0, r1
 8010720:	f005 f9e2 	bl	8015ae8 <floor>
 8010724:	ec51 0b10 	vmov	r0, r1, d0
 8010728:	f7f0 fa3e 	bl	8000ba8 <__aeabi_d2f>
 801072c:	ee07 0a90 	vmov	s15, r0
 8010730:	e788      	b.n	8010644 <kalman_3gyro.constprop.0+0x39ec>
 8010732:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010736:	ee17 0a90 	vmov	r0, s15
 801073a:	f7ef ff05 	bl	8000548 <__aeabi_f2d>
 801073e:	ec41 0b10 	vmov	d0, r0, r1
 8010742:	f005 f9d1 	bl	8015ae8 <floor>
 8010746:	ec51 0b10 	vmov	r0, r1, d0
 801074a:	f7f0 fa2d 	bl	8000ba8 <__aeabi_d2f>
 801074e:	ee07 0a90 	vmov	s15, r0
 8010752:	e69c      	b.n	801048e <kalman_3gyro.constprop.0+0x3836>
 8010754:	eef0 7a6a 	vmov.f32	s15, s21
 8010758:	e6c1      	b.n	80104de <kalman_3gyro.constprop.0+0x3886>
 801075a:	eef0 7a6a 	vmov.f32	s15, s21
 801075e:	e696      	b.n	801048e <kalman_3gyro.constprop.0+0x3836>
 8010760:	eef0 7a6a 	vmov.f32	s15, s21
 8010764:	e66a      	b.n	801043c <kalman_3gyro.constprop.0+0x37e4>
 8010766:	ee77 7a89 	vadd.f32	s15, s15, s18
 801076a:	ee17 0a90 	vmov	r0, s15
 801076e:	f7ef feeb 	bl	8000548 <__aeabi_f2d>
 8010772:	ec41 0b10 	vmov	d0, r0, r1
 8010776:	f005 f9b7 	bl	8015ae8 <floor>
 801077a:	ec51 0b10 	vmov	r0, r1, d0
 801077e:	f7f0 fa13 	bl	8000ba8 <__aeabi_d2f>
 8010782:	ee07 0a90 	vmov	s15, r0
 8010786:	e7ad      	b.n	80106e4 <kalman_3gyro.constprop.0+0x3a8c>
 8010788:	ee77 7a89 	vadd.f32	s15, s15, s18
 801078c:	ee17 0a90 	vmov	r0, s15
 8010790:	f7ef feda 	bl	8000548 <__aeabi_f2d>
 8010794:	ec41 0b10 	vmov	d0, r0, r1
 8010798:	f005 f9a6 	bl	8015ae8 <floor>
 801079c:	ec51 0b10 	vmov	r0, r1, d0
 80107a0:	f7f0 fa02 	bl	8000ba8 <__aeabi_d2f>
 80107a4:	ee07 0a90 	vmov	s15, r0
 80107a8:	e775      	b.n	8010696 <kalman_3gyro.constprop.0+0x3a3e>
 80107aa:	eef0 7a6a 	vmov.f32	s15, s21
 80107ae:	e772      	b.n	8010696 <kalman_3gyro.constprop.0+0x3a3e>
 80107b0:	eef0 7a6a 	vmov.f32	s15, s21
 80107b4:	e746      	b.n	8010644 <kalman_3gyro.constprop.0+0x39ec>
 80107b6:	eef0 7a6a 	vmov.f32	s15, s21
 80107ba:	e793      	b.n	80106e4 <kalman_3gyro.constprop.0+0x3a8c>
 80107bc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80107be:	7813      	ldrb	r3, [r2, #0]
 80107c0:	ed92 7a03 	vldr	s14, [r2, #12]
 80107c4:	edd2 6a01 	vldr	s13, [r2, #4]
 80107c8:	edd2 7a02 	vldr	s15, [r2, #8]
 80107cc:	2200      	movs	r2, #0
 80107ce:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	f040 813b 	bne.w	8010a4e <kalman_3gyro.constprop.0+0x3df6>
 80107d8:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80105f4 <kalman_3gyro.constprop.0+0x399c>
 80107dc:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80107e0:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80107e4:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80107e8:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80107ec:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80107f0:	2100      	movs	r1, #0
 80107f2:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80107f6:	f007 f861 	bl	80178bc <memset>
 80107fa:	eddb 7a02 	vldr	s15, [fp, #8]
 80107fe:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 80105f8 <kalman_3gyro.constprop.0+0x39a0>
 8010802:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 80105fc <kalman_3gyro.constprop.0+0x39a4>
 8010806:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8010600 <kalman_3gyro.constprop.0+0x39a8>
 801080a:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 8010604 <kalman_3gyro.constprop.0+0x39ac>
 801080e:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8010608 <kalman_3gyro.constprop.0+0x39b0>
 8010812:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 801060c <kalman_3gyro.constprop.0+0x39b4>
 8010816:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8010610 <kalman_3gyro.constprop.0+0x39b8>
 801081a:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 8010614 <kalman_3gyro.constprop.0+0x39bc>
 801081e:	4bd9      	ldr	r3, [pc, #868]	; (8010b84 <kalman_3gyro.constprop.0+0x3f2c>)
 8010820:	49d9      	ldr	r1, [pc, #868]	; (8010b88 <kalman_3gyro.constprop.0+0x3f30>)
 8010822:	4dda      	ldr	r5, [pc, #872]	; (8010b8c <kalman_3gyro.constprop.0+0x3f34>)
 8010824:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010b90 <kalman_3gyro.constprop.0+0x3f38>
 8010828:	48da      	ldr	r0, [pc, #872]	; (8010b94 <kalman_3gyro.constprop.0+0x3f3c>)
 801082a:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 801082e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010832:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010836:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801083a:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 801083e:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010b98 <kalman_3gyro.constprop.0+0x3f40>
 8010842:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 8010846:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801084a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 801084e:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 8010852:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 8010b9c <kalman_3gyro.constprop.0+0x3f44>
 8010856:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010ba0 <kalman_3gyro.constprop.0+0x3f48>
 801085a:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 801085e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010862:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010866:	ee27 5a85 	vmul.f32	s10, s15, s10
 801086a:	ee27 4a84 	vmul.f32	s8, s15, s8
 801086e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010872:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010876:	2200      	movs	r2, #0
 8010878:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 801087c:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8010880:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 8010884:	4cc7      	ldr	r4, [pc, #796]	; (8010ba4 <kalman_3gyro.constprop.0+0x3f4c>)
 8010886:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 801088a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 801088e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010ba8 <kalman_3gyro.constprop.0+0x3f50>
 8010892:	49c6      	ldr	r1, [pc, #792]	; (8010bac <kalman_3gyro.constprop.0+0x3f54>)
 8010894:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8010898:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 801089c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010bb0 <kalman_3gyro.constprop.0+0x3f58>
 80108a0:	4bc4      	ldr	r3, [pc, #784]	; (8010bb4 <kalman_3gyro.constprop.0+0x3f5c>)
 80108a2:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 80108a6:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 80108aa:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 80108ae:	4ac2      	ldr	r2, [pc, #776]	; (8010bb8 <kalman_3gyro.constprop.0+0x3f60>)
 80108b0:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 80108b4:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 80108b8:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 80108bc:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80108c0:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80108c4:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80108c8:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80108cc:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80108d0:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80108d4:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80108d8:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80108dc:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80108e0:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 80108e4:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80108e8:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80108ec:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80108f0:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80108f4:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 80108f8:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 80108fc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010900:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010904:	4cad      	ldr	r4, [pc, #692]	; (8010bbc <kalman_3gyro.constprop.0+0x3f64>)
 8010906:	48ae      	ldr	r0, [pc, #696]	; (8010bc0 <kalman_3gyro.constprop.0+0x3f68>)
 8010908:	49ae      	ldr	r1, [pc, #696]	; (8010bc4 <kalman_3gyro.constprop.0+0x3f6c>)
 801090a:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 801090e:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 8010912:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8010916:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 801091a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 801091e:	ee27 6a83 	vmul.f32	s12, s15, s6
 8010922:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8010926:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 801092a:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801092e:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 8010932:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010936:	4aa4      	ldr	r2, [pc, #656]	; (8010bc8 <kalman_3gyro.constprop.0+0x3f70>)
 8010938:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 801093c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010940:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8010944:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010948:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 801094c:	4e9f      	ldr	r6, [pc, #636]	; (8010bcc <kalman_3gyro.constprop.0+0x3f74>)
 801094e:	4da0      	ldr	r5, [pc, #640]	; (8010bd0 <kalman_3gyro.constprop.0+0x3f78>)
 8010950:	49a0      	ldr	r1, [pc, #640]	; (8010bd4 <kalman_3gyro.constprop.0+0x3f7c>)
 8010952:	4aa1      	ldr	r2, [pc, #644]	; (8010bd8 <kalman_3gyro.constprop.0+0x3f80>)
 8010954:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010958:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 801095c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010960:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8010964:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010968:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 801096c:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010970:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8010974:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010978:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 801097c:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010980:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010984:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010988:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 801098c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010990:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010994:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010998:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 801099c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 80109a0:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 80109a4:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 80109a8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80109ac:	b973      	cbnz	r3, 80109cc <kalman_3gyro.constprop.0+0x3d74>
 80109ae:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80109b2:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80109b6:	6811      	ldr	r1, [r2, #0]
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80109be:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 80109c8:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 80109cc:	2300      	movs	r3, #0
 80109ce:	f88b 3001 	strb.w	r3, [fp, #1]
 80109d2:	f7fc ba4b 	b.w	800ce6c <kalman_3gyro.constprop.0+0x214>
 80109d6:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80109da:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 80109de:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80109e2:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80109e6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80109ea:	f7fd bd5b 	b.w	800e4a4 <kalman_3gyro.constprop.0+0x184c>
 80109ee:	eddf 7a7b 	vldr	s15, [pc, #492]	; 8010bdc <kalman_3gyro.constprop.0+0x3f84>
 80109f2:	f7fc ba9e 	b.w	800cf32 <kalman_3gyro.constprop.0+0x2da>
 80109f6:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 80109fa:	f7fd bd7b 	b.w	800e4f4 <kalman_3gyro.constprop.0+0x189c>
 80109fe:	ed9f 6a78 	vldr	s12, [pc, #480]	; 8010be0 <kalman_3gyro.constprop.0+0x3f88>
 8010a02:	ed9f 4a78 	vldr	s8, [pc, #480]	; 8010be4 <kalman_3gyro.constprop.0+0x3f8c>
 8010a06:	eddf 4a78 	vldr	s9, [pc, #480]	; 8010be8 <kalman_3gyro.constprop.0+0x3f90>
 8010a0a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8010bec <kalman_3gyro.constprop.0+0x3f94>
 8010a0e:	ed9f ca78 	vldr	s24, [pc, #480]	; 8010bf0 <kalman_3gyro.constprop.0+0x3f98>
 8010a12:	ee68 8a8c 	vmul.f32	s17, s17, s24
 8010a16:	f7fd bf9d 	b.w	800e954 <kalman_3gyro.constprop.0+0x1cfc>
 8010a1a:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8010a1e:	2a00      	cmp	r2, #0
 8010a20:	f340 8181 	ble.w	8010d26 <kalman_3gyro.constprop.0+0x40ce>
 8010a24:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010a28:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8010a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a34:	f340 8177 	ble.w	8010d26 <kalman_3gyro.constprop.0+0x40ce>
 8010a38:	3a01      	subs	r2, #1
 8010a3a:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8010a3e:	f7fe b880 	b.w	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 8010a42:	eeb0 aa69 	vmov.f32	s20, s19
 8010a46:	eeb0 ba69 	vmov.f32	s22, s19
 8010a4a:	f7ff b9de 	b.w	800fe0a <kalman_3gyro.constprop.0+0x31b2>
 8010a4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010a52:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010a56:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010a5a:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010a5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010a62:	e6bb      	b.n	80107dc <kalman_3gyro.constprop.0+0x3b84>
 8010a64:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010a68:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8010a6c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010a70:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010a74:	f7fe b802 	b.w	800ea7c <kalman_3gyro.constprop.0+0x1e24>
 8010a78:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8010a7c:	f7fd bae6 	b.w	800e04c <kalman_3gyro.constprop.0+0x13f4>
 8010a80:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010a84:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010a88:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010a8c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010a90:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010a94:	f7fd bd06 	b.w	800e4a4 <kalman_3gyro.constprop.0+0x184c>
 8010a98:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8010a9c:	ee17 0a90 	vmov	r0, s15
 8010aa0:	f7ef fd52 	bl	8000548 <__aeabi_f2d>
 8010aa4:	ec41 0b10 	vmov	d0, r0, r1
 8010aa8:	f004 ff9a 	bl	80159e0 <ceil>
 8010aac:	ec51 0b10 	vmov	r0, r1, d0
 8010ab0:	f7f0 f87a 	bl	8000ba8 <__aeabi_d2f>
 8010ab4:	ee0e 0a10 	vmov	s28, r0
 8010ab8:	f7fc bc70 	b.w	800d39c <kalman_3gyro.constprop.0+0x744>
 8010abc:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010ac0:	ee17 0a90 	vmov	r0, s15
 8010ac4:	f7ef fd40 	bl	8000548 <__aeabi_f2d>
 8010ac8:	ec41 0b10 	vmov	d0, r0, r1
 8010acc:	f004 ff88 	bl	80159e0 <ceil>
 8010ad0:	ec51 0b10 	vmov	r0, r1, d0
 8010ad4:	f7f0 f868 	bl	8000ba8 <__aeabi_d2f>
 8010ad8:	ee0d 0a90 	vmov	s27, r0
 8010adc:	f7fc bc81 	b.w	800d3e2 <kalman_3gyro.constprop.0+0x78a>
 8010ae0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010ae4:	ee17 0a90 	vmov	r0, s15
 8010ae8:	f7ef fd2e 	bl	8000548 <__aeabi_f2d>
 8010aec:	ec41 0b10 	vmov	d0, r0, r1
 8010af0:	f004 ff76 	bl	80159e0 <ceil>
 8010af4:	ec51 0b10 	vmov	r0, r1, d0
 8010af8:	f7f0 f856 	bl	8000ba8 <__aeabi_d2f>
 8010afc:	ee0d 0a90 	vmov	s27, r0
 8010b00:	f7fc bcd5 	b.w	800d4ae <kalman_3gyro.constprop.0+0x856>
 8010b04:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010b08:	ee17 0a90 	vmov	r0, s15
 8010b0c:	f7ef fd1c 	bl	8000548 <__aeabi_f2d>
 8010b10:	ec41 0b10 	vmov	d0, r0, r1
 8010b14:	f004 ff64 	bl	80159e0 <ceil>
 8010b18:	ec51 0b10 	vmov	r0, r1, d0
 8010b1c:	f7f0 f844 	bl	8000ba8 <__aeabi_d2f>
 8010b20:	ee0b 0a10 	vmov	s22, r0
 8010b24:	f7fc bce6 	b.w	800d4f4 <kalman_3gyro.constprop.0+0x89c>
 8010b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2c:	f6fd addf 	blt.w	800e6ee <kalman_3gyro.constprop.0+0x1a96>
 8010b30:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8010be8 <kalman_3gyro.constprop.0+0x3f90>
 8010b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3c:	f140 8283 	bpl.w	8011046 <kalman_3gyro.constprop.0+0x43ee>
 8010b40:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8010bf4 <kalman_3gyro.constprop.0+0x3f9c>
 8010b44:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010bf8 <kalman_3gyro.constprop.0+0x3fa0>
 8010b48:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010bfc <kalman_3gyro.constprop.0+0x3fa4>
 8010b4c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010b50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010b54:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010b58:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010b5c:	f7fd bdd1 	b.w	800e702 <kalman_3gyro.constprop.0+0x1aaa>
 8010b60:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010b64:	ee17 0a90 	vmov	r0, s15
 8010b68:	f7ef fcee 	bl	8000548 <__aeabi_f2d>
 8010b6c:	ec41 0b10 	vmov	d0, r0, r1
 8010b70:	f004 ff36 	bl	80159e0 <ceil>
 8010b74:	ec51 0b10 	vmov	r0, r1, d0
 8010b78:	f7f0 f816 	bl	8000ba8 <__aeabi_d2f>
 8010b7c:	ee08 0a10 	vmov	s16, r0
 8010b80:	f7fc bbe9 	b.w	800d356 <kalman_3gyro.constprop.0+0x6fe>
 8010b84:	3eb33333 	.word	0x3eb33333
 8010b88:	3ee66666 	.word	0x3ee66666
 8010b8c:	3f866666 	.word	0x3f866666
 8010b90:	3ecccccd 	.word	0x3ecccccd
 8010b94:	3f933333 	.word	0x3f933333
 8010b98:	3dcccccd 	.word	0x3dcccccd
 8010b9c:	3e4ccccd 	.word	0x3e4ccccd
 8010ba0:	3e99999a 	.word	0x3e99999a
 8010ba4:	3f8ccccd 	.word	0x3f8ccccd
 8010ba8:	3f4ccccd 	.word	0x3f4ccccd
 8010bac:	3ebd70a4 	.word	0x3ebd70a4
 8010bb0:	3f666666 	.word	0x3f666666
 8010bb4:	40a00000 	.word	0x40a00000
 8010bb8:	3f99999a 	.word	0x3f99999a
 8010bbc:	3f19999a 	.word	0x3f19999a
 8010bc0:	3fb9999a 	.word	0x3fb9999a
 8010bc4:	3fe66666 	.word	0x3fe66666
 8010bc8:	3f333333 	.word	0x3f333333
 8010bcc:	3fa66666 	.word	0x3fa66666
 8010bd0:	3fcccccd 	.word	0x3fcccccd
 8010bd4:	40200000 	.word	0x40200000
 8010bd8:	40400000 	.word	0x40400000
 8010bdc:	bf666666 	.word	0xbf666666
 8010be0:	391d4951 	.word	0x391d4951
 8010be4:	383cbe62 	.word	0x383cbe62
 8010be8:	3c75c28f 	.word	0x3c75c28f
 8010bec:	469c3e00 	.word	0x469c3e00
 8010bf0:	43168000 	.word	0x43168000
 8010bf4:	3c23d70a 	.word	0x3c23d70a
 8010bf8:	3f19999a 	.word	0x3f19999a
 8010bfc:	43480000 	.word	0x43480000
 8010c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c04:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010c08:	eef0 7aca 	vabs.f32	s15, s20
 8010c0c:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010c10:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c18:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010c1c:	bfb8      	it	lt
 8010c1e:	eef0 7a66 	vmovlt.f32	s15, s13
 8010c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c26:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010c2a:	f77d af5b 	ble.w	800eae4 <kalman_3gyro.constprop.0+0x1e8c>
 8010c2e:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 8010c32:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010c36:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3e:	f77d af51 	ble.w	800eae4 <kalman_3gyro.constprop.0+0x1e8c>
 8010c42:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010c46:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010c4a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010c4e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010c52:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010c56:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010c5a:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010c5e:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010c62:	f7fd bf3f 	b.w	800eae4 <kalman_3gyro.constprop.0+0x1e8c>
 8010c66:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010c6a:	2a01      	cmp	r2, #1
 8010c6c:	d002      	beq.n	8010c74 <kalman_3gyro.constprop.0+0x401c>
 8010c6e:	2b01      	cmp	r3, #1
 8010c70:	f47d af1e 	bne.w	800eab0 <kalman_3gyro.constprop.0+0x1e58>
 8010c74:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010c78:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c80:	bfa8      	it	ge
 8010c82:	eeb0 3a67 	vmovge.f32	s6, s15
 8010c86:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010c8a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010c8e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010c92:	f7fd bf0d 	b.w	800eab0 <kalman_3gyro.constprop.0+0x1e58>
 8010c96:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010c9a:	ee17 0a90 	vmov	r0, s15
 8010c9e:	f7ef fc53 	bl	8000548 <__aeabi_f2d>
 8010ca2:	ec41 0b10 	vmov	d0, r0, r1
 8010ca6:	f004 fe9b 	bl	80159e0 <ceil>
 8010caa:	ec51 0b10 	vmov	r0, r1, d0
 8010cae:	f7ef ff7b 	bl	8000ba8 <__aeabi_d2f>
 8010cb2:	ee08 0a10 	vmov	s16, r0
 8010cb6:	f7fc bc40 	b.w	800d53a <kalman_3gyro.constprop.0+0x8e2>
 8010cba:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010cbe:	ee17 0a90 	vmov	r0, s15
 8010cc2:	f7ef fc41 	bl	8000548 <__aeabi_f2d>
 8010cc6:	ec41 0b10 	vmov	d0, r0, r1
 8010cca:	f004 fe89 	bl	80159e0 <ceil>
 8010cce:	ec51 0b10 	vmov	r0, r1, d0
 8010cd2:	f7ef ff69 	bl	8000ba8 <__aeabi_d2f>
 8010cd6:	ee0b 0a10 	vmov	s22, r0
 8010cda:	f7fc bcb7 	b.w	800d64c <kalman_3gyro.constprop.0+0x9f4>
 8010cde:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010ce2:	ee17 0a90 	vmov	r0, s15
 8010ce6:	f7ef fc2f 	bl	8000548 <__aeabi_f2d>
 8010cea:	ec41 0b10 	vmov	d0, r0, r1
 8010cee:	f004 fe77 	bl	80159e0 <ceil>
 8010cf2:	ec51 0b10 	vmov	r0, r1, d0
 8010cf6:	f7ef ff57 	bl	8000ba8 <__aeabi_d2f>
 8010cfa:	ee08 0a10 	vmov	s16, r0
 8010cfe:	f7fc bcc8 	b.w	800d692 <kalman_3gyro.constprop.0+0xa3a>
 8010d02:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010d06:	ee17 0a90 	vmov	r0, s15
 8010d0a:	f7ef fc1d 	bl	8000548 <__aeabi_f2d>
 8010d0e:	ec41 0b10 	vmov	d0, r0, r1
 8010d12:	f004 fe65 	bl	80159e0 <ceil>
 8010d16:	ec51 0b10 	vmov	r0, r1, d0
 8010d1a:	f7ef ff45 	bl	8000ba8 <__aeabi_d2f>
 8010d1e:	ee0d 0a90 	vmov	s27, r0
 8010d22:	f7fc bc70 	b.w	800d606 <kalman_3gyro.constprop.0+0x9ae>
 8010d26:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010d2a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010d32:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3a:	f77d af02 	ble.w	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 8010d3e:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d46:	eef4 7aec 	vcmpe.f32	s15, s25
 8010d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4e:	f77d aef8 	ble.w	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 8010d52:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010d56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010d5a:	eef4 7acd 	vcmpe.f32	s15, s26
 8010d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d62:	f140 8711 	bpl.w	8011b88 <kalman_3gyro.constprop.0+0x4f30>
 8010d66:	3303      	adds	r3, #3
 8010d68:	f7ff ba35 	b.w	80101d6 <kalman_3gyro.constprop.0+0x357e>
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010d72:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010d76:	9181      	str	r1, [sp, #516]	; 0x204
 8010d78:	9282      	str	r2, [sp, #520]	; 0x208
 8010d7a:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010d7e:	9183      	str	r1, [sp, #524]	; 0x20c
 8010d80:	2200      	movs	r2, #0
 8010d82:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010d86:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010d8a:	f7fe baa8 	b.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 8010d8e:	a936      	add	r1, sp, #216	; 0xd8
 8010d90:	a854      	add	r0, sp, #336	; 0x150
 8010d92:	f7fa ff85 	bl	800bca0 <b_dcm2q>
 8010d96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010da0:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010da4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010da8:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010dac:	f006 fd86 	bl	80178bc <memset>
 8010db0:	4bd8      	ldr	r3, [pc, #864]	; (8011114 <kalman_3gyro.constprop.0+0x44bc>)
 8010db2:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010db6:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010dba:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010dbe:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010dc2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010dc6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010dca:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010dce:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010dd2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010dd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010dd8:	781a      	ldrb	r2, [r3, #0]
 8010dda:	ee07 2a90 	vmov	s15, r2
 8010dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010de2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dea:	f040 84dc 	bne.w	80117a6 <kalman_3gyro.constprop.0+0x4b4e>
 8010dee:	eeb0 7a4c 	vmov.f32	s14, s24
 8010df2:	2300      	movs	r3, #0
 8010df4:	f88b 3000 	strb.w	r3, [fp]
 8010df8:	eddb ea02 	vldr	s29, [fp, #8]
 8010dfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010e00:	2301      	movs	r3, #1
 8010e02:	f7fd bb8d 	b.w	800e520 <kalman_3gyro.constprop.0+0x18c8>
 8010e06:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010e0a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e12:	f340 85da 	ble.w	80119ca <kalman_3gyro.constprop.0+0x4d72>
 8010e16:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010e1a:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010e1e:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010e22:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010e26:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010e2a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010e2e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010e32:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010e36:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010e3a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e42:	f63d a94b 	bhi.w	800e0dc <kalman_3gyro.constprop.0+0x1484>
 8010e46:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010e4a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e52:	f340 84bc 	ble.w	80117ce <kalman_3gyro.constprop.0+0x4b76>
 8010e56:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010e5a:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010e5e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010e62:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e66:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010e6a:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010e6e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010e72:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010e76:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010e7a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e82:	f63d a94b 	bhi.w	800e11c <kalman_3gyro.constprop.0+0x14c4>
 8010e86:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010e8a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e92:	f340 84a8 	ble.w	80117e6 <kalman_3gyro.constprop.0+0x4b8e>
 8010e96:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010e9a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010e9e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ea2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ea6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010eaa:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010eae:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010eb2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010eb6:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010eba:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec2:	f63d a94b 	bhi.w	800e15c <kalman_3gyro.constprop.0+0x1504>
 8010ec6:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010eca:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed2:	f340 8490 	ble.w	80117f6 <kalman_3gyro.constprop.0+0x4b9e>
 8010ed6:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010eda:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010ede:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ee2:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ee6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010eea:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010eee:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010ef2:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010ef6:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010efa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f02:	f6fd a94b 	blt.w	800e19c <kalman_3gyro.constprop.0+0x1544>
 8010f06:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010f0a:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f12:	f57d a94b 	bpl.w	800e1ac <kalman_3gyro.constprop.0+0x1554>
 8010f16:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010f1a:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010f1e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f22:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f26:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010f2a:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010f2e:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010f32:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010f36:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010f3a:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f42:	f6fd a94b 	blt.w	800e1dc <kalman_3gyro.constprop.0+0x1584>
 8010f46:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4e:	f57d a945 	bpl.w	800e1dc <kalman_3gyro.constprop.0+0x1584>
 8010f52:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010f56:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010f5a:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010f5e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010f62:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010f66:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010f6a:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010f6e:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010f72:	f7fd b933 	b.w	800e1dc <kalman_3gyro.constprop.0+0x1584>
 8010f76:	eddf 6a68 	vldr	s13, [pc, #416]	; 8011118 <kalman_3gyro.constprop.0+0x44c0>
 8010f7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f82:	f57d ac56 	bpl.w	800e832 <kalman_3gyro.constprop.0+0x1bda>
 8010f86:	eddf 3a65 	vldr	s7, [pc, #404]	; 801111c <kalman_3gyro.constprop.0+0x44c4>
 8010f8a:	eddf 2a65 	vldr	s5, [pc, #404]	; 8011120 <kalman_3gyro.constprop.0+0x44c8>
 8010f8e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8011124 <kalman_3gyro.constprop.0+0x44cc>
 8010f92:	eddf 6a65 	vldr	s13, [pc, #404]	; 8011128 <kalman_3gyro.constprop.0+0x44d0>
 8010f96:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010f9a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010f9e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010fa2:	eeb0 ca66 	vmov.f32	s24, s13
 8010fa6:	eddf 6a61 	vldr	s13, [pc, #388]	; 801112c <kalman_3gyro.constprop.0+0x44d4>
 8010faa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	f6fd ac56 	blt.w	800e862 <kalman_3gyro.constprop.0+0x1c0a>
 8010fb6:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011130 <kalman_3gyro.constprop.0+0x44d8>
 8010fba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fc2:	f57d ac56 	bpl.w	800e872 <kalman_3gyro.constprop.0+0x1c1a>
 8010fc6:	eddf 3a59 	vldr	s7, [pc, #356]	; 801112c <kalman_3gyro.constprop.0+0x44d4>
 8010fca:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010fce:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010fd2:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8010fd6:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8010fda:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010fde:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010fe2:	eeb0 ca66 	vmov.f32	s24, s13
 8010fe6:	eddf 6a53 	vldr	s13, [pc, #332]	; 8011134 <kalman_3gyro.constprop.0+0x44dc>
 8010fea:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff2:	f6fd ac56 	blt.w	800e8a2 <kalman_3gyro.constprop.0+0x1c4a>
 8010ff6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010ffa:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	f57d ac56 	bpl.w	800e8b2 <kalman_3gyro.constprop.0+0x1c5a>
 8011006:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8011134 <kalman_3gyro.constprop.0+0x44dc>
 801100a:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8011138 <kalman_3gyro.constprop.0+0x44e0>
 801100e:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 801113c <kalman_3gyro.constprop.0+0x44e4>
 8011012:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8011016:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 801101a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801101e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8011022:	eeb0 ca66 	vmov.f32	s24, s13
 8011026:	e4f4      	b.n	8010a12 <kalman_3gyro.constprop.0+0x3dba>
 8011028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801102c:	f57d abe1 	bpl.w	800e7f2 <kalman_3gyro.constprop.0+0x1b9a>
 8011030:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801111c <kalman_3gyro.constprop.0+0x44c4>
 8011034:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801103c:	da9b      	bge.n	8010f76 <kalman_3gyro.constprop.0+0x431e>
 801103e:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011042:	f7fd bbee 	b.w	800e822 <kalman_3gyro.constprop.0+0x1bca>
 8011046:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011118 <kalman_3gyro.constprop.0+0x44c0>
 801104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011052:	f57d ab5e 	bpl.w	800e712 <kalman_3gyro.constprop.0+0x1aba>
 8011056:	eddf 6a31 	vldr	s13, [pc, #196]	; 801111c <kalman_3gyro.constprop.0+0x44c4>
 801105a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8011140 <kalman_3gyro.constprop.0+0x44e8>
 801105e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8011124 <kalman_3gyro.constprop.0+0x44cc>
 8011062:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011144 <kalman_3gyro.constprop.0+0x44ec>
 8011066:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801106a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801106e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011072:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801112c <kalman_3gyro.constprop.0+0x44d4>
 8011076:	eef4 7ae6 	vcmpe.f32	s15, s13
 801107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801107e:	f6fd ab5e 	blt.w	800e73e <kalman_3gyro.constprop.0+0x1ae6>
 8011082:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8011130 <kalman_3gyro.constprop.0+0x44d8>
 8011086:	eef4 7ac7 	vcmpe.f32	s15, s14
 801108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108e:	f57d ab5e 	bpl.w	800e74e <kalman_3gyro.constprop.0+0x1af6>
 8011092:	eddf 6a26 	vldr	s13, [pc, #152]	; 801112c <kalman_3gyro.constprop.0+0x44d4>
 8011096:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801109a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801109e:	ee66 6a87 	vmul.f32	s13, s13, s14
 80110a2:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80110a6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80110aa:	eea6 7a86 	vfma.f32	s14, s13, s12
 80110ae:	eddf 6a21 	vldr	s13, [pc, #132]	; 8011134 <kalman_3gyro.constprop.0+0x44dc>
 80110b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ba:	f6fd ab5e 	blt.w	800e77a <kalman_3gyro.constprop.0+0x1b22>
 80110be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80110c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ca:	f57d ab5d 	bpl.w	800e788 <kalman_3gyro.constprop.0+0x1b30>
 80110ce:	eddf 6a19 	vldr	s13, [pc, #100]	; 8011134 <kalman_3gyro.constprop.0+0x44dc>
 80110d2:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8011148 <kalman_3gyro.constprop.0+0x44f0>
 80110d6:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801113c <kalman_3gyro.constprop.0+0x44e4>
 80110da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801114c <kalman_3gyro.constprop.0+0x44f4>
 80110de:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80110e2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80110e6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80110ea:	f7fd bb5b 	b.w	800e7a4 <kalman_3gyro.constprop.0+0x1b4c>
 80110ee:	9b01      	ldr	r3, [sp, #4]
 80110f0:	e63d      	b.n	8010d6e <kalman_3gyro.constprop.0+0x4116>
 80110f2:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 80110f6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80110fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fe:	da2b      	bge.n	8011158 <kalman_3gyro.constprop.0+0x4500>
 8011100:	ed9f ba13 	vldr	s22, [pc, #76]	; 8011150 <kalman_3gyro.constprop.0+0x44f8>
 8011104:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8011108:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011110:	db3a      	blt.n	8011188 <kalman_3gyro.constprop.0+0x4530>
 8011112:	e386      	b.n	8011822 <kalman_3gyro.constprop.0+0x4bca>
 8011114:	40a00000 	.word	0x40a00000
 8011118:	3cf5c28f 	.word	0x3cf5c28f
 801111c:	3c75c28f 	.word	0x3c75c28f
 8011120:	3dccccd0 	.word	0x3dccccd0
 8011124:	42855556 	.word	0x42855556
 8011128:	3f866666 	.word	0x3f866666
 801112c:	3d4ccccd 	.word	0x3d4ccccd
 8011130:	3dcccccd 	.word	0x3dcccccd
 8011134:	3e4ccccd 	.word	0x3e4ccccd
 8011138:	42200000 	.word	0x42200000
 801113c:	40555555 	.word	0x40555555
 8011140:	3ecccccc 	.word	0x3ecccccc
 8011144:	3fcccccd 	.word	0x3fcccccd
 8011148:	43f00000 	.word	0x43f00000
 801114c:	42ee0000 	.word	0x42ee0000
 8011150:	00000000 	.word	0x00000000
 8011154:	eeb0 7a64 	vmov.f32	s14, s9
 8011158:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 801115c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011164:	f140 8359 	bpl.w	801181a <kalman_3gyro.constprop.0+0x4bc2>
 8011168:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 801116c:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8011170:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011174:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011178:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801117c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011180:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011184:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011188:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 801118c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011194:	f2c0 835d 	blt.w	8011852 <kalman_3gyro.constprop.0+0x4bfa>
 8011198:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801119c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80111a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a4:	f140 8402 	bpl.w	80119ac <kalman_3gyro.constprop.0+0x4d54>
 80111a8:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 80111ac:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 80111b0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80111b4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80111b8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80111bc:	ee64 4a03 	vmul.f32	s9, s8, s6
 80111c0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80111c4:	ee3b ba23 	vadd.f32	s22, s22, s7
 80111c8:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 80111cc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80111d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d4:	f200 835d 	bhi.w	8011892 <kalman_3gyro.constprop.0+0x4c3a>
 80111d8:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 80111dc:	eef4 4ac8 	vcmpe.f32	s9, s16
 80111e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e4:	f340 83e8 	ble.w	80119b8 <kalman_3gyro.constprop.0+0x4d60>
 80111e8:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80111ec:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80111f0:	ee38 3a47 	vsub.f32	s6, s16, s14
 80111f4:	ee34 4a63 	vsub.f32	s8, s8, s7
 80111f8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80111fc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011200:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011204:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011208:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 801120c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011214:	f200 835d 	bhi.w	80118d2 <kalman_3gyro.constprop.0+0x4c7a>
 8011218:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 801121c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011224:	f340 83b4 	ble.w	8011990 <kalman_3gyro.constprop.0+0x4d38>
 8011228:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 801122c:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8011230:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011234:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011238:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801123c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011240:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011244:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011248:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 801124c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011254:	f2c0 835c 	blt.w	8011910 <kalman_3gyro.constprop.0+0x4cb8>
 8011258:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801125c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011264:	f140 835c 	bpl.w	8011920 <kalman_3gyro.constprop.0+0x4cc8>
 8011268:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 801126c:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8011270:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011274:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011278:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801127c:	ee24 7a03 	vmul.f32	s14, s8, s6
 8011280:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8011284:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011288:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801128c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011294:	f6fc aeda 	blt.w	800e04c <kalman_3gyro.constprop.0+0x13f4>
 8011298:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a0:	f57c aed4 	bpl.w	800e04c <kalman_3gyro.constprop.0+0x13f4>
 80112a4:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 80112a8:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 80112ac:	ee78 3a47 	vsub.f32	s7, s16, s14
 80112b0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 80112b4:	ee35 7a47 	vsub.f32	s14, s10, s14
 80112b8:	ee24 5aa3 	vmul.f32	s10, s9, s7
 80112bc:	ee85 ba07 	vdiv.f32	s22, s10, s14
 80112c0:	ee3b ba04 	vadd.f32	s22, s22, s8
 80112c4:	f7fc bec2 	b.w	800e04c <kalman_3gyro.constprop.0+0x13f4>
 80112c8:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80112cc:	eef4 7acd 	vcmpe.f32	s15, s26
 80112d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d4:	dd2c      	ble.n	8011330 <kalman_3gyro.constprop.0+0x46d8>
 80112d6:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 80112da:	eef4 7aeb 	vcmpe.f32	s15, s23
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	dd25      	ble.n	8011330 <kalman_3gyro.constprop.0+0x46d8>
 80112e4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 80112e8:	eef4 7aec 	vcmpe.f32	s15, s25
 80112ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f0:	dd1e      	ble.n	8011330 <kalman_3gyro.constprop.0+0x46d8>
 80112f2:	eddd 5a03 	vldr	s11, [sp, #12]
 80112f6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80112fa:	eef4 5ae7 	vcmpe.f32	s11, s15
 80112fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011302:	d515      	bpl.n	8011330 <kalman_3gyro.constprop.0+0x46d8>
 8011304:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011308:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801130c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011318:	d50a      	bpl.n	8011330 <kalman_3gyro.constprop.0+0x46d8>
 801131a:	2300      	movs	r3, #0
 801131c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011320:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011324:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011328:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801132c:	f7fd bf4c 	b.w	800f1c8 <kalman_3gyro.constprop.0+0x2570>
 8011330:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8011334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133c:	dd0b      	ble.n	8011356 <kalman_3gyro.constprop.0+0x46fe>
 801133e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134a:	f100 843f 	bmi.w	8011bcc <kalman_3gyro.constprop.0+0x4f74>
 801134e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8011352:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011356:	2300      	movs	r3, #0
 8011358:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 801135c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011360:	f7fd bf32 	b.w	800f1c8 <kalman_3gyro.constprop.0+0x2570>
 8011364:	2301      	movs	r3, #1
 8011366:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801136a:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 801136e:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8011372:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8011376:	edd2 5a00 	vldr	s11, [r2]
 801137a:	ed93 7a00 	vldr	s14, [r3]
 801137e:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8011382:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8011386:	ed92 5a00 	vldr	s10, [r2]
 801138a:	edd3 6a00 	vldr	s13, [r3]
 801138e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8011392:	ee67 4a07 	vmul.f32	s9, s14, s14
 8011396:	eea5 4a05 	vfma.f32	s8, s10, s10
 801139a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 801139e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 80113a2:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80113a6:	aa5d      	add	r2, sp, #372	; 0x174
 80113a8:	a833      	add	r0, sp, #204	; 0xcc
 80113aa:	ed91 6a00 	vldr	s12, [r1]
 80113ae:	edd3 7a00 	vldr	s15, [r3]
 80113b2:	eea6 4a06 	vfma.f32	s8, s12, s12
 80113b6:	a92d      	add	r1, sp, #180	; 0xb4
 80113b8:	ad5d      	add	r5, sp, #372	; 0x174
 80113ba:	eee7 4aa7 	vfma.f32	s9, s15, s15
 80113be:	ac66      	add	r4, sp, #408	; 0x198
 80113c0:	eef1 2ac4 	vsqrt.f32	s5, s8
 80113c4:	eeb1 3ae4 	vsqrt.f32	s6, s9
 80113c8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80113cc:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 80113d0:	eec3 4a83 	vdiv.f32	s9, s7, s6
 80113d4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80113d8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80113dc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80113e0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80113e4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80113e8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80113ec:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 80113f0:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80113f4:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 80113f8:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 80113fc:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011400:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8011404:	f7fa fbac 	bl	800bb60 <getRotationMatrix>
 8011408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011410:	682e      	ldr	r6, [r5, #0]
 8011412:	6026      	str	r6, [r4, #0]
 8011414:	ad66      	add	r5, sp, #408	; 0x198
 8011416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011418:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 801141c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801141e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011422:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8011426:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 801142a:	6026      	str	r6, [r4, #0]
 801142c:	eef0 7ae7 	vabs.f32	s15, s15
 8011430:	eeb0 7ac7 	vabs.f32	s14, s14
 8011434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143c:	f100 81df 	bmi.w	80117fe <kalman_3gyro.constprop.0+0x4ba6>
 8011440:	2307      	movs	r3, #7
 8011442:	f04f 0c04 	mov.w	ip, #4
 8011446:	9305      	str	r3, [sp, #20]
 8011448:	2300      	movs	r3, #0
 801144a:	4662      	mov	r2, ip
 801144c:	2003      	movs	r0, #3
 801144e:	2706      	movs	r7, #6
 8011450:	f04f 0e01 	mov.w	lr, #1
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 801145a:	eeb0 7ac7 	vabs.f32	s14, s14
 801145e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011466:	f340 8296 	ble.w	8011996 <kalman_3gyro.constprop.0+0x4d3e>
 801146a:	2306      	movs	r3, #6
 801146c:	930a      	str	r3, [sp, #40]	; 0x28
 801146e:	2307      	movs	r3, #7
 8011470:	9305      	str	r3, [sp, #20]
 8011472:	2300      	movs	r3, #0
 8011474:	2708      	movs	r7, #8
 8011476:	f04f 0c04 	mov.w	ip, #4
 801147a:	9302      	str	r3, [sp, #8]
 801147c:	2302      	movs	r3, #2
 801147e:	9707      	str	r7, [sp, #28]
 8011480:	4662      	mov	r2, ip
 8011482:	2005      	movs	r0, #5
 8011484:	f04f 0e01 	mov.w	lr, #1
 8011488:	9304      	str	r3, [sp, #16]
 801148a:	ab66      	add	r3, sp, #408	; 0x198
 801148c:	441a      	add	r2, r3
 801148e:	9b07      	ldr	r3, [sp, #28]
 8011490:	edd2 6a00 	vldr	s13, [r2]
 8011494:	9a02      	ldr	r2, [sp, #8]
 8011496:	a966      	add	r1, sp, #408	; 0x198
 8011498:	440b      	add	r3, r1
 801149a:	ed93 7a00 	vldr	s14, [r3]
 801149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114a2:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80114a6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80114aa:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80114ae:	9a04      	ldr	r2, [sp, #16]
 80114b0:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80114b4:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80114b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80114bc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80114c0:	0080      	lsls	r0, r0, #2
 80114c2:	900e      	str	r0, [sp, #56]	; 0x38
 80114c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114c6:	940d      	str	r4, [sp, #52]	; 0x34
 80114c8:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80114cc:	edc3 7a00 	vstr	s15, [r3]
 80114d0:	ed96 7a00 	vldr	s14, [r6]
 80114d4:	edd1 7a00 	vldr	s15, [r1]
 80114d8:	930c      	str	r3, [sp, #48]	; 0x30
 80114da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80114de:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80114e2:	0080      	lsls	r0, r0, #2
 80114e4:	9006      	str	r0, [sp, #24]
 80114e6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80114ea:	00bf      	lsls	r7, r7, #2
 80114ec:	9711      	str	r7, [sp, #68]	; 0x44
 80114ee:	9f05      	ldr	r7, [sp, #20]
 80114f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114f2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80114f6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80114fa:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	9307      	str	r3, [sp, #28]
 8011502:	9b02      	ldr	r3, [sp, #8]
 8011504:	edc6 6a00 	vstr	s13, [r6]
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	930b      	str	r3, [sp, #44]	; 0x2c
 801150c:	9b04      	ldr	r3, [sp, #16]
 801150e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	9312      	str	r3, [sp, #72]	; 0x48
 8011514:	9b05      	ldr	r3, [sp, #20]
 8011516:	ed96 7a00 	vldr	s14, [r6]
 801151a:	009b      	lsls	r3, r3, #2
 801151c:	9309      	str	r3, [sp, #36]	; 0x24
 801151e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8011522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011524:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011528:	ed93 6a00 	vldr	s12, [r3]
 801152c:	edd2 7a00 	vldr	s15, [r2]
 8011530:	eee6 7a47 	vfms.f32	s15, s12, s14
 8011534:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8011538:	950a      	str	r5, [sp, #40]	; 0x28
 801153a:	ea4f 058c 	mov.w	r5, ip, lsl #2
 801153e:	edc2 7a00 	vstr	s15, [r2]
 8011542:	ed96 7a00 	vldr	s14, [r6]
 8011546:	edd4 7a00 	vldr	s15, [r4]
 801154a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801154e:	edc4 7a00 	vstr	s15, [r4]
 8011552:	edd0 5a00 	vldr	s11, [r0]
 8011556:	ed97 7a00 	vldr	s14, [r7]
 801155a:	eea6 7a65 	vfms.f32	s14, s12, s11
 801155e:	eef0 7ae7 	vabs.f32	s15, s15
 8011562:	ed87 7a00 	vstr	s14, [r7]
 8011566:	ed90 6a00 	vldr	s12, [r0]
 801156a:	ed91 7a00 	vldr	s14, [r1]
 801156e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8011572:	ed81 7a00 	vstr	s14, [r1]
 8011576:	ed92 7a00 	vldr	s14, [r2]
 801157a:	eeb0 7ac7 	vabs.f32	s14, s14
 801157e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011586:	dd12      	ble.n	80115ae <kalman_3gyro.constprop.0+0x4956>
 8011588:	9a07      	ldr	r2, [sp, #28]
 801158a:	9f05      	ldr	r7, [sp, #20]
 801158c:	9806      	ldr	r0, [sp, #24]
 801158e:	9209      	str	r2, [sp, #36]	; 0x24
 8011590:	4673      	mov	r3, lr
 8011592:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011596:	9302      	str	r3, [sp, #8]
 8011598:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	9206      	str	r2, [sp, #24]
 80115a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80115a2:	00ba      	lsls	r2, r7, #2
 80115a4:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80115a8:	4605      	mov	r5, r0
 80115aa:	9207      	str	r2, [sp, #28]
 80115ac:	930a      	str	r3, [sp, #40]	; 0x28
 80115ae:	9b06      	ldr	r3, [sp, #24]
 80115b0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80115b2:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80115b6:	4413      	add	r3, r2
 80115b8:	461c      	mov	r4, r3
 80115ba:	462b      	mov	r3, r5
 80115bc:	4413      	add	r3, r2
 80115be:	ed94 7a00 	vldr	s14, [r4]
 80115c2:	edd3 7a00 	vldr	s15, [r3]
 80115c6:	ee87 2a27 	vdiv.f32	s4, s14, s15
 80115ca:	4618      	mov	r0, r3
 80115cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115ce:	4413      	add	r3, r2
 80115d0:	461a      	mov	r2, r3
 80115d2:	9b07      	ldr	r3, [sp, #28]
 80115d4:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80115d8:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80115dc:	440b      	add	r3, r1
 80115de:	4619      	mov	r1, r3
 80115e0:	442e      	add	r6, r5
 80115e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80115e4:	9607      	str	r6, [sp, #28]
 80115e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80115e8:	ed84 2a00 	vstr	s4, [r4]
 80115ec:	442b      	add	r3, r5
 80115ee:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80115f2:	9306      	str	r3, [sp, #24]
 80115f4:	19bb      	adds	r3, r7, r6
 80115f6:	ed92 7a00 	vldr	s14, [r2]
 80115fa:	edd1 7a00 	vldr	s15, [r1]
 80115fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011600:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8011604:	edd3 3a00 	vldr	s7, [r3]
 8011608:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 801160c:	eee2 7a47 	vfms.f32	s15, s4, s14
 8011610:	4423      	add	r3, r4
 8011612:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8011616:	ed93 5a00 	vldr	s10, [r3]
 801161a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801161c:	edc1 7a00 	vstr	s15, [r1]
 8011620:	462f      	mov	r7, r5
 8011622:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 8011626:	4629      	mov	r1, r5
 8011628:	eb05 0c03 	add.w	ip, r5, r3
 801162c:	9d04      	ldr	r5, [sp, #16]
 801162e:	ed92 1a00 	vldr	s2, [r2]
 8011632:	4437      	add	r7, r6
 8011634:	9705      	str	r7, [sp, #20]
 8011636:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 801163a:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 801163e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011642:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8011646:	4419      	add	r1, r3
 8011648:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801164c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8011650:	191c      	adds	r4, r3, r4
 8011652:	9b02      	ldr	r3, [sp, #8]
 8011654:	9104      	str	r1, [sp, #16]
 8011656:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 801165a:	9409      	str	r4, [sp, #36]	; 0x24
 801165c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8011660:	463d      	mov	r5, r7
 8011662:	9904      	ldr	r1, [sp, #16]
 8011664:	46b6      	mov	lr, r6
 8011666:	4623      	mov	r3, r4
 8011668:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801166c:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8011670:	edd0 7a00 	vldr	s15, [r0]
 8011674:	9805      	ldr	r0, [sp, #20]
 8011676:	ed91 0a00 	vldr	s0, [r1]
 801167a:	ed90 8a00 	vldr	s16, [r0]
 801167e:	eddc 4a00 	vldr	s9, [ip]
 8011682:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8011686:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 801168a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 801168e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8011692:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8011696:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 801169a:	a85d      	add	r0, sp, #372	; 0x174
 801169c:	a93e      	add	r1, sp, #248	; 0xf8
 801169e:	edd7 5a00 	vldr	s11, [r7]
 80116a2:	ed96 6a00 	vldr	s12, [r6]
 80116a6:	9a06      	ldr	r2, [sp, #24]
 80116a8:	ed95 7a00 	vldr	s14, [r5]
 80116ac:	edd4 6a00 	vldr	s13, [r4]
 80116b0:	ed93 3a00 	vldr	s6, [r3]
 80116b4:	edde 7a00 	vldr	s15, [lr]
 80116b8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80116ba:	edd2 1a00 	vldr	s3, [r2]
 80116be:	9e07      	ldr	r6, [sp, #28]
 80116c0:	eee8 3a45 	vfms.f32	s7, s16, s10
 80116c4:	eee0 4a45 	vfms.f32	s9, s0, s10
 80116c8:	eea8 6a65 	vfms.f32	s12, s16, s11
 80116cc:	eee7 7a48 	vfms.f32	s15, s14, s16
 80116d0:	eee0 6a65 	vfms.f32	s13, s0, s11
 80116d4:	eea7 3a40 	vfms.f32	s6, s14, s0
 80116d8:	ed94 0a00 	vldr	s0, [r4]
 80116dc:	eea2 3a67 	vfms.f32	s6, s4, s15
 80116e0:	eee3 4ac2 	vfms.f32	s9, s7, s4
 80116e4:	eee2 6a46 	vfms.f32	s13, s4, s12
 80116e8:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80116ec:	ee64 6a26 	vmul.f32	s13, s8, s13
 80116f0:	ee64 4a24 	vmul.f32	s9, s8, s9
 80116f4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80116f8:	eea1 6a66 	vfms.f32	s12, s2, s13
 80116fc:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8011700:	eee4 7a41 	vfms.f32	s15, s8, s2
 8011704:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8011708:	eea4 5ae1 	vfms.f32	s10, s9, s3
 801170c:	eea4 7a61 	vfms.f32	s14, s8, s3
 8011710:	ed96 3a00 	vldr	s6, [r6]
 8011714:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8011718:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801171c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011720:	ee22 6a86 	vmul.f32	s12, s5, s12
 8011724:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8011728:	eea3 5ac3 	vfms.f32	s10, s7, s6
 801172c:	eee3 5a46 	vfms.f32	s11, s6, s12
 8011730:	ee27 7a02 	vmul.f32	s14, s14, s4
 8011734:	ee22 5a05 	vmul.f32	s10, s4, s10
 8011738:	ee62 5a25 	vmul.f32	s11, s4, s11
 801173c:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011740:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8011744:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8011748:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 801174c:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8011750:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8011754:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8011758:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 801175c:	f7fa faa0 	bl	800bca0 <b_dcm2q>
 8011760:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8011764:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8011768:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 801176c:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8011770:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011774:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011778:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801177c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011780:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011784:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8011788:	2b00      	cmp	r3, #0
 801178a:	f43d ad20 	beq.w	800f1ce <kalman_3gyro.constprop.0+0x2576>
 801178e:	2200      	movs	r2, #0
 8011790:	9b01      	ldr	r3, [sp, #4]
 8011792:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011796:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801179a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801179e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80117a2:	f7fd bd9c 	b.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 80117a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80117aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80117ae:	edd3 6a03 	vldr	s13, [r3, #12]
 80117b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80117b6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80117ba:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80117be:	eeb1 6ae7 	vsqrt.f32	s12, s15
 80117c2:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80117c6:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 80117ca:	f7ff bb12 	b.w	8010df2 <kalman_3gyro.constprop.0+0x419a>
 80117ce:	eeb0 7a64 	vmov.f32	s14, s9
 80117d2:	f7fc bc8b 	b.w	800e0ec <kalman_3gyro.constprop.0+0x1494>
 80117d6:	eeb0 7a64 	vmov.f32	s14, s9
 80117da:	f7ff bb94 	b.w	8010f06 <kalman_3gyro.constprop.0+0x42ae>
 80117de:	eeb0 7a64 	vmov.f32	s14, s9
 80117e2:	f7ff bb50 	b.w	8010e86 <kalman_3gyro.constprop.0+0x422e>
 80117e6:	eeb0 7a64 	vmov.f32	s14, s9
 80117ea:	f7fc bc9f 	b.w	800e12c <kalman_3gyro.constprop.0+0x14d4>
 80117ee:	eeb0 7a64 	vmov.f32	s14, s9
 80117f2:	f7ff bb68 	b.w	8010ec6 <kalman_3gyro.constprop.0+0x426e>
 80117f6:	eeb0 7a64 	vmov.f32	s14, s9
 80117fa:	f7fc bcb7 	b.w	800e16c <kalman_3gyro.constprop.0+0x1514>
 80117fe:	2200      	movs	r2, #0
 8011800:	2004      	movs	r0, #4
 8011802:	2301      	movs	r3, #1
 8011804:	2406      	movs	r4, #6
 8011806:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801180a:	9007      	str	r0, [sp, #28]
 801180c:	eef0 7a47 	vmov.f32	s15, s14
 8011810:	4696      	mov	lr, r2
 8011812:	f04f 0c03 	mov.w	ip, #3
 8011816:	2707      	movs	r7, #7
 8011818:	e61d      	b.n	8011456 <kalman_3gyro.constprop.0+0x47fe>
 801181a:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011ba4 <kalman_3gyro.constprop.0+0x4f4c>
 801181e:	eeb0 7a64 	vmov.f32	s14, s9
 8011822:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 8011826:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182e:	f140 80b9 	bpl.w	80119a4 <kalman_3gyro.constprop.0+0x4d4c>
 8011832:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 8011836:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 801183a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801183e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011842:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011846:	ee64 4a03 	vmul.f32	s9, s8, s6
 801184a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801184e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011852:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8011856:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801185a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185e:	f6ff acb3 	blt.w	80111c8 <kalman_3gyro.constprop.0+0x4570>
 8011862:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8011866:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186e:	f140 80a0 	bpl.w	80119b2 <kalman_3gyro.constprop.0+0x4d5a>
 8011872:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8011876:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 801187a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801187e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011882:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011886:	ee64 4a03 	vmul.f32	s9, s8, s6
 801188a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801188e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011892:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8011896:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801189a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189e:	f63f acb3 	bhi.w	8011208 <kalman_3gyro.constprop.0+0x45b0>
 80118a2:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 80118a6:	eef4 4ac8 	vcmpe.f32	s9, s16
 80118aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ae:	f340 8086 	ble.w	80119be <kalman_3gyro.constprop.0+0x4d66>
 80118b2:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 80118b6:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 80118ba:	ee38 3a47 	vsub.f32	s6, s16, s14
 80118be:	ee34 4a63 	vsub.f32	s8, s8, s7
 80118c2:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80118c6:	ee64 4a03 	vmul.f32	s9, s8, s6
 80118ca:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80118ce:	ee3b ba23 	vadd.f32	s22, s22, s7
 80118d2:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 80118d6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	f63f acb3 	bhi.w	8011248 <kalman_3gyro.constprop.0+0x45f0>
 80118e2:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 80118e6:	eef4 4ac8 	vcmpe.f32	s9, s16
 80118ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ee:	dd69      	ble.n	80119c4 <kalman_3gyro.constprop.0+0x4d6c>
 80118f0:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80118f4:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 80118f8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80118fc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011900:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011904:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011908:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801190c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011910:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8011914:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	f63f acb4 	bhi.w	8011288 <kalman_3gyro.constprop.0+0x4630>
 8011920:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8011924:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801192c:	f77f acb4 	ble.w	8011298 <kalman_3gyro.constprop.0+0x4640>
 8011930:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8011934:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8011938:	ee78 3a64 	vsub.f32	s7, s16, s9
 801193c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011940:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011944:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011948:	ee85 ba07 	vdiv.f32	s22, s10, s14
 801194c:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011950:	f7fc bb7c 	b.w	800e04c <kalman_3gyro.constprop.0+0x13f4>
 8011954:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011958:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011ba8 <kalman_3gyro.constprop.0+0x4f50>
 801195c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8011bac <kalman_3gyro.constprop.0+0x4f54>
 8011960:	3301      	adds	r3, #1
 8011962:	b29b      	uxth	r3, r3
 8011964:	2b31      	cmp	r3, #49	; 0x31
 8011966:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801196a:	bf98      	it	ls
 801196c:	eef0 7a47 	vmovls.f32	s15, s14
 8011970:	f7fd bc1c 	b.w	800f1ac <kalman_3gyro.constprop.0+0x2554>
 8011974:	2a0a      	cmp	r2, #10
 8011976:	d02c      	beq.n	80119d2 <kalman_3gyro.constprop.0+0x4d7a>
 8011978:	2100      	movs	r1, #0
 801197a:	3201      	adds	r2, #1
 801197c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011980:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011984:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011988:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 801198c:	f7fd bca7 	b.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 8011990:	eeb0 7a64 	vmov.f32	s14, s9
 8011994:	e7a5      	b.n	80118e2 <kalman_3gyro.constprop.0+0x4c8a>
 8011996:	2305      	movs	r3, #5
 8011998:	2108      	movs	r1, #8
 801199a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 801199e:	2302      	movs	r3, #2
 80119a0:	9302      	str	r3, [sp, #8]
 80119a2:	e572      	b.n	801148a <kalman_3gyro.constprop.0+0x4832>
 80119a4:	eeb0 7a64 	vmov.f32	s14, s9
 80119a8:	f7ff bbf6 	b.w	8011198 <kalman_3gyro.constprop.0+0x4540>
 80119ac:	eeb0 7a64 	vmov.f32	s14, s9
 80119b0:	e757      	b.n	8011862 <kalman_3gyro.constprop.0+0x4c0a>
 80119b2:	eeb0 7a64 	vmov.f32	s14, s9
 80119b6:	e40f      	b.n	80111d8 <kalman_3gyro.constprop.0+0x4580>
 80119b8:	eeb0 7a64 	vmov.f32	s14, s9
 80119bc:	e771      	b.n	80118a2 <kalman_3gyro.constprop.0+0x4c4a>
 80119be:	eeb0 7a64 	vmov.f32	s14, s9
 80119c2:	e429      	b.n	8011218 <kalman_3gyro.constprop.0+0x45c0>
 80119c4:	eeb0 7a64 	vmov.f32	s14, s9
 80119c8:	e446      	b.n	8011258 <kalman_3gyro.constprop.0+0x4600>
 80119ca:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011ba4 <kalman_3gyro.constprop.0+0x4f4c>
 80119ce:	f7fc bb6d 	b.w	800e0ac <kalman_3gyro.constprop.0+0x1454>
 80119d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80119d4:	ed94 3a00 	vldr	s6, [r4]
 80119d8:	edd2 5a00 	vldr	s11, [r2]
 80119dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119de:	edd0 3a00 	vldr	s7, [r0]
 80119e2:	ed92 1a00 	vldr	s2, [r2]
 80119e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80119e8:	ed91 4a00 	vldr	s8, [r1]
 80119ec:	edd2 4a00 	vldr	s9, [r2]
 80119f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80119f2:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80119f6:	ed92 2a00 	vldr	s4, [r2]
 80119fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80119fc:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011a00:	edd2 7a00 	vldr	s15, [r2]
 8011a04:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011a06:	edd2 2a00 	vldr	s5, [r2]
 8011a0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011a0c:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011a10:	edd2 1a00 	vldr	s3, [r2]
 8011a14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011a16:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011a1a:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011a1e:	ed92 3a00 	vldr	s6, [r2]
 8011a22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a24:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011a28:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011a2c:	edd2 3a00 	vldr	s7, [r2]
 8011a30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011a32:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011a36:	ed92 4a00 	vldr	s8, [r2]
 8011a3a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011a3c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011a40:	ed92 2a00 	vldr	s4, [r2]
 8011a44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011a46:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011a4a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8011a4e:	edd2 2a00 	vldr	s5, [r2]
 8011a52:	ed91 3a00 	vldr	s6, [r1]
 8011a56:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011a5a:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011a5e:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011a62:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011a66:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8011a6a:	ed90 4a00 	vldr	s8, [r0]
 8011a6e:	edd2 3a00 	vldr	s7, [r2]
 8011a72:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011a76:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011a7a:	ed91 2a00 	vldr	s4, [r1]
 8011a7e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011a82:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011a86:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011a8a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8011a8e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011a92:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011a96:	ed90 4a00 	vldr	s8, [r0]
 8011a9a:	edd2 2a00 	vldr	s5, [r2]
 8011a9e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011aa2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011aa6:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8011aaa:	edd1 3a00 	vldr	s7, [r1]
 8011aae:	ed90 3a00 	vldr	s6, [r0]
 8011ab2:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011ab6:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011aba:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8011abe:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011ac2:	ed92 4a00 	vldr	s8, [r2]
 8011ac6:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011aca:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011ace:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011ad2:	edd0 3a00 	vldr	s7, [r0]
 8011ad6:	edd4 2a00 	vldr	s5, [r4]
 8011ada:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8011ade:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011ae2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8011ae6:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 8011aea:	ed91 3a00 	vldr	s6, [r1]
 8011aee:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011af2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011af6:	ed92 4a00 	vldr	s8, [r2]
 8011afa:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8011afe:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 8011b02:	edd4 3a00 	vldr	s7, [r4]
 8011b06:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8011b0a:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011b0e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b12:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011b16:	ed91 4a00 	vldr	s8, [r1]
 8011b1a:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8011b1e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b22:	ee64 4a85 	vmul.f32	s9, s9, s10
 8011b26:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8011b2a:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011b2e:	edc1 4a00 	vstr	s9, [r1]
 8011b32:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011b36:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011b3a:	edc1 5a00 	vstr	s11, [r1]
 8011b3e:	f240 1501 	movw	r5, #257	; 0x101
 8011b42:	3201      	adds	r2, #1
 8011b44:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011b48:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8011b4c:	edc1 7a00 	vstr	s15, [r1]
 8011b50:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011b54:	2800      	cmp	r0, #0
 8011b56:	f43d abc2 	beq.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011b60:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011b64:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011b68:	f88b 2001 	strb.w	r2, [fp, #1]
 8011b6c:	f7fd bbb7 	b.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 8011b70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011b74:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011b78:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8011b7c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011b80:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011b84:	f7fd bb20 	b.w	800f1c8 <kalman_3gyro.constprop.0+0x2570>
 8011b88:	2a00      	cmp	r2, #0
 8011b8a:	f340 80c1 	ble.w	8011d10 <kalman_3gyro.constprop.0+0x50b8>
 8011b8e:	2300      	movs	r3, #0
 8011b90:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011b94:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011b98:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8011b9c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011ba0:	f7fc bfcf 	b.w	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 8011ba4:	00000000 	.word	0x00000000
 8011ba8:	3e4cccce 	.word	0x3e4cccce
 8011bac:	3eaaaaab 	.word	0x3eaaaaab
 8011bb0:	3e999998 	.word	0x3e999998
 8011bb4:	3f99999a 	.word	0x3f99999a
 8011bb8:	3dccccd0 	.word	0x3dccccd0
 8011bbc:	3f8ccccd 	.word	0x3f8ccccd
 8011bc0:	3e4ccccd 	.word	0x3e4ccccd
 8011bc4:	3d088889 	.word	0x3d088889
 8011bc8:	3d0d3dcb 	.word	0x3d0d3dcb
 8011bcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd8:	d55b      	bpl.n	8011c92 <kalman_3gyro.constprop.0+0x503a>
 8011bda:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011bb8 <kalman_3gyro.constprop.0+0x4f60>
 8011bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011be2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011be6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011bea:	eef0 5a66 	vmov.f32	s11, s13
 8011bee:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011bf2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bfa:	eeb0 7a65 	vmov.f32	s14, s11
 8011bfe:	db5b      	blt.n	8011cb8 <kalman_3gyro.constprop.0+0x5060>
 8011c00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c0c:	d55b      	bpl.n	8011cc6 <kalman_3gyro.constprop.0+0x506e>
 8011c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c12:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011c16:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011bb0 <kalman_3gyro.constprop.0+0x4f58>
 8011c1a:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011bb4 <kalman_3gyro.constprop.0+0x4f5c>
 8011c1e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011c22:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011c26:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2e:	db5b      	blt.n	8011ce8 <kalman_3gyro.constprop.0+0x5090>
 8011c30:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c3c:	d55b      	bpl.n	8011cf6 <kalman_3gyro.constprop.0+0x509e>
 8011c3e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c46:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011c4a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011c4e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011c52:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011c56:	f7ff bb7e 	b.w	8011356 <kalman_3gyro.constprop.0+0x46fe>
 8011c5a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011c5e:	2b27      	cmp	r3, #39	; 0x27
 8011c60:	f200 80c3 	bhi.w	8011dea <kalman_3gyro.constprop.0+0x5192>
 8011c64:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011c68:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011c6c:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011c70:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011c74:	2201      	movs	r2, #1
 8011c76:	4413      	add	r3, r2
 8011c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c7c:	bf14      	ite	ne
 8011c7e:	b29b      	uxthne	r3, r3
 8011c80:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011c84:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011c88:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011c8c:	9b01      	ldr	r3, [sp, #4]
 8011c8e:	f7fd bb26 	b.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 8011c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011c96:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c9e:	d5af      	bpl.n	8011c00 <kalman_3gyro.constprop.0+0x4fa8>
 8011ca0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011ca4:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011bb8 <kalman_3gyro.constprop.0+0x4f60>
 8011ca8:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8011bbc <kalman_3gyro.constprop.0+0x4f64>
 8011cac:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011cb0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011cb4:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011cb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011cbc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc4:	dbad      	blt.n	8011c22 <kalman_3gyro.constprop.0+0x4fca>
 8011cc6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cd2:	d5ad      	bpl.n	8011c30 <kalman_3gyro.constprop.0+0x4fd8>
 8011cd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011cd8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011cdc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011ce0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8011ce4:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011ce8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8011cec:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cf4:	dbad      	blt.n	8011c52 <kalman_3gyro.constprop.0+0x4ffa>
 8011cf6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011cfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cfe:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011bc0 <kalman_3gyro.constprop.0+0x4f68>
 8011d02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011d06:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011d0a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011d0e:	e7a0      	b.n	8011c52 <kalman_3gyro.constprop.0+0x4ffa>
 8011d10:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011d14:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011d18:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011d1c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011d20:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011d24:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011d28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d2c:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011d30:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011d34:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011d38:	f7fc bf03 	b.w	800eb42 <kalman_3gyro.constprop.0+0x1eea>
 8011d3c:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011bc4 <kalman_3gyro.constprop.0+0x4f6c>
 8011d40:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011bc8 <kalman_3gyro.constprop.0+0x4f70>
 8011d44:	ac33      	add	r4, sp, #204	; 0xcc
 8011d46:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4a:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011d4e:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011d52:	eef0 7a66 	vmov.f32	s15, s13
 8011d56:	3001      	adds	r0, #1
 8011d58:	461a      	mov	r2, r3
 8011d5a:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011d5e:	320c      	adds	r2, #12
 8011d60:	428a      	cmp	r2, r1
 8011d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d66:	d1f8      	bne.n	8011d5a <kalman_3gyro.constprop.0+0x5102>
 8011d68:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011d6c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011d70:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011d74:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011d78:	330c      	adds	r3, #12
 8011d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d7e:	428b      	cmp	r3, r1
 8011d80:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011d84:	d1f6      	bne.n	8011d74 <kalman_3gyro.constprop.0+0x511c>
 8011d86:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011d8a:	2802      	cmp	r0, #2
 8011d8c:	f103 0104 	add.w	r1, r3, #4
 8011d90:	ece4 6a01 	vstmia	r4!, {s13}
 8011d94:	d1d9      	bne.n	8011d4a <kalman_3gyro.constprop.0+0x50f2>
 8011d96:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011d9a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011d9e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011da2:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011da6:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011daa:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011db2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011dba:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011dbe:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dc6:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011dca:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011dce:	f57d aa62 	bpl.w	800f296 <kalman_3gyro.constprop.0+0x263e>
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	9b01      	ldr	r3, [sp, #4]
 8011dd6:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011dda:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011dde:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011de2:	f88b 2001 	strb.w	r2, [fp, #1]
 8011de6:	f7fd ba7a 	b.w	800f2de <kalman_3gyro.constprop.0+0x2686>
 8011dea:	9b08      	ldr	r3, [sp, #32]
 8011dec:	6999      	ldr	r1, [r3, #24]
 8011dee:	69da      	ldr	r2, [r3, #28]
 8011df0:	6a1b      	ldr	r3, [r3, #32]
 8011df2:	9181      	str	r1, [sp, #516]	; 0x204
 8011df4:	9282      	str	r2, [sp, #520]	; 0x208
 8011df6:	9383      	str	r3, [sp, #524]	; 0x20c
 8011df8:	e73a      	b.n	8011c70 <kalman_3gyro.constprop.0+0x5018>
 8011dfa:	bf00      	nop
 8011dfc:	0000      	movs	r0, r0
	...

08011e00 <iNemoEngine_API_Update>:
 8011e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e04:	ed2d 8b0c 	vpush	{d8-d13}
 8011e08:	4604      	mov	r4, r0
 8011e0a:	b0c1      	sub	sp, #260	; 0x104
 8011e0c:	460d      	mov	r5, r1
 8011e0e:	4617      	mov	r7, r2
 8011e10:	eeb0 8a40 	vmov.f32	s16, s0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f000 8253 	beq.w	80122c0 <iNemoEngine_API_Update+0x4c0>
 8011e1a:	461e      	mov	r6, r3
 8011e1c:	463b      	mov	r3, r7
 8011e1e:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011e22:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011e26:	6859      	ldr	r1, [r3, #4]
 8011e28:	689a      	ldr	r2, [r3, #8]
 8011e2a:	ab33      	add	r3, sp, #204	; 0xcc
 8011e2c:	c307      	stmia	r3!, {r0, r1, r2}
 8011e2e:	6879      	ldr	r1, [r7, #4]
 8011e30:	68ba      	ldr	r2, [r7, #8]
 8011e32:	6838      	ldr	r0, [r7, #0]
 8011e34:	ab30      	add	r3, sp, #192	; 0xc0
 8011e36:	c307      	stmia	r3!, {r0, r1, r2}
 8011e38:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011e3c:	6879      	ldr	r1, [r7, #4]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	ab36      	add	r3, sp, #216	; 0xd8
 8011e42:	c307      	stmia	r3!, {r0, r1, r2}
 8011e44:	f1bc 0f00 	cmp.w	ip, #0
 8011e48:	d005      	beq.n	8011e56 <iNemoEngine_API_Update+0x56>
 8011e4a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011e4e:	7923      	ldrb	r3, [r4, #4]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	f080 829b 	bcs.w	801238c <iNemoEngine_API_Update+0x58c>
 8011e56:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011e5a:	f10d 0a14 	add.w	sl, sp, #20
 8011e5e:	2300      	movs	r3, #0
 8011e60:	4649      	mov	r1, r9
 8011e62:	4650      	mov	r0, sl
 8011e64:	aa33      	add	r2, sp, #204	; 0xcc
 8011e66:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011e6a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011e6e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011e72:	f7f9 fb63 	bl	800b53c <rotVect>
 8011e76:	aa36      	add	r2, sp, #216	; 0xd8
 8011e78:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011e7c:	a808      	add	r0, sp, #32
 8011e7e:	f7f9 fb5d 	bl	800b53c <rotVect>
 8011e82:	aa30      	add	r2, sp, #192	; 0xc0
 8011e84:	4640      	mov	r0, r8
 8011e86:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011e8a:	f7f9 fb57 	bl	800b53c <rotVect>
 8011e8e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011e92:	b923      	cbnz	r3, 8011e9e <iNemoEngine_API_Update+0x9e>
 8011e94:	4b8c      	ldr	r3, [pc, #560]	; (80120c8 <iNemoEngine_API_Update+0x2c8>)
 8011e96:	930c      	str	r3, [sp, #48]	; 0x30
 8011e98:	2200      	movs	r2, #0
 8011e9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8011e9c:	930d      	str	r3, [sp, #52]	; 0x34
 8011e9e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011ea2:	2f09      	cmp	r7, #9
 8011ea4:	d851      	bhi.n	8011f4a <iNemoEngine_API_Update+0x14a>
 8011ea6:	ed9d ba06 	vldr	s22, [sp, #24]
 8011eaa:	eddd ba05 	vldr	s23, [sp, #20]
 8011eae:	eddd aa07 	vldr	s21, [sp, #28]
 8011eb2:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011eb6:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011eba:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011ebe:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011ec2:	ee17 0a90 	vmov	r0, s15
 8011ec6:	f7ee fb3f 	bl	8000548 <__aeabi_f2d>
 8011eca:	ec41 0b10 	vmov	d0, r0, r1
 8011ece:	f003 ff5d 	bl	8015d8c <sqrt>
 8011ed2:	ec51 0b10 	vmov	r0, r1, d0
 8011ed6:	f7ee fe67 	bl	8000ba8 <__aeabi_d2f>
 8011eda:	ee07 0a90 	vmov	s15, r0
 8011ede:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011ee2:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011ee6:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011eea:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011eee:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011ef2:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011ef6:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011efa:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011efe:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011f02:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011f06:	ee17 0a90 	vmov	r0, s15
 8011f0a:	edcd ba05 	vstr	s23, [sp, #20]
 8011f0e:	ed8d ba06 	vstr	s22, [sp, #24]
 8011f12:	edcd aa07 	vstr	s21, [sp, #28]
 8011f16:	f7ee fb17 	bl	8000548 <__aeabi_f2d>
 8011f1a:	ec41 0b10 	vmov	d0, r0, r1
 8011f1e:	f003 ff35 	bl	8015d8c <sqrt>
 8011f22:	ec51 0b10 	vmov	r0, r1, d0
 8011f26:	f7ee fe3f 	bl	8000ba8 <__aeabi_d2f>
 8011f2a:	ee07 0a90 	vmov	s15, r0
 8011f2e:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011f32:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011f36:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011f3a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011f3e:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011f42:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011f46:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011f4a:	7923      	ldrb	r3, [r4, #4]
 8011f4c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011f50:	429a      	cmp	r2, r3
 8011f52:	f080 80dd 	bcs.w	8012110 <iNemoEngine_API_Update+0x310>
 8011f56:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011f5a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011f5e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011f62:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011f66:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011f6a:	3701      	adds	r7, #1
 8011f6c:	aa33      	add	r2, sp, #204	; 0xcc
 8011f6e:	4649      	mov	r1, r9
 8011f70:	4640      	mov	r0, r8
 8011f72:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011f76:	9303      	str	r3, [sp, #12]
 8011f78:	f7f9 fae0 	bl	800b53c <rotVect>
 8011f7c:	9b03      	ldr	r3, [sp, #12]
 8011f7e:	f8db 1000 	ldr.w	r1, [fp]
 8011f82:	6818      	ldr	r0, [r3, #0]
 8011f84:	f8da 2000 	ldr.w	r2, [sl]
 8011f88:	6833      	ldr	r3, [r6, #0]
 8011f8a:	61ab      	str	r3, [r5, #24]
 8011f8c:	60e8      	str	r0, [r5, #12]
 8011f8e:	6129      	str	r1, [r5, #16]
 8011f90:	616a      	str	r2, [r5, #20]
 8011f92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011f96:	9301      	str	r3, [sp, #4]
 8011f98:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011f9c:	4641      	mov	r1, r8
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	462a      	mov	r2, r5
 8011fa2:	f105 031c 	add.w	r3, r5, #28
 8011fa6:	f105 000c 	add.w	r0, r5, #12
 8011faa:	f7fa fd85 	bl	800cab8 <output_update>
 8011fae:	ed95 8a00 	vldr	s16, [r5]
 8011fb2:	edd5 9a01 	vldr	s19, [r5, #4]
 8011fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8011fba:	f003 fe7b 	bl	8015cb4 <sinf>
 8011fbe:	eddf 7a43 	vldr	s15, [pc, #268]	; 80120cc <iNemoEngine_API_Update+0x2cc>
 8011fc2:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80120d0 <iNemoEngine_API_Update+0x2d0>
 8011fc6:	ee60 8a00 	vmul.f32	s17, s0, s0
 8011fca:	eef0 6ae9 	vabs.f32	s13, s19
 8011fce:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8011fd2:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fda:	eef0 8a67 	vmov.f32	s17, s15
 8011fde:	d56e      	bpl.n	80120be <iNemoEngine_API_Update+0x2be>
 8011fe0:	eeb0 0a69 	vmov.f32	s0, s19
 8011fe4:	f003 fea8 	bl	8015d38 <tanf>
 8011fe8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011fec:	eea0 9a28 	vfma.f32	s18, s0, s17
 8011ff0:	eef1 7ac9 	vsqrt.f32	s15, s18
 8011ff4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80120d4 <iNemoEngine_API_Update+0x2d4>
 8011ff8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80120e8 <iNemoEngine_API_Update+0x2e8>
 8011ffc:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8012000:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012004:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801200c:	bf88      	it	hi
 801200e:	eef0 7a66 	vmovhi.f32	s15, s13
 8012012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201a:	bfb8      	it	lt
 801201c:	eef0 7a47 	vmovlt.f32	s15, s14
 8012020:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8012024:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012028:	4c2b      	ldr	r4, [pc, #172]	; (80120d8 <iNemoEngine_API_Update+0x2d8>)
 801202a:	bba3      	cbnz	r3, 8012096 <iNemoEngine_API_Update+0x296>
 801202c:	6820      	ldr	r0, [r4, #0]
 801202e:	edd5 0a08 	vldr	s1, [r5, #32]
 8012032:	ed95 0a07 	vldr	s0, [r5, #28]
 8012036:	edd5 9a03 	vldr	s19, [r5, #12]
 801203a:	ed95 aa04 	vldr	s20, [r5, #16]
 801203e:	ed95 9a05 	vldr	s18, [r5, #20]
 8012042:	edd5 8a06 	vldr	s17, [r5, #24]
 8012046:	f7f9 fb4b 	bl	800b6e0 <findDirection>
 801204a:	6020      	str	r0, [r4, #0]
 801204c:	2805      	cmp	r0, #5
 801204e:	f200 833d 	bhi.w	80126cc <iNemoEngine_API_Update+0x8cc>
 8012052:	e8df f010 	tbh	[pc, r0, lsl #1]
 8012056:	000a      	.short	0x000a
 8012058:	00060137 	.word	0x00060137
 801205c:	00060169 	.word	0x00060169
 8012060:	000a      	.short	0x000a
 8012062:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80120dc <iNemoEngine_API_Update+0x2dc>
 8012066:	ee38 8a27 	vadd.f32	s16, s16, s15
 801206a:	eddf 7a28 	vldr	s15, [pc, #160]	; 801210c <iNemoEngine_API_Update+0x30c>
 801206e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012076:	bfa8      	it	ge
 8012078:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801207c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012084:	f100 8111 	bmi.w	80122aa <iNemoEngine_API_Update+0x4aa>
 8012088:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801208c:	b041      	add	sp, #260	; 0x104
 801208e:	ecbd 8b0c 	vpop	{d8-d13}
 8012092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012096:	ed95 9a05 	vldr	s18, [r5, #20]
 801209a:	6820      	ldr	r0, [r4, #0]
 801209c:	edd5 0a07 	vldr	s1, [r5, #28]
 80120a0:	ed95 0a08 	vldr	s0, [r5, #32]
 80120a4:	edd5 9a04 	vldr	s19, [r5, #16]
 80120a8:	ed95 aa03 	vldr	s20, [r5, #12]
 80120ac:	edd5 8a06 	vldr	s17, [r5, #24]
 80120b0:	eeb1 1a41 	vneg.f32	s2, s2
 80120b4:	eeb1 9a49 	vneg.f32	s18, s18
 80120b8:	f7f9 fb12 	bl	800b6e0 <findDirection>
 80120bc:	e7c5      	b.n	801204a <iNemoEngine_API_Update+0x24a>
 80120be:	eddf 7a08 	vldr	s15, [pc, #32]	; 80120e0 <iNemoEngine_API_Update+0x2e0>
 80120c2:	eea8 9aa7 	vfma.f32	s18, s17, s15
 80120c6:	e793      	b.n	8011ff0 <iNemoEngine_API_Update+0x1f0>
 80120c8:	3f333333 	.word	0x3f333333
 80120cc:	00000000 	.word	0x00000000
 80120d0:	3fbc430e 	.word	0x3fbc430e
 80120d4:	40490fdb 	.word	0x40490fdb
 80120d8:	200002e0 	.word	0x200002e0
 80120dc:	43340000 	.word	0x43340000
 80120e0:	42c6ab07 	.word	0x42c6ab07
 80120e4:	3c03126f 	.word	0x3c03126f
 80120e8:	3c8efa35 	.word	0x3c8efa35
 80120ec:	3e4ccccd 	.word	0x3e4ccccd
 80120f0:	3fb50481 	.word	0x3fb50481
 80120f4:	3ed93dd9 	.word	0x3ed93dd9
 80120f8:	3b656042 	.word	0x3b656042
 80120fc:	42c80000 	.word	0x42c80000
 8012100:	3a83126f 	.word	0x3a83126f
 8012104:	3d4ccccd 	.word	0x3d4ccccd
 8012108:	3f333333 	.word	0x3f333333
 801210c:	43b40000 	.word	0x43b40000
 8012110:	ee07 3a90 	vmov	s15, r3
 8012114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012118:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 80120e4 <iNemoEngine_API_Update+0x2e4>
 801211c:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 80120e8 <iNemoEngine_API_Update+0x2e8>
 8012120:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 80120f8 <iNemoEngine_API_Update+0x2f8>
 8012124:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80120f4 <iNemoEngine_API_Update+0x2f4>
 8012128:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 80120f0 <iNemoEngine_API_Update+0x2f0>
 801212c:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80120ec <iNemoEngine_API_Update+0x2ec>
 8012130:	ee27 1a88 	vmul.f32	s2, s15, s16
 8012134:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8012138:	ee85 5a81 	vdiv.f32	s10, s11, s2
 801213c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8012140:	2700      	movs	r7, #0
 8012142:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8012146:	f04f 0c00 	mov.w	ip, #0
 801214a:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 801214e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8012152:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8012156:	edd3 5a00 	vldr	s11, [r3]
 801215a:	f8c3 c000 	str.w	ip, [r3]
 801215e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8012162:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8012166:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 801216a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801216e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8012172:	edd7 4a00 	vldr	s9, [r7]
 8012176:	f8c7 c000 	str.w	ip, [r7]
 801217a:	ed93 5a00 	vldr	s10, [r3]
 801217e:	f8c3 c000 	str.w	ip, [r3]
 8012182:	7963      	ldrb	r3, [r4, #5]
 8012184:	ee64 4a84 	vmul.f32	s9, s9, s8
 8012188:	ee25 5a04 	vmul.f32	s10, s10, s8
 801218c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8012190:	2b01      	cmp	r3, #1
 8012192:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8012196:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801219a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801219e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80121a2:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 80121a6:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 80121aa:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 80121ae:	f000 812e 	beq.w	801240e <iNemoEngine_API_Update+0x60e>
 80121b2:	2b02      	cmp	r3, #2
 80121b4:	f000 8122 	beq.w	80123fc <iNemoEngine_API_Update+0x5fc>
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f000 80ef 	beq.w	801239c <iNemoEngine_API_Update+0x59c>
 80121be:	edd4 0a05 	vldr	s1, [r4, #20]
 80121c2:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 80120fc <iNemoEngine_API_Update+0x2fc>
 80121c6:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8012100 <iNemoEngine_API_Update+0x300>
 80121ca:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80121ce:	ee60 0a85 	vmul.f32	s1, s1, s10
 80121d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80121d6:	8863      	ldrh	r3, [r4, #2]
 80121d8:	1e5a      	subs	r2, r3, #1
 80121da:	2a12      	cmp	r2, #18
 80121dc:	f200 80e7 	bhi.w	80123ae <iNemoEngine_API_Update+0x5ae>
 80121e0:	3301      	adds	r3, #1
 80121e2:	b21a      	sxth	r2, r3
 80121e4:	b29b      	uxth	r3, r3
 80121e6:	2b03      	cmp	r3, #3
 80121e8:	8062      	strh	r2, [r4, #2]
 80121ea:	f240 8115 	bls.w	8012418 <iNemoEngine_API_Update+0x618>
 80121ee:	ee05 2a90 	vmov	s11, r2
 80121f2:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8012104 <iNemoEngine_API_Update+0x304>
 80121f6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80121fa:	ee65 5a85 	vmul.f32	s11, s11, s10
 80121fe:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8012202:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8012206:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 801220a:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8012108 <iNemoEngine_API_Update+0x308>
 801220e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8012212:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012216:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801221a:	ee26 6a25 	vmul.f32	s12, s12, s11
 801221e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012222:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8012226:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801222a:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 801222e:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8012232:	aa1a      	add	r2, sp, #104	; 0x68
 8012234:	af16      	add	r7, sp, #88	; 0x58
 8012236:	e9cd 7200 	strd	r7, r2, [sp]
 801223a:	ab12      	add	r3, sp, #72	; 0x48
 801223c:	aa1e      	add	r2, sp, #120	; 0x78
 801223e:	4641      	mov	r1, r8
 8012240:	4620      	mov	r0, r4
 8012242:	f7fa fd09 	bl	800cc58 <kalman_3gyro.constprop.0>
 8012246:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012248:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 801224c:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8012250:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8012254:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8012258:	f8c7 a000 	str.w	sl, [r7]
 801225c:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8012260:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8012264:	f8c7 e000 	str.w	lr, [r7]
 8012268:	f604 1748 	addw	r7, r4, #2376	; 0x948
 801226c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8012270:	f8c7 c000 	str.w	ip, [r7]
 8012274:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8012278:	6030      	str	r0, [r6, #0]
 801227a:	60f3      	str	r3, [r6, #12]
 801227c:	6071      	str	r1, [r6, #4]
 801227e:	60b2      	str	r2, [r6, #8]
 8012280:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8012284:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8012288:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801228c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801228e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8012292:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8012296:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801229a:	edc3 7a00 	vstr	s15, [r3]
 801229e:	f8cb e000 	str.w	lr, [fp]
 80122a2:	f8ca c000 	str.w	ip, [sl]
 80122a6:	6030      	str	r0, [r6, #0]
 80122a8:	e65f      	b.n	8011f6a <iNemoEngine_API_Update+0x16a>
 80122aa:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 801210c <iNemoEngine_API_Update+0x30c>
 80122ae:	ee38 8a27 	vadd.f32	s16, s16, s15
 80122b2:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 80122b6:	b041      	add	sp, #260	; 0x104
 80122b8:	ecbd 8b0c 	vpop	{d8-d13}
 80122bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c0:	ae0e      	add	r6, sp, #56	; 0x38
 80122c2:	e5ab      	b.n	8011e1c <iNemoEngine_API_Update+0x1c>
 80122c4:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80122c8:	ee69 8a28 	vmul.f32	s17, s18, s17
 80122cc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80122d0:	eee9 8a8a 	vfma.f32	s17, s19, s20
 80122d4:	eeea 7a4a 	vfms.f32	s15, s20, s20
 80122d8:	eee9 7a49 	vfms.f32	s15, s18, s18
 80122dc:	ee17 0a90 	vmov	r0, s15
 80122e0:	f7ee f932 	bl	8000548 <__aeabi_f2d>
 80122e4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80122e8:	4602      	mov	r2, r0
 80122ea:	460b      	mov	r3, r1
 80122ec:	ee17 0a90 	vmov	r0, s15
 80122f0:	ec43 2b18 	vmov	d8, r2, r3
 80122f4:	f7ee f928 	bl	8000548 <__aeabi_f2d>
 80122f8:	eeb0 1a48 	vmov.f32	s2, s16
 80122fc:	eef0 1a68 	vmov.f32	s3, s17
 8012300:	ec41 0b10 	vmov	d0, r0, r1
 8012304:	f003 fd40 	bl	8015d88 <atan2>
 8012308:	a3f3      	add	r3, pc, #972	; (adr r3, 80126d8 <iNemoEngine_API_Update+0x8d8>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	ec51 0b10 	vmov	r0, r1, d0
 8012312:	f7ee f971 	bl	80005f8 <__aeabi_dmul>
 8012316:	4bf2      	ldr	r3, [pc, #968]	; (80126e0 <iNemoEngine_API_Update+0x8e0>)
 8012318:	2200      	movs	r2, #0
 801231a:	f7ed ffb5 	bl	8000288 <__aeabi_dsub>
 801231e:	f7ee fc43 	bl	8000ba8 <__aeabi_d2f>
 8012322:	ee08 0a10 	vmov	s16, r0
 8012326:	e6a0      	b.n	801206a <iNemoEngine_API_Update+0x26a>
 8012328:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801232c:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012330:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8012334:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012338:	eeea 7a4a 	vfms.f32	s15, s20, s20
 801233c:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012340:	ee17 0a90 	vmov	r0, s15
 8012344:	f7ee f900 	bl	8000548 <__aeabi_f2d>
 8012348:	ee78 7aa8 	vadd.f32	s15, s17, s17
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	ee17 0a90 	vmov	r0, s15
 8012354:	ec43 2b18 	vmov	d8, r2, r3
 8012358:	f7ee f8f6 	bl	8000548 <__aeabi_f2d>
 801235c:	eeb0 1a48 	vmov.f32	s2, s16
 8012360:	eef0 1a68 	vmov.f32	s3, s17
 8012364:	ec41 0b10 	vmov	d0, r0, r1
 8012368:	f003 fd0e 	bl	8015d88 <atan2>
 801236c:	a3da      	add	r3, pc, #872	; (adr r3, 80126d8 <iNemoEngine_API_Update+0x8d8>)
 801236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012372:	ec51 0b10 	vmov	r0, r1, d0
 8012376:	f7ee f93f 	bl	80005f8 <__aeabi_dmul>
 801237a:	4bd9      	ldr	r3, [pc, #868]	; (80126e0 <iNemoEngine_API_Update+0x8e0>)
 801237c:	2200      	movs	r2, #0
 801237e:	f7ed ff85 	bl	800028c <__adddf3>
 8012382:	f7ee fc11 	bl	8000ba8 <__aeabi_d2f>
 8012386:	ee08 0a10 	vmov	s16, r0
 801238a:	e66e      	b.n	801206a <iNemoEngine_API_Update+0x26a>
 801238c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8012390:	2b00      	cmp	r3, #0
 8012392:	dd44      	ble.n	801241e <iNemoEngine_API_Update+0x61e>
 8012394:	3b01      	subs	r3, #1
 8012396:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 801239a:	e55c      	b.n	8011e56 <iNemoEngine_API_Update+0x56>
 801239c:	8863      	ldrh	r3, [r4, #2]
 801239e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 80126e4 <iNemoEngine_API_Update+0x8e4>
 80123a2:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80126e8 <iNemoEngine_API_Update+0x8e8>
 80123a6:	1e5a      	subs	r2, r3, #1
 80123a8:	2a12      	cmp	r2, #18
 80123aa:	f67f af19 	bls.w	80121e0 <iNemoEngine_API_Update+0x3e0>
 80123ae:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 80123b2:	eddf 2ace 	vldr	s5, [pc, #824]	; 80126ec <iNemoEngine_API_Update+0x8ec>
 80123b6:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 80123ba:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80123be:	ee34 4a22 	vadd.f32	s8, s8, s5
 80123c2:	ee64 7aa6 	vmul.f32	s15, s9, s13
 80123c6:	eec3 4a84 	vdiv.f32	s9, s7, s8
 80123ca:	2300      	movs	r3, #0
 80123cc:	8063      	strh	r3, [r4, #2]
 80123ce:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 80123d2:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 80123d6:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80126f0 <iNemoEngine_API_Update+0x8f0>
 80123da:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 80123de:	ee65 6a26 	vmul.f32	s13, s10, s13
 80123e2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80123e6:	ee27 7a03 	vmul.f32	s14, s14, s6
 80123ea:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 80123ee:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80123f2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80123f6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 80123fa:	e71a      	b.n	8012232 <iNemoEngine_API_Update+0x432>
 80123fc:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8012400:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012404:	edd4 0a05 	vldr	s1, [r4, #20]
 8012408:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80126f4 <iNemoEngine_API_Update+0x8f4>
 801240c:	e6e3      	b.n	80121d6 <iNemoEngine_API_Update+0x3d6>
 801240e:	edd4 0a05 	vldr	s1, [r4, #20]
 8012412:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80126f8 <iNemoEngine_API_Update+0x8f8>
 8012416:	e6de      	b.n	80121d6 <iNemoEngine_API_Update+0x3d6>
 8012418:	eddf 5ab8 	vldr	s11, [pc, #736]	; 80126fc <iNemoEngine_API_Update+0x8fc>
 801241c:	e6ef      	b.n	80121fe <iNemoEngine_API_Update+0x3fe>
 801241e:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8012422:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8012426:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 801242a:	ed97 5a00 	vldr	s10, [r7]
 801242e:	ed92 da00 	vldr	s26, [r2]
 8012432:	ed93 6a00 	vldr	s12, [r3]
 8012436:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80126e4 <iNemoEngine_API_Update+0x8e4>
 801243a:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 801243e:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8012442:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8012446:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 801244a:	ed91 3a00 	vldr	s6, [r1]
 801244e:	ed92 1a00 	vldr	s2, [r2]
 8012452:	ed97 7a00 	vldr	s14, [r7]
 8012456:	edd3 3a00 	vldr	s7, [r3]
 801245a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 801245e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8012462:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8012466:	ed91 ba00 	vldr	s22, [r1]
 801246a:	edd0 6a00 	vldr	s13, [r0]
 801246e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8012472:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8012476:	edd1 aa00 	vldr	s21, [r1]
 801247a:	ed92 2a00 	vldr	s4, [r2]
 801247e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8012482:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8012486:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 801248a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 801248e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8012492:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8012496:	edd0 7a00 	vldr	s15, [r0]
 801249a:	edd2 1a00 	vldr	s3, [r2]
 801249e:	ed93 ca00 	vldr	s24, [r3]
 80124a2:	eed5 6a04 	vfnms.f32	s13, s10, s8
 80124a6:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 80124aa:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 80124ae:	ed91 5a00 	vldr	s10, [r1]
 80124b2:	edd0 5a00 	vldr	s11, [r0]
 80124b6:	edd7 9a00 	vldr	s19, [r7]
 80124ba:	f204 6024 	addw	r0, r4, #1572	; 0x624
 80124be:	eed5 1a04 	vfnms.f32	s3, s10, s8
 80124c2:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 80124c6:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 80124ca:	edd0 2a00 	vldr	s5, [r0]
 80124ce:	edd3 0a00 	vldr	s1, [r3]
 80124d2:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 80124d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80124da:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80124de:	edd7 7a00 	vldr	s15, [r7]
 80124e2:	edd0 5a00 	vldr	s11, [r0]
 80124e6:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 80124ea:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 80124ee:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80124f2:	ed93 6a00 	vldr	s12, [r3]
 80124f6:	edda ba00 	vldr	s23, [sl]
 80124fa:	ed99 5a00 	vldr	s10, [r9]
 80124fe:	ee76 6a83 	vadd.f32	s13, s13, s6
 8012502:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 8012506:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 801250a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 801250e:	eed7 5a84 	vfnms.f32	s11, s15, s8
 8012512:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 8012516:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 801251a:	eddc 4a00 	vldr	s9, [ip]
 801251e:	edd3 7a00 	vldr	s15, [r3]
 8012522:	ed98 1a00 	vldr	s2, [r8]
 8012526:	edde 8a00 	vldr	s17, [lr]
 801252a:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 801252e:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 8012532:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 8012536:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 801253a:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 801253e:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 8012542:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 8012546:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 801254a:	ed9c aa00 	vldr	s20, [ip]
 801254e:	eeed 6a03 	vfma.f32	s13, s26, s6
 8012552:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8012556:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 801255a:	ed92 da00 	vldr	s26, [r2]
 801255e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8012562:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8012566:	ed91 ba00 	vldr	s22, [r1]
 801256a:	eef0 ca61 	vmov.f32	s25, s3
 801256e:	eddb 1a00 	vldr	s3, [fp]
 8012572:	edd3 ba00 	vldr	s23, [r3]
 8012576:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 801257a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 801257e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8012582:	1c53      	adds	r3, r2, #1
 8012584:	eeea 3a83 	vfma.f32	s7, s21, s6
 8012588:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 801258c:	edd8 aa00 	vldr	s21, [r8]
 8012590:	eee6 1a03 	vfma.f32	s3, s12, s6
 8012594:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8012598:	ed9e 6a00 	vldr	s12, [lr]
 801259c:	edd7 aa00 	vldr	s21, [r7]
 80125a0:	eee6 7a03 	vfma.f32	s15, s12, s6
 80125a4:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 80125a8:	ed9c 6a00 	vldr	s12, [ip]
 80125ac:	eedc 4a04 	vfnms.f32	s9, s24, s8
 80125b0:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 80125b4:	ee75 5a8d 	vadd.f32	s11, s11, s26
 80125b8:	ee2a 4a00 	vmul.f32	s8, s20, s0
 80125bc:	ee22 2a00 	vmul.f32	s4, s4, s0
 80125c0:	ee62 2a80 	vmul.f32	s5, s5, s0
 80125c4:	eeeb 5a03 	vfma.f32	s11, s22, s6
 80125c8:	ed90 0a00 	vldr	s0, [r0]
 80125cc:	ee64 7a27 	vmul.f32	s15, s8, s15
 80125d0:	ee36 6a00 	vadd.f32	s12, s12, s0
 80125d4:	ee74 4aa9 	vadd.f32	s9, s9, s19
 80125d8:	ed91 0a00 	vldr	s0, [r1]
 80125dc:	ee35 5a28 	vadd.f32	s10, s10, s17
 80125e0:	ee66 6a82 	vmul.f32	s13, s13, s4
 80125e4:	ee22 7a87 	vmul.f32	s14, s5, s14
 80125e8:	ee64 5a25 	vmul.f32	s11, s8, s11
 80125ec:	eee0 4a83 	vfma.f32	s9, s1, s6
 80125f0:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80125f4:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 80125f8:	eea1 5a03 	vfma.f32	s10, s2, s6
 80125fc:	eea0 6a03 	vfma.f32	s12, s0, s6
 8012600:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012604:	ee63 3a82 	vmul.f32	s7, s7, s4
 8012608:	ee27 7a07 	vmul.f32	s14, s14, s14
 801260c:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8012610:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012614:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8012618:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801261c:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8012620:	ee24 6a06 	vmul.f32	s12, s8, s12
 8012624:	ee62 4a24 	vmul.f32	s9, s4, s9
 8012628:	ee22 5a85 	vmul.f32	s10, s5, s10
 801262c:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8012630:	eea5 7a05 	vfma.f32	s14, s10, s10
 8012634:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012638:	eeb1 6ae6 	vsqrt.f32	s12, s13
 801263c:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012640:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012644:	ee07 3a90 	vmov	s15, r3
 8012648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801264c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012650:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8012654:	b21b      	sxth	r3, r3
 8012656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801265a:	ee07 2a90 	vmov	s15, r2
 801265e:	ed90 4a00 	vldr	s8, [r0]
 8012662:	edd1 4a00 	vldr	s9, [r1]
 8012666:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801266a:	edd7 7a00 	vldr	s15, [r7]
 801266e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8012672:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8012676:	eea5 7aa4 	vfma.f32	s14, s11, s9
 801267a:	ee66 7a05 	vmul.f32	s15, s12, s10
 801267e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8012682:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012686:	edc7 7a00 	vstr	s15, [r7]
 801268a:	edc0 6a00 	vstr	s13, [r0]
 801268e:	ed81 7a00 	vstr	s14, [r1]
 8012692:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8012696:	f47f abde 	bne.w	8011e56 <iNemoEngine_API_Update+0x56>
 801269a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801269e:	ee66 6a86 	vmul.f32	s13, s13, s12
 80126a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80126a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80126aa:	2300      	movs	r3, #0
 80126ac:	2200      	movs	r2, #0
 80126ae:	edc4 6a07 	vstr	s13, [r4, #28]
 80126b2:	ed84 7a08 	vstr	s14, [r4, #32]
 80126b6:	edc4 7a06 	vstr	s15, [r4, #24]
 80126ba:	603b      	str	r3, [r7, #0]
 80126bc:	6003      	str	r3, [r0, #0]
 80126be:	600b      	str	r3, [r1, #0]
 80126c0:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 80126c4:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 80126c8:	f7ff bbc5 	b.w	8011e56 <iNemoEngine_API_Update+0x56>
 80126cc:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012700 <iNemoEngine_API_Update+0x900>
 80126d0:	e4da      	b.n	8012088 <iNemoEngine_API_Update+0x288>
 80126d2:	bf00      	nop
 80126d4:	f3af 8000 	nop.w
 80126d8:	20000000 	.word	0x20000000
 80126dc:	404ca5dc 	.word	0x404ca5dc
 80126e0:	40568000 	.word	0x40568000
 80126e4:	3dcccccd 	.word	0x3dcccccd
 80126e8:	3a83126f 	.word	0x3a83126f
 80126ec:	358637bd 	.word	0x358637bd
 80126f0:	3f333333 	.word	0x3f333333
 80126f4:	3727c5ac 	.word	0x3727c5ac
 80126f8:	3ac49ba6 	.word	0x3ac49ba6
 80126fc:	3e4ccccd 	.word	0x3e4ccccd
 8012700:	00000000 	.word	0x00000000

08012704 <MEMS_getSensorData_I16>:
 8012704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012708:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 801270c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012710:	68c5      	ldr	r5, [r0, #12]
 8012712:	4596      	cmp	lr, r2
 8012714:	fa1f f882 	uxth.w	r8, r2
 8012718:	d94d      	bls.n	80127b6 <MEMS_getSensorData_I16+0xb2>
 801271a:	f10e 33ff 	add.w	r3, lr, #4294967295
 801271e:	fb04 5313 	mls	r3, r4, r3, r5
 8012722:	ebae 0c02 	sub.w	ip, lr, r2
 8012726:	f8a1 8004 	strh.w	r8, [r1, #4]
 801272a:	600b      	str	r3, [r1, #0]
 801272c:	fa5f fc8c 	uxtb.w	ip, ip
 8012730:	4647      	mov	r7, r8
 8012732:	f1b8 0f00 	cmp.w	r8, #0
 8012736:	d017      	beq.n	8012768 <MEMS_getSensorData_I16+0x64>
 8012738:	688e      	ldr	r6, [r1, #8]
 801273a:	6905      	ldr	r5, [r0, #16]
 801273c:	2300      	movs	r3, #0
 801273e:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8012742:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8012746:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801274a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 801274e:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8012752:	f8c1 9002 	str.w	r9, [r1, #2]
 8012756:	3301      	adds	r3, #1
 8012758:	88e4      	ldrh	r4, [r4, #6]
 801275a:	80cc      	strh	r4, [r1, #6]
 801275c:	b2d9      	uxtb	r1, r3
 801275e:	42b9      	cmp	r1, r7
 8012760:	460b      	mov	r3, r1
 8012762:	d3ec      	bcc.n	801273e <MEMS_getSensorData_I16+0x3a>
 8012764:	45c6      	cmp	lr, r8
 8012766:	d934      	bls.n	80127d2 <MEMS_getSensorData_I16+0xce>
 8012768:	ebae 0308 	sub.w	r3, lr, r8
 801276c:	b29b      	uxth	r3, r3
 801276e:	8103      	strh	r3, [r0, #8]
 8012770:	f1bc 0f00 	cmp.w	ip, #0
 8012774:	d01d      	beq.n	80127b2 <MEMS_getSensorData_I16+0xae>
 8012776:	6903      	ldr	r3, [r0, #16]
 8012778:	f10c 3cff 	add.w	ip, ip, #4294967295
 801277c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012780:	f103 000a 	add.w	r0, r3, #10
 8012784:	fa5f fc8c 	uxtb.w	ip, ip
 8012788:	3202      	adds	r2, #2
 801278a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 801278e:	3302      	adds	r3, #2
 8012790:	2400      	movs	r4, #0
 8012792:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012796:	f803 1c02 	strb.w	r1, [r3, #-2]
 801279a:	6811      	ldr	r1, [r2, #0]
 801279c:	6019      	str	r1, [r3, #0]
 801279e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80127a2:	8099      	strh	r1, [r3, #4]
 80127a4:	3308      	adds	r3, #8
 80127a6:	4283      	cmp	r3, r0
 80127a8:	f802 4c02 	strb.w	r4, [r2, #-2]
 80127ac:	f102 0208 	add.w	r2, r2, #8
 80127b0:	d1ef      	bne.n	8012792 <MEMS_getSensorData_I16+0x8e>
 80127b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127b6:	f10e 33ff 	add.w	r3, lr, #4294967295
 80127ba:	fb04 5313 	mls	r3, r4, r3, r5
 80127be:	f8a1 e004 	strh.w	lr, [r1, #4]
 80127c2:	600b      	str	r3, [r1, #0]
 80127c4:	f1be 0f00 	cmp.w	lr, #0
 80127c8:	d005      	beq.n	80127d6 <MEMS_getSensorData_I16+0xd2>
 80127ca:	4677      	mov	r7, lr
 80127cc:	f04f 0c00 	mov.w	ip, #0
 80127d0:	e7b2      	b.n	8012738 <MEMS_getSensorData_I16+0x34>
 80127d2:	2300      	movs	r3, #0
 80127d4:	e7cb      	b.n	801276e <MEMS_getSensorData_I16+0x6a>
 80127d6:	f8a0 e008 	strh.w	lr, [r0, #8]
 80127da:	e7ea      	b.n	80127b2 <MEMS_getSensorData_I16+0xae>

080127dc <MEMS_SolveLinearEq>:
 80127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e0:	ed2d 8b0c 	vpush	{d8-d13}
 80127e4:	4617      	mov	r7, r2
 80127e6:	2400      	movs	r4, #0
 80127e8:	b0a9      	sub	sp, #164	; 0xa4
 80127ea:	2200      	movs	r2, #0
 80127ec:	601a      	str	r2, [r3, #0]
 80127ee:	460d      	mov	r5, r1
 80127f0:	2240      	movs	r2, #64	; 0x40
 80127f2:	4621      	mov	r1, r4
 80127f4:	4680      	mov	r8, r0
 80127f6:	603c      	str	r4, [r7, #0]
 80127f8:	607c      	str	r4, [r7, #4]
 80127fa:	60bc      	str	r4, [r7, #8]
 80127fc:	60fc      	str	r4, [r7, #12]
 80127fe:	a808      	add	r0, sp, #32
 8012800:	461e      	mov	r6, r3
 8012802:	eeb0 8a40 	vmov.f32	s16, s0
 8012806:	e9cd 4400 	strd	r4, r4, [sp]
 801280a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 801280e:	f005 f855 	bl	80178bc <memset>
 8012812:	4621      	mov	r1, r4
 8012814:	a818      	add	r0, sp, #96	; 0x60
 8012816:	2240      	movs	r2, #64	; 0x40
 8012818:	f005 f850 	bl	80178bc <memset>
 801281c:	edd5 2a03 	vldr	s5, [r5, #12]
 8012820:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012bb4 <MEMS_SolveLinearEq+0x3d8>
 8012824:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282c:	d47e      	bmi.n	801292c <MEMS_SolveLinearEq+0x150>
 801282e:	f898 1000 	ldrb.w	r1, [r8]
 8012832:	f898 2001 	ldrb.w	r2, [r8, #1]
 8012836:	f998 3002 	ldrsb.w	r3, [r8, #2]
 801283a:	4291      	cmp	r1, r2
 801283c:	d07c      	beq.n	8012938 <MEMS_SolveLinearEq+0x15c>
 801283e:	3301      	adds	r3, #1
 8012840:	1a58      	subs	r0, r3, r1
 8012842:	fb90 f3f2 	sdiv	r3, r0, r2
 8012846:	fb02 0313 	mls	r3, r2, r3, r0
 801284a:	2b00      	cmp	r3, #0
 801284c:	bfb8      	it	lt
 801284e:	189b      	addlt	r3, r3, r2
 8012850:	b21b      	sxth	r3, r3
 8012852:	2900      	cmp	r1, #0
 8012854:	f000 81d6 	beq.w	8012c04 <MEMS_SolveLinearEq+0x428>
 8012858:	3901      	subs	r1, #1
 801285a:	b2c9      	uxtb	r1, r1
 801285c:	3101      	adds	r1, #1
 801285e:	edd5 3a00 	vldr	s7, [r5]
 8012862:	ed95 4a01 	vldr	s8, [r5, #4]
 8012866:	edd5 4a02 	vldr	s9, [r5, #8]
 801286a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 801286e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012bb8 <MEMS_SolveLinearEq+0x3dc>
 8012872:	4419      	add	r1, r3
 8012874:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012878:	fb93 f4f2 	sdiv	r4, r3, r2
 801287c:	fb02 3414 	mls	r4, r2, r4, r3
 8012880:	b2e4      	uxtb	r4, r4
 8012882:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8012886:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 801288a:	ee07 0a90 	vmov	s15, r0
 801288e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012896:	ee06 0a10 	vmov	s12, r0
 801289a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801289e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 80128a2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80128a6:	ee77 6ac4 	vsub.f32	s13, s15, s8
 80128aa:	ee26 6a08 	vmul.f32	s12, s12, s16
 80128ae:	ee07 0a10 	vmov	s14, r0
 80128b2:	ee36 5a63 	vsub.f32	s10, s12, s7
 80128b6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80128ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128be:	eee5 6a05 	vfma.f32	s13, s10, s10
 80128c2:	ee27 7a08 	vmul.f32	s14, s14, s16
 80128c6:	ee33 6ac6 	vsub.f32	s12, s7, s12
 80128ca:	ee74 aac7 	vsub.f32	s21, s9, s14
 80128ce:	ee37 7a64 	vsub.f32	s14, s14, s9
 80128d2:	ee74 7a67 	vsub.f32	s15, s8, s15
 80128d6:	eee7 6a07 	vfma.f32	s13, s14, s14
 80128da:	eef4 6ac2 	vcmpe.f32	s13, s4
 80128de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e2:	d531      	bpl.n	8012948 <MEMS_SolveLinearEq+0x16c>
 80128e4:	3301      	adds	r3, #1
 80128e6:	4299      	cmp	r1, r3
 80128e8:	d1c6      	bne.n	8012878 <MEMS_SolveLinearEq+0x9c>
 80128ea:	eef0 7a65 	vmov.f32	s15, s11
 80128ee:	2101      	movs	r1, #1
 80128f0:	4608      	mov	r0, r1
 80128f2:	2200      	movs	r2, #0
 80128f4:	e006      	b.n	8012904 <MEMS_SolveLinearEq+0x128>
 80128f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80128fa:	ac28      	add	r4, sp, #160	; 0xa0
 80128fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012900:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8012904:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012908:	3001      	adds	r0, #1
 801290a:	ac28      	add	r4, sp, #160	; 0xa0
 801290c:	b2c0      	uxtb	r0, r0
 801290e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012912:	2804      	cmp	r0, #4
 8012914:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012918:	4613      	mov	r3, r2
 801291a:	d1ec      	bne.n	80128f6 <MEMS_SolveLinearEq+0x11a>
 801291c:	1c48      	adds	r0, r1, #1
 801291e:	b2c0      	uxtb	r0, r0
 8012920:	2804      	cmp	r0, #4
 8012922:	d076      	beq.n	8012a12 <MEMS_SolveLinearEq+0x236>
 8012924:	460b      	mov	r3, r1
 8012926:	460a      	mov	r2, r1
 8012928:	4601      	mov	r1, r0
 801292a:	e7e4      	b.n	80128f6 <MEMS_SolveLinearEq+0x11a>
 801292c:	2000      	movs	r0, #0
 801292e:	b029      	add	sp, #164	; 0xa4
 8012930:	ecbd 8b0c 	vpop	{d8-d13}
 8012934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012938:	1c5a      	adds	r2, r3, #1
 801293a:	fb92 f3f1 	sdiv	r3, r2, r1
 801293e:	fb01 2313 	mls	r3, r1, r3, r2
 8012942:	b21b      	sxth	r3, r3
 8012944:	460a      	mov	r2, r1
 8012946:	e784      	b.n	8012852 <MEMS_SolveLinearEq+0x76>
 8012948:	eef1 cae6 	vsqrt.f32	s25, s13
 801294c:	3301      	adds	r3, #1
 801294e:	428b      	cmp	r3, r1
 8012950:	ed9d ca00 	vldr	s24, [sp]
 8012954:	eddd ba08 	vldr	s23, [sp, #32]
 8012958:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 801295c:	ed9d aa01 	vldr	s20, [sp, #4]
 8012960:	eddd 9a02 	vldr	s19, [sp, #8]
 8012964:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012968:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 801296c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012970:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012974:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012978:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 801297c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012980:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012984:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012988:	ee3d da21 	vadd.f32	s26, s26, s3
 801298c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012990:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012994:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012998:	ee72 aaec 	vsub.f32	s21, s5, s25
 801299c:	eee7 5a27 	vfma.f32	s11, s14, s15
 80129a0:	eea7 ba26 	vfma.f32	s22, s14, s13
 80129a4:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80129a8:	eeaa ca87 	vfma.f32	s24, s21, s14
 80129ac:	eee7 ba07 	vfma.f32	s23, s14, s14
 80129b0:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80129b4:	eeea 9aa6 	vfma.f32	s19, s21, s13
 80129b8:	eea7 9aa7 	vfma.f32	s18, s15, s15
 80129bc:	eea6 3aa6 	vfma.f32	s6, s13, s13
 80129c0:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 80129c4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80129c8:	ee30 6a06 	vadd.f32	s12, s0, s12
 80129cc:	ee71 7a67 	vsub.f32	s15, s2, s15
 80129d0:	ee75 6a66 	vsub.f32	s13, s10, s13
 80129d4:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 80129d8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80129dc:	ed8d ca00 	vstr	s24, [sp]
 80129e0:	edcd ba08 	vstr	s23, [sp, #32]
 80129e4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80129e8:	ed8d aa01 	vstr	s20, [sp, #4]
 80129ec:	edcd 9a02 	vstr	s19, [sp, #8]
 80129f0:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80129f4:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 80129f8:	ed8d 6a03 	vstr	s12, [sp, #12]
 80129fc:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012a00:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8012a04:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012a08:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8012a0c:	f47f af34 	bne.w	8012878 <MEMS_SolveLinearEq+0x9c>
 8012a10:	e76b      	b.n	80128ea <MEMS_SolveLinearEq+0x10e>
 8012a12:	2240      	movs	r2, #64	; 0x40
 8012a14:	2100      	movs	r1, #0
 8012a16:	a818      	add	r0, sp, #96	; 0x60
 8012a18:	f004 ff50 	bl	80178bc <memset>
 8012a1c:	ab08      	add	r3, sp, #32
 8012a1e:	ed9f 5a67 	vldr	s10, [pc, #412]	; 8012bbc <MEMS_SolveLinearEq+0x3e0>
 8012a22:	4618      	mov	r0, r3
 8012a24:	aa18      	add	r2, sp, #96	; 0x60
 8012a26:	2100      	movs	r1, #0
 8012a28:	b24c      	sxtb	r4, r1
 8012a2a:	2900      	cmp	r1, #0
 8012a2c:	f000 80b5 	beq.w	8012b9a <MEMS_SolveLinearEq+0x3be>
 8012a30:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8012a34:	eeb0 7ae7 	vabs.f32	s14, s15
 8012a38:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a40:	f53f af74 	bmi.w	801292c <MEMS_SolveLinearEq+0x150>
 8012a44:	ed93 7a00 	vldr	s14, [r3]
 8012a48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012a4c:	2c01      	cmp	r4, #1
 8012a4e:	edc2 6a00 	vstr	s13, [r2]
 8012a52:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a5a:	f000 80b5 	beq.w	8012bc8 <MEMS_SolveLinearEq+0x3ec>
 8012a5e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012a62:	eeb0 7ac6 	vabs.f32	s14, s12
 8012a66:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6e:	f53f af5d 	bmi.w	801292c <MEMS_SolveLinearEq+0x150>
 8012a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8012a76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a7a:	2c02      	cmp	r4, #2
 8012a7c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012a80:	edc2 7a01 	vstr	s15, [r2, #4]
 8012a84:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012a88:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8012a8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012a90:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012a94:	f000 80a7 	beq.w	8012be6 <MEMS_SolveLinearEq+0x40a>
 8012a98:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 8012a9c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012aa0:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa8:	f53f af40 	bmi.w	801292c <MEMS_SolveLinearEq+0x150>
 8012aac:	edd3 5a02 	vldr	s11, [r3, #8]
 8012ab0:	ed90 6a00 	vldr	s12, [r0]
 8012ab4:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012ab8:	eec7 5a24 	vdiv.f32	s11, s14, s9
 8012abc:	edc2 5a02 	vstr	s11, [r2, #8]
 8012ac0:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012ac4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012ac8:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012acc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012ad0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012ad4:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012ad8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae0:	f77f af24 	ble.w	801292c <MEMS_SolveLinearEq+0x150>
 8012ae4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012ae8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012aec:	ed82 7a03 	vstr	s14, [r2, #12]
 8012af0:	3101      	adds	r1, #1
 8012af2:	2904      	cmp	r1, #4
 8012af4:	f103 0310 	add.w	r3, r3, #16
 8012af8:	f102 0210 	add.w	r2, r2, #16
 8012afc:	f100 0014 	add.w	r0, r0, #20
 8012b00:	d192      	bne.n	8012a28 <MEMS_SolveLinearEq+0x24c>
 8012b02:	466a      	mov	r2, sp
 8012b04:	4639      	mov	r1, r7
 8012b06:	a818      	add	r0, sp, #96	; 0x60
 8012b08:	f7f9 f9f2 	bl	800bef0 <llEvaluate.constprop.0>
 8012b0c:	4b2c      	ldr	r3, [pc, #176]	; (8012bc0 <MEMS_SolveLinearEq+0x3e4>)
 8012b0e:	6033      	str	r3, [r6, #0]
 8012b10:	f10d 0910 	add.w	r9, sp, #16
 8012b14:	46e8      	mov	r8, sp
 8012b16:	f10d 0b0c 	add.w	fp, sp, #12
 8012b1a:	2400      	movs	r4, #0
 8012b1c:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012b20:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012b24:	e9cd 4400 	strd	r4, r4, [sp]
 8012b28:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012b2c:	466a      	mov	r2, sp
 8012b2e:	f848 ab04 	str.w	sl, [r8], #4
 8012b32:	a904      	add	r1, sp, #16
 8012b34:	a818      	add	r0, sp, #96	; 0x60
 8012b36:	f7f9 f9db 	bl	800bef0 <llEvaluate.constprop.0>
 8012b3a:	ecf9 7a01 	vldmia	r9!, {s15}
 8012b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b46:	dd23      	ble.n	8012b90 <MEMS_SolveLinearEq+0x3b4>
 8012b48:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012b4c:	edd6 7a00 	vldr	s15, [r6]
 8012b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b58:	bfb8      	it	lt
 8012b5a:	eef0 7a47 	vmovlt.f32	s15, s14
 8012b5e:	45c3      	cmp	fp, r8
 8012b60:	edc6 7a00 	vstr	s15, [r6]
 8012b64:	d1de      	bne.n	8012b24 <MEMS_SolveLinearEq+0x348>
 8012b66:	edd5 7a03 	vldr	s15, [r5, #12]
 8012b6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8012b6e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012b72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012b76:	2001      	movs	r0, #1
 8012b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b80:	bf48      	it	mi
 8012b82:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012b86:	b029      	add	sp, #164	; 0xa4
 8012b88:	ecbd 8b0c 	vpop	{d8-d13}
 8012b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b90:	45c3      	cmp	fp, r8
 8012b92:	ed86 0a00 	vstr	s0, [r6]
 8012b96:	d1c5      	bne.n	8012b24 <MEMS_SolveLinearEq+0x348>
 8012b98:	e7e5      	b.n	8012b66 <MEMS_SolveLinearEq+0x38a>
 8012b9a:	edd0 7a00 	vldr	s15, [r0]
 8012b9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba6:	f77f aec1 	ble.w	801292c <MEMS_SolveLinearEq+0x150>
 8012baa:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012bae:	ed82 7a00 	vstr	s14, [r2]
 8012bb2:	e79d      	b.n	8012af0 <MEMS_SolveLinearEq+0x314>
 8012bb4:	3dcccccd 	.word	0x3dcccccd
 8012bb8:	2b8cbccb 	.word	0x2b8cbccb
 8012bbc:	358637bd 	.word	0x358637bd
 8012bc0:	3dcccccd 	.word	0x3dcccccd
 8012bc4:	00000000 	.word	0x00000000
 8012bc8:	ed90 7a00 	vldr	s14, [r0]
 8012bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd4:	f77f aeaa 	ble.w	801292c <MEMS_SolveLinearEq+0x150>
 8012bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bdc:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012be0:	ed82 7a01 	vstr	s14, [r2, #4]
 8012be4:	e784      	b.n	8012af0 <MEMS_SolveLinearEq+0x314>
 8012be6:	edd0 7a00 	vldr	s15, [r0]
 8012bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bf2:	f77f ae9b 	ble.w	801292c <MEMS_SolveLinearEq+0x150>
 8012bf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bfa:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012bfe:	ed82 7a02 	vstr	s14, [r2, #8]
 8012c02:	e775      	b.n	8012af0 <MEMS_SolveLinearEq+0x314>
 8012c04:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012bc4 <MEMS_SolveLinearEq+0x3e8>
 8012c08:	e671      	b.n	80128ee <MEMS_SolveLinearEq+0x112>
 8012c0a:	bf00      	nop

08012c0c <MEMS_EIG3>:
 8012c0c:	edd0 6a02 	vldr	s13, [r0, #8]
 8012c10:	ed90 7a01 	vldr	s14, [r0, #4]
 8012c14:	edd0 4a04 	vldr	s9, [r0, #16]
 8012c18:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012d68 <MEMS_EIG3+0x15c>
 8012c1c:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012c20:	b510      	push	{r4, lr}
 8012c22:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012c26:	460c      	mov	r4, r1
 8012c28:	ed2d 8b04 	vpush	{d8-d9}
 8012c2c:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012c30:	b08a      	sub	sp, #40	; 0x28
 8012c32:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3a:	d509      	bpl.n	8012c50 <MEMS_EIG3+0x44>
 8012c3c:	6803      	ldr	r3, [r0, #0]
 8012c3e:	600b      	str	r3, [r1, #0]
 8012c40:	68c3      	ldr	r3, [r0, #12]
 8012c42:	604b      	str	r3, [r1, #4]
 8012c44:	6943      	ldr	r3, [r0, #20]
 8012c46:	608b      	str	r3, [r1, #8]
 8012c48:	b00a      	add	sp, #40	; 0x28
 8012c4a:	ecbd 8b04 	vpop	{d8-d9}
 8012c4e:	bd10      	pop	{r4, pc}
 8012c50:	ed90 4a00 	vldr	s8, [r0]
 8012c54:	edd0 5a03 	vldr	s11, [r0, #12]
 8012c58:	edd0 2a05 	vldr	s5, [r0, #20]
 8012c5c:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012d6c <MEMS_EIG3+0x160>
 8012c60:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012d70 <MEMS_EIG3+0x164>
 8012c64:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012c68:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012c6c:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012c70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012c74:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012c78:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012c7c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012c80:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012c84:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012c88:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012c8c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012c90:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012c94:	eef0 7a45 	vmov.f32	s15, s10
 8012c98:	eee2 7aa2 	vfma.f32	s15, s5, s5
 8012c9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012ca0:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012ca4:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012ca8:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 8012cac:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012cb0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012cb4:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012cb8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8012cbc:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012cc0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012cc4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012cc8:	ee66 4a46 	vnmul.f32	s9, s12, s12
 8012ccc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cd0:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012cd4:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012cd8:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8012cdc:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012ce0:	eee5 7a07 	vfma.f32	s15, s10, s14
 8012ce4:	eef4 7ac3 	vcmpe.f32	s15, s6
 8012ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cec:	d909      	bls.n	8012d02 <MEMS_EIG3+0xf6>
 8012cee:	eef4 7ae3 	vcmpe.f32	s15, s7
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	db22      	blt.n	8012d3e <MEMS_EIG3+0x132>
 8012cf8:	eeb0 9a40 	vmov.f32	s18, s0
 8012cfc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012d74 <MEMS_EIG3+0x168>
 8012d00:	e003      	b.n	8012d0a <MEMS_EIG3+0xfe>
 8012d02:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012d78 <MEMS_EIG3+0x16c>
 8012d06:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012d0a:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012d0e:	eef0 7a48 	vmov.f32	s15, s16
 8012d12:	eeb0 7a48 	vmov.f32	s14, s16
 8012d16:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012d1a:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012d1e:	edc4 7a00 	vstr	s15, [r4]
 8012d22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d26:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012d2a:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012d2e:	ed84 7a02 	vstr	s14, [r4, #8]
 8012d32:	edc4 7a01 	vstr	s15, [r4, #4]
 8012d36:	b00a      	add	sp, #40	; 0x28
 8012d38:	ecbd 8b04 	vpop	{d8-d9}
 8012d3c:	bd10      	pop	{r4, pc}
 8012d3e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012d42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d46:	f003 f855 	bl	8015df4 <acosf>
 8012d4a:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012d4e:	eeb0 0a69 	vmov.f32	s0, s19
 8012d52:	f002 ff49 	bl	8015be8 <cosf>
 8012d56:	eeb0 9a40 	vmov.f32	s18, s0
 8012d5a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012d7c <MEMS_EIG3+0x170>
 8012d5e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012d62:	f002 ff41 	bl	8015be8 <cosf>
 8012d66:	e7d0      	b.n	8012d0a <MEMS_EIG3+0xfe>
 8012d68:	358637bd 	.word	0x358637bd
 8012d6c:	3eaaaaab 	.word	0x3eaaaaab
 8012d70:	3e2aaaab 	.word	0x3e2aaaab
 8012d74:	bf000001 	.word	0xbf000001
 8012d78:	3effffff 	.word	0x3effffff
 8012d7c:	40060a92 	.word	0x40060a92

08012d80 <MEMS_runMagCal>:
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	ed2d 8b0a 	vpush	{d8-d12}
 8012d88:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012d8c:	2282      	movs	r2, #130	; 0x82
 8012d8e:	ab36      	add	r3, sp, #216	; 0xd8
 8012d90:	460c      	mov	r4, r1
 8012d92:	9105      	str	r1, [sp, #20]
 8012d94:	4683      	mov	fp, r0
 8012d96:	4608      	mov	r0, r1
 8012d98:	a917      	add	r1, sp, #92	; 0x5c
 8012d9a:	9319      	str	r3, [sp, #100]	; 0x64
 8012d9c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012da0:	f7ff fcb0 	bl	8012704 <MEMS_getSensorData_I16>
 8012da4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012da8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012dac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012dae:	9209      	str	r2, [sp, #36]	; 0x24
 8012db0:	f108 31ff 	add.w	r1, r8, #4294967295
 8012db4:	9106      	str	r1, [sp, #24]
 8012db6:	fb01 2103 	mla	r1, r1, r3, r2
 8012dba:	9108      	str	r1, [sp, #32]
 8012dbc:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012dc0:	f1b8 0f00 	cmp.w	r8, #0
 8012dc4:	f000 8417 	beq.w	80135f6 <MEMS_runMagCal+0x876>
 8012dc8:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012dd0:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012dd4:	fb02 f203 	mul.w	r2, r2, r3
 8012dd8:	31a0      	adds	r1, #160	; 0xa0
 8012dda:	4291      	cmp	r1, r2
 8012ddc:	f080 8411 	bcs.w	8013602 <MEMS_runMagCal+0x882>
 8012de0:	3b00      	subs	r3, #0
 8012de2:	bf18      	it	ne
 8012de4:	2301      	movne	r3, #1
 8012de6:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012df0:	f8cb 200c 	str.w	r2, [fp, #12]
 8012df4:	2300      	movs	r3, #0
 8012df6:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012dfa:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012dfe:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012e02:	22ff      	movs	r2, #255	; 0xff
 8012e04:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012e08:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012e0c:	4cd5      	ldr	r4, [pc, #852]	; (8013164 <MEMS_runMagCal+0x3e4>)
 8012e0e:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8013170 <MEMS_runMagCal+0x3f0>
 8012e12:	9b05      	ldr	r3, [sp, #20]
 8012e14:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012e18:	edd3 5a01 	vldr	s11, [r3, #4]
 8012e1c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012e20:	4652      	mov	r2, sl
 8012e22:	2a03      	cmp	r2, #3
 8012e24:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012e28:	bf28      	it	cs
 8012e2a:	2203      	movcs	r2, #3
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	9207      	str	r2, [sp, #28]
 8012e30:	eeb0 0a67 	vmov.f32	s0, s15
 8012e34:	464b      	mov	r3, r9
 8012e36:	9402      	str	r4, [sp, #8]
 8012e38:	4627      	mov	r7, r4
 8012e3a:	9503      	str	r5, [sp, #12]
 8012e3c:	462e      	mov	r6, r5
 8012e3e:	460a      	mov	r2, r1
 8012e40:	9404      	str	r4, [sp, #16]
 8012e42:	7818      	ldrb	r0, [r3, #0]
 8012e44:	3201      	adds	r2, #1
 8012e46:	b292      	uxth	r2, r2
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d04b      	beq.n	8012ee4 <MEMS_runMagCal+0x164>
 8012e4c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012e50:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012e54:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012e58:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012e5c:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012e60:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012e64:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012e68:	9c02      	ldr	r4, [sp, #8]
 8012e6a:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012e6e:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012e72:	ee07 ea90 	vmov	s15, lr
 8012e76:	ee07 ca10 	vmov	s14, ip
 8012e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e82:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012e86:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012e8a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012e8e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012e92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012e96:	4574      	cmp	r4, lr
 8012e98:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012e9c:	bfb8      	it	lt
 8012e9e:	4674      	movlt	r4, lr
 8012ea0:	9402      	str	r4, [sp, #8]
 8012ea2:	ee07 0a10 	vmov	s14, r0
 8012ea6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012eaa:	9c03      	ldr	r4, [sp, #12]
 8012eac:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012eb0:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012eb4:	4574      	cmp	r4, lr
 8012eb6:	bfa8      	it	ge
 8012eb8:	4674      	movge	r4, lr
 8012eba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ebe:	4567      	cmp	r7, ip
 8012ec0:	9403      	str	r4, [sp, #12]
 8012ec2:	9c04      	ldr	r4, [sp, #16]
 8012ec4:	bfb8      	it	lt
 8012ec6:	4667      	movlt	r7, ip
 8012ec8:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012ecc:	4566      	cmp	r6, ip
 8012ece:	bfa8      	it	ge
 8012ed0:	4666      	movge	r6, ip
 8012ed2:	4284      	cmp	r4, r0
 8012ed4:	bfb8      	it	lt
 8012ed6:	4604      	movlt	r4, r0
 8012ed8:	3101      	adds	r1, #1
 8012eda:	4285      	cmp	r5, r0
 8012edc:	b249      	sxtb	r1, r1
 8012ede:	9404      	str	r4, [sp, #16]
 8012ee0:	bfa8      	it	ge
 8012ee2:	4605      	movge	r5, r0
 8012ee4:	9807      	ldr	r0, [sp, #28]
 8012ee6:	4282      	cmp	r2, r0
 8012ee8:	f103 0308 	add.w	r3, r3, #8
 8012eec:	d9a9      	bls.n	8012e42 <MEMS_runMagCal+0xc2>
 8012eee:	4590      	cmp	r8, r2
 8012ef0:	9c04      	ldr	r4, [sp, #16]
 8012ef2:	f240 8767 	bls.w	8013dc4 <MEMS_runMagCal+0x1044>
 8012ef6:	ebaa 0a02 	sub.w	sl, sl, r2
 8012efa:	fa12 fa8a 	uxtah	sl, r2, sl
 8012efe:	f109 0308 	add.w	r3, r9, #8
 8012f02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f06:	9307      	str	r3, [sp, #28]
 8012f08:	2300      	movs	r3, #0
 8012f0a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012f0e:	9304      	str	r3, [sp, #16]
 8012f10:	7813      	ldrb	r3, [r2, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f000 8096 	beq.w	8013044 <MEMS_runMagCal+0x2c4>
 8012f18:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012f1c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012f20:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012f24:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012f28:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012f2c:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012f30:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012f34:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012f38:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012f3c:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012f40:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012f44:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012f48:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012f4c:	ebae 0808 	sub.w	r8, lr, r8
 8012f50:	eba0 000a 	sub.w	r0, r0, sl
 8012f54:	ee07 ca10 	vmov	s14, ip
 8012f58:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012f5c:	ee07 0a90 	vmov	s15, r0
 8012f60:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012f64:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012f68:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012f70:	eba3 030a 	sub.w	r3, r3, sl
 8012f74:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f7c:	ee06 ea90 	vmov	s13, lr
 8012f80:	ebac 0909 	sub.w	r9, ip, r9
 8012f84:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012f88:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012f8c:	eef0 7ae7 	vabs.f32	s15, s15
 8012f90:	ee06 9a90 	vmov	s13, r9
 8012f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012f98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fa0:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012fa4:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012fa8:	eef0 6ae6 	vabs.f32	s13, s13
 8012fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012fb0:	eba0 0808 	sub.w	r8, r0, r8
 8012fb4:	ee06 0a90 	vmov	s13, r0
 8012fb8:	eba3 0309 	sub.w	r3, r3, r9
 8012fbc:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012fc0:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012fc4:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012fc8:	9b02      	ldr	r3, [sp, #8]
 8012fca:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8012fce:	4577      	cmp	r7, lr
 8012fd0:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012fd4:	ee06 8a90 	vmov	s13, r8
 8012fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012fdc:	bfb8      	it	lt
 8012fde:	4677      	movlt	r7, lr
 8012fe0:	4576      	cmp	r6, lr
 8012fe2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012fe6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012fea:	bfa8      	it	ge
 8012fec:	4676      	movge	r6, lr
 8012fee:	4563      	cmp	r3, ip
 8012ff0:	bfb8      	it	lt
 8012ff2:	4663      	movlt	r3, ip
 8012ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ff8:	eea5 7a05 	vfma.f32	s14, s10, s10
 8012ffc:	9302      	str	r3, [sp, #8]
 8012ffe:	9b03      	ldr	r3, [sp, #12]
 8013000:	eef0 6ae6 	vabs.f32	s13, s13
 8013004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013008:	4563      	cmp	r3, ip
 801300a:	ee36 6a44 	vsub.f32	s12, s12, s8
 801300e:	bfa8      	it	ge
 8013010:	4663      	movge	r3, ip
 8013012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013016:	4284      	cmp	r4, r0
 8013018:	ee37 0a00 	vadd.f32	s0, s14, s0
 801301c:	bfb8      	it	lt
 801301e:	4604      	movlt	r4, r0
 8013020:	ee26 7a24 	vmul.f32	s14, s12, s9
 8013024:	4285      	cmp	r5, r0
 8013026:	bfa8      	it	ge
 8013028:	4605      	movge	r5, r0
 801302a:	9303      	str	r3, [sp, #12]
 801302c:	ee17 0a90 	vmov	r0, s15
 8013030:	9b04      	ldr	r3, [sp, #16]
 8013032:	eea7 0a07 	vfma.f32	s0, s14, s14
 8013036:	4283      	cmp	r3, r0
 8013038:	f101 0101 	add.w	r1, r1, #1
 801303c:	bf38      	it	cc
 801303e:	4603      	movcc	r3, r0
 8013040:	b249      	sxtb	r1, r1
 8013042:	9304      	str	r3, [sp, #16]
 8013044:	9b07      	ldr	r3, [sp, #28]
 8013046:	3208      	adds	r2, #8
 8013048:	4293      	cmp	r3, r2
 801304a:	f47f af61 	bne.w	8012f10 <MEMS_runMagCal+0x190>
 801304e:	2900      	cmp	r1, #0
 8013050:	f000 86b6 	beq.w	8013dc0 <MEMS_runMagCal+0x1040>
 8013054:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8013058:	f280 82df 	bge.w	801361a <MEMS_runMagCal+0x89a>
 801305c:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8013060:	f2c0 82db 	blt.w	801361a <MEMS_runMagCal+0x89a>
 8013064:	9b02      	ldr	r3, [sp, #8]
 8013066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801306a:	f280 82d6 	bge.w	801361a <MEMS_runMagCal+0x89a>
 801306e:	9a03      	ldr	r2, [sp, #12]
 8013070:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8013074:	f2c0 82d1 	blt.w	801361a <MEMS_runMagCal+0x89a>
 8013078:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801307c:	f280 82cd 	bge.w	801361a <MEMS_runMagCal+0x89a>
 8013080:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8013084:	f2c0 82c9 	blt.w	801361a <MEMS_runMagCal+0x89a>
 8013088:	ee07 1a90 	vmov	s15, r1
 801308c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013094:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8013098:	1bbe      	subs	r6, r7, r6
 801309a:	1a9f      	subs	r7, r3, r2
 801309c:	42be      	cmp	r6, r7
 801309e:	4633      	mov	r3, r6
 80130a0:	eba4 0405 	sub.w	r4, r4, r5
 80130a4:	bfb8      	it	lt
 80130a6:	463b      	movlt	r3, r7
 80130a8:	42a3      	cmp	r3, r4
 80130aa:	bfb8      	it	lt
 80130ac:	4623      	movlt	r3, r4
 80130ae:	eec7 6a25 	vdiv.f32	s13, s14, s11
 80130b2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80130b6:	ee07 3a10 	vmov	s14, r3
 80130ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013168 <MEMS_runMagCal+0x3e8>
 80130be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80130c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130c6:	ee25 0a80 	vmul.f32	s0, s11, s0
 80130ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80130ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d2:	f100 82a2 	bmi.w	801361a <MEMS_runMagCal+0x89a>
 80130d6:	eddd 7a04 	vldr	s15, [sp, #16]
 80130da:	ed9f 6a24 	vldr	s12, [pc, #144]	; 801316c <MEMS_runMagCal+0x3ec>
 80130de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130e2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80130e6:	eef4 5ac6 	vcmpe.f32	s11, s12
 80130ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ee:	f300 8294 	bgt.w	801361a <MEMS_runMagCal+0x89a>
 80130f2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80130f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80130fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80130fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013102:	f301 81f8 	bgt.w	80144f6 <MEMS_runMagCal+0x1776>
 8013106:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 801310a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801310e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013116:	f340 8552 	ble.w	8013bbe <MEMS_runMagCal+0xe3e>
 801311a:	ee07 6a90 	vmov	s15, r6
 801311e:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8013122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013126:	eef4 7ae6 	vcmpe.f32	s15, s13
 801312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312e:	f340 8546 	ble.w	8013bbe <MEMS_runMagCal+0xe3e>
 8013132:	ee07 7a90 	vmov	s15, r7
 8013136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801313a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013142:	f140 853c 	bpl.w	8013bbe <MEMS_runMagCal+0xe3e>
 8013146:	ee07 4a90 	vmov	s15, r4
 801314a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801314e:	2300      	movs	r3, #0
 8013150:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013158:	9303      	str	r3, [sp, #12]
 801315a:	bf48      	it	mi
 801315c:	2301      	movmi	r3, #1
 801315e:	9307      	str	r3, [sp, #28]
 8013160:	f000 bd30 	b.w	8013bc4 <MEMS_runMagCal+0xe44>
 8013164:	ffff8000 	.word	0xffff8000
 8013168:	43020000 	.word	0x43020000
 801316c:	447a0000 	.word	0x447a0000
 8013170:	00000000 	.word	0x00000000
 8013174:	41f00001 	.word	0x41f00001
 8013178:	400ccccd 	.word	0x400ccccd
 801317c:	3dcccccd 	.word	0x3dcccccd
 8013180:	423c0000 	.word	0x423c0000
 8013184:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8013170 <MEMS_runMagCal+0x3f0>
 8013188:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8013174 <MEMS_runMagCal+0x3f4>
 801318c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013190:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013198:	dc10      	bgt.n	80131bc <MEMS_runMagCal+0x43c>
 801319a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8013178 <MEMS_runMagCal+0x3f8>
 801319e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80131a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a6:	dc09      	bgt.n	80131bc <MEMS_runMagCal+0x43c>
 80131a8:	ed94 9a03 	vldr	s18, [r4, #12]
 80131ac:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 801317c <MEMS_runMagCal+0x3fc>
 80131b0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 80131b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131b8:	f201 8527 	bhi.w	8014c0a <MEMS_runMagCal+0x1e8a>
 80131bc:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8013180 <MEMS_runMagCal+0x400>
 80131c0:	edd4 6a03 	vldr	s13, [r4, #12]
 80131c4:	ed94 5a00 	vldr	s10, [r4]
 80131c8:	edd4 5a01 	vldr	s11, [r4, #4]
 80131cc:	ed94 6a02 	vldr	s12, [r4, #8]
 80131d0:	edc4 7a06 	vstr	s15, [r4, #24]
 80131d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80131d8:	ad2e      	add	r5, sp, #184	; 0xb8
 80131da:	2300      	movs	r3, #0
 80131dc:	e9c5 3300 	strd	r3, r3, [r5]
 80131e0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80131e4:	60ab      	str	r3, [r5, #8]
 80131e6:	61ab      	str	r3, [r5, #24]
 80131e8:	4be7      	ldr	r3, [pc, #924]	; (8013588 <MEMS_runMagCal+0x808>)
 80131ea:	9311      	str	r3, [sp, #68]	; 0x44
 80131ec:	ee85 0a08 	vdiv.f32	s0, s10, s16
 80131f0:	eec5 9a88 	vdiv.f32	s19, s11, s16
 80131f4:	ee86 aa08 	vdiv.f32	s20, s12, s16
 80131f8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80131fc:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013200:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8013204:	eef0 6a67 	vmov.f32	s13, s15
 8013208:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801320c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013210:	ee39 9a46 	vsub.f32	s18, s18, s12
 8013214:	eddf 6add 	vldr	s13, [pc, #884]	; 801358c <MEMS_runMagCal+0x80c>
 8013218:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013590 <MEMS_runMagCal+0x810>
 801321c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013220:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013224:	eef0 6ae6 	vabs.f32	s13, s13
 8013228:	ee77 7a67 	vsub.f32	s15, s14, s15
 801322c:	eef4 6ac6 	vcmpe.f32	s13, s12
 8013230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013234:	eef0 7ae7 	vabs.f32	s15, s15
 8013238:	f101 84dd 	bmi.w	8014bf6 <MEMS_runMagCal+0x1e76>
 801323c:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8013594 <MEMS_runMagCal+0x814>
 8013240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013248:	f281 8438 	bge.w	8014abc <MEMS_runMagCal+0x1d3c>
 801324c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8013598 <MEMS_runMagCal+0x818>
 8013250:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8013254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013258:	f101 8430 	bmi.w	8014abc <MEMS_runMagCal+0x1d3c>
 801325c:	f002 fd04 	bl	8015c68 <roundf>
 8013260:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013264:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8013268:	ee17 3a90 	vmov	r3, s15
 801326c:	eeb0 0a69 	vmov.f32	s0, s19
 8013270:	f8a9 3000 	strh.w	r3, [r9]
 8013274:	f002 fcf8 	bl	8015c68 <roundf>
 8013278:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801327c:	eeb0 0a4a 	vmov.f32	s0, s20
 8013280:	ee17 3a90 	vmov	r3, s15
 8013284:	f8a9 3002 	strh.w	r3, [r9, #2]
 8013288:	f002 fcee 	bl	8015c68 <roundf>
 801328c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013290:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8013294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013298:	ee16 3a90 	vmov	r3, s13
 801329c:	eddf 7abf 	vldr	s15, [pc, #764]	; 801359c <MEMS_runMagCal+0x81c>
 80132a0:	f8a9 3004 	strh.w	r3, [r9, #4]
 80132a4:	ee27 0a27 	vmul.f32	s0, s14, s15
 80132a8:	f002 fcde 	bl	8015c68 <roundf>
 80132ac:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80132b0:	ae0f      	add	r6, sp, #60	; 0x3c
 80132b2:	ed8b 0a01 	vstr	s0, [fp, #4]
 80132b6:	ab10      	add	r3, sp, #64	; 0x40
 80132b8:	ee1c 0a10 	vmov	r0, s24
 80132bc:	eeb0 0a48 	vmov.f32	s0, s16
 80132c0:	4649      	mov	r1, r9
 80132c2:	9600      	str	r6, [sp, #0]
 80132c4:	aa2d      	add	r2, sp, #180	; 0xb4
 80132c6:	f7f8 ff33 	bl	800c130 <getMagStats.constprop.0>
 80132ca:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80132ce:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80135a0 <MEMS_runMagCal+0x820>
 80132d2:	461f      	mov	r7, r3
 80132d4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80132d8:	005b      	lsls	r3, r3, #1
 80132da:	ee07 3a90 	vmov	s15, r3
 80132de:	ee07 0a10 	vmov	s14, r0
 80132e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80132ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80132ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f6:	dc0f      	bgt.n	8013318 <MEMS_runMagCal+0x598>
 80132f8:	ed96 7a00 	vldr	s14, [r6]
 80132fc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013308:	bfc3      	ittte	gt
 801330a:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 801330e:	fab3 f383 	clzgt	r3, r3
 8013312:	095b      	lsrgt	r3, r3, #5
 8013314:	2301      	movle	r3, #1
 8013316:	9303      	str	r3, [sp, #12]
 8013318:	ed96 0a00 	vldr	s0, [r6]
 801331c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8013320:	9620      	str	r6, [sp, #128]	; 0x80
 8013322:	ee28 0a80 	vmul.f32	s0, s17, s0
 8013326:	ee80 0a09 	vdiv.f32	s0, s0, s18
 801332a:	f002 fc9d 	bl	8015c68 <roundf>
 801332e:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8013332:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8013336:	ee17 3a10 	vmov	r3, s14
 801333a:	ee28 0aa7 	vmul.f32	s0, s17, s15
 801333e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013342:	f002 fc91 	bl	8015c68 <roundf>
 8013346:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80135a4 <MEMS_runMagCal+0x824>
 801334a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801334e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8013352:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8013356:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801335a:	f8d9 0000 	ldr.w	r0, [r9]
 801335e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8013362:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013366:	ee27 7a06 	vmul.f32	s14, s14, s12
 801336a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801336e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8013372:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8013376:	ee16 2a90 	vmov	r2, s13
 801337a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801337e:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8013382:	f1b8 0f01 	cmp.w	r8, #1
 8013386:	fa1f fc82 	uxth.w	ip, r2
 801338a:	bf08      	it	eq
 801338c:	23ff      	moveq	r3, #255	; 0xff
 801338e:	ee17 2a10 	vmov	r2, s14
 8013392:	ee17 1a90 	vmov	r1, s15
 8013396:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 801339a:	ee16 0a10 	vmov	r0, s12
 801339e:	bf08      	it	eq
 80133a0:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 80133a4:	9b03      	ldr	r3, [sp, #12]
 80133a6:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 80133aa:	b292      	uxth	r2, r2
 80133ac:	b289      	uxth	r1, r1
 80133ae:	2000      	movs	r0, #0
 80133b0:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 80133b4:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80133b8:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 80133bc:	f88b 0000 	strb.w	r0, [fp]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	f000 8118 	beq.w	80135f6 <MEMS_runMagCal+0x876>
 80133c6:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80133ca:	f88b 0001 	strb.w	r0, [fp, #1]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	f041 80fd 	bne.w	80145ce <MEMS_runMagCal+0x184e>
 80133d4:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 80133d8:	ad0e      	add	r5, sp, #56	; 0x38
 80133da:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 80133de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80133e2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80133e6:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 80133ea:	f8cb 6008 	str.w	r6, [fp, #8]
 80133ee:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 80133f2:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 80133f6:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80135a8 <MEMS_runMagCal+0x828>
 80133fa:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 80133fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013402:	fb00 f404 	mul.w	r4, r0, r4
 8013406:	ee05 4a90 	vmov	s11, r4
 801340a:	fb00 f406 	mul.w	r4, r0, r6
 801340e:	fb00 f00e 	mul.w	r0, r0, lr
 8013412:	ee06 0a10 	vmov	s12, r0
 8013416:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 801341a:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 801341e:	ee03 0a90 	vmov	s7, r0
 8013422:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8013426:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 801342a:	ee05 4a10 	vmov	s10, r4
 801342e:	ee04 0a10 	vmov	s8, r0
 8013432:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 8013436:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801343a:	ee04 0a90 	vmov	s9, r0
 801343e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013442:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013446:	f8dc 0000 	ldr.w	r0, [ip]
 801344a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 801344e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013452:	ee25 5a27 	vmul.f32	s10, s10, s15
 8013456:	ee26 6a27 	vmul.f32	s12, s12, s15
 801345a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801345e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8013462:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8013466:	2001      	movs	r0, #1
 8013468:	24ff      	movs	r4, #255	; 0xff
 801346a:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 801346e:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 8013472:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8013476:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 801347a:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 801347e:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8013482:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8013486:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 801348a:	f88b 4012 	strb.w	r4, [fp, #18]
 801348e:	2f00      	cmp	r7, #0
 8013490:	f001 82c8 	beq.w	8014a24 <MEMS_runMagCal+0x1ca4>
 8013494:	9b05      	ldr	r3, [sp, #20]
 8013496:	ed9f 3a47 	vldr	s6, [pc, #284]	; 80135b4 <MEMS_runMagCal+0x834>
 801349a:	ed93 0a01 	vldr	s0, [r3, #4]
 801349e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80134a2:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80134a6:	2200      	movs	r2, #0
 80134a8:	ee20 3a03 	vmul.f32	s6, s0, s6
 80134ac:	f04f 34ff 	mov.w	r4, #4294967295
 80134b0:	4616      	mov	r6, r2
 80134b2:	fb96 f3f0 	sdiv	r3, r6, r0
 80134b6:	fb00 6313 	mls	r3, r0, r3, r6
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80134c0:	1c66      	adds	r6, r4, #1
 80134c2:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80134c6:	ee07 4a90 	vmov	s15, r4
 80134ca:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 80134ce:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80134d2:	ee06 4a90 	vmov	s13, r4
 80134d6:	fb96 f4f1 	sdiv	r4, r6, r1
 80134da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80134e2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80134e6:	ee07 3a10 	vmov	s14, r3
 80134ea:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80134ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 80134f2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80134f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80134fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80134fe:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8013502:	fb01 6414 	mls	r4, r1, r4, r6
 8013506:	b264      	sxtb	r4, r4
 8013508:	ee37 7a64 	vsub.f32	s14, s14, s9
 801350c:	3201      	adds	r2, #1
 801350e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013512:	b212      	sxth	r2, r2
 8013514:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013518:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 801351c:	42ba      	cmp	r2, r7
 801351e:	4616      	mov	r6, r2
 8013520:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8013524:	ee67 7a03 	vmul.f32	s15, s14, s6
 8013528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801352c:	ee17 ca90 	vmov	ip, s15
 8013530:	f8a3 c014 	strh.w	ip, [r3, #20]
 8013534:	dbbd      	blt.n	80134b2 <MEMS_runMagCal+0x732>
 8013536:	f88b 4012 	strb.w	r4, [fp, #18]
 801353a:	428f      	cmp	r7, r1
 801353c:	bf28      	it	cs
 801353e:	460f      	movcs	r7, r1
 8013540:	f88b 7010 	strb.w	r7, [fp, #16]
 8013544:	ee1c 0a10 	vmov	r0, s24
 8013548:	9500      	str	r5, [sp, #0]
 801354a:	4642      	mov	r2, r8
 801354c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013550:	ab0d      	add	r3, sp, #52	; 0x34
 8013552:	f7f8 fded 	bl	800c130 <getMagStats.constprop.0>
 8013556:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80135ac <MEMS_runMagCal+0x82c>
 801355a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801355e:	edd5 6a00 	vldr	s13, [r5]
 8013562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013566:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801356a:	eef0 7ae7 	vabs.f32	s15, s15
 801356e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013576:	d525      	bpl.n	80135c4 <MEMS_runMagCal+0x844>
 8013578:	eef4 6ac7 	vcmpe.f32	s13, s14
 801357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013580:	f101 8257 	bmi.w	8014a32 <MEMS_runMagCal+0x1cb2>
 8013584:	e01e      	b.n	80135c4 <MEMS_runMagCal+0x844>
 8013586:	bf00      	nop
 8013588:	41f00001 	.word	0x41f00001
 801358c:	3f8ccccd 	.word	0x3f8ccccd
 8013590:	3f266666 	.word	0x3f266666
 8013594:	3eb33333 	.word	0x3eb33333
 8013598:	3f19999a 	.word	0x3f19999a
 801359c:	3a83126f 	.word	0x3a83126f
 80135a0:	3c23d70a 	.word	0x3c23d70a
 80135a4:	447a0000 	.word	0x447a0000
 80135a8:	358637bd 	.word	0x358637bd
 80135ac:	423c0000 	.word	0x423c0000
 80135b0:	4423d666 	.word	0x4423d666
 80135b4:	42c80000 	.word	0x42c80000
 80135b8:	427c0000 	.word	0x427c0000
 80135bc:	3f666666 	.word	0x3f666666
 80135c0:	3eaaaaab 	.word	0x3eaaaaab
 80135c4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80135c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80135cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d0:	d507      	bpl.n	80135e2 <MEMS_runMagCal+0x862>
 80135d2:	eef4 6a47 	vcmp.f32	s13, s14
 80135d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135da:	9b03      	ldr	r3, [sp, #12]
 80135dc:	bf48      	it	mi
 80135de:	2302      	movmi	r3, #2
 80135e0:	9303      	str	r3, [sp, #12]
 80135e2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80135e6:	9a03      	ldr	r2, [sp, #12]
 80135e8:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 80135ec:	2bc8      	cmp	r3, #200	; 0xc8
 80135ee:	d902      	bls.n	80135f6 <MEMS_runMagCal+0x876>
 80135f0:	2302      	movs	r3, #2
 80135f2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80135f6:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80135fa:	ecbd 8b0a 	vpop	{d8-d12}
 80135fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013602:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8013606:	4291      	cmp	r1, r2
 8013608:	f4ff abea 	bcc.w	8012de0 <MEMS_runMagCal+0x60>
 801360c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013610:	2b00      	cmp	r3, #0
 8013612:	f47f abf9 	bne.w	8012e08 <MEMS_runMagCal+0x88>
 8013616:	f7ff bbed 	b.w	8012df4 <MEMS_runMagCal+0x74>
 801361a:	2702      	movs	r7, #2
 801361c:	2300      	movs	r3, #0
 801361e:	9307      	str	r3, [sp, #28]
 8013620:	9303      	str	r3, [sp, #12]
 8013622:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80135b0 <MEMS_runMagCal+0x830>
 8013626:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801362e:	f140 8260 	bpl.w	8013af2 <MEMS_runMagCal+0xd72>
 8013632:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 80135b4 <MEMS_runMagCal+0x834>
 8013636:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801363a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801363e:	2b01      	cmp	r3, #1
 8013640:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013644:	d911      	bls.n	801366a <MEMS_runMagCal+0x8ea>
 8013646:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801364a:	ee17 3a90 	vmov	r3, s15
 801364e:	b29b      	uxth	r3, r3
 8013650:	2bc7      	cmp	r3, #199	; 0xc7
 8013652:	f201 8359 	bhi.w	8014d08 <MEMS_runMagCal+0x1f88>
 8013656:	2300      	movs	r3, #0
 8013658:	22ff      	movs	r2, #255	; 0xff
 801365a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 801365e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013662:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 8013666:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 801366a:	2f00      	cmp	r7, #0
 801366c:	f040 824d 	bne.w	8013b0a <MEMS_runMagCal+0xd8a>
 8013670:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 8013674:	2b00      	cmp	r3, #0
 8013676:	f2c0 839e 	blt.w	8013db6 <MEMS_runMagCal+0x1036>
 801367a:	f89b 6011 	ldrb.w	r6, [fp, #17]
 801367e:	1c5a      	adds	r2, r3, #1
 8013680:	fbb2 f3f6 	udiv	r3, r2, r6
 8013684:	fb06 2313 	mls	r3, r6, r3, r2
 8013688:	b25b      	sxtb	r3, r3
 801368a:	461d      	mov	r5, r3
 801368c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8013690:	f88b 3012 	strb.w	r3, [fp, #18]
 8013694:	3401      	adds	r4, #1
 8013696:	42b4      	cmp	r4, r6
 8013698:	bfa8      	it	ge
 801369a:	4634      	movge	r4, r6
 801369c:	fa5f f884 	uxtb.w	r8, r4
 80136a0:	f88b 8010 	strb.w	r8, [fp, #16]
 80136a4:	f002 fae0 	bl	8015c68 <roundf>
 80136a8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80136ac:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 80136b0:	ee10 2a10 	vmov	r2, s0
 80136b4:	829a      	strh	r2, [r3, #20]
 80136b6:	2f00      	cmp	r7, #0
 80136b8:	f040 8227 	bne.w	8013b0a <MEMS_runMagCal+0xd8a>
 80136bc:	f8db 200c 	ldr.w	r2, [fp, #12]
 80136c0:	b122      	cbz	r2, 80136cc <MEMS_runMagCal+0x94c>
 80136c2:	9908      	ldr	r1, [sp, #32]
 80136c4:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 80136c8:	4299      	cmp	r1, r3
 80136ca:	d394      	bcc.n	80135f6 <MEMS_runMagCal+0x876>
 80136cc:	9b03      	ldr	r3, [sp, #12]
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d091      	beq.n	80135f6 <MEMS_runMagCal+0x876>
 80136d2:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 80136d6:	1ebb      	subs	r3, r7, #2
 80136d8:	2b01      	cmp	r3, #1
 80136da:	f240 8232 	bls.w	8013b42 <MEMS_runMagCal+0xdc2>
 80136de:	9b05      	ldr	r3, [sp, #20]
 80136e0:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 80135b8 <MEMS_runMagCal+0x838>
 80136e4:	ed93 8a01 	vldr	s16, [r3, #4]
 80136e8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80136ec:	9a06      	ldr	r2, [sp, #24]
 80136ee:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 80136f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136f8:	eec7 8a08 	vdiv.f32	s17, s14, s16
 80136fc:	fb02 1404 	mla	r4, r2, r4, r1
 8013700:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8013704:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8013708:	3310      	adds	r3, #16
 801370a:	42a3      	cmp	r3, r4
 801370c:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013710:	ee28 9a89 	vmul.f32	s18, s17, s18
 8013714:	ee0c 2a10 	vmov	s24, r2
 8013718:	ee69 7a27 	vmul.f32	s15, s18, s15
 801371c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013720:	ee17 2a90 	vmov	r2, s15
 8013724:	fa1f f982 	uxth.w	r9, r2
 8013728:	f080 81fe 	bcs.w	8013b28 <MEMS_runMagCal+0xda8>
 801372c:	f242 3328 	movw	r3, #9000	; 0x2328
 8013730:	429c      	cmp	r4, r3
 8013732:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013736:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 801373a:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 801373e:	bf1a      	itte	ne
 8013740:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8013744:	3c28      	subne	r4, #40	; 0x28
 8013746:	2400      	moveq	r4, #0
 8013748:	42a8      	cmp	r0, r5
 801374a:	f102 0201 	add.w	r2, r2, #1
 801374e:	f000 8727 	beq.w	80145a0 <MEMS_runMagCal+0x1820>
 8013752:	1a12      	subs	r2, r2, r0
 8013754:	fb92 f1f5 	sdiv	r1, r2, r5
 8013758:	fb05 2211 	mls	r2, r5, r1, r2
 801375c:	2a00      	cmp	r2, #0
 801375e:	bfb8      	it	lt
 8013760:	1952      	addlt	r2, r2, r5
 8013762:	b211      	sxth	r1, r2
 8013764:	b358      	cbz	r0, 80137be <MEMS_runMagCal+0xa3e>
 8013766:	3801      	subs	r0, #1
 8013768:	b280      	uxth	r0, r0
 801376a:	3001      	adds	r0, #1
 801376c:	1b36      	subs	r6, r6, r4
 801376e:	9f03      	ldr	r7, [sp, #12]
 8013770:	b2b6      	uxth	r6, r6
 8013772:	4408      	add	r0, r1
 8013774:	e002      	b.n	801377c <MEMS_runMagCal+0x9fc>
 8013776:	3101      	adds	r1, #1
 8013778:	4281      	cmp	r1, r0
 801377a:	d01b      	beq.n	80137b4 <MEMS_runMagCal+0xa34>
 801377c:	fb91 f3f5 	sdiv	r3, r1, r5
 8013780:	fb05 1313 	mls	r3, r5, r3, r1
 8013784:	b2db      	uxtb	r3, r3
 8013786:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801378a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801378e:	4432      	add	r2, r6
 8013790:	b212      	sxth	r2, r2
 8013792:	2a00      	cmp	r2, #0
 8013794:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013798:	daed      	bge.n	8013776 <MEMS_runMagCal+0x9f6>
 801379a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801379e:	1e5a      	subs	r2, r3, #1
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	f000 8306 	beq.w	8013db2 <MEMS_runMagCal+0x1032>
 80137a6:	3101      	adds	r1, #1
 80137a8:	4281      	cmp	r1, r0
 80137aa:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80137ae:	f04f 0701 	mov.w	r7, #1
 80137b2:	d1e3      	bne.n	801377c <MEMS_runMagCal+0x9fc>
 80137b4:	2f01      	cmp	r7, #1
 80137b6:	f001 80ea 	beq.w	801498e <MEMS_runMagCal+0x1c0e>
 80137ba:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80137be:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 80137c2:	2800      	cmp	r0, #0
 80137c4:	f000 81b6 	beq.w	8013b34 <MEMS_runMagCal+0xdb4>
 80137c8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80137cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80137ce:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80137d2:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80137d6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80137da:	3308      	adds	r3, #8
 80137dc:	441c      	add	r4, r3
 80137de:	42a2      	cmp	r2, r4
 80137e0:	f200 86e6 	bhi.w	80145b0 <MEMS_runMagCal+0x1830>
 80137e4:	9b07      	ldr	r3, [sp, #28]
 80137e6:	b923      	cbnz	r3, 80137f2 <MEMS_runMagCal+0xa72>
 80137e8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80137ec:	2b0a      	cmp	r3, #10
 80137ee:	f240 81a5 	bls.w	8013b3c <MEMS_runMagCal+0xdbc>
 80137f2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80137f6:	9302      	str	r3, [sp, #8]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	f000 819f 	beq.w	8013b3c <MEMS_runMagCal+0xdbc>
 80137fe:	ee29 aa09 	vmul.f32	s20, s18, s18
 8013802:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 80135bc <MEMS_runMagCal+0x83c>
 8013806:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 80135c0 <MEMS_runMagCal+0x840>
 801380a:	9b03      	ldr	r3, [sp, #12]
 801380c:	9309      	str	r3, [sp, #36]	; 0x24
 801380e:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 8013812:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013816:	2100      	movs	r1, #0
 8013818:	ee2a aa26 	vmul.f32	s20, s20, s13
 801381c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8013820:	ee69 9a29 	vmul.f32	s19, s18, s19
 8013824:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013828:	468a      	mov	sl, r1
 801382a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801382c:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8013830:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 8013834:	2b00      	cmp	r3, #0
 8013836:	f000 80e2 	beq.w	80139fe <MEMS_runMagCal+0xc7e>
 801383a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801383e:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8013842:	ee07 4a90 	vmov	s15, r4
 8013846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801384a:	eef0 7ae7 	vabs.f32	s15, s15
 801384e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013856:	f100 820b 	bmi.w	8013c70 <MEMS_runMagCal+0xef0>
 801385a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801385e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013862:	2f00      	cmp	r7, #0
 8013864:	f000 8223 	beq.w	8013cae <MEMS_runMagCal+0xf2e>
 8013868:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 801386c:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8013870:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 8013874:	1b52      	subs	r2, r2, r5
 8013876:	fb02 f102 	mul.w	r1, r2, r2
 801387a:	1b02      	subs	r2, r0, r4
 801387c:	fb02 1202 	mla	r2, r2, r2, r1
 8013880:	1b9b      	subs	r3, r3, r6
 8013882:	fb03 2303 	mla	r3, r3, r3, r2
 8013886:	ee07 3a90 	vmov	s15, r3
 801388a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801388e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013896:	f300 80b2 	bgt.w	80139fe <MEMS_runMagCal+0xc7e>
 801389a:	fb94 f3f9 	sdiv	r3, r4, r9
 801389e:	fb09 4313 	mls	r3, r9, r3, r4
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	bfb8      	it	lt
 80138a6:	444b      	addlt	r3, r9
 80138a8:	b21b      	sxth	r3, r3
 80138aa:	ee00 3a10 	vmov	s0, r3
 80138ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80138b2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80138b6:	f002 f9d7 	bl	8015c68 <roundf>
 80138ba:	fb95 f3f9 	sdiv	r3, r5, r9
 80138be:	fb09 5313 	mls	r3, r9, r3, r5
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	bfb8      	it	lt
 80138c6:	444b      	addlt	r3, r9
 80138c8:	b21b      	sxth	r3, r3
 80138ca:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80138ce:	ee00 3a10 	vmov	s0, r3
 80138d2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80138d6:	edcd 7a04 	vstr	s15, [sp, #16]
 80138da:	ee20 0a08 	vmul.f32	s0, s0, s16
 80138de:	f002 f9c3 	bl	8015c68 <roundf>
 80138e2:	fb96 f3f9 	sdiv	r3, r6, r9
 80138e6:	fb09 6313 	mls	r3, r9, r3, r6
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	bfb8      	it	lt
 80138ee:	444b      	addlt	r3, r9
 80138f0:	b21b      	sxth	r3, r3
 80138f2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80138f6:	ee00 3a10 	vmov	s0, r3
 80138fa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80138fe:	f89d 8010 	ldrb.w	r8, [sp, #16]
 8013902:	edcd 7a04 	vstr	s15, [sp, #16]
 8013906:	f89d 2010 	ldrb.w	r2, [sp, #16]
 801390a:	9204      	str	r2, [sp, #16]
 801390c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013910:	f002 f9aa 	bl	8015c68 <roundf>
 8013914:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013918:	f1b8 0f1f 	cmp.w	r8, #31
 801391c:	edcd 7a06 	vstr	s15, [sp, #24]
 8013920:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013924:	9106      	str	r1, [sp, #24]
 8013926:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 801392a:	f240 823d 	bls.w	8013da8 <MEMS_runMagCal+0x1028>
 801392e:	f1a8 0220 	sub.w	r2, r8, #32
 8013932:	2101      	movs	r1, #1
 8013934:	fa01 f202 	lsl.w	r2, r1, r2
 8013938:	401a      	ands	r2, r3
 801393a:	9804      	ldr	r0, [sp, #16]
 801393c:	281f      	cmp	r0, #31
 801393e:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 8013942:	f240 821f 	bls.w	8013d84 <MEMS_runMagCal+0x1004>
 8013946:	f1a0 0120 	sub.w	r1, r0, #32
 801394a:	2001      	movs	r0, #1
 801394c:	fa00 f101 	lsl.w	r1, r0, r1
 8013950:	ea01 0c03 	and.w	ip, r1, r3
 8013954:	9906      	ldr	r1, [sp, #24]
 8013956:	291f      	cmp	r1, #31
 8013958:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801395c:	f240 821e 	bls.w	8013d9c <MEMS_runMagCal+0x101c>
 8013960:	f1a1 0020 	sub.w	r0, r1, #32
 8013964:	2101      	movs	r1, #1
 8013966:	fa01 f000 	lsl.w	r0, r1, r0
 801396a:	4003      	ands	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	f040 812b 	bne.w	8013bc8 <MEMS_runMagCal+0xe48>
 8013972:	ea52 030c 	orrs.w	r3, r2, ip
 8013976:	f040 812c 	bne.w	8013bd2 <MEMS_runMagCal+0xe52>
 801397a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801397e:	930a      	str	r3, [sp, #40]	; 0x28
 8013980:	461a      	mov	r2, r3
 8013982:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013986:	3301      	adds	r3, #1
 8013988:	4694      	mov	ip, r2
 801398a:	930b      	str	r3, [sp, #44]	; 0x2c
 801398c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801398e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013992:	3701      	adds	r7, #1
 8013994:	4567      	cmp	r7, ip
 8013996:	bfa8      	it	ge
 8013998:	4667      	movge	r7, ip
 801399a:	fb0c 2c13 	mls	ip, ip, r3, r2
 801399e:	b2ff      	uxtb	r7, r7
 80139a0:	fa4f fc8c 	sxtb.w	ip, ip
 80139a4:	9905      	ldr	r1, [sp, #20]
 80139a6:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 80139aa:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80139ae:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80139b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139b4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80139b8:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80139bc:	1a9b      	subs	r3, r3, r2
 80139be:	fb01 330a 	mla	r3, r1, sl, r3
 80139c2:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 80139c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139c8:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 80139cc:	429f      	cmp	r7, r3
 80139ce:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 80139d2:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 80139d6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80139da:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80139de:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80139e2:	f000 8758 	beq.w	8014896 <MEMS_runMagCal+0x1b16>
 80139e6:	9b06      	ldr	r3, [sp, #24]
 80139e8:	9a04      	ldr	r2, [sp, #16]
 80139ea:	ee1c 0a10 	vmov	r0, s24
 80139ee:	4641      	mov	r1, r8
 80139f0:	f7f8 f874 	bl	800badc <MEMS_setMagIndexToOne>
 80139f4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80139f8:	9302      	str	r3, [sp, #8]
 80139fa:	2301      	movs	r3, #1
 80139fc:	9309      	str	r3, [sp, #36]	; 0x24
 80139fe:	9b02      	ldr	r3, [sp, #8]
 8013a00:	f10a 0a01 	add.w	sl, sl, #1
 8013a04:	fa0f fa8a 	sxth.w	sl, sl
 8013a08:	459a      	cmp	sl, r3
 8013a0a:	4651      	mov	r1, sl
 8013a0c:	f6ff af0d 	blt.w	801382a <MEMS_runMagCal+0xaaa>
 8013a10:	f89b 3000 	ldrb.w	r3, [fp]
 8013a14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a16:	431a      	orrs	r2, r3
 8013a18:	b2d3      	uxtb	r3, r2
 8013a1a:	f88b 3000 	strb.w	r3, [fp]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f43f ade9 	beq.w	80135f6 <MEMS_runMagCal+0x876>
 8013a24:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013a28:	9306      	str	r3, [sp, #24]
 8013a2a:	2b19      	cmp	r3, #25
 8013a2c:	f67f ade3 	bls.w	80135f6 <MEMS_runMagCal+0x876>
 8013a30:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013a34:	9309      	str	r3, [sp, #36]	; 0x24
 8013a36:	b123      	cbz	r3, 8013a42 <MEMS_runMagCal+0xcc2>
 8013a38:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f040 8583 	bne.w	8014548 <MEMS_runMagCal+0x17c8>
 8013a42:	9b07      	ldr	r3, [sp, #28]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	f040 872f 	bne.w	80148a8 <MEMS_runMagCal+0x1b28>
 8013a4a:	9b05      	ldr	r3, [sp, #20]
 8013a4c:	9903      	ldr	r1, [sp, #12]
 8013a4e:	ed93 8a01 	vldr	s16, [r3, #4]
 8013a52:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013a56:	9302      	str	r3, [sp, #8]
 8013a58:	2600      	movs	r6, #0
 8013a5a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8013a5e:	9304      	str	r3, [sp, #16]
 8013a60:	f04f 0a01 	mov.w	sl, #1
 8013a64:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013a68:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8013a6c:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013a70:	9624      	str	r6, [sp, #144]	; 0x90
 8013a72:	4657      	mov	r7, sl
 8013a74:	460b      	mov	r3, r1
 8013a76:	460c      	mov	r4, r1
 8013a78:	e013      	b.n	8013aa2 <MEMS_runMagCal+0xd22>
 8013a7a:	f1b9 0f00 	cmp.w	r9, #0
 8013a7e:	bf18      	it	ne
 8013a80:	3101      	addne	r1, #1
 8013a82:	2d00      	cmp	r5, #0
 8013a84:	bf18      	it	ne
 8013a86:	3401      	addne	r4, #1
 8013a88:	2a00      	cmp	r2, #0
 8013a8a:	bf18      	it	ne
 8013a8c:	3301      	addne	r3, #1
 8013a8e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013a92:	b2c9      	uxtb	r1, r1
 8013a94:	b2e4      	uxtb	r4, r4
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	f000 81a2 	beq.w	8013de0 <MEMS_runMagCal+0x1060>
 8013a9c:	3601      	adds	r6, #1
 8013a9e:	fa5f fa8c 	uxtb.w	sl, ip
 8013aa2:	9804      	ldr	r0, [sp, #16]
 8013aa4:	f1a6 0220 	sub.w	r2, r6, #32
 8013aa8:	fa07 f202 	lsl.w	r2, r7, r2
 8013aac:	ea02 0500 	and.w	r5, r2, r0
 8013ab0:	9802      	ldr	r0, [sp, #8]
 8013ab2:	2e1f      	cmp	r6, #31
 8013ab4:	ea08 0902 	and.w	r9, r8, r2
 8013ab8:	f10a 0c01 	add.w	ip, sl, #1
 8013abc:	ea02 0200 	and.w	r2, r2, r0
 8013ac0:	fa07 f006 	lsl.w	r0, r7, r6
 8013ac4:	d8d9      	bhi.n	8013a7a <MEMS_runMagCal+0xcfa>
 8013ac6:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 8013aca:	ea00 0902 	and.w	r9, r0, r2
 8013ace:	4005      	ands	r5, r0
 8013ad0:	ea0e 0000 	and.w	r0, lr, r0
 8013ad4:	f1b9 0f00 	cmp.w	r9, #0
 8013ad8:	bf18      	it	ne
 8013ada:	3401      	addne	r4, #1
 8013adc:	2d00      	cmp	r5, #0
 8013ade:	bf0c      	ite	eq
 8013ae0:	461d      	moveq	r5, r3
 8013ae2:	1c5d      	addne	r5, r3, #1
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	bf18      	it	ne
 8013ae8:	3101      	addne	r1, #1
 8013aea:	b2e4      	uxtb	r4, r4
 8013aec:	b2eb      	uxtb	r3, r5
 8013aee:	b2c9      	uxtb	r1, r1
 8013af0:	e7d4      	b.n	8013a9c <MEMS_runMagCal+0xd1c>
 8013af2:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013af6:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013dcc <MEMS_runMagCal+0x104c>
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013b00:	f63f ada9 	bhi.w	8013656 <MEMS_runMagCal+0x8d6>
 8013b04:	2f00      	cmp	r7, #0
 8013b06:	f43f adb3 	beq.w	8013670 <MEMS_runMagCal+0x8f0>
 8013b0a:	9908      	ldr	r1, [sp, #32]
 8013b0c:	f8cb 100c 	str.w	r1, [fp, #12]
 8013b10:	2200      	movs	r2, #0
 8013b12:	23ff      	movs	r3, #255	; 0xff
 8013b14:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013b18:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013b1c:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013b20:	ecbd 8b0a 	vpop	{d8-d12}
 8013b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b28:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013b2c:	4634      	mov	r4, r6
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	f47f ae4a 	bne.w	80137c8 <MEMS_runMagCal+0xa48>
 8013b34:	9b07      	ldr	r3, [sp, #28]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	f47f ae5b 	bne.w	80137f2 <MEMS_runMagCal+0xa72>
 8013b3c:	9b03      	ldr	r3, [sp, #12]
 8013b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b40:	e766      	b.n	8013a10 <MEMS_runMagCal+0xc90>
 8013b42:	45b0      	cmp	r8, r6
 8013b44:	f000 86b9 	beq.w	80148ba <MEMS_runMagCal+0x1b3a>
 8013b48:	2f03      	cmp	r7, #3
 8013b4a:	f47f adc8 	bne.w	80136de <MEMS_runMagCal+0x95e>
 8013b4e:	ee07 2a90 	vmov	s15, r2
 8013b52:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013dd0 <MEMS_runMagCal+0x1050>
 8013b56:	ed9b 7a01 	vldr	s14, [fp, #4]
 8013b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b5e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013b62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6e:	f77f adb6 	ble.w	80136de <MEMS_runMagCal+0x95e>
 8013b72:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	f43f adb1 	beq.w	80136de <MEMS_runMagCal+0x95e>
 8013b7c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013b80:	330a      	adds	r3, #10
 8013b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013b86:	ee07 3a90 	vmov	s15, r3
 8013b8a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b92:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b9a:	f77f ada0 	ble.w	80136de <MEMS_runMagCal+0x95e>
 8013b9e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	f47f ad9b 	bne.w	80136de <MEMS_runMagCal+0x95e>
 8013ba8:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f43f ad22 	beq.w	80135f6 <MEMS_runMagCal+0x876>
 8013bb2:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013bb6:	2bff      	cmp	r3, #255	; 0xff
 8013bb8:	f47f ad1d 	bne.w	80135f6 <MEMS_runMagCal+0x876>
 8013bbc:	e58f      	b.n	80136de <MEMS_runMagCal+0x95e>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	9307      	str	r3, [sp, #28]
 8013bc2:	9303      	str	r3, [sp, #12]
 8013bc4:	2700      	movs	r7, #0
 8013bc6:	e52c      	b.n	8013622 <MEMS_runMagCal+0x8a2>
 8013bc8:	b11a      	cbz	r2, 8013bd2 <MEMS_runMagCal+0xe52>
 8013bca:	f1bc 0f00 	cmp.w	ip, #0
 8013bce:	f47f af16 	bne.w	80139fe <MEMS_runMagCal+0xc7e>
 8013bd2:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013bd6:	930a      	str	r3, [sp, #40]	; 0x28
 8013bd8:	461a      	mov	r2, r3
 8013bda:	4297      	cmp	r7, r2
 8013bdc:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013be0:	f000 848f 	beq.w	8014502 <MEMS_runMagCal+0x1782>
 8013be4:	3301      	adds	r3, #1
 8013be6:	4611      	mov	r1, r2
 8013be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013bea:	1bdb      	subs	r3, r3, r7
 8013bec:	fb93 f2f2 	sdiv	r2, r3, r2
 8013bf0:	fb01 3212 	mls	r2, r1, r2, r3
 8013bf4:	2a00      	cmp	r2, #0
 8013bf6:	bfbc      	itt	lt
 8013bf8:	460b      	movlt	r3, r1
 8013bfa:	18d2      	addlt	r2, r2, r3
 8013bfc:	468c      	mov	ip, r1
 8013bfe:	b212      	sxth	r2, r2
 8013c00:	f107 3eff 	add.w	lr, r7, #4294967295
 8013c04:	fa5f fe8e 	uxtb.w	lr, lr
 8013c08:	f10e 0e01 	add.w	lr, lr, #1
 8013c0c:	4496      	add	lr, r2
 8013c0e:	e002      	b.n	8013c16 <MEMS_runMagCal+0xe96>
 8013c10:	4572      	cmp	r2, lr
 8013c12:	f43f aebb 	beq.w	801398c <MEMS_runMagCal+0xc0c>
 8013c16:	fb92 f3fc 	sdiv	r3, r2, ip
 8013c1a:	fb0c 2313 	mls	r3, ip, r3, r2
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013c24:	3201      	adds	r2, #1
 8013c26:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013c2a:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013c2e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013c32:	1a20      	subs	r0, r4, r0
 8013c34:	1a69      	subs	r1, r5, r1
 8013c36:	ee07 0a90 	vmov	s15, r0
 8013c3a:	ee06 1a90 	vmov	s13, r1
 8013c3e:	1af3      	subs	r3, r6, r3
 8013c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013c48:	ee07 3a10 	vmov	s14, r3
 8013c4c:	eef0 7ae7 	vabs.f32	s15, s15
 8013c50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c54:	eef0 6ae6 	vabs.f32	s13, s13
 8013c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013c5c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013c64:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c6c:	ddd0      	ble.n	8013c10 <MEMS_runMagCal+0xe90>
 8013c6e:	e6c6      	b.n	80139fe <MEMS_runMagCal+0xc7e>
 8013c70:	ee07 5a90 	vmov	s15, r5
 8013c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c78:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013c7c:	eef0 7ae7 	vabs.f32	s15, s15
 8013c80:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c88:	f77f ade9 	ble.w	801385e <MEMS_runMagCal+0xade>
 8013c8c:	ee07 6a90 	vmov	s15, r6
 8013c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c94:	eef0 7ae7 	vabs.f32	s15, s15
 8013c98:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ca0:	f73f aead 	bgt.w	80139fe <MEMS_runMagCal+0xc7e>
 8013ca4:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013ca8:	2f00      	cmp	r7, #0
 8013caa:	f47f addd 	bne.w	8013868 <MEMS_runMagCal+0xae8>
 8013cae:	fb94 f2f9 	sdiv	r2, r4, r9
 8013cb2:	f04f 0301 	mov.w	r3, #1
 8013cb6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8013cba:	9b05      	ldr	r3, [sp, #20]
 8013cbc:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013cc0:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cc6:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 8013cca:	fb09 4212 	mls	r2, r9, r2, r4
 8013cce:	2a00      	cmp	r2, #0
 8013cd0:	fb01 3300 	mla	r3, r1, r0, r3
 8013cd4:	bfb8      	it	lt
 8013cd6:	444a      	addlt	r2, r9
 8013cd8:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 8013cdc:	b213      	sxth	r3, r2
 8013cde:	ee00 3a10 	vmov	s0, r3
 8013ce2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013ce6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 8013cea:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 8013cee:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 8013cf2:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 8013cf6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013cfa:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013cfe:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013d02:	f001 ffb1 	bl	8015c68 <roundf>
 8013d06:	fb95 f3f9 	sdiv	r3, r5, r9
 8013d0a:	fb09 5513 	mls	r5, r9, r3, r5
 8013d0e:	2d00      	cmp	r5, #0
 8013d10:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d14:	bfb8      	it	lt
 8013d16:	444d      	addlt	r5, r9
 8013d18:	b22d      	sxth	r5, r5
 8013d1a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013d1e:	ee07 5a90 	vmov	s15, r5
 8013d22:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013d26:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013d2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d2e:	f001 ff9b 	bl	8015c68 <roundf>
 8013d32:	fb96 f3f9 	sdiv	r3, r6, r9
 8013d36:	fb09 6613 	mls	r6, r9, r3, r6
 8013d3a:	2e00      	cmp	r6, #0
 8013d3c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d40:	bfb8      	it	lt
 8013d42:	444e      	addlt	r6, r9
 8013d44:	b236      	sxth	r6, r6
 8013d46:	edcd 7a02 	vstr	s15, [sp, #8]
 8013d4a:	ee07 6a90 	vmov	s15, r6
 8013d4e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013d52:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013d56:	9204      	str	r2, [sp, #16]
 8013d58:	2301      	movs	r3, #1
 8013d5a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d60:	f001 ff82 	bl	8015c68 <roundf>
 8013d64:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d68:	9a04      	ldr	r2, [sp, #16]
 8013d6a:	edcd 7a02 	vstr	s15, [sp, #8]
 8013d6e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013d72:	ee1c 0a10 	vmov	r0, s24
 8013d76:	4621      	mov	r1, r4
 8013d78:	f7f7 feb0 	bl	800badc <MEMS_setMagIndexToOne>
 8013d7c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013d80:	9302      	str	r3, [sp, #8]
 8013d82:	e63c      	b.n	80139fe <MEMS_runMagCal+0xc7e>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2001      	movs	r0, #1
 8013d88:	fa00 f303 	lsl.w	r3, r0, r3
 8013d8c:	ea01 0c03 	and.w	ip, r1, r3
 8013d90:	9906      	ldr	r1, [sp, #24]
 8013d92:	291f      	cmp	r1, #31
 8013d94:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013d98:	f63f ade2 	bhi.w	8013960 <MEMS_runMagCal+0xbe0>
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	2101      	movs	r1, #1
 8013da0:	fa01 f303 	lsl.w	r3, r1, r3
 8013da4:	4003      	ands	r3, r0
 8013da6:	e5e1      	b.n	801396c <MEMS_runMagCal+0xbec>
 8013da8:	2301      	movs	r3, #1
 8013daa:	fa03 f308 	lsl.w	r3, r3, r8
 8013dae:	401a      	ands	r2, r3
 8013db0:	e5c3      	b.n	801393a <MEMS_runMagCal+0xbba>
 8013db2:	2701      	movs	r7, #1
 8013db4:	e4df      	b.n	8013776 <MEMS_runMagCal+0x9f6>
 8013db6:	2500      	movs	r5, #0
 8013db8:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013dbc:	462b      	mov	r3, r5
 8013dbe:	e465      	b.n	801368c <MEMS_runMagCal+0x90c>
 8013dc0:	460f      	mov	r7, r1
 8013dc2:	e42b      	b.n	801361c <MEMS_runMagCal+0x89c>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	9304      	str	r3, [sp, #16]
 8013dc8:	f7ff b941 	b.w	801304e <MEMS_runMagCal+0x2ce>
 8013dcc:	477fff00 	.word	0x477fff00
 8013dd0:	3a83126f 	.word	0x3a83126f
 8013dd4:	42340000 	.word	0x42340000
 8013dd8:	3faccccd 	.word	0x3faccccd
 8013ddc:	00000000 	.word	0x00000000
 8013de0:	2905      	cmp	r1, #5
 8013de2:	f240 8383 	bls.w	80144ec <MEMS_runMagCal+0x176c>
 8013de6:	2c05      	cmp	r4, #5
 8013de8:	f240 8380 	bls.w	80144ec <MEMS_runMagCal+0x176c>
 8013dec:	2b05      	cmp	r3, #5
 8013dee:	f240 837d 	bls.w	80144ec <MEMS_runMagCal+0x176c>
 8013df2:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013df6:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013dfa:	9302      	str	r3, [sp, #8]
 8013dfc:	9b06      	ldr	r3, [sp, #24]
 8013dfe:	4553      	cmp	r3, sl
 8013e00:	f000 85f1 	beq.w	80149e6 <MEMS_runMagCal+0x1c66>
 8013e04:	461a      	mov	r2, r3
 8013e06:	9b02      	ldr	r3, [sp, #8]
 8013e08:	3301      	adds	r3, #1
 8013e0a:	9304      	str	r3, [sp, #16]
 8013e0c:	1a9b      	subs	r3, r3, r2
 8013e0e:	fb93 f2fa 	sdiv	r2, r3, sl
 8013e12:	fb0a 3212 	mls	r2, sl, r2, r3
 8013e16:	2a00      	cmp	r2, #0
 8013e18:	bfb8      	it	lt
 8013e1a:	4452      	addlt	r2, sl
 8013e1c:	46d1      	mov	r9, sl
 8013e1e:	b212      	sxth	r2, r2
 8013e20:	9906      	ldr	r1, [sp, #24]
 8013e22:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013e26:	f101 38ff 	add.w	r8, r1, #4294967295
 8013e2a:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013e2e:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013e32:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013e36:	fa5f f888 	uxtb.w	r8, r8
 8013e3a:	f108 0801 	add.w	r8, r8, #1
 8013e3e:	468e      	mov	lr, r1
 8013e40:	463e      	mov	r6, r7
 8013e42:	46ac      	mov	ip, r5
 8013e44:	4490      	add	r8, r2
 8013e46:	fb92 f3f9 	sdiv	r3, r2, r9
 8013e4a:	fb09 2313 	mls	r3, r9, r3, r2
 8013e4e:	b2db      	uxtb	r3, r3
 8013e50:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013e54:	3201      	adds	r2, #1
 8013e56:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013e5a:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013e5e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013e62:	42a1      	cmp	r1, r4
 8013e64:	bfb8      	it	lt
 8013e66:	4621      	movlt	r1, r4
 8013e68:	45a6      	cmp	lr, r4
 8013e6a:	bfa8      	it	ge
 8013e6c:	46a6      	movge	lr, r4
 8013e6e:	4285      	cmp	r5, r0
 8013e70:	bfb8      	it	lt
 8013e72:	4605      	movlt	r5, r0
 8013e74:	4584      	cmp	ip, r0
 8013e76:	bfa8      	it	ge
 8013e78:	4684      	movge	ip, r0
 8013e7a:	429f      	cmp	r7, r3
 8013e7c:	bfb8      	it	lt
 8013e7e:	461f      	movlt	r7, r3
 8013e80:	429e      	cmp	r6, r3
 8013e82:	bfa8      	it	ge
 8013e84:	461e      	movge	r6, r3
 8013e86:	4542      	cmp	r2, r8
 8013e88:	d1dd      	bne.n	8013e46 <MEMS_runMagCal+0x10c6>
 8013e8a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e8e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013e92:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013e96:	eba1 010e 	sub.w	r1, r1, lr
 8013e9a:	eba5 050c 	sub.w	r5, r5, ip
 8013e9e:	1bbe      	subs	r6, r7, r6
 8013ea0:	b209      	sxth	r1, r1
 8013ea2:	b22d      	sxth	r5, r5
 8013ea4:	b236      	sxth	r6, r6
 8013ea6:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013dd4 <MEMS_runMagCal+0x1054>
 8013eaa:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	f040 8593 	bne.w	80149da <MEMS_runMagCal+0x1c5a>
 8013eb4:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013eb8:	fab3 f883 	clz	r8, r3
 8013ebc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013ec0:	ee06 1a90 	vmov	s13, r1
 8013ec4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ecc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ed0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed8:	f300 8562 	bgt.w	80149a0 <MEMS_runMagCal+0x1c20>
 8013edc:	ee06 5a10 	vmov	s12, r5
 8013ee0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013ee4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eec:	f100 8558 	bmi.w	80149a0 <MEMS_runMagCal+0x1c20>
 8013ef0:	ee05 6a90 	vmov	s11, r6
 8013ef4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013ef8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f00:	f100 854e 	bmi.w	80149a0 <MEMS_runMagCal+0x1c20>
 8013f04:	428d      	cmp	r5, r1
 8013f06:	462b      	mov	r3, r5
 8013f08:	bfb8      	it	lt
 8013f0a:	460b      	movlt	r3, r1
 8013f0c:	42b3      	cmp	r3, r6
 8013f0e:	461a      	mov	r2, r3
 8013f10:	bfb8      	it	lt
 8013f12:	4632      	movlt	r2, r6
 8013f14:	428e      	cmp	r6, r1
 8013f16:	4633      	mov	r3, r6
 8013f18:	bfa8      	it	ge
 8013f1a:	460b      	movge	r3, r1
 8013f1c:	42ab      	cmp	r3, r5
 8013f1e:	bfa8      	it	ge
 8013f20:	462b      	movge	r3, r5
 8013f22:	428a      	cmp	r2, r1
 8013f24:	9202      	str	r2, [sp, #8]
 8013f26:	f340 8588 	ble.w	8014a3a <MEMS_runMagCal+0x1cba>
 8013f2a:	4299      	cmp	r1, r3
 8013f2c:	bfb8      	it	lt
 8013f2e:	4619      	movlt	r1, r3
 8013f30:	42aa      	cmp	r2, r5
 8013f32:	dd02      	ble.n	8013f3a <MEMS_runMagCal+0x11ba>
 8013f34:	42ab      	cmp	r3, r5
 8013f36:	bfb8      	it	lt
 8013f38:	4629      	movlt	r1, r5
 8013f3a:	9a02      	ldr	r2, [sp, #8]
 8013f3c:	4296      	cmp	r6, r2
 8013f3e:	da02      	bge.n	8013f46 <MEMS_runMagCal+0x11c6>
 8013f40:	429e      	cmp	r6, r3
 8013f42:	bfc8      	it	gt
 8013f44:	4631      	movgt	r1, r6
 8013f46:	f1b8 0f00 	cmp.w	r8, #0
 8013f4a:	f000 8299 	beq.w	8014480 <MEMS_runMagCal+0x1700>
 8013f4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f56:	dc0d      	bgt.n	8013f74 <MEMS_runMagCal+0x11f4>
 8013f58:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f60:	dc08      	bgt.n	8013f74 <MEMS_runMagCal+0x11f4>
 8013f62:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6a:	bfcc      	ite	gt
 8013f6c:	f04f 0801 	movgt.w	r8, #1
 8013f70:	f04f 0800 	movle.w	r8, #0
 8013f74:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013dd8 <MEMS_runMagCal+0x1058>
 8013f78:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f80:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013f84:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8c:	f2c0 8558 	blt.w	8014a40 <MEMS_runMagCal+0x1cc0>
 8013f90:	ee07 1a90 	vmov	s15, r1
 8013f94:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013f98:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fa0:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa8:	f2c0 854a 	blt.w	8014a40 <MEMS_runMagCal+0x1cc0>
 8013fac:	9a02      	ldr	r2, [sp, #8]
 8013fae:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013fb2:	f280 8545 	bge.w	8014a40 <MEMS_runMagCal+0x1cc0>
 8013fb6:	ee07 3a90 	vmov	s15, r3
 8013fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fbe:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013fc2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013fc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fce:	f140 8537 	bpl.w	8014a40 <MEMS_runMagCal+0x1cc0>
 8013fd2:	9b06      	ldr	r3, [sp, #24]
 8013fd4:	4553      	cmp	r3, sl
 8013fd6:	f000 8569 	beq.w	8014aac <MEMS_runMagCal+0x1d2c>
 8013fda:	461a      	mov	r2, r3
 8013fdc:	9b04      	ldr	r3, [sp, #16]
 8013fde:	1a9b      	subs	r3, r3, r2
 8013fe0:	fb93 f7f9 	sdiv	r7, r3, r9
 8013fe4:	fb09 3717 	mls	r7, r9, r7, r3
 8013fe8:	2f00      	cmp	r7, #0
 8013fea:	bfb8      	it	lt
 8013fec:	4457      	addlt	r7, sl
 8013fee:	b23f      	sxth	r7, r7
 8013ff0:	9b03      	ldr	r3, [sp, #12]
 8013ff2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013ff6:	b27f      	sxtb	r7, r7
 8013ff8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013ffc:	9304      	str	r3, [sp, #16]
 8013ffe:	f1c7 0e01 	rsb	lr, r7, #1
 8014002:	469c      	mov	ip, r3
 8014004:	463b      	mov	r3, r7
 8014006:	fb93 f1f9 	sdiv	r1, r3, r9
 801400a:	fb09 3111 	mls	r1, r9, r1, r3
 801400e:	b24a      	sxtb	r2, r1
 8014010:	2a00      	cmp	r2, #0
 8014012:	f107 0701 	add.w	r7, r7, #1
 8014016:	bfb8      	it	lt
 8014018:	eb0a 0201 	addlt.w	r2, sl, r1
 801401c:	fb97 f3f9 	sdiv	r3, r7, r9
 8014020:	fb09 7313 	mls	r3, r9, r3, r7
 8014024:	bfb8      	it	lt
 8014026:	b252      	sxtblt	r2, r2
 8014028:	b25b      	sxtb	r3, r3
 801402a:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801402e:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8014032:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8014036:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 801403a:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 801403e:	1a45      	subs	r5, r0, r1
 8014040:	bf48      	it	mi
 8014042:	1a09      	submi	r1, r1, r0
 8014044:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8014048:	bf4c      	ite	mi
 801404a:	b20d      	sxthmi	r5, r1
 801404c:	b22d      	sxthpl	r5, r5
 801404e:	1a21      	subs	r1, r4, r0
 8014050:	bf48      	it	mi
 8014052:	1b01      	submi	r1, r0, r4
 8014054:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8014058:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 801405c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8014060:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8014064:	1a9b      	subs	r3, r3, r2
 8014066:	1a26      	subs	r6, r4, r0
 8014068:	b21b      	sxth	r3, r3
 801406a:	bf48      	it	mi
 801406c:	1b06      	submi	r6, r0, r4
 801406e:	2b00      	cmp	r3, #0
 8014070:	b209      	sxth	r1, r1
 8014072:	b236      	sxth	r6, r6
 8014074:	dd20      	ble.n	80140b8 <MEMS_runMagCal+0x1338>
 8014076:	4429      	add	r1, r5
 8014078:	440e      	add	r6, r1
 801407a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801407e:	fb02 f606 	mul.w	r6, r2, r6
 8014082:	ee07 6a90 	vmov	s15, r6
 8014086:	ee07 3a10 	vmov	s14, r3
 801408a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801408e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014092:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014096:	f10c 0c01 	add.w	ip, ip, #1
 801409a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801409e:	fa5f fc8c 	uxtb.w	ip, ip
 80140a2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80140a6:	ee17 3a90 	vmov	r3, s15
 80140aa:	b21b      	sxth	r3, r3
 80140ac:	2b96      	cmp	r3, #150	; 0x96
 80140ae:	dd03      	ble.n	80140b8 <MEMS_runMagCal+0x1338>
 80140b0:	9b04      	ldr	r3, [sp, #16]
 80140b2:	3301      	adds	r3, #1
 80140b4:	b2db      	uxtb	r3, r3
 80140b6:	9304      	str	r3, [sp, #16]
 80140b8:	eb0e 0307 	add.w	r3, lr, r7
 80140bc:	b2db      	uxtb	r3, r3
 80140be:	4598      	cmp	r8, r3
 80140c0:	d8a0      	bhi.n	8014004 <MEMS_runMagCal+0x1284>
 80140c2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80140c6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80140ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80140ce:	4563      	cmp	r3, ip
 80140d0:	f340 820c 	ble.w	80144ec <MEMS_runMagCal+0x176c>
 80140d4:	9b07      	ldr	r3, [sp, #28]
 80140d6:	b92b      	cbnz	r3, 80140e4 <MEMS_runMagCal+0x1364>
 80140d8:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80140dc:	3b02      	subs	r3, #2
 80140de:	2b01      	cmp	r3, #1
 80140e0:	f240 851e 	bls.w	8014b20 <MEMS_runMagCal+0x1da0>
 80140e4:	ac25      	add	r4, sp, #148	; 0x94
 80140e6:	2220      	movs	r2, #32
 80140e8:	4620      	mov	r0, r4
 80140ea:	2100      	movs	r1, #0
 80140ec:	f003 fbe6 	bl	80178bc <memset>
 80140f0:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 80140f4:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80140f8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80140fc:	2200      	movs	r2, #0
 80140fe:	4286      	cmp	r6, r0
 8014100:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8014104:	921f      	str	r2, [sp, #124]	; 0x7c
 8014106:	f103 0301 	add.w	r3, r3, #1
 801410a:	f000 8501 	beq.w	8014b10 <MEMS_runMagCal+0x1d90>
 801410e:	1b9b      	subs	r3, r3, r6
 8014110:	fb93 f2f0 	sdiv	r2, r3, r0
 8014114:	fb00 3312 	mls	r3, r0, r2, r3
 8014118:	2b00      	cmp	r3, #0
 801411a:	bfb8      	it	lt
 801411c:	181b      	addlt	r3, r3, r0
 801411e:	b21a      	sxth	r2, r3
 8014120:	2e00      	cmp	r6, #0
 8014122:	f000 854c 	beq.w	8014bbe <MEMS_runMagCal+0x1e3e>
 8014126:	1e77      	subs	r7, r6, #1
 8014128:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013ddc <MEMS_runMagCal+0x105c>
 801412c:	b2fd      	uxtb	r5, r7
 801412e:	3501      	adds	r5, #1
 8014130:	eeb0 5a65 	vmov.f32	s10, s11
 8014134:	eef0 4a65 	vmov.f32	s9, s11
 8014138:	4415      	add	r5, r2
 801413a:	4611      	mov	r1, r2
 801413c:	fb91 f3f0 	sdiv	r3, r1, r0
 8014140:	fb00 1313 	mls	r3, r0, r3, r1
 8014144:	b2db      	uxtb	r3, r3
 8014146:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801414a:	3101      	adds	r1, #1
 801414c:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8014150:	ee06 ca90 	vmov	s13, ip
 8014154:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8014158:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801415c:	ee07 ca10 	vmov	s14, ip
 8014160:	ee07 3a90 	vmov	s15, r3
 8014164:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014168:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801416c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014170:	42a9      	cmp	r1, r5
 8014172:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8014176:	ee35 5a07 	vadd.f32	s10, s10, s14
 801417a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801417e:	d1dd      	bne.n	801413c <MEMS_runMagCal+0x13bc>
 8014180:	ee07 6a90 	vmov	s15, r6
 8014184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801418c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8014190:	b2f9      	uxtb	r1, r7
 8014192:	3101      	adds	r1, #1
 8014194:	4411      	add	r1, r2
 8014196:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8014544 <MEMS_runMagCal+0x17c4>
 801419a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801419e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80141a2:	ee29 aa85 	vmul.f32	s20, s19, s10
 80141a6:	ee69 9aa5 	vmul.f32	s19, s19, s11
 80141aa:	eef0 4a46 	vmov.f32	s9, s12
 80141ae:	eeb0 4a46 	vmov.f32	s8, s12
 80141b2:	eef0 3a46 	vmov.f32	s7, s12
 80141b6:	eeb0 3a46 	vmov.f32	s6, s12
 80141ba:	eef0 2a46 	vmov.f32	s5, s12
 80141be:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 80141c2:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 80141c6:	fb92 f3f0 	sdiv	r3, r2, r0
 80141ca:	fb00 2313 	mls	r3, r0, r3, r2
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80141d4:	3201      	adds	r2, #1
 80141d6:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 80141da:	ee06 5a90 	vmov	s13, r5
 80141de:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80141e2:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80141e6:	ee07 5a10 	vmov	s14, r5
 80141ea:	ee07 3a90 	vmov	s15, r3
 80141ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80141f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80141f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141fa:	ee76 6ac9 	vsub.f32	s13, s13, s18
 80141fe:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8014202:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8014206:	4291      	cmp	r1, r2
 8014208:	eee6 2aa6 	vfma.f32	s5, s13, s13
 801420c:	eea6 3a87 	vfma.f32	s6, s13, s14
 8014210:	eea7 4a07 	vfma.f32	s8, s14, s14
 8014214:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8014218:	eee7 4a27 	vfma.f32	s9, s14, s15
 801421c:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8014220:	d1d1      	bne.n	80141c6 <MEMS_runMagCal+0x1446>
 8014222:	edc4 2a00 	vstr	s5, [r4]
 8014226:	ed84 3a01 	vstr	s6, [r4, #4]
 801422a:	edc4 3a02 	vstr	s7, [r4, #8]
 801422e:	ed84 4a03 	vstr	s8, [r4, #12]
 8014232:	edc4 4a04 	vstr	s9, [r4, #16]
 8014236:	ed84 6a05 	vstr	s12, [r4, #20]
 801423a:	a91a      	add	r1, sp, #104	; 0x68
 801423c:	4620      	mov	r0, r4
 801423e:	f7fe fce5 	bl	8012c0c <MEMS_EIG3>
 8014242:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8014246:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 801424a:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 801424e:	eef0 5ae4 	vabs.f32	s11, s9
 8014252:	eef0 6ac6 	vabs.f32	s13, s12
 8014256:	eef4 6ae5 	vcmpe.f32	s13, s11
 801425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425e:	bf8c      	ite	hi
 8014260:	eef0 7a65 	vmovhi.f32	s15, s11
 8014264:	eef0 7a66 	vmovls.f32	s15, s13
 8014268:	eeb0 7ac5 	vabs.f32	s14, s10
 801426c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014274:	eef4 6ae5 	vcmpe.f32	s13, s11
 8014278:	bf88      	it	hi
 801427a:	eef0 7a47 	vmovhi.f32	s15, s14
 801427e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014282:	bfb8      	it	lt
 8014284:	eef0 6a65 	vmovlt.f32	s13, s11
 8014288:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801428c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8014290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014294:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8014298:	bfb8      	it	lt
 801429a:	eeb0 7a66 	vmovlt.f32	s14, s13
 801429e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80142a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142a6:	f300 8420 	bgt.w	8014aea <MEMS_runMagCal+0x1d6a>
 80142aa:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80142ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142b2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80142b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142be:	dd02      	ble.n	80142c6 <MEMS_runMagCal+0x1546>
 80142c0:	2b22      	cmp	r3, #34	; 0x22
 80142c2:	f240 8412 	bls.w	8014aea <MEMS_runMagCal+0x1d6a>
 80142c6:	ee76 7a24 	vadd.f32	s15, s12, s9
 80142ca:	ee07 3a10 	vmov	s14, r3
 80142ce:	ee77 7a85 	vadd.f32	s15, s15, s10
 80142d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142d6:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014518 <MEMS_runMagCal+0x1798>
 80142da:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80142de:	eef1 7ac6 	vsqrt.f32	s15, s12
 80142e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80142e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80142ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ee:	f300 83fc 	bgt.w	8014aea <MEMS_runMagCal+0x1d6a>
 80142f2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80142f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142fe:	f100 83f4 	bmi.w	8014aea <MEMS_runMagCal+0x1d6a>
 8014302:	eddf 7a86 	vldr	s15, [pc, #536]	; 801451c <MEMS_runMagCal+0x179c>
 8014306:	ee87 7a88 	vdiv.f32	s14, s15, s16
 801430a:	2300      	movs	r3, #0
 801430c:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8014310:	932c      	str	r3, [sp, #176]	; 0xb0
 8014312:	eddd 7a02 	vldr	s15, [sp, #8]
 8014316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801431a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014322:	d408      	bmi.n	8014336 <MEMS_runMagCal+0x15b6>
 8014324:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014328:	ee17 3a10 	vmov	r3, s14
 801432c:	b21b      	sxth	r3, r3
 801432e:	ee07 3a90 	vmov	s15, r3
 8014332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014336:	eddf 6a81 	vldr	s13, [pc, #516]	; 801453c <MEMS_runMagCal+0x17bc>
 801433a:	ee86 7a88 	vdiv.f32	s14, s13, s16
 801433e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014346:	dc08      	bgt.n	801435a <MEMS_runMagCal+0x15da>
 8014348:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801434c:	ee17 3a10 	vmov	r3, s14
 8014350:	b21b      	sxth	r3, r3
 8014352:	ee07 3a90 	vmov	s15, r3
 8014356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801435a:	ee27 7a88 	vmul.f32	s14, s15, s16
 801435e:	eddf 7a70 	vldr	s15, [pc, #448]	; 8014520 <MEMS_runMagCal+0x17a0>
 8014362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436a:	f340 8424 	ble.w	8014bb6 <MEMS_runMagCal+0x1e36>
 801436e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8014524 <MEMS_runMagCal+0x17a4>
 8014372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437a:	f140 841c 	bpl.w	8014bb6 <MEMS_runMagCal+0x1e36>
 801437e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8014528 <MEMS_runMagCal+0x17a8>
 8014382:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014386:	eee7 7a26 	vfma.f32	s15, s14, s13
 801438a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801438e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014392:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801453c <MEMS_runMagCal+0x17bc>
 8014396:	eddf ba6b 	vldr	s23, [pc, #428]	; 8014544 <MEMS_runMagCal+0x17c4>
 801439a:	ed9f ba64 	vldr	s22, [pc, #400]	; 801452c <MEMS_runMagCal+0x17ac>
 801439e:	eddf aa64 	vldr	s21, [pc, #400]	; 8014530 <MEMS_runMagCal+0x17b0>
 80143a2:	9d03      	ldr	r5, [sp, #12]
 80143a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143a8:	ee68 4a09 	vmul.f32	s9, s16, s18
 80143ac:	ee28 aa0a 	vmul.f32	s20, s16, s20
 80143b0:	ee68 9a29 	vmul.f32	s19, s16, s19
 80143b4:	edc4 4a00 	vstr	s9, [r4]
 80143b8:	ed84 aa01 	vstr	s20, [r4, #4]
 80143bc:	edc4 9a02 	vstr	s19, [r4, #8]
 80143c0:	edc4 7a03 	vstr	s15, [r4, #12]
 80143c4:	edc4 7a06 	vstr	s15, [r4, #24]
 80143c8:	ab11      	add	r3, sp, #68	; 0x44
 80143ca:	ee1c 0a10 	vmov	r0, s24
 80143ce:	aa2d      	add	r2, sp, #180	; 0xb4
 80143d0:	eeb0 0a48 	vmov.f32	s0, s16
 80143d4:	4621      	mov	r1, r4
 80143d6:	f7fe fa01 	bl	80127dc <MEMS_SolveLinearEq>
 80143da:	1c6b      	adds	r3, r5, #1
 80143dc:	2800      	cmp	r0, #0
 80143de:	f43e aed1 	beq.w	8013184 <MEMS_runMagCal+0x404>
 80143e2:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 80143e6:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 80143ea:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 80143ee:	edd4 4a00 	vldr	s9, [r4]
 80143f2:	ed94 5a01 	vldr	s10, [r4, #4]
 80143f6:	edd4 5a02 	vldr	s11, [r4, #8]
 80143fa:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 80143fe:	ed94 6a03 	vldr	s12, [r4, #12]
 8014402:	eef0 6ae3 	vabs.f32	s13, s7
 8014406:	eef0 7ac3 	vabs.f32	s15, s6
 801440a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014412:	bfb8      	it	lt
 8014414:	eef0 7a66 	vmovlt.f32	s15, s13
 8014418:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014420:	bfb8      	it	lt
 8014422:	eef0 7a6b 	vmovlt.f32	s15, s23
 8014426:	eef0 6ac4 	vabs.f32	s13, s8
 801442a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014432:	bfb8      	it	lt
 8014434:	eef0 6a67 	vmovlt.f32	s13, s15
 8014438:	ee74 4a83 	vadd.f32	s9, s9, s6
 801443c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8014440:	ee75 5a84 	vadd.f32	s11, s11, s8
 8014444:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014448:	eef4 6acb 	vcmpe.f32	s13, s22
 801444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014450:	edc4 4a00 	vstr	s9, [r4]
 8014454:	ed84 5a01 	vstr	s10, [r4, #4]
 8014458:	edc4 5a02 	vstr	s11, [r4, #8]
 801445c:	ed84 6a03 	vstr	s12, [r4, #12]
 8014460:	eef0 7ac7 	vabs.f32	s15, s14
 8014464:	d507      	bpl.n	8014476 <MEMS_runMagCal+0x16f6>
 8014466:	eef4 7aea 	vcmpe.f32	s15, s21
 801446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801446e:	d502      	bpl.n	8014476 <MEMS_runMagCal+0x16f6>
 8014470:	2d01      	cmp	r5, #1
 8014472:	f63e ae8b 	bhi.w	801318c <MEMS_runMagCal+0x40c>
 8014476:	b2dd      	uxtb	r5, r3
 8014478:	2d05      	cmp	r5, #5
 801447a:	d1a5      	bne.n	80143c8 <MEMS_runMagCal+0x1648>
 801447c:	f7fe be86 	b.w	801318c <MEMS_runMagCal+0x40c>
 8014480:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8014484:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8014488:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 801448c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 8014534 <MEMS_runMagCal+0x17b4>
 8014490:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8014494:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8014498:	ee77 7a85 	vadd.f32	s15, s15, s10
 801449c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80144a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80144a4:	eef4 7ae4 	vcmpe.f32	s15, s9
 80144a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ac:	bf88      	it	hi
 80144ae:	eef0 7a64 	vmovhi.f32	s15, s9
 80144b2:	eef4 7ac5 	vcmpe.f32	s15, s10
 80144b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ba:	bfb8      	it	lt
 80144bc:	eef0 7a45 	vmovlt.f32	s15, s10
 80144c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80144c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80144c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144cc:	dc0e      	bgt.n	80144ec <MEMS_runMagCal+0x176c>
 80144ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80144d2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80144d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144da:	dc07      	bgt.n	80144ec <MEMS_runMagCal+0x176c>
 80144dc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80144e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80144e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e8:	f77f ad73 	ble.w	8013fd2 <MEMS_runMagCal+0x1252>
 80144ec:	2300      	movs	r3, #0
 80144ee:	f88b 3000 	strb.w	r3, [fp]
 80144f2:	f7ff b880 	b.w	80135f6 <MEMS_runMagCal+0x876>
 80144f6:	2300      	movs	r3, #0
 80144f8:	9307      	str	r3, [sp, #28]
 80144fa:	2301      	movs	r3, #1
 80144fc:	9303      	str	r3, [sp, #12]
 80144fe:	f7ff bb61 	b.w	8013bc4 <MEMS_runMagCal+0xe44>
 8014502:	3301      	adds	r3, #1
 8014504:	fb93 f2f7 	sdiv	r2, r3, r7
 8014508:	fb07 3212 	mls	r2, r7, r2, r3
 801450c:	930b      	str	r3, [sp, #44]	; 0x2c
 801450e:	b212      	sxth	r2, r2
 8014510:	46bc      	mov	ip, r7
 8014512:	f7ff bb75 	b.w	8013c00 <MEMS_runMagCal+0xe80>
 8014516:	bf00      	nop
 8014518:	42960000 	.word	0x42960000
 801451c:	430d0000 	.word	0x430d0000
 8014520:	41966667 	.word	0x41966667
 8014524:	433c0000 	.word	0x433c0000
 8014528:	3c2e4c41 	.word	0x3c2e4c41
 801452c:	3e99999a 	.word	0x3e99999a
 8014530:	3f666666 	.word	0x3f666666
 8014534:	3eaaaaab 	.word	0x3eaaaaab
 8014538:	358637bd 	.word	0x358637bd
 801453c:	423c0000 	.word	0x423c0000
 8014540:	3a83126f 	.word	0x3a83126f
 8014544:	00000000 	.word	0x00000000
 8014548:	eddd 7a08 	vldr	s15, [sp, #32]
 801454c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8014540 <MEMS_runMagCal+0x17c0>
 8014550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014554:	ee07 3a10 	vmov	s14, r3
 8014558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801455c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014560:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014564:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014568:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014570:	f63f aa67 	bhi.w	8013a42 <MEMS_runMagCal+0xcc2>
 8014574:	9b07      	ldr	r3, [sp, #28]
 8014576:	2b00      	cmp	r3, #0
 8014578:	f43f a83d 	beq.w	80135f6 <MEMS_runMagCal+0x876>
 801457c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8014580:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014584:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801458c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014594:	bf4c      	ite	mi
 8014596:	2301      	movmi	r3, #1
 8014598:	2300      	movpl	r3, #0
 801459a:	9307      	str	r3, [sp, #28]
 801459c:	f7ff ba55 	b.w	8013a4a <MEMS_runMagCal+0xcca>
 80145a0:	fb92 f1f0 	sdiv	r1, r2, r0
 80145a4:	fb00 2211 	mls	r2, r0, r1, r2
 80145a8:	b211      	sxth	r1, r2
 80145aa:	4605      	mov	r5, r0
 80145ac:	f7ff b8da 	b.w	8013764 <MEMS_runMagCal+0x9e4>
 80145b0:	2200      	movs	r2, #0
 80145b2:	23ff      	movs	r3, #255	; 0xff
 80145b4:	ee1c 0a10 	vmov	r0, s24
 80145b8:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80145bc:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80145c0:	eeb0 0a49 	vmov.f32	s0, s18
 80145c4:	4649      	mov	r1, r9
 80145c6:	f7f7 fd11 	bl	800bfec <MEMS_updateMagBufferIndex>
 80145ca:	f7ff b90b 	b.w	80137e4 <MEMS_runMagCal+0xa64>
 80145ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80145d2:	fb03 f60c 	mul.w	r6, r3, ip
 80145d6:	fb03 f202 	mul.w	r2, r3, r2
 80145da:	fb03 f301 	mul.w	r3, r3, r1
 80145de:	ee06 6a90 	vmov	s13, r6
 80145e2:	ee07 2a10 	vmov	s14, r2
 80145e6:	ee07 3a90 	vmov	s15, r3
 80145ea:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8014538 <MEMS_runMagCal+0x17b8>
 80145ee:	9e05      	ldr	r6, [sp, #20]
 80145f0:	9400      	str	r4, [sp, #0]
 80145f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80145f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80145fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014602:	ee27 7a06 	vmul.f32	s14, s14, s12
 8014606:	ee67 7a86 	vmul.f32	s15, s15, s12
 801460a:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 801460e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8014612:	e9c5 0003 	strd	r0, r0, [r5, #12]
 8014616:	e9c5 0005 	strd	r0, r0, [r5, #20]
 801461a:	6028      	str	r0, [r5, #0]
 801461c:	ed96 0a01 	vldr	s0, [r6, #4]
 8014620:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8014624:	4642      	mov	r2, r8
 8014626:	ab0d      	add	r3, sp, #52	; 0x34
 8014628:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 801462c:	ad0e      	add	r5, sp, #56	; 0x38
 801462e:	ee1c 0a10 	vmov	r0, s24
 8014632:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014636:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 801463a:	f7f7 fd79 	bl	800c130 <getMagStats.constprop.0>
 801463e:	9500      	str	r5, [sp, #0]
 8014640:	ed96 0a01 	vldr	s0, [r6, #4]
 8014644:	ee1c 0a10 	vmov	r0, s24
 8014648:	aa2d      	add	r2, sp, #180	; 0xb4
 801464a:	ab0d      	add	r3, sp, #52	; 0x34
 801464c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8014650:	f7f7 fd6e 	bl	800c130 <getMagStats.constprop.0>
 8014654:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 801453c <MEMS_runMagCal+0x17bc>
 8014658:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801465c:	ed95 7a00 	vldr	s14, [r5]
 8014660:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014664:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8014668:	eef0 7ae7 	vabs.f32	s15, s15
 801466c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014674:	d505      	bpl.n	8014682 <MEMS_runMagCal+0x1902>
 8014676:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801467e:	f100 81fa 	bmi.w	8014a76 <MEMS_runMagCal+0x1cf6>
 8014682:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8014686:	eef4 7ae6 	vcmpe.f32	s15, s13
 801468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468e:	f140 81a8 	bpl.w	80149e2 <MEMS_runMagCal+0x1c62>
 8014692:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801469a:	9b03      	ldr	r3, [sp, #12]
 801469c:	bfb8      	it	lt
 801469e:	2302      	movlt	r3, #2
 80146a0:	edd4 6a00 	vldr	s13, [r4]
 80146a4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80146a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80146ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80146b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146b4:	f57e af9f 	bpl.w	80135f6 <MEMS_runMagCal+0x876>
 80146b8:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 80146bc:	429a      	cmp	r2, r3
 80146be:	f63e af9a 	bhi.w	80135f6 <MEMS_runMagCal+0x876>
 80146c2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80146c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146ca:	eef4 6ae7 	vcmpe.f32	s13, s15
 80146ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d2:	d40e      	bmi.n	80146f2 <MEMS_runMagCal+0x1972>
 80146d4:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80146d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80146dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e0:	f140 80d4 	bpl.w	801488c <MEMS_runMagCal+0x1b0c>
 80146e4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 80146e8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80146ec:	429a      	cmp	r2, r3
 80146ee:	f080 80cd 	bcs.w	801488c <MEMS_runMagCal+0x1b0c>
 80146f2:	9b05      	ldr	r3, [sp, #20]
 80146f4:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 80146f8:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 80146fc:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8014700:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 8014704:	edd3 5a01 	vldr	s11, [r3, #4]
 8014708:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 801470c:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8014710:	1b8b      	subs	r3, r1, r6
 8014712:	eba0 0c07 	sub.w	ip, r0, r7
 8014716:	2b00      	cmp	r3, #0
 8014718:	bfb8      	it	lt
 801471a:	425b      	neglt	r3, r3
 801471c:	f1bc 0f00 	cmp.w	ip, #0
 8014720:	bfb8      	it	lt
 8014722:	f1cc 0c00 	rsblt	ip, ip, #0
 8014726:	4563      	cmp	r3, ip
 8014728:	bfb8      	it	lt
 801472a:	4663      	movlt	r3, ip
 801472c:	eba2 0c04 	sub.w	ip, r2, r4
 8014730:	f1bc 0f00 	cmp.w	ip, #0
 8014734:	b21b      	sxth	r3, r3
 8014736:	bfb8      	it	lt
 8014738:	f1cc 0c00 	rsblt	ip, ip, #0
 801473c:	4563      	cmp	r3, ip
 801473e:	bfb8      	it	lt
 8014740:	4663      	movlt	r3, ip
 8014742:	b21b      	sxth	r3, r3
 8014744:	ee07 3a90 	vmov	s15, r3
 8014748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801474c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014750:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014754:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801475c:	f140 8096 	bpl.w	801488c <MEMS_runMagCal+0x1b0c>
 8014760:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014764:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8014768:	ee86 2a87 	vdiv.f32	s4, s13, s14
 801476c:	ee04 3a90 	vmov	s9, r3
 8014770:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 8014774:	ee05 3a10 	vmov	s10, r3
 8014778:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 801477c:	ee07 0a90 	vmov	s15, r0
 8014780:	ee05 3a90 	vmov	s11, r3
 8014784:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8014788:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801478c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014790:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014794:	ee06 3a10 	vmov	s12, r3
 8014798:	ee03 7a90 	vmov	s7, r7
 801479c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80147a0:	ee07 1a90 	vmov	s15, r1
 80147a4:	ee00 3a90 	vmov	s1, r3
 80147a8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80147ac:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 80147b0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80147b4:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 80147b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80147bc:	ee64 4a84 	vmul.f32	s9, s9, s8
 80147c0:	ee03 6a90 	vmov	s7, r6
 80147c4:	eee2 6a22 	vfma.f32	s13, s4, s5
 80147c8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80147cc:	ee07 2a90 	vmov	s15, r2
 80147d0:	ee01 3a10 	vmov	s2, r3
 80147d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80147d8:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80147dc:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 80147e0:	eee2 4a20 	vfma.f32	s9, s4, s1
 80147e4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80147e8:	ee01 3a90 	vmov	s3, r3
 80147ec:	ee25 5a04 	vmul.f32	s10, s10, s8
 80147f0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80147f4:	eea2 7a03 	vfma.f32	s14, s4, s6
 80147f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147fc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014800:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8014804:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014808:	ee03 4a90 	vmov	s7, r4
 801480c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014810:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014814:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014818:	ee26 6a04 	vmul.f32	s12, s12, s8
 801481c:	ee16 2a90 	vmov	r2, s13
 8014820:	ee04 3a10 	vmov	s8, r3
 8014824:	eea2 5a01 	vfma.f32	s10, s4, s2
 8014828:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 801482c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8014830:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8014834:	eee2 7a23 	vfma.f32	s15, s4, s7
 8014838:	ee14 2a90 	vmov	r2, s9
 801483c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014840:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014844:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014848:	eee2 5a21 	vfma.f32	s11, s4, s3
 801484c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8014850:	eea2 6a04 	vfma.f32	s12, s4, s8
 8014854:	ee17 2a10 	vmov	r2, s14
 8014858:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801485c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014860:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8014864:	ee15 2a10 	vmov	r2, s10
 8014868:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801486c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8014870:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8014874:	ee17 2a90 	vmov	r2, s15
 8014878:	ee16 3a10 	vmov	r3, s12
 801487c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8014880:	ee15 2a90 	vmov	r2, s11
 8014884:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8014888:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 801488c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801488e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8014892:	f7fe bda2 	b.w	80133da <MEMS_runMagCal+0x65a>
 8014896:	ee1c 0a10 	vmov	r0, s24
 801489a:	eeb0 0a49 	vmov.f32	s0, s18
 801489e:	4649      	mov	r1, r9
 80148a0:	f7f7 fba4 	bl	800bfec <MEMS_updateMagBufferIndex>
 80148a4:	f7ff b89f 	b.w	80139e6 <MEMS_runMagCal+0xc66>
 80148a8:	eddd 7a08 	vldr	s15, [sp, #32]
 80148ac:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8014540 <MEMS_runMagCal+0x17c0>
 80148b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80148b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148b8:	e660      	b.n	801457c <MEMS_runMagCal+0x17fc>
 80148ba:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 8014544 <MEMS_runMagCal+0x17c4>
 80148be:	1c6b      	adds	r3, r5, #1
 80148c0:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80148c4:	ad0e      	add	r5, sp, #56	; 0x38
 80148c6:	fb93 f1f6 	sdiv	r1, r3, r6
 80148ca:	fa1f fc86 	uxth.w	ip, r6
 80148ce:	fb06 3311 	mls	r3, r6, r1, r3
 80148d2:	edc5 6a00 	vstr	s13, [r5]
 80148d6:	2e00      	cmp	r6, #0
 80148d8:	f000 80e1 	beq.w	8014a9e <MEMS_runMagCal+0x1d1e>
 80148dc:	b29b      	uxth	r3, r3
 80148de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80148e2:	1c58      	adds	r0, r3, #1
 80148e4:	eeb0 6a66 	vmov.f32	s12, s13
 80148e8:	fa10 fc8c 	uxtah	ip, r0, ip
 80148ec:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80148f0:	4619      	mov	r1, r3
 80148f2:	e000      	b.n	80148f6 <MEMS_runMagCal+0x1b76>
 80148f4:	3001      	adds	r0, #1
 80148f6:	fbb1 f3f6 	udiv	r3, r1, r6
 80148fa:	fb06 1313 	mls	r3, r6, r3, r1
 80148fe:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8014902:	8a99      	ldrh	r1, [r3, #20]
 8014904:	4571      	cmp	r1, lr
 8014906:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 801490a:	f1a3 031c 	sub.w	r3, r3, #28
 801490e:	bf98      	it	ls
 8014910:	ebae 0301 	subls.w	r3, lr, r1
 8014914:	b29b      	uxth	r3, r3
 8014916:	fb03 f303 	mul.w	r3, r3, r3
 801491a:	ee07 1a10 	vmov	s14, r1
 801491e:	ee07 3a90 	vmov	s15, r3
 8014922:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801492a:	4584      	cmp	ip, r0
 801492c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014930:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014934:	4601      	mov	r1, r0
 8014936:	d1dd      	bne.n	80148f4 <MEMS_runMagCal+0x1b74>
 8014938:	ee07 4a90 	vmov	s15, r4
 801493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014940:	eddf 5ae6 	vldr	s11, [pc, #920]	; 8014cdc <MEMS_runMagCal+0x1f5c>
 8014944:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 8014ce0 <MEMS_runMagCal+0x1f60>
 8014948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801494c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014950:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014954:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014958:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801495c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014964:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014968:	edc5 7a00 	vstr	s15, [r5]
 801496c:	dd47      	ble.n	80149fe <MEMS_runMagCal+0x1c7e>
 801496e:	eddf 7add 	vldr	s15, [pc, #884]	; 8014ce4 <MEMS_runMagCal+0x1f64>
 8014972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014976:	2302      	movs	r3, #2
 8014978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014980:	f77e aead 	ble.w	80136de <MEMS_runMagCal+0x95e>
 8014984:	2301      	movs	r3, #1
 8014986:	f88b 3001 	strb.w	r3, [fp, #1]
 801498a:	f7fe bea8 	b.w	80136de <MEMS_runMagCal+0x95e>
 801498e:	ee1c 0a10 	vmov	r0, s24
 8014992:	eeb0 0a49 	vmov.f32	s0, s18
 8014996:	4649      	mov	r1, r9
 8014998:	f7f7 fb28 	bl	800bfec <MEMS_updateMagBufferIndex>
 801499c:	f7fe bf0d 	b.w	80137ba <MEMS_runMagCal+0xa3a>
 80149a0:	9b02      	ldr	r3, [sp, #8]
 80149a2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80149a6:	f8db 100c 	ldr.w	r1, [fp, #12]
 80149aa:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 80149ae:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80149b2:	4413      	add	r3, r2
 80149b4:	4299      	cmp	r1, r3
 80149b6:	f4bf ad99 	bcs.w	80144ec <MEMS_runMagCal+0x176c>
 80149ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80149c0:	fb03 f301 	mul.w	r3, r3, r1
 80149c4:	3364      	adds	r3, #100	; 0x64
 80149c6:	4293      	cmp	r3, r2
 80149c8:	bf38      	it	cc
 80149ca:	4613      	movcc	r3, r2
 80149cc:	2200      	movs	r2, #0
 80149ce:	f8cb 300c 	str.w	r3, [fp, #12]
 80149d2:	f88b 2000 	strb.w	r2, [fp]
 80149d6:	f7fe be0e 	b.w	80135f6 <MEMS_runMagCal+0x876>
 80149da:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80149de:	f7ff ba6f 	b.w	8013ec0 <MEMS_runMagCal+0x1140>
 80149e2:	9b03      	ldr	r3, [sp, #12]
 80149e4:	e65c      	b.n	80146a0 <MEMS_runMagCal+0x1920>
 80149e6:	4619      	mov	r1, r3
 80149e8:	9b02      	ldr	r3, [sp, #8]
 80149ea:	3301      	adds	r3, #1
 80149ec:	fb93 f2f1 	sdiv	r2, r3, r1
 80149f0:	fb01 3212 	mls	r2, r1, r2, r3
 80149f4:	9304      	str	r3, [sp, #16]
 80149f6:	b212      	sxth	r2, r2
 80149f8:	4689      	mov	r9, r1
 80149fa:	f7ff ba11 	b.w	8013e20 <MEMS_runMagCal+0x10a0>
 80149fe:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014ce8 <MEMS_runMagCal+0x1f68>
 8014a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0a:	eddf 7ab6 	vldr	s15, [pc, #728]	; 8014ce4 <MEMS_runMagCal+0x1f64>
 8014a0e:	d434      	bmi.n	8014a7a <MEMS_runMagCal+0x1cfa>
 8014a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a18:	bfc4      	itt	gt
 8014a1a:	2301      	movgt	r3, #1
 8014a1c:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014a20:	f7ff b892 	b.w	8013b48 <MEMS_runMagCal+0xdc8>
 8014a24:	9b05      	ldr	r3, [sp, #20]
 8014a26:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8014a2a:	ed93 0a01 	vldr	s0, [r3, #4]
 8014a2e:	f7fe bd84 	b.w	801353a <MEMS_runMagCal+0x7ba>
 8014a32:	2303      	movs	r3, #3
 8014a34:	9303      	str	r3, [sp, #12]
 8014a36:	f7fe bdd4 	b.w	80135e2 <MEMS_runMagCal+0x862>
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	f7ff ba78 	b.w	8013f30 <MEMS_runMagCal+0x11b0>
 8014a40:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014a44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014a48:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a50:	f73f ad4c 	bgt.w	80144ec <MEMS_runMagCal+0x176c>
 8014a54:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014a58:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a60:	f73f ad44 	bgt.w	80144ec <MEMS_runMagCal+0x176c>
 8014a64:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014a68:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a70:	f77f aaaf 	ble.w	8013fd2 <MEMS_runMagCal+0x1252>
 8014a74:	e53a      	b.n	80144ec <MEMS_runMagCal+0x176c>
 8014a76:	2303      	movs	r3, #3
 8014a78:	e612      	b.n	80146a0 <MEMS_runMagCal+0x1920>
 8014a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a7e:	2300      	movs	r3, #0
 8014a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a84:	f88b 3001 	strb.w	r3, [fp, #1]
 8014a88:	f04f 0103 	mov.w	r1, #3
 8014a8c:	bfc8      	it	gt
 8014a8e:	2301      	movgt	r3, #1
 8014a90:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014a94:	bfc8      	it	gt
 8014a96:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014a9a:	f7ff b858 	b.w	8013b4e <MEMS_runMagCal+0xdce>
 8014a9e:	2303      	movs	r3, #3
 8014aa0:	f88b c001 	strb.w	ip, [fp, #1]
 8014aa4:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014aa8:	f7ff b851 	b.w	8013b4e <MEMS_runMagCal+0xdce>
 8014aac:	9b04      	ldr	r3, [sp, #16]
 8014aae:	fb93 f7f9 	sdiv	r7, r3, r9
 8014ab2:	fb09 3717 	mls	r7, r9, r7, r3
 8014ab6:	b23f      	sxth	r7, r7
 8014ab8:	f7ff ba9a 	b.w	8013ff0 <MEMS_runMagCal+0x1270>
 8014abc:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8014cec <MEMS_runMagCal+0x1f6c>
 8014ac0:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014ac4:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014ac8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8014acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ad0:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014ad4:	ee17 2a90 	vmov	r2, s15
 8014ad8:	b291      	uxth	r1, r2
 8014ada:	b113      	cbz	r3, 8014ae2 <MEMS_runMagCal+0x1d62>
 8014adc:	3b01      	subs	r3, #1
 8014ade:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8014ae2:	ee1c 0a10 	vmov	r0, s24
 8014ae6:	f7f7 fa81 	bl	800bfec <MEMS_updateMagBufferIndex>
 8014aea:	eddd 7a08 	vldr	s15, [sp, #32]
 8014aee:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014af2:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8014cf0 <MEMS_runMagCal+0x1f70>
 8014af6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014afa:	f001 f8b5 	bl	8015c68 <roundf>
 8014afe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014b02:	2300      	movs	r3, #0
 8014b04:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014b08:	f88b 3000 	strb.w	r3, [fp]
 8014b0c:	f7fe bd73 	b.w	80135f6 <MEMS_runMagCal+0x876>
 8014b10:	fb93 f2f6 	sdiv	r2, r3, r6
 8014b14:	fb06 3312 	mls	r3, r6, r2, r3
 8014b18:	b21a      	sxth	r2, r3
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	f7ff bb00 	b.w	8014120 <MEMS_runMagCal+0x13a0>
 8014b20:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 8014b24:	f001 f8a0 	bl	8015c68 <roundf>
 8014b28:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b2c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014b30:	ee17 3a90 	vmov	r3, s15
 8014b34:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014b38:	f8a9 3000 	strh.w	r3, [r9]
 8014b3c:	f001 f894 	bl	8015c68 <roundf>
 8014b40:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b44:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014b48:	ee17 3a90 	vmov	r3, s15
 8014b4c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014b50:	f001 f88a 	bl	8015c68 <roundf>
 8014b54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014b58:	ac0f      	add	r4, sp, #60	; 0x3c
 8014b5a:	ee17 5a90 	vmov	r5, s15
 8014b5e:	9400      	str	r4, [sp, #0]
 8014b60:	ee1c 0a10 	vmov	r0, s24
 8014b64:	4649      	mov	r1, r9
 8014b66:	ab10      	add	r3, sp, #64	; 0x40
 8014b68:	eeb0 0a48 	vmov.f32	s0, s16
 8014b6c:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014b70:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014b74:	f7f7 fadc 	bl	800c130 <getMagStats.constprop.0>
 8014b78:	ed94 7a00 	vldr	s14, [r4]
 8014b7c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014cf4 <MEMS_runMagCal+0x1f74>
 8014b80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b88:	d50e      	bpl.n	8014ba8 <MEMS_runMagCal+0x1e28>
 8014b8a:	b968      	cbnz	r0, 8014ba8 <MEMS_runMagCal+0x1e28>
 8014b8c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014b90:	b32b      	cbz	r3, 8014bde <MEMS_runMagCal+0x1e5e>
 8014b92:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014b96:	ee07 3a90 	vmov	s15, r3
 8014b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b9e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba6:	dc1a      	bgt.n	8014bde <MEMS_runMagCal+0x1e5e>
 8014ba8:	2300      	movs	r3, #0
 8014baa:	f8c9 3000 	str.w	r3, [r9]
 8014bae:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014bb2:	f7ff ba97 	b.w	80140e4 <MEMS_runMagCal+0x1364>
 8014bb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bba:	f7ff bbea 	b.w	8014392 <MEMS_runMagCal+0x1612>
 8014bbe:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014cf8 <MEMS_runMagCal+0x1f78>
 8014bc2:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014bc6:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 8014bca:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 8014bce:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014bd2:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014bd6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8014bda:	f7ff bb2e 	b.w	801423a <MEMS_runMagCal+0x14ba>
 8014bde:	eddd 7a08 	vldr	s15, [sp, #32]
 8014be2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014be6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8014cf0 <MEMS_runMagCal+0x1f70>
 8014bea:	2303      	movs	r3, #3
 8014bec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bf0:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014bf4:	e781      	b.n	8014afa <MEMS_runMagCal+0x1d7a>
 8014bf6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014cfc <MEMS_runMagCal+0x1f7c>
 8014bfa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c02:	f77e ab1b 	ble.w	801323c <MEMS_runMagCal+0x4bc>
 8014c06:	f7fe bb21 	b.w	801324c <MEMS_runMagCal+0x4cc>
 8014c0a:	2224      	movs	r2, #36	; 0x24
 8014c0c:	2100      	movs	r1, #0
 8014c0e:	a82d      	add	r0, sp, #180	; 0xb4
 8014c10:	f002 fe54 	bl	80178bc <memset>
 8014c14:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014d00 <MEMS_runMagCal+0x1f80>
 8014c18:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014c1c:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014c20:	4627      	mov	r7, r4
 8014c22:	ae2d      	add	r6, sp, #180	; 0xb4
 8014c24:	2500      	movs	r5, #0
 8014c26:	3501      	adds	r5, #1
 8014c28:	ecb7 0a01 	vldmia	r7!, {s0}
 8014c2c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014c30:	f001 f81a 	bl	8015c68 <roundf>
 8014c34:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c38:	4633      	mov	r3, r6
 8014c3a:	edc3 9a00 	vstr	s19, [r3]
 8014c3e:	ee10 3a10 	vmov	r3, s0
 8014c42:	2d03      	cmp	r5, #3
 8014c44:	f829 3b02 	strh.w	r3, [r9], #2
 8014c48:	f106 0610 	add.w	r6, r6, #16
 8014c4c:	d1eb      	bne.n	8014c26 <MEMS_runMagCal+0x1ea6>
 8014c4e:	ad12      	add	r5, sp, #72	; 0x48
 8014c50:	9500      	str	r5, [sp, #0]
 8014c52:	ab2b      	add	r3, sp, #172	; 0xac
 8014c54:	eeb0 0a48 	vmov.f32	s0, s16
 8014c58:	ee1c 0a10 	vmov	r0, s24
 8014c5c:	a915      	add	r1, sp, #84	; 0x54
 8014c5e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014c60:	f7f7 fa66 	bl	800c130 <getMagStats.constprop.0>
 8014c64:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014d00 <MEMS_runMagCal+0x1f80>
 8014c68:	ed94 4a03 	vldr	s8, [r4, #12]
 8014c6c:	edd5 7a00 	vldr	s15, [r5]
 8014c70:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014c74:	edd4 6a06 	vldr	s13, [r4, #24]
 8014c78:	edd4 4a00 	vldr	s9, [r4]
 8014c7c:	ed94 5a01 	vldr	s10, [r4, #4]
 8014c80:	edd4 5a02 	vldr	s11, [r4, #8]
 8014c84:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014c88:	ad2e      	add	r5, sp, #184	; 0xb8
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	e9c5 3300 	strd	r3, r3, [r5]
 8014c90:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014c94:	60ab      	str	r3, [r5, #8]
 8014c96:	61ab      	str	r3, [r5, #24]
 8014c98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014c9c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca4:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014ca8:	eec5 9a08 	vdiv.f32	s19, s10, s16
 8014cac:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014cb0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014cb4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014cb8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014cbc:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014cc0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014cc4:	d405      	bmi.n	8014cd2 <MEMS_runMagCal+0x1f52>
 8014cc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cce:	f57e aa9b 	bpl.w	8013208 <MEMS_runMagCal+0x488>
 8014cd2:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014d04 <MEMS_runMagCal+0x1f84>
 8014cd6:	f7fe ba9d 	b.w	8013214 <MEMS_runMagCal+0x494>
 8014cda:	bf00      	nop
 8014cdc:	3c23d70a 	.word	0x3c23d70a
 8014ce0:	4b095440 	.word	0x4b095440
 8014ce4:	481c4000 	.word	0x481c4000
 8014ce8:	471c4000 	.word	0x471c4000
 8014cec:	433d0000 	.word	0x433d0000
 8014cf0:	3a83126f 	.word	0x3a83126f
 8014cf4:	3ff4cccd 	.word	0x3ff4cccd
 8014cf8:	7f800000 	.word	0x7f800000
 8014cfc:	3ee66666 	.word	0x3ee66666
 8014d00:	423c0000 	.word	0x423c0000
 8014d04:	00000000 	.word	0x00000000
 8014d08:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	f67e acac 	bls.w	801366a <MEMS_runMagCal+0x8ea>
 8014d12:	f7fe bca0 	b.w	8013656 <MEMS_runMagCal+0x8d6>
 8014d16:	bf00      	nop

08014d18 <MotionFX_GetStateSize>:
 8014d18:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014d1c:	4770      	bx	lr
 8014d1e:	bf00      	nop

08014d20 <MotionFX_initialize>:
 8014d20:	4a3b      	ldr	r2, [pc, #236]	; (8014e10 <MotionFX_initialize+0xf0>)
 8014d22:	493c      	ldr	r1, [pc, #240]	; (8014e14 <MotionFX_initialize+0xf4>)
 8014d24:	6813      	ldr	r3, [r2, #0]
 8014d26:	f023 0301 	bic.w	r3, r3, #1
 8014d2a:	b530      	push	{r4, r5, lr}
 8014d2c:	6013      	str	r3, [r2, #0]
 8014d2e:	680b      	ldr	r3, [r1, #0]
 8014d30:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014d34:	4013      	ands	r3, r2
 8014d36:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014d3a:	42ab      	cmp	r3, r5
 8014d3c:	b085      	sub	sp, #20
 8014d3e:	4604      	mov	r4, r0
 8014d40:	d013      	beq.n	8014d6a <MotionFX_initialize+0x4a>
 8014d42:	680b      	ldr	r3, [r1, #0]
 8014d44:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014d48:	4013      	ands	r3, r2
 8014d4a:	428b      	cmp	r3, r1
 8014d4c:	d00d      	beq.n	8014d6a <MotionFX_initialize+0x4a>
 8014d4e:	4b32      	ldr	r3, [pc, #200]	; (8014e18 <MotionFX_initialize+0xf8>)
 8014d50:	2201      	movs	r2, #1
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	681a      	ldr	r2, [r3, #0]
 8014d56:	2a00      	cmp	r2, #0
 8014d58:	d1fc      	bne.n	8014d54 <MotionFX_initialize+0x34>
 8014d5a:	4b30      	ldr	r3, [pc, #192]	; (8014e1c <MotionFX_initialize+0xfc>)
 8014d5c:	4a30      	ldr	r2, [pc, #192]	; (8014e20 <MotionFX_initialize+0x100>)
 8014d5e:	601a      	str	r2, [r3, #0]
 8014d60:	681a      	ldr	r2, [r3, #0]
 8014d62:	4b30      	ldr	r3, [pc, #192]	; (8014e24 <MotionFX_initialize+0x104>)
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d01f      	beq.n	8014da8 <MotionFX_initialize+0x88>
 8014d68:	e7fe      	b.n	8014d68 <MotionFX_initialize+0x48>
 8014d6a:	4b2f      	ldr	r3, [pc, #188]	; (8014e28 <MotionFX_initialize+0x108>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d1ed      	bne.n	8014d4e <MotionFX_initialize+0x2e>
 8014d72:	4a2e      	ldr	r2, [pc, #184]	; (8014e2c <MotionFX_initialize+0x10c>)
 8014d74:	6813      	ldr	r3, [r2, #0]
 8014d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014d7a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014d7e:	d006      	beq.n	8014d8e <MotionFX_initialize+0x6e>
 8014d80:	6813      	ldr	r3, [r2, #0]
 8014d82:	f240 4283 	movw	r2, #1155	; 0x483
 8014d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d1df      	bne.n	8014d4e <MotionFX_initialize+0x2e>
 8014d8e:	4b28      	ldr	r3, [pc, #160]	; (8014e30 <MotionFX_initialize+0x110>)
 8014d90:	2201      	movs	r2, #1
 8014d92:	601a      	str	r2, [r3, #0]
 8014d94:	681a      	ldr	r2, [r3, #0]
 8014d96:	2a00      	cmp	r2, #0
 8014d98:	d1fc      	bne.n	8014d94 <MotionFX_initialize+0x74>
 8014d9a:	4b26      	ldr	r3, [pc, #152]	; (8014e34 <MotionFX_initialize+0x114>)
 8014d9c:	4a20      	ldr	r2, [pc, #128]	; (8014e20 <MotionFX_initialize+0x100>)
 8014d9e:	601a      	str	r2, [r3, #0]
 8014da0:	681a      	ldr	r2, [r3, #0]
 8014da2:	4b20      	ldr	r3, [pc, #128]	; (8014e24 <MotionFX_initialize+0x104>)
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d1df      	bne.n	8014d68 <MotionFX_initialize+0x48>
 8014da8:	4b23      	ldr	r3, [pc, #140]	; (8014e38 <MotionFX_initialize+0x118>)
 8014daa:	4a24      	ldr	r2, [pc, #144]	; (8014e3c <MotionFX_initialize+0x11c>)
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	2501      	movs	r5, #1
 8014db0:	4620      	mov	r0, r4
 8014db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014db6:	7115      	strb	r5, [r2, #4]
 8014db8:	f7f7 faa0 	bl	800c2fc <MFX_emptyAttitude>
 8014dbc:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014dc0:	a901      	add	r1, sp, #4
 8014dc2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014dc6:	f7f6 fdc3 	bl	800b950 <updateOrientation>
 8014dca:	a903      	add	r1, sp, #12
 8014dcc:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014dd0:	f7f6 fdbe 	bl	800b950 <updateOrientation>
 8014dd4:	a902      	add	r1, sp, #8
 8014dd6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014dda:	f7f6 fdb9 	bl	800b950 <updateOrientation>
 8014dde:	4818      	ldr	r0, [pc, #96]	; (8014e40 <MotionFX_initialize+0x120>)
 8014de0:	4918      	ldr	r1, [pc, #96]	; (8014e44 <MotionFX_initialize+0x124>)
 8014de2:	4a19      	ldr	r2, [pc, #100]	; (8014e48 <MotionFX_initialize+0x128>)
 8014de4:	4b19      	ldr	r3, [pc, #100]	; (8014e4c <MotionFX_initialize+0x12c>)
 8014de6:	7365      	strb	r5, [r4, #13]
 8014de8:	4d19      	ldr	r5, [pc, #100]	; (8014e50 <MotionFX_initialize+0x130>)
 8014dea:	62a0      	str	r0, [r4, #40]	; 0x28
 8014dec:	6361      	str	r1, [r4, #52]	; 0x34
 8014dee:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014df2:	2100      	movs	r1, #0
 8014df4:	61a2      	str	r2, [r4, #24]
 8014df6:	61e3      	str	r3, [r4, #28]
 8014df8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014dfc:	f240 1301 	movw	r3, #257	; 0x101
 8014e00:	6225      	str	r5, [r4, #32]
 8014e02:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014e04:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014e08:	80a2      	strh	r2, [r4, #4]
 8014e0a:	81e3      	strh	r3, [r4, #14]
 8014e0c:	b005      	add	sp, #20
 8014e0e:	bd30      	pop	{r4, r5, pc}
 8014e10:	e0002000 	.word	0xe0002000
 8014e14:	e000ed00 	.word	0xe000ed00
 8014e18:	40023008 	.word	0x40023008
 8014e1c:	40023000 	.word	0x40023000
 8014e20:	f407a5c2 	.word	0xf407a5c2
 8014e24:	b5e8b5cd 	.word	0xb5e8b5cd
 8014e28:	e0042000 	.word	0xe0042000
 8014e2c:	5c001000 	.word	0x5c001000
 8014e30:	58024c08 	.word	0x58024c08
 8014e34:	58024c00 	.word	0x58024c00
 8014e38:	00756e65 	.word	0x00756e65
 8014e3c:	200002e0 	.word	0x200002e0
 8014e40:	3f666666 	.word	0x3f666666
 8014e44:	3f2ac083 	.word	0x3f2ac083
 8014e48:	3a51b717 	.word	0x3a51b717
 8014e4c:	3a378034 	.word	0x3a378034
 8014e50:	3b378034 	.word	0x3b378034

08014e54 <MotionFX_setKnobs>:
 8014e54:	4b23      	ldr	r3, [pc, #140]	; (8014ee4 <MotionFX_setKnobs+0x90>)
 8014e56:	791b      	ldrb	r3, [r3, #4]
 8014e58:	b903      	cbnz	r3, 8014e5c <MotionFX_setKnobs+0x8>
 8014e5a:	4770      	bx	lr
 8014e5c:	2900      	cmp	r1, #0
 8014e5e:	d0fc      	beq.n	8014e5a <MotionFX_setKnobs+0x6>
 8014e60:	b570      	push	{r4, r5, r6, lr}
 8014e62:	4604      	mov	r4, r0
 8014e64:	684a      	ldr	r2, [r1, #4]
 8014e66:	6808      	ldr	r0, [r1, #0]
 8014e68:	688b      	ldr	r3, [r1, #8]
 8014e6a:	6363      	str	r3, [r4, #52]	; 0x34
 8014e6c:	62a0      	str	r0, [r4, #40]	; 0x28
 8014e6e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014e70:	7b0b      	ldrb	r3, [r1, #12]
 8014e72:	7163      	strb	r3, [r4, #5]
 8014e74:	6908      	ldr	r0, [r1, #16]
 8014e76:	694a      	ldr	r2, [r1, #20]
 8014e78:	698b      	ldr	r3, [r1, #24]
 8014e7a:	6223      	str	r3, [r4, #32]
 8014e7c:	61e2      	str	r2, [r4, #28]
 8014e7e:	61a0      	str	r0, [r4, #24]
 8014e80:	7f0b      	ldrb	r3, [r1, #28]
 8014e82:	7123      	strb	r3, [r4, #4]
 8014e84:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014e88:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014e8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014e8e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014e92:	460a      	mov	r2, r1
 8014e94:	460b      	mov	r3, r1
 8014e96:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014e9a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014e9e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014ea2:	7889      	ldrb	r1, [r1, #2]
 8014ea4:	7892      	ldrb	r2, [r2, #2]
 8014ea6:	789b      	ldrb	r3, [r3, #2]
 8014ea8:	b084      	sub	sp, #16
 8014eaa:	f88d 1006 	strb.w	r1, [sp, #6]
 8014eae:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014eb2:	a901      	add	r1, sp, #4
 8014eb4:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014eb8:	f88d 200a 	strb.w	r2, [sp, #10]
 8014ebc:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014ec0:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014ec4:	f88d 300e 	strb.w	r3, [sp, #14]
 8014ec8:	f7f6 fd42 	bl	800b950 <updateOrientation>
 8014ecc:	a903      	add	r1, sp, #12
 8014ece:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014ed2:	f7f6 fd3d 	bl	800b950 <updateOrientation>
 8014ed6:	a902      	add	r1, sp, #8
 8014ed8:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014edc:	f7f6 fd38 	bl	800b950 <updateOrientation>
 8014ee0:	b004      	add	sp, #16
 8014ee2:	bd70      	pop	{r4, r5, r6, pc}
 8014ee4:	200002e0 	.word	0x200002e0

08014ee8 <MotionFX_getKnobs>:
 8014ee8:	4b1c      	ldr	r3, [pc, #112]	; (8014f5c <MotionFX_getKnobs+0x74>)
 8014eea:	791b      	ldrb	r3, [r3, #4]
 8014eec:	b903      	cbnz	r3, 8014ef0 <MotionFX_getKnobs+0x8>
 8014eee:	4770      	bx	lr
 8014ef0:	460a      	mov	r2, r1
 8014ef2:	2900      	cmp	r1, #0
 8014ef4:	d0fb      	beq.n	8014eee <MotionFX_getKnobs+0x6>
 8014ef6:	b510      	push	{r4, lr}
 8014ef8:	4604      	mov	r4, r0
 8014efa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014efc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f00:	6093      	str	r3, [r2, #8]
 8014f02:	6010      	str	r0, [r2, #0]
 8014f04:	6051      	str	r1, [r2, #4]
 8014f06:	7963      	ldrb	r3, [r4, #5]
 8014f08:	7313      	strb	r3, [r2, #12]
 8014f0a:	69a0      	ldr	r0, [r4, #24]
 8014f0c:	69e1      	ldr	r1, [r4, #28]
 8014f0e:	6a23      	ldr	r3, [r4, #32]
 8014f10:	6193      	str	r3, [r2, #24]
 8014f12:	6110      	str	r0, [r2, #16]
 8014f14:	6151      	str	r1, [r2, #20]
 8014f16:	7923      	ldrb	r3, [r4, #4]
 8014f18:	7713      	strb	r3, [r2, #28]
 8014f1a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f1e:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014f22:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014f28:	f102 011d 	add.w	r1, r2, #29
 8014f2c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014f30:	f7f6 fb66 	bl	800b600 <findAxis>
 8014f34:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014f38:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014f3c:	f7f6 fb60 	bl	800b600 <findAxis>
 8014f40:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014f44:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014f48:	f7f6 fb5a 	bl	800b600 <findAxis>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	f882 3020 	strb.w	r3, [r2, #32]
 8014f52:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014f56:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014f5a:	bd10      	pop	{r4, pc}
 8014f5c:	200002e0 	.word	0x200002e0

08014f60 <MotionFX_enable_6X>:
 8014f60:	4b0e      	ldr	r3, [pc, #56]	; (8014f9c <MotionFX_enable_6X+0x3c>)
 8014f62:	791b      	ldrb	r3, [r3, #4]
 8014f64:	b903      	cbnz	r3, 8014f68 <MotionFX_enable_6X+0x8>
 8014f66:	4770      	bx	lr
 8014f68:	2900      	cmp	r1, #0
 8014f6a:	d0fc      	beq.n	8014f66 <MotionFX_enable_6X+0x6>
 8014f6c:	b530      	push	{r4, r5, lr}
 8014f6e:	1d05      	adds	r5, r0, #4
 8014f70:	b099      	sub	sp, #100	; 0x64
 8014f72:	4604      	mov	r4, r0
 8014f74:	4629      	mov	r1, r5
 8014f76:	225c      	movs	r2, #92	; 0x5c
 8014f78:	a801      	add	r0, sp, #4
 8014f7a:	f002 fc77 	bl	801786c <memcpy>
 8014f7e:	4620      	mov	r0, r4
 8014f80:	f7f7 f9bc 	bl	800c2fc <MFX_emptyAttitude>
 8014f84:	a901      	add	r1, sp, #4
 8014f86:	4628      	mov	r0, r5
 8014f88:	225c      	movs	r2, #92	; 0x5c
 8014f8a:	f002 fc6f 	bl	801786c <memcpy>
 8014f8e:	2300      	movs	r3, #0
 8014f90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014f94:	7363      	strb	r3, [r4, #13]
 8014f96:	b019      	add	sp, #100	; 0x64
 8014f98:	bd30      	pop	{r4, r5, pc}
 8014f9a:	bf00      	nop
 8014f9c:	200002e0 	.word	0x200002e0

08014fa0 <MotionFX_enable_9X>:
 8014fa0:	4b0e      	ldr	r3, [pc, #56]	; (8014fdc <MotionFX_enable_9X+0x3c>)
 8014fa2:	791b      	ldrb	r3, [r3, #4]
 8014fa4:	b903      	cbnz	r3, 8014fa8 <MotionFX_enable_9X+0x8>
 8014fa6:	4770      	bx	lr
 8014fa8:	2900      	cmp	r1, #0
 8014faa:	d0fc      	beq.n	8014fa6 <MotionFX_enable_9X+0x6>
 8014fac:	b530      	push	{r4, r5, lr}
 8014fae:	1d05      	adds	r5, r0, #4
 8014fb0:	b099      	sub	sp, #100	; 0x64
 8014fb2:	4604      	mov	r4, r0
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	225c      	movs	r2, #92	; 0x5c
 8014fb8:	a801      	add	r0, sp, #4
 8014fba:	f002 fc57 	bl	801786c <memcpy>
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	f7f7 f99c 	bl	800c2fc <MFX_emptyAttitude>
 8014fc4:	a901      	add	r1, sp, #4
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	225c      	movs	r2, #92	; 0x5c
 8014fca:	f002 fc4f 	bl	801786c <memcpy>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014fd4:	7363      	strb	r3, [r4, #13]
 8014fd6:	b019      	add	sp, #100	; 0x64
 8014fd8:	bd30      	pop	{r4, r5, pc}
 8014fda:	bf00      	nop
 8014fdc:	200002e0 	.word	0x200002e0

08014fe0 <MotionFX_update>:
 8014fe0:	b470      	push	{r4, r5, r6}
 8014fe2:	4c06      	ldr	r4, [pc, #24]	; (8014ffc <MotionFX_update+0x1c>)
 8014fe4:	9e03      	ldr	r6, [sp, #12]
 8014fe6:	7925      	ldrb	r5, [r4, #4]
 8014fe8:	b90d      	cbnz	r5, 8014fee <MotionFX_update+0xe>
 8014fea:	bc70      	pop	{r4, r5, r6}
 8014fec:	4770      	bx	lr
 8014fee:	461c      	mov	r4, r3
 8014ff0:	ed94 0a00 	vldr	s0, [r4]
 8014ff4:	4633      	mov	r3, r6
 8014ff6:	bc70      	pop	{r4, r5, r6}
 8014ff8:	f7fc bf02 	b.w	8011e00 <iNemoEngine_API_Update>
 8014ffc:	200002e0 	.word	0x200002e0

08015000 <MotionFX_propagate>:
 8015000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015004:	ed2d 8b06 	vpush	{d8-d10}
 8015008:	4ca3      	ldr	r4, [pc, #652]	; (8015298 <MotionFX_propagate+0x298>)
 801500a:	7927      	ldrb	r7, [r4, #4]
 801500c:	b0a0      	sub	sp, #128	; 0x80
 801500e:	b927      	cbnz	r7, 801501a <MotionFX_propagate+0x1a>
 8015010:	b020      	add	sp, #128	; 0x80
 8015012:	ecbd 8b06 	vpop	{d8-d10}
 8015016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801501a:	4616      	mov	r6, r2
 801501c:	4604      	mov	r4, r0
 801501e:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8015022:	edd3 9a00 	vldr	s19, [r3]
 8015026:	460d      	mov	r5, r1
 8015028:	6851      	ldr	r1, [r2, #4]
 801502a:	6892      	ldr	r2, [r2, #8]
 801502c:	ab13      	add	r3, sp, #76	; 0x4c
 801502e:	c307      	stmia	r3!, {r0, r1, r2}
 8015030:	6830      	ldr	r0, [r6, #0]
 8015032:	6871      	ldr	r1, [r6, #4]
 8015034:	68b2      	ldr	r2, [r6, #8]
 8015036:	ab10      	add	r3, sp, #64	; 0x40
 8015038:	c307      	stmia	r3!, {r0, r1, r2}
 801503a:	4637      	mov	r7, r6
 801503c:	ab16      	add	r3, sp, #88	; 0x58
 801503e:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8015042:	6879      	ldr	r1, [r7, #4]
 8015044:	68ba      	ldr	r2, [r7, #8]
 8015046:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 801504a:	c307      	stmia	r3!, {r0, r1, r2}
 801504c:	aa13      	add	r2, sp, #76	; 0x4c
 801504e:	4651      	mov	r1, sl
 8015050:	a803      	add	r0, sp, #12
 8015052:	f7f6 fa73 	bl	800b53c <rotVect>
 8015056:	aa16      	add	r2, sp, #88	; 0x58
 8015058:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801505c:	a806      	add	r0, sp, #24
 801505e:	f7f6 fa6d 	bl	800b53c <rotVect>
 8015062:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8015066:	2b09      	cmp	r3, #9
 8015068:	d829      	bhi.n	80150be <MotionFX_propagate+0xbe>
 801506a:	eddd 8a04 	vldr	s17, [sp, #16]
 801506e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8015072:	ed9d 8a05 	vldr	s16, [sp, #20]
 8015076:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801507a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801507e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8015082:	ee17 0a90 	vmov	r0, s15
 8015086:	f7eb fa5f 	bl	8000548 <__aeabi_f2d>
 801508a:	ec41 0b10 	vmov	d0, r0, r1
 801508e:	f000 fe7d 	bl	8015d8c <sqrt>
 8015092:	ec51 0b10 	vmov	r0, r1, d0
 8015096:	f7eb fd87 	bl	8000ba8 <__aeabi_d2f>
 801509a:	ee07 0a90 	vmov	s15, r0
 801509e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80150a2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80150a6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80150aa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80150ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80150b2:	ed8d 9a03 	vstr	s18, [sp, #12]
 80150b6:	edcd 8a04 	vstr	s17, [sp, #16]
 80150ba:	ed8d 8a05 	vstr	s16, [sp, #20]
 80150be:	7923      	ldrb	r3, [r4, #4]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	f000 80d3 	beq.w	801526c <MotionFX_propagate+0x26c>
 80150c6:	ee07 3a90 	vmov	s15, r3
 80150ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80150d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80150d6:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 80150da:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80150de:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80150e2:	edd2 7a00 	vldr	s15, [r2]
 80150e6:	eddd 8a06 	vldr	s17, [sp, #24]
 80150ea:	ed9d 6a07 	vldr	s12, [sp, #28]
 80150ee:	ed9d 8a08 	vldr	s16, [sp, #32]
 80150f2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 801529c <MotionFX_propagate+0x29c>
 80150f6:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80152a0 <MotionFX_propagate+0x2a0>
 80150fa:	eee6 7aa8 	vfma.f32	s15, s13, s17
 80150fe:	ee26 9a07 	vmul.f32	s18, s12, s14
 8015102:	edc2 7a00 	vstr	s15, [r2]
 8015106:	edd3 7a00 	vldr	s15, [r3]
 801510a:	ed8d 9a07 	vstr	s18, [sp, #28]
 801510e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8015112:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8015116:	ee68 8a87 	vmul.f32	s17, s17, s14
 801511a:	edc3 7a00 	vstr	s15, [r3]
 801511e:	edd2 7a00 	vldr	s15, [r2]
 8015122:	edcd 8a06 	vstr	s17, [sp, #24]
 8015126:	eee6 7a88 	vfma.f32	s15, s13, s16
 801512a:	f604 1344 	addw	r3, r4, #2372	; 0x944
 801512e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8015132:	edc2 7a00 	vstr	s15, [r2]
 8015136:	edd3 7a00 	vldr	s15, [r3]
 801513a:	ed8d 8a08 	vstr	s16, [sp, #32]
 801513e:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8015142:	ed93 7a00 	vldr	s14, [r3]
 8015146:	ee39 9a67 	vsub.f32	s18, s18, s15
 801514a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 801514e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8015152:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8015156:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801515a:	ed93 7a00 	vldr	s14, [r3]
 801515e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8015162:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015166:	eee8 7a08 	vfma.f32	s15, s16, s16
 801516a:	ee29 0a80 	vmul.f32	s0, s19, s0
 801516e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8015172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015176:	dd7e      	ble.n	8015276 <MotionFX_propagate+0x276>
 8015178:	eeb1 aae7 	vsqrt.f32	s20, s15
 801517c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8015180:	eeb0 0a69 	vmov.f32	s0, s19
 8015184:	f000 fd96 	bl	8015cb4 <sinf>
 8015188:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 801518c:	eeb0 0a69 	vmov.f32	s0, s19
 8015190:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015194:	ee29 9a27 	vmul.f32	s18, s18, s15
 8015198:	ee28 8a27 	vmul.f32	s16, s16, s15
 801519c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 80151a0:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 80151a4:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80151a8:	f000 fd1e 	bl	8015be8 <cosf>
 80151ac:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80151b0:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80151b4:	a809      	add	r0, sp, #36	; 0x24
 80151b6:	4632      	mov	r2, r6
 80151b8:	4631      	mov	r1, r6
 80151ba:	f7f6 fc55 	bl	800ba68 <qmult>
 80151be:	edd8 7a00 	vldr	s15, [r8]
 80151c2:	ed96 7a00 	vldr	s14, [r6]
 80151c6:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 80151ca:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80151ce:	edd9 6a00 	vldr	s13, [r9]
 80151d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80151d6:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 80151da:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80151de:	3301      	adds	r3, #1
 80151e0:	aa13      	add	r2, sp, #76	; 0x4c
 80151e2:	edd7 6a00 	vldr	s13, [r7]
 80151e6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80151ea:	4651      	mov	r1, sl
 80151ec:	a809      	add	r0, sp, #36	; 0x24
 80151ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80151f2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80151f6:	eef1 6ae7 	vsqrt.f32	s13, s15
 80151fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80151fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015202:	ed86 7a00 	vstr	s14, [r6]
 8015206:	ed99 7a00 	vldr	s14, [r9]
 801520a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801520e:	ed89 7a00 	vstr	s14, [r9]
 8015212:	ed98 7a00 	vldr	s14, [r8]
 8015216:	ee27 7a27 	vmul.f32	s14, s14, s15
 801521a:	ed88 7a00 	vstr	s14, [r8]
 801521e:	ed97 7a00 	vldr	s14, [r7]
 8015222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015226:	edc7 7a00 	vstr	s15, [r7]
 801522a:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 801522e:	f7f6 f985 	bl	800b53c <rotVect>
 8015232:	f8d9 0000 	ldr.w	r0, [r9]
 8015236:	f8d8 1000 	ldr.w	r1, [r8]
 801523a:	683a      	ldr	r2, [r7, #0]
 801523c:	6833      	ldr	r3, [r6, #0]
 801523e:	60eb      	str	r3, [r5, #12]
 8015240:	6128      	str	r0, [r5, #16]
 8015242:	6169      	str	r1, [r5, #20]
 8015244:	61aa      	str	r2, [r5, #24]
 8015246:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801524a:	9301      	str	r3, [sp, #4]
 801524c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015250:	9300      	str	r3, [sp, #0]
 8015252:	a909      	add	r1, sp, #36	; 0x24
 8015254:	f105 031c 	add.w	r3, r5, #28
 8015258:	462a      	mov	r2, r5
 801525a:	f105 000c 	add.w	r0, r5, #12
 801525e:	f7f7 fc2b 	bl	800cab8 <output_update>
 8015262:	b020      	add	sp, #128	; 0x80
 8015264:	ecbd 8b06 	vpop	{d8-d10}
 8015268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526c:	2301      	movs	r3, #1
 801526e:	7123      	strb	r3, [r4, #4]
 8015270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015274:	e72f      	b.n	80150d6 <MotionFX_propagate+0xd6>
 8015276:	ee68 8a80 	vmul.f32	s17, s17, s0
 801527a:	ee29 9a00 	vmul.f32	s18, s18, s0
 801527e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8015282:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015286:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 801528a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 801528e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8015292:	930c      	str	r3, [sp, #48]	; 0x30
 8015294:	e78c      	b.n	80151b0 <MotionFX_propagate+0x1b0>
 8015296:	bf00      	nop
 8015298:	200002e0 	.word	0x200002e0
 801529c:	3c8efa35 	.word	0x3c8efa35
 80152a0:	38d1b718 	.word	0x38d1b718

080152a4 <MotionFX_MagCal_init>:
 80152a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152a6:	4c44      	ldr	r4, [pc, #272]	; (80153b8 <MotionFX_MagCal_init+0x114>)
 80152a8:	7923      	ldrb	r3, [r4, #4]
 80152aa:	b903      	cbnz	r3, 80152ae <MotionFX_MagCal_init+0xa>
 80152ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ae:	1e43      	subs	r3, r0, #1
 80152b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80152b4:	4605      	mov	r5, r0
 80152b6:	d2f9      	bcs.n	80152ac <MotionFX_MagCal_init+0x8>
 80152b8:	2900      	cmp	r1, #0
 80152ba:	d139      	bne.n	8015330 <MotionFX_MagCal_init+0x8c>
 80152bc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80152c0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80152c4:	4a3d      	ldr	r2, [pc, #244]	; (80153bc <MotionFX_MagCal_init+0x118>)
 80152c6:	1b5b      	subs	r3, r3, r5
 80152c8:	ee07 3a90 	vmov	s15, r3
 80152cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152d0:	23c8      	movs	r3, #200	; 0xc8
 80152d2:	eef0 7ae7 	vabs.f32	s15, s15
 80152d6:	fb93 f3f5 	sdiv	r3, r3, r5
 80152da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	2b0f      	cmp	r3, #15
 80152e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152e6:	bf28      	it	cs
 80152e8:	230f      	movcs	r3, #15
 80152ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ee:	6015      	str	r5, [r2, #0]
 80152f0:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 80152f4:	b22d      	sxth	r5, r5
 80152f6:	dc0e      	bgt.n	8015316 <MotionFX_MagCal_init+0x72>
 80152f8:	edd4 7a03 	vldr	s15, [r4, #12]
 80152fc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80153c0 <MotionFX_MagCal_init+0x11c>
 8015300:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80153c4 <MotionFX_MagCal_init+0x120>
 8015304:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015308:	eef0 7ae7 	vabs.f32	s15, s15
 801530c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015314:	dd08      	ble.n	8015328 <MotionFX_MagCal_init+0x84>
 8015316:	2300      	movs	r3, #0
 8015318:	492b      	ldr	r1, [pc, #172]	; (80153c8 <MotionFX_MagCal_init+0x124>)
 801531a:	8165      	strh	r5, [r4, #10]
 801531c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8015320:	60e1      	str	r1, [r4, #12]
 8015322:	8223      	strh	r3, [r4, #16]
 8015324:	6163      	str	r3, [r4, #20]
 8015326:	8122      	strh	r2, [r4, #8]
 8015328:	2300      	movs	r3, #0
 801532a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 801532e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015330:	2600      	movs	r6, #0
 8015332:	4826      	ldr	r0, [pc, #152]	; (80153cc <MotionFX_MagCal_init+0x128>)
 8015334:	61a0      	str	r0, [r4, #24]
 8015336:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 801533a:	4631      	mov	r1, r6
 801533c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015340:	6122      	str	r2, [r4, #16]
 8015342:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8015346:	f44f 7248 	mov.w	r2, #800	; 0x320
 801534a:	6166      	str	r6, [r4, #20]
 801534c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8015350:	6566      	str	r6, [r4, #84]	; 0x54
 8015352:	83a6      	strh	r6, [r4, #28]
 8015354:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8015358:	f002 fab0 	bl	80178bc <memset>
 801535c:	23ff      	movs	r3, #255	; 0xff
 801535e:	225f      	movs	r2, #95	; 0x5f
 8015360:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8015364:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8015368:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801536c:	2200      	movs	r2, #0
 801536e:	2300      	movs	r3, #0
 8015370:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015374:	f44f 7780 	mov.w	r7, #256	; 0x100
 8015378:	4631      	mov	r1, r6
 801537a:	62a6      	str	r6, [r4, #40]	; 0x28
 801537c:	2230      	movs	r2, #48	; 0x30
 801537e:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8015382:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8015386:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 801538a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 801538c:	f002 fa96 	bl	80178bc <memset>
 8015390:	f1a5 030a 	sub.w	r3, r5, #10
 8015394:	b29b      	uxth	r3, r3
 8015396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801539a:	2b32      	cmp	r3, #50	; 0x32
 801539c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 80153a0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 80153a4:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80153a8:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80153ac:	d888      	bhi.n	80152c0 <MotionFX_MagCal_init+0x1c>
 80153ae:	2301      	movs	r3, #1
 80153b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80153b4:	e784      	b.n	80152c0 <MotionFX_MagCal_init+0x1c>
 80153b6:	bf00      	nop
 80153b8:	200002e0 	.word	0x200002e0
 80153bc:	20000000 	.word	0x20000000
 80153c0:	3dcccccd 	.word	0x3dcccccd
 80153c4:	3c23d70a 	.word	0x3c23d70a
 80153c8:	3dcccccd 	.word	0x3dcccccd
 80153cc:	200015d4 	.word	0x200015d4

080153d0 <MotionFX_MagCal_run>:
 80153d0:	4a3e      	ldr	r2, [pc, #248]	; (80154cc <MotionFX_MagCal_run+0xfc>)
 80153d2:	7913      	ldrb	r3, [r2, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d077      	beq.n	80154c8 <MotionFX_MagCal_run+0xf8>
 80153d8:	ed90 7a00 	vldr	s14, [r0]
 80153dc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80154d0 <MotionFX_MagCal_run+0x100>
 80153e0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80153e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e8:	bfb4      	ite	lt
 80153ea:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80153ee:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80153f2:	eee7 7a26 	vfma.f32	s15, s14, s13
 80153f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153f8:	ed90 7a01 	vldr	s14, [r0, #4]
 80153fc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80154d0 <MotionFX_MagCal_run+0x100>
 8015400:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8015404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015408:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015410:	ee17 1a90 	vmov	r1, s15
 8015414:	bfb4      	ite	lt
 8015416:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801541a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 801541e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015422:	ed90 7a02 	vldr	s14, [r0, #8]
 8015426:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80154d0 <MotionFX_MagCal_run+0x100>
 801542a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801542e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015436:	ee17 4a90 	vmov	r4, s15
 801543a:	bfac      	ite	ge
 801543c:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015440:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015444:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801544c:	ee17 7a90 	vmov	r7, s15
 8015450:	b383      	cbz	r3, 80154b4 <MotionFX_MagCal_run+0xe4>
 8015452:	4820      	ldr	r0, [pc, #128]	; (80154d4 <MotionFX_MagCal_run+0x104>)
 8015454:	6805      	ldr	r5, [r0, #0]
 8015456:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 801545a:	fb15 f503 	smulbb	r5, r5, r3
 801545e:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 8015462:	00dd      	lsls	r5, r3, #3
 8015464:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8015468:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80154d8 <MotionFX_MagCal_run+0x108>
 801546c:	42b1      	cmp	r1, r6
 801546e:	bfa8      	it	ge
 8015470:	4631      	movge	r1, r6
 8015472:	42b7      	cmp	r7, r6
 8015474:	bfa8      	it	ge
 8015476:	4637      	movge	r7, r6
 8015478:	4561      	cmp	r1, ip
 801547a:	4608      	mov	r0, r1
 801547c:	bfb8      	it	lt
 801547e:	4660      	movlt	r0, ip
 8015480:	4564      	cmp	r4, ip
 8015482:	db1f      	blt.n	80154c4 <MotionFX_MagCal_run+0xf4>
 8015484:	42b4      	cmp	r4, r6
 8015486:	bfa8      	it	ge
 8015488:	4634      	movge	r4, r6
 801548a:	b224      	sxth	r4, r4
 801548c:	4e12      	ldr	r6, [pc, #72]	; (80154d8 <MotionFX_MagCal_run+0x108>)
 801548e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8015492:	3301      	adds	r3, #1
 8015494:	4415      	add	r5, r2
 8015496:	b2db      	uxtb	r3, r3
 8015498:	42b7      	cmp	r7, r6
 801549a:	bfb8      	it	lt
 801549c:	4637      	movlt	r7, r6
 801549e:	428b      	cmp	r3, r1
 80154a0:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 80154a4:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 80154a8:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 80154ac:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 80154b0:	d014      	beq.n	80154dc <MotionFX_MagCal_run+0x10c>
 80154b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154b4:	68c0      	ldr	r0, [r0, #12]
 80154b6:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 80154ba:	2001      	movs	r0, #1
 80154bc:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 80154c0:	461d      	mov	r5, r3
 80154c2:	e7cf      	b.n	8015464 <MotionFX_MagCal_run+0x94>
 80154c4:	4634      	mov	r4, r6
 80154c6:	e7e1      	b.n	801548c <MotionFX_MagCal_run+0xbc>
 80154c8:	4770      	bx	lr
 80154ca:	bf00      	nop
 80154cc:	200002e0 	.word	0x200002e0
 80154d0:	43fa0000 	.word	0x43fa0000
 80154d4:	20000000 	.word	0x20000000
 80154d8:	ffff8002 	.word	0xffff8002
 80154dc:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 80154e0:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 80154e4:	2000      	movs	r0, #0
 80154e6:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	f000 8159 	beq.w	80157a2 <MotionFX_MagCal_run+0x3d2>
 80154f0:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 80154f4:	8a57      	ldrh	r7, [r2, #18]
 80154f6:	8a13      	ldrh	r3, [r2, #16]
 80154f8:	2900      	cmp	r1, #0
 80154fa:	f000 8150 	beq.w	801579e <MotionFX_MagCal_run+0x3ce>
 80154fe:	2f00      	cmp	r7, #0
 8015500:	f000 814d 	beq.w	801579e <MotionFX_MagCal_run+0x3ce>
 8015504:	42bb      	cmp	r3, r7
 8015506:	bf28      	it	cs
 8015508:	463b      	movcs	r3, r7
 801550a:	3301      	adds	r3, #1
 801550c:	b29b      	uxth	r3, r3
 801550e:	42bb      	cmp	r3, r7
 8015510:	bf28      	it	cs
 8015512:	463b      	movcs	r3, r7
 8015514:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015518:	191d      	adds	r5, r3, r4
 801551a:	f04f 0c01 	mov.w	ip, #1
 801551e:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8015522:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8015526:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 801552a:	f8c5 e002 	str.w	lr, [r5, #2]
 801552e:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 8015532:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015536:	4561      	cmp	r1, ip
 8015538:	f000 812a 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 801553c:	4463      	add	r3, ip
 801553e:	b29b      	uxth	r3, r3
 8015540:	42bb      	cmp	r3, r7
 8015542:	bf28      	it	cs
 8015544:	463b      	movcs	r3, r7
 8015546:	eb03 0e04 	add.w	lr, r3, r4
 801554a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801554e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015552:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8015556:	f8c5 e002 	str.w	lr, [r5, #2]
 801555a:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 801555e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015562:	2902      	cmp	r1, #2
 8015564:	f000 8114 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 8015568:	4463      	add	r3, ip
 801556a:	b29b      	uxth	r3, r3
 801556c:	42bb      	cmp	r3, r7
 801556e:	bf28      	it	cs
 8015570:	463b      	movcs	r3, r7
 8015572:	eb03 0e04 	add.w	lr, r3, r4
 8015576:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 801557a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801557e:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8015582:	f8c5 e002 	str.w	lr, [r5, #2]
 8015586:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 801558a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801558e:	2903      	cmp	r1, #3
 8015590:	f000 80fe 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 8015594:	4463      	add	r3, ip
 8015596:	b29b      	uxth	r3, r3
 8015598:	42bb      	cmp	r3, r7
 801559a:	bf28      	it	cs
 801559c:	463b      	movcs	r3, r7
 801559e:	eb03 0e04 	add.w	lr, r3, r4
 80155a2:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155a6:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80155aa:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 80155ae:	f8c5 e002 	str.w	lr, [r5, #2]
 80155b2:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 80155b6:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155ba:	2904      	cmp	r1, #4
 80155bc:	f000 80e8 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 80155c0:	4463      	add	r3, ip
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	42bb      	cmp	r3, r7
 80155c6:	bf28      	it	cs
 80155c8:	463b      	movcs	r3, r7
 80155ca:	eb03 0e04 	add.w	lr, r3, r4
 80155ce:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80155d2:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80155d6:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 80155da:	f8c5 e002 	str.w	lr, [r5, #2]
 80155de:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 80155e2:	f8a5 e006 	strh.w	lr, [r5, #6]
 80155e6:	2905      	cmp	r1, #5
 80155e8:	f000 80d2 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 80155ec:	4463      	add	r3, ip
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	42bb      	cmp	r3, r7
 80155f2:	bf28      	it	cs
 80155f4:	463b      	movcs	r3, r7
 80155f6:	441c      	add	r4, r3
 80155f8:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 80155fc:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8015600:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 8015604:	f8c5 4002 	str.w	r4, [r5, #2]
 8015608:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 801560c:	80ec      	strh	r4, [r5, #6]
 801560e:	2906      	cmp	r1, #6
 8015610:	f000 80be 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 8015614:	4463      	add	r3, ip
 8015616:	b29b      	uxth	r3, r3
 8015618:	42bb      	cmp	r3, r7
 801561a:	bf28      	it	cs
 801561c:	463b      	movcs	r3, r7
 801561e:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015622:	eb03 0c04 	add.w	ip, r3, r4
 8015626:	2501      	movs	r5, #1
 8015628:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 801562c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8015630:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 8015634:	f8cc e002 	str.w	lr, [ip, #2]
 8015638:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 801563c:	f8ac e006 	strh.w	lr, [ip, #6]
 8015640:	2907      	cmp	r1, #7
 8015642:	f000 80a5 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 8015646:	442b      	add	r3, r5
 8015648:	b29b      	uxth	r3, r3
 801564a:	42bb      	cmp	r3, r7
 801564c:	bf28      	it	cs
 801564e:	463b      	movcs	r3, r7
 8015650:	eb03 0e04 	add.w	lr, r3, r4
 8015654:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015658:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801565c:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8015660:	f8cc e002 	str.w	lr, [ip, #2]
 8015664:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8015668:	f8ac e006 	strh.w	lr, [ip, #6]
 801566c:	2908      	cmp	r1, #8
 801566e:	f000 808f 	beq.w	8015790 <MotionFX_MagCal_run+0x3c0>
 8015672:	442b      	add	r3, r5
 8015674:	b29b      	uxth	r3, r3
 8015676:	42bb      	cmp	r3, r7
 8015678:	bf28      	it	cs
 801567a:	463b      	movcs	r3, r7
 801567c:	eb03 0e04 	add.w	lr, r3, r4
 8015680:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015684:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015688:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 801568c:	f8cc e002 	str.w	lr, [ip, #2]
 8015690:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8015694:	f8ac e006 	strh.w	lr, [ip, #6]
 8015698:	2909      	cmp	r1, #9
 801569a:	d079      	beq.n	8015790 <MotionFX_MagCal_run+0x3c0>
 801569c:	442b      	add	r3, r5
 801569e:	b29b      	uxth	r3, r3
 80156a0:	42bb      	cmp	r3, r7
 80156a2:	bf28      	it	cs
 80156a4:	463b      	movcs	r3, r7
 80156a6:	eb03 0e04 	add.w	lr, r3, r4
 80156aa:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80156ae:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80156b2:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 80156b6:	f8cc e002 	str.w	lr, [ip, #2]
 80156ba:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 80156be:	f8ac e006 	strh.w	lr, [ip, #6]
 80156c2:	290a      	cmp	r1, #10
 80156c4:	d064      	beq.n	8015790 <MotionFX_MagCal_run+0x3c0>
 80156c6:	442b      	add	r3, r5
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	42bb      	cmp	r3, r7
 80156cc:	bf28      	it	cs
 80156ce:	463b      	movcs	r3, r7
 80156d0:	eb03 0e04 	add.w	lr, r3, r4
 80156d4:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80156d8:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80156dc:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 80156e0:	f8cc e002 	str.w	lr, [ip, #2]
 80156e4:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 80156e8:	f8ac e006 	strh.w	lr, [ip, #6]
 80156ec:	290b      	cmp	r1, #11
 80156ee:	d04f      	beq.n	8015790 <MotionFX_MagCal_run+0x3c0>
 80156f0:	442b      	add	r3, r5
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	42bb      	cmp	r3, r7
 80156f6:	bf28      	it	cs
 80156f8:	463b      	movcs	r3, r7
 80156fa:	eb03 0e04 	add.w	lr, r3, r4
 80156fe:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015702:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015706:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 801570a:	f8cc e002 	str.w	lr, [ip, #2]
 801570e:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8015712:	f8ac e006 	strh.w	lr, [ip, #6]
 8015716:	290c      	cmp	r1, #12
 8015718:	d03a      	beq.n	8015790 <MotionFX_MagCal_run+0x3c0>
 801571a:	442b      	add	r3, r5
 801571c:	b29b      	uxth	r3, r3
 801571e:	42bb      	cmp	r3, r7
 8015720:	bf28      	it	cs
 8015722:	463b      	movcs	r3, r7
 8015724:	eb03 0e04 	add.w	lr, r3, r4
 8015728:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801572c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015730:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 8015734:	f8cc e002 	str.w	lr, [ip, #2]
 8015738:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 801573c:	f8ac e006 	strh.w	lr, [ip, #6]
 8015740:	290d      	cmp	r1, #13
 8015742:	d025      	beq.n	8015790 <MotionFX_MagCal_run+0x3c0>
 8015744:	442b      	add	r3, r5
 8015746:	b29b      	uxth	r3, r3
 8015748:	42bb      	cmp	r3, r7
 801574a:	bf28      	it	cs
 801574c:	463b      	movcs	r3, r7
 801574e:	eb03 0e04 	add.w	lr, r3, r4
 8015752:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015756:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801575a:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 801575e:	f8cc e002 	str.w	lr, [ip, #2]
 8015762:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8015766:	f8ac e006 	strh.w	lr, [ip, #6]
 801576a:	290e      	cmp	r1, #14
 801576c:	d010      	beq.n	8015790 <MotionFX_MagCal_run+0x3c0>
 801576e:	442b      	add	r3, r5
 8015770:	b29b      	uxth	r3, r3
 8015772:	42bb      	cmp	r3, r7
 8015774:	bf28      	it	cs
 8015776:	463b      	movcs	r3, r7
 8015778:	441c      	add	r4, r3
 801577a:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 801577e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8015782:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8015786:	f8c7 0002 	str.w	r0, [r7, #2]
 801578a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 801578e:	80f8      	strh	r0, [r7, #6]
 8015790:	3901      	subs	r1, #1
 8015792:	b2c9      	uxtb	r1, r1
 8015794:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8015798:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801579c:	4434      	add	r4, r6
 801579e:	8213      	strh	r3, [r2, #16]
 80157a0:	6154      	str	r4, [r2, #20]
 80157a2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f43f ae83 	beq.w	80154b2 <MotionFX_MagCal_run+0xe2>
 80157ac:	8a11      	ldrh	r1, [r2, #16]
 80157ae:	8a53      	ldrh	r3, [r2, #18]
 80157b0:	428b      	cmp	r3, r1
 80157b2:	d022      	beq.n	80157fa <MotionFX_MagCal_run+0x42a>
 80157b4:	b341      	cbz	r1, 8015808 <MotionFX_MagCal_run+0x438>
 80157b6:	6953      	ldr	r3, [r2, #20]
 80157b8:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80157bc:	3301      	adds	r3, #1
 80157be:	4403      	add	r3, r0
 80157c0:	1c58      	adds	r0, r3, #1
 80157c2:	d021      	beq.n	8015808 <MotionFX_MagCal_run+0x438>
 80157c4:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 80157c8:	3410      	adds	r4, #16
 80157ca:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80157cc:	42a0      	cmp	r0, r4
 80157ce:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 80157d2:	bf84      	itt	hi
 80157d4:	6553      	strhi	r3, [r2, #84]	; 0x54
 80157d6:	4618      	movhi	r0, r3
 80157d8:	4420      	add	r0, r4
 80157da:	4283      	cmp	r3, r0
 80157dc:	f4ff ae69 	bcc.w	80154b2 <MotionFX_MagCal_run+0xe2>
 80157e0:	b131      	cbz	r1, 80157f0 <MotionFX_MagCal_run+0x420>
 80157e2:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80157e6:	6952      	ldr	r2, [r2, #20]
 80157e8:	3901      	subs	r1, #1
 80157ea:	fb00 2111 	mls	r1, r0, r1, r2
 80157ee:	b289      	uxth	r1, r1
 80157f0:	1a5b      	subs	r3, r3, r1
 80157f2:	b21b      	sxth	r3, r3
 80157f4:	42a3      	cmp	r3, r4
 80157f6:	f6ff ae5c 	blt.w	80154b2 <MotionFX_MagCal_run+0xe2>
 80157fa:	4905      	ldr	r1, [pc, #20]	; (8015810 <MotionFX_MagCal_run+0x440>)
 80157fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015800:	f101 0014 	add.w	r0, r1, #20
 8015804:	f7fd babc 	b.w	8012d80 <MEMS_runMagCal>
 8015808:	f242 7410 	movw	r4, #10000	; 0x2710
 801580c:	2300      	movs	r3, #0
 801580e:	e7dc      	b.n	80157ca <MotionFX_MagCal_run+0x3fa>
 8015810:	200002e8 	.word	0x200002e8

08015814 <MotionFX_MagCal_getParams>:
 8015814:	b4f0      	push	{r4, r5, r6, r7}
 8015816:	4f1b      	ldr	r7, [pc, #108]	; (8015884 <MotionFX_MagCal_getParams+0x70>)
 8015818:	793b      	ldrb	r3, [r7, #4]
 801581a:	b08e      	sub	sp, #56	; 0x38
 801581c:	b373      	cbz	r3, 801587c <MotionFX_MagCal_getParams+0x68>
 801581e:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8015822:	4606      	mov	r6, r0
 8015824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015826:	ac01      	add	r4, sp, #4
 8015828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801582a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801582c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801582e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015830:	ed9d 7a03 	vldr	s14, [sp, #12]
 8015834:	eddd 6a02 	vldr	s13, [sp, #8]
 8015838:	eddd 7a04 	vldr	s15, [sp, #16]
 801583c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015888 <MotionFX_MagCal_getParams+0x74>
 8015840:	682d      	ldr	r5, [r5, #0]
 8015842:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 8015846:	7337      	strb	r7, [r6, #12]
 8015848:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801584c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801585a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801585e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015862:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015866:	ee66 6a86 	vmul.f32	s13, s13, s12
 801586a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801586e:	6025      	str	r5, [r4, #0]
 8015870:	edc6 6a00 	vstr	s13, [r6]
 8015874:	ed86 7a01 	vstr	s14, [r6, #4]
 8015878:	edc6 7a02 	vstr	s15, [r6, #8]
 801587c:	b00e      	add	sp, #56	; 0x38
 801587e:	bcf0      	pop	{r4, r5, r6, r7}
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	200002e0 	.word	0x200002e0
 8015888:	3b03126f 	.word	0x3b03126f

0801588c <_Znwj>:
 801588c:	2801      	cmp	r0, #1
 801588e:	bf38      	it	cc
 8015890:	2001      	movcc	r0, #1
 8015892:	b510      	push	{r4, lr}
 8015894:	4604      	mov	r4, r0
 8015896:	4620      	mov	r0, r4
 8015898:	f001 ffd8 	bl	801784c <malloc>
 801589c:	b930      	cbnz	r0, 80158ac <_Znwj+0x20>
 801589e:	f000 f88b 	bl	80159b8 <_ZSt15get_new_handlerv>
 80158a2:	b908      	cbnz	r0, 80158a8 <_Znwj+0x1c>
 80158a4:	f001 ffa0 	bl	80177e8 <abort>
 80158a8:	4780      	blx	r0
 80158aa:	e7f4      	b.n	8015896 <_Znwj+0xa>
 80158ac:	bd10      	pop	{r4, pc}

080158ae <_ZNSaIcEC1Ev>:
 80158ae:	4770      	bx	lr

080158b0 <_ZNSaIcED1Ev>:
 80158b0:	4770      	bx	lr

080158b2 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80158b2:	b10a      	cbz	r2, 80158b8 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80158b4:	f001 bfda 	b.w	801786c <memcpy>
 80158b8:	4770      	bx	lr
	...

080158bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80158bc:	b508      	push	{r3, lr}
 80158be:	680b      	ldr	r3, [r1, #0]
 80158c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80158c4:	d302      	bcc.n	80158cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80158c6:	480d      	ldr	r0, [pc, #52]	; (80158fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80158c8:	f000 f884 	bl	80159d4 <_ZSt20__throw_length_errorPKc>
 80158cc:	4293      	cmp	r3, r2
 80158ce:	d90b      	bls.n	80158e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80158d0:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80158d4:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80158d8:	d206      	bcs.n	80158e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80158da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80158de:	bf2a      	itet	cs
 80158e0:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80158e4:	6008      	strcc	r0, [r1, #0]
 80158e6:	600b      	strcs	r3, [r1, #0]
 80158e8:	6808      	ldr	r0, [r1, #0]
 80158ea:	3001      	adds	r0, #1
 80158ec:	d501      	bpl.n	80158f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80158ee:	f000 f86b 	bl	80159c8 <_ZSt17__throw_bad_allocv>
 80158f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80158f6:	f7ff bfc9 	b.w	801588c <_Znwj>
 80158fa:	bf00      	nop
 80158fc:	0801a8b8 	.word	0x0801a8b8

08015900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8015900:	f850 3b08 	ldr.w	r3, [r0], #8
 8015904:	4283      	cmp	r3, r0
 8015906:	d002      	beq.n	801590e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8015908:	4618      	mov	r0, r3
 801590a:	f000 b853 	b.w	80159b4 <_ZdlPv>
 801590e:	4770      	bx	lr

08015910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8015910:	2a01      	cmp	r2, #1
 8015912:	b510      	push	{r4, lr}
 8015914:	d102      	bne.n	801591c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8015916:	780a      	ldrb	r2, [r1, #0]
 8015918:	7002      	strb	r2, [r0, #0]
 801591a:	bd10      	pop	{r4, pc}
 801591c:	f7ff ffc9 	bl	80158b2 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8015920:	e7fb      	b.n	801591a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08015922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8015922:	b508      	push	{r3, lr}
 8015924:	1a52      	subs	r2, r2, r1
 8015926:	f7ff fff3 	bl	8015910 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801592a:	bd08      	pop	{r3, pc}

0801592c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 801592c:	b510      	push	{r4, lr}
 801592e:	4604      	mov	r4, r0
 8015930:	f7ff ffe6 	bl	8015900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8015934:	4620      	mov	r0, r4
 8015936:	bd10      	pop	{r4, pc}

08015938 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8015938:	6840      	ldr	r0, [r0, #4]
 801593a:	4770      	bx	lr

0801593c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 801593c:	6800      	ldr	r0, [r0, #0]
 801593e:	4770      	bx	lr

08015940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8015940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015942:	4604      	mov	r4, r0
 8015944:	4616      	mov	r6, r2
 8015946:	460d      	mov	r5, r1
 8015948:	b919      	cbnz	r1, 8015952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801594a:	b112      	cbz	r2, 8015952 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 801594c:	480d      	ldr	r0, [pc, #52]	; (8015984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 801594e:	f000 f83e 	bl	80159ce <_ZSt19__throw_logic_errorPKc>
 8015952:	1b73      	subs	r3, r6, r5
 8015954:	2b0f      	cmp	r3, #15
 8015956:	9301      	str	r3, [sp, #4]
 8015958:	d907      	bls.n	801596a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 801595a:	2200      	movs	r2, #0
 801595c:	a901      	add	r1, sp, #4
 801595e:	4620      	mov	r0, r4
 8015960:	f7ff ffac 	bl	80158bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8015964:	9b01      	ldr	r3, [sp, #4]
 8015966:	6020      	str	r0, [r4, #0]
 8015968:	60a3      	str	r3, [r4, #8]
 801596a:	4632      	mov	r2, r6
 801596c:	4629      	mov	r1, r5
 801596e:	6820      	ldr	r0, [r4, #0]
 8015970:	f7ff ffd7 	bl	8015922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8015974:	9b01      	ldr	r3, [sp, #4]
 8015976:	6822      	ldr	r2, [r4, #0]
 8015978:	6063      	str	r3, [r4, #4]
 801597a:	2100      	movs	r1, #0
 801597c:	54d1      	strb	r1, [r2, r3]
 801597e:	b002      	add	sp, #8
 8015980:	bd70      	pop	{r4, r5, r6, pc}
 8015982:	bf00      	nop
 8015984:	0801a8d0 	.word	0x0801a8d0

08015988 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	f100 0308 	add.w	r3, r0, #8
 801598e:	4604      	mov	r4, r0
 8015990:	6003      	str	r3, [r0, #0]
 8015992:	460d      	mov	r5, r1
 8015994:	b159      	cbz	r1, 80159ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8015996:	4608      	mov	r0, r1
 8015998:	f7ea fc6a 	bl	8000270 <strlen>
 801599c:	182a      	adds	r2, r5, r0
 801599e:	4620      	mov	r0, r4
 80159a0:	f04f 0300 	mov.w	r3, #0
 80159a4:	4629      	mov	r1, r5
 80159a6:	f7ff ffcb 	bl	8015940 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80159aa:	4620      	mov	r0, r4
 80159ac:	bd38      	pop	{r3, r4, r5, pc}
 80159ae:	f04f 32ff 	mov.w	r2, #4294967295
 80159b2:	e7f4      	b.n	801599e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

080159b4 <_ZdlPv>:
 80159b4:	f001 bf52 	b.w	801785c <free>

080159b8 <_ZSt15get_new_handlerv>:
 80159b8:	4b02      	ldr	r3, [pc, #8]	; (80159c4 <_ZSt15get_new_handlerv+0xc>)
 80159ba:	6818      	ldr	r0, [r3, #0]
 80159bc:	f3bf 8f5b 	dmb	ish
 80159c0:	4770      	bx	lr
 80159c2:	bf00      	nop
 80159c4:	200011b4 	.word	0x200011b4

080159c8 <_ZSt17__throw_bad_allocv>:
 80159c8:	b508      	push	{r3, lr}
 80159ca:	f001 ff0d 	bl	80177e8 <abort>

080159ce <_ZSt19__throw_logic_errorPKc>:
 80159ce:	b508      	push	{r3, lr}
 80159d0:	f001 ff0a 	bl	80177e8 <abort>

080159d4 <_ZSt20__throw_length_errorPKc>:
 80159d4:	b508      	push	{r3, lr}
 80159d6:	f001 ff07 	bl	80177e8 <abort>
 80159da:	0000      	movs	r0, r0
 80159dc:	0000      	movs	r0, r0
	...

080159e0 <ceil>:
 80159e0:	ec51 0b10 	vmov	r0, r1, d0
 80159e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80159ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80159f0:	2e13      	cmp	r6, #19
 80159f2:	ee10 5a10 	vmov	r5, s0
 80159f6:	ee10 8a10 	vmov	r8, s0
 80159fa:	460c      	mov	r4, r1
 80159fc:	dc30      	bgt.n	8015a60 <ceil+0x80>
 80159fe:	2e00      	cmp	r6, #0
 8015a00:	da12      	bge.n	8015a28 <ceil+0x48>
 8015a02:	a335      	add	r3, pc, #212	; (adr r3, 8015ad8 <ceil+0xf8>)
 8015a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a08:	f7ea fc40 	bl	800028c <__adddf3>
 8015a0c:	2200      	movs	r2, #0
 8015a0e:	2300      	movs	r3, #0
 8015a10:	f7eb f882 	bl	8000b18 <__aeabi_dcmpgt>
 8015a14:	b128      	cbz	r0, 8015a22 <ceil+0x42>
 8015a16:	2c00      	cmp	r4, #0
 8015a18:	db55      	blt.n	8015ac6 <ceil+0xe6>
 8015a1a:	432c      	orrs	r4, r5
 8015a1c:	d057      	beq.n	8015ace <ceil+0xee>
 8015a1e:	4c30      	ldr	r4, [pc, #192]	; (8015ae0 <ceil+0x100>)
 8015a20:	2500      	movs	r5, #0
 8015a22:	4621      	mov	r1, r4
 8015a24:	4628      	mov	r0, r5
 8015a26:	e025      	b.n	8015a74 <ceil+0x94>
 8015a28:	4f2e      	ldr	r7, [pc, #184]	; (8015ae4 <ceil+0x104>)
 8015a2a:	4137      	asrs	r7, r6
 8015a2c:	ea01 0307 	and.w	r3, r1, r7
 8015a30:	4303      	orrs	r3, r0
 8015a32:	d01f      	beq.n	8015a74 <ceil+0x94>
 8015a34:	a328      	add	r3, pc, #160	; (adr r3, 8015ad8 <ceil+0xf8>)
 8015a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3a:	f7ea fc27 	bl	800028c <__adddf3>
 8015a3e:	2200      	movs	r2, #0
 8015a40:	2300      	movs	r3, #0
 8015a42:	f7eb f869 	bl	8000b18 <__aeabi_dcmpgt>
 8015a46:	2800      	cmp	r0, #0
 8015a48:	d0eb      	beq.n	8015a22 <ceil+0x42>
 8015a4a:	2c00      	cmp	r4, #0
 8015a4c:	bfc2      	ittt	gt
 8015a4e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8015a52:	fa43 f606 	asrgt.w	r6, r3, r6
 8015a56:	19a4      	addgt	r4, r4, r6
 8015a58:	ea24 0407 	bic.w	r4, r4, r7
 8015a5c:	2500      	movs	r5, #0
 8015a5e:	e7e0      	b.n	8015a22 <ceil+0x42>
 8015a60:	2e33      	cmp	r6, #51	; 0x33
 8015a62:	dd0b      	ble.n	8015a7c <ceil+0x9c>
 8015a64:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015a68:	d104      	bne.n	8015a74 <ceil+0x94>
 8015a6a:	ee10 2a10 	vmov	r2, s0
 8015a6e:	460b      	mov	r3, r1
 8015a70:	f7ea fc0c 	bl	800028c <__adddf3>
 8015a74:	ec41 0b10 	vmov	d0, r0, r1
 8015a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a7c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015a80:	f04f 33ff 	mov.w	r3, #4294967295
 8015a84:	fa23 f707 	lsr.w	r7, r3, r7
 8015a88:	4207      	tst	r7, r0
 8015a8a:	d0f3      	beq.n	8015a74 <ceil+0x94>
 8015a8c:	a312      	add	r3, pc, #72	; (adr r3, 8015ad8 <ceil+0xf8>)
 8015a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a92:	f7ea fbfb 	bl	800028c <__adddf3>
 8015a96:	2200      	movs	r2, #0
 8015a98:	2300      	movs	r3, #0
 8015a9a:	f7eb f83d 	bl	8000b18 <__aeabi_dcmpgt>
 8015a9e:	2800      	cmp	r0, #0
 8015aa0:	d0bf      	beq.n	8015a22 <ceil+0x42>
 8015aa2:	2c00      	cmp	r4, #0
 8015aa4:	dd02      	ble.n	8015aac <ceil+0xcc>
 8015aa6:	2e14      	cmp	r6, #20
 8015aa8:	d103      	bne.n	8015ab2 <ceil+0xd2>
 8015aaa:	3401      	adds	r4, #1
 8015aac:	ea25 0507 	bic.w	r5, r5, r7
 8015ab0:	e7b7      	b.n	8015a22 <ceil+0x42>
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015ab8:	fa03 f606 	lsl.w	r6, r3, r6
 8015abc:	4435      	add	r5, r6
 8015abe:	4545      	cmp	r5, r8
 8015ac0:	bf38      	it	cc
 8015ac2:	18e4      	addcc	r4, r4, r3
 8015ac4:	e7f2      	b.n	8015aac <ceil+0xcc>
 8015ac6:	2500      	movs	r5, #0
 8015ac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015acc:	e7a9      	b.n	8015a22 <ceil+0x42>
 8015ace:	4625      	mov	r5, r4
 8015ad0:	e7a7      	b.n	8015a22 <ceil+0x42>
 8015ad2:	bf00      	nop
 8015ad4:	f3af 8000 	nop.w
 8015ad8:	8800759c 	.word	0x8800759c
 8015adc:	7e37e43c 	.word	0x7e37e43c
 8015ae0:	3ff00000 	.word	0x3ff00000
 8015ae4:	000fffff 	.word	0x000fffff

08015ae8 <floor>:
 8015ae8:	ec51 0b10 	vmov	r0, r1, d0
 8015aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015af4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015af8:	2e13      	cmp	r6, #19
 8015afa:	ee10 5a10 	vmov	r5, s0
 8015afe:	ee10 8a10 	vmov	r8, s0
 8015b02:	460c      	mov	r4, r1
 8015b04:	dc32      	bgt.n	8015b6c <floor+0x84>
 8015b06:	2e00      	cmp	r6, #0
 8015b08:	da14      	bge.n	8015b34 <floor+0x4c>
 8015b0a:	a333      	add	r3, pc, #204	; (adr r3, 8015bd8 <floor+0xf0>)
 8015b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b10:	f7ea fbbc 	bl	800028c <__adddf3>
 8015b14:	2200      	movs	r2, #0
 8015b16:	2300      	movs	r3, #0
 8015b18:	f7ea fffe 	bl	8000b18 <__aeabi_dcmpgt>
 8015b1c:	b138      	cbz	r0, 8015b2e <floor+0x46>
 8015b1e:	2c00      	cmp	r4, #0
 8015b20:	da57      	bge.n	8015bd2 <floor+0xea>
 8015b22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015b26:	431d      	orrs	r5, r3
 8015b28:	d001      	beq.n	8015b2e <floor+0x46>
 8015b2a:	4c2d      	ldr	r4, [pc, #180]	; (8015be0 <floor+0xf8>)
 8015b2c:	2500      	movs	r5, #0
 8015b2e:	4621      	mov	r1, r4
 8015b30:	4628      	mov	r0, r5
 8015b32:	e025      	b.n	8015b80 <floor+0x98>
 8015b34:	4f2b      	ldr	r7, [pc, #172]	; (8015be4 <floor+0xfc>)
 8015b36:	4137      	asrs	r7, r6
 8015b38:	ea01 0307 	and.w	r3, r1, r7
 8015b3c:	4303      	orrs	r3, r0
 8015b3e:	d01f      	beq.n	8015b80 <floor+0x98>
 8015b40:	a325      	add	r3, pc, #148	; (adr r3, 8015bd8 <floor+0xf0>)
 8015b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b46:	f7ea fba1 	bl	800028c <__adddf3>
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	f7ea ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8015b52:	2800      	cmp	r0, #0
 8015b54:	d0eb      	beq.n	8015b2e <floor+0x46>
 8015b56:	2c00      	cmp	r4, #0
 8015b58:	bfbe      	ittt	lt
 8015b5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015b5e:	fa43 f606 	asrlt.w	r6, r3, r6
 8015b62:	19a4      	addlt	r4, r4, r6
 8015b64:	ea24 0407 	bic.w	r4, r4, r7
 8015b68:	2500      	movs	r5, #0
 8015b6a:	e7e0      	b.n	8015b2e <floor+0x46>
 8015b6c:	2e33      	cmp	r6, #51	; 0x33
 8015b6e:	dd0b      	ble.n	8015b88 <floor+0xa0>
 8015b70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015b74:	d104      	bne.n	8015b80 <floor+0x98>
 8015b76:	ee10 2a10 	vmov	r2, s0
 8015b7a:	460b      	mov	r3, r1
 8015b7c:	f7ea fb86 	bl	800028c <__adddf3>
 8015b80:	ec41 0b10 	vmov	d0, r0, r1
 8015b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b90:	fa23 f707 	lsr.w	r7, r3, r7
 8015b94:	4207      	tst	r7, r0
 8015b96:	d0f3      	beq.n	8015b80 <floor+0x98>
 8015b98:	a30f      	add	r3, pc, #60	; (adr r3, 8015bd8 <floor+0xf0>)
 8015b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9e:	f7ea fb75 	bl	800028c <__adddf3>
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f7ea ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 8015baa:	2800      	cmp	r0, #0
 8015bac:	d0bf      	beq.n	8015b2e <floor+0x46>
 8015bae:	2c00      	cmp	r4, #0
 8015bb0:	da02      	bge.n	8015bb8 <floor+0xd0>
 8015bb2:	2e14      	cmp	r6, #20
 8015bb4:	d103      	bne.n	8015bbe <floor+0xd6>
 8015bb6:	3401      	adds	r4, #1
 8015bb8:	ea25 0507 	bic.w	r5, r5, r7
 8015bbc:	e7b7      	b.n	8015b2e <floor+0x46>
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015bc4:	fa03 f606 	lsl.w	r6, r3, r6
 8015bc8:	4435      	add	r5, r6
 8015bca:	4545      	cmp	r5, r8
 8015bcc:	bf38      	it	cc
 8015bce:	18e4      	addcc	r4, r4, r3
 8015bd0:	e7f2      	b.n	8015bb8 <floor+0xd0>
 8015bd2:	2500      	movs	r5, #0
 8015bd4:	462c      	mov	r4, r5
 8015bd6:	e7aa      	b.n	8015b2e <floor+0x46>
 8015bd8:	8800759c 	.word	0x8800759c
 8015bdc:	7e37e43c 	.word	0x7e37e43c
 8015be0:	bff00000 	.word	0xbff00000
 8015be4:	000fffff 	.word	0x000fffff

08015be8 <cosf>:
 8015be8:	ee10 3a10 	vmov	r3, s0
 8015bec:	b507      	push	{r0, r1, r2, lr}
 8015bee:	4a1c      	ldr	r2, [pc, #112]	; (8015c60 <cosf+0x78>)
 8015bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015bf4:	4293      	cmp	r3, r2
 8015bf6:	dc04      	bgt.n	8015c02 <cosf+0x1a>
 8015bf8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015c64 <cosf+0x7c>
 8015bfc:	f000 fe9e 	bl	801693c <__kernel_cosf>
 8015c00:	e004      	b.n	8015c0c <cosf+0x24>
 8015c02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015c06:	db04      	blt.n	8015c12 <cosf+0x2a>
 8015c08:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015c0c:	b003      	add	sp, #12
 8015c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c12:	4668      	mov	r0, sp
 8015c14:	f000 fd52 	bl	80166bc <__ieee754_rem_pio2f>
 8015c18:	f000 0003 	and.w	r0, r0, #3
 8015c1c:	2801      	cmp	r0, #1
 8015c1e:	d007      	beq.n	8015c30 <cosf+0x48>
 8015c20:	2802      	cmp	r0, #2
 8015c22:	d00e      	beq.n	8015c42 <cosf+0x5a>
 8015c24:	b9a0      	cbnz	r0, 8015c50 <cosf+0x68>
 8015c26:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c2a:	ed9d 0a00 	vldr	s0, [sp]
 8015c2e:	e7e5      	b.n	8015bfc <cosf+0x14>
 8015c30:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c34:	ed9d 0a00 	vldr	s0, [sp]
 8015c38:	f001 f96a 	bl	8016f10 <__kernel_sinf>
 8015c3c:	eeb1 0a40 	vneg.f32	s0, s0
 8015c40:	e7e4      	b.n	8015c0c <cosf+0x24>
 8015c42:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c46:	ed9d 0a00 	vldr	s0, [sp]
 8015c4a:	f000 fe77 	bl	801693c <__kernel_cosf>
 8015c4e:	e7f5      	b.n	8015c3c <cosf+0x54>
 8015c50:	eddd 0a01 	vldr	s1, [sp, #4]
 8015c54:	ed9d 0a00 	vldr	s0, [sp]
 8015c58:	2001      	movs	r0, #1
 8015c5a:	f001 f959 	bl	8016f10 <__kernel_sinf>
 8015c5e:	e7d5      	b.n	8015c0c <cosf+0x24>
 8015c60:	3f490fd8 	.word	0x3f490fd8
 8015c64:	00000000 	.word	0x00000000

08015c68 <roundf>:
 8015c68:	ee10 0a10 	vmov	r0, s0
 8015c6c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015c70:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015c74:	2a16      	cmp	r2, #22
 8015c76:	dc15      	bgt.n	8015ca4 <roundf+0x3c>
 8015c78:	2a00      	cmp	r2, #0
 8015c7a:	da08      	bge.n	8015c8e <roundf+0x26>
 8015c7c:	3201      	adds	r2, #1
 8015c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015c82:	d101      	bne.n	8015c88 <roundf+0x20>
 8015c84:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015c88:	ee00 3a10 	vmov	s0, r3
 8015c8c:	4770      	bx	lr
 8015c8e:	4908      	ldr	r1, [pc, #32]	; (8015cb0 <roundf+0x48>)
 8015c90:	4111      	asrs	r1, r2
 8015c92:	4208      	tst	r0, r1
 8015c94:	d0fa      	beq.n	8015c8c <roundf+0x24>
 8015c96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015c9a:	4113      	asrs	r3, r2
 8015c9c:	4403      	add	r3, r0
 8015c9e:	ea23 0301 	bic.w	r3, r3, r1
 8015ca2:	e7f1      	b.n	8015c88 <roundf+0x20>
 8015ca4:	2a80      	cmp	r2, #128	; 0x80
 8015ca6:	d1f1      	bne.n	8015c8c <roundf+0x24>
 8015ca8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015cac:	4770      	bx	lr
 8015cae:	bf00      	nop
 8015cb0:	007fffff 	.word	0x007fffff

08015cb4 <sinf>:
 8015cb4:	ee10 3a10 	vmov	r3, s0
 8015cb8:	b507      	push	{r0, r1, r2, lr}
 8015cba:	4a1d      	ldr	r2, [pc, #116]	; (8015d30 <sinf+0x7c>)
 8015cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	dc05      	bgt.n	8015cd0 <sinf+0x1c>
 8015cc4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8015d34 <sinf+0x80>
 8015cc8:	2000      	movs	r0, #0
 8015cca:	f001 f921 	bl	8016f10 <__kernel_sinf>
 8015cce:	e004      	b.n	8015cda <sinf+0x26>
 8015cd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015cd4:	db04      	blt.n	8015ce0 <sinf+0x2c>
 8015cd6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015cda:	b003      	add	sp, #12
 8015cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ce0:	4668      	mov	r0, sp
 8015ce2:	f000 fceb 	bl	80166bc <__ieee754_rem_pio2f>
 8015ce6:	f000 0003 	and.w	r0, r0, #3
 8015cea:	2801      	cmp	r0, #1
 8015cec:	d008      	beq.n	8015d00 <sinf+0x4c>
 8015cee:	2802      	cmp	r0, #2
 8015cf0:	d00d      	beq.n	8015d0e <sinf+0x5a>
 8015cf2:	b9b0      	cbnz	r0, 8015d22 <sinf+0x6e>
 8015cf4:	eddd 0a01 	vldr	s1, [sp, #4]
 8015cf8:	ed9d 0a00 	vldr	s0, [sp]
 8015cfc:	2001      	movs	r0, #1
 8015cfe:	e7e4      	b.n	8015cca <sinf+0x16>
 8015d00:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d04:	ed9d 0a00 	vldr	s0, [sp]
 8015d08:	f000 fe18 	bl	801693c <__kernel_cosf>
 8015d0c:	e7e5      	b.n	8015cda <sinf+0x26>
 8015d0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d12:	ed9d 0a00 	vldr	s0, [sp]
 8015d16:	2001      	movs	r0, #1
 8015d18:	f001 f8fa 	bl	8016f10 <__kernel_sinf>
 8015d1c:	eeb1 0a40 	vneg.f32	s0, s0
 8015d20:	e7db      	b.n	8015cda <sinf+0x26>
 8015d22:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d26:	ed9d 0a00 	vldr	s0, [sp]
 8015d2a:	f000 fe07 	bl	801693c <__kernel_cosf>
 8015d2e:	e7f5      	b.n	8015d1c <sinf+0x68>
 8015d30:	3f490fd8 	.word	0x3f490fd8
 8015d34:	00000000 	.word	0x00000000

08015d38 <tanf>:
 8015d38:	ee10 3a10 	vmov	r3, s0
 8015d3c:	b507      	push	{r0, r1, r2, lr}
 8015d3e:	4a10      	ldr	r2, [pc, #64]	; (8015d80 <tanf+0x48>)
 8015d40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d44:	4293      	cmp	r3, r2
 8015d46:	dc05      	bgt.n	8015d54 <tanf+0x1c>
 8015d48:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015d84 <tanf+0x4c>
 8015d4c:	2001      	movs	r0, #1
 8015d4e:	f001 f927 	bl	8016fa0 <__kernel_tanf>
 8015d52:	e004      	b.n	8015d5e <tanf+0x26>
 8015d54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d58:	db04      	blt.n	8015d64 <tanf+0x2c>
 8015d5a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015d5e:	b003      	add	sp, #12
 8015d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d64:	4668      	mov	r0, sp
 8015d66:	f000 fca9 	bl	80166bc <__ieee754_rem_pio2f>
 8015d6a:	0040      	lsls	r0, r0, #1
 8015d6c:	f000 0002 	and.w	r0, r0, #2
 8015d70:	eddd 0a01 	vldr	s1, [sp, #4]
 8015d74:	ed9d 0a00 	vldr	s0, [sp]
 8015d78:	f1c0 0001 	rsb	r0, r0, #1
 8015d7c:	e7e7      	b.n	8015d4e <tanf+0x16>
 8015d7e:	bf00      	nop
 8015d80:	3f490fda 	.word	0x3f490fda
 8015d84:	00000000 	.word	0x00000000

08015d88 <atan2>:
 8015d88:	f000 b89a 	b.w	8015ec0 <__ieee754_atan2>

08015d8c <sqrt>:
 8015d8c:	b538      	push	{r3, r4, r5, lr}
 8015d8e:	ed2d 8b02 	vpush	{d8}
 8015d92:	ec55 4b10 	vmov	r4, r5, d0
 8015d96:	f000 f95d 	bl	8016054 <__ieee754_sqrt>
 8015d9a:	4b15      	ldr	r3, [pc, #84]	; (8015df0 <sqrt+0x64>)
 8015d9c:	eeb0 8a40 	vmov.f32	s16, s0
 8015da0:	eef0 8a60 	vmov.f32	s17, s1
 8015da4:	f993 3000 	ldrsb.w	r3, [r3]
 8015da8:	3301      	adds	r3, #1
 8015daa:	d019      	beq.n	8015de0 <sqrt+0x54>
 8015dac:	4622      	mov	r2, r4
 8015dae:	462b      	mov	r3, r5
 8015db0:	4620      	mov	r0, r4
 8015db2:	4629      	mov	r1, r5
 8015db4:	f7ea feba 	bl	8000b2c <__aeabi_dcmpun>
 8015db8:	b990      	cbnz	r0, 8015de0 <sqrt+0x54>
 8015dba:	2200      	movs	r2, #0
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	4620      	mov	r0, r4
 8015dc0:	4629      	mov	r1, r5
 8015dc2:	f7ea fe8b 	bl	8000adc <__aeabi_dcmplt>
 8015dc6:	b158      	cbz	r0, 8015de0 <sqrt+0x54>
 8015dc8:	f001 fd16 	bl	80177f8 <__errno>
 8015dcc:	2321      	movs	r3, #33	; 0x21
 8015dce:	6003      	str	r3, [r0, #0]
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	4610      	mov	r0, r2
 8015dd6:	4619      	mov	r1, r3
 8015dd8:	f7ea fd38 	bl	800084c <__aeabi_ddiv>
 8015ddc:	ec41 0b18 	vmov	d8, r0, r1
 8015de0:	eeb0 0a48 	vmov.f32	s0, s16
 8015de4:	eef0 0a68 	vmov.f32	s1, s17
 8015de8:	ecbd 8b02 	vpop	{d8}
 8015dec:	bd38      	pop	{r3, r4, r5, pc}
 8015dee:	bf00      	nop
 8015df0:	200000ed 	.word	0x200000ed

08015df4 <acosf>:
 8015df4:	b508      	push	{r3, lr}
 8015df6:	ed2d 8b02 	vpush	{d8}
 8015dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8015dfe:	f000 f9dd 	bl	80161bc <__ieee754_acosf>
 8015e02:	4b13      	ldr	r3, [pc, #76]	; (8015e50 <acosf+0x5c>)
 8015e04:	f993 3000 	ldrsb.w	r3, [r3]
 8015e08:	3301      	adds	r3, #1
 8015e0a:	eef0 8a40 	vmov.f32	s17, s0
 8015e0e:	d01a      	beq.n	8015e46 <acosf+0x52>
 8015e10:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e18:	d615      	bvs.n	8015e46 <acosf+0x52>
 8015e1a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e1e:	f001 fc21 	bl	8017664 <fabsf>
 8015e22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2e:	dd0a      	ble.n	8015e46 <acosf+0x52>
 8015e30:	f001 fce2 	bl	80177f8 <__errno>
 8015e34:	ecbd 8b02 	vpop	{d8}
 8015e38:	2321      	movs	r3, #33	; 0x21
 8015e3a:	6003      	str	r3, [r0, #0]
 8015e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015e40:	4804      	ldr	r0, [pc, #16]	; (8015e54 <acosf+0x60>)
 8015e42:	f001 bc59 	b.w	80176f8 <nanf>
 8015e46:	eeb0 0a68 	vmov.f32	s0, s17
 8015e4a:	ecbd 8b02 	vpop	{d8}
 8015e4e:	bd08      	pop	{r3, pc}
 8015e50:	200000ed 	.word	0x200000ed
 8015e54:	0801b050 	.word	0x0801b050

08015e58 <asinf>:
 8015e58:	b508      	push	{r3, lr}
 8015e5a:	ed2d 8b02 	vpush	{d8}
 8015e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8015e62:	f000 faa5 	bl	80163b0 <__ieee754_asinf>
 8015e66:	4b13      	ldr	r3, [pc, #76]	; (8015eb4 <asinf+0x5c>)
 8015e68:	f993 3000 	ldrsb.w	r3, [r3]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	eef0 8a40 	vmov.f32	s17, s0
 8015e72:	d01a      	beq.n	8015eaa <asinf+0x52>
 8015e74:	eeb4 8a48 	vcmp.f32	s16, s16
 8015e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7c:	d615      	bvs.n	8015eaa <asinf+0x52>
 8015e7e:	eeb0 0a48 	vmov.f32	s0, s16
 8015e82:	f001 fbef 	bl	8017664 <fabsf>
 8015e86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015e8a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e92:	dd0a      	ble.n	8015eaa <asinf+0x52>
 8015e94:	f001 fcb0 	bl	80177f8 <__errno>
 8015e98:	ecbd 8b02 	vpop	{d8}
 8015e9c:	2321      	movs	r3, #33	; 0x21
 8015e9e:	6003      	str	r3, [r0, #0]
 8015ea0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015ea4:	4804      	ldr	r0, [pc, #16]	; (8015eb8 <asinf+0x60>)
 8015ea6:	f001 bc27 	b.w	80176f8 <nanf>
 8015eaa:	eeb0 0a68 	vmov.f32	s0, s17
 8015eae:	ecbd 8b02 	vpop	{d8}
 8015eb2:	bd08      	pop	{r3, pc}
 8015eb4:	200000ed 	.word	0x200000ed
 8015eb8:	0801b050 	.word	0x0801b050

08015ebc <atan2f>:
 8015ebc:	f000 bb5e 	b.w	801657c <__ieee754_atan2f>

08015ec0 <__ieee754_atan2>:
 8015ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ec4:	ec57 6b11 	vmov	r6, r7, d1
 8015ec8:	4273      	negs	r3, r6
 8015eca:	f8df e184 	ldr.w	lr, [pc, #388]	; 8016050 <__ieee754_atan2+0x190>
 8015ece:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015ed2:	4333      	orrs	r3, r6
 8015ed4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015ed8:	4573      	cmp	r3, lr
 8015eda:	ec51 0b10 	vmov	r0, r1, d0
 8015ede:	ee11 8a10 	vmov	r8, s2
 8015ee2:	d80a      	bhi.n	8015efa <__ieee754_atan2+0x3a>
 8015ee4:	4244      	negs	r4, r0
 8015ee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015eea:	4304      	orrs	r4, r0
 8015eec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015ef0:	4574      	cmp	r4, lr
 8015ef2:	ee10 9a10 	vmov	r9, s0
 8015ef6:	468c      	mov	ip, r1
 8015ef8:	d907      	bls.n	8015f0a <__ieee754_atan2+0x4a>
 8015efa:	4632      	mov	r2, r6
 8015efc:	463b      	mov	r3, r7
 8015efe:	f7ea f9c5 	bl	800028c <__adddf3>
 8015f02:	ec41 0b10 	vmov	d0, r0, r1
 8015f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f0a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015f0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015f12:	4334      	orrs	r4, r6
 8015f14:	d103      	bne.n	8015f1e <__ieee754_atan2+0x5e>
 8015f16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f1a:	f001 b925 	b.w	8017168 <atan>
 8015f1e:	17bc      	asrs	r4, r7, #30
 8015f20:	f004 0402 	and.w	r4, r4, #2
 8015f24:	ea53 0909 	orrs.w	r9, r3, r9
 8015f28:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015f2c:	d107      	bne.n	8015f3e <__ieee754_atan2+0x7e>
 8015f2e:	2c02      	cmp	r4, #2
 8015f30:	d060      	beq.n	8015ff4 <__ieee754_atan2+0x134>
 8015f32:	2c03      	cmp	r4, #3
 8015f34:	d1e5      	bne.n	8015f02 <__ieee754_atan2+0x42>
 8015f36:	a142      	add	r1, pc, #264	; (adr r1, 8016040 <__ieee754_atan2+0x180>)
 8015f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f3c:	e7e1      	b.n	8015f02 <__ieee754_atan2+0x42>
 8015f3e:	ea52 0808 	orrs.w	r8, r2, r8
 8015f42:	d106      	bne.n	8015f52 <__ieee754_atan2+0x92>
 8015f44:	f1bc 0f00 	cmp.w	ip, #0
 8015f48:	da5f      	bge.n	801600a <__ieee754_atan2+0x14a>
 8015f4a:	a13f      	add	r1, pc, #252	; (adr r1, 8016048 <__ieee754_atan2+0x188>)
 8015f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015f50:	e7d7      	b.n	8015f02 <__ieee754_atan2+0x42>
 8015f52:	4572      	cmp	r2, lr
 8015f54:	d10f      	bne.n	8015f76 <__ieee754_atan2+0xb6>
 8015f56:	4293      	cmp	r3, r2
 8015f58:	f104 34ff 	add.w	r4, r4, #4294967295
 8015f5c:	d107      	bne.n	8015f6e <__ieee754_atan2+0xae>
 8015f5e:	2c02      	cmp	r4, #2
 8015f60:	d84c      	bhi.n	8015ffc <__ieee754_atan2+0x13c>
 8015f62:	4b35      	ldr	r3, [pc, #212]	; (8016038 <__ieee754_atan2+0x178>)
 8015f64:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015f68:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015f6c:	e7c9      	b.n	8015f02 <__ieee754_atan2+0x42>
 8015f6e:	2c02      	cmp	r4, #2
 8015f70:	d848      	bhi.n	8016004 <__ieee754_atan2+0x144>
 8015f72:	4b32      	ldr	r3, [pc, #200]	; (801603c <__ieee754_atan2+0x17c>)
 8015f74:	e7f6      	b.n	8015f64 <__ieee754_atan2+0xa4>
 8015f76:	4573      	cmp	r3, lr
 8015f78:	d0e4      	beq.n	8015f44 <__ieee754_atan2+0x84>
 8015f7a:	1a9b      	subs	r3, r3, r2
 8015f7c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015f80:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015f84:	da1e      	bge.n	8015fc4 <__ieee754_atan2+0x104>
 8015f86:	2f00      	cmp	r7, #0
 8015f88:	da01      	bge.n	8015f8e <__ieee754_atan2+0xce>
 8015f8a:	323c      	adds	r2, #60	; 0x3c
 8015f8c:	db1e      	blt.n	8015fcc <__ieee754_atan2+0x10c>
 8015f8e:	4632      	mov	r2, r6
 8015f90:	463b      	mov	r3, r7
 8015f92:	f7ea fc5b 	bl	800084c <__aeabi_ddiv>
 8015f96:	ec41 0b10 	vmov	d0, r0, r1
 8015f9a:	f001 fa85 	bl	80174a8 <fabs>
 8015f9e:	f001 f8e3 	bl	8017168 <atan>
 8015fa2:	ec51 0b10 	vmov	r0, r1, d0
 8015fa6:	2c01      	cmp	r4, #1
 8015fa8:	d013      	beq.n	8015fd2 <__ieee754_atan2+0x112>
 8015faa:	2c02      	cmp	r4, #2
 8015fac:	d015      	beq.n	8015fda <__ieee754_atan2+0x11a>
 8015fae:	2c00      	cmp	r4, #0
 8015fb0:	d0a7      	beq.n	8015f02 <__ieee754_atan2+0x42>
 8015fb2:	a319      	add	r3, pc, #100	; (adr r3, 8016018 <__ieee754_atan2+0x158>)
 8015fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb8:	f7ea f966 	bl	8000288 <__aeabi_dsub>
 8015fbc:	a318      	add	r3, pc, #96	; (adr r3, 8016020 <__ieee754_atan2+0x160>)
 8015fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc2:	e014      	b.n	8015fee <__ieee754_atan2+0x12e>
 8015fc4:	a118      	add	r1, pc, #96	; (adr r1, 8016028 <__ieee754_atan2+0x168>)
 8015fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fca:	e7ec      	b.n	8015fa6 <__ieee754_atan2+0xe6>
 8015fcc:	2000      	movs	r0, #0
 8015fce:	2100      	movs	r1, #0
 8015fd0:	e7e9      	b.n	8015fa6 <__ieee754_atan2+0xe6>
 8015fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	e793      	b.n	8015f02 <__ieee754_atan2+0x42>
 8015fda:	a30f      	add	r3, pc, #60	; (adr r3, 8016018 <__ieee754_atan2+0x158>)
 8015fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fe0:	f7ea f952 	bl	8000288 <__aeabi_dsub>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	a10d      	add	r1, pc, #52	; (adr r1, 8016020 <__ieee754_atan2+0x160>)
 8015fea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015fee:	f7ea f94b 	bl	8000288 <__aeabi_dsub>
 8015ff2:	e786      	b.n	8015f02 <__ieee754_atan2+0x42>
 8015ff4:	a10a      	add	r1, pc, #40	; (adr r1, 8016020 <__ieee754_atan2+0x160>)
 8015ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ffa:	e782      	b.n	8015f02 <__ieee754_atan2+0x42>
 8015ffc:	a10c      	add	r1, pc, #48	; (adr r1, 8016030 <__ieee754_atan2+0x170>)
 8015ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016002:	e77e      	b.n	8015f02 <__ieee754_atan2+0x42>
 8016004:	2000      	movs	r0, #0
 8016006:	2100      	movs	r1, #0
 8016008:	e77b      	b.n	8015f02 <__ieee754_atan2+0x42>
 801600a:	a107      	add	r1, pc, #28	; (adr r1, 8016028 <__ieee754_atan2+0x168>)
 801600c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016010:	e777      	b.n	8015f02 <__ieee754_atan2+0x42>
 8016012:	bf00      	nop
 8016014:	f3af 8000 	nop.w
 8016018:	33145c07 	.word	0x33145c07
 801601c:	3ca1a626 	.word	0x3ca1a626
 8016020:	54442d18 	.word	0x54442d18
 8016024:	400921fb 	.word	0x400921fb
 8016028:	54442d18 	.word	0x54442d18
 801602c:	3ff921fb 	.word	0x3ff921fb
 8016030:	54442d18 	.word	0x54442d18
 8016034:	3fe921fb 	.word	0x3fe921fb
 8016038:	0801a900 	.word	0x0801a900
 801603c:	0801a918 	.word	0x0801a918
 8016040:	54442d18 	.word	0x54442d18
 8016044:	c00921fb 	.word	0xc00921fb
 8016048:	54442d18 	.word	0x54442d18
 801604c:	bff921fb 	.word	0xbff921fb
 8016050:	7ff00000 	.word	0x7ff00000

08016054 <__ieee754_sqrt>:
 8016054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016058:	ec55 4b10 	vmov	r4, r5, d0
 801605c:	4e56      	ldr	r6, [pc, #344]	; (80161b8 <__ieee754_sqrt+0x164>)
 801605e:	43ae      	bics	r6, r5
 8016060:	ee10 0a10 	vmov	r0, s0
 8016064:	ee10 3a10 	vmov	r3, s0
 8016068:	4629      	mov	r1, r5
 801606a:	462a      	mov	r2, r5
 801606c:	d110      	bne.n	8016090 <__ieee754_sqrt+0x3c>
 801606e:	ee10 2a10 	vmov	r2, s0
 8016072:	462b      	mov	r3, r5
 8016074:	f7ea fac0 	bl	80005f8 <__aeabi_dmul>
 8016078:	4602      	mov	r2, r0
 801607a:	460b      	mov	r3, r1
 801607c:	4620      	mov	r0, r4
 801607e:	4629      	mov	r1, r5
 8016080:	f7ea f904 	bl	800028c <__adddf3>
 8016084:	4604      	mov	r4, r0
 8016086:	460d      	mov	r5, r1
 8016088:	ec45 4b10 	vmov	d0, r4, r5
 801608c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016090:	2d00      	cmp	r5, #0
 8016092:	dc10      	bgt.n	80160b6 <__ieee754_sqrt+0x62>
 8016094:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016098:	4330      	orrs	r0, r6
 801609a:	d0f5      	beq.n	8016088 <__ieee754_sqrt+0x34>
 801609c:	b15d      	cbz	r5, 80160b6 <__ieee754_sqrt+0x62>
 801609e:	ee10 2a10 	vmov	r2, s0
 80160a2:	462b      	mov	r3, r5
 80160a4:	ee10 0a10 	vmov	r0, s0
 80160a8:	f7ea f8ee 	bl	8000288 <__aeabi_dsub>
 80160ac:	4602      	mov	r2, r0
 80160ae:	460b      	mov	r3, r1
 80160b0:	f7ea fbcc 	bl	800084c <__aeabi_ddiv>
 80160b4:	e7e6      	b.n	8016084 <__ieee754_sqrt+0x30>
 80160b6:	1509      	asrs	r1, r1, #20
 80160b8:	d076      	beq.n	80161a8 <__ieee754_sqrt+0x154>
 80160ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80160be:	07ce      	lsls	r6, r1, #31
 80160c0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80160c4:	bf5e      	ittt	pl
 80160c6:	0fda      	lsrpl	r2, r3, #31
 80160c8:	005b      	lslpl	r3, r3, #1
 80160ca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80160ce:	0fda      	lsrs	r2, r3, #31
 80160d0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80160d4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80160d8:	2000      	movs	r0, #0
 80160da:	106d      	asrs	r5, r5, #1
 80160dc:	005b      	lsls	r3, r3, #1
 80160de:	f04f 0e16 	mov.w	lr, #22
 80160e2:	4684      	mov	ip, r0
 80160e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80160e8:	eb0c 0401 	add.w	r4, ip, r1
 80160ec:	4294      	cmp	r4, r2
 80160ee:	bfde      	ittt	le
 80160f0:	1b12      	suble	r2, r2, r4
 80160f2:	eb04 0c01 	addle.w	ip, r4, r1
 80160f6:	1840      	addle	r0, r0, r1
 80160f8:	0052      	lsls	r2, r2, #1
 80160fa:	f1be 0e01 	subs.w	lr, lr, #1
 80160fe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016102:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016106:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801610a:	d1ed      	bne.n	80160e8 <__ieee754_sqrt+0x94>
 801610c:	4671      	mov	r1, lr
 801610e:	2720      	movs	r7, #32
 8016110:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8016114:	4562      	cmp	r2, ip
 8016116:	eb04 060e 	add.w	r6, r4, lr
 801611a:	dc02      	bgt.n	8016122 <__ieee754_sqrt+0xce>
 801611c:	d113      	bne.n	8016146 <__ieee754_sqrt+0xf2>
 801611e:	429e      	cmp	r6, r3
 8016120:	d811      	bhi.n	8016146 <__ieee754_sqrt+0xf2>
 8016122:	2e00      	cmp	r6, #0
 8016124:	eb06 0e04 	add.w	lr, r6, r4
 8016128:	da43      	bge.n	80161b2 <__ieee754_sqrt+0x15e>
 801612a:	f1be 0f00 	cmp.w	lr, #0
 801612e:	db40      	blt.n	80161b2 <__ieee754_sqrt+0x15e>
 8016130:	f10c 0801 	add.w	r8, ip, #1
 8016134:	eba2 020c 	sub.w	r2, r2, ip
 8016138:	429e      	cmp	r6, r3
 801613a:	bf88      	it	hi
 801613c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016140:	1b9b      	subs	r3, r3, r6
 8016142:	4421      	add	r1, r4
 8016144:	46c4      	mov	ip, r8
 8016146:	0052      	lsls	r2, r2, #1
 8016148:	3f01      	subs	r7, #1
 801614a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801614e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016152:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016156:	d1dd      	bne.n	8016114 <__ieee754_sqrt+0xc0>
 8016158:	4313      	orrs	r3, r2
 801615a:	d006      	beq.n	801616a <__ieee754_sqrt+0x116>
 801615c:	1c4c      	adds	r4, r1, #1
 801615e:	bf13      	iteet	ne
 8016160:	3101      	addne	r1, #1
 8016162:	3001      	addeq	r0, #1
 8016164:	4639      	moveq	r1, r7
 8016166:	f021 0101 	bicne.w	r1, r1, #1
 801616a:	1043      	asrs	r3, r0, #1
 801616c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8016170:	0849      	lsrs	r1, r1, #1
 8016172:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016176:	07c2      	lsls	r2, r0, #31
 8016178:	bf48      	it	mi
 801617a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801617e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8016182:	460c      	mov	r4, r1
 8016184:	463d      	mov	r5, r7
 8016186:	e77f      	b.n	8016088 <__ieee754_sqrt+0x34>
 8016188:	0ada      	lsrs	r2, r3, #11
 801618a:	3815      	subs	r0, #21
 801618c:	055b      	lsls	r3, r3, #21
 801618e:	2a00      	cmp	r2, #0
 8016190:	d0fa      	beq.n	8016188 <__ieee754_sqrt+0x134>
 8016192:	02d7      	lsls	r7, r2, #11
 8016194:	d50a      	bpl.n	80161ac <__ieee754_sqrt+0x158>
 8016196:	f1c1 0420 	rsb	r4, r1, #32
 801619a:	fa23 f404 	lsr.w	r4, r3, r4
 801619e:	1e4d      	subs	r5, r1, #1
 80161a0:	408b      	lsls	r3, r1
 80161a2:	4322      	orrs	r2, r4
 80161a4:	1b41      	subs	r1, r0, r5
 80161a6:	e788      	b.n	80160ba <__ieee754_sqrt+0x66>
 80161a8:	4608      	mov	r0, r1
 80161aa:	e7f0      	b.n	801618e <__ieee754_sqrt+0x13a>
 80161ac:	0052      	lsls	r2, r2, #1
 80161ae:	3101      	adds	r1, #1
 80161b0:	e7ef      	b.n	8016192 <__ieee754_sqrt+0x13e>
 80161b2:	46e0      	mov	r8, ip
 80161b4:	e7be      	b.n	8016134 <__ieee754_sqrt+0xe0>
 80161b6:	bf00      	nop
 80161b8:	7ff00000 	.word	0x7ff00000

080161bc <__ieee754_acosf>:
 80161bc:	b508      	push	{r3, lr}
 80161be:	ee10 3a10 	vmov	r3, s0
 80161c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80161c6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80161ca:	ed2d 8b0c 	vpush	{d8-d13}
 80161ce:	d10a      	bne.n	80161e6 <__ieee754_acosf+0x2a>
 80161d0:	ed9f 0a66 	vldr	s0, [pc, #408]	; 801636c <__ieee754_acosf+0x1b0>
 80161d4:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8016370 <__ieee754_acosf+0x1b4>
 80161d8:	2b00      	cmp	r3, #0
 80161da:	bfd8      	it	le
 80161dc:	eeb0 0a48 	vmovle.f32	s0, s16
 80161e0:	ecbd 8b0c 	vpop	{d8-d13}
 80161e4:	bd08      	pop	{r3, pc}
 80161e6:	dd04      	ble.n	80161f2 <__ieee754_acosf+0x36>
 80161e8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80161ec:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80161f0:	e7f6      	b.n	80161e0 <__ieee754_acosf+0x24>
 80161f2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80161f6:	da3e      	bge.n	8016276 <__ieee754_acosf+0xba>
 80161f8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80161fc:	f340 80b3 	ble.w	8016366 <__ieee754_acosf+0x1aa>
 8016200:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016204:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8016374 <__ieee754_acosf+0x1b8>
 8016208:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8016378 <__ieee754_acosf+0x1bc>
 801620c:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 801637c <__ieee754_acosf+0x1c0>
 8016210:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8016380 <__ieee754_acosf+0x1c4>
 8016214:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016218:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8016384 <__ieee754_acosf+0x1c8>
 801621c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016220:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8016388 <__ieee754_acosf+0x1cc>
 8016224:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016228:	eddf 6a58 	vldr	s13, [pc, #352]	; 801638c <__ieee754_acosf+0x1d0>
 801622c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016230:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8016390 <__ieee754_acosf+0x1d4>
 8016234:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016238:	eddf 6a56 	vldr	s13, [pc, #344]	; 8016394 <__ieee754_acosf+0x1d8>
 801623c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016240:	eddf 6a55 	vldr	s13, [pc, #340]	; 8016398 <__ieee754_acosf+0x1dc>
 8016244:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016248:	ed9f 6a54 	vldr	s12, [pc, #336]	; 801639c <__ieee754_acosf+0x1e0>
 801624c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016254:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016258:	ee27 7a27 	vmul.f32	s14, s14, s15
 801625c:	eef0 7a66 	vmov.f32	s15, s13
 8016260:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016264:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80163a0 <__ieee754_acosf+0x1e4>
 8016268:	eea0 8a66 	vfms.f32	s16, s0, s13
 801626c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8016270:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016274:	e7b4      	b.n	80161e0 <__ieee754_acosf+0x24>
 8016276:	2b00      	cmp	r3, #0
 8016278:	eddf da3e 	vldr	s27, [pc, #248]	; 8016374 <__ieee754_acosf+0x1b8>
 801627c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8016378 <__ieee754_acosf+0x1bc>
 8016280:	ed9f ca40 	vldr	s24, [pc, #256]	; 8016384 <__ieee754_acosf+0x1c8>
 8016284:	eddf ba40 	vldr	s23, [pc, #256]	; 8016388 <__ieee754_acosf+0x1cc>
 8016288:	ed9f ba40 	vldr	s22, [pc, #256]	; 801638c <__ieee754_acosf+0x1d0>
 801628c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8016390 <__ieee754_acosf+0x1d4>
 8016290:	ed9f da40 	vldr	s26, [pc, #256]	; 8016394 <__ieee754_acosf+0x1d8>
 8016294:	eddf aa39 	vldr	s21, [pc, #228]	; 801637c <__ieee754_acosf+0x1c0>
 8016298:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8016398 <__ieee754_acosf+0x1dc>
 801629c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801639c <__ieee754_acosf+0x1e0>
 80162a0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80162a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80162a8:	da28      	bge.n	80162fc <__ieee754_acosf+0x140>
 80162aa:	ee30 0a09 	vadd.f32	s0, s0, s18
 80162ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80162b2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80162b6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80162ba:	eeac ca80 	vfma.f32	s24, s25, s0
 80162be:	eeaa aa80 	vfma.f32	s20, s21, s0
 80162c2:	eeec ba00 	vfma.f32	s23, s24, s0
 80162c6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80162ca:	eeab ba80 	vfma.f32	s22, s23, s0
 80162ce:	eea9 9a80 	vfma.f32	s18, s19, s0
 80162d2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80162d6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80162da:	f000 fb2b 	bl	8016934 <__ieee754_sqrtf>
 80162de:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80162e2:	eddf 7a30 	vldr	s15, [pc, #192]	; 80163a4 <__ieee754_acosf+0x1e8>
 80162e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80162ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80162ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80162f2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80163a8 <__ieee754_acosf+0x1ec>
 80162f6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80162fa:	e771      	b.n	80161e0 <__ieee754_acosf+0x24>
 80162fc:	ee39 8a40 	vsub.f32	s16, s18, s0
 8016300:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016304:	eeb0 0a48 	vmov.f32	s0, s16
 8016308:	f000 fb14 	bl	8016934 <__ieee754_sqrtf>
 801630c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8016310:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8016314:	eeac ca88 	vfma.f32	s24, s25, s16
 8016318:	eeaa aa88 	vfma.f32	s20, s21, s16
 801631c:	eeec ba08 	vfma.f32	s23, s24, s16
 8016320:	ee10 3a10 	vmov	r3, s0
 8016324:	eeab ba88 	vfma.f32	s22, s23, s16
 8016328:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801632c:	f023 030f 	bic.w	r3, r3, #15
 8016330:	eeea 9a08 	vfma.f32	s19, s20, s16
 8016334:	ee07 3a90 	vmov	s15, r3
 8016338:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801633c:	eeb0 6a48 	vmov.f32	s12, s16
 8016340:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016344:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016348:	ee70 6a27 	vadd.f32	s13, s0, s15
 801634c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016350:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016354:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016358:	eea0 7a26 	vfma.f32	s14, s0, s13
 801635c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016360:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016364:	e73c      	b.n	80161e0 <__ieee754_acosf+0x24>
 8016366:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80163ac <__ieee754_acosf+0x1f0>
 801636a:	e739      	b.n	80161e0 <__ieee754_acosf+0x24>
 801636c:	00000000 	.word	0x00000000
 8016370:	40490fdb 	.word	0x40490fdb
 8016374:	3811ef08 	.word	0x3811ef08
 8016378:	3a4f7f04 	.word	0x3a4f7f04
 801637c:	bf303361 	.word	0xbf303361
 8016380:	33a22168 	.word	0x33a22168
 8016384:	bd241146 	.word	0xbd241146
 8016388:	3e4e0aa8 	.word	0x3e4e0aa8
 801638c:	bea6b090 	.word	0xbea6b090
 8016390:	3e2aaaab 	.word	0x3e2aaaab
 8016394:	3d9dc62e 	.word	0x3d9dc62e
 8016398:	4001572d 	.word	0x4001572d
 801639c:	c019d139 	.word	0xc019d139
 80163a0:	3fc90fda 	.word	0x3fc90fda
 80163a4:	b3a22168 	.word	0xb3a22168
 80163a8:	40490fda 	.word	0x40490fda
 80163ac:	3fc90fdb 	.word	0x3fc90fdb

080163b0 <__ieee754_asinf>:
 80163b0:	b538      	push	{r3, r4, r5, lr}
 80163b2:	ee10 5a10 	vmov	r5, s0
 80163b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80163ba:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80163be:	ed2d 8b04 	vpush	{d8-d9}
 80163c2:	d10c      	bne.n	80163de <__ieee754_asinf+0x2e>
 80163c4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 801653c <__ieee754_asinf+0x18c>
 80163c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016540 <__ieee754_asinf+0x190>
 80163cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80163d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80163d4:	eeb0 0a67 	vmov.f32	s0, s15
 80163d8:	ecbd 8b04 	vpop	{d8-d9}
 80163dc:	bd38      	pop	{r3, r4, r5, pc}
 80163de:	dd04      	ble.n	80163ea <__ieee754_asinf+0x3a>
 80163e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80163e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80163e8:	e7f6      	b.n	80163d8 <__ieee754_asinf+0x28>
 80163ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80163ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80163f2:	da0b      	bge.n	801640c <__ieee754_asinf+0x5c>
 80163f4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80163f8:	da52      	bge.n	80164a0 <__ieee754_asinf+0xf0>
 80163fa:	eddf 7a52 	vldr	s15, [pc, #328]	; 8016544 <__ieee754_asinf+0x194>
 80163fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016402:	eef4 7ae8 	vcmpe.f32	s15, s17
 8016406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640a:	dce5      	bgt.n	80163d8 <__ieee754_asinf+0x28>
 801640c:	f001 f92a 	bl	8017664 <fabsf>
 8016410:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8016414:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016418:	ee20 8a08 	vmul.f32	s16, s0, s16
 801641c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016548 <__ieee754_asinf+0x198>
 8016420:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801654c <__ieee754_asinf+0x19c>
 8016424:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8016550 <__ieee754_asinf+0x1a0>
 8016428:	eea8 7a27 	vfma.f32	s14, s16, s15
 801642c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8016554 <__ieee754_asinf+0x1a4>
 8016430:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016434:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016558 <__ieee754_asinf+0x1a8>
 8016438:	eea7 7a88 	vfma.f32	s14, s15, s16
 801643c:	eddf 7a47 	vldr	s15, [pc, #284]	; 801655c <__ieee754_asinf+0x1ac>
 8016440:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016444:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016560 <__ieee754_asinf+0x1b0>
 8016448:	eea7 9a88 	vfma.f32	s18, s15, s16
 801644c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8016564 <__ieee754_asinf+0x1b4>
 8016450:	eee8 7a07 	vfma.f32	s15, s16, s14
 8016454:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016568 <__ieee754_asinf+0x1b8>
 8016458:	eea7 7a88 	vfma.f32	s14, s15, s16
 801645c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801656c <__ieee754_asinf+0x1bc>
 8016460:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016464:	eeb0 0a48 	vmov.f32	s0, s16
 8016468:	eee7 8a88 	vfma.f32	s17, s15, s16
 801646c:	f000 fa62 	bl	8016934 <__ieee754_sqrtf>
 8016470:	4b3f      	ldr	r3, [pc, #252]	; (8016570 <__ieee754_asinf+0x1c0>)
 8016472:	ee29 9a08 	vmul.f32	s18, s18, s16
 8016476:	429c      	cmp	r4, r3
 8016478:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801647c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016480:	dd3d      	ble.n	80164fe <__ieee754_asinf+0x14e>
 8016482:	eea0 0a06 	vfma.f32	s0, s0, s12
 8016486:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8016574 <__ieee754_asinf+0x1c4>
 801648a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801648e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016540 <__ieee754_asinf+0x190>
 8016492:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016496:	2d00      	cmp	r5, #0
 8016498:	bfd8      	it	le
 801649a:	eeb1 0a40 	vnegle.f32	s0, s0
 801649e:	e79b      	b.n	80163d8 <__ieee754_asinf+0x28>
 80164a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80164a4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016548 <__ieee754_asinf+0x198>
 80164a8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801654c <__ieee754_asinf+0x19c>
 80164ac:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016560 <__ieee754_asinf+0x1b0>
 80164b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80164b4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8016554 <__ieee754_asinf+0x1a4>
 80164b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80164bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8016558 <__ieee754_asinf+0x1a8>
 80164c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80164c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 801655c <__ieee754_asinf+0x1ac>
 80164c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80164cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016550 <__ieee754_asinf+0x1a0>
 80164d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80164d4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8016564 <__ieee754_asinf+0x1b4>
 80164d8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80164dc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8016568 <__ieee754_asinf+0x1b8>
 80164e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80164e4:	eddf 6a21 	vldr	s13, [pc, #132]	; 801656c <__ieee754_asinf+0x1bc>
 80164e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80164ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80164f0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80164f4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80164f8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80164fc:	e76c      	b.n	80163d8 <__ieee754_asinf+0x28>
 80164fe:	ee10 3a10 	vmov	r3, s0
 8016502:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8016506:	f023 030f 	bic.w	r3, r3, #15
 801650a:	ee07 3a10 	vmov	s14, r3
 801650e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8016512:	ee70 7a07 	vadd.f32	s15, s0, s14
 8016516:	ee30 0a00 	vadd.f32	s0, s0, s0
 801651a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801651e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801653c <__ieee754_asinf+0x18c>
 8016522:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8016526:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801652a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8016578 <__ieee754_asinf+0x1c8>
 801652e:	eeb0 6a40 	vmov.f32	s12, s0
 8016532:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016536:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801653a:	e7aa      	b.n	8016492 <__ieee754_asinf+0xe2>
 801653c:	b33bbd2e 	.word	0xb33bbd2e
 8016540:	3fc90fdb 	.word	0x3fc90fdb
 8016544:	7149f2ca 	.word	0x7149f2ca
 8016548:	3811ef08 	.word	0x3811ef08
 801654c:	3a4f7f04 	.word	0x3a4f7f04
 8016550:	3e2aaaab 	.word	0x3e2aaaab
 8016554:	bd241146 	.word	0xbd241146
 8016558:	3e4e0aa8 	.word	0x3e4e0aa8
 801655c:	bea6b090 	.word	0xbea6b090
 8016560:	3d9dc62e 	.word	0x3d9dc62e
 8016564:	bf303361 	.word	0xbf303361
 8016568:	4001572d 	.word	0x4001572d
 801656c:	c019d139 	.word	0xc019d139
 8016570:	3f799999 	.word	0x3f799999
 8016574:	333bbd2e 	.word	0x333bbd2e
 8016578:	3f490fdb 	.word	0x3f490fdb

0801657c <__ieee754_atan2f>:
 801657c:	ee10 2a90 	vmov	r2, s1
 8016580:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8016584:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016588:	b510      	push	{r4, lr}
 801658a:	eef0 7a40 	vmov.f32	s15, s0
 801658e:	dc06      	bgt.n	801659e <__ieee754_atan2f+0x22>
 8016590:	ee10 0a10 	vmov	r0, s0
 8016594:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016598:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801659c:	dd04      	ble.n	80165a8 <__ieee754_atan2f+0x2c>
 801659e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80165a2:	eeb0 0a67 	vmov.f32	s0, s15
 80165a6:	bd10      	pop	{r4, pc}
 80165a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80165ac:	d103      	bne.n	80165b6 <__ieee754_atan2f+0x3a>
 80165ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165b2:	f000 bf83 	b.w	80174bc <atanf>
 80165b6:	1794      	asrs	r4, r2, #30
 80165b8:	f004 0402 	and.w	r4, r4, #2
 80165bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80165c0:	b943      	cbnz	r3, 80165d4 <__ieee754_atan2f+0x58>
 80165c2:	2c02      	cmp	r4, #2
 80165c4:	d05e      	beq.n	8016684 <__ieee754_atan2f+0x108>
 80165c6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8016698 <__ieee754_atan2f+0x11c>
 80165ca:	2c03      	cmp	r4, #3
 80165cc:	bf08      	it	eq
 80165ce:	eef0 7a47 	vmoveq.f32	s15, s14
 80165d2:	e7e6      	b.n	80165a2 <__ieee754_atan2f+0x26>
 80165d4:	b941      	cbnz	r1, 80165e8 <__ieee754_atan2f+0x6c>
 80165d6:	eddf 7a31 	vldr	s15, [pc, #196]	; 801669c <__ieee754_atan2f+0x120>
 80165da:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80166a0 <__ieee754_atan2f+0x124>
 80165de:	2800      	cmp	r0, #0
 80165e0:	bfb8      	it	lt
 80165e2:	eef0 7a40 	vmovlt.f32	s15, s0
 80165e6:	e7dc      	b.n	80165a2 <__ieee754_atan2f+0x26>
 80165e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80165ec:	d110      	bne.n	8016610 <__ieee754_atan2f+0x94>
 80165ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80165f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80165f6:	d107      	bne.n	8016608 <__ieee754_atan2f+0x8c>
 80165f8:	2c02      	cmp	r4, #2
 80165fa:	d846      	bhi.n	801668a <__ieee754_atan2f+0x10e>
 80165fc:	4b29      	ldr	r3, [pc, #164]	; (80166a4 <__ieee754_atan2f+0x128>)
 80165fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016602:	edd4 7a00 	vldr	s15, [r4]
 8016606:	e7cc      	b.n	80165a2 <__ieee754_atan2f+0x26>
 8016608:	2c02      	cmp	r4, #2
 801660a:	d841      	bhi.n	8016690 <__ieee754_atan2f+0x114>
 801660c:	4b26      	ldr	r3, [pc, #152]	; (80166a8 <__ieee754_atan2f+0x12c>)
 801660e:	e7f6      	b.n	80165fe <__ieee754_atan2f+0x82>
 8016610:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016614:	d0df      	beq.n	80165d6 <__ieee754_atan2f+0x5a>
 8016616:	1a5b      	subs	r3, r3, r1
 8016618:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801661c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016620:	da1a      	bge.n	8016658 <__ieee754_atan2f+0xdc>
 8016622:	2a00      	cmp	r2, #0
 8016624:	da01      	bge.n	801662a <__ieee754_atan2f+0xae>
 8016626:	313c      	adds	r1, #60	; 0x3c
 8016628:	db19      	blt.n	801665e <__ieee754_atan2f+0xe2>
 801662a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801662e:	f001 f819 	bl	8017664 <fabsf>
 8016632:	f000 ff43 	bl	80174bc <atanf>
 8016636:	eef0 7a40 	vmov.f32	s15, s0
 801663a:	2c01      	cmp	r4, #1
 801663c:	d012      	beq.n	8016664 <__ieee754_atan2f+0xe8>
 801663e:	2c02      	cmp	r4, #2
 8016640:	d017      	beq.n	8016672 <__ieee754_atan2f+0xf6>
 8016642:	2c00      	cmp	r4, #0
 8016644:	d0ad      	beq.n	80165a2 <__ieee754_atan2f+0x26>
 8016646:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80166ac <__ieee754_atan2f+0x130>
 801664a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801664e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80166b0 <__ieee754_atan2f+0x134>
 8016652:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016656:	e7a4      	b.n	80165a2 <__ieee754_atan2f+0x26>
 8016658:	eddf 7a10 	vldr	s15, [pc, #64]	; 801669c <__ieee754_atan2f+0x120>
 801665c:	e7ed      	b.n	801663a <__ieee754_atan2f+0xbe>
 801665e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80166b4 <__ieee754_atan2f+0x138>
 8016662:	e7ea      	b.n	801663a <__ieee754_atan2f+0xbe>
 8016664:	ee17 3a90 	vmov	r3, s15
 8016668:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801666c:	ee07 3a90 	vmov	s15, r3
 8016670:	e797      	b.n	80165a2 <__ieee754_atan2f+0x26>
 8016672:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80166ac <__ieee754_atan2f+0x130>
 8016676:	ee77 7a80 	vadd.f32	s15, s15, s0
 801667a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80166b0 <__ieee754_atan2f+0x134>
 801667e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016682:	e78e      	b.n	80165a2 <__ieee754_atan2f+0x26>
 8016684:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80166b0 <__ieee754_atan2f+0x134>
 8016688:	e78b      	b.n	80165a2 <__ieee754_atan2f+0x26>
 801668a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80166b8 <__ieee754_atan2f+0x13c>
 801668e:	e788      	b.n	80165a2 <__ieee754_atan2f+0x26>
 8016690:	eddf 7a08 	vldr	s15, [pc, #32]	; 80166b4 <__ieee754_atan2f+0x138>
 8016694:	e785      	b.n	80165a2 <__ieee754_atan2f+0x26>
 8016696:	bf00      	nop
 8016698:	c0490fdb 	.word	0xc0490fdb
 801669c:	3fc90fdb 	.word	0x3fc90fdb
 80166a0:	bfc90fdb 	.word	0xbfc90fdb
 80166a4:	0801a930 	.word	0x0801a930
 80166a8:	0801a93c 	.word	0x0801a93c
 80166ac:	33bbbd2e 	.word	0x33bbbd2e
 80166b0:	40490fdb 	.word	0x40490fdb
 80166b4:	00000000 	.word	0x00000000
 80166b8:	3f490fdb 	.word	0x3f490fdb

080166bc <__ieee754_rem_pio2f>:
 80166bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80166be:	ee10 6a10 	vmov	r6, s0
 80166c2:	4b8e      	ldr	r3, [pc, #568]	; (80168fc <__ieee754_rem_pio2f+0x240>)
 80166c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80166c8:	429d      	cmp	r5, r3
 80166ca:	b087      	sub	sp, #28
 80166cc:	eef0 7a40 	vmov.f32	s15, s0
 80166d0:	4604      	mov	r4, r0
 80166d2:	dc05      	bgt.n	80166e0 <__ieee754_rem_pio2f+0x24>
 80166d4:	2300      	movs	r3, #0
 80166d6:	ed80 0a00 	vstr	s0, [r0]
 80166da:	6043      	str	r3, [r0, #4]
 80166dc:	2000      	movs	r0, #0
 80166de:	e01a      	b.n	8016716 <__ieee754_rem_pio2f+0x5a>
 80166e0:	4b87      	ldr	r3, [pc, #540]	; (8016900 <__ieee754_rem_pio2f+0x244>)
 80166e2:	429d      	cmp	r5, r3
 80166e4:	dc46      	bgt.n	8016774 <__ieee754_rem_pio2f+0xb8>
 80166e6:	2e00      	cmp	r6, #0
 80166e8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8016904 <__ieee754_rem_pio2f+0x248>
 80166ec:	4b86      	ldr	r3, [pc, #536]	; (8016908 <__ieee754_rem_pio2f+0x24c>)
 80166ee:	f025 050f 	bic.w	r5, r5, #15
 80166f2:	dd1f      	ble.n	8016734 <__ieee754_rem_pio2f+0x78>
 80166f4:	429d      	cmp	r5, r3
 80166f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80166fa:	d00e      	beq.n	801671a <__ieee754_rem_pio2f+0x5e>
 80166fc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801690c <__ieee754_rem_pio2f+0x250>
 8016700:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8016704:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016708:	ed80 0a00 	vstr	s0, [r0]
 801670c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016710:	2001      	movs	r0, #1
 8016712:	edc4 7a01 	vstr	s15, [r4, #4]
 8016716:	b007      	add	sp, #28
 8016718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801671a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8016910 <__ieee754_rem_pio2f+0x254>
 801671e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8016914 <__ieee754_rem_pio2f+0x258>
 8016722:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016726:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801672a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801672e:	edc0 6a00 	vstr	s13, [r0]
 8016732:	e7eb      	b.n	801670c <__ieee754_rem_pio2f+0x50>
 8016734:	429d      	cmp	r5, r3
 8016736:	ee77 7a80 	vadd.f32	s15, s15, s0
 801673a:	d00e      	beq.n	801675a <__ieee754_rem_pio2f+0x9e>
 801673c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801690c <__ieee754_rem_pio2f+0x250>
 8016740:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016744:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016748:	ed80 0a00 	vstr	s0, [r0]
 801674c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016750:	f04f 30ff 	mov.w	r0, #4294967295
 8016754:	edc4 7a01 	vstr	s15, [r4, #4]
 8016758:	e7dd      	b.n	8016716 <__ieee754_rem_pio2f+0x5a>
 801675a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016910 <__ieee754_rem_pio2f+0x254>
 801675e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8016914 <__ieee754_rem_pio2f+0x258>
 8016762:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016766:	ee77 6a87 	vadd.f32	s13, s15, s14
 801676a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801676e:	edc0 6a00 	vstr	s13, [r0]
 8016772:	e7eb      	b.n	801674c <__ieee754_rem_pio2f+0x90>
 8016774:	4b68      	ldr	r3, [pc, #416]	; (8016918 <__ieee754_rem_pio2f+0x25c>)
 8016776:	429d      	cmp	r5, r3
 8016778:	dc72      	bgt.n	8016860 <__ieee754_rem_pio2f+0x1a4>
 801677a:	f000 ff73 	bl	8017664 <fabsf>
 801677e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801691c <__ieee754_rem_pio2f+0x260>
 8016782:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016786:	eee0 7a07 	vfma.f32	s15, s0, s14
 801678a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801678e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016792:	ee17 0a90 	vmov	r0, s15
 8016796:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8016904 <__ieee754_rem_pio2f+0x248>
 801679a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801679e:	281f      	cmp	r0, #31
 80167a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801690c <__ieee754_rem_pio2f+0x250>
 80167a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167a8:	eeb1 6a47 	vneg.f32	s12, s14
 80167ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80167b0:	ee16 2a90 	vmov	r2, s13
 80167b4:	dc1c      	bgt.n	80167f0 <__ieee754_rem_pio2f+0x134>
 80167b6:	495a      	ldr	r1, [pc, #360]	; (8016920 <__ieee754_rem_pio2f+0x264>)
 80167b8:	1e47      	subs	r7, r0, #1
 80167ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80167be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80167c2:	428b      	cmp	r3, r1
 80167c4:	d014      	beq.n	80167f0 <__ieee754_rem_pio2f+0x134>
 80167c6:	6022      	str	r2, [r4, #0]
 80167c8:	ed94 7a00 	vldr	s14, [r4]
 80167cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80167d0:	2e00      	cmp	r6, #0
 80167d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80167d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80167da:	da9c      	bge.n	8016716 <__ieee754_rem_pio2f+0x5a>
 80167dc:	eeb1 7a47 	vneg.f32	s14, s14
 80167e0:	eeb1 0a40 	vneg.f32	s0, s0
 80167e4:	ed84 7a00 	vstr	s14, [r4]
 80167e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80167ec:	4240      	negs	r0, r0
 80167ee:	e792      	b.n	8016716 <__ieee754_rem_pio2f+0x5a>
 80167f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80167f4:	15eb      	asrs	r3, r5, #23
 80167f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80167fa:	2d08      	cmp	r5, #8
 80167fc:	dde3      	ble.n	80167c6 <__ieee754_rem_pio2f+0x10a>
 80167fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 8016910 <__ieee754_rem_pio2f+0x254>
 8016802:	eef0 6a40 	vmov.f32	s13, s0
 8016806:	eee6 6a27 	vfma.f32	s13, s12, s15
 801680a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801680e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8016812:	eddf 7a40 	vldr	s15, [pc, #256]	; 8016914 <__ieee754_rem_pio2f+0x258>
 8016816:	ee97 0a27 	vfnms.f32	s0, s14, s15
 801681a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 801681e:	eef0 7a40 	vmov.f32	s15, s0
 8016822:	ee15 2a90 	vmov	r2, s11
 8016826:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801682a:	1a5b      	subs	r3, r3, r1
 801682c:	2b19      	cmp	r3, #25
 801682e:	dc04      	bgt.n	801683a <__ieee754_rem_pio2f+0x17e>
 8016830:	edc4 5a00 	vstr	s11, [r4]
 8016834:	eeb0 0a66 	vmov.f32	s0, s13
 8016838:	e7c6      	b.n	80167c8 <__ieee754_rem_pio2f+0x10c>
 801683a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016924 <__ieee754_rem_pio2f+0x268>
 801683e:	eeb0 0a66 	vmov.f32	s0, s13
 8016842:	eea6 0a25 	vfma.f32	s0, s12, s11
 8016846:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801684a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016928 <__ieee754_rem_pio2f+0x26c>
 801684e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8016852:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8016856:	ee30 7a67 	vsub.f32	s14, s0, s15
 801685a:	ed84 7a00 	vstr	s14, [r4]
 801685e:	e7b3      	b.n	80167c8 <__ieee754_rem_pio2f+0x10c>
 8016860:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016864:	db06      	blt.n	8016874 <__ieee754_rem_pio2f+0x1b8>
 8016866:	ee70 7a40 	vsub.f32	s15, s0, s0
 801686a:	edc0 7a01 	vstr	s15, [r0, #4]
 801686e:	edc0 7a00 	vstr	s15, [r0]
 8016872:	e733      	b.n	80166dc <__ieee754_rem_pio2f+0x20>
 8016874:	15ea      	asrs	r2, r5, #23
 8016876:	3a86      	subs	r2, #134	; 0x86
 8016878:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801687c:	ee07 3a90 	vmov	s15, r3
 8016880:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016884:	eddf 6a29 	vldr	s13, [pc, #164]	; 801692c <__ieee754_rem_pio2f+0x270>
 8016888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801688c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016890:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016898:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801689c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80168a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80168a4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80168a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80168ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80168b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b4:	edcd 7a05 	vstr	s15, [sp, #20]
 80168b8:	d11e      	bne.n	80168f8 <__ieee754_rem_pio2f+0x23c>
 80168ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80168be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c2:	bf14      	ite	ne
 80168c4:	2302      	movne	r3, #2
 80168c6:	2301      	moveq	r3, #1
 80168c8:	4919      	ldr	r1, [pc, #100]	; (8016930 <__ieee754_rem_pio2f+0x274>)
 80168ca:	9101      	str	r1, [sp, #4]
 80168cc:	2102      	movs	r1, #2
 80168ce:	9100      	str	r1, [sp, #0]
 80168d0:	a803      	add	r0, sp, #12
 80168d2:	4621      	mov	r1, r4
 80168d4:	f000 f892 	bl	80169fc <__kernel_rem_pio2f>
 80168d8:	2e00      	cmp	r6, #0
 80168da:	f6bf af1c 	bge.w	8016716 <__ieee754_rem_pio2f+0x5a>
 80168de:	edd4 7a00 	vldr	s15, [r4]
 80168e2:	eef1 7a67 	vneg.f32	s15, s15
 80168e6:	edc4 7a00 	vstr	s15, [r4]
 80168ea:	edd4 7a01 	vldr	s15, [r4, #4]
 80168ee:	eef1 7a67 	vneg.f32	s15, s15
 80168f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80168f6:	e779      	b.n	80167ec <__ieee754_rem_pio2f+0x130>
 80168f8:	2303      	movs	r3, #3
 80168fa:	e7e5      	b.n	80168c8 <__ieee754_rem_pio2f+0x20c>
 80168fc:	3f490fd8 	.word	0x3f490fd8
 8016900:	4016cbe3 	.word	0x4016cbe3
 8016904:	3fc90f80 	.word	0x3fc90f80
 8016908:	3fc90fd0 	.word	0x3fc90fd0
 801690c:	37354443 	.word	0x37354443
 8016910:	37354400 	.word	0x37354400
 8016914:	2e85a308 	.word	0x2e85a308
 8016918:	43490f80 	.word	0x43490f80
 801691c:	3f22f984 	.word	0x3f22f984
 8016920:	0801a948 	.word	0x0801a948
 8016924:	2e85a300 	.word	0x2e85a300
 8016928:	248d3132 	.word	0x248d3132
 801692c:	43800000 	.word	0x43800000
 8016930:	0801a9c8 	.word	0x0801a9c8

08016934 <__ieee754_sqrtf>:
 8016934:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016938:	4770      	bx	lr
	...

0801693c <__kernel_cosf>:
 801693c:	ee10 3a10 	vmov	r3, s0
 8016940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016944:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016948:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801694c:	da05      	bge.n	801695a <__kernel_cosf+0x1e>
 801694e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016952:	ee17 2a90 	vmov	r2, s15
 8016956:	2a00      	cmp	r2, #0
 8016958:	d03d      	beq.n	80169d6 <__kernel_cosf+0x9a>
 801695a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801695e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80169dc <__kernel_cosf+0xa0>
 8016962:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80169e0 <__kernel_cosf+0xa4>
 8016966:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80169e4 <__kernel_cosf+0xa8>
 801696a:	4a1f      	ldr	r2, [pc, #124]	; (80169e8 <__kernel_cosf+0xac>)
 801696c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016970:	4293      	cmp	r3, r2
 8016972:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80169ec <__kernel_cosf+0xb0>
 8016976:	eee7 7a25 	vfma.f32	s15, s14, s11
 801697a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80169f0 <__kernel_cosf+0xb4>
 801697e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016982:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80169f4 <__kernel_cosf+0xb8>
 8016986:	eee7 7a25 	vfma.f32	s15, s14, s11
 801698a:	eeb0 7a66 	vmov.f32	s14, s13
 801698e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016992:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016996:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801699a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801699e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80169a2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80169a6:	dc04      	bgt.n	80169b2 <__kernel_cosf+0x76>
 80169a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80169ac:	ee36 0a47 	vsub.f32	s0, s12, s14
 80169b0:	4770      	bx	lr
 80169b2:	4a11      	ldr	r2, [pc, #68]	; (80169f8 <__kernel_cosf+0xbc>)
 80169b4:	4293      	cmp	r3, r2
 80169b6:	bfda      	itte	le
 80169b8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80169bc:	ee06 3a90 	vmovle	s13, r3
 80169c0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80169c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80169c8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80169cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80169d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80169d4:	4770      	bx	lr
 80169d6:	eeb0 0a46 	vmov.f32	s0, s12
 80169da:	4770      	bx	lr
 80169dc:	ad47d74e 	.word	0xad47d74e
 80169e0:	310f74f6 	.word	0x310f74f6
 80169e4:	3d2aaaab 	.word	0x3d2aaaab
 80169e8:	3e999999 	.word	0x3e999999
 80169ec:	b493f27c 	.word	0xb493f27c
 80169f0:	37d00d01 	.word	0x37d00d01
 80169f4:	bab60b61 	.word	0xbab60b61
 80169f8:	3f480000 	.word	0x3f480000

080169fc <__kernel_rem_pio2f>:
 80169fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a00:	ed2d 8b04 	vpush	{d8-d9}
 8016a04:	b0d7      	sub	sp, #348	; 0x15c
 8016a06:	4616      	mov	r6, r2
 8016a08:	4698      	mov	r8, r3
 8016a0a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016a0c:	4bbb      	ldr	r3, [pc, #748]	; (8016cfc <__kernel_rem_pio2f+0x300>)
 8016a0e:	9001      	str	r0, [sp, #4]
 8016a10:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8016a14:	1d33      	adds	r3, r6, #4
 8016a16:	460d      	mov	r5, r1
 8016a18:	f108 39ff 	add.w	r9, r8, #4294967295
 8016a1c:	db29      	blt.n	8016a72 <__kernel_rem_pio2f+0x76>
 8016a1e:	1ef1      	subs	r1, r6, #3
 8016a20:	bf48      	it	mi
 8016a22:	1d31      	addmi	r1, r6, #4
 8016a24:	10c9      	asrs	r1, r1, #3
 8016a26:	1c4c      	adds	r4, r1, #1
 8016a28:	00e3      	lsls	r3, r4, #3
 8016a2a:	9302      	str	r3, [sp, #8]
 8016a2c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016a2e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016a32:	eba1 0009 	sub.w	r0, r1, r9
 8016a36:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8016a3a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8016a3e:	eb07 0c09 	add.w	ip, r7, r9
 8016a42:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8016a46:	2300      	movs	r3, #0
 8016a48:	4563      	cmp	r3, ip
 8016a4a:	dd14      	ble.n	8016a76 <__kernel_rem_pio2f+0x7a>
 8016a4c:	ab1a      	add	r3, sp, #104	; 0x68
 8016a4e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8016a52:	46cc      	mov	ip, r9
 8016a54:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016a58:	f1c8 0b01 	rsb	fp, r8, #1
 8016a5c:	eb0b 020c 	add.w	r2, fp, ip
 8016a60:	4297      	cmp	r7, r2
 8016a62:	db27      	blt.n	8016ab4 <__kernel_rem_pio2f+0xb8>
 8016a64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016a68:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	2200      	movs	r2, #0
 8016a70:	e016      	b.n	8016aa0 <__kernel_rem_pio2f+0xa4>
 8016a72:	2100      	movs	r1, #0
 8016a74:	e7d7      	b.n	8016a26 <__kernel_rem_pio2f+0x2a>
 8016a76:	42d8      	cmn	r0, r3
 8016a78:	bf5d      	ittte	pl
 8016a7a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8016a7e:	ee07 2a90 	vmovpl	s15, r2
 8016a82:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016a86:	eef0 7a47 	vmovmi.f32	s15, s14
 8016a8a:	ecea 7a01 	vstmia	sl!, {s15}
 8016a8e:	3301      	adds	r3, #1
 8016a90:	e7da      	b.n	8016a48 <__kernel_rem_pio2f+0x4c>
 8016a92:	ecfe 6a01 	vldmia	lr!, {s13}
 8016a96:	ed90 7a00 	vldr	s14, [r0]
 8016a9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016a9e:	3201      	adds	r2, #1
 8016aa0:	454a      	cmp	r2, r9
 8016aa2:	f1a0 0004 	sub.w	r0, r0, #4
 8016aa6:	ddf4      	ble.n	8016a92 <__kernel_rem_pio2f+0x96>
 8016aa8:	ecea 7a01 	vstmia	sl!, {s15}
 8016aac:	3304      	adds	r3, #4
 8016aae:	f10c 0c01 	add.w	ip, ip, #1
 8016ab2:	e7d3      	b.n	8016a5c <__kernel_rem_pio2f+0x60>
 8016ab4:	ab06      	add	r3, sp, #24
 8016ab6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8016aba:	9304      	str	r3, [sp, #16]
 8016abc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016abe:	eddf 8a92 	vldr	s17, [pc, #584]	; 8016d08 <__kernel_rem_pio2f+0x30c>
 8016ac2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8016d04 <__kernel_rem_pio2f+0x308>
 8016ac6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016aca:	9303      	str	r3, [sp, #12]
 8016acc:	46ba      	mov	sl, r7
 8016ace:	ab56      	add	r3, sp, #344	; 0x158
 8016ad0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016ad4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016ad8:	ab06      	add	r3, sp, #24
 8016ada:	4618      	mov	r0, r3
 8016adc:	4652      	mov	r2, sl
 8016ade:	2a00      	cmp	r2, #0
 8016ae0:	dc51      	bgt.n	8016b86 <__kernel_rem_pio2f+0x18a>
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	9305      	str	r3, [sp, #20]
 8016ae6:	f000 fe0d 	bl	8017704 <scalbnf>
 8016aea:	eeb0 8a40 	vmov.f32	s16, s0
 8016aee:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016af2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016af6:	f000 fdbd 	bl	8017674 <floorf>
 8016afa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016afe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016b02:	2c00      	cmp	r4, #0
 8016b04:	9b05      	ldr	r3, [sp, #20]
 8016b06:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016b0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016b0e:	edcd 7a00 	vstr	s15, [sp]
 8016b12:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016b16:	dd4b      	ble.n	8016bb0 <__kernel_rem_pio2f+0x1b4>
 8016b18:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016b1c:	aa06      	add	r2, sp, #24
 8016b1e:	f1c4 0e08 	rsb	lr, r4, #8
 8016b22:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8016b26:	ee17 1a90 	vmov	r1, s15
 8016b2a:	fa42 f00e 	asr.w	r0, r2, lr
 8016b2e:	4401      	add	r1, r0
 8016b30:	9100      	str	r1, [sp, #0]
 8016b32:	fa00 f00e 	lsl.w	r0, r0, lr
 8016b36:	a906      	add	r1, sp, #24
 8016b38:	1a12      	subs	r2, r2, r0
 8016b3a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016b3e:	f1c4 0007 	rsb	r0, r4, #7
 8016b42:	fa42 fb00 	asr.w	fp, r2, r0
 8016b46:	f1bb 0f00 	cmp.w	fp, #0
 8016b4a:	dd43      	ble.n	8016bd4 <__kernel_rem_pio2f+0x1d8>
 8016b4c:	9a00      	ldr	r2, [sp, #0]
 8016b4e:	f04f 0e00 	mov.w	lr, #0
 8016b52:	3201      	adds	r2, #1
 8016b54:	9200      	str	r2, [sp, #0]
 8016b56:	4670      	mov	r0, lr
 8016b58:	45f2      	cmp	sl, lr
 8016b5a:	dc6c      	bgt.n	8016c36 <__kernel_rem_pio2f+0x23a>
 8016b5c:	2c00      	cmp	r4, #0
 8016b5e:	dd04      	ble.n	8016b6a <__kernel_rem_pio2f+0x16e>
 8016b60:	2c01      	cmp	r4, #1
 8016b62:	d079      	beq.n	8016c58 <__kernel_rem_pio2f+0x25c>
 8016b64:	2c02      	cmp	r4, #2
 8016b66:	f000 8082 	beq.w	8016c6e <__kernel_rem_pio2f+0x272>
 8016b6a:	f1bb 0f02 	cmp.w	fp, #2
 8016b6e:	d131      	bne.n	8016bd4 <__kernel_rem_pio2f+0x1d8>
 8016b70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016b74:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016b78:	b360      	cbz	r0, 8016bd4 <__kernel_rem_pio2f+0x1d8>
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f000 fdc2 	bl	8017704 <scalbnf>
 8016b80:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016b84:	e026      	b.n	8016bd4 <__kernel_rem_pio2f+0x1d8>
 8016b86:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016b8a:	3a01      	subs	r2, #1
 8016b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016b90:	a942      	add	r1, sp, #264	; 0x108
 8016b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b96:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8016b9a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016b9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016ba2:	eca0 0a01 	vstmia	r0!, {s0}
 8016ba6:	ed9c 0a00 	vldr	s0, [ip]
 8016baa:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016bae:	e796      	b.n	8016ade <__kernel_rem_pio2f+0xe2>
 8016bb0:	d107      	bne.n	8016bc2 <__kernel_rem_pio2f+0x1c6>
 8016bb2:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016bb6:	a906      	add	r1, sp, #24
 8016bb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8016bbc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016bc0:	e7c1      	b.n	8016b46 <__kernel_rem_pio2f+0x14a>
 8016bc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016bc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bce:	da2f      	bge.n	8016c30 <__kernel_rem_pio2f+0x234>
 8016bd0:	f04f 0b00 	mov.w	fp, #0
 8016bd4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bdc:	f040 8098 	bne.w	8016d10 <__kernel_rem_pio2f+0x314>
 8016be0:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016be4:	469c      	mov	ip, r3
 8016be6:	2200      	movs	r2, #0
 8016be8:	45bc      	cmp	ip, r7
 8016bea:	da48      	bge.n	8016c7e <__kernel_rem_pio2f+0x282>
 8016bec:	2a00      	cmp	r2, #0
 8016bee:	d05f      	beq.n	8016cb0 <__kernel_rem_pio2f+0x2b4>
 8016bf0:	aa06      	add	r2, sp, #24
 8016bf2:	3c08      	subs	r4, #8
 8016bf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016bf8:	2900      	cmp	r1, #0
 8016bfa:	d07d      	beq.n	8016cf8 <__kernel_rem_pio2f+0x2fc>
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016c02:	9301      	str	r3, [sp, #4]
 8016c04:	f000 fd7e 	bl	8017704 <scalbnf>
 8016c08:	9b01      	ldr	r3, [sp, #4]
 8016c0a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8016d08 <__kernel_rem_pio2f+0x30c>
 8016c0e:	4619      	mov	r1, r3
 8016c10:	2900      	cmp	r1, #0
 8016c12:	f280 80af 	bge.w	8016d74 <__kernel_rem_pio2f+0x378>
 8016c16:	4618      	mov	r0, r3
 8016c18:	2400      	movs	r4, #0
 8016c1a:	2800      	cmp	r0, #0
 8016c1c:	f2c0 80d0 	blt.w	8016dc0 <__kernel_rem_pio2f+0x3c4>
 8016c20:	a942      	add	r1, sp, #264	; 0x108
 8016c22:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8016c26:	4a36      	ldr	r2, [pc, #216]	; (8016d00 <__kernel_rem_pio2f+0x304>)
 8016c28:	eddf 7a38 	vldr	s15, [pc, #224]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016c2c:	2100      	movs	r1, #0
 8016c2e:	e0bb      	b.n	8016da8 <__kernel_rem_pio2f+0x3ac>
 8016c30:	f04f 0b02 	mov.w	fp, #2
 8016c34:	e78a      	b.n	8016b4c <__kernel_rem_pio2f+0x150>
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	b948      	cbnz	r0, 8016c4e <__kernel_rem_pio2f+0x252>
 8016c3a:	b11a      	cbz	r2, 8016c44 <__kernel_rem_pio2f+0x248>
 8016c3c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	2201      	movs	r2, #1
 8016c44:	f10e 0e01 	add.w	lr, lr, #1
 8016c48:	3304      	adds	r3, #4
 8016c4a:	4610      	mov	r0, r2
 8016c4c:	e784      	b.n	8016b58 <__kernel_rem_pio2f+0x15c>
 8016c4e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016c52:	601a      	str	r2, [r3, #0]
 8016c54:	4602      	mov	r2, r0
 8016c56:	e7f5      	b.n	8016c44 <__kernel_rem_pio2f+0x248>
 8016c58:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016c5c:	ab06      	add	r3, sp, #24
 8016c5e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c66:	aa06      	add	r2, sp, #24
 8016c68:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8016c6c:	e77d      	b.n	8016b6a <__kernel_rem_pio2f+0x16e>
 8016c6e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016c72:	ab06      	add	r3, sp, #24
 8016c74:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016c7c:	e7f3      	b.n	8016c66 <__kernel_rem_pio2f+0x26a>
 8016c7e:	a906      	add	r1, sp, #24
 8016c80:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016c84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016c88:	4302      	orrs	r2, r0
 8016c8a:	e7ad      	b.n	8016be8 <__kernel_rem_pio2f+0x1ec>
 8016c8c:	3001      	adds	r0, #1
 8016c8e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016c92:	2a00      	cmp	r2, #0
 8016c94:	d0fa      	beq.n	8016c8c <__kernel_rem_pio2f+0x290>
 8016c96:	a91a      	add	r1, sp, #104	; 0x68
 8016c98:	eb0a 0208 	add.w	r2, sl, r8
 8016c9c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016ca0:	f10a 0301 	add.w	r3, sl, #1
 8016ca4:	eb0a 0100 	add.w	r1, sl, r0
 8016ca8:	4299      	cmp	r1, r3
 8016caa:	da04      	bge.n	8016cb6 <__kernel_rem_pio2f+0x2ba>
 8016cac:	468a      	mov	sl, r1
 8016cae:	e70e      	b.n	8016ace <__kernel_rem_pio2f+0xd2>
 8016cb0:	9b04      	ldr	r3, [sp, #16]
 8016cb2:	2001      	movs	r0, #1
 8016cb4:	e7eb      	b.n	8016c8e <__kernel_rem_pio2f+0x292>
 8016cb6:	9803      	ldr	r0, [sp, #12]
 8016cb8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016cbc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016cc0:	9000      	str	r0, [sp, #0]
 8016cc2:	ee07 0a90 	vmov	s15, r0
 8016cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cca:	2000      	movs	r0, #0
 8016ccc:	ece2 7a01 	vstmia	r2!, {s15}
 8016cd0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016cd4:	4696      	mov	lr, r2
 8016cd6:	4548      	cmp	r0, r9
 8016cd8:	dd06      	ble.n	8016ce8 <__kernel_rem_pio2f+0x2ec>
 8016cda:	a842      	add	r0, sp, #264	; 0x108
 8016cdc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016ce0:	edc0 7a00 	vstr	s15, [r0]
 8016ce4:	3301      	adds	r3, #1
 8016ce6:	e7df      	b.n	8016ca8 <__kernel_rem_pio2f+0x2ac>
 8016ce8:	ecfc 6a01 	vldmia	ip!, {s13}
 8016cec:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016cf0:	3001      	adds	r0, #1
 8016cf2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016cf6:	e7ee      	b.n	8016cd6 <__kernel_rem_pio2f+0x2da>
 8016cf8:	3b01      	subs	r3, #1
 8016cfa:	e779      	b.n	8016bf0 <__kernel_rem_pio2f+0x1f4>
 8016cfc:	0801ad0c 	.word	0x0801ad0c
 8016d00:	0801ace0 	.word	0x0801ace0
 8016d04:	43800000 	.word	0x43800000
 8016d08:	3b800000 	.word	0x3b800000
 8016d0c:	00000000 	.word	0x00000000
 8016d10:	9b02      	ldr	r3, [sp, #8]
 8016d12:	eeb0 0a48 	vmov.f32	s0, s16
 8016d16:	1b98      	subs	r0, r3, r6
 8016d18:	f000 fcf4 	bl	8017704 <scalbnf>
 8016d1c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8016d04 <__kernel_rem_pio2f+0x308>
 8016d20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d28:	db1b      	blt.n	8016d62 <__kernel_rem_pio2f+0x366>
 8016d2a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016d08 <__kernel_rem_pio2f+0x30c>
 8016d2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d32:	aa06      	add	r2, sp, #24
 8016d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d38:	a906      	add	r1, sp, #24
 8016d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d3e:	3408      	adds	r4, #8
 8016d40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016d4c:	ee10 3a10 	vmov	r3, s0
 8016d50:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016d54:	ee17 2a90 	vmov	r2, s15
 8016d58:	f10a 0301 	add.w	r3, sl, #1
 8016d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016d60:	e74c      	b.n	8016bfc <__kernel_rem_pio2f+0x200>
 8016d62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016d66:	aa06      	add	r2, sp, #24
 8016d68:	ee10 3a10 	vmov	r3, s0
 8016d6c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016d70:	4653      	mov	r3, sl
 8016d72:	e743      	b.n	8016bfc <__kernel_rem_pio2f+0x200>
 8016d74:	aa42      	add	r2, sp, #264	; 0x108
 8016d76:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016d7a:	aa06      	add	r2, sp, #24
 8016d7c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016d80:	9201      	str	r2, [sp, #4]
 8016d82:	ee07 2a90 	vmov	s15, r2
 8016d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d8a:	3901      	subs	r1, #1
 8016d8c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016d90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016d94:	edc0 7a00 	vstr	s15, [r0]
 8016d98:	e73a      	b.n	8016c10 <__kernel_rem_pio2f+0x214>
 8016d9a:	ecf2 6a01 	vldmia	r2!, {s13}
 8016d9e:	ecb6 7a01 	vldmia	r6!, {s14}
 8016da2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016da6:	3101      	adds	r1, #1
 8016da8:	42b9      	cmp	r1, r7
 8016daa:	dc01      	bgt.n	8016db0 <__kernel_rem_pio2f+0x3b4>
 8016dac:	428c      	cmp	r4, r1
 8016dae:	daf4      	bge.n	8016d9a <__kernel_rem_pio2f+0x39e>
 8016db0:	aa56      	add	r2, sp, #344	; 0x158
 8016db2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016db6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8016dba:	3801      	subs	r0, #1
 8016dbc:	3401      	adds	r4, #1
 8016dbe:	e72c      	b.n	8016c1a <__kernel_rem_pio2f+0x21e>
 8016dc0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016dc2:	2a02      	cmp	r2, #2
 8016dc4:	dc0a      	bgt.n	8016ddc <__kernel_rem_pio2f+0x3e0>
 8016dc6:	2a00      	cmp	r2, #0
 8016dc8:	dc61      	bgt.n	8016e8e <__kernel_rem_pio2f+0x492>
 8016dca:	d03c      	beq.n	8016e46 <__kernel_rem_pio2f+0x44a>
 8016dcc:	9b00      	ldr	r3, [sp, #0]
 8016dce:	f003 0007 	and.w	r0, r3, #7
 8016dd2:	b057      	add	sp, #348	; 0x15c
 8016dd4:	ecbd 8b04 	vpop	{d8-d9}
 8016dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ddc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016dde:	2a03      	cmp	r2, #3
 8016de0:	d1f4      	bne.n	8016dcc <__kernel_rem_pio2f+0x3d0>
 8016de2:	aa2e      	add	r2, sp, #184	; 0xb8
 8016de4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016de8:	4608      	mov	r0, r1
 8016dea:	461c      	mov	r4, r3
 8016dec:	2c00      	cmp	r4, #0
 8016dee:	f1a0 0004 	sub.w	r0, r0, #4
 8016df2:	dc59      	bgt.n	8016ea8 <__kernel_rem_pio2f+0x4ac>
 8016df4:	4618      	mov	r0, r3
 8016df6:	2801      	cmp	r0, #1
 8016df8:	f1a1 0104 	sub.w	r1, r1, #4
 8016dfc:	dc64      	bgt.n	8016ec8 <__kernel_rem_pio2f+0x4cc>
 8016dfe:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016e02:	2b01      	cmp	r3, #1
 8016e04:	dc70      	bgt.n	8016ee8 <__kernel_rem_pio2f+0x4ec>
 8016e06:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8016e0a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8016e0e:	f1bb 0f00 	cmp.w	fp, #0
 8016e12:	d172      	bne.n	8016efa <__kernel_rem_pio2f+0x4fe>
 8016e14:	edc5 6a00 	vstr	s13, [r5]
 8016e18:	ed85 7a01 	vstr	s14, [r5, #4]
 8016e1c:	edc5 7a02 	vstr	s15, [r5, #8]
 8016e20:	e7d4      	b.n	8016dcc <__kernel_rem_pio2f+0x3d0>
 8016e22:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e24:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016e28:	ed91 7a00 	vldr	s14, [r1]
 8016e2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e30:	3b01      	subs	r3, #1
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	daf5      	bge.n	8016e22 <__kernel_rem_pio2f+0x426>
 8016e36:	f1bb 0f00 	cmp.w	fp, #0
 8016e3a:	d001      	beq.n	8016e40 <__kernel_rem_pio2f+0x444>
 8016e3c:	eef1 7a67 	vneg.f32	s15, s15
 8016e40:	edc5 7a00 	vstr	s15, [r5]
 8016e44:	e7c2      	b.n	8016dcc <__kernel_rem_pio2f+0x3d0>
 8016e46:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016e4a:	e7f2      	b.n	8016e32 <__kernel_rem_pio2f+0x436>
 8016e4c:	aa2e      	add	r2, sp, #184	; 0xb8
 8016e4e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016e52:	edd0 7a00 	vldr	s15, [r0]
 8016e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e5a:	3901      	subs	r1, #1
 8016e5c:	2900      	cmp	r1, #0
 8016e5e:	daf5      	bge.n	8016e4c <__kernel_rem_pio2f+0x450>
 8016e60:	f1bb 0f00 	cmp.w	fp, #0
 8016e64:	d017      	beq.n	8016e96 <__kernel_rem_pio2f+0x49a>
 8016e66:	eef1 7a47 	vneg.f32	s15, s14
 8016e6a:	edc5 7a00 	vstr	s15, [r5]
 8016e6e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016e76:	a82f      	add	r0, sp, #188	; 0xbc
 8016e78:	2101      	movs	r1, #1
 8016e7a:	428b      	cmp	r3, r1
 8016e7c:	da0e      	bge.n	8016e9c <__kernel_rem_pio2f+0x4a0>
 8016e7e:	f1bb 0f00 	cmp.w	fp, #0
 8016e82:	d001      	beq.n	8016e88 <__kernel_rem_pio2f+0x48c>
 8016e84:	eef1 7a67 	vneg.f32	s15, s15
 8016e88:	edc5 7a01 	vstr	s15, [r5, #4]
 8016e8c:	e79e      	b.n	8016dcc <__kernel_rem_pio2f+0x3d0>
 8016e8e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8016d0c <__kernel_rem_pio2f+0x310>
 8016e92:	4619      	mov	r1, r3
 8016e94:	e7e2      	b.n	8016e5c <__kernel_rem_pio2f+0x460>
 8016e96:	eef0 7a47 	vmov.f32	s15, s14
 8016e9a:	e7e6      	b.n	8016e6a <__kernel_rem_pio2f+0x46e>
 8016e9c:	ecb0 7a01 	vldmia	r0!, {s14}
 8016ea0:	3101      	adds	r1, #1
 8016ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ea6:	e7e8      	b.n	8016e7a <__kernel_rem_pio2f+0x47e>
 8016ea8:	edd0 7a00 	vldr	s15, [r0]
 8016eac:	edd0 6a01 	vldr	s13, [r0, #4]
 8016eb0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016eb4:	3c01      	subs	r4, #1
 8016eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016eba:	ed80 7a00 	vstr	s14, [r0]
 8016ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ec2:	edc0 7a01 	vstr	s15, [r0, #4]
 8016ec6:	e791      	b.n	8016dec <__kernel_rem_pio2f+0x3f0>
 8016ec8:	edd1 7a00 	vldr	s15, [r1]
 8016ecc:	edd1 6a01 	vldr	s13, [r1, #4]
 8016ed0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016ed4:	3801      	subs	r0, #1
 8016ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016eda:	ed81 7a00 	vstr	s14, [r1]
 8016ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ee2:	edc1 7a01 	vstr	s15, [r1, #4]
 8016ee6:	e786      	b.n	8016df6 <__kernel_rem_pio2f+0x3fa>
 8016ee8:	aa2e      	add	r2, sp, #184	; 0xb8
 8016eea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016eee:	ed91 7a00 	vldr	s14, [r1]
 8016ef2:	3b01      	subs	r3, #1
 8016ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ef8:	e783      	b.n	8016e02 <__kernel_rem_pio2f+0x406>
 8016efa:	eef1 6a66 	vneg.f32	s13, s13
 8016efe:	eeb1 7a47 	vneg.f32	s14, s14
 8016f02:	edc5 6a00 	vstr	s13, [r5]
 8016f06:	ed85 7a01 	vstr	s14, [r5, #4]
 8016f0a:	eef1 7a67 	vneg.f32	s15, s15
 8016f0e:	e785      	b.n	8016e1c <__kernel_rem_pio2f+0x420>

08016f10 <__kernel_sinf>:
 8016f10:	ee10 3a10 	vmov	r3, s0
 8016f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016f18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016f1c:	da04      	bge.n	8016f28 <__kernel_sinf+0x18>
 8016f1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016f22:	ee17 3a90 	vmov	r3, s15
 8016f26:	b35b      	cbz	r3, 8016f80 <__kernel_sinf+0x70>
 8016f28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016f2c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016f84 <__kernel_sinf+0x74>
 8016f30:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016f88 <__kernel_sinf+0x78>
 8016f34:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016f38:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016f8c <__kernel_sinf+0x7c>
 8016f3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f40:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016f90 <__kernel_sinf+0x80>
 8016f44:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016f48:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016f94 <__kernel_sinf+0x84>
 8016f4c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016f50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016f54:	b930      	cbnz	r0, 8016f64 <__kernel_sinf+0x54>
 8016f56:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016f98 <__kernel_sinf+0x88>
 8016f5a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016f5e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016f62:	4770      	bx	lr
 8016f64:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016f68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016f6c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016f70:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016f74:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016f9c <__kernel_sinf+0x8c>
 8016f78:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016f7c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop
 8016f84:	2f2ec9d3 	.word	0x2f2ec9d3
 8016f88:	b2d72f34 	.word	0xb2d72f34
 8016f8c:	3638ef1b 	.word	0x3638ef1b
 8016f90:	b9500d01 	.word	0xb9500d01
 8016f94:	3c088889 	.word	0x3c088889
 8016f98:	be2aaaab 	.word	0xbe2aaaab
 8016f9c:	3e2aaaab 	.word	0x3e2aaaab

08016fa0 <__kernel_tanf>:
 8016fa0:	b508      	push	{r3, lr}
 8016fa2:	ee10 3a10 	vmov	r3, s0
 8016fa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016faa:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016fae:	eef0 7a40 	vmov.f32	s15, s0
 8016fb2:	da17      	bge.n	8016fe4 <__kernel_tanf+0x44>
 8016fb4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016fb8:	ee17 1a10 	vmov	r1, s14
 8016fbc:	bb41      	cbnz	r1, 8017010 <__kernel_tanf+0x70>
 8016fbe:	1c43      	adds	r3, r0, #1
 8016fc0:	4313      	orrs	r3, r2
 8016fc2:	d108      	bne.n	8016fd6 <__kernel_tanf+0x36>
 8016fc4:	f000 fb4e 	bl	8017664 <fabsf>
 8016fc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016fcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8016fd4:	bd08      	pop	{r3, pc}
 8016fd6:	2801      	cmp	r0, #1
 8016fd8:	d0fa      	beq.n	8016fd0 <__kernel_tanf+0x30>
 8016fda:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016fde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016fe2:	e7f5      	b.n	8016fd0 <__kernel_tanf+0x30>
 8016fe4:	494d      	ldr	r1, [pc, #308]	; (801711c <__kernel_tanf+0x17c>)
 8016fe6:	428a      	cmp	r2, r1
 8016fe8:	db12      	blt.n	8017010 <__kernel_tanf+0x70>
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	bfb8      	it	lt
 8016fee:	eef1 7a40 	vneglt.f32	s15, s0
 8016ff2:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8017120 <__kernel_tanf+0x180>
 8016ff6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016ffa:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8017124 <__kernel_tanf+0x184>
 8016ffe:	bfb8      	it	lt
 8017000:	eef1 0a60 	vneglt.f32	s1, s1
 8017004:	ee70 0a60 	vsub.f32	s1, s0, s1
 8017008:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801700c:	eddf 0a46 	vldr	s1, [pc, #280]	; 8017128 <__kernel_tanf+0x188>
 8017010:	eddf 5a46 	vldr	s11, [pc, #280]	; 801712c <__kernel_tanf+0x18c>
 8017014:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8017130 <__kernel_tanf+0x190>
 8017018:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8017134 <__kernel_tanf+0x194>
 801701c:	493f      	ldr	r1, [pc, #252]	; (801711c <__kernel_tanf+0x17c>)
 801701e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017022:	428a      	cmp	r2, r1
 8017024:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017028:	eea7 6a25 	vfma.f32	s12, s14, s11
 801702c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8017138 <__kernel_tanf+0x198>
 8017030:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017034:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801713c <__kernel_tanf+0x19c>
 8017038:	eea5 6a87 	vfma.f32	s12, s11, s14
 801703c:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017140 <__kernel_tanf+0x1a0>
 8017040:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017044:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8017144 <__kernel_tanf+0x1a4>
 8017048:	eea5 6a87 	vfma.f32	s12, s11, s14
 801704c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8017148 <__kernel_tanf+0x1a8>
 8017050:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017054:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801714c <__kernel_tanf+0x1ac>
 8017058:	eea5 5a87 	vfma.f32	s10, s11, s14
 801705c:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8017150 <__kernel_tanf+0x1b0>
 8017060:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017064:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8017154 <__kernel_tanf+0x1b4>
 8017068:	eea5 5a87 	vfma.f32	s10, s11, s14
 801706c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8017158 <__kernel_tanf+0x1b8>
 8017070:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017074:	eeb0 7a65 	vmov.f32	s14, s11
 8017078:	eea7 6a26 	vfma.f32	s12, s14, s13
 801707c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8017080:	eeb0 7a46 	vmov.f32	s14, s12
 8017084:	eeb0 6a60 	vmov.f32	s12, s1
 8017088:	eea7 6a25 	vfma.f32	s12, s14, s11
 801708c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801715c <__kernel_tanf+0x1bc>
 8017090:	eee6 0a26 	vfma.f32	s1, s12, s13
 8017094:	eee5 0a87 	vfma.f32	s1, s11, s14
 8017098:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801709c:	db1d      	blt.n	80170da <__kernel_tanf+0x13a>
 801709e:	ee06 0a90 	vmov	s13, r0
 80170a2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 80170a6:	ee27 6a07 	vmul.f32	s12, s14, s14
 80170aa:	ee37 7a00 	vadd.f32	s14, s14, s0
 80170ae:	179b      	asrs	r3, r3, #30
 80170b0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80170b4:	f003 0302 	and.w	r3, r3, #2
 80170b8:	f1c3 0301 	rsb	r3, r3, #1
 80170bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80170c0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80170c4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80170c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80170cc:	ee07 3a90 	vmov	s15, r3
 80170d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170d4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80170d8:	e77a      	b.n	8016fd0 <__kernel_tanf+0x30>
 80170da:	2801      	cmp	r0, #1
 80170dc:	d01b      	beq.n	8017116 <__kernel_tanf+0x176>
 80170de:	4b20      	ldr	r3, [pc, #128]	; (8017160 <__kernel_tanf+0x1c0>)
 80170e0:	ee17 2a10 	vmov	r2, s14
 80170e4:	401a      	ands	r2, r3
 80170e6:	ee06 2a10 	vmov	s12, r2
 80170ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80170ee:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80170f2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80170f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80170fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80170fe:	ee16 2a90 	vmov	r2, s13
 8017102:	4013      	ands	r3, r2
 8017104:	ee07 3a90 	vmov	s15, r3
 8017108:	eea6 7a27 	vfma.f32	s14, s12, s15
 801710c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8017110:	eee7 7a26 	vfma.f32	s15, s14, s13
 8017114:	e75c      	b.n	8016fd0 <__kernel_tanf+0x30>
 8017116:	eef0 7a47 	vmov.f32	s15, s14
 801711a:	e759      	b.n	8016fd0 <__kernel_tanf+0x30>
 801711c:	3f2ca140 	.word	0x3f2ca140
 8017120:	3f490fda 	.word	0x3f490fda
 8017124:	33222168 	.word	0x33222168
 8017128:	00000000 	.word	0x00000000
 801712c:	b79bae5f 	.word	0xb79bae5f
 8017130:	38a3f445 	.word	0x38a3f445
 8017134:	37d95384 	.word	0x37d95384
 8017138:	3a1a26c8 	.word	0x3a1a26c8
 801713c:	3b6b6916 	.word	0x3b6b6916
 8017140:	3cb327a4 	.word	0x3cb327a4
 8017144:	3e088889 	.word	0x3e088889
 8017148:	3895c07a 	.word	0x3895c07a
 801714c:	398137b9 	.word	0x398137b9
 8017150:	3abede48 	.word	0x3abede48
 8017154:	3c11371f 	.word	0x3c11371f
 8017158:	3d5d0dd1 	.word	0x3d5d0dd1
 801715c:	3eaaaaab 	.word	0x3eaaaaab
 8017160:	fffff000 	.word	0xfffff000
 8017164:	00000000 	.word	0x00000000

08017168 <atan>:
 8017168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801716c:	ec55 4b10 	vmov	r4, r5, d0
 8017170:	4bc3      	ldr	r3, [pc, #780]	; (8017480 <atan+0x318>)
 8017172:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017176:	429e      	cmp	r6, r3
 8017178:	46ab      	mov	fp, r5
 801717a:	dd18      	ble.n	80171ae <atan+0x46>
 801717c:	4bc1      	ldr	r3, [pc, #772]	; (8017484 <atan+0x31c>)
 801717e:	429e      	cmp	r6, r3
 8017180:	dc01      	bgt.n	8017186 <atan+0x1e>
 8017182:	d109      	bne.n	8017198 <atan+0x30>
 8017184:	b144      	cbz	r4, 8017198 <atan+0x30>
 8017186:	4622      	mov	r2, r4
 8017188:	462b      	mov	r3, r5
 801718a:	4620      	mov	r0, r4
 801718c:	4629      	mov	r1, r5
 801718e:	f7e9 f87d 	bl	800028c <__adddf3>
 8017192:	4604      	mov	r4, r0
 8017194:	460d      	mov	r5, r1
 8017196:	e006      	b.n	80171a6 <atan+0x3e>
 8017198:	f1bb 0f00 	cmp.w	fp, #0
 801719c:	f300 8131 	bgt.w	8017402 <atan+0x29a>
 80171a0:	a59b      	add	r5, pc, #620	; (adr r5, 8017410 <atan+0x2a8>)
 80171a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80171a6:	ec45 4b10 	vmov	d0, r4, r5
 80171aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ae:	4bb6      	ldr	r3, [pc, #728]	; (8017488 <atan+0x320>)
 80171b0:	429e      	cmp	r6, r3
 80171b2:	dc14      	bgt.n	80171de <atan+0x76>
 80171b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80171b8:	429e      	cmp	r6, r3
 80171ba:	dc0d      	bgt.n	80171d8 <atan+0x70>
 80171bc:	a396      	add	r3, pc, #600	; (adr r3, 8017418 <atan+0x2b0>)
 80171be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c2:	ee10 0a10 	vmov	r0, s0
 80171c6:	4629      	mov	r1, r5
 80171c8:	f7e9 f860 	bl	800028c <__adddf3>
 80171cc:	4baf      	ldr	r3, [pc, #700]	; (801748c <atan+0x324>)
 80171ce:	2200      	movs	r2, #0
 80171d0:	f7e9 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80171d4:	2800      	cmp	r0, #0
 80171d6:	d1e6      	bne.n	80171a6 <atan+0x3e>
 80171d8:	f04f 3aff 	mov.w	sl, #4294967295
 80171dc:	e02b      	b.n	8017236 <atan+0xce>
 80171de:	f000 f963 	bl	80174a8 <fabs>
 80171e2:	4bab      	ldr	r3, [pc, #684]	; (8017490 <atan+0x328>)
 80171e4:	429e      	cmp	r6, r3
 80171e6:	ec55 4b10 	vmov	r4, r5, d0
 80171ea:	f300 80bf 	bgt.w	801736c <atan+0x204>
 80171ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80171f2:	429e      	cmp	r6, r3
 80171f4:	f300 80a0 	bgt.w	8017338 <atan+0x1d0>
 80171f8:	ee10 2a10 	vmov	r2, s0
 80171fc:	ee10 0a10 	vmov	r0, s0
 8017200:	462b      	mov	r3, r5
 8017202:	4629      	mov	r1, r5
 8017204:	f7e9 f842 	bl	800028c <__adddf3>
 8017208:	4ba0      	ldr	r3, [pc, #640]	; (801748c <atan+0x324>)
 801720a:	2200      	movs	r2, #0
 801720c:	f7e9 f83c 	bl	8000288 <__aeabi_dsub>
 8017210:	2200      	movs	r2, #0
 8017212:	4606      	mov	r6, r0
 8017214:	460f      	mov	r7, r1
 8017216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801721a:	4620      	mov	r0, r4
 801721c:	4629      	mov	r1, r5
 801721e:	f7e9 f835 	bl	800028c <__adddf3>
 8017222:	4602      	mov	r2, r0
 8017224:	460b      	mov	r3, r1
 8017226:	4630      	mov	r0, r6
 8017228:	4639      	mov	r1, r7
 801722a:	f7e9 fb0f 	bl	800084c <__aeabi_ddiv>
 801722e:	f04f 0a00 	mov.w	sl, #0
 8017232:	4604      	mov	r4, r0
 8017234:	460d      	mov	r5, r1
 8017236:	4622      	mov	r2, r4
 8017238:	462b      	mov	r3, r5
 801723a:	4620      	mov	r0, r4
 801723c:	4629      	mov	r1, r5
 801723e:	f7e9 f9db 	bl	80005f8 <__aeabi_dmul>
 8017242:	4602      	mov	r2, r0
 8017244:	460b      	mov	r3, r1
 8017246:	4680      	mov	r8, r0
 8017248:	4689      	mov	r9, r1
 801724a:	f7e9 f9d5 	bl	80005f8 <__aeabi_dmul>
 801724e:	a374      	add	r3, pc, #464	; (adr r3, 8017420 <atan+0x2b8>)
 8017250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017254:	4606      	mov	r6, r0
 8017256:	460f      	mov	r7, r1
 8017258:	f7e9 f9ce 	bl	80005f8 <__aeabi_dmul>
 801725c:	a372      	add	r3, pc, #456	; (adr r3, 8017428 <atan+0x2c0>)
 801725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017262:	f7e9 f813 	bl	800028c <__adddf3>
 8017266:	4632      	mov	r2, r6
 8017268:	463b      	mov	r3, r7
 801726a:	f7e9 f9c5 	bl	80005f8 <__aeabi_dmul>
 801726e:	a370      	add	r3, pc, #448	; (adr r3, 8017430 <atan+0x2c8>)
 8017270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017274:	f7e9 f80a 	bl	800028c <__adddf3>
 8017278:	4632      	mov	r2, r6
 801727a:	463b      	mov	r3, r7
 801727c:	f7e9 f9bc 	bl	80005f8 <__aeabi_dmul>
 8017280:	a36d      	add	r3, pc, #436	; (adr r3, 8017438 <atan+0x2d0>)
 8017282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017286:	f7e9 f801 	bl	800028c <__adddf3>
 801728a:	4632      	mov	r2, r6
 801728c:	463b      	mov	r3, r7
 801728e:	f7e9 f9b3 	bl	80005f8 <__aeabi_dmul>
 8017292:	a36b      	add	r3, pc, #428	; (adr r3, 8017440 <atan+0x2d8>)
 8017294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017298:	f7e8 fff8 	bl	800028c <__adddf3>
 801729c:	4632      	mov	r2, r6
 801729e:	463b      	mov	r3, r7
 80172a0:	f7e9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80172a4:	a368      	add	r3, pc, #416	; (adr r3, 8017448 <atan+0x2e0>)
 80172a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172aa:	f7e8 ffef 	bl	800028c <__adddf3>
 80172ae:	4642      	mov	r2, r8
 80172b0:	464b      	mov	r3, r9
 80172b2:	f7e9 f9a1 	bl	80005f8 <__aeabi_dmul>
 80172b6:	a366      	add	r3, pc, #408	; (adr r3, 8017450 <atan+0x2e8>)
 80172b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172bc:	4680      	mov	r8, r0
 80172be:	4689      	mov	r9, r1
 80172c0:	4630      	mov	r0, r6
 80172c2:	4639      	mov	r1, r7
 80172c4:	f7e9 f998 	bl	80005f8 <__aeabi_dmul>
 80172c8:	a363      	add	r3, pc, #396	; (adr r3, 8017458 <atan+0x2f0>)
 80172ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ce:	f7e8 ffdb 	bl	8000288 <__aeabi_dsub>
 80172d2:	4632      	mov	r2, r6
 80172d4:	463b      	mov	r3, r7
 80172d6:	f7e9 f98f 	bl	80005f8 <__aeabi_dmul>
 80172da:	a361      	add	r3, pc, #388	; (adr r3, 8017460 <atan+0x2f8>)
 80172dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e0:	f7e8 ffd2 	bl	8000288 <__aeabi_dsub>
 80172e4:	4632      	mov	r2, r6
 80172e6:	463b      	mov	r3, r7
 80172e8:	f7e9 f986 	bl	80005f8 <__aeabi_dmul>
 80172ec:	a35e      	add	r3, pc, #376	; (adr r3, 8017468 <atan+0x300>)
 80172ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f2:	f7e8 ffc9 	bl	8000288 <__aeabi_dsub>
 80172f6:	4632      	mov	r2, r6
 80172f8:	463b      	mov	r3, r7
 80172fa:	f7e9 f97d 	bl	80005f8 <__aeabi_dmul>
 80172fe:	a35c      	add	r3, pc, #368	; (adr r3, 8017470 <atan+0x308>)
 8017300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017304:	f7e8 ffc0 	bl	8000288 <__aeabi_dsub>
 8017308:	4632      	mov	r2, r6
 801730a:	463b      	mov	r3, r7
 801730c:	f7e9 f974 	bl	80005f8 <__aeabi_dmul>
 8017310:	4602      	mov	r2, r0
 8017312:	460b      	mov	r3, r1
 8017314:	4640      	mov	r0, r8
 8017316:	4649      	mov	r1, r9
 8017318:	f7e8 ffb8 	bl	800028c <__adddf3>
 801731c:	4622      	mov	r2, r4
 801731e:	462b      	mov	r3, r5
 8017320:	f7e9 f96a 	bl	80005f8 <__aeabi_dmul>
 8017324:	f1ba 3fff 	cmp.w	sl, #4294967295
 8017328:	4602      	mov	r2, r0
 801732a:	460b      	mov	r3, r1
 801732c:	d14b      	bne.n	80173c6 <atan+0x25e>
 801732e:	4620      	mov	r0, r4
 8017330:	4629      	mov	r1, r5
 8017332:	f7e8 ffa9 	bl	8000288 <__aeabi_dsub>
 8017336:	e72c      	b.n	8017192 <atan+0x2a>
 8017338:	ee10 0a10 	vmov	r0, s0
 801733c:	4b53      	ldr	r3, [pc, #332]	; (801748c <atan+0x324>)
 801733e:	2200      	movs	r2, #0
 8017340:	4629      	mov	r1, r5
 8017342:	f7e8 ffa1 	bl	8000288 <__aeabi_dsub>
 8017346:	4b51      	ldr	r3, [pc, #324]	; (801748c <atan+0x324>)
 8017348:	4606      	mov	r6, r0
 801734a:	460f      	mov	r7, r1
 801734c:	2200      	movs	r2, #0
 801734e:	4620      	mov	r0, r4
 8017350:	4629      	mov	r1, r5
 8017352:	f7e8 ff9b 	bl	800028c <__adddf3>
 8017356:	4602      	mov	r2, r0
 8017358:	460b      	mov	r3, r1
 801735a:	4630      	mov	r0, r6
 801735c:	4639      	mov	r1, r7
 801735e:	f7e9 fa75 	bl	800084c <__aeabi_ddiv>
 8017362:	f04f 0a01 	mov.w	sl, #1
 8017366:	4604      	mov	r4, r0
 8017368:	460d      	mov	r5, r1
 801736a:	e764      	b.n	8017236 <atan+0xce>
 801736c:	4b49      	ldr	r3, [pc, #292]	; (8017494 <atan+0x32c>)
 801736e:	429e      	cmp	r6, r3
 8017370:	da1d      	bge.n	80173ae <atan+0x246>
 8017372:	ee10 0a10 	vmov	r0, s0
 8017376:	4b48      	ldr	r3, [pc, #288]	; (8017498 <atan+0x330>)
 8017378:	2200      	movs	r2, #0
 801737a:	4629      	mov	r1, r5
 801737c:	f7e8 ff84 	bl	8000288 <__aeabi_dsub>
 8017380:	4b45      	ldr	r3, [pc, #276]	; (8017498 <atan+0x330>)
 8017382:	4606      	mov	r6, r0
 8017384:	460f      	mov	r7, r1
 8017386:	2200      	movs	r2, #0
 8017388:	4620      	mov	r0, r4
 801738a:	4629      	mov	r1, r5
 801738c:	f7e9 f934 	bl	80005f8 <__aeabi_dmul>
 8017390:	4b3e      	ldr	r3, [pc, #248]	; (801748c <atan+0x324>)
 8017392:	2200      	movs	r2, #0
 8017394:	f7e8 ff7a 	bl	800028c <__adddf3>
 8017398:	4602      	mov	r2, r0
 801739a:	460b      	mov	r3, r1
 801739c:	4630      	mov	r0, r6
 801739e:	4639      	mov	r1, r7
 80173a0:	f7e9 fa54 	bl	800084c <__aeabi_ddiv>
 80173a4:	f04f 0a02 	mov.w	sl, #2
 80173a8:	4604      	mov	r4, r0
 80173aa:	460d      	mov	r5, r1
 80173ac:	e743      	b.n	8017236 <atan+0xce>
 80173ae:	462b      	mov	r3, r5
 80173b0:	ee10 2a10 	vmov	r2, s0
 80173b4:	4939      	ldr	r1, [pc, #228]	; (801749c <atan+0x334>)
 80173b6:	2000      	movs	r0, #0
 80173b8:	f7e9 fa48 	bl	800084c <__aeabi_ddiv>
 80173bc:	f04f 0a03 	mov.w	sl, #3
 80173c0:	4604      	mov	r4, r0
 80173c2:	460d      	mov	r5, r1
 80173c4:	e737      	b.n	8017236 <atan+0xce>
 80173c6:	4b36      	ldr	r3, [pc, #216]	; (80174a0 <atan+0x338>)
 80173c8:	4e36      	ldr	r6, [pc, #216]	; (80174a4 <atan+0x33c>)
 80173ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80173ce:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80173d2:	e9da 2300 	ldrd	r2, r3, [sl]
 80173d6:	f7e8 ff57 	bl	8000288 <__aeabi_dsub>
 80173da:	4622      	mov	r2, r4
 80173dc:	462b      	mov	r3, r5
 80173de:	f7e8 ff53 	bl	8000288 <__aeabi_dsub>
 80173e2:	4602      	mov	r2, r0
 80173e4:	460b      	mov	r3, r1
 80173e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80173ea:	f7e8 ff4d 	bl	8000288 <__aeabi_dsub>
 80173ee:	f1bb 0f00 	cmp.w	fp, #0
 80173f2:	4604      	mov	r4, r0
 80173f4:	460d      	mov	r5, r1
 80173f6:	f6bf aed6 	bge.w	80171a6 <atan+0x3e>
 80173fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80173fe:	461d      	mov	r5, r3
 8017400:	e6d1      	b.n	80171a6 <atan+0x3e>
 8017402:	a51d      	add	r5, pc, #116	; (adr r5, 8017478 <atan+0x310>)
 8017404:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017408:	e6cd      	b.n	80171a6 <atan+0x3e>
 801740a:	bf00      	nop
 801740c:	f3af 8000 	nop.w
 8017410:	54442d18 	.word	0x54442d18
 8017414:	bff921fb 	.word	0xbff921fb
 8017418:	8800759c 	.word	0x8800759c
 801741c:	7e37e43c 	.word	0x7e37e43c
 8017420:	e322da11 	.word	0xe322da11
 8017424:	3f90ad3a 	.word	0x3f90ad3a
 8017428:	24760deb 	.word	0x24760deb
 801742c:	3fa97b4b 	.word	0x3fa97b4b
 8017430:	a0d03d51 	.word	0xa0d03d51
 8017434:	3fb10d66 	.word	0x3fb10d66
 8017438:	c54c206e 	.word	0xc54c206e
 801743c:	3fb745cd 	.word	0x3fb745cd
 8017440:	920083ff 	.word	0x920083ff
 8017444:	3fc24924 	.word	0x3fc24924
 8017448:	5555550d 	.word	0x5555550d
 801744c:	3fd55555 	.word	0x3fd55555
 8017450:	2c6a6c2f 	.word	0x2c6a6c2f
 8017454:	bfa2b444 	.word	0xbfa2b444
 8017458:	52defd9a 	.word	0x52defd9a
 801745c:	3fadde2d 	.word	0x3fadde2d
 8017460:	af749a6d 	.word	0xaf749a6d
 8017464:	3fb3b0f2 	.word	0x3fb3b0f2
 8017468:	fe231671 	.word	0xfe231671
 801746c:	3fbc71c6 	.word	0x3fbc71c6
 8017470:	9998ebc4 	.word	0x9998ebc4
 8017474:	3fc99999 	.word	0x3fc99999
 8017478:	54442d18 	.word	0x54442d18
 801747c:	3ff921fb 	.word	0x3ff921fb
 8017480:	440fffff 	.word	0x440fffff
 8017484:	7ff00000 	.word	0x7ff00000
 8017488:	3fdbffff 	.word	0x3fdbffff
 801748c:	3ff00000 	.word	0x3ff00000
 8017490:	3ff2ffff 	.word	0x3ff2ffff
 8017494:	40038000 	.word	0x40038000
 8017498:	3ff80000 	.word	0x3ff80000
 801749c:	bff00000 	.word	0xbff00000
 80174a0:	0801ad38 	.word	0x0801ad38
 80174a4:	0801ad18 	.word	0x0801ad18

080174a8 <fabs>:
 80174a8:	ec51 0b10 	vmov	r0, r1, d0
 80174ac:	ee10 2a10 	vmov	r2, s0
 80174b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80174b4:	ec43 2b10 	vmov	d0, r2, r3
 80174b8:	4770      	bx	lr
	...

080174bc <atanf>:
 80174bc:	b538      	push	{r3, r4, r5, lr}
 80174be:	ee10 5a10 	vmov	r5, s0
 80174c2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80174c6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80174ca:	eef0 7a40 	vmov.f32	s15, s0
 80174ce:	db10      	blt.n	80174f2 <atanf+0x36>
 80174d0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80174d4:	dd04      	ble.n	80174e0 <atanf+0x24>
 80174d6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80174da:	eeb0 0a67 	vmov.f32	s0, s15
 80174de:	bd38      	pop	{r3, r4, r5, pc}
 80174e0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017618 <atanf+0x15c>
 80174e4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801761c <atanf+0x160>
 80174e8:	2d00      	cmp	r5, #0
 80174ea:	bfd8      	it	le
 80174ec:	eef0 7a40 	vmovle.f32	s15, s0
 80174f0:	e7f3      	b.n	80174da <atanf+0x1e>
 80174f2:	4b4b      	ldr	r3, [pc, #300]	; (8017620 <atanf+0x164>)
 80174f4:	429c      	cmp	r4, r3
 80174f6:	dc10      	bgt.n	801751a <atanf+0x5e>
 80174f8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80174fc:	da0a      	bge.n	8017514 <atanf+0x58>
 80174fe:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8017624 <atanf+0x168>
 8017502:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801750a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017512:	dce2      	bgt.n	80174da <atanf+0x1e>
 8017514:	f04f 33ff 	mov.w	r3, #4294967295
 8017518:	e013      	b.n	8017542 <atanf+0x86>
 801751a:	f000 f8a3 	bl	8017664 <fabsf>
 801751e:	4b42      	ldr	r3, [pc, #264]	; (8017628 <atanf+0x16c>)
 8017520:	429c      	cmp	r4, r3
 8017522:	dc4f      	bgt.n	80175c4 <atanf+0x108>
 8017524:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017528:	429c      	cmp	r4, r3
 801752a:	dc41      	bgt.n	80175b0 <atanf+0xf4>
 801752c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017530:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017534:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017538:	2300      	movs	r3, #0
 801753a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801753e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017542:	1c5a      	adds	r2, r3, #1
 8017544:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017548:	eddf 5a38 	vldr	s11, [pc, #224]	; 801762c <atanf+0x170>
 801754c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8017630 <atanf+0x174>
 8017550:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8017634 <atanf+0x178>
 8017554:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8017638 <atanf+0x17c>
 8017558:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801755c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017560:	eddf 5a36 	vldr	s11, [pc, #216]	; 801763c <atanf+0x180>
 8017564:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017568:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017640 <atanf+0x184>
 801756c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017570:	eddf 5a34 	vldr	s11, [pc, #208]	; 8017644 <atanf+0x188>
 8017574:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017578:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8017648 <atanf+0x18c>
 801757c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017580:	eddf 5a32 	vldr	s11, [pc, #200]	; 801764c <atanf+0x190>
 8017584:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017588:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8017650 <atanf+0x194>
 801758c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017590:	eddf 5a30 	vldr	s11, [pc, #192]	; 8017654 <atanf+0x198>
 8017594:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017598:	eea5 0a87 	vfma.f32	s0, s11, s14
 801759c:	ee20 0a07 	vmul.f32	s0, s0, s14
 80175a0:	eea6 0a26 	vfma.f32	s0, s12, s13
 80175a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80175a8:	d121      	bne.n	80175ee <atanf+0x132>
 80175aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80175ae:	e794      	b.n	80174da <atanf+0x1e>
 80175b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80175b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80175b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80175bc:	2301      	movs	r3, #1
 80175be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80175c2:	e7be      	b.n	8017542 <atanf+0x86>
 80175c4:	4b24      	ldr	r3, [pc, #144]	; (8017658 <atanf+0x19c>)
 80175c6:	429c      	cmp	r4, r3
 80175c8:	dc0b      	bgt.n	80175e2 <atanf+0x126>
 80175ca:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80175ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80175d2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80175d6:	2302      	movs	r3, #2
 80175d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80175dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80175e0:	e7af      	b.n	8017542 <atanf+0x86>
 80175e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80175e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80175ea:	2303      	movs	r3, #3
 80175ec:	e7a9      	b.n	8017542 <atanf+0x86>
 80175ee:	4a1b      	ldr	r2, [pc, #108]	; (801765c <atanf+0x1a0>)
 80175f0:	491b      	ldr	r1, [pc, #108]	; (8017660 <atanf+0x1a4>)
 80175f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80175f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80175fa:	ed93 7a00 	vldr	s14, [r3]
 80175fe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017602:	2d00      	cmp	r5, #0
 8017604:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017608:	ed92 0a00 	vldr	s0, [r2]
 801760c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017610:	bfb8      	it	lt
 8017612:	eef1 7a67 	vneglt.f32	s15, s15
 8017616:	e760      	b.n	80174da <atanf+0x1e>
 8017618:	3fc90fdb 	.word	0x3fc90fdb
 801761c:	bfc90fdb 	.word	0xbfc90fdb
 8017620:	3edfffff 	.word	0x3edfffff
 8017624:	7149f2ca 	.word	0x7149f2ca
 8017628:	3f97ffff 	.word	0x3f97ffff
 801762c:	3c8569d7 	.word	0x3c8569d7
 8017630:	3d4bda59 	.word	0x3d4bda59
 8017634:	bd15a221 	.word	0xbd15a221
 8017638:	be4ccccd 	.word	0xbe4ccccd
 801763c:	3d886b35 	.word	0x3d886b35
 8017640:	3dba2e6e 	.word	0x3dba2e6e
 8017644:	3e124925 	.word	0x3e124925
 8017648:	3eaaaaab 	.word	0x3eaaaaab
 801764c:	bd6ef16b 	.word	0xbd6ef16b
 8017650:	bd9d8795 	.word	0xbd9d8795
 8017654:	bde38e38 	.word	0xbde38e38
 8017658:	401bffff 	.word	0x401bffff
 801765c:	0801ad58 	.word	0x0801ad58
 8017660:	0801ad68 	.word	0x0801ad68

08017664 <fabsf>:
 8017664:	ee10 3a10 	vmov	r3, s0
 8017668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801766c:	ee00 3a10 	vmov	s0, r3
 8017670:	4770      	bx	lr
	...

08017674 <floorf>:
 8017674:	ee10 3a10 	vmov	r3, s0
 8017678:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801767c:	3a7f      	subs	r2, #127	; 0x7f
 801767e:	2a16      	cmp	r2, #22
 8017680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017684:	dc2a      	bgt.n	80176dc <floorf+0x68>
 8017686:	2a00      	cmp	r2, #0
 8017688:	da11      	bge.n	80176ae <floorf+0x3a>
 801768a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80176ec <floorf+0x78>
 801768e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017692:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801769a:	dd05      	ble.n	80176a8 <floorf+0x34>
 801769c:	2b00      	cmp	r3, #0
 801769e:	da23      	bge.n	80176e8 <floorf+0x74>
 80176a0:	4a13      	ldr	r2, [pc, #76]	; (80176f0 <floorf+0x7c>)
 80176a2:	2900      	cmp	r1, #0
 80176a4:	bf18      	it	ne
 80176a6:	4613      	movne	r3, r2
 80176a8:	ee00 3a10 	vmov	s0, r3
 80176ac:	4770      	bx	lr
 80176ae:	4911      	ldr	r1, [pc, #68]	; (80176f4 <floorf+0x80>)
 80176b0:	4111      	asrs	r1, r2
 80176b2:	420b      	tst	r3, r1
 80176b4:	d0fa      	beq.n	80176ac <floorf+0x38>
 80176b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80176ec <floorf+0x78>
 80176ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80176be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80176c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176c6:	ddef      	ble.n	80176a8 <floorf+0x34>
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	bfbe      	ittt	lt
 80176cc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80176d0:	fa40 f202 	asrlt.w	r2, r0, r2
 80176d4:	189b      	addlt	r3, r3, r2
 80176d6:	ea23 0301 	bic.w	r3, r3, r1
 80176da:	e7e5      	b.n	80176a8 <floorf+0x34>
 80176dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80176e0:	d3e4      	bcc.n	80176ac <floorf+0x38>
 80176e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80176e6:	4770      	bx	lr
 80176e8:	2300      	movs	r3, #0
 80176ea:	e7dd      	b.n	80176a8 <floorf+0x34>
 80176ec:	7149f2ca 	.word	0x7149f2ca
 80176f0:	bf800000 	.word	0xbf800000
 80176f4:	007fffff 	.word	0x007fffff

080176f8 <nanf>:
 80176f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017700 <nanf+0x8>
 80176fc:	4770      	bx	lr
 80176fe:	bf00      	nop
 8017700:	7fc00000 	.word	0x7fc00000

08017704 <scalbnf>:
 8017704:	ee10 3a10 	vmov	r3, s0
 8017708:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801770c:	d025      	beq.n	801775a <scalbnf+0x56>
 801770e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8017712:	d302      	bcc.n	801771a <scalbnf+0x16>
 8017714:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017718:	4770      	bx	lr
 801771a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801771e:	d122      	bne.n	8017766 <scalbnf+0x62>
 8017720:	4b2a      	ldr	r3, [pc, #168]	; (80177cc <scalbnf+0xc8>)
 8017722:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80177d0 <scalbnf+0xcc>
 8017726:	4298      	cmp	r0, r3
 8017728:	ee20 0a27 	vmul.f32	s0, s0, s15
 801772c:	db16      	blt.n	801775c <scalbnf+0x58>
 801772e:	ee10 3a10 	vmov	r3, s0
 8017732:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017736:	3a19      	subs	r2, #25
 8017738:	4402      	add	r2, r0
 801773a:	2afe      	cmp	r2, #254	; 0xfe
 801773c:	dd15      	ble.n	801776a <scalbnf+0x66>
 801773e:	ee10 3a10 	vmov	r3, s0
 8017742:	eddf 7a24 	vldr	s15, [pc, #144]	; 80177d4 <scalbnf+0xd0>
 8017746:	eddf 6a24 	vldr	s13, [pc, #144]	; 80177d8 <scalbnf+0xd4>
 801774a:	2b00      	cmp	r3, #0
 801774c:	eeb0 7a67 	vmov.f32	s14, s15
 8017750:	bfb8      	it	lt
 8017752:	eef0 7a66 	vmovlt.f32	s15, s13
 8017756:	ee27 0a27 	vmul.f32	s0, s14, s15
 801775a:	4770      	bx	lr
 801775c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80177dc <scalbnf+0xd8>
 8017760:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017764:	4770      	bx	lr
 8017766:	0dd2      	lsrs	r2, r2, #23
 8017768:	e7e6      	b.n	8017738 <scalbnf+0x34>
 801776a:	2a00      	cmp	r2, #0
 801776c:	dd06      	ble.n	801777c <scalbnf+0x78>
 801776e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017772:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017776:	ee00 3a10 	vmov	s0, r3
 801777a:	4770      	bx	lr
 801777c:	f112 0f16 	cmn.w	r2, #22
 8017780:	da1a      	bge.n	80177b8 <scalbnf+0xb4>
 8017782:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017786:	4298      	cmp	r0, r3
 8017788:	ee10 3a10 	vmov	r3, s0
 801778c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017790:	dd0a      	ble.n	80177a8 <scalbnf+0xa4>
 8017792:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80177d4 <scalbnf+0xd0>
 8017796:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80177d8 <scalbnf+0xd4>
 801779a:	eef0 7a40 	vmov.f32	s15, s0
 801779e:	2b00      	cmp	r3, #0
 80177a0:	bf18      	it	ne
 80177a2:	eeb0 0a47 	vmovne.f32	s0, s14
 80177a6:	e7db      	b.n	8017760 <scalbnf+0x5c>
 80177a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80177dc <scalbnf+0xd8>
 80177ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80177e0 <scalbnf+0xdc>
 80177b0:	eef0 7a40 	vmov.f32	s15, s0
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	e7f3      	b.n	80177a0 <scalbnf+0x9c>
 80177b8:	3219      	adds	r2, #25
 80177ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80177be:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80177c2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80177e4 <scalbnf+0xe0>
 80177c6:	ee07 3a10 	vmov	s14, r3
 80177ca:	e7c4      	b.n	8017756 <scalbnf+0x52>
 80177cc:	ffff3cb0 	.word	0xffff3cb0
 80177d0:	4c000000 	.word	0x4c000000
 80177d4:	7149f2ca 	.word	0x7149f2ca
 80177d8:	f149f2ca 	.word	0xf149f2ca
 80177dc:	0da24260 	.word	0x0da24260
 80177e0:	8da24260 	.word	0x8da24260
 80177e4:	33000000 	.word	0x33000000

080177e8 <abort>:
 80177e8:	b508      	push	{r3, lr}
 80177ea:	2006      	movs	r0, #6
 80177ec:	f000 fdd2 	bl	8018394 <raise>
 80177f0:	2001      	movs	r0, #1
 80177f2:	f7eb f881 	bl	80028f8 <_exit>
	...

080177f8 <__errno>:
 80177f8:	4b01      	ldr	r3, [pc, #4]	; (8017800 <__errno+0x8>)
 80177fa:	6818      	ldr	r0, [r3, #0]
 80177fc:	4770      	bx	lr
 80177fe:	bf00      	nop
 8017800:	200000f0 	.word	0x200000f0

08017804 <__libc_init_array>:
 8017804:	b570      	push	{r4, r5, r6, lr}
 8017806:	4d0d      	ldr	r5, [pc, #52]	; (801783c <__libc_init_array+0x38>)
 8017808:	4c0d      	ldr	r4, [pc, #52]	; (8017840 <__libc_init_array+0x3c>)
 801780a:	1b64      	subs	r4, r4, r5
 801780c:	10a4      	asrs	r4, r4, #2
 801780e:	2600      	movs	r6, #0
 8017810:	42a6      	cmp	r6, r4
 8017812:	d109      	bne.n	8017828 <__libc_init_array+0x24>
 8017814:	4d0b      	ldr	r5, [pc, #44]	; (8017844 <__libc_init_array+0x40>)
 8017816:	4c0c      	ldr	r4, [pc, #48]	; (8017848 <__libc_init_array+0x44>)
 8017818:	f002 ff02 	bl	801a620 <_init>
 801781c:	1b64      	subs	r4, r4, r5
 801781e:	10a4      	asrs	r4, r4, #2
 8017820:	2600      	movs	r6, #0
 8017822:	42a6      	cmp	r6, r4
 8017824:	d105      	bne.n	8017832 <__libc_init_array+0x2e>
 8017826:	bd70      	pop	{r4, r5, r6, pc}
 8017828:	f855 3b04 	ldr.w	r3, [r5], #4
 801782c:	4798      	blx	r3
 801782e:	3601      	adds	r6, #1
 8017830:	e7ee      	b.n	8017810 <__libc_init_array+0xc>
 8017832:	f855 3b04 	ldr.w	r3, [r5], #4
 8017836:	4798      	blx	r3
 8017838:	3601      	adds	r6, #1
 801783a:	e7f2      	b.n	8017822 <__libc_init_array+0x1e>
 801783c:	0801b164 	.word	0x0801b164
 8017840:	0801b164 	.word	0x0801b164
 8017844:	0801b164 	.word	0x0801b164
 8017848:	0801b168 	.word	0x0801b168

0801784c <malloc>:
 801784c:	4b02      	ldr	r3, [pc, #8]	; (8017858 <malloc+0xc>)
 801784e:	4601      	mov	r1, r0
 8017850:	6818      	ldr	r0, [r3, #0]
 8017852:	f000 b88b 	b.w	801796c <_malloc_r>
 8017856:	bf00      	nop
 8017858:	200000f0 	.word	0x200000f0

0801785c <free>:
 801785c:	4b02      	ldr	r3, [pc, #8]	; (8017868 <free+0xc>)
 801785e:	4601      	mov	r1, r0
 8017860:	6818      	ldr	r0, [r3, #0]
 8017862:	f000 b833 	b.w	80178cc <_free_r>
 8017866:	bf00      	nop
 8017868:	200000f0 	.word	0x200000f0

0801786c <memcpy>:
 801786c:	440a      	add	r2, r1
 801786e:	4291      	cmp	r1, r2
 8017870:	f100 33ff 	add.w	r3, r0, #4294967295
 8017874:	d100      	bne.n	8017878 <memcpy+0xc>
 8017876:	4770      	bx	lr
 8017878:	b510      	push	{r4, lr}
 801787a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801787e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017882:	4291      	cmp	r1, r2
 8017884:	d1f9      	bne.n	801787a <memcpy+0xe>
 8017886:	bd10      	pop	{r4, pc}

08017888 <memmove>:
 8017888:	4288      	cmp	r0, r1
 801788a:	b510      	push	{r4, lr}
 801788c:	eb01 0402 	add.w	r4, r1, r2
 8017890:	d902      	bls.n	8017898 <memmove+0x10>
 8017892:	4284      	cmp	r4, r0
 8017894:	4623      	mov	r3, r4
 8017896:	d807      	bhi.n	80178a8 <memmove+0x20>
 8017898:	1e43      	subs	r3, r0, #1
 801789a:	42a1      	cmp	r1, r4
 801789c:	d008      	beq.n	80178b0 <memmove+0x28>
 801789e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178a6:	e7f8      	b.n	801789a <memmove+0x12>
 80178a8:	4402      	add	r2, r0
 80178aa:	4601      	mov	r1, r0
 80178ac:	428a      	cmp	r2, r1
 80178ae:	d100      	bne.n	80178b2 <memmove+0x2a>
 80178b0:	bd10      	pop	{r4, pc}
 80178b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178ba:	e7f7      	b.n	80178ac <memmove+0x24>

080178bc <memset>:
 80178bc:	4402      	add	r2, r0
 80178be:	4603      	mov	r3, r0
 80178c0:	4293      	cmp	r3, r2
 80178c2:	d100      	bne.n	80178c6 <memset+0xa>
 80178c4:	4770      	bx	lr
 80178c6:	f803 1b01 	strb.w	r1, [r3], #1
 80178ca:	e7f9      	b.n	80178c0 <memset+0x4>

080178cc <_free_r>:
 80178cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80178ce:	2900      	cmp	r1, #0
 80178d0:	d048      	beq.n	8017964 <_free_r+0x98>
 80178d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80178d6:	9001      	str	r0, [sp, #4]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	f1a1 0404 	sub.w	r4, r1, #4
 80178de:	bfb8      	it	lt
 80178e0:	18e4      	addlt	r4, r4, r3
 80178e2:	f001 fd3f 	bl	8019364 <__malloc_lock>
 80178e6:	4a20      	ldr	r2, [pc, #128]	; (8017968 <_free_r+0x9c>)
 80178e8:	9801      	ldr	r0, [sp, #4]
 80178ea:	6813      	ldr	r3, [r2, #0]
 80178ec:	4615      	mov	r5, r2
 80178ee:	b933      	cbnz	r3, 80178fe <_free_r+0x32>
 80178f0:	6063      	str	r3, [r4, #4]
 80178f2:	6014      	str	r4, [r2, #0]
 80178f4:	b003      	add	sp, #12
 80178f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178fa:	f001 bd39 	b.w	8019370 <__malloc_unlock>
 80178fe:	42a3      	cmp	r3, r4
 8017900:	d90b      	bls.n	801791a <_free_r+0x4e>
 8017902:	6821      	ldr	r1, [r4, #0]
 8017904:	1862      	adds	r2, r4, r1
 8017906:	4293      	cmp	r3, r2
 8017908:	bf04      	itt	eq
 801790a:	681a      	ldreq	r2, [r3, #0]
 801790c:	685b      	ldreq	r3, [r3, #4]
 801790e:	6063      	str	r3, [r4, #4]
 8017910:	bf04      	itt	eq
 8017912:	1852      	addeq	r2, r2, r1
 8017914:	6022      	streq	r2, [r4, #0]
 8017916:	602c      	str	r4, [r5, #0]
 8017918:	e7ec      	b.n	80178f4 <_free_r+0x28>
 801791a:	461a      	mov	r2, r3
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	b10b      	cbz	r3, 8017924 <_free_r+0x58>
 8017920:	42a3      	cmp	r3, r4
 8017922:	d9fa      	bls.n	801791a <_free_r+0x4e>
 8017924:	6811      	ldr	r1, [r2, #0]
 8017926:	1855      	adds	r5, r2, r1
 8017928:	42a5      	cmp	r5, r4
 801792a:	d10b      	bne.n	8017944 <_free_r+0x78>
 801792c:	6824      	ldr	r4, [r4, #0]
 801792e:	4421      	add	r1, r4
 8017930:	1854      	adds	r4, r2, r1
 8017932:	42a3      	cmp	r3, r4
 8017934:	6011      	str	r1, [r2, #0]
 8017936:	d1dd      	bne.n	80178f4 <_free_r+0x28>
 8017938:	681c      	ldr	r4, [r3, #0]
 801793a:	685b      	ldr	r3, [r3, #4]
 801793c:	6053      	str	r3, [r2, #4]
 801793e:	4421      	add	r1, r4
 8017940:	6011      	str	r1, [r2, #0]
 8017942:	e7d7      	b.n	80178f4 <_free_r+0x28>
 8017944:	d902      	bls.n	801794c <_free_r+0x80>
 8017946:	230c      	movs	r3, #12
 8017948:	6003      	str	r3, [r0, #0]
 801794a:	e7d3      	b.n	80178f4 <_free_r+0x28>
 801794c:	6825      	ldr	r5, [r4, #0]
 801794e:	1961      	adds	r1, r4, r5
 8017950:	428b      	cmp	r3, r1
 8017952:	bf04      	itt	eq
 8017954:	6819      	ldreq	r1, [r3, #0]
 8017956:	685b      	ldreq	r3, [r3, #4]
 8017958:	6063      	str	r3, [r4, #4]
 801795a:	bf04      	itt	eq
 801795c:	1949      	addeq	r1, r1, r5
 801795e:	6021      	streq	r1, [r4, #0]
 8017960:	6054      	str	r4, [r2, #4]
 8017962:	e7c7      	b.n	80178f4 <_free_r+0x28>
 8017964:	b003      	add	sp, #12
 8017966:	bd30      	pop	{r4, r5, pc}
 8017968:	200011b8 	.word	0x200011b8

0801796c <_malloc_r>:
 801796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801796e:	1ccd      	adds	r5, r1, #3
 8017970:	f025 0503 	bic.w	r5, r5, #3
 8017974:	3508      	adds	r5, #8
 8017976:	2d0c      	cmp	r5, #12
 8017978:	bf38      	it	cc
 801797a:	250c      	movcc	r5, #12
 801797c:	2d00      	cmp	r5, #0
 801797e:	4606      	mov	r6, r0
 8017980:	db01      	blt.n	8017986 <_malloc_r+0x1a>
 8017982:	42a9      	cmp	r1, r5
 8017984:	d903      	bls.n	801798e <_malloc_r+0x22>
 8017986:	230c      	movs	r3, #12
 8017988:	6033      	str	r3, [r6, #0]
 801798a:	2000      	movs	r0, #0
 801798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801798e:	f001 fce9 	bl	8019364 <__malloc_lock>
 8017992:	4921      	ldr	r1, [pc, #132]	; (8017a18 <_malloc_r+0xac>)
 8017994:	680a      	ldr	r2, [r1, #0]
 8017996:	4614      	mov	r4, r2
 8017998:	b99c      	cbnz	r4, 80179c2 <_malloc_r+0x56>
 801799a:	4f20      	ldr	r7, [pc, #128]	; (8017a1c <_malloc_r+0xb0>)
 801799c:	683b      	ldr	r3, [r7, #0]
 801799e:	b923      	cbnz	r3, 80179aa <_malloc_r+0x3e>
 80179a0:	4621      	mov	r1, r4
 80179a2:	4630      	mov	r0, r6
 80179a4:	f000 fcbe 	bl	8018324 <_sbrk_r>
 80179a8:	6038      	str	r0, [r7, #0]
 80179aa:	4629      	mov	r1, r5
 80179ac:	4630      	mov	r0, r6
 80179ae:	f000 fcb9 	bl	8018324 <_sbrk_r>
 80179b2:	1c43      	adds	r3, r0, #1
 80179b4:	d123      	bne.n	80179fe <_malloc_r+0x92>
 80179b6:	230c      	movs	r3, #12
 80179b8:	6033      	str	r3, [r6, #0]
 80179ba:	4630      	mov	r0, r6
 80179bc:	f001 fcd8 	bl	8019370 <__malloc_unlock>
 80179c0:	e7e3      	b.n	801798a <_malloc_r+0x1e>
 80179c2:	6823      	ldr	r3, [r4, #0]
 80179c4:	1b5b      	subs	r3, r3, r5
 80179c6:	d417      	bmi.n	80179f8 <_malloc_r+0x8c>
 80179c8:	2b0b      	cmp	r3, #11
 80179ca:	d903      	bls.n	80179d4 <_malloc_r+0x68>
 80179cc:	6023      	str	r3, [r4, #0]
 80179ce:	441c      	add	r4, r3
 80179d0:	6025      	str	r5, [r4, #0]
 80179d2:	e004      	b.n	80179de <_malloc_r+0x72>
 80179d4:	6863      	ldr	r3, [r4, #4]
 80179d6:	42a2      	cmp	r2, r4
 80179d8:	bf0c      	ite	eq
 80179da:	600b      	streq	r3, [r1, #0]
 80179dc:	6053      	strne	r3, [r2, #4]
 80179de:	4630      	mov	r0, r6
 80179e0:	f001 fcc6 	bl	8019370 <__malloc_unlock>
 80179e4:	f104 000b 	add.w	r0, r4, #11
 80179e8:	1d23      	adds	r3, r4, #4
 80179ea:	f020 0007 	bic.w	r0, r0, #7
 80179ee:	1ac2      	subs	r2, r0, r3
 80179f0:	d0cc      	beq.n	801798c <_malloc_r+0x20>
 80179f2:	1a1b      	subs	r3, r3, r0
 80179f4:	50a3      	str	r3, [r4, r2]
 80179f6:	e7c9      	b.n	801798c <_malloc_r+0x20>
 80179f8:	4622      	mov	r2, r4
 80179fa:	6864      	ldr	r4, [r4, #4]
 80179fc:	e7cc      	b.n	8017998 <_malloc_r+0x2c>
 80179fe:	1cc4      	adds	r4, r0, #3
 8017a00:	f024 0403 	bic.w	r4, r4, #3
 8017a04:	42a0      	cmp	r0, r4
 8017a06:	d0e3      	beq.n	80179d0 <_malloc_r+0x64>
 8017a08:	1a21      	subs	r1, r4, r0
 8017a0a:	4630      	mov	r0, r6
 8017a0c:	f000 fc8a 	bl	8018324 <_sbrk_r>
 8017a10:	3001      	adds	r0, #1
 8017a12:	d1dd      	bne.n	80179d0 <_malloc_r+0x64>
 8017a14:	e7cf      	b.n	80179b6 <_malloc_r+0x4a>
 8017a16:	bf00      	nop
 8017a18:	200011b8 	.word	0x200011b8
 8017a1c:	200011bc 	.word	0x200011bc

08017a20 <__cvt>:
 8017a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a24:	ec55 4b10 	vmov	r4, r5, d0
 8017a28:	2d00      	cmp	r5, #0
 8017a2a:	460e      	mov	r6, r1
 8017a2c:	4619      	mov	r1, r3
 8017a2e:	462b      	mov	r3, r5
 8017a30:	bfbb      	ittet	lt
 8017a32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017a36:	461d      	movlt	r5, r3
 8017a38:	2300      	movge	r3, #0
 8017a3a:	232d      	movlt	r3, #45	; 0x2d
 8017a3c:	700b      	strb	r3, [r1, #0]
 8017a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017a44:	4691      	mov	r9, r2
 8017a46:	f023 0820 	bic.w	r8, r3, #32
 8017a4a:	bfbc      	itt	lt
 8017a4c:	4622      	movlt	r2, r4
 8017a4e:	4614      	movlt	r4, r2
 8017a50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017a54:	d005      	beq.n	8017a62 <__cvt+0x42>
 8017a56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017a5a:	d100      	bne.n	8017a5e <__cvt+0x3e>
 8017a5c:	3601      	adds	r6, #1
 8017a5e:	2102      	movs	r1, #2
 8017a60:	e000      	b.n	8017a64 <__cvt+0x44>
 8017a62:	2103      	movs	r1, #3
 8017a64:	ab03      	add	r3, sp, #12
 8017a66:	9301      	str	r3, [sp, #4]
 8017a68:	ab02      	add	r3, sp, #8
 8017a6a:	9300      	str	r3, [sp, #0]
 8017a6c:	ec45 4b10 	vmov	d0, r4, r5
 8017a70:	4653      	mov	r3, sl
 8017a72:	4632      	mov	r2, r6
 8017a74:	f000 fd8c 	bl	8018590 <_dtoa_r>
 8017a78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017a7c:	4607      	mov	r7, r0
 8017a7e:	d102      	bne.n	8017a86 <__cvt+0x66>
 8017a80:	f019 0f01 	tst.w	r9, #1
 8017a84:	d022      	beq.n	8017acc <__cvt+0xac>
 8017a86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017a8a:	eb07 0906 	add.w	r9, r7, r6
 8017a8e:	d110      	bne.n	8017ab2 <__cvt+0x92>
 8017a90:	783b      	ldrb	r3, [r7, #0]
 8017a92:	2b30      	cmp	r3, #48	; 0x30
 8017a94:	d10a      	bne.n	8017aac <__cvt+0x8c>
 8017a96:	2200      	movs	r2, #0
 8017a98:	2300      	movs	r3, #0
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	4629      	mov	r1, r5
 8017a9e:	f7e9 f813 	bl	8000ac8 <__aeabi_dcmpeq>
 8017aa2:	b918      	cbnz	r0, 8017aac <__cvt+0x8c>
 8017aa4:	f1c6 0601 	rsb	r6, r6, #1
 8017aa8:	f8ca 6000 	str.w	r6, [sl]
 8017aac:	f8da 3000 	ldr.w	r3, [sl]
 8017ab0:	4499      	add	r9, r3
 8017ab2:	2200      	movs	r2, #0
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	4629      	mov	r1, r5
 8017aba:	f7e9 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8017abe:	b108      	cbz	r0, 8017ac4 <__cvt+0xa4>
 8017ac0:	f8cd 900c 	str.w	r9, [sp, #12]
 8017ac4:	2230      	movs	r2, #48	; 0x30
 8017ac6:	9b03      	ldr	r3, [sp, #12]
 8017ac8:	454b      	cmp	r3, r9
 8017aca:	d307      	bcc.n	8017adc <__cvt+0xbc>
 8017acc:	9b03      	ldr	r3, [sp, #12]
 8017ace:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ad0:	1bdb      	subs	r3, r3, r7
 8017ad2:	4638      	mov	r0, r7
 8017ad4:	6013      	str	r3, [r2, #0]
 8017ad6:	b004      	add	sp, #16
 8017ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017adc:	1c59      	adds	r1, r3, #1
 8017ade:	9103      	str	r1, [sp, #12]
 8017ae0:	701a      	strb	r2, [r3, #0]
 8017ae2:	e7f0      	b.n	8017ac6 <__cvt+0xa6>

08017ae4 <__exponent>:
 8017ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	2900      	cmp	r1, #0
 8017aea:	bfb8      	it	lt
 8017aec:	4249      	neglt	r1, r1
 8017aee:	f803 2b02 	strb.w	r2, [r3], #2
 8017af2:	bfb4      	ite	lt
 8017af4:	222d      	movlt	r2, #45	; 0x2d
 8017af6:	222b      	movge	r2, #43	; 0x2b
 8017af8:	2909      	cmp	r1, #9
 8017afa:	7042      	strb	r2, [r0, #1]
 8017afc:	dd2a      	ble.n	8017b54 <__exponent+0x70>
 8017afe:	f10d 0407 	add.w	r4, sp, #7
 8017b02:	46a4      	mov	ip, r4
 8017b04:	270a      	movs	r7, #10
 8017b06:	46a6      	mov	lr, r4
 8017b08:	460a      	mov	r2, r1
 8017b0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8017b0e:	fb07 1516 	mls	r5, r7, r6, r1
 8017b12:	3530      	adds	r5, #48	; 0x30
 8017b14:	2a63      	cmp	r2, #99	; 0x63
 8017b16:	f104 34ff 	add.w	r4, r4, #4294967295
 8017b1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017b1e:	4631      	mov	r1, r6
 8017b20:	dcf1      	bgt.n	8017b06 <__exponent+0x22>
 8017b22:	3130      	adds	r1, #48	; 0x30
 8017b24:	f1ae 0502 	sub.w	r5, lr, #2
 8017b28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017b2c:	1c44      	adds	r4, r0, #1
 8017b2e:	4629      	mov	r1, r5
 8017b30:	4561      	cmp	r1, ip
 8017b32:	d30a      	bcc.n	8017b4a <__exponent+0x66>
 8017b34:	f10d 0209 	add.w	r2, sp, #9
 8017b38:	eba2 020e 	sub.w	r2, r2, lr
 8017b3c:	4565      	cmp	r5, ip
 8017b3e:	bf88      	it	hi
 8017b40:	2200      	movhi	r2, #0
 8017b42:	4413      	add	r3, r2
 8017b44:	1a18      	subs	r0, r3, r0
 8017b46:	b003      	add	sp, #12
 8017b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017b52:	e7ed      	b.n	8017b30 <__exponent+0x4c>
 8017b54:	2330      	movs	r3, #48	; 0x30
 8017b56:	3130      	adds	r1, #48	; 0x30
 8017b58:	7083      	strb	r3, [r0, #2]
 8017b5a:	70c1      	strb	r1, [r0, #3]
 8017b5c:	1d03      	adds	r3, r0, #4
 8017b5e:	e7f1      	b.n	8017b44 <__exponent+0x60>

08017b60 <_printf_float>:
 8017b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b64:	ed2d 8b02 	vpush	{d8}
 8017b68:	b08d      	sub	sp, #52	; 0x34
 8017b6a:	460c      	mov	r4, r1
 8017b6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017b70:	4616      	mov	r6, r2
 8017b72:	461f      	mov	r7, r3
 8017b74:	4605      	mov	r5, r0
 8017b76:	f001 fbed 	bl	8019354 <_localeconv_r>
 8017b7a:	f8d0 a000 	ldr.w	sl, [r0]
 8017b7e:	4650      	mov	r0, sl
 8017b80:	f7e8 fb76 	bl	8000270 <strlen>
 8017b84:	2300      	movs	r3, #0
 8017b86:	930a      	str	r3, [sp, #40]	; 0x28
 8017b88:	6823      	ldr	r3, [r4, #0]
 8017b8a:	9305      	str	r3, [sp, #20]
 8017b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8017b90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017b94:	3307      	adds	r3, #7
 8017b96:	f023 0307 	bic.w	r3, r3, #7
 8017b9a:	f103 0208 	add.w	r2, r3, #8
 8017b9e:	f8c8 2000 	str.w	r2, [r8]
 8017ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ba6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017baa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017bae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017bb2:	9307      	str	r3, [sp, #28]
 8017bb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8017bb8:	ee08 0a10 	vmov	s16, r0
 8017bbc:	4b9f      	ldr	r3, [pc, #636]	; (8017e3c <_printf_float+0x2dc>)
 8017bbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8017bc6:	f7e8 ffb1 	bl	8000b2c <__aeabi_dcmpun>
 8017bca:	bb88      	cbnz	r0, 8017c30 <_printf_float+0xd0>
 8017bcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017bd0:	4b9a      	ldr	r3, [pc, #616]	; (8017e3c <_printf_float+0x2dc>)
 8017bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8017bd6:	f7e8 ff8b 	bl	8000af0 <__aeabi_dcmple>
 8017bda:	bb48      	cbnz	r0, 8017c30 <_printf_float+0xd0>
 8017bdc:	2200      	movs	r2, #0
 8017bde:	2300      	movs	r3, #0
 8017be0:	4640      	mov	r0, r8
 8017be2:	4649      	mov	r1, r9
 8017be4:	f7e8 ff7a 	bl	8000adc <__aeabi_dcmplt>
 8017be8:	b110      	cbz	r0, 8017bf0 <_printf_float+0x90>
 8017bea:	232d      	movs	r3, #45	; 0x2d
 8017bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bf0:	4b93      	ldr	r3, [pc, #588]	; (8017e40 <_printf_float+0x2e0>)
 8017bf2:	4894      	ldr	r0, [pc, #592]	; (8017e44 <_printf_float+0x2e4>)
 8017bf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017bf8:	bf94      	ite	ls
 8017bfa:	4698      	movls	r8, r3
 8017bfc:	4680      	movhi	r8, r0
 8017bfe:	2303      	movs	r3, #3
 8017c00:	6123      	str	r3, [r4, #16]
 8017c02:	9b05      	ldr	r3, [sp, #20]
 8017c04:	f023 0204 	bic.w	r2, r3, #4
 8017c08:	6022      	str	r2, [r4, #0]
 8017c0a:	f04f 0900 	mov.w	r9, #0
 8017c0e:	9700      	str	r7, [sp, #0]
 8017c10:	4633      	mov	r3, r6
 8017c12:	aa0b      	add	r2, sp, #44	; 0x2c
 8017c14:	4621      	mov	r1, r4
 8017c16:	4628      	mov	r0, r5
 8017c18:	f000 f9d8 	bl	8017fcc <_printf_common>
 8017c1c:	3001      	adds	r0, #1
 8017c1e:	f040 8090 	bne.w	8017d42 <_printf_float+0x1e2>
 8017c22:	f04f 30ff 	mov.w	r0, #4294967295
 8017c26:	b00d      	add	sp, #52	; 0x34
 8017c28:	ecbd 8b02 	vpop	{d8}
 8017c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c30:	4642      	mov	r2, r8
 8017c32:	464b      	mov	r3, r9
 8017c34:	4640      	mov	r0, r8
 8017c36:	4649      	mov	r1, r9
 8017c38:	f7e8 ff78 	bl	8000b2c <__aeabi_dcmpun>
 8017c3c:	b140      	cbz	r0, 8017c50 <_printf_float+0xf0>
 8017c3e:	464b      	mov	r3, r9
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	bfbc      	itt	lt
 8017c44:	232d      	movlt	r3, #45	; 0x2d
 8017c46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017c4a:	487f      	ldr	r0, [pc, #508]	; (8017e48 <_printf_float+0x2e8>)
 8017c4c:	4b7f      	ldr	r3, [pc, #508]	; (8017e4c <_printf_float+0x2ec>)
 8017c4e:	e7d1      	b.n	8017bf4 <_printf_float+0x94>
 8017c50:	6863      	ldr	r3, [r4, #4]
 8017c52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017c56:	9206      	str	r2, [sp, #24]
 8017c58:	1c5a      	adds	r2, r3, #1
 8017c5a:	d13f      	bne.n	8017cdc <_printf_float+0x17c>
 8017c5c:	2306      	movs	r3, #6
 8017c5e:	6063      	str	r3, [r4, #4]
 8017c60:	9b05      	ldr	r3, [sp, #20]
 8017c62:	6861      	ldr	r1, [r4, #4]
 8017c64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017c68:	2300      	movs	r3, #0
 8017c6a:	9303      	str	r3, [sp, #12]
 8017c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8017c6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017c72:	ab09      	add	r3, sp, #36	; 0x24
 8017c74:	ec49 8b10 	vmov	d0, r8, r9
 8017c78:	9300      	str	r3, [sp, #0]
 8017c7a:	6022      	str	r2, [r4, #0]
 8017c7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017c80:	4628      	mov	r0, r5
 8017c82:	f7ff fecd 	bl	8017a20 <__cvt>
 8017c86:	9b06      	ldr	r3, [sp, #24]
 8017c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017c8a:	2b47      	cmp	r3, #71	; 0x47
 8017c8c:	4680      	mov	r8, r0
 8017c8e:	d108      	bne.n	8017ca2 <_printf_float+0x142>
 8017c90:	1cc8      	adds	r0, r1, #3
 8017c92:	db02      	blt.n	8017c9a <_printf_float+0x13a>
 8017c94:	6863      	ldr	r3, [r4, #4]
 8017c96:	4299      	cmp	r1, r3
 8017c98:	dd41      	ble.n	8017d1e <_printf_float+0x1be>
 8017c9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8017c9e:	fa5f fb8b 	uxtb.w	fp, fp
 8017ca2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017ca6:	d820      	bhi.n	8017cea <_printf_float+0x18a>
 8017ca8:	3901      	subs	r1, #1
 8017caa:	465a      	mov	r2, fp
 8017cac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017cb0:	9109      	str	r1, [sp, #36]	; 0x24
 8017cb2:	f7ff ff17 	bl	8017ae4 <__exponent>
 8017cb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017cb8:	1813      	adds	r3, r2, r0
 8017cba:	2a01      	cmp	r2, #1
 8017cbc:	4681      	mov	r9, r0
 8017cbe:	6123      	str	r3, [r4, #16]
 8017cc0:	dc02      	bgt.n	8017cc8 <_printf_float+0x168>
 8017cc2:	6822      	ldr	r2, [r4, #0]
 8017cc4:	07d2      	lsls	r2, r2, #31
 8017cc6:	d501      	bpl.n	8017ccc <_printf_float+0x16c>
 8017cc8:	3301      	adds	r3, #1
 8017cca:	6123      	str	r3, [r4, #16]
 8017ccc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d09c      	beq.n	8017c0e <_printf_float+0xae>
 8017cd4:	232d      	movs	r3, #45	; 0x2d
 8017cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cda:	e798      	b.n	8017c0e <_printf_float+0xae>
 8017cdc:	9a06      	ldr	r2, [sp, #24]
 8017cde:	2a47      	cmp	r2, #71	; 0x47
 8017ce0:	d1be      	bne.n	8017c60 <_printf_float+0x100>
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d1bc      	bne.n	8017c60 <_printf_float+0x100>
 8017ce6:	2301      	movs	r3, #1
 8017ce8:	e7b9      	b.n	8017c5e <_printf_float+0xfe>
 8017cea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017cee:	d118      	bne.n	8017d22 <_printf_float+0x1c2>
 8017cf0:	2900      	cmp	r1, #0
 8017cf2:	6863      	ldr	r3, [r4, #4]
 8017cf4:	dd0b      	ble.n	8017d0e <_printf_float+0x1ae>
 8017cf6:	6121      	str	r1, [r4, #16]
 8017cf8:	b913      	cbnz	r3, 8017d00 <_printf_float+0x1a0>
 8017cfa:	6822      	ldr	r2, [r4, #0]
 8017cfc:	07d0      	lsls	r0, r2, #31
 8017cfe:	d502      	bpl.n	8017d06 <_printf_float+0x1a6>
 8017d00:	3301      	adds	r3, #1
 8017d02:	440b      	add	r3, r1
 8017d04:	6123      	str	r3, [r4, #16]
 8017d06:	65a1      	str	r1, [r4, #88]	; 0x58
 8017d08:	f04f 0900 	mov.w	r9, #0
 8017d0c:	e7de      	b.n	8017ccc <_printf_float+0x16c>
 8017d0e:	b913      	cbnz	r3, 8017d16 <_printf_float+0x1b6>
 8017d10:	6822      	ldr	r2, [r4, #0]
 8017d12:	07d2      	lsls	r2, r2, #31
 8017d14:	d501      	bpl.n	8017d1a <_printf_float+0x1ba>
 8017d16:	3302      	adds	r3, #2
 8017d18:	e7f4      	b.n	8017d04 <_printf_float+0x1a4>
 8017d1a:	2301      	movs	r3, #1
 8017d1c:	e7f2      	b.n	8017d04 <_printf_float+0x1a4>
 8017d1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d24:	4299      	cmp	r1, r3
 8017d26:	db05      	blt.n	8017d34 <_printf_float+0x1d4>
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	6121      	str	r1, [r4, #16]
 8017d2c:	07d8      	lsls	r0, r3, #31
 8017d2e:	d5ea      	bpl.n	8017d06 <_printf_float+0x1a6>
 8017d30:	1c4b      	adds	r3, r1, #1
 8017d32:	e7e7      	b.n	8017d04 <_printf_float+0x1a4>
 8017d34:	2900      	cmp	r1, #0
 8017d36:	bfd4      	ite	le
 8017d38:	f1c1 0202 	rsble	r2, r1, #2
 8017d3c:	2201      	movgt	r2, #1
 8017d3e:	4413      	add	r3, r2
 8017d40:	e7e0      	b.n	8017d04 <_printf_float+0x1a4>
 8017d42:	6823      	ldr	r3, [r4, #0]
 8017d44:	055a      	lsls	r2, r3, #21
 8017d46:	d407      	bmi.n	8017d58 <_printf_float+0x1f8>
 8017d48:	6923      	ldr	r3, [r4, #16]
 8017d4a:	4642      	mov	r2, r8
 8017d4c:	4631      	mov	r1, r6
 8017d4e:	4628      	mov	r0, r5
 8017d50:	47b8      	blx	r7
 8017d52:	3001      	adds	r0, #1
 8017d54:	d12c      	bne.n	8017db0 <_printf_float+0x250>
 8017d56:	e764      	b.n	8017c22 <_printf_float+0xc2>
 8017d58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017d5c:	f240 80e0 	bls.w	8017f20 <_printf_float+0x3c0>
 8017d60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017d64:	2200      	movs	r2, #0
 8017d66:	2300      	movs	r3, #0
 8017d68:	f7e8 feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d034      	beq.n	8017dda <_printf_float+0x27a>
 8017d70:	4a37      	ldr	r2, [pc, #220]	; (8017e50 <_printf_float+0x2f0>)
 8017d72:	2301      	movs	r3, #1
 8017d74:	4631      	mov	r1, r6
 8017d76:	4628      	mov	r0, r5
 8017d78:	47b8      	blx	r7
 8017d7a:	3001      	adds	r0, #1
 8017d7c:	f43f af51 	beq.w	8017c22 <_printf_float+0xc2>
 8017d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d84:	429a      	cmp	r2, r3
 8017d86:	db02      	blt.n	8017d8e <_printf_float+0x22e>
 8017d88:	6823      	ldr	r3, [r4, #0]
 8017d8a:	07d8      	lsls	r0, r3, #31
 8017d8c:	d510      	bpl.n	8017db0 <_printf_float+0x250>
 8017d8e:	ee18 3a10 	vmov	r3, s16
 8017d92:	4652      	mov	r2, sl
 8017d94:	4631      	mov	r1, r6
 8017d96:	4628      	mov	r0, r5
 8017d98:	47b8      	blx	r7
 8017d9a:	3001      	adds	r0, #1
 8017d9c:	f43f af41 	beq.w	8017c22 <_printf_float+0xc2>
 8017da0:	f04f 0800 	mov.w	r8, #0
 8017da4:	f104 091a 	add.w	r9, r4, #26
 8017da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017daa:	3b01      	subs	r3, #1
 8017dac:	4543      	cmp	r3, r8
 8017dae:	dc09      	bgt.n	8017dc4 <_printf_float+0x264>
 8017db0:	6823      	ldr	r3, [r4, #0]
 8017db2:	079b      	lsls	r3, r3, #30
 8017db4:	f100 8105 	bmi.w	8017fc2 <_printf_float+0x462>
 8017db8:	68e0      	ldr	r0, [r4, #12]
 8017dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dbc:	4298      	cmp	r0, r3
 8017dbe:	bfb8      	it	lt
 8017dc0:	4618      	movlt	r0, r3
 8017dc2:	e730      	b.n	8017c26 <_printf_float+0xc6>
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	464a      	mov	r2, r9
 8017dc8:	4631      	mov	r1, r6
 8017dca:	4628      	mov	r0, r5
 8017dcc:	47b8      	blx	r7
 8017dce:	3001      	adds	r0, #1
 8017dd0:	f43f af27 	beq.w	8017c22 <_printf_float+0xc2>
 8017dd4:	f108 0801 	add.w	r8, r8, #1
 8017dd8:	e7e6      	b.n	8017da8 <_printf_float+0x248>
 8017dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	dc39      	bgt.n	8017e54 <_printf_float+0x2f4>
 8017de0:	4a1b      	ldr	r2, [pc, #108]	; (8017e50 <_printf_float+0x2f0>)
 8017de2:	2301      	movs	r3, #1
 8017de4:	4631      	mov	r1, r6
 8017de6:	4628      	mov	r0, r5
 8017de8:	47b8      	blx	r7
 8017dea:	3001      	adds	r0, #1
 8017dec:	f43f af19 	beq.w	8017c22 <_printf_float+0xc2>
 8017df0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017df4:	4313      	orrs	r3, r2
 8017df6:	d102      	bne.n	8017dfe <_printf_float+0x29e>
 8017df8:	6823      	ldr	r3, [r4, #0]
 8017dfa:	07d9      	lsls	r1, r3, #31
 8017dfc:	d5d8      	bpl.n	8017db0 <_printf_float+0x250>
 8017dfe:	ee18 3a10 	vmov	r3, s16
 8017e02:	4652      	mov	r2, sl
 8017e04:	4631      	mov	r1, r6
 8017e06:	4628      	mov	r0, r5
 8017e08:	47b8      	blx	r7
 8017e0a:	3001      	adds	r0, #1
 8017e0c:	f43f af09 	beq.w	8017c22 <_printf_float+0xc2>
 8017e10:	f04f 0900 	mov.w	r9, #0
 8017e14:	f104 0a1a 	add.w	sl, r4, #26
 8017e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e1a:	425b      	negs	r3, r3
 8017e1c:	454b      	cmp	r3, r9
 8017e1e:	dc01      	bgt.n	8017e24 <_printf_float+0x2c4>
 8017e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e22:	e792      	b.n	8017d4a <_printf_float+0x1ea>
 8017e24:	2301      	movs	r3, #1
 8017e26:	4652      	mov	r2, sl
 8017e28:	4631      	mov	r1, r6
 8017e2a:	4628      	mov	r0, r5
 8017e2c:	47b8      	blx	r7
 8017e2e:	3001      	adds	r0, #1
 8017e30:	f43f aef7 	beq.w	8017c22 <_printf_float+0xc2>
 8017e34:	f109 0901 	add.w	r9, r9, #1
 8017e38:	e7ee      	b.n	8017e18 <_printf_float+0x2b8>
 8017e3a:	bf00      	nop
 8017e3c:	7fefffff 	.word	0x7fefffff
 8017e40:	0801ad7c 	.word	0x0801ad7c
 8017e44:	0801ad80 	.word	0x0801ad80
 8017e48:	0801ad88 	.word	0x0801ad88
 8017e4c:	0801ad84 	.word	0x0801ad84
 8017e50:	0801ad8c 	.word	0x0801ad8c
 8017e54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	bfa8      	it	ge
 8017e5c:	461a      	movge	r2, r3
 8017e5e:	2a00      	cmp	r2, #0
 8017e60:	4691      	mov	r9, r2
 8017e62:	dc37      	bgt.n	8017ed4 <_printf_float+0x374>
 8017e64:	f04f 0b00 	mov.w	fp, #0
 8017e68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017e6c:	f104 021a 	add.w	r2, r4, #26
 8017e70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017e72:	9305      	str	r3, [sp, #20]
 8017e74:	eba3 0309 	sub.w	r3, r3, r9
 8017e78:	455b      	cmp	r3, fp
 8017e7a:	dc33      	bgt.n	8017ee4 <_printf_float+0x384>
 8017e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e80:	429a      	cmp	r2, r3
 8017e82:	db3b      	blt.n	8017efc <_printf_float+0x39c>
 8017e84:	6823      	ldr	r3, [r4, #0]
 8017e86:	07da      	lsls	r2, r3, #31
 8017e88:	d438      	bmi.n	8017efc <_printf_float+0x39c>
 8017e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e8c:	9b05      	ldr	r3, [sp, #20]
 8017e8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e90:	1ad3      	subs	r3, r2, r3
 8017e92:	eba2 0901 	sub.w	r9, r2, r1
 8017e96:	4599      	cmp	r9, r3
 8017e98:	bfa8      	it	ge
 8017e9a:	4699      	movge	r9, r3
 8017e9c:	f1b9 0f00 	cmp.w	r9, #0
 8017ea0:	dc35      	bgt.n	8017f0e <_printf_float+0x3ae>
 8017ea2:	f04f 0800 	mov.w	r8, #0
 8017ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017eaa:	f104 0a1a 	add.w	sl, r4, #26
 8017eae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017eb2:	1a9b      	subs	r3, r3, r2
 8017eb4:	eba3 0309 	sub.w	r3, r3, r9
 8017eb8:	4543      	cmp	r3, r8
 8017eba:	f77f af79 	ble.w	8017db0 <_printf_float+0x250>
 8017ebe:	2301      	movs	r3, #1
 8017ec0:	4652      	mov	r2, sl
 8017ec2:	4631      	mov	r1, r6
 8017ec4:	4628      	mov	r0, r5
 8017ec6:	47b8      	blx	r7
 8017ec8:	3001      	adds	r0, #1
 8017eca:	f43f aeaa 	beq.w	8017c22 <_printf_float+0xc2>
 8017ece:	f108 0801 	add.w	r8, r8, #1
 8017ed2:	e7ec      	b.n	8017eae <_printf_float+0x34e>
 8017ed4:	4613      	mov	r3, r2
 8017ed6:	4631      	mov	r1, r6
 8017ed8:	4642      	mov	r2, r8
 8017eda:	4628      	mov	r0, r5
 8017edc:	47b8      	blx	r7
 8017ede:	3001      	adds	r0, #1
 8017ee0:	d1c0      	bne.n	8017e64 <_printf_float+0x304>
 8017ee2:	e69e      	b.n	8017c22 <_printf_float+0xc2>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	4631      	mov	r1, r6
 8017ee8:	4628      	mov	r0, r5
 8017eea:	9205      	str	r2, [sp, #20]
 8017eec:	47b8      	blx	r7
 8017eee:	3001      	adds	r0, #1
 8017ef0:	f43f ae97 	beq.w	8017c22 <_printf_float+0xc2>
 8017ef4:	9a05      	ldr	r2, [sp, #20]
 8017ef6:	f10b 0b01 	add.w	fp, fp, #1
 8017efa:	e7b9      	b.n	8017e70 <_printf_float+0x310>
 8017efc:	ee18 3a10 	vmov	r3, s16
 8017f00:	4652      	mov	r2, sl
 8017f02:	4631      	mov	r1, r6
 8017f04:	4628      	mov	r0, r5
 8017f06:	47b8      	blx	r7
 8017f08:	3001      	adds	r0, #1
 8017f0a:	d1be      	bne.n	8017e8a <_printf_float+0x32a>
 8017f0c:	e689      	b.n	8017c22 <_printf_float+0xc2>
 8017f0e:	9a05      	ldr	r2, [sp, #20]
 8017f10:	464b      	mov	r3, r9
 8017f12:	4442      	add	r2, r8
 8017f14:	4631      	mov	r1, r6
 8017f16:	4628      	mov	r0, r5
 8017f18:	47b8      	blx	r7
 8017f1a:	3001      	adds	r0, #1
 8017f1c:	d1c1      	bne.n	8017ea2 <_printf_float+0x342>
 8017f1e:	e680      	b.n	8017c22 <_printf_float+0xc2>
 8017f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f22:	2a01      	cmp	r2, #1
 8017f24:	dc01      	bgt.n	8017f2a <_printf_float+0x3ca>
 8017f26:	07db      	lsls	r3, r3, #31
 8017f28:	d538      	bpl.n	8017f9c <_printf_float+0x43c>
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	4642      	mov	r2, r8
 8017f2e:	4631      	mov	r1, r6
 8017f30:	4628      	mov	r0, r5
 8017f32:	47b8      	blx	r7
 8017f34:	3001      	adds	r0, #1
 8017f36:	f43f ae74 	beq.w	8017c22 <_printf_float+0xc2>
 8017f3a:	ee18 3a10 	vmov	r3, s16
 8017f3e:	4652      	mov	r2, sl
 8017f40:	4631      	mov	r1, r6
 8017f42:	4628      	mov	r0, r5
 8017f44:	47b8      	blx	r7
 8017f46:	3001      	adds	r0, #1
 8017f48:	f43f ae6b 	beq.w	8017c22 <_printf_float+0xc2>
 8017f4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017f50:	2200      	movs	r2, #0
 8017f52:	2300      	movs	r3, #0
 8017f54:	f7e8 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f58:	b9d8      	cbnz	r0, 8017f92 <_printf_float+0x432>
 8017f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f5c:	f108 0201 	add.w	r2, r8, #1
 8017f60:	3b01      	subs	r3, #1
 8017f62:	4631      	mov	r1, r6
 8017f64:	4628      	mov	r0, r5
 8017f66:	47b8      	blx	r7
 8017f68:	3001      	adds	r0, #1
 8017f6a:	d10e      	bne.n	8017f8a <_printf_float+0x42a>
 8017f6c:	e659      	b.n	8017c22 <_printf_float+0xc2>
 8017f6e:	2301      	movs	r3, #1
 8017f70:	4652      	mov	r2, sl
 8017f72:	4631      	mov	r1, r6
 8017f74:	4628      	mov	r0, r5
 8017f76:	47b8      	blx	r7
 8017f78:	3001      	adds	r0, #1
 8017f7a:	f43f ae52 	beq.w	8017c22 <_printf_float+0xc2>
 8017f7e:	f108 0801 	add.w	r8, r8, #1
 8017f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f84:	3b01      	subs	r3, #1
 8017f86:	4543      	cmp	r3, r8
 8017f88:	dcf1      	bgt.n	8017f6e <_printf_float+0x40e>
 8017f8a:	464b      	mov	r3, r9
 8017f8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017f90:	e6dc      	b.n	8017d4c <_printf_float+0x1ec>
 8017f92:	f04f 0800 	mov.w	r8, #0
 8017f96:	f104 0a1a 	add.w	sl, r4, #26
 8017f9a:	e7f2      	b.n	8017f82 <_printf_float+0x422>
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	4642      	mov	r2, r8
 8017fa0:	e7df      	b.n	8017f62 <_printf_float+0x402>
 8017fa2:	2301      	movs	r3, #1
 8017fa4:	464a      	mov	r2, r9
 8017fa6:	4631      	mov	r1, r6
 8017fa8:	4628      	mov	r0, r5
 8017faa:	47b8      	blx	r7
 8017fac:	3001      	adds	r0, #1
 8017fae:	f43f ae38 	beq.w	8017c22 <_printf_float+0xc2>
 8017fb2:	f108 0801 	add.w	r8, r8, #1
 8017fb6:	68e3      	ldr	r3, [r4, #12]
 8017fb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017fba:	1a5b      	subs	r3, r3, r1
 8017fbc:	4543      	cmp	r3, r8
 8017fbe:	dcf0      	bgt.n	8017fa2 <_printf_float+0x442>
 8017fc0:	e6fa      	b.n	8017db8 <_printf_float+0x258>
 8017fc2:	f04f 0800 	mov.w	r8, #0
 8017fc6:	f104 0919 	add.w	r9, r4, #25
 8017fca:	e7f4      	b.n	8017fb6 <_printf_float+0x456>

08017fcc <_printf_common>:
 8017fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd0:	4616      	mov	r6, r2
 8017fd2:	4699      	mov	r9, r3
 8017fd4:	688a      	ldr	r2, [r1, #8]
 8017fd6:	690b      	ldr	r3, [r1, #16]
 8017fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017fdc:	4293      	cmp	r3, r2
 8017fde:	bfb8      	it	lt
 8017fe0:	4613      	movlt	r3, r2
 8017fe2:	6033      	str	r3, [r6, #0]
 8017fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017fe8:	4607      	mov	r7, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	b10a      	cbz	r2, 8017ff2 <_printf_common+0x26>
 8017fee:	3301      	adds	r3, #1
 8017ff0:	6033      	str	r3, [r6, #0]
 8017ff2:	6823      	ldr	r3, [r4, #0]
 8017ff4:	0699      	lsls	r1, r3, #26
 8017ff6:	bf42      	ittt	mi
 8017ff8:	6833      	ldrmi	r3, [r6, #0]
 8017ffa:	3302      	addmi	r3, #2
 8017ffc:	6033      	strmi	r3, [r6, #0]
 8017ffe:	6825      	ldr	r5, [r4, #0]
 8018000:	f015 0506 	ands.w	r5, r5, #6
 8018004:	d106      	bne.n	8018014 <_printf_common+0x48>
 8018006:	f104 0a19 	add.w	sl, r4, #25
 801800a:	68e3      	ldr	r3, [r4, #12]
 801800c:	6832      	ldr	r2, [r6, #0]
 801800e:	1a9b      	subs	r3, r3, r2
 8018010:	42ab      	cmp	r3, r5
 8018012:	dc26      	bgt.n	8018062 <_printf_common+0x96>
 8018014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018018:	1e13      	subs	r3, r2, #0
 801801a:	6822      	ldr	r2, [r4, #0]
 801801c:	bf18      	it	ne
 801801e:	2301      	movne	r3, #1
 8018020:	0692      	lsls	r2, r2, #26
 8018022:	d42b      	bmi.n	801807c <_printf_common+0xb0>
 8018024:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018028:	4649      	mov	r1, r9
 801802a:	4638      	mov	r0, r7
 801802c:	47c0      	blx	r8
 801802e:	3001      	adds	r0, #1
 8018030:	d01e      	beq.n	8018070 <_printf_common+0xa4>
 8018032:	6823      	ldr	r3, [r4, #0]
 8018034:	68e5      	ldr	r5, [r4, #12]
 8018036:	6832      	ldr	r2, [r6, #0]
 8018038:	f003 0306 	and.w	r3, r3, #6
 801803c:	2b04      	cmp	r3, #4
 801803e:	bf08      	it	eq
 8018040:	1aad      	subeq	r5, r5, r2
 8018042:	68a3      	ldr	r3, [r4, #8]
 8018044:	6922      	ldr	r2, [r4, #16]
 8018046:	bf0c      	ite	eq
 8018048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801804c:	2500      	movne	r5, #0
 801804e:	4293      	cmp	r3, r2
 8018050:	bfc4      	itt	gt
 8018052:	1a9b      	subgt	r3, r3, r2
 8018054:	18ed      	addgt	r5, r5, r3
 8018056:	2600      	movs	r6, #0
 8018058:	341a      	adds	r4, #26
 801805a:	42b5      	cmp	r5, r6
 801805c:	d11a      	bne.n	8018094 <_printf_common+0xc8>
 801805e:	2000      	movs	r0, #0
 8018060:	e008      	b.n	8018074 <_printf_common+0xa8>
 8018062:	2301      	movs	r3, #1
 8018064:	4652      	mov	r2, sl
 8018066:	4649      	mov	r1, r9
 8018068:	4638      	mov	r0, r7
 801806a:	47c0      	blx	r8
 801806c:	3001      	adds	r0, #1
 801806e:	d103      	bne.n	8018078 <_printf_common+0xac>
 8018070:	f04f 30ff 	mov.w	r0, #4294967295
 8018074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018078:	3501      	adds	r5, #1
 801807a:	e7c6      	b.n	801800a <_printf_common+0x3e>
 801807c:	18e1      	adds	r1, r4, r3
 801807e:	1c5a      	adds	r2, r3, #1
 8018080:	2030      	movs	r0, #48	; 0x30
 8018082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018086:	4422      	add	r2, r4
 8018088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801808c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018090:	3302      	adds	r3, #2
 8018092:	e7c7      	b.n	8018024 <_printf_common+0x58>
 8018094:	2301      	movs	r3, #1
 8018096:	4622      	mov	r2, r4
 8018098:	4649      	mov	r1, r9
 801809a:	4638      	mov	r0, r7
 801809c:	47c0      	blx	r8
 801809e:	3001      	adds	r0, #1
 80180a0:	d0e6      	beq.n	8018070 <_printf_common+0xa4>
 80180a2:	3601      	adds	r6, #1
 80180a4:	e7d9      	b.n	801805a <_printf_common+0x8e>
	...

080180a8 <_printf_i>:
 80180a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180ac:	460c      	mov	r4, r1
 80180ae:	4691      	mov	r9, r2
 80180b0:	7e27      	ldrb	r7, [r4, #24]
 80180b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80180b4:	2f78      	cmp	r7, #120	; 0x78
 80180b6:	4680      	mov	r8, r0
 80180b8:	469a      	mov	sl, r3
 80180ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180be:	d807      	bhi.n	80180d0 <_printf_i+0x28>
 80180c0:	2f62      	cmp	r7, #98	; 0x62
 80180c2:	d80a      	bhi.n	80180da <_printf_i+0x32>
 80180c4:	2f00      	cmp	r7, #0
 80180c6:	f000 80d8 	beq.w	801827a <_printf_i+0x1d2>
 80180ca:	2f58      	cmp	r7, #88	; 0x58
 80180cc:	f000 80a3 	beq.w	8018216 <_printf_i+0x16e>
 80180d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80180d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80180d8:	e03a      	b.n	8018150 <_printf_i+0xa8>
 80180da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80180de:	2b15      	cmp	r3, #21
 80180e0:	d8f6      	bhi.n	80180d0 <_printf_i+0x28>
 80180e2:	a001      	add	r0, pc, #4	; (adr r0, 80180e8 <_printf_i+0x40>)
 80180e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80180e8:	08018141 	.word	0x08018141
 80180ec:	08018155 	.word	0x08018155
 80180f0:	080180d1 	.word	0x080180d1
 80180f4:	080180d1 	.word	0x080180d1
 80180f8:	080180d1 	.word	0x080180d1
 80180fc:	080180d1 	.word	0x080180d1
 8018100:	08018155 	.word	0x08018155
 8018104:	080180d1 	.word	0x080180d1
 8018108:	080180d1 	.word	0x080180d1
 801810c:	080180d1 	.word	0x080180d1
 8018110:	080180d1 	.word	0x080180d1
 8018114:	08018261 	.word	0x08018261
 8018118:	08018185 	.word	0x08018185
 801811c:	08018243 	.word	0x08018243
 8018120:	080180d1 	.word	0x080180d1
 8018124:	080180d1 	.word	0x080180d1
 8018128:	08018283 	.word	0x08018283
 801812c:	080180d1 	.word	0x080180d1
 8018130:	08018185 	.word	0x08018185
 8018134:	080180d1 	.word	0x080180d1
 8018138:	080180d1 	.word	0x080180d1
 801813c:	0801824b 	.word	0x0801824b
 8018140:	680b      	ldr	r3, [r1, #0]
 8018142:	1d1a      	adds	r2, r3, #4
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	600a      	str	r2, [r1, #0]
 8018148:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801814c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018150:	2301      	movs	r3, #1
 8018152:	e0a3      	b.n	801829c <_printf_i+0x1f4>
 8018154:	6825      	ldr	r5, [r4, #0]
 8018156:	6808      	ldr	r0, [r1, #0]
 8018158:	062e      	lsls	r6, r5, #24
 801815a:	f100 0304 	add.w	r3, r0, #4
 801815e:	d50a      	bpl.n	8018176 <_printf_i+0xce>
 8018160:	6805      	ldr	r5, [r0, #0]
 8018162:	600b      	str	r3, [r1, #0]
 8018164:	2d00      	cmp	r5, #0
 8018166:	da03      	bge.n	8018170 <_printf_i+0xc8>
 8018168:	232d      	movs	r3, #45	; 0x2d
 801816a:	426d      	negs	r5, r5
 801816c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018170:	485e      	ldr	r0, [pc, #376]	; (80182ec <_printf_i+0x244>)
 8018172:	230a      	movs	r3, #10
 8018174:	e019      	b.n	80181aa <_printf_i+0x102>
 8018176:	f015 0f40 	tst.w	r5, #64	; 0x40
 801817a:	6805      	ldr	r5, [r0, #0]
 801817c:	600b      	str	r3, [r1, #0]
 801817e:	bf18      	it	ne
 8018180:	b22d      	sxthne	r5, r5
 8018182:	e7ef      	b.n	8018164 <_printf_i+0xbc>
 8018184:	680b      	ldr	r3, [r1, #0]
 8018186:	6825      	ldr	r5, [r4, #0]
 8018188:	1d18      	adds	r0, r3, #4
 801818a:	6008      	str	r0, [r1, #0]
 801818c:	0628      	lsls	r0, r5, #24
 801818e:	d501      	bpl.n	8018194 <_printf_i+0xec>
 8018190:	681d      	ldr	r5, [r3, #0]
 8018192:	e002      	b.n	801819a <_printf_i+0xf2>
 8018194:	0669      	lsls	r1, r5, #25
 8018196:	d5fb      	bpl.n	8018190 <_printf_i+0xe8>
 8018198:	881d      	ldrh	r5, [r3, #0]
 801819a:	4854      	ldr	r0, [pc, #336]	; (80182ec <_printf_i+0x244>)
 801819c:	2f6f      	cmp	r7, #111	; 0x6f
 801819e:	bf0c      	ite	eq
 80181a0:	2308      	moveq	r3, #8
 80181a2:	230a      	movne	r3, #10
 80181a4:	2100      	movs	r1, #0
 80181a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80181aa:	6866      	ldr	r6, [r4, #4]
 80181ac:	60a6      	str	r6, [r4, #8]
 80181ae:	2e00      	cmp	r6, #0
 80181b0:	bfa2      	ittt	ge
 80181b2:	6821      	ldrge	r1, [r4, #0]
 80181b4:	f021 0104 	bicge.w	r1, r1, #4
 80181b8:	6021      	strge	r1, [r4, #0]
 80181ba:	b90d      	cbnz	r5, 80181c0 <_printf_i+0x118>
 80181bc:	2e00      	cmp	r6, #0
 80181be:	d04d      	beq.n	801825c <_printf_i+0x1b4>
 80181c0:	4616      	mov	r6, r2
 80181c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80181c6:	fb03 5711 	mls	r7, r3, r1, r5
 80181ca:	5dc7      	ldrb	r7, [r0, r7]
 80181cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80181d0:	462f      	mov	r7, r5
 80181d2:	42bb      	cmp	r3, r7
 80181d4:	460d      	mov	r5, r1
 80181d6:	d9f4      	bls.n	80181c2 <_printf_i+0x11a>
 80181d8:	2b08      	cmp	r3, #8
 80181da:	d10b      	bne.n	80181f4 <_printf_i+0x14c>
 80181dc:	6823      	ldr	r3, [r4, #0]
 80181de:	07df      	lsls	r7, r3, #31
 80181e0:	d508      	bpl.n	80181f4 <_printf_i+0x14c>
 80181e2:	6923      	ldr	r3, [r4, #16]
 80181e4:	6861      	ldr	r1, [r4, #4]
 80181e6:	4299      	cmp	r1, r3
 80181e8:	bfde      	ittt	le
 80181ea:	2330      	movle	r3, #48	; 0x30
 80181ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80181f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80181f4:	1b92      	subs	r2, r2, r6
 80181f6:	6122      	str	r2, [r4, #16]
 80181f8:	f8cd a000 	str.w	sl, [sp]
 80181fc:	464b      	mov	r3, r9
 80181fe:	aa03      	add	r2, sp, #12
 8018200:	4621      	mov	r1, r4
 8018202:	4640      	mov	r0, r8
 8018204:	f7ff fee2 	bl	8017fcc <_printf_common>
 8018208:	3001      	adds	r0, #1
 801820a:	d14c      	bne.n	80182a6 <_printf_i+0x1fe>
 801820c:	f04f 30ff 	mov.w	r0, #4294967295
 8018210:	b004      	add	sp, #16
 8018212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018216:	4835      	ldr	r0, [pc, #212]	; (80182ec <_printf_i+0x244>)
 8018218:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801821c:	6823      	ldr	r3, [r4, #0]
 801821e:	680e      	ldr	r6, [r1, #0]
 8018220:	061f      	lsls	r7, r3, #24
 8018222:	f856 5b04 	ldr.w	r5, [r6], #4
 8018226:	600e      	str	r6, [r1, #0]
 8018228:	d514      	bpl.n	8018254 <_printf_i+0x1ac>
 801822a:	07d9      	lsls	r1, r3, #31
 801822c:	bf44      	itt	mi
 801822e:	f043 0320 	orrmi.w	r3, r3, #32
 8018232:	6023      	strmi	r3, [r4, #0]
 8018234:	b91d      	cbnz	r5, 801823e <_printf_i+0x196>
 8018236:	6823      	ldr	r3, [r4, #0]
 8018238:	f023 0320 	bic.w	r3, r3, #32
 801823c:	6023      	str	r3, [r4, #0]
 801823e:	2310      	movs	r3, #16
 8018240:	e7b0      	b.n	80181a4 <_printf_i+0xfc>
 8018242:	6823      	ldr	r3, [r4, #0]
 8018244:	f043 0320 	orr.w	r3, r3, #32
 8018248:	6023      	str	r3, [r4, #0]
 801824a:	2378      	movs	r3, #120	; 0x78
 801824c:	4828      	ldr	r0, [pc, #160]	; (80182f0 <_printf_i+0x248>)
 801824e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018252:	e7e3      	b.n	801821c <_printf_i+0x174>
 8018254:	065e      	lsls	r6, r3, #25
 8018256:	bf48      	it	mi
 8018258:	b2ad      	uxthmi	r5, r5
 801825a:	e7e6      	b.n	801822a <_printf_i+0x182>
 801825c:	4616      	mov	r6, r2
 801825e:	e7bb      	b.n	80181d8 <_printf_i+0x130>
 8018260:	680b      	ldr	r3, [r1, #0]
 8018262:	6826      	ldr	r6, [r4, #0]
 8018264:	6960      	ldr	r0, [r4, #20]
 8018266:	1d1d      	adds	r5, r3, #4
 8018268:	600d      	str	r5, [r1, #0]
 801826a:	0635      	lsls	r5, r6, #24
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	d501      	bpl.n	8018274 <_printf_i+0x1cc>
 8018270:	6018      	str	r0, [r3, #0]
 8018272:	e002      	b.n	801827a <_printf_i+0x1d2>
 8018274:	0671      	lsls	r1, r6, #25
 8018276:	d5fb      	bpl.n	8018270 <_printf_i+0x1c8>
 8018278:	8018      	strh	r0, [r3, #0]
 801827a:	2300      	movs	r3, #0
 801827c:	6123      	str	r3, [r4, #16]
 801827e:	4616      	mov	r6, r2
 8018280:	e7ba      	b.n	80181f8 <_printf_i+0x150>
 8018282:	680b      	ldr	r3, [r1, #0]
 8018284:	1d1a      	adds	r2, r3, #4
 8018286:	600a      	str	r2, [r1, #0]
 8018288:	681e      	ldr	r6, [r3, #0]
 801828a:	6862      	ldr	r2, [r4, #4]
 801828c:	2100      	movs	r1, #0
 801828e:	4630      	mov	r0, r6
 8018290:	f7e7 ff9e 	bl	80001d0 <memchr>
 8018294:	b108      	cbz	r0, 801829a <_printf_i+0x1f2>
 8018296:	1b80      	subs	r0, r0, r6
 8018298:	6060      	str	r0, [r4, #4]
 801829a:	6863      	ldr	r3, [r4, #4]
 801829c:	6123      	str	r3, [r4, #16]
 801829e:	2300      	movs	r3, #0
 80182a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182a4:	e7a8      	b.n	80181f8 <_printf_i+0x150>
 80182a6:	6923      	ldr	r3, [r4, #16]
 80182a8:	4632      	mov	r2, r6
 80182aa:	4649      	mov	r1, r9
 80182ac:	4640      	mov	r0, r8
 80182ae:	47d0      	blx	sl
 80182b0:	3001      	adds	r0, #1
 80182b2:	d0ab      	beq.n	801820c <_printf_i+0x164>
 80182b4:	6823      	ldr	r3, [r4, #0]
 80182b6:	079b      	lsls	r3, r3, #30
 80182b8:	d413      	bmi.n	80182e2 <_printf_i+0x23a>
 80182ba:	68e0      	ldr	r0, [r4, #12]
 80182bc:	9b03      	ldr	r3, [sp, #12]
 80182be:	4298      	cmp	r0, r3
 80182c0:	bfb8      	it	lt
 80182c2:	4618      	movlt	r0, r3
 80182c4:	e7a4      	b.n	8018210 <_printf_i+0x168>
 80182c6:	2301      	movs	r3, #1
 80182c8:	4632      	mov	r2, r6
 80182ca:	4649      	mov	r1, r9
 80182cc:	4640      	mov	r0, r8
 80182ce:	47d0      	blx	sl
 80182d0:	3001      	adds	r0, #1
 80182d2:	d09b      	beq.n	801820c <_printf_i+0x164>
 80182d4:	3501      	adds	r5, #1
 80182d6:	68e3      	ldr	r3, [r4, #12]
 80182d8:	9903      	ldr	r1, [sp, #12]
 80182da:	1a5b      	subs	r3, r3, r1
 80182dc:	42ab      	cmp	r3, r5
 80182de:	dcf2      	bgt.n	80182c6 <_printf_i+0x21e>
 80182e0:	e7eb      	b.n	80182ba <_printf_i+0x212>
 80182e2:	2500      	movs	r5, #0
 80182e4:	f104 0619 	add.w	r6, r4, #25
 80182e8:	e7f5      	b.n	80182d6 <_printf_i+0x22e>
 80182ea:	bf00      	nop
 80182ec:	0801ad8e 	.word	0x0801ad8e
 80182f0:	0801ad9f 	.word	0x0801ad9f

080182f4 <iprintf>:
 80182f4:	b40f      	push	{r0, r1, r2, r3}
 80182f6:	4b0a      	ldr	r3, [pc, #40]	; (8018320 <iprintf+0x2c>)
 80182f8:	b513      	push	{r0, r1, r4, lr}
 80182fa:	681c      	ldr	r4, [r3, #0]
 80182fc:	b124      	cbz	r4, 8018308 <iprintf+0x14>
 80182fe:	69a3      	ldr	r3, [r4, #24]
 8018300:	b913      	cbnz	r3, 8018308 <iprintf+0x14>
 8018302:	4620      	mov	r0, r4
 8018304:	f000 ff88 	bl	8019218 <__sinit>
 8018308:	ab05      	add	r3, sp, #20
 801830a:	9a04      	ldr	r2, [sp, #16]
 801830c:	68a1      	ldr	r1, [r4, #8]
 801830e:	9301      	str	r3, [sp, #4]
 8018310:	4620      	mov	r0, r4
 8018312:	f001 fd45 	bl	8019da0 <_vfiprintf_r>
 8018316:	b002      	add	sp, #8
 8018318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801831c:	b004      	add	sp, #16
 801831e:	4770      	bx	lr
 8018320:	200000f0 	.word	0x200000f0

08018324 <_sbrk_r>:
 8018324:	b538      	push	{r3, r4, r5, lr}
 8018326:	4d06      	ldr	r5, [pc, #24]	; (8018340 <_sbrk_r+0x1c>)
 8018328:	2300      	movs	r3, #0
 801832a:	4604      	mov	r4, r0
 801832c:	4608      	mov	r0, r1
 801832e:	602b      	str	r3, [r5, #0]
 8018330:	f7ea fb5a 	bl	80029e8 <_sbrk>
 8018334:	1c43      	adds	r3, r0, #1
 8018336:	d102      	bne.n	801833e <_sbrk_r+0x1a>
 8018338:	682b      	ldr	r3, [r5, #0]
 801833a:	b103      	cbz	r3, 801833e <_sbrk_r+0x1a>
 801833c:	6023      	str	r3, [r4, #0]
 801833e:	bd38      	pop	{r3, r4, r5, pc}
 8018340:	20001a04 	.word	0x20001a04

08018344 <_raise_r>:
 8018344:	291f      	cmp	r1, #31
 8018346:	b538      	push	{r3, r4, r5, lr}
 8018348:	4604      	mov	r4, r0
 801834a:	460d      	mov	r5, r1
 801834c:	d904      	bls.n	8018358 <_raise_r+0x14>
 801834e:	2316      	movs	r3, #22
 8018350:	6003      	str	r3, [r0, #0]
 8018352:	f04f 30ff 	mov.w	r0, #4294967295
 8018356:	bd38      	pop	{r3, r4, r5, pc}
 8018358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801835a:	b112      	cbz	r2, 8018362 <_raise_r+0x1e>
 801835c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018360:	b94b      	cbnz	r3, 8018376 <_raise_r+0x32>
 8018362:	4620      	mov	r0, r4
 8018364:	f000 f830 	bl	80183c8 <_getpid_r>
 8018368:	462a      	mov	r2, r5
 801836a:	4601      	mov	r1, r0
 801836c:	4620      	mov	r0, r4
 801836e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018372:	f000 b817 	b.w	80183a4 <_kill_r>
 8018376:	2b01      	cmp	r3, #1
 8018378:	d00a      	beq.n	8018390 <_raise_r+0x4c>
 801837a:	1c59      	adds	r1, r3, #1
 801837c:	d103      	bne.n	8018386 <_raise_r+0x42>
 801837e:	2316      	movs	r3, #22
 8018380:	6003      	str	r3, [r0, #0]
 8018382:	2001      	movs	r0, #1
 8018384:	e7e7      	b.n	8018356 <_raise_r+0x12>
 8018386:	2400      	movs	r4, #0
 8018388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801838c:	4628      	mov	r0, r5
 801838e:	4798      	blx	r3
 8018390:	2000      	movs	r0, #0
 8018392:	e7e0      	b.n	8018356 <_raise_r+0x12>

08018394 <raise>:
 8018394:	4b02      	ldr	r3, [pc, #8]	; (80183a0 <raise+0xc>)
 8018396:	4601      	mov	r1, r0
 8018398:	6818      	ldr	r0, [r3, #0]
 801839a:	f7ff bfd3 	b.w	8018344 <_raise_r>
 801839e:	bf00      	nop
 80183a0:	200000f0 	.word	0x200000f0

080183a4 <_kill_r>:
 80183a4:	b538      	push	{r3, r4, r5, lr}
 80183a6:	4d07      	ldr	r5, [pc, #28]	; (80183c4 <_kill_r+0x20>)
 80183a8:	2300      	movs	r3, #0
 80183aa:	4604      	mov	r4, r0
 80183ac:	4608      	mov	r0, r1
 80183ae:	4611      	mov	r1, r2
 80183b0:	602b      	str	r3, [r5, #0]
 80183b2:	f7ea fa91 	bl	80028d8 <_kill>
 80183b6:	1c43      	adds	r3, r0, #1
 80183b8:	d102      	bne.n	80183c0 <_kill_r+0x1c>
 80183ba:	682b      	ldr	r3, [r5, #0]
 80183bc:	b103      	cbz	r3, 80183c0 <_kill_r+0x1c>
 80183be:	6023      	str	r3, [r4, #0]
 80183c0:	bd38      	pop	{r3, r4, r5, pc}
 80183c2:	bf00      	nop
 80183c4:	20001a04 	.word	0x20001a04

080183c8 <_getpid_r>:
 80183c8:	f7ea ba7e 	b.w	80028c8 <_getpid>

080183cc <sniprintf>:
 80183cc:	b40c      	push	{r2, r3}
 80183ce:	b530      	push	{r4, r5, lr}
 80183d0:	4b17      	ldr	r3, [pc, #92]	; (8018430 <sniprintf+0x64>)
 80183d2:	1e0c      	subs	r4, r1, #0
 80183d4:	681d      	ldr	r5, [r3, #0]
 80183d6:	b09d      	sub	sp, #116	; 0x74
 80183d8:	da08      	bge.n	80183ec <sniprintf+0x20>
 80183da:	238b      	movs	r3, #139	; 0x8b
 80183dc:	602b      	str	r3, [r5, #0]
 80183de:	f04f 30ff 	mov.w	r0, #4294967295
 80183e2:	b01d      	add	sp, #116	; 0x74
 80183e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80183e8:	b002      	add	sp, #8
 80183ea:	4770      	bx	lr
 80183ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80183f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80183f4:	bf14      	ite	ne
 80183f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80183fa:	4623      	moveq	r3, r4
 80183fc:	9304      	str	r3, [sp, #16]
 80183fe:	9307      	str	r3, [sp, #28]
 8018400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018404:	9002      	str	r0, [sp, #8]
 8018406:	9006      	str	r0, [sp, #24]
 8018408:	f8ad 3016 	strh.w	r3, [sp, #22]
 801840c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801840e:	ab21      	add	r3, sp, #132	; 0x84
 8018410:	a902      	add	r1, sp, #8
 8018412:	4628      	mov	r0, r5
 8018414:	9301      	str	r3, [sp, #4]
 8018416:	f001 fb99 	bl	8019b4c <_svfiprintf_r>
 801841a:	1c43      	adds	r3, r0, #1
 801841c:	bfbc      	itt	lt
 801841e:	238b      	movlt	r3, #139	; 0x8b
 8018420:	602b      	strlt	r3, [r5, #0]
 8018422:	2c00      	cmp	r4, #0
 8018424:	d0dd      	beq.n	80183e2 <sniprintf+0x16>
 8018426:	9b02      	ldr	r3, [sp, #8]
 8018428:	2200      	movs	r2, #0
 801842a:	701a      	strb	r2, [r3, #0]
 801842c:	e7d9      	b.n	80183e2 <sniprintf+0x16>
 801842e:	bf00      	nop
 8018430:	200000f0 	.word	0x200000f0

08018434 <siprintf>:
 8018434:	b40e      	push	{r1, r2, r3}
 8018436:	b500      	push	{lr}
 8018438:	b09c      	sub	sp, #112	; 0x70
 801843a:	ab1d      	add	r3, sp, #116	; 0x74
 801843c:	9002      	str	r0, [sp, #8]
 801843e:	9006      	str	r0, [sp, #24]
 8018440:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018444:	4809      	ldr	r0, [pc, #36]	; (801846c <siprintf+0x38>)
 8018446:	9107      	str	r1, [sp, #28]
 8018448:	9104      	str	r1, [sp, #16]
 801844a:	4909      	ldr	r1, [pc, #36]	; (8018470 <siprintf+0x3c>)
 801844c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018450:	9105      	str	r1, [sp, #20]
 8018452:	6800      	ldr	r0, [r0, #0]
 8018454:	9301      	str	r3, [sp, #4]
 8018456:	a902      	add	r1, sp, #8
 8018458:	f001 fb78 	bl	8019b4c <_svfiprintf_r>
 801845c:	9b02      	ldr	r3, [sp, #8]
 801845e:	2200      	movs	r2, #0
 8018460:	701a      	strb	r2, [r3, #0]
 8018462:	b01c      	add	sp, #112	; 0x70
 8018464:	f85d eb04 	ldr.w	lr, [sp], #4
 8018468:	b003      	add	sp, #12
 801846a:	4770      	bx	lr
 801846c:	200000f0 	.word	0x200000f0
 8018470:	ffff0208 	.word	0xffff0208

08018474 <quorem>:
 8018474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018478:	6903      	ldr	r3, [r0, #16]
 801847a:	690c      	ldr	r4, [r1, #16]
 801847c:	42a3      	cmp	r3, r4
 801847e:	4607      	mov	r7, r0
 8018480:	f2c0 8081 	blt.w	8018586 <quorem+0x112>
 8018484:	3c01      	subs	r4, #1
 8018486:	f101 0814 	add.w	r8, r1, #20
 801848a:	f100 0514 	add.w	r5, r0, #20
 801848e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018492:	9301      	str	r3, [sp, #4]
 8018494:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018498:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801849c:	3301      	adds	r3, #1
 801849e:	429a      	cmp	r2, r3
 80184a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80184a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80184a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80184ac:	d331      	bcc.n	8018512 <quorem+0x9e>
 80184ae:	f04f 0e00 	mov.w	lr, #0
 80184b2:	4640      	mov	r0, r8
 80184b4:	46ac      	mov	ip, r5
 80184b6:	46f2      	mov	sl, lr
 80184b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80184bc:	b293      	uxth	r3, r2
 80184be:	fb06 e303 	mla	r3, r6, r3, lr
 80184c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	ebaa 0303 	sub.w	r3, sl, r3
 80184cc:	0c12      	lsrs	r2, r2, #16
 80184ce:	f8dc a000 	ldr.w	sl, [ip]
 80184d2:	fb06 e202 	mla	r2, r6, r2, lr
 80184d6:	fa13 f38a 	uxtah	r3, r3, sl
 80184da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80184de:	fa1f fa82 	uxth.w	sl, r2
 80184e2:	f8dc 2000 	ldr.w	r2, [ip]
 80184e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80184ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184f4:	4581      	cmp	r9, r0
 80184f6:	f84c 3b04 	str.w	r3, [ip], #4
 80184fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80184fe:	d2db      	bcs.n	80184b8 <quorem+0x44>
 8018500:	f855 300b 	ldr.w	r3, [r5, fp]
 8018504:	b92b      	cbnz	r3, 8018512 <quorem+0x9e>
 8018506:	9b01      	ldr	r3, [sp, #4]
 8018508:	3b04      	subs	r3, #4
 801850a:	429d      	cmp	r5, r3
 801850c:	461a      	mov	r2, r3
 801850e:	d32e      	bcc.n	801856e <quorem+0xfa>
 8018510:	613c      	str	r4, [r7, #16]
 8018512:	4638      	mov	r0, r7
 8018514:	f001 f9b0 	bl	8019878 <__mcmp>
 8018518:	2800      	cmp	r0, #0
 801851a:	db24      	blt.n	8018566 <quorem+0xf2>
 801851c:	3601      	adds	r6, #1
 801851e:	4628      	mov	r0, r5
 8018520:	f04f 0c00 	mov.w	ip, #0
 8018524:	f858 2b04 	ldr.w	r2, [r8], #4
 8018528:	f8d0 e000 	ldr.w	lr, [r0]
 801852c:	b293      	uxth	r3, r2
 801852e:	ebac 0303 	sub.w	r3, ip, r3
 8018532:	0c12      	lsrs	r2, r2, #16
 8018534:	fa13 f38e 	uxtah	r3, r3, lr
 8018538:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801853c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018540:	b29b      	uxth	r3, r3
 8018542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018546:	45c1      	cmp	r9, r8
 8018548:	f840 3b04 	str.w	r3, [r0], #4
 801854c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018550:	d2e8      	bcs.n	8018524 <quorem+0xb0>
 8018552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801855a:	b922      	cbnz	r2, 8018566 <quorem+0xf2>
 801855c:	3b04      	subs	r3, #4
 801855e:	429d      	cmp	r5, r3
 8018560:	461a      	mov	r2, r3
 8018562:	d30a      	bcc.n	801857a <quorem+0x106>
 8018564:	613c      	str	r4, [r7, #16]
 8018566:	4630      	mov	r0, r6
 8018568:	b003      	add	sp, #12
 801856a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801856e:	6812      	ldr	r2, [r2, #0]
 8018570:	3b04      	subs	r3, #4
 8018572:	2a00      	cmp	r2, #0
 8018574:	d1cc      	bne.n	8018510 <quorem+0x9c>
 8018576:	3c01      	subs	r4, #1
 8018578:	e7c7      	b.n	801850a <quorem+0x96>
 801857a:	6812      	ldr	r2, [r2, #0]
 801857c:	3b04      	subs	r3, #4
 801857e:	2a00      	cmp	r2, #0
 8018580:	d1f0      	bne.n	8018564 <quorem+0xf0>
 8018582:	3c01      	subs	r4, #1
 8018584:	e7eb      	b.n	801855e <quorem+0xea>
 8018586:	2000      	movs	r0, #0
 8018588:	e7ee      	b.n	8018568 <quorem+0xf4>
 801858a:	0000      	movs	r0, r0
 801858c:	0000      	movs	r0, r0
	...

08018590 <_dtoa_r>:
 8018590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018594:	ed2d 8b02 	vpush	{d8}
 8018598:	ec57 6b10 	vmov	r6, r7, d0
 801859c:	b095      	sub	sp, #84	; 0x54
 801859e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80185a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80185a4:	9105      	str	r1, [sp, #20]
 80185a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80185aa:	4604      	mov	r4, r0
 80185ac:	9209      	str	r2, [sp, #36]	; 0x24
 80185ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80185b0:	b975      	cbnz	r5, 80185d0 <_dtoa_r+0x40>
 80185b2:	2010      	movs	r0, #16
 80185b4:	f7ff f94a 	bl	801784c <malloc>
 80185b8:	4602      	mov	r2, r0
 80185ba:	6260      	str	r0, [r4, #36]	; 0x24
 80185bc:	b920      	cbnz	r0, 80185c8 <_dtoa_r+0x38>
 80185be:	4bb2      	ldr	r3, [pc, #712]	; (8018888 <_dtoa_r+0x2f8>)
 80185c0:	21ea      	movs	r1, #234	; 0xea
 80185c2:	48b2      	ldr	r0, [pc, #712]	; (801888c <_dtoa_r+0x2fc>)
 80185c4:	f001 fe32 	bl	801a22c <__assert_func>
 80185c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80185cc:	6005      	str	r5, [r0, #0]
 80185ce:	60c5      	str	r5, [r0, #12]
 80185d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185d2:	6819      	ldr	r1, [r3, #0]
 80185d4:	b151      	cbz	r1, 80185ec <_dtoa_r+0x5c>
 80185d6:	685a      	ldr	r2, [r3, #4]
 80185d8:	604a      	str	r2, [r1, #4]
 80185da:	2301      	movs	r3, #1
 80185dc:	4093      	lsls	r3, r2
 80185de:	608b      	str	r3, [r1, #8]
 80185e0:	4620      	mov	r0, r4
 80185e2:	f000 ff0b 	bl	80193fc <_Bfree>
 80185e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80185e8:	2200      	movs	r2, #0
 80185ea:	601a      	str	r2, [r3, #0]
 80185ec:	1e3b      	subs	r3, r7, #0
 80185ee:	bfb9      	ittee	lt
 80185f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80185f4:	9303      	strlt	r3, [sp, #12]
 80185f6:	2300      	movge	r3, #0
 80185f8:	f8c8 3000 	strge.w	r3, [r8]
 80185fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018600:	4ba3      	ldr	r3, [pc, #652]	; (8018890 <_dtoa_r+0x300>)
 8018602:	bfbc      	itt	lt
 8018604:	2201      	movlt	r2, #1
 8018606:	f8c8 2000 	strlt.w	r2, [r8]
 801860a:	ea33 0309 	bics.w	r3, r3, r9
 801860e:	d11b      	bne.n	8018648 <_dtoa_r+0xb8>
 8018610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018612:	f242 730f 	movw	r3, #9999	; 0x270f
 8018616:	6013      	str	r3, [r2, #0]
 8018618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801861c:	4333      	orrs	r3, r6
 801861e:	f000 857a 	beq.w	8019116 <_dtoa_r+0xb86>
 8018622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018624:	b963      	cbnz	r3, 8018640 <_dtoa_r+0xb0>
 8018626:	4b9b      	ldr	r3, [pc, #620]	; (8018894 <_dtoa_r+0x304>)
 8018628:	e024      	b.n	8018674 <_dtoa_r+0xe4>
 801862a:	4b9b      	ldr	r3, [pc, #620]	; (8018898 <_dtoa_r+0x308>)
 801862c:	9300      	str	r3, [sp, #0]
 801862e:	3308      	adds	r3, #8
 8018630:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018632:	6013      	str	r3, [r2, #0]
 8018634:	9800      	ldr	r0, [sp, #0]
 8018636:	b015      	add	sp, #84	; 0x54
 8018638:	ecbd 8b02 	vpop	{d8}
 801863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018640:	4b94      	ldr	r3, [pc, #592]	; (8018894 <_dtoa_r+0x304>)
 8018642:	9300      	str	r3, [sp, #0]
 8018644:	3303      	adds	r3, #3
 8018646:	e7f3      	b.n	8018630 <_dtoa_r+0xa0>
 8018648:	ed9d 7b02 	vldr	d7, [sp, #8]
 801864c:	2200      	movs	r2, #0
 801864e:	ec51 0b17 	vmov	r0, r1, d7
 8018652:	2300      	movs	r3, #0
 8018654:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018658:	f7e8 fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 801865c:	4680      	mov	r8, r0
 801865e:	b158      	cbz	r0, 8018678 <_dtoa_r+0xe8>
 8018660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018662:	2301      	movs	r3, #1
 8018664:	6013      	str	r3, [r2, #0]
 8018666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018668:	2b00      	cmp	r3, #0
 801866a:	f000 8551 	beq.w	8019110 <_dtoa_r+0xb80>
 801866e:	488b      	ldr	r0, [pc, #556]	; (801889c <_dtoa_r+0x30c>)
 8018670:	6018      	str	r0, [r3, #0]
 8018672:	1e43      	subs	r3, r0, #1
 8018674:	9300      	str	r3, [sp, #0]
 8018676:	e7dd      	b.n	8018634 <_dtoa_r+0xa4>
 8018678:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801867c:	aa12      	add	r2, sp, #72	; 0x48
 801867e:	a913      	add	r1, sp, #76	; 0x4c
 8018680:	4620      	mov	r0, r4
 8018682:	f001 f99d 	bl	80199c0 <__d2b>
 8018686:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801868a:	4683      	mov	fp, r0
 801868c:	2d00      	cmp	r5, #0
 801868e:	d07c      	beq.n	801878a <_dtoa_r+0x1fa>
 8018690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018692:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801869a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801869e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80186a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80186a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80186aa:	4b7d      	ldr	r3, [pc, #500]	; (80188a0 <_dtoa_r+0x310>)
 80186ac:	2200      	movs	r2, #0
 80186ae:	4630      	mov	r0, r6
 80186b0:	4639      	mov	r1, r7
 80186b2:	f7e7 fde9 	bl	8000288 <__aeabi_dsub>
 80186b6:	a36e      	add	r3, pc, #440	; (adr r3, 8018870 <_dtoa_r+0x2e0>)
 80186b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186bc:	f7e7 ff9c 	bl	80005f8 <__aeabi_dmul>
 80186c0:	a36d      	add	r3, pc, #436	; (adr r3, 8018878 <_dtoa_r+0x2e8>)
 80186c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186c6:	f7e7 fde1 	bl	800028c <__adddf3>
 80186ca:	4606      	mov	r6, r0
 80186cc:	4628      	mov	r0, r5
 80186ce:	460f      	mov	r7, r1
 80186d0:	f7e7 ff28 	bl	8000524 <__aeabi_i2d>
 80186d4:	a36a      	add	r3, pc, #424	; (adr r3, 8018880 <_dtoa_r+0x2f0>)
 80186d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186da:	f7e7 ff8d 	bl	80005f8 <__aeabi_dmul>
 80186de:	4602      	mov	r2, r0
 80186e0:	460b      	mov	r3, r1
 80186e2:	4630      	mov	r0, r6
 80186e4:	4639      	mov	r1, r7
 80186e6:	f7e7 fdd1 	bl	800028c <__adddf3>
 80186ea:	4606      	mov	r6, r0
 80186ec:	460f      	mov	r7, r1
 80186ee:	f7e8 fa33 	bl	8000b58 <__aeabi_d2iz>
 80186f2:	2200      	movs	r2, #0
 80186f4:	4682      	mov	sl, r0
 80186f6:	2300      	movs	r3, #0
 80186f8:	4630      	mov	r0, r6
 80186fa:	4639      	mov	r1, r7
 80186fc:	f7e8 f9ee 	bl	8000adc <__aeabi_dcmplt>
 8018700:	b148      	cbz	r0, 8018716 <_dtoa_r+0x186>
 8018702:	4650      	mov	r0, sl
 8018704:	f7e7 ff0e 	bl	8000524 <__aeabi_i2d>
 8018708:	4632      	mov	r2, r6
 801870a:	463b      	mov	r3, r7
 801870c:	f7e8 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8018710:	b908      	cbnz	r0, 8018716 <_dtoa_r+0x186>
 8018712:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018716:	f1ba 0f16 	cmp.w	sl, #22
 801871a:	d854      	bhi.n	80187c6 <_dtoa_r+0x236>
 801871c:	4b61      	ldr	r3, [pc, #388]	; (80188a4 <_dtoa_r+0x314>)
 801871e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801872a:	f7e8 f9d7 	bl	8000adc <__aeabi_dcmplt>
 801872e:	2800      	cmp	r0, #0
 8018730:	d04b      	beq.n	80187ca <_dtoa_r+0x23a>
 8018732:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018736:	2300      	movs	r3, #0
 8018738:	930e      	str	r3, [sp, #56]	; 0x38
 801873a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801873c:	1b5d      	subs	r5, r3, r5
 801873e:	1e6b      	subs	r3, r5, #1
 8018740:	9304      	str	r3, [sp, #16]
 8018742:	bf43      	ittte	mi
 8018744:	2300      	movmi	r3, #0
 8018746:	f1c5 0801 	rsbmi	r8, r5, #1
 801874a:	9304      	strmi	r3, [sp, #16]
 801874c:	f04f 0800 	movpl.w	r8, #0
 8018750:	f1ba 0f00 	cmp.w	sl, #0
 8018754:	db3b      	blt.n	80187ce <_dtoa_r+0x23e>
 8018756:	9b04      	ldr	r3, [sp, #16]
 8018758:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801875c:	4453      	add	r3, sl
 801875e:	9304      	str	r3, [sp, #16]
 8018760:	2300      	movs	r3, #0
 8018762:	9306      	str	r3, [sp, #24]
 8018764:	9b05      	ldr	r3, [sp, #20]
 8018766:	2b09      	cmp	r3, #9
 8018768:	d869      	bhi.n	801883e <_dtoa_r+0x2ae>
 801876a:	2b05      	cmp	r3, #5
 801876c:	bfc4      	itt	gt
 801876e:	3b04      	subgt	r3, #4
 8018770:	9305      	strgt	r3, [sp, #20]
 8018772:	9b05      	ldr	r3, [sp, #20]
 8018774:	f1a3 0302 	sub.w	r3, r3, #2
 8018778:	bfcc      	ite	gt
 801877a:	2500      	movgt	r5, #0
 801877c:	2501      	movle	r5, #1
 801877e:	2b03      	cmp	r3, #3
 8018780:	d869      	bhi.n	8018856 <_dtoa_r+0x2c6>
 8018782:	e8df f003 	tbb	[pc, r3]
 8018786:	4e2c      	.short	0x4e2c
 8018788:	5a4c      	.short	0x5a4c
 801878a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801878e:	441d      	add	r5, r3
 8018790:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018794:	2b20      	cmp	r3, #32
 8018796:	bfc1      	itttt	gt
 8018798:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801879c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80187a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80187a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80187a8:	bfda      	itte	le
 80187aa:	f1c3 0320 	rsble	r3, r3, #32
 80187ae:	fa06 f003 	lslle.w	r0, r6, r3
 80187b2:	4318      	orrgt	r0, r3
 80187b4:	f7e7 fea6 	bl	8000504 <__aeabi_ui2d>
 80187b8:	2301      	movs	r3, #1
 80187ba:	4606      	mov	r6, r0
 80187bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80187c0:	3d01      	subs	r5, #1
 80187c2:	9310      	str	r3, [sp, #64]	; 0x40
 80187c4:	e771      	b.n	80186aa <_dtoa_r+0x11a>
 80187c6:	2301      	movs	r3, #1
 80187c8:	e7b6      	b.n	8018738 <_dtoa_r+0x1a8>
 80187ca:	900e      	str	r0, [sp, #56]	; 0x38
 80187cc:	e7b5      	b.n	801873a <_dtoa_r+0x1aa>
 80187ce:	f1ca 0300 	rsb	r3, sl, #0
 80187d2:	9306      	str	r3, [sp, #24]
 80187d4:	2300      	movs	r3, #0
 80187d6:	eba8 080a 	sub.w	r8, r8, sl
 80187da:	930d      	str	r3, [sp, #52]	; 0x34
 80187dc:	e7c2      	b.n	8018764 <_dtoa_r+0x1d4>
 80187de:	2300      	movs	r3, #0
 80187e0:	9308      	str	r3, [sp, #32]
 80187e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	dc39      	bgt.n	801885c <_dtoa_r+0x2cc>
 80187e8:	f04f 0901 	mov.w	r9, #1
 80187ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80187f0:	464b      	mov	r3, r9
 80187f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80187f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80187f8:	2200      	movs	r2, #0
 80187fa:	6042      	str	r2, [r0, #4]
 80187fc:	2204      	movs	r2, #4
 80187fe:	f102 0614 	add.w	r6, r2, #20
 8018802:	429e      	cmp	r6, r3
 8018804:	6841      	ldr	r1, [r0, #4]
 8018806:	d92f      	bls.n	8018868 <_dtoa_r+0x2d8>
 8018808:	4620      	mov	r0, r4
 801880a:	f000 fdb7 	bl	801937c <_Balloc>
 801880e:	9000      	str	r0, [sp, #0]
 8018810:	2800      	cmp	r0, #0
 8018812:	d14b      	bne.n	80188ac <_dtoa_r+0x31c>
 8018814:	4b24      	ldr	r3, [pc, #144]	; (80188a8 <_dtoa_r+0x318>)
 8018816:	4602      	mov	r2, r0
 8018818:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801881c:	e6d1      	b.n	80185c2 <_dtoa_r+0x32>
 801881e:	2301      	movs	r3, #1
 8018820:	e7de      	b.n	80187e0 <_dtoa_r+0x250>
 8018822:	2300      	movs	r3, #0
 8018824:	9308      	str	r3, [sp, #32]
 8018826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018828:	eb0a 0903 	add.w	r9, sl, r3
 801882c:	f109 0301 	add.w	r3, r9, #1
 8018830:	2b01      	cmp	r3, #1
 8018832:	9301      	str	r3, [sp, #4]
 8018834:	bfb8      	it	lt
 8018836:	2301      	movlt	r3, #1
 8018838:	e7dd      	b.n	80187f6 <_dtoa_r+0x266>
 801883a:	2301      	movs	r3, #1
 801883c:	e7f2      	b.n	8018824 <_dtoa_r+0x294>
 801883e:	2501      	movs	r5, #1
 8018840:	2300      	movs	r3, #0
 8018842:	9305      	str	r3, [sp, #20]
 8018844:	9508      	str	r5, [sp, #32]
 8018846:	f04f 39ff 	mov.w	r9, #4294967295
 801884a:	2200      	movs	r2, #0
 801884c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018850:	2312      	movs	r3, #18
 8018852:	9209      	str	r2, [sp, #36]	; 0x24
 8018854:	e7cf      	b.n	80187f6 <_dtoa_r+0x266>
 8018856:	2301      	movs	r3, #1
 8018858:	9308      	str	r3, [sp, #32]
 801885a:	e7f4      	b.n	8018846 <_dtoa_r+0x2b6>
 801885c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018860:	f8cd 9004 	str.w	r9, [sp, #4]
 8018864:	464b      	mov	r3, r9
 8018866:	e7c6      	b.n	80187f6 <_dtoa_r+0x266>
 8018868:	3101      	adds	r1, #1
 801886a:	6041      	str	r1, [r0, #4]
 801886c:	0052      	lsls	r2, r2, #1
 801886e:	e7c6      	b.n	80187fe <_dtoa_r+0x26e>
 8018870:	636f4361 	.word	0x636f4361
 8018874:	3fd287a7 	.word	0x3fd287a7
 8018878:	8b60c8b3 	.word	0x8b60c8b3
 801887c:	3fc68a28 	.word	0x3fc68a28
 8018880:	509f79fb 	.word	0x509f79fb
 8018884:	3fd34413 	.word	0x3fd34413
 8018888:	0801adbd 	.word	0x0801adbd
 801888c:	0801add4 	.word	0x0801add4
 8018890:	7ff00000 	.word	0x7ff00000
 8018894:	0801adb9 	.word	0x0801adb9
 8018898:	0801adb0 	.word	0x0801adb0
 801889c:	0801ad8d 	.word	0x0801ad8d
 80188a0:	3ff80000 	.word	0x3ff80000
 80188a4:	0801af30 	.word	0x0801af30
 80188a8:	0801ae33 	.word	0x0801ae33
 80188ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188ae:	9a00      	ldr	r2, [sp, #0]
 80188b0:	601a      	str	r2, [r3, #0]
 80188b2:	9b01      	ldr	r3, [sp, #4]
 80188b4:	2b0e      	cmp	r3, #14
 80188b6:	f200 80ad 	bhi.w	8018a14 <_dtoa_r+0x484>
 80188ba:	2d00      	cmp	r5, #0
 80188bc:	f000 80aa 	beq.w	8018a14 <_dtoa_r+0x484>
 80188c0:	f1ba 0f00 	cmp.w	sl, #0
 80188c4:	dd36      	ble.n	8018934 <_dtoa_r+0x3a4>
 80188c6:	4ac3      	ldr	r2, [pc, #780]	; (8018bd4 <_dtoa_r+0x644>)
 80188c8:	f00a 030f 	and.w	r3, sl, #15
 80188cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80188d0:	ed93 7b00 	vldr	d7, [r3]
 80188d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80188d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80188dc:	eeb0 8a47 	vmov.f32	s16, s14
 80188e0:	eef0 8a67 	vmov.f32	s17, s15
 80188e4:	d016      	beq.n	8018914 <_dtoa_r+0x384>
 80188e6:	4bbc      	ldr	r3, [pc, #752]	; (8018bd8 <_dtoa_r+0x648>)
 80188e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80188ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80188f0:	f7e7 ffac 	bl	800084c <__aeabi_ddiv>
 80188f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188f8:	f007 070f 	and.w	r7, r7, #15
 80188fc:	2503      	movs	r5, #3
 80188fe:	4eb6      	ldr	r6, [pc, #728]	; (8018bd8 <_dtoa_r+0x648>)
 8018900:	b957      	cbnz	r7, 8018918 <_dtoa_r+0x388>
 8018902:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018906:	ec53 2b18 	vmov	r2, r3, d8
 801890a:	f7e7 ff9f 	bl	800084c <__aeabi_ddiv>
 801890e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018912:	e029      	b.n	8018968 <_dtoa_r+0x3d8>
 8018914:	2502      	movs	r5, #2
 8018916:	e7f2      	b.n	80188fe <_dtoa_r+0x36e>
 8018918:	07f9      	lsls	r1, r7, #31
 801891a:	d508      	bpl.n	801892e <_dtoa_r+0x39e>
 801891c:	ec51 0b18 	vmov	r0, r1, d8
 8018920:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018924:	f7e7 fe68 	bl	80005f8 <__aeabi_dmul>
 8018928:	ec41 0b18 	vmov	d8, r0, r1
 801892c:	3501      	adds	r5, #1
 801892e:	107f      	asrs	r7, r7, #1
 8018930:	3608      	adds	r6, #8
 8018932:	e7e5      	b.n	8018900 <_dtoa_r+0x370>
 8018934:	f000 80a6 	beq.w	8018a84 <_dtoa_r+0x4f4>
 8018938:	f1ca 0600 	rsb	r6, sl, #0
 801893c:	4ba5      	ldr	r3, [pc, #660]	; (8018bd4 <_dtoa_r+0x644>)
 801893e:	4fa6      	ldr	r7, [pc, #664]	; (8018bd8 <_dtoa_r+0x648>)
 8018940:	f006 020f 	and.w	r2, r6, #15
 8018944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801894c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018950:	f7e7 fe52 	bl	80005f8 <__aeabi_dmul>
 8018954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018958:	1136      	asrs	r6, r6, #4
 801895a:	2300      	movs	r3, #0
 801895c:	2502      	movs	r5, #2
 801895e:	2e00      	cmp	r6, #0
 8018960:	f040 8085 	bne.w	8018a6e <_dtoa_r+0x4de>
 8018964:	2b00      	cmp	r3, #0
 8018966:	d1d2      	bne.n	801890e <_dtoa_r+0x37e>
 8018968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801896a:	2b00      	cmp	r3, #0
 801896c:	f000 808c 	beq.w	8018a88 <_dtoa_r+0x4f8>
 8018970:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018974:	4b99      	ldr	r3, [pc, #612]	; (8018bdc <_dtoa_r+0x64c>)
 8018976:	2200      	movs	r2, #0
 8018978:	4630      	mov	r0, r6
 801897a:	4639      	mov	r1, r7
 801897c:	f7e8 f8ae 	bl	8000adc <__aeabi_dcmplt>
 8018980:	2800      	cmp	r0, #0
 8018982:	f000 8081 	beq.w	8018a88 <_dtoa_r+0x4f8>
 8018986:	9b01      	ldr	r3, [sp, #4]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d07d      	beq.n	8018a88 <_dtoa_r+0x4f8>
 801898c:	f1b9 0f00 	cmp.w	r9, #0
 8018990:	dd3c      	ble.n	8018a0c <_dtoa_r+0x47c>
 8018992:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018996:	9307      	str	r3, [sp, #28]
 8018998:	2200      	movs	r2, #0
 801899a:	4b91      	ldr	r3, [pc, #580]	; (8018be0 <_dtoa_r+0x650>)
 801899c:	4630      	mov	r0, r6
 801899e:	4639      	mov	r1, r7
 80189a0:	f7e7 fe2a 	bl	80005f8 <__aeabi_dmul>
 80189a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189a8:	3501      	adds	r5, #1
 80189aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80189ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189b2:	4628      	mov	r0, r5
 80189b4:	f7e7 fdb6 	bl	8000524 <__aeabi_i2d>
 80189b8:	4632      	mov	r2, r6
 80189ba:	463b      	mov	r3, r7
 80189bc:	f7e7 fe1c 	bl	80005f8 <__aeabi_dmul>
 80189c0:	4b88      	ldr	r3, [pc, #544]	; (8018be4 <_dtoa_r+0x654>)
 80189c2:	2200      	movs	r2, #0
 80189c4:	f7e7 fc62 	bl	800028c <__adddf3>
 80189c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80189cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189d0:	9303      	str	r3, [sp, #12]
 80189d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d15c      	bne.n	8018a92 <_dtoa_r+0x502>
 80189d8:	4b83      	ldr	r3, [pc, #524]	; (8018be8 <_dtoa_r+0x658>)
 80189da:	2200      	movs	r2, #0
 80189dc:	4630      	mov	r0, r6
 80189de:	4639      	mov	r1, r7
 80189e0:	f7e7 fc52 	bl	8000288 <__aeabi_dsub>
 80189e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80189e8:	4606      	mov	r6, r0
 80189ea:	460f      	mov	r7, r1
 80189ec:	f7e8 f894 	bl	8000b18 <__aeabi_dcmpgt>
 80189f0:	2800      	cmp	r0, #0
 80189f2:	f040 8296 	bne.w	8018f22 <_dtoa_r+0x992>
 80189f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80189fa:	4630      	mov	r0, r6
 80189fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a00:	4639      	mov	r1, r7
 8018a02:	f7e8 f86b 	bl	8000adc <__aeabi_dcmplt>
 8018a06:	2800      	cmp	r0, #0
 8018a08:	f040 8288 	bne.w	8018f1c <_dtoa_r+0x98c>
 8018a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018a14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	f2c0 8158 	blt.w	8018ccc <_dtoa_r+0x73c>
 8018a1c:	f1ba 0f0e 	cmp.w	sl, #14
 8018a20:	f300 8154 	bgt.w	8018ccc <_dtoa_r+0x73c>
 8018a24:	4b6b      	ldr	r3, [pc, #428]	; (8018bd4 <_dtoa_r+0x644>)
 8018a26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018a2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	f280 80e3 	bge.w	8018bfc <_dtoa_r+0x66c>
 8018a36:	9b01      	ldr	r3, [sp, #4]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	f300 80df 	bgt.w	8018bfc <_dtoa_r+0x66c>
 8018a3e:	f040 826d 	bne.w	8018f1c <_dtoa_r+0x98c>
 8018a42:	4b69      	ldr	r3, [pc, #420]	; (8018be8 <_dtoa_r+0x658>)
 8018a44:	2200      	movs	r2, #0
 8018a46:	4640      	mov	r0, r8
 8018a48:	4649      	mov	r1, r9
 8018a4a:	f7e7 fdd5 	bl	80005f8 <__aeabi_dmul>
 8018a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a52:	f7e8 f857 	bl	8000b04 <__aeabi_dcmpge>
 8018a56:	9e01      	ldr	r6, [sp, #4]
 8018a58:	4637      	mov	r7, r6
 8018a5a:	2800      	cmp	r0, #0
 8018a5c:	f040 8243 	bne.w	8018ee6 <_dtoa_r+0x956>
 8018a60:	9d00      	ldr	r5, [sp, #0]
 8018a62:	2331      	movs	r3, #49	; 0x31
 8018a64:	f805 3b01 	strb.w	r3, [r5], #1
 8018a68:	f10a 0a01 	add.w	sl, sl, #1
 8018a6c:	e23f      	b.n	8018eee <_dtoa_r+0x95e>
 8018a6e:	07f2      	lsls	r2, r6, #31
 8018a70:	d505      	bpl.n	8018a7e <_dtoa_r+0x4ee>
 8018a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018a76:	f7e7 fdbf 	bl	80005f8 <__aeabi_dmul>
 8018a7a:	3501      	adds	r5, #1
 8018a7c:	2301      	movs	r3, #1
 8018a7e:	1076      	asrs	r6, r6, #1
 8018a80:	3708      	adds	r7, #8
 8018a82:	e76c      	b.n	801895e <_dtoa_r+0x3ce>
 8018a84:	2502      	movs	r5, #2
 8018a86:	e76f      	b.n	8018968 <_dtoa_r+0x3d8>
 8018a88:	9b01      	ldr	r3, [sp, #4]
 8018a8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8018a8e:	930c      	str	r3, [sp, #48]	; 0x30
 8018a90:	e78d      	b.n	80189ae <_dtoa_r+0x41e>
 8018a92:	9900      	ldr	r1, [sp, #0]
 8018a94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018a98:	4b4e      	ldr	r3, [pc, #312]	; (8018bd4 <_dtoa_r+0x644>)
 8018a9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018a9e:	4401      	add	r1, r0
 8018aa0:	9102      	str	r1, [sp, #8]
 8018aa2:	9908      	ldr	r1, [sp, #32]
 8018aa4:	eeb0 8a47 	vmov.f32	s16, s14
 8018aa8:	eef0 8a67 	vmov.f32	s17, s15
 8018aac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ab0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018ab4:	2900      	cmp	r1, #0
 8018ab6:	d045      	beq.n	8018b44 <_dtoa_r+0x5b4>
 8018ab8:	494c      	ldr	r1, [pc, #304]	; (8018bec <_dtoa_r+0x65c>)
 8018aba:	2000      	movs	r0, #0
 8018abc:	f7e7 fec6 	bl	800084c <__aeabi_ddiv>
 8018ac0:	ec53 2b18 	vmov	r2, r3, d8
 8018ac4:	f7e7 fbe0 	bl	8000288 <__aeabi_dsub>
 8018ac8:	9d00      	ldr	r5, [sp, #0]
 8018aca:	ec41 0b18 	vmov	d8, r0, r1
 8018ace:	4639      	mov	r1, r7
 8018ad0:	4630      	mov	r0, r6
 8018ad2:	f7e8 f841 	bl	8000b58 <__aeabi_d2iz>
 8018ad6:	900c      	str	r0, [sp, #48]	; 0x30
 8018ad8:	f7e7 fd24 	bl	8000524 <__aeabi_i2d>
 8018adc:	4602      	mov	r2, r0
 8018ade:	460b      	mov	r3, r1
 8018ae0:	4630      	mov	r0, r6
 8018ae2:	4639      	mov	r1, r7
 8018ae4:	f7e7 fbd0 	bl	8000288 <__aeabi_dsub>
 8018ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018aea:	3330      	adds	r3, #48	; 0x30
 8018aec:	f805 3b01 	strb.w	r3, [r5], #1
 8018af0:	ec53 2b18 	vmov	r2, r3, d8
 8018af4:	4606      	mov	r6, r0
 8018af6:	460f      	mov	r7, r1
 8018af8:	f7e7 fff0 	bl	8000adc <__aeabi_dcmplt>
 8018afc:	2800      	cmp	r0, #0
 8018afe:	d165      	bne.n	8018bcc <_dtoa_r+0x63c>
 8018b00:	4632      	mov	r2, r6
 8018b02:	463b      	mov	r3, r7
 8018b04:	4935      	ldr	r1, [pc, #212]	; (8018bdc <_dtoa_r+0x64c>)
 8018b06:	2000      	movs	r0, #0
 8018b08:	f7e7 fbbe 	bl	8000288 <__aeabi_dsub>
 8018b0c:	ec53 2b18 	vmov	r2, r3, d8
 8018b10:	f7e7 ffe4 	bl	8000adc <__aeabi_dcmplt>
 8018b14:	2800      	cmp	r0, #0
 8018b16:	f040 80b9 	bne.w	8018c8c <_dtoa_r+0x6fc>
 8018b1a:	9b02      	ldr	r3, [sp, #8]
 8018b1c:	429d      	cmp	r5, r3
 8018b1e:	f43f af75 	beq.w	8018a0c <_dtoa_r+0x47c>
 8018b22:	4b2f      	ldr	r3, [pc, #188]	; (8018be0 <_dtoa_r+0x650>)
 8018b24:	ec51 0b18 	vmov	r0, r1, d8
 8018b28:	2200      	movs	r2, #0
 8018b2a:	f7e7 fd65 	bl	80005f8 <__aeabi_dmul>
 8018b2e:	4b2c      	ldr	r3, [pc, #176]	; (8018be0 <_dtoa_r+0x650>)
 8018b30:	ec41 0b18 	vmov	d8, r0, r1
 8018b34:	2200      	movs	r2, #0
 8018b36:	4630      	mov	r0, r6
 8018b38:	4639      	mov	r1, r7
 8018b3a:	f7e7 fd5d 	bl	80005f8 <__aeabi_dmul>
 8018b3e:	4606      	mov	r6, r0
 8018b40:	460f      	mov	r7, r1
 8018b42:	e7c4      	b.n	8018ace <_dtoa_r+0x53e>
 8018b44:	ec51 0b17 	vmov	r0, r1, d7
 8018b48:	f7e7 fd56 	bl	80005f8 <__aeabi_dmul>
 8018b4c:	9b02      	ldr	r3, [sp, #8]
 8018b4e:	9d00      	ldr	r5, [sp, #0]
 8018b50:	930c      	str	r3, [sp, #48]	; 0x30
 8018b52:	ec41 0b18 	vmov	d8, r0, r1
 8018b56:	4639      	mov	r1, r7
 8018b58:	4630      	mov	r0, r6
 8018b5a:	f7e7 fffd 	bl	8000b58 <__aeabi_d2iz>
 8018b5e:	9011      	str	r0, [sp, #68]	; 0x44
 8018b60:	f7e7 fce0 	bl	8000524 <__aeabi_i2d>
 8018b64:	4602      	mov	r2, r0
 8018b66:	460b      	mov	r3, r1
 8018b68:	4630      	mov	r0, r6
 8018b6a:	4639      	mov	r1, r7
 8018b6c:	f7e7 fb8c 	bl	8000288 <__aeabi_dsub>
 8018b70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018b72:	3330      	adds	r3, #48	; 0x30
 8018b74:	f805 3b01 	strb.w	r3, [r5], #1
 8018b78:	9b02      	ldr	r3, [sp, #8]
 8018b7a:	429d      	cmp	r5, r3
 8018b7c:	4606      	mov	r6, r0
 8018b7e:	460f      	mov	r7, r1
 8018b80:	f04f 0200 	mov.w	r2, #0
 8018b84:	d134      	bne.n	8018bf0 <_dtoa_r+0x660>
 8018b86:	4b19      	ldr	r3, [pc, #100]	; (8018bec <_dtoa_r+0x65c>)
 8018b88:	ec51 0b18 	vmov	r0, r1, d8
 8018b8c:	f7e7 fb7e 	bl	800028c <__adddf3>
 8018b90:	4602      	mov	r2, r0
 8018b92:	460b      	mov	r3, r1
 8018b94:	4630      	mov	r0, r6
 8018b96:	4639      	mov	r1, r7
 8018b98:	f7e7 ffbe 	bl	8000b18 <__aeabi_dcmpgt>
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	d175      	bne.n	8018c8c <_dtoa_r+0x6fc>
 8018ba0:	ec53 2b18 	vmov	r2, r3, d8
 8018ba4:	4911      	ldr	r1, [pc, #68]	; (8018bec <_dtoa_r+0x65c>)
 8018ba6:	2000      	movs	r0, #0
 8018ba8:	f7e7 fb6e 	bl	8000288 <__aeabi_dsub>
 8018bac:	4602      	mov	r2, r0
 8018bae:	460b      	mov	r3, r1
 8018bb0:	4630      	mov	r0, r6
 8018bb2:	4639      	mov	r1, r7
 8018bb4:	f7e7 ff92 	bl	8000adc <__aeabi_dcmplt>
 8018bb8:	2800      	cmp	r0, #0
 8018bba:	f43f af27 	beq.w	8018a0c <_dtoa_r+0x47c>
 8018bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018bc0:	1e6b      	subs	r3, r5, #1
 8018bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8018bc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018bc8:	2b30      	cmp	r3, #48	; 0x30
 8018bca:	d0f8      	beq.n	8018bbe <_dtoa_r+0x62e>
 8018bcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018bd0:	e04a      	b.n	8018c68 <_dtoa_r+0x6d8>
 8018bd2:	bf00      	nop
 8018bd4:	0801af30 	.word	0x0801af30
 8018bd8:	0801af08 	.word	0x0801af08
 8018bdc:	3ff00000 	.word	0x3ff00000
 8018be0:	40240000 	.word	0x40240000
 8018be4:	401c0000 	.word	0x401c0000
 8018be8:	40140000 	.word	0x40140000
 8018bec:	3fe00000 	.word	0x3fe00000
 8018bf0:	4baf      	ldr	r3, [pc, #700]	; (8018eb0 <_dtoa_r+0x920>)
 8018bf2:	f7e7 fd01 	bl	80005f8 <__aeabi_dmul>
 8018bf6:	4606      	mov	r6, r0
 8018bf8:	460f      	mov	r7, r1
 8018bfa:	e7ac      	b.n	8018b56 <_dtoa_r+0x5c6>
 8018bfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c00:	9d00      	ldr	r5, [sp, #0]
 8018c02:	4642      	mov	r2, r8
 8018c04:	464b      	mov	r3, r9
 8018c06:	4630      	mov	r0, r6
 8018c08:	4639      	mov	r1, r7
 8018c0a:	f7e7 fe1f 	bl	800084c <__aeabi_ddiv>
 8018c0e:	f7e7 ffa3 	bl	8000b58 <__aeabi_d2iz>
 8018c12:	9002      	str	r0, [sp, #8]
 8018c14:	f7e7 fc86 	bl	8000524 <__aeabi_i2d>
 8018c18:	4642      	mov	r2, r8
 8018c1a:	464b      	mov	r3, r9
 8018c1c:	f7e7 fcec 	bl	80005f8 <__aeabi_dmul>
 8018c20:	4602      	mov	r2, r0
 8018c22:	460b      	mov	r3, r1
 8018c24:	4630      	mov	r0, r6
 8018c26:	4639      	mov	r1, r7
 8018c28:	f7e7 fb2e 	bl	8000288 <__aeabi_dsub>
 8018c2c:	9e02      	ldr	r6, [sp, #8]
 8018c2e:	9f01      	ldr	r7, [sp, #4]
 8018c30:	3630      	adds	r6, #48	; 0x30
 8018c32:	f805 6b01 	strb.w	r6, [r5], #1
 8018c36:	9e00      	ldr	r6, [sp, #0]
 8018c38:	1bae      	subs	r6, r5, r6
 8018c3a:	42b7      	cmp	r7, r6
 8018c3c:	4602      	mov	r2, r0
 8018c3e:	460b      	mov	r3, r1
 8018c40:	d137      	bne.n	8018cb2 <_dtoa_r+0x722>
 8018c42:	f7e7 fb23 	bl	800028c <__adddf3>
 8018c46:	4642      	mov	r2, r8
 8018c48:	464b      	mov	r3, r9
 8018c4a:	4606      	mov	r6, r0
 8018c4c:	460f      	mov	r7, r1
 8018c4e:	f7e7 ff63 	bl	8000b18 <__aeabi_dcmpgt>
 8018c52:	b9c8      	cbnz	r0, 8018c88 <_dtoa_r+0x6f8>
 8018c54:	4642      	mov	r2, r8
 8018c56:	464b      	mov	r3, r9
 8018c58:	4630      	mov	r0, r6
 8018c5a:	4639      	mov	r1, r7
 8018c5c:	f7e7 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8018c60:	b110      	cbz	r0, 8018c68 <_dtoa_r+0x6d8>
 8018c62:	9b02      	ldr	r3, [sp, #8]
 8018c64:	07d9      	lsls	r1, r3, #31
 8018c66:	d40f      	bmi.n	8018c88 <_dtoa_r+0x6f8>
 8018c68:	4620      	mov	r0, r4
 8018c6a:	4659      	mov	r1, fp
 8018c6c:	f000 fbc6 	bl	80193fc <_Bfree>
 8018c70:	2300      	movs	r3, #0
 8018c72:	702b      	strb	r3, [r5, #0]
 8018c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c76:	f10a 0001 	add.w	r0, sl, #1
 8018c7a:	6018      	str	r0, [r3, #0]
 8018c7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	f43f acd8 	beq.w	8018634 <_dtoa_r+0xa4>
 8018c84:	601d      	str	r5, [r3, #0]
 8018c86:	e4d5      	b.n	8018634 <_dtoa_r+0xa4>
 8018c88:	f8cd a01c 	str.w	sl, [sp, #28]
 8018c8c:	462b      	mov	r3, r5
 8018c8e:	461d      	mov	r5, r3
 8018c90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c94:	2a39      	cmp	r2, #57	; 0x39
 8018c96:	d108      	bne.n	8018caa <_dtoa_r+0x71a>
 8018c98:	9a00      	ldr	r2, [sp, #0]
 8018c9a:	429a      	cmp	r2, r3
 8018c9c:	d1f7      	bne.n	8018c8e <_dtoa_r+0x6fe>
 8018c9e:	9a07      	ldr	r2, [sp, #28]
 8018ca0:	9900      	ldr	r1, [sp, #0]
 8018ca2:	3201      	adds	r2, #1
 8018ca4:	9207      	str	r2, [sp, #28]
 8018ca6:	2230      	movs	r2, #48	; 0x30
 8018ca8:	700a      	strb	r2, [r1, #0]
 8018caa:	781a      	ldrb	r2, [r3, #0]
 8018cac:	3201      	adds	r2, #1
 8018cae:	701a      	strb	r2, [r3, #0]
 8018cb0:	e78c      	b.n	8018bcc <_dtoa_r+0x63c>
 8018cb2:	4b7f      	ldr	r3, [pc, #508]	; (8018eb0 <_dtoa_r+0x920>)
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	f7e7 fc9f 	bl	80005f8 <__aeabi_dmul>
 8018cba:	2200      	movs	r2, #0
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	4606      	mov	r6, r0
 8018cc0:	460f      	mov	r7, r1
 8018cc2:	f7e7 ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8018cc6:	2800      	cmp	r0, #0
 8018cc8:	d09b      	beq.n	8018c02 <_dtoa_r+0x672>
 8018cca:	e7cd      	b.n	8018c68 <_dtoa_r+0x6d8>
 8018ccc:	9a08      	ldr	r2, [sp, #32]
 8018cce:	2a00      	cmp	r2, #0
 8018cd0:	f000 80c4 	beq.w	8018e5c <_dtoa_r+0x8cc>
 8018cd4:	9a05      	ldr	r2, [sp, #20]
 8018cd6:	2a01      	cmp	r2, #1
 8018cd8:	f300 80a8 	bgt.w	8018e2c <_dtoa_r+0x89c>
 8018cdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018cde:	2a00      	cmp	r2, #0
 8018ce0:	f000 80a0 	beq.w	8018e24 <_dtoa_r+0x894>
 8018ce4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018ce8:	9e06      	ldr	r6, [sp, #24]
 8018cea:	4645      	mov	r5, r8
 8018cec:	9a04      	ldr	r2, [sp, #16]
 8018cee:	2101      	movs	r1, #1
 8018cf0:	441a      	add	r2, r3
 8018cf2:	4620      	mov	r0, r4
 8018cf4:	4498      	add	r8, r3
 8018cf6:	9204      	str	r2, [sp, #16]
 8018cf8:	f000 fc3c 	bl	8019574 <__i2b>
 8018cfc:	4607      	mov	r7, r0
 8018cfe:	2d00      	cmp	r5, #0
 8018d00:	dd0b      	ble.n	8018d1a <_dtoa_r+0x78a>
 8018d02:	9b04      	ldr	r3, [sp, #16]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	dd08      	ble.n	8018d1a <_dtoa_r+0x78a>
 8018d08:	42ab      	cmp	r3, r5
 8018d0a:	9a04      	ldr	r2, [sp, #16]
 8018d0c:	bfa8      	it	ge
 8018d0e:	462b      	movge	r3, r5
 8018d10:	eba8 0803 	sub.w	r8, r8, r3
 8018d14:	1aed      	subs	r5, r5, r3
 8018d16:	1ad3      	subs	r3, r2, r3
 8018d18:	9304      	str	r3, [sp, #16]
 8018d1a:	9b06      	ldr	r3, [sp, #24]
 8018d1c:	b1fb      	cbz	r3, 8018d5e <_dtoa_r+0x7ce>
 8018d1e:	9b08      	ldr	r3, [sp, #32]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	f000 809f 	beq.w	8018e64 <_dtoa_r+0x8d4>
 8018d26:	2e00      	cmp	r6, #0
 8018d28:	dd11      	ble.n	8018d4e <_dtoa_r+0x7be>
 8018d2a:	4639      	mov	r1, r7
 8018d2c:	4632      	mov	r2, r6
 8018d2e:	4620      	mov	r0, r4
 8018d30:	f000 fcdc 	bl	80196ec <__pow5mult>
 8018d34:	465a      	mov	r2, fp
 8018d36:	4601      	mov	r1, r0
 8018d38:	4607      	mov	r7, r0
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	f000 fc30 	bl	80195a0 <__multiply>
 8018d40:	4659      	mov	r1, fp
 8018d42:	9007      	str	r0, [sp, #28]
 8018d44:	4620      	mov	r0, r4
 8018d46:	f000 fb59 	bl	80193fc <_Bfree>
 8018d4a:	9b07      	ldr	r3, [sp, #28]
 8018d4c:	469b      	mov	fp, r3
 8018d4e:	9b06      	ldr	r3, [sp, #24]
 8018d50:	1b9a      	subs	r2, r3, r6
 8018d52:	d004      	beq.n	8018d5e <_dtoa_r+0x7ce>
 8018d54:	4659      	mov	r1, fp
 8018d56:	4620      	mov	r0, r4
 8018d58:	f000 fcc8 	bl	80196ec <__pow5mult>
 8018d5c:	4683      	mov	fp, r0
 8018d5e:	2101      	movs	r1, #1
 8018d60:	4620      	mov	r0, r4
 8018d62:	f000 fc07 	bl	8019574 <__i2b>
 8018d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	4606      	mov	r6, r0
 8018d6c:	dd7c      	ble.n	8018e68 <_dtoa_r+0x8d8>
 8018d6e:	461a      	mov	r2, r3
 8018d70:	4601      	mov	r1, r0
 8018d72:	4620      	mov	r0, r4
 8018d74:	f000 fcba 	bl	80196ec <__pow5mult>
 8018d78:	9b05      	ldr	r3, [sp, #20]
 8018d7a:	2b01      	cmp	r3, #1
 8018d7c:	4606      	mov	r6, r0
 8018d7e:	dd76      	ble.n	8018e6e <_dtoa_r+0x8de>
 8018d80:	2300      	movs	r3, #0
 8018d82:	9306      	str	r3, [sp, #24]
 8018d84:	6933      	ldr	r3, [r6, #16]
 8018d86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018d8a:	6918      	ldr	r0, [r3, #16]
 8018d8c:	f000 fba2 	bl	80194d4 <__hi0bits>
 8018d90:	f1c0 0020 	rsb	r0, r0, #32
 8018d94:	9b04      	ldr	r3, [sp, #16]
 8018d96:	4418      	add	r0, r3
 8018d98:	f010 001f 	ands.w	r0, r0, #31
 8018d9c:	f000 8086 	beq.w	8018eac <_dtoa_r+0x91c>
 8018da0:	f1c0 0320 	rsb	r3, r0, #32
 8018da4:	2b04      	cmp	r3, #4
 8018da6:	dd7f      	ble.n	8018ea8 <_dtoa_r+0x918>
 8018da8:	f1c0 001c 	rsb	r0, r0, #28
 8018dac:	9b04      	ldr	r3, [sp, #16]
 8018dae:	4403      	add	r3, r0
 8018db0:	4480      	add	r8, r0
 8018db2:	4405      	add	r5, r0
 8018db4:	9304      	str	r3, [sp, #16]
 8018db6:	f1b8 0f00 	cmp.w	r8, #0
 8018dba:	dd05      	ble.n	8018dc8 <_dtoa_r+0x838>
 8018dbc:	4659      	mov	r1, fp
 8018dbe:	4642      	mov	r2, r8
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	f000 fced 	bl	80197a0 <__lshift>
 8018dc6:	4683      	mov	fp, r0
 8018dc8:	9b04      	ldr	r3, [sp, #16]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	dd05      	ble.n	8018dda <_dtoa_r+0x84a>
 8018dce:	4631      	mov	r1, r6
 8018dd0:	461a      	mov	r2, r3
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	f000 fce4 	bl	80197a0 <__lshift>
 8018dd8:	4606      	mov	r6, r0
 8018dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d069      	beq.n	8018eb4 <_dtoa_r+0x924>
 8018de0:	4631      	mov	r1, r6
 8018de2:	4658      	mov	r0, fp
 8018de4:	f000 fd48 	bl	8019878 <__mcmp>
 8018de8:	2800      	cmp	r0, #0
 8018dea:	da63      	bge.n	8018eb4 <_dtoa_r+0x924>
 8018dec:	2300      	movs	r3, #0
 8018dee:	4659      	mov	r1, fp
 8018df0:	220a      	movs	r2, #10
 8018df2:	4620      	mov	r0, r4
 8018df4:	f000 fb24 	bl	8019440 <__multadd>
 8018df8:	9b08      	ldr	r3, [sp, #32]
 8018dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018dfe:	4683      	mov	fp, r0
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	f000 818f 	beq.w	8019124 <_dtoa_r+0xb94>
 8018e06:	4639      	mov	r1, r7
 8018e08:	2300      	movs	r3, #0
 8018e0a:	220a      	movs	r2, #10
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f000 fb17 	bl	8019440 <__multadd>
 8018e12:	f1b9 0f00 	cmp.w	r9, #0
 8018e16:	4607      	mov	r7, r0
 8018e18:	f300 808e 	bgt.w	8018f38 <_dtoa_r+0x9a8>
 8018e1c:	9b05      	ldr	r3, [sp, #20]
 8018e1e:	2b02      	cmp	r3, #2
 8018e20:	dc50      	bgt.n	8018ec4 <_dtoa_r+0x934>
 8018e22:	e089      	b.n	8018f38 <_dtoa_r+0x9a8>
 8018e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018e2a:	e75d      	b.n	8018ce8 <_dtoa_r+0x758>
 8018e2c:	9b01      	ldr	r3, [sp, #4]
 8018e2e:	1e5e      	subs	r6, r3, #1
 8018e30:	9b06      	ldr	r3, [sp, #24]
 8018e32:	42b3      	cmp	r3, r6
 8018e34:	bfbf      	itttt	lt
 8018e36:	9b06      	ldrlt	r3, [sp, #24]
 8018e38:	9606      	strlt	r6, [sp, #24]
 8018e3a:	1af2      	sublt	r2, r6, r3
 8018e3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018e3e:	bfb6      	itet	lt
 8018e40:	189b      	addlt	r3, r3, r2
 8018e42:	1b9e      	subge	r6, r3, r6
 8018e44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018e46:	9b01      	ldr	r3, [sp, #4]
 8018e48:	bfb8      	it	lt
 8018e4a:	2600      	movlt	r6, #0
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	bfb5      	itete	lt
 8018e50:	eba8 0503 	sublt.w	r5, r8, r3
 8018e54:	9b01      	ldrge	r3, [sp, #4]
 8018e56:	2300      	movlt	r3, #0
 8018e58:	4645      	movge	r5, r8
 8018e5a:	e747      	b.n	8018cec <_dtoa_r+0x75c>
 8018e5c:	9e06      	ldr	r6, [sp, #24]
 8018e5e:	9f08      	ldr	r7, [sp, #32]
 8018e60:	4645      	mov	r5, r8
 8018e62:	e74c      	b.n	8018cfe <_dtoa_r+0x76e>
 8018e64:	9a06      	ldr	r2, [sp, #24]
 8018e66:	e775      	b.n	8018d54 <_dtoa_r+0x7c4>
 8018e68:	9b05      	ldr	r3, [sp, #20]
 8018e6a:	2b01      	cmp	r3, #1
 8018e6c:	dc18      	bgt.n	8018ea0 <_dtoa_r+0x910>
 8018e6e:	9b02      	ldr	r3, [sp, #8]
 8018e70:	b9b3      	cbnz	r3, 8018ea0 <_dtoa_r+0x910>
 8018e72:	9b03      	ldr	r3, [sp, #12]
 8018e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018e78:	b9a3      	cbnz	r3, 8018ea4 <_dtoa_r+0x914>
 8018e7a:	9b03      	ldr	r3, [sp, #12]
 8018e7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e80:	0d1b      	lsrs	r3, r3, #20
 8018e82:	051b      	lsls	r3, r3, #20
 8018e84:	b12b      	cbz	r3, 8018e92 <_dtoa_r+0x902>
 8018e86:	9b04      	ldr	r3, [sp, #16]
 8018e88:	3301      	adds	r3, #1
 8018e8a:	9304      	str	r3, [sp, #16]
 8018e8c:	f108 0801 	add.w	r8, r8, #1
 8018e90:	2301      	movs	r3, #1
 8018e92:	9306      	str	r3, [sp, #24]
 8018e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	f47f af74 	bne.w	8018d84 <_dtoa_r+0x7f4>
 8018e9c:	2001      	movs	r0, #1
 8018e9e:	e779      	b.n	8018d94 <_dtoa_r+0x804>
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	e7f6      	b.n	8018e92 <_dtoa_r+0x902>
 8018ea4:	9b02      	ldr	r3, [sp, #8]
 8018ea6:	e7f4      	b.n	8018e92 <_dtoa_r+0x902>
 8018ea8:	d085      	beq.n	8018db6 <_dtoa_r+0x826>
 8018eaa:	4618      	mov	r0, r3
 8018eac:	301c      	adds	r0, #28
 8018eae:	e77d      	b.n	8018dac <_dtoa_r+0x81c>
 8018eb0:	40240000 	.word	0x40240000
 8018eb4:	9b01      	ldr	r3, [sp, #4]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	dc38      	bgt.n	8018f2c <_dtoa_r+0x99c>
 8018eba:	9b05      	ldr	r3, [sp, #20]
 8018ebc:	2b02      	cmp	r3, #2
 8018ebe:	dd35      	ble.n	8018f2c <_dtoa_r+0x99c>
 8018ec0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018ec4:	f1b9 0f00 	cmp.w	r9, #0
 8018ec8:	d10d      	bne.n	8018ee6 <_dtoa_r+0x956>
 8018eca:	4631      	mov	r1, r6
 8018ecc:	464b      	mov	r3, r9
 8018ece:	2205      	movs	r2, #5
 8018ed0:	4620      	mov	r0, r4
 8018ed2:	f000 fab5 	bl	8019440 <__multadd>
 8018ed6:	4601      	mov	r1, r0
 8018ed8:	4606      	mov	r6, r0
 8018eda:	4658      	mov	r0, fp
 8018edc:	f000 fccc 	bl	8019878 <__mcmp>
 8018ee0:	2800      	cmp	r0, #0
 8018ee2:	f73f adbd 	bgt.w	8018a60 <_dtoa_r+0x4d0>
 8018ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ee8:	9d00      	ldr	r5, [sp, #0]
 8018eea:	ea6f 0a03 	mvn.w	sl, r3
 8018eee:	f04f 0800 	mov.w	r8, #0
 8018ef2:	4631      	mov	r1, r6
 8018ef4:	4620      	mov	r0, r4
 8018ef6:	f000 fa81 	bl	80193fc <_Bfree>
 8018efa:	2f00      	cmp	r7, #0
 8018efc:	f43f aeb4 	beq.w	8018c68 <_dtoa_r+0x6d8>
 8018f00:	f1b8 0f00 	cmp.w	r8, #0
 8018f04:	d005      	beq.n	8018f12 <_dtoa_r+0x982>
 8018f06:	45b8      	cmp	r8, r7
 8018f08:	d003      	beq.n	8018f12 <_dtoa_r+0x982>
 8018f0a:	4641      	mov	r1, r8
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	f000 fa75 	bl	80193fc <_Bfree>
 8018f12:	4639      	mov	r1, r7
 8018f14:	4620      	mov	r0, r4
 8018f16:	f000 fa71 	bl	80193fc <_Bfree>
 8018f1a:	e6a5      	b.n	8018c68 <_dtoa_r+0x6d8>
 8018f1c:	2600      	movs	r6, #0
 8018f1e:	4637      	mov	r7, r6
 8018f20:	e7e1      	b.n	8018ee6 <_dtoa_r+0x956>
 8018f22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f28:	4637      	mov	r7, r6
 8018f2a:	e599      	b.n	8018a60 <_dtoa_r+0x4d0>
 8018f2c:	9b08      	ldr	r3, [sp, #32]
 8018f2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	f000 80fd 	beq.w	8019132 <_dtoa_r+0xba2>
 8018f38:	2d00      	cmp	r5, #0
 8018f3a:	dd05      	ble.n	8018f48 <_dtoa_r+0x9b8>
 8018f3c:	4639      	mov	r1, r7
 8018f3e:	462a      	mov	r2, r5
 8018f40:	4620      	mov	r0, r4
 8018f42:	f000 fc2d 	bl	80197a0 <__lshift>
 8018f46:	4607      	mov	r7, r0
 8018f48:	9b06      	ldr	r3, [sp, #24]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d05c      	beq.n	8019008 <_dtoa_r+0xa78>
 8018f4e:	6879      	ldr	r1, [r7, #4]
 8018f50:	4620      	mov	r0, r4
 8018f52:	f000 fa13 	bl	801937c <_Balloc>
 8018f56:	4605      	mov	r5, r0
 8018f58:	b928      	cbnz	r0, 8018f66 <_dtoa_r+0x9d6>
 8018f5a:	4b80      	ldr	r3, [pc, #512]	; (801915c <_dtoa_r+0xbcc>)
 8018f5c:	4602      	mov	r2, r0
 8018f5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018f62:	f7ff bb2e 	b.w	80185c2 <_dtoa_r+0x32>
 8018f66:	693a      	ldr	r2, [r7, #16]
 8018f68:	3202      	adds	r2, #2
 8018f6a:	0092      	lsls	r2, r2, #2
 8018f6c:	f107 010c 	add.w	r1, r7, #12
 8018f70:	300c      	adds	r0, #12
 8018f72:	f7fe fc7b 	bl	801786c <memcpy>
 8018f76:	2201      	movs	r2, #1
 8018f78:	4629      	mov	r1, r5
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	f000 fc10 	bl	80197a0 <__lshift>
 8018f80:	9b00      	ldr	r3, [sp, #0]
 8018f82:	3301      	adds	r3, #1
 8018f84:	9301      	str	r3, [sp, #4]
 8018f86:	9b00      	ldr	r3, [sp, #0]
 8018f88:	444b      	add	r3, r9
 8018f8a:	9307      	str	r3, [sp, #28]
 8018f8c:	9b02      	ldr	r3, [sp, #8]
 8018f8e:	f003 0301 	and.w	r3, r3, #1
 8018f92:	46b8      	mov	r8, r7
 8018f94:	9306      	str	r3, [sp, #24]
 8018f96:	4607      	mov	r7, r0
 8018f98:	9b01      	ldr	r3, [sp, #4]
 8018f9a:	4631      	mov	r1, r6
 8018f9c:	3b01      	subs	r3, #1
 8018f9e:	4658      	mov	r0, fp
 8018fa0:	9302      	str	r3, [sp, #8]
 8018fa2:	f7ff fa67 	bl	8018474 <quorem>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	3330      	adds	r3, #48	; 0x30
 8018faa:	9004      	str	r0, [sp, #16]
 8018fac:	4641      	mov	r1, r8
 8018fae:	4658      	mov	r0, fp
 8018fb0:	9308      	str	r3, [sp, #32]
 8018fb2:	f000 fc61 	bl	8019878 <__mcmp>
 8018fb6:	463a      	mov	r2, r7
 8018fb8:	4681      	mov	r9, r0
 8018fba:	4631      	mov	r1, r6
 8018fbc:	4620      	mov	r0, r4
 8018fbe:	f000 fc77 	bl	80198b0 <__mdiff>
 8018fc2:	68c2      	ldr	r2, [r0, #12]
 8018fc4:	9b08      	ldr	r3, [sp, #32]
 8018fc6:	4605      	mov	r5, r0
 8018fc8:	bb02      	cbnz	r2, 801900c <_dtoa_r+0xa7c>
 8018fca:	4601      	mov	r1, r0
 8018fcc:	4658      	mov	r0, fp
 8018fce:	f000 fc53 	bl	8019878 <__mcmp>
 8018fd2:	9b08      	ldr	r3, [sp, #32]
 8018fd4:	4602      	mov	r2, r0
 8018fd6:	4629      	mov	r1, r5
 8018fd8:	4620      	mov	r0, r4
 8018fda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018fde:	f000 fa0d 	bl	80193fc <_Bfree>
 8018fe2:	9b05      	ldr	r3, [sp, #20]
 8018fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fe6:	9d01      	ldr	r5, [sp, #4]
 8018fe8:	ea43 0102 	orr.w	r1, r3, r2
 8018fec:	9b06      	ldr	r3, [sp, #24]
 8018fee:	430b      	orrs	r3, r1
 8018ff0:	9b08      	ldr	r3, [sp, #32]
 8018ff2:	d10d      	bne.n	8019010 <_dtoa_r+0xa80>
 8018ff4:	2b39      	cmp	r3, #57	; 0x39
 8018ff6:	d029      	beq.n	801904c <_dtoa_r+0xabc>
 8018ff8:	f1b9 0f00 	cmp.w	r9, #0
 8018ffc:	dd01      	ble.n	8019002 <_dtoa_r+0xa72>
 8018ffe:	9b04      	ldr	r3, [sp, #16]
 8019000:	3331      	adds	r3, #49	; 0x31
 8019002:	9a02      	ldr	r2, [sp, #8]
 8019004:	7013      	strb	r3, [r2, #0]
 8019006:	e774      	b.n	8018ef2 <_dtoa_r+0x962>
 8019008:	4638      	mov	r0, r7
 801900a:	e7b9      	b.n	8018f80 <_dtoa_r+0x9f0>
 801900c:	2201      	movs	r2, #1
 801900e:	e7e2      	b.n	8018fd6 <_dtoa_r+0xa46>
 8019010:	f1b9 0f00 	cmp.w	r9, #0
 8019014:	db06      	blt.n	8019024 <_dtoa_r+0xa94>
 8019016:	9905      	ldr	r1, [sp, #20]
 8019018:	ea41 0909 	orr.w	r9, r1, r9
 801901c:	9906      	ldr	r1, [sp, #24]
 801901e:	ea59 0101 	orrs.w	r1, r9, r1
 8019022:	d120      	bne.n	8019066 <_dtoa_r+0xad6>
 8019024:	2a00      	cmp	r2, #0
 8019026:	ddec      	ble.n	8019002 <_dtoa_r+0xa72>
 8019028:	4659      	mov	r1, fp
 801902a:	2201      	movs	r2, #1
 801902c:	4620      	mov	r0, r4
 801902e:	9301      	str	r3, [sp, #4]
 8019030:	f000 fbb6 	bl	80197a0 <__lshift>
 8019034:	4631      	mov	r1, r6
 8019036:	4683      	mov	fp, r0
 8019038:	f000 fc1e 	bl	8019878 <__mcmp>
 801903c:	2800      	cmp	r0, #0
 801903e:	9b01      	ldr	r3, [sp, #4]
 8019040:	dc02      	bgt.n	8019048 <_dtoa_r+0xab8>
 8019042:	d1de      	bne.n	8019002 <_dtoa_r+0xa72>
 8019044:	07da      	lsls	r2, r3, #31
 8019046:	d5dc      	bpl.n	8019002 <_dtoa_r+0xa72>
 8019048:	2b39      	cmp	r3, #57	; 0x39
 801904a:	d1d8      	bne.n	8018ffe <_dtoa_r+0xa6e>
 801904c:	9a02      	ldr	r2, [sp, #8]
 801904e:	2339      	movs	r3, #57	; 0x39
 8019050:	7013      	strb	r3, [r2, #0]
 8019052:	462b      	mov	r3, r5
 8019054:	461d      	mov	r5, r3
 8019056:	3b01      	subs	r3, #1
 8019058:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801905c:	2a39      	cmp	r2, #57	; 0x39
 801905e:	d050      	beq.n	8019102 <_dtoa_r+0xb72>
 8019060:	3201      	adds	r2, #1
 8019062:	701a      	strb	r2, [r3, #0]
 8019064:	e745      	b.n	8018ef2 <_dtoa_r+0x962>
 8019066:	2a00      	cmp	r2, #0
 8019068:	dd03      	ble.n	8019072 <_dtoa_r+0xae2>
 801906a:	2b39      	cmp	r3, #57	; 0x39
 801906c:	d0ee      	beq.n	801904c <_dtoa_r+0xabc>
 801906e:	3301      	adds	r3, #1
 8019070:	e7c7      	b.n	8019002 <_dtoa_r+0xa72>
 8019072:	9a01      	ldr	r2, [sp, #4]
 8019074:	9907      	ldr	r1, [sp, #28]
 8019076:	f802 3c01 	strb.w	r3, [r2, #-1]
 801907a:	428a      	cmp	r2, r1
 801907c:	d02a      	beq.n	80190d4 <_dtoa_r+0xb44>
 801907e:	4659      	mov	r1, fp
 8019080:	2300      	movs	r3, #0
 8019082:	220a      	movs	r2, #10
 8019084:	4620      	mov	r0, r4
 8019086:	f000 f9db 	bl	8019440 <__multadd>
 801908a:	45b8      	cmp	r8, r7
 801908c:	4683      	mov	fp, r0
 801908e:	f04f 0300 	mov.w	r3, #0
 8019092:	f04f 020a 	mov.w	r2, #10
 8019096:	4641      	mov	r1, r8
 8019098:	4620      	mov	r0, r4
 801909a:	d107      	bne.n	80190ac <_dtoa_r+0xb1c>
 801909c:	f000 f9d0 	bl	8019440 <__multadd>
 80190a0:	4680      	mov	r8, r0
 80190a2:	4607      	mov	r7, r0
 80190a4:	9b01      	ldr	r3, [sp, #4]
 80190a6:	3301      	adds	r3, #1
 80190a8:	9301      	str	r3, [sp, #4]
 80190aa:	e775      	b.n	8018f98 <_dtoa_r+0xa08>
 80190ac:	f000 f9c8 	bl	8019440 <__multadd>
 80190b0:	4639      	mov	r1, r7
 80190b2:	4680      	mov	r8, r0
 80190b4:	2300      	movs	r3, #0
 80190b6:	220a      	movs	r2, #10
 80190b8:	4620      	mov	r0, r4
 80190ba:	f000 f9c1 	bl	8019440 <__multadd>
 80190be:	4607      	mov	r7, r0
 80190c0:	e7f0      	b.n	80190a4 <_dtoa_r+0xb14>
 80190c2:	f1b9 0f00 	cmp.w	r9, #0
 80190c6:	9a00      	ldr	r2, [sp, #0]
 80190c8:	bfcc      	ite	gt
 80190ca:	464d      	movgt	r5, r9
 80190cc:	2501      	movle	r5, #1
 80190ce:	4415      	add	r5, r2
 80190d0:	f04f 0800 	mov.w	r8, #0
 80190d4:	4659      	mov	r1, fp
 80190d6:	2201      	movs	r2, #1
 80190d8:	4620      	mov	r0, r4
 80190da:	9301      	str	r3, [sp, #4]
 80190dc:	f000 fb60 	bl	80197a0 <__lshift>
 80190e0:	4631      	mov	r1, r6
 80190e2:	4683      	mov	fp, r0
 80190e4:	f000 fbc8 	bl	8019878 <__mcmp>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	dcb2      	bgt.n	8019052 <_dtoa_r+0xac2>
 80190ec:	d102      	bne.n	80190f4 <_dtoa_r+0xb64>
 80190ee:	9b01      	ldr	r3, [sp, #4]
 80190f0:	07db      	lsls	r3, r3, #31
 80190f2:	d4ae      	bmi.n	8019052 <_dtoa_r+0xac2>
 80190f4:	462b      	mov	r3, r5
 80190f6:	461d      	mov	r5, r3
 80190f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80190fc:	2a30      	cmp	r2, #48	; 0x30
 80190fe:	d0fa      	beq.n	80190f6 <_dtoa_r+0xb66>
 8019100:	e6f7      	b.n	8018ef2 <_dtoa_r+0x962>
 8019102:	9a00      	ldr	r2, [sp, #0]
 8019104:	429a      	cmp	r2, r3
 8019106:	d1a5      	bne.n	8019054 <_dtoa_r+0xac4>
 8019108:	f10a 0a01 	add.w	sl, sl, #1
 801910c:	2331      	movs	r3, #49	; 0x31
 801910e:	e779      	b.n	8019004 <_dtoa_r+0xa74>
 8019110:	4b13      	ldr	r3, [pc, #76]	; (8019160 <_dtoa_r+0xbd0>)
 8019112:	f7ff baaf 	b.w	8018674 <_dtoa_r+0xe4>
 8019116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019118:	2b00      	cmp	r3, #0
 801911a:	f47f aa86 	bne.w	801862a <_dtoa_r+0x9a>
 801911e:	4b11      	ldr	r3, [pc, #68]	; (8019164 <_dtoa_r+0xbd4>)
 8019120:	f7ff baa8 	b.w	8018674 <_dtoa_r+0xe4>
 8019124:	f1b9 0f00 	cmp.w	r9, #0
 8019128:	dc03      	bgt.n	8019132 <_dtoa_r+0xba2>
 801912a:	9b05      	ldr	r3, [sp, #20]
 801912c:	2b02      	cmp	r3, #2
 801912e:	f73f aec9 	bgt.w	8018ec4 <_dtoa_r+0x934>
 8019132:	9d00      	ldr	r5, [sp, #0]
 8019134:	4631      	mov	r1, r6
 8019136:	4658      	mov	r0, fp
 8019138:	f7ff f99c 	bl	8018474 <quorem>
 801913c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019140:	f805 3b01 	strb.w	r3, [r5], #1
 8019144:	9a00      	ldr	r2, [sp, #0]
 8019146:	1aaa      	subs	r2, r5, r2
 8019148:	4591      	cmp	r9, r2
 801914a:	ddba      	ble.n	80190c2 <_dtoa_r+0xb32>
 801914c:	4659      	mov	r1, fp
 801914e:	2300      	movs	r3, #0
 8019150:	220a      	movs	r2, #10
 8019152:	4620      	mov	r0, r4
 8019154:	f000 f974 	bl	8019440 <__multadd>
 8019158:	4683      	mov	fp, r0
 801915a:	e7eb      	b.n	8019134 <_dtoa_r+0xba4>
 801915c:	0801ae33 	.word	0x0801ae33
 8019160:	0801ad8c 	.word	0x0801ad8c
 8019164:	0801adb0 	.word	0x0801adb0

08019168 <std>:
 8019168:	2300      	movs	r3, #0
 801916a:	b510      	push	{r4, lr}
 801916c:	4604      	mov	r4, r0
 801916e:	e9c0 3300 	strd	r3, r3, [r0]
 8019172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019176:	6083      	str	r3, [r0, #8]
 8019178:	8181      	strh	r1, [r0, #12]
 801917a:	6643      	str	r3, [r0, #100]	; 0x64
 801917c:	81c2      	strh	r2, [r0, #14]
 801917e:	6183      	str	r3, [r0, #24]
 8019180:	4619      	mov	r1, r3
 8019182:	2208      	movs	r2, #8
 8019184:	305c      	adds	r0, #92	; 0x5c
 8019186:	f7fe fb99 	bl	80178bc <memset>
 801918a:	4b05      	ldr	r3, [pc, #20]	; (80191a0 <std+0x38>)
 801918c:	6263      	str	r3, [r4, #36]	; 0x24
 801918e:	4b05      	ldr	r3, [pc, #20]	; (80191a4 <std+0x3c>)
 8019190:	62a3      	str	r3, [r4, #40]	; 0x28
 8019192:	4b05      	ldr	r3, [pc, #20]	; (80191a8 <std+0x40>)
 8019194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019196:	4b05      	ldr	r3, [pc, #20]	; (80191ac <std+0x44>)
 8019198:	6224      	str	r4, [r4, #32]
 801919a:	6323      	str	r3, [r4, #48]	; 0x30
 801919c:	bd10      	pop	{r4, pc}
 801919e:	bf00      	nop
 80191a0:	0801a001 	.word	0x0801a001
 80191a4:	0801a023 	.word	0x0801a023
 80191a8:	0801a05b 	.word	0x0801a05b
 80191ac:	0801a07f 	.word	0x0801a07f

080191b0 <_cleanup_r>:
 80191b0:	4901      	ldr	r1, [pc, #4]	; (80191b8 <_cleanup_r+0x8>)
 80191b2:	f000 b8af 	b.w	8019314 <_fwalk_reent>
 80191b6:	bf00      	nop
 80191b8:	0801a395 	.word	0x0801a395

080191bc <__sfmoreglue>:
 80191bc:	b570      	push	{r4, r5, r6, lr}
 80191be:	1e4a      	subs	r2, r1, #1
 80191c0:	2568      	movs	r5, #104	; 0x68
 80191c2:	4355      	muls	r5, r2
 80191c4:	460e      	mov	r6, r1
 80191c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80191ca:	f7fe fbcf 	bl	801796c <_malloc_r>
 80191ce:	4604      	mov	r4, r0
 80191d0:	b140      	cbz	r0, 80191e4 <__sfmoreglue+0x28>
 80191d2:	2100      	movs	r1, #0
 80191d4:	e9c0 1600 	strd	r1, r6, [r0]
 80191d8:	300c      	adds	r0, #12
 80191da:	60a0      	str	r0, [r4, #8]
 80191dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80191e0:	f7fe fb6c 	bl	80178bc <memset>
 80191e4:	4620      	mov	r0, r4
 80191e6:	bd70      	pop	{r4, r5, r6, pc}

080191e8 <__sfp_lock_acquire>:
 80191e8:	4801      	ldr	r0, [pc, #4]	; (80191f0 <__sfp_lock_acquire+0x8>)
 80191ea:	f000 b8b8 	b.w	801935e <__retarget_lock_acquire_recursive>
 80191ee:	bf00      	nop
 80191f0:	20001a00 	.word	0x20001a00

080191f4 <__sfp_lock_release>:
 80191f4:	4801      	ldr	r0, [pc, #4]	; (80191fc <__sfp_lock_release+0x8>)
 80191f6:	f000 b8b3 	b.w	8019360 <__retarget_lock_release_recursive>
 80191fa:	bf00      	nop
 80191fc:	20001a00 	.word	0x20001a00

08019200 <__sinit_lock_acquire>:
 8019200:	4801      	ldr	r0, [pc, #4]	; (8019208 <__sinit_lock_acquire+0x8>)
 8019202:	f000 b8ac 	b.w	801935e <__retarget_lock_acquire_recursive>
 8019206:	bf00      	nop
 8019208:	200019fb 	.word	0x200019fb

0801920c <__sinit_lock_release>:
 801920c:	4801      	ldr	r0, [pc, #4]	; (8019214 <__sinit_lock_release+0x8>)
 801920e:	f000 b8a7 	b.w	8019360 <__retarget_lock_release_recursive>
 8019212:	bf00      	nop
 8019214:	200019fb 	.word	0x200019fb

08019218 <__sinit>:
 8019218:	b510      	push	{r4, lr}
 801921a:	4604      	mov	r4, r0
 801921c:	f7ff fff0 	bl	8019200 <__sinit_lock_acquire>
 8019220:	69a3      	ldr	r3, [r4, #24]
 8019222:	b11b      	cbz	r3, 801922c <__sinit+0x14>
 8019224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019228:	f7ff bff0 	b.w	801920c <__sinit_lock_release>
 801922c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019230:	6523      	str	r3, [r4, #80]	; 0x50
 8019232:	4b13      	ldr	r3, [pc, #76]	; (8019280 <__sinit+0x68>)
 8019234:	4a13      	ldr	r2, [pc, #76]	; (8019284 <__sinit+0x6c>)
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	62a2      	str	r2, [r4, #40]	; 0x28
 801923a:	42a3      	cmp	r3, r4
 801923c:	bf04      	itt	eq
 801923e:	2301      	moveq	r3, #1
 8019240:	61a3      	streq	r3, [r4, #24]
 8019242:	4620      	mov	r0, r4
 8019244:	f000 f820 	bl	8019288 <__sfp>
 8019248:	6060      	str	r0, [r4, #4]
 801924a:	4620      	mov	r0, r4
 801924c:	f000 f81c 	bl	8019288 <__sfp>
 8019250:	60a0      	str	r0, [r4, #8]
 8019252:	4620      	mov	r0, r4
 8019254:	f000 f818 	bl	8019288 <__sfp>
 8019258:	2200      	movs	r2, #0
 801925a:	60e0      	str	r0, [r4, #12]
 801925c:	2104      	movs	r1, #4
 801925e:	6860      	ldr	r0, [r4, #4]
 8019260:	f7ff ff82 	bl	8019168 <std>
 8019264:	68a0      	ldr	r0, [r4, #8]
 8019266:	2201      	movs	r2, #1
 8019268:	2109      	movs	r1, #9
 801926a:	f7ff ff7d 	bl	8019168 <std>
 801926e:	68e0      	ldr	r0, [r4, #12]
 8019270:	2202      	movs	r2, #2
 8019272:	2112      	movs	r1, #18
 8019274:	f7ff ff78 	bl	8019168 <std>
 8019278:	2301      	movs	r3, #1
 801927a:	61a3      	str	r3, [r4, #24]
 801927c:	e7d2      	b.n	8019224 <__sinit+0xc>
 801927e:	bf00      	nop
 8019280:	0801ad78 	.word	0x0801ad78
 8019284:	080191b1 	.word	0x080191b1

08019288 <__sfp>:
 8019288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801928a:	4607      	mov	r7, r0
 801928c:	f7ff ffac 	bl	80191e8 <__sfp_lock_acquire>
 8019290:	4b1e      	ldr	r3, [pc, #120]	; (801930c <__sfp+0x84>)
 8019292:	681e      	ldr	r6, [r3, #0]
 8019294:	69b3      	ldr	r3, [r6, #24]
 8019296:	b913      	cbnz	r3, 801929e <__sfp+0x16>
 8019298:	4630      	mov	r0, r6
 801929a:	f7ff ffbd 	bl	8019218 <__sinit>
 801929e:	3648      	adds	r6, #72	; 0x48
 80192a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80192a4:	3b01      	subs	r3, #1
 80192a6:	d503      	bpl.n	80192b0 <__sfp+0x28>
 80192a8:	6833      	ldr	r3, [r6, #0]
 80192aa:	b30b      	cbz	r3, 80192f0 <__sfp+0x68>
 80192ac:	6836      	ldr	r6, [r6, #0]
 80192ae:	e7f7      	b.n	80192a0 <__sfp+0x18>
 80192b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80192b4:	b9d5      	cbnz	r5, 80192ec <__sfp+0x64>
 80192b6:	4b16      	ldr	r3, [pc, #88]	; (8019310 <__sfp+0x88>)
 80192b8:	60e3      	str	r3, [r4, #12]
 80192ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80192be:	6665      	str	r5, [r4, #100]	; 0x64
 80192c0:	f000 f84c 	bl	801935c <__retarget_lock_init_recursive>
 80192c4:	f7ff ff96 	bl	80191f4 <__sfp_lock_release>
 80192c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80192cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80192d0:	6025      	str	r5, [r4, #0]
 80192d2:	61a5      	str	r5, [r4, #24]
 80192d4:	2208      	movs	r2, #8
 80192d6:	4629      	mov	r1, r5
 80192d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80192dc:	f7fe faee 	bl	80178bc <memset>
 80192e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80192e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80192e8:	4620      	mov	r0, r4
 80192ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192ec:	3468      	adds	r4, #104	; 0x68
 80192ee:	e7d9      	b.n	80192a4 <__sfp+0x1c>
 80192f0:	2104      	movs	r1, #4
 80192f2:	4638      	mov	r0, r7
 80192f4:	f7ff ff62 	bl	80191bc <__sfmoreglue>
 80192f8:	4604      	mov	r4, r0
 80192fa:	6030      	str	r0, [r6, #0]
 80192fc:	2800      	cmp	r0, #0
 80192fe:	d1d5      	bne.n	80192ac <__sfp+0x24>
 8019300:	f7ff ff78 	bl	80191f4 <__sfp_lock_release>
 8019304:	230c      	movs	r3, #12
 8019306:	603b      	str	r3, [r7, #0]
 8019308:	e7ee      	b.n	80192e8 <__sfp+0x60>
 801930a:	bf00      	nop
 801930c:	0801ad78 	.word	0x0801ad78
 8019310:	ffff0001 	.word	0xffff0001

08019314 <_fwalk_reent>:
 8019314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019318:	4606      	mov	r6, r0
 801931a:	4688      	mov	r8, r1
 801931c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019320:	2700      	movs	r7, #0
 8019322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019326:	f1b9 0901 	subs.w	r9, r9, #1
 801932a:	d505      	bpl.n	8019338 <_fwalk_reent+0x24>
 801932c:	6824      	ldr	r4, [r4, #0]
 801932e:	2c00      	cmp	r4, #0
 8019330:	d1f7      	bne.n	8019322 <_fwalk_reent+0xe>
 8019332:	4638      	mov	r0, r7
 8019334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019338:	89ab      	ldrh	r3, [r5, #12]
 801933a:	2b01      	cmp	r3, #1
 801933c:	d907      	bls.n	801934e <_fwalk_reent+0x3a>
 801933e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019342:	3301      	adds	r3, #1
 8019344:	d003      	beq.n	801934e <_fwalk_reent+0x3a>
 8019346:	4629      	mov	r1, r5
 8019348:	4630      	mov	r0, r6
 801934a:	47c0      	blx	r8
 801934c:	4307      	orrs	r7, r0
 801934e:	3568      	adds	r5, #104	; 0x68
 8019350:	e7e9      	b.n	8019326 <_fwalk_reent+0x12>
	...

08019354 <_localeconv_r>:
 8019354:	4800      	ldr	r0, [pc, #0]	; (8019358 <_localeconv_r+0x4>)
 8019356:	4770      	bx	lr
 8019358:	20000244 	.word	0x20000244

0801935c <__retarget_lock_init_recursive>:
 801935c:	4770      	bx	lr

0801935e <__retarget_lock_acquire_recursive>:
 801935e:	4770      	bx	lr

08019360 <__retarget_lock_release_recursive>:
 8019360:	4770      	bx	lr
	...

08019364 <__malloc_lock>:
 8019364:	4801      	ldr	r0, [pc, #4]	; (801936c <__malloc_lock+0x8>)
 8019366:	f7ff bffa 	b.w	801935e <__retarget_lock_acquire_recursive>
 801936a:	bf00      	nop
 801936c:	200019fc 	.word	0x200019fc

08019370 <__malloc_unlock>:
 8019370:	4801      	ldr	r0, [pc, #4]	; (8019378 <__malloc_unlock+0x8>)
 8019372:	f7ff bff5 	b.w	8019360 <__retarget_lock_release_recursive>
 8019376:	bf00      	nop
 8019378:	200019fc 	.word	0x200019fc

0801937c <_Balloc>:
 801937c:	b570      	push	{r4, r5, r6, lr}
 801937e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019380:	4604      	mov	r4, r0
 8019382:	460d      	mov	r5, r1
 8019384:	b976      	cbnz	r6, 80193a4 <_Balloc+0x28>
 8019386:	2010      	movs	r0, #16
 8019388:	f7fe fa60 	bl	801784c <malloc>
 801938c:	4602      	mov	r2, r0
 801938e:	6260      	str	r0, [r4, #36]	; 0x24
 8019390:	b920      	cbnz	r0, 801939c <_Balloc+0x20>
 8019392:	4b18      	ldr	r3, [pc, #96]	; (80193f4 <_Balloc+0x78>)
 8019394:	4818      	ldr	r0, [pc, #96]	; (80193f8 <_Balloc+0x7c>)
 8019396:	2166      	movs	r1, #102	; 0x66
 8019398:	f000 ff48 	bl	801a22c <__assert_func>
 801939c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80193a0:	6006      	str	r6, [r0, #0]
 80193a2:	60c6      	str	r6, [r0, #12]
 80193a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80193a6:	68f3      	ldr	r3, [r6, #12]
 80193a8:	b183      	cbz	r3, 80193cc <_Balloc+0x50>
 80193aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80193ac:	68db      	ldr	r3, [r3, #12]
 80193ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80193b2:	b9b8      	cbnz	r0, 80193e4 <_Balloc+0x68>
 80193b4:	2101      	movs	r1, #1
 80193b6:	fa01 f605 	lsl.w	r6, r1, r5
 80193ba:	1d72      	adds	r2, r6, #5
 80193bc:	0092      	lsls	r2, r2, #2
 80193be:	4620      	mov	r0, r4
 80193c0:	f000 fb5a 	bl	8019a78 <_calloc_r>
 80193c4:	b160      	cbz	r0, 80193e0 <_Balloc+0x64>
 80193c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80193ca:	e00e      	b.n	80193ea <_Balloc+0x6e>
 80193cc:	2221      	movs	r2, #33	; 0x21
 80193ce:	2104      	movs	r1, #4
 80193d0:	4620      	mov	r0, r4
 80193d2:	f000 fb51 	bl	8019a78 <_calloc_r>
 80193d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80193d8:	60f0      	str	r0, [r6, #12]
 80193da:	68db      	ldr	r3, [r3, #12]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d1e4      	bne.n	80193aa <_Balloc+0x2e>
 80193e0:	2000      	movs	r0, #0
 80193e2:	bd70      	pop	{r4, r5, r6, pc}
 80193e4:	6802      	ldr	r2, [r0, #0]
 80193e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80193ea:	2300      	movs	r3, #0
 80193ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80193f0:	e7f7      	b.n	80193e2 <_Balloc+0x66>
 80193f2:	bf00      	nop
 80193f4:	0801adbd 	.word	0x0801adbd
 80193f8:	0801aea4 	.word	0x0801aea4

080193fc <_Bfree>:
 80193fc:	b570      	push	{r4, r5, r6, lr}
 80193fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019400:	4605      	mov	r5, r0
 8019402:	460c      	mov	r4, r1
 8019404:	b976      	cbnz	r6, 8019424 <_Bfree+0x28>
 8019406:	2010      	movs	r0, #16
 8019408:	f7fe fa20 	bl	801784c <malloc>
 801940c:	4602      	mov	r2, r0
 801940e:	6268      	str	r0, [r5, #36]	; 0x24
 8019410:	b920      	cbnz	r0, 801941c <_Bfree+0x20>
 8019412:	4b09      	ldr	r3, [pc, #36]	; (8019438 <_Bfree+0x3c>)
 8019414:	4809      	ldr	r0, [pc, #36]	; (801943c <_Bfree+0x40>)
 8019416:	218a      	movs	r1, #138	; 0x8a
 8019418:	f000 ff08 	bl	801a22c <__assert_func>
 801941c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019420:	6006      	str	r6, [r0, #0]
 8019422:	60c6      	str	r6, [r0, #12]
 8019424:	b13c      	cbz	r4, 8019436 <_Bfree+0x3a>
 8019426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019428:	6862      	ldr	r2, [r4, #4]
 801942a:	68db      	ldr	r3, [r3, #12]
 801942c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019430:	6021      	str	r1, [r4, #0]
 8019432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019436:	bd70      	pop	{r4, r5, r6, pc}
 8019438:	0801adbd 	.word	0x0801adbd
 801943c:	0801aea4 	.word	0x0801aea4

08019440 <__multadd>:
 8019440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019444:	690e      	ldr	r6, [r1, #16]
 8019446:	4607      	mov	r7, r0
 8019448:	4698      	mov	r8, r3
 801944a:	460c      	mov	r4, r1
 801944c:	f101 0014 	add.w	r0, r1, #20
 8019450:	2300      	movs	r3, #0
 8019452:	6805      	ldr	r5, [r0, #0]
 8019454:	b2a9      	uxth	r1, r5
 8019456:	fb02 8101 	mla	r1, r2, r1, r8
 801945a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801945e:	0c2d      	lsrs	r5, r5, #16
 8019460:	fb02 c505 	mla	r5, r2, r5, ip
 8019464:	b289      	uxth	r1, r1
 8019466:	3301      	adds	r3, #1
 8019468:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801946c:	429e      	cmp	r6, r3
 801946e:	f840 1b04 	str.w	r1, [r0], #4
 8019472:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019476:	dcec      	bgt.n	8019452 <__multadd+0x12>
 8019478:	f1b8 0f00 	cmp.w	r8, #0
 801947c:	d022      	beq.n	80194c4 <__multadd+0x84>
 801947e:	68a3      	ldr	r3, [r4, #8]
 8019480:	42b3      	cmp	r3, r6
 8019482:	dc19      	bgt.n	80194b8 <__multadd+0x78>
 8019484:	6861      	ldr	r1, [r4, #4]
 8019486:	4638      	mov	r0, r7
 8019488:	3101      	adds	r1, #1
 801948a:	f7ff ff77 	bl	801937c <_Balloc>
 801948e:	4605      	mov	r5, r0
 8019490:	b928      	cbnz	r0, 801949e <__multadd+0x5e>
 8019492:	4602      	mov	r2, r0
 8019494:	4b0d      	ldr	r3, [pc, #52]	; (80194cc <__multadd+0x8c>)
 8019496:	480e      	ldr	r0, [pc, #56]	; (80194d0 <__multadd+0x90>)
 8019498:	21b5      	movs	r1, #181	; 0xb5
 801949a:	f000 fec7 	bl	801a22c <__assert_func>
 801949e:	6922      	ldr	r2, [r4, #16]
 80194a0:	3202      	adds	r2, #2
 80194a2:	f104 010c 	add.w	r1, r4, #12
 80194a6:	0092      	lsls	r2, r2, #2
 80194a8:	300c      	adds	r0, #12
 80194aa:	f7fe f9df 	bl	801786c <memcpy>
 80194ae:	4621      	mov	r1, r4
 80194b0:	4638      	mov	r0, r7
 80194b2:	f7ff ffa3 	bl	80193fc <_Bfree>
 80194b6:	462c      	mov	r4, r5
 80194b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80194bc:	3601      	adds	r6, #1
 80194be:	f8c3 8014 	str.w	r8, [r3, #20]
 80194c2:	6126      	str	r6, [r4, #16]
 80194c4:	4620      	mov	r0, r4
 80194c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194ca:	bf00      	nop
 80194cc:	0801ae33 	.word	0x0801ae33
 80194d0:	0801aea4 	.word	0x0801aea4

080194d4 <__hi0bits>:
 80194d4:	0c03      	lsrs	r3, r0, #16
 80194d6:	041b      	lsls	r3, r3, #16
 80194d8:	b9d3      	cbnz	r3, 8019510 <__hi0bits+0x3c>
 80194da:	0400      	lsls	r0, r0, #16
 80194dc:	2310      	movs	r3, #16
 80194de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80194e2:	bf04      	itt	eq
 80194e4:	0200      	lsleq	r0, r0, #8
 80194e6:	3308      	addeq	r3, #8
 80194e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80194ec:	bf04      	itt	eq
 80194ee:	0100      	lsleq	r0, r0, #4
 80194f0:	3304      	addeq	r3, #4
 80194f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80194f6:	bf04      	itt	eq
 80194f8:	0080      	lsleq	r0, r0, #2
 80194fa:	3302      	addeq	r3, #2
 80194fc:	2800      	cmp	r0, #0
 80194fe:	db05      	blt.n	801950c <__hi0bits+0x38>
 8019500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019504:	f103 0301 	add.w	r3, r3, #1
 8019508:	bf08      	it	eq
 801950a:	2320      	moveq	r3, #32
 801950c:	4618      	mov	r0, r3
 801950e:	4770      	bx	lr
 8019510:	2300      	movs	r3, #0
 8019512:	e7e4      	b.n	80194de <__hi0bits+0xa>

08019514 <__lo0bits>:
 8019514:	6803      	ldr	r3, [r0, #0]
 8019516:	f013 0207 	ands.w	r2, r3, #7
 801951a:	4601      	mov	r1, r0
 801951c:	d00b      	beq.n	8019536 <__lo0bits+0x22>
 801951e:	07da      	lsls	r2, r3, #31
 8019520:	d424      	bmi.n	801956c <__lo0bits+0x58>
 8019522:	0798      	lsls	r0, r3, #30
 8019524:	bf49      	itett	mi
 8019526:	085b      	lsrmi	r3, r3, #1
 8019528:	089b      	lsrpl	r3, r3, #2
 801952a:	2001      	movmi	r0, #1
 801952c:	600b      	strmi	r3, [r1, #0]
 801952e:	bf5c      	itt	pl
 8019530:	600b      	strpl	r3, [r1, #0]
 8019532:	2002      	movpl	r0, #2
 8019534:	4770      	bx	lr
 8019536:	b298      	uxth	r0, r3
 8019538:	b9b0      	cbnz	r0, 8019568 <__lo0bits+0x54>
 801953a:	0c1b      	lsrs	r3, r3, #16
 801953c:	2010      	movs	r0, #16
 801953e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019542:	bf04      	itt	eq
 8019544:	0a1b      	lsreq	r3, r3, #8
 8019546:	3008      	addeq	r0, #8
 8019548:	071a      	lsls	r2, r3, #28
 801954a:	bf04      	itt	eq
 801954c:	091b      	lsreq	r3, r3, #4
 801954e:	3004      	addeq	r0, #4
 8019550:	079a      	lsls	r2, r3, #30
 8019552:	bf04      	itt	eq
 8019554:	089b      	lsreq	r3, r3, #2
 8019556:	3002      	addeq	r0, #2
 8019558:	07da      	lsls	r2, r3, #31
 801955a:	d403      	bmi.n	8019564 <__lo0bits+0x50>
 801955c:	085b      	lsrs	r3, r3, #1
 801955e:	f100 0001 	add.w	r0, r0, #1
 8019562:	d005      	beq.n	8019570 <__lo0bits+0x5c>
 8019564:	600b      	str	r3, [r1, #0]
 8019566:	4770      	bx	lr
 8019568:	4610      	mov	r0, r2
 801956a:	e7e8      	b.n	801953e <__lo0bits+0x2a>
 801956c:	2000      	movs	r0, #0
 801956e:	4770      	bx	lr
 8019570:	2020      	movs	r0, #32
 8019572:	4770      	bx	lr

08019574 <__i2b>:
 8019574:	b510      	push	{r4, lr}
 8019576:	460c      	mov	r4, r1
 8019578:	2101      	movs	r1, #1
 801957a:	f7ff feff 	bl	801937c <_Balloc>
 801957e:	4602      	mov	r2, r0
 8019580:	b928      	cbnz	r0, 801958e <__i2b+0x1a>
 8019582:	4b05      	ldr	r3, [pc, #20]	; (8019598 <__i2b+0x24>)
 8019584:	4805      	ldr	r0, [pc, #20]	; (801959c <__i2b+0x28>)
 8019586:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801958a:	f000 fe4f 	bl	801a22c <__assert_func>
 801958e:	2301      	movs	r3, #1
 8019590:	6144      	str	r4, [r0, #20]
 8019592:	6103      	str	r3, [r0, #16]
 8019594:	bd10      	pop	{r4, pc}
 8019596:	bf00      	nop
 8019598:	0801ae33 	.word	0x0801ae33
 801959c:	0801aea4 	.word	0x0801aea4

080195a0 <__multiply>:
 80195a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195a4:	4614      	mov	r4, r2
 80195a6:	690a      	ldr	r2, [r1, #16]
 80195a8:	6923      	ldr	r3, [r4, #16]
 80195aa:	429a      	cmp	r2, r3
 80195ac:	bfb8      	it	lt
 80195ae:	460b      	movlt	r3, r1
 80195b0:	460d      	mov	r5, r1
 80195b2:	bfbc      	itt	lt
 80195b4:	4625      	movlt	r5, r4
 80195b6:	461c      	movlt	r4, r3
 80195b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80195bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80195c0:	68ab      	ldr	r3, [r5, #8]
 80195c2:	6869      	ldr	r1, [r5, #4]
 80195c4:	eb0a 0709 	add.w	r7, sl, r9
 80195c8:	42bb      	cmp	r3, r7
 80195ca:	b085      	sub	sp, #20
 80195cc:	bfb8      	it	lt
 80195ce:	3101      	addlt	r1, #1
 80195d0:	f7ff fed4 	bl	801937c <_Balloc>
 80195d4:	b930      	cbnz	r0, 80195e4 <__multiply+0x44>
 80195d6:	4602      	mov	r2, r0
 80195d8:	4b42      	ldr	r3, [pc, #264]	; (80196e4 <__multiply+0x144>)
 80195da:	4843      	ldr	r0, [pc, #268]	; (80196e8 <__multiply+0x148>)
 80195dc:	f240 115d 	movw	r1, #349	; 0x15d
 80195e0:	f000 fe24 	bl	801a22c <__assert_func>
 80195e4:	f100 0614 	add.w	r6, r0, #20
 80195e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80195ec:	4633      	mov	r3, r6
 80195ee:	2200      	movs	r2, #0
 80195f0:	4543      	cmp	r3, r8
 80195f2:	d31e      	bcc.n	8019632 <__multiply+0x92>
 80195f4:	f105 0c14 	add.w	ip, r5, #20
 80195f8:	f104 0314 	add.w	r3, r4, #20
 80195fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019600:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019604:	9202      	str	r2, [sp, #8]
 8019606:	ebac 0205 	sub.w	r2, ip, r5
 801960a:	3a15      	subs	r2, #21
 801960c:	f022 0203 	bic.w	r2, r2, #3
 8019610:	3204      	adds	r2, #4
 8019612:	f105 0115 	add.w	r1, r5, #21
 8019616:	458c      	cmp	ip, r1
 8019618:	bf38      	it	cc
 801961a:	2204      	movcc	r2, #4
 801961c:	9201      	str	r2, [sp, #4]
 801961e:	9a02      	ldr	r2, [sp, #8]
 8019620:	9303      	str	r3, [sp, #12]
 8019622:	429a      	cmp	r2, r3
 8019624:	d808      	bhi.n	8019638 <__multiply+0x98>
 8019626:	2f00      	cmp	r7, #0
 8019628:	dc55      	bgt.n	80196d6 <__multiply+0x136>
 801962a:	6107      	str	r7, [r0, #16]
 801962c:	b005      	add	sp, #20
 801962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019632:	f843 2b04 	str.w	r2, [r3], #4
 8019636:	e7db      	b.n	80195f0 <__multiply+0x50>
 8019638:	f8b3 a000 	ldrh.w	sl, [r3]
 801963c:	f1ba 0f00 	cmp.w	sl, #0
 8019640:	d020      	beq.n	8019684 <__multiply+0xe4>
 8019642:	f105 0e14 	add.w	lr, r5, #20
 8019646:	46b1      	mov	r9, r6
 8019648:	2200      	movs	r2, #0
 801964a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801964e:	f8d9 b000 	ldr.w	fp, [r9]
 8019652:	b2a1      	uxth	r1, r4
 8019654:	fa1f fb8b 	uxth.w	fp, fp
 8019658:	fb0a b101 	mla	r1, sl, r1, fp
 801965c:	4411      	add	r1, r2
 801965e:	f8d9 2000 	ldr.w	r2, [r9]
 8019662:	0c24      	lsrs	r4, r4, #16
 8019664:	0c12      	lsrs	r2, r2, #16
 8019666:	fb0a 2404 	mla	r4, sl, r4, r2
 801966a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801966e:	b289      	uxth	r1, r1
 8019670:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019674:	45f4      	cmp	ip, lr
 8019676:	f849 1b04 	str.w	r1, [r9], #4
 801967a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801967e:	d8e4      	bhi.n	801964a <__multiply+0xaa>
 8019680:	9901      	ldr	r1, [sp, #4]
 8019682:	5072      	str	r2, [r6, r1]
 8019684:	9a03      	ldr	r2, [sp, #12]
 8019686:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801968a:	3304      	adds	r3, #4
 801968c:	f1b9 0f00 	cmp.w	r9, #0
 8019690:	d01f      	beq.n	80196d2 <__multiply+0x132>
 8019692:	6834      	ldr	r4, [r6, #0]
 8019694:	f105 0114 	add.w	r1, r5, #20
 8019698:	46b6      	mov	lr, r6
 801969a:	f04f 0a00 	mov.w	sl, #0
 801969e:	880a      	ldrh	r2, [r1, #0]
 80196a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80196a4:	fb09 b202 	mla	r2, r9, r2, fp
 80196a8:	4492      	add	sl, r2
 80196aa:	b2a4      	uxth	r4, r4
 80196ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80196b0:	f84e 4b04 	str.w	r4, [lr], #4
 80196b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80196b8:	f8be 2000 	ldrh.w	r2, [lr]
 80196bc:	0c24      	lsrs	r4, r4, #16
 80196be:	fb09 2404 	mla	r4, r9, r4, r2
 80196c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80196c6:	458c      	cmp	ip, r1
 80196c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80196cc:	d8e7      	bhi.n	801969e <__multiply+0xfe>
 80196ce:	9a01      	ldr	r2, [sp, #4]
 80196d0:	50b4      	str	r4, [r6, r2]
 80196d2:	3604      	adds	r6, #4
 80196d4:	e7a3      	b.n	801961e <__multiply+0x7e>
 80196d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d1a5      	bne.n	801962a <__multiply+0x8a>
 80196de:	3f01      	subs	r7, #1
 80196e0:	e7a1      	b.n	8019626 <__multiply+0x86>
 80196e2:	bf00      	nop
 80196e4:	0801ae33 	.word	0x0801ae33
 80196e8:	0801aea4 	.word	0x0801aea4

080196ec <__pow5mult>:
 80196ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196f0:	4615      	mov	r5, r2
 80196f2:	f012 0203 	ands.w	r2, r2, #3
 80196f6:	4606      	mov	r6, r0
 80196f8:	460f      	mov	r7, r1
 80196fa:	d007      	beq.n	801970c <__pow5mult+0x20>
 80196fc:	4c25      	ldr	r4, [pc, #148]	; (8019794 <__pow5mult+0xa8>)
 80196fe:	3a01      	subs	r2, #1
 8019700:	2300      	movs	r3, #0
 8019702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019706:	f7ff fe9b 	bl	8019440 <__multadd>
 801970a:	4607      	mov	r7, r0
 801970c:	10ad      	asrs	r5, r5, #2
 801970e:	d03d      	beq.n	801978c <__pow5mult+0xa0>
 8019710:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019712:	b97c      	cbnz	r4, 8019734 <__pow5mult+0x48>
 8019714:	2010      	movs	r0, #16
 8019716:	f7fe f899 	bl	801784c <malloc>
 801971a:	4602      	mov	r2, r0
 801971c:	6270      	str	r0, [r6, #36]	; 0x24
 801971e:	b928      	cbnz	r0, 801972c <__pow5mult+0x40>
 8019720:	4b1d      	ldr	r3, [pc, #116]	; (8019798 <__pow5mult+0xac>)
 8019722:	481e      	ldr	r0, [pc, #120]	; (801979c <__pow5mult+0xb0>)
 8019724:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019728:	f000 fd80 	bl	801a22c <__assert_func>
 801972c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019730:	6004      	str	r4, [r0, #0]
 8019732:	60c4      	str	r4, [r0, #12]
 8019734:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801973c:	b94c      	cbnz	r4, 8019752 <__pow5mult+0x66>
 801973e:	f240 2171 	movw	r1, #625	; 0x271
 8019742:	4630      	mov	r0, r6
 8019744:	f7ff ff16 	bl	8019574 <__i2b>
 8019748:	2300      	movs	r3, #0
 801974a:	f8c8 0008 	str.w	r0, [r8, #8]
 801974e:	4604      	mov	r4, r0
 8019750:	6003      	str	r3, [r0, #0]
 8019752:	f04f 0900 	mov.w	r9, #0
 8019756:	07eb      	lsls	r3, r5, #31
 8019758:	d50a      	bpl.n	8019770 <__pow5mult+0x84>
 801975a:	4639      	mov	r1, r7
 801975c:	4622      	mov	r2, r4
 801975e:	4630      	mov	r0, r6
 8019760:	f7ff ff1e 	bl	80195a0 <__multiply>
 8019764:	4639      	mov	r1, r7
 8019766:	4680      	mov	r8, r0
 8019768:	4630      	mov	r0, r6
 801976a:	f7ff fe47 	bl	80193fc <_Bfree>
 801976e:	4647      	mov	r7, r8
 8019770:	106d      	asrs	r5, r5, #1
 8019772:	d00b      	beq.n	801978c <__pow5mult+0xa0>
 8019774:	6820      	ldr	r0, [r4, #0]
 8019776:	b938      	cbnz	r0, 8019788 <__pow5mult+0x9c>
 8019778:	4622      	mov	r2, r4
 801977a:	4621      	mov	r1, r4
 801977c:	4630      	mov	r0, r6
 801977e:	f7ff ff0f 	bl	80195a0 <__multiply>
 8019782:	6020      	str	r0, [r4, #0]
 8019784:	f8c0 9000 	str.w	r9, [r0]
 8019788:	4604      	mov	r4, r0
 801978a:	e7e4      	b.n	8019756 <__pow5mult+0x6a>
 801978c:	4638      	mov	r0, r7
 801978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019792:	bf00      	nop
 8019794:	0801aff8 	.word	0x0801aff8
 8019798:	0801adbd 	.word	0x0801adbd
 801979c:	0801aea4 	.word	0x0801aea4

080197a0 <__lshift>:
 80197a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197a4:	460c      	mov	r4, r1
 80197a6:	6849      	ldr	r1, [r1, #4]
 80197a8:	6923      	ldr	r3, [r4, #16]
 80197aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80197ae:	68a3      	ldr	r3, [r4, #8]
 80197b0:	4607      	mov	r7, r0
 80197b2:	4691      	mov	r9, r2
 80197b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80197b8:	f108 0601 	add.w	r6, r8, #1
 80197bc:	42b3      	cmp	r3, r6
 80197be:	db0b      	blt.n	80197d8 <__lshift+0x38>
 80197c0:	4638      	mov	r0, r7
 80197c2:	f7ff fddb 	bl	801937c <_Balloc>
 80197c6:	4605      	mov	r5, r0
 80197c8:	b948      	cbnz	r0, 80197de <__lshift+0x3e>
 80197ca:	4602      	mov	r2, r0
 80197cc:	4b28      	ldr	r3, [pc, #160]	; (8019870 <__lshift+0xd0>)
 80197ce:	4829      	ldr	r0, [pc, #164]	; (8019874 <__lshift+0xd4>)
 80197d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80197d4:	f000 fd2a 	bl	801a22c <__assert_func>
 80197d8:	3101      	adds	r1, #1
 80197da:	005b      	lsls	r3, r3, #1
 80197dc:	e7ee      	b.n	80197bc <__lshift+0x1c>
 80197de:	2300      	movs	r3, #0
 80197e0:	f100 0114 	add.w	r1, r0, #20
 80197e4:	f100 0210 	add.w	r2, r0, #16
 80197e8:	4618      	mov	r0, r3
 80197ea:	4553      	cmp	r3, sl
 80197ec:	db33      	blt.n	8019856 <__lshift+0xb6>
 80197ee:	6920      	ldr	r0, [r4, #16]
 80197f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80197f4:	f104 0314 	add.w	r3, r4, #20
 80197f8:	f019 091f 	ands.w	r9, r9, #31
 80197fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019804:	d02b      	beq.n	801985e <__lshift+0xbe>
 8019806:	f1c9 0e20 	rsb	lr, r9, #32
 801980a:	468a      	mov	sl, r1
 801980c:	2200      	movs	r2, #0
 801980e:	6818      	ldr	r0, [r3, #0]
 8019810:	fa00 f009 	lsl.w	r0, r0, r9
 8019814:	4302      	orrs	r2, r0
 8019816:	f84a 2b04 	str.w	r2, [sl], #4
 801981a:	f853 2b04 	ldr.w	r2, [r3], #4
 801981e:	459c      	cmp	ip, r3
 8019820:	fa22 f20e 	lsr.w	r2, r2, lr
 8019824:	d8f3      	bhi.n	801980e <__lshift+0x6e>
 8019826:	ebac 0304 	sub.w	r3, ip, r4
 801982a:	3b15      	subs	r3, #21
 801982c:	f023 0303 	bic.w	r3, r3, #3
 8019830:	3304      	adds	r3, #4
 8019832:	f104 0015 	add.w	r0, r4, #21
 8019836:	4584      	cmp	ip, r0
 8019838:	bf38      	it	cc
 801983a:	2304      	movcc	r3, #4
 801983c:	50ca      	str	r2, [r1, r3]
 801983e:	b10a      	cbz	r2, 8019844 <__lshift+0xa4>
 8019840:	f108 0602 	add.w	r6, r8, #2
 8019844:	3e01      	subs	r6, #1
 8019846:	4638      	mov	r0, r7
 8019848:	612e      	str	r6, [r5, #16]
 801984a:	4621      	mov	r1, r4
 801984c:	f7ff fdd6 	bl	80193fc <_Bfree>
 8019850:	4628      	mov	r0, r5
 8019852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019856:	f842 0f04 	str.w	r0, [r2, #4]!
 801985a:	3301      	adds	r3, #1
 801985c:	e7c5      	b.n	80197ea <__lshift+0x4a>
 801985e:	3904      	subs	r1, #4
 8019860:	f853 2b04 	ldr.w	r2, [r3], #4
 8019864:	f841 2f04 	str.w	r2, [r1, #4]!
 8019868:	459c      	cmp	ip, r3
 801986a:	d8f9      	bhi.n	8019860 <__lshift+0xc0>
 801986c:	e7ea      	b.n	8019844 <__lshift+0xa4>
 801986e:	bf00      	nop
 8019870:	0801ae33 	.word	0x0801ae33
 8019874:	0801aea4 	.word	0x0801aea4

08019878 <__mcmp>:
 8019878:	b530      	push	{r4, r5, lr}
 801987a:	6902      	ldr	r2, [r0, #16]
 801987c:	690c      	ldr	r4, [r1, #16]
 801987e:	1b12      	subs	r2, r2, r4
 8019880:	d10e      	bne.n	80198a0 <__mcmp+0x28>
 8019882:	f100 0314 	add.w	r3, r0, #20
 8019886:	3114      	adds	r1, #20
 8019888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801988c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019898:	42a5      	cmp	r5, r4
 801989a:	d003      	beq.n	80198a4 <__mcmp+0x2c>
 801989c:	d305      	bcc.n	80198aa <__mcmp+0x32>
 801989e:	2201      	movs	r2, #1
 80198a0:	4610      	mov	r0, r2
 80198a2:	bd30      	pop	{r4, r5, pc}
 80198a4:	4283      	cmp	r3, r0
 80198a6:	d3f3      	bcc.n	8019890 <__mcmp+0x18>
 80198a8:	e7fa      	b.n	80198a0 <__mcmp+0x28>
 80198aa:	f04f 32ff 	mov.w	r2, #4294967295
 80198ae:	e7f7      	b.n	80198a0 <__mcmp+0x28>

080198b0 <__mdiff>:
 80198b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198b4:	460c      	mov	r4, r1
 80198b6:	4606      	mov	r6, r0
 80198b8:	4611      	mov	r1, r2
 80198ba:	4620      	mov	r0, r4
 80198bc:	4617      	mov	r7, r2
 80198be:	f7ff ffdb 	bl	8019878 <__mcmp>
 80198c2:	1e05      	subs	r5, r0, #0
 80198c4:	d110      	bne.n	80198e8 <__mdiff+0x38>
 80198c6:	4629      	mov	r1, r5
 80198c8:	4630      	mov	r0, r6
 80198ca:	f7ff fd57 	bl	801937c <_Balloc>
 80198ce:	b930      	cbnz	r0, 80198de <__mdiff+0x2e>
 80198d0:	4b39      	ldr	r3, [pc, #228]	; (80199b8 <__mdiff+0x108>)
 80198d2:	4602      	mov	r2, r0
 80198d4:	f240 2132 	movw	r1, #562	; 0x232
 80198d8:	4838      	ldr	r0, [pc, #224]	; (80199bc <__mdiff+0x10c>)
 80198da:	f000 fca7 	bl	801a22c <__assert_func>
 80198de:	2301      	movs	r3, #1
 80198e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80198e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198e8:	bfa4      	itt	ge
 80198ea:	463b      	movge	r3, r7
 80198ec:	4627      	movge	r7, r4
 80198ee:	4630      	mov	r0, r6
 80198f0:	6879      	ldr	r1, [r7, #4]
 80198f2:	bfa6      	itte	ge
 80198f4:	461c      	movge	r4, r3
 80198f6:	2500      	movge	r5, #0
 80198f8:	2501      	movlt	r5, #1
 80198fa:	f7ff fd3f 	bl	801937c <_Balloc>
 80198fe:	b920      	cbnz	r0, 801990a <__mdiff+0x5a>
 8019900:	4b2d      	ldr	r3, [pc, #180]	; (80199b8 <__mdiff+0x108>)
 8019902:	4602      	mov	r2, r0
 8019904:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019908:	e7e6      	b.n	80198d8 <__mdiff+0x28>
 801990a:	693e      	ldr	r6, [r7, #16]
 801990c:	60c5      	str	r5, [r0, #12]
 801990e:	6925      	ldr	r5, [r4, #16]
 8019910:	f107 0114 	add.w	r1, r7, #20
 8019914:	f104 0914 	add.w	r9, r4, #20
 8019918:	f100 0e14 	add.w	lr, r0, #20
 801991c:	f107 0210 	add.w	r2, r7, #16
 8019920:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019924:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019928:	46f2      	mov	sl, lr
 801992a:	2700      	movs	r7, #0
 801992c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019934:	fa1f f883 	uxth.w	r8, r3
 8019938:	fa17 f78b 	uxtah	r7, r7, fp
 801993c:	0c1b      	lsrs	r3, r3, #16
 801993e:	eba7 0808 	sub.w	r8, r7, r8
 8019942:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019946:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801994a:	fa1f f888 	uxth.w	r8, r8
 801994e:	141f      	asrs	r7, r3, #16
 8019950:	454d      	cmp	r5, r9
 8019952:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019956:	f84a 3b04 	str.w	r3, [sl], #4
 801995a:	d8e7      	bhi.n	801992c <__mdiff+0x7c>
 801995c:	1b2b      	subs	r3, r5, r4
 801995e:	3b15      	subs	r3, #21
 8019960:	f023 0303 	bic.w	r3, r3, #3
 8019964:	3304      	adds	r3, #4
 8019966:	3415      	adds	r4, #21
 8019968:	42a5      	cmp	r5, r4
 801996a:	bf38      	it	cc
 801996c:	2304      	movcc	r3, #4
 801996e:	4419      	add	r1, r3
 8019970:	4473      	add	r3, lr
 8019972:	469e      	mov	lr, r3
 8019974:	460d      	mov	r5, r1
 8019976:	4565      	cmp	r5, ip
 8019978:	d30e      	bcc.n	8019998 <__mdiff+0xe8>
 801997a:	f10c 0203 	add.w	r2, ip, #3
 801997e:	1a52      	subs	r2, r2, r1
 8019980:	f022 0203 	bic.w	r2, r2, #3
 8019984:	3903      	subs	r1, #3
 8019986:	458c      	cmp	ip, r1
 8019988:	bf38      	it	cc
 801998a:	2200      	movcc	r2, #0
 801998c:	441a      	add	r2, r3
 801998e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019992:	b17b      	cbz	r3, 80199b4 <__mdiff+0x104>
 8019994:	6106      	str	r6, [r0, #16]
 8019996:	e7a5      	b.n	80198e4 <__mdiff+0x34>
 8019998:	f855 8b04 	ldr.w	r8, [r5], #4
 801999c:	fa17 f488 	uxtah	r4, r7, r8
 80199a0:	1422      	asrs	r2, r4, #16
 80199a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80199a6:	b2a4      	uxth	r4, r4
 80199a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80199ac:	f84e 4b04 	str.w	r4, [lr], #4
 80199b0:	1417      	asrs	r7, r2, #16
 80199b2:	e7e0      	b.n	8019976 <__mdiff+0xc6>
 80199b4:	3e01      	subs	r6, #1
 80199b6:	e7ea      	b.n	801998e <__mdiff+0xde>
 80199b8:	0801ae33 	.word	0x0801ae33
 80199bc:	0801aea4 	.word	0x0801aea4

080199c0 <__d2b>:
 80199c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80199c4:	4689      	mov	r9, r1
 80199c6:	2101      	movs	r1, #1
 80199c8:	ec57 6b10 	vmov	r6, r7, d0
 80199cc:	4690      	mov	r8, r2
 80199ce:	f7ff fcd5 	bl	801937c <_Balloc>
 80199d2:	4604      	mov	r4, r0
 80199d4:	b930      	cbnz	r0, 80199e4 <__d2b+0x24>
 80199d6:	4602      	mov	r2, r0
 80199d8:	4b25      	ldr	r3, [pc, #148]	; (8019a70 <__d2b+0xb0>)
 80199da:	4826      	ldr	r0, [pc, #152]	; (8019a74 <__d2b+0xb4>)
 80199dc:	f240 310a 	movw	r1, #778	; 0x30a
 80199e0:	f000 fc24 	bl	801a22c <__assert_func>
 80199e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80199e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80199ec:	bb35      	cbnz	r5, 8019a3c <__d2b+0x7c>
 80199ee:	2e00      	cmp	r6, #0
 80199f0:	9301      	str	r3, [sp, #4]
 80199f2:	d028      	beq.n	8019a46 <__d2b+0x86>
 80199f4:	4668      	mov	r0, sp
 80199f6:	9600      	str	r6, [sp, #0]
 80199f8:	f7ff fd8c 	bl	8019514 <__lo0bits>
 80199fc:	9900      	ldr	r1, [sp, #0]
 80199fe:	b300      	cbz	r0, 8019a42 <__d2b+0x82>
 8019a00:	9a01      	ldr	r2, [sp, #4]
 8019a02:	f1c0 0320 	rsb	r3, r0, #32
 8019a06:	fa02 f303 	lsl.w	r3, r2, r3
 8019a0a:	430b      	orrs	r3, r1
 8019a0c:	40c2      	lsrs	r2, r0
 8019a0e:	6163      	str	r3, [r4, #20]
 8019a10:	9201      	str	r2, [sp, #4]
 8019a12:	9b01      	ldr	r3, [sp, #4]
 8019a14:	61a3      	str	r3, [r4, #24]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	bf14      	ite	ne
 8019a1a:	2202      	movne	r2, #2
 8019a1c:	2201      	moveq	r2, #1
 8019a1e:	6122      	str	r2, [r4, #16]
 8019a20:	b1d5      	cbz	r5, 8019a58 <__d2b+0x98>
 8019a22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019a26:	4405      	add	r5, r0
 8019a28:	f8c9 5000 	str.w	r5, [r9]
 8019a2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019a30:	f8c8 0000 	str.w	r0, [r8]
 8019a34:	4620      	mov	r0, r4
 8019a36:	b003      	add	sp, #12
 8019a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019a40:	e7d5      	b.n	80199ee <__d2b+0x2e>
 8019a42:	6161      	str	r1, [r4, #20]
 8019a44:	e7e5      	b.n	8019a12 <__d2b+0x52>
 8019a46:	a801      	add	r0, sp, #4
 8019a48:	f7ff fd64 	bl	8019514 <__lo0bits>
 8019a4c:	9b01      	ldr	r3, [sp, #4]
 8019a4e:	6163      	str	r3, [r4, #20]
 8019a50:	2201      	movs	r2, #1
 8019a52:	6122      	str	r2, [r4, #16]
 8019a54:	3020      	adds	r0, #32
 8019a56:	e7e3      	b.n	8019a20 <__d2b+0x60>
 8019a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019a60:	f8c9 0000 	str.w	r0, [r9]
 8019a64:	6918      	ldr	r0, [r3, #16]
 8019a66:	f7ff fd35 	bl	80194d4 <__hi0bits>
 8019a6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019a6e:	e7df      	b.n	8019a30 <__d2b+0x70>
 8019a70:	0801ae33 	.word	0x0801ae33
 8019a74:	0801aea4 	.word	0x0801aea4

08019a78 <_calloc_r>:
 8019a78:	b513      	push	{r0, r1, r4, lr}
 8019a7a:	434a      	muls	r2, r1
 8019a7c:	4611      	mov	r1, r2
 8019a7e:	9201      	str	r2, [sp, #4]
 8019a80:	f7fd ff74 	bl	801796c <_malloc_r>
 8019a84:	4604      	mov	r4, r0
 8019a86:	b118      	cbz	r0, 8019a90 <_calloc_r+0x18>
 8019a88:	9a01      	ldr	r2, [sp, #4]
 8019a8a:	2100      	movs	r1, #0
 8019a8c:	f7fd ff16 	bl	80178bc <memset>
 8019a90:	4620      	mov	r0, r4
 8019a92:	b002      	add	sp, #8
 8019a94:	bd10      	pop	{r4, pc}

08019a96 <__ssputs_r>:
 8019a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a9a:	688e      	ldr	r6, [r1, #8]
 8019a9c:	429e      	cmp	r6, r3
 8019a9e:	4682      	mov	sl, r0
 8019aa0:	460c      	mov	r4, r1
 8019aa2:	4690      	mov	r8, r2
 8019aa4:	461f      	mov	r7, r3
 8019aa6:	d838      	bhi.n	8019b1a <__ssputs_r+0x84>
 8019aa8:	898a      	ldrh	r2, [r1, #12]
 8019aaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019aae:	d032      	beq.n	8019b16 <__ssputs_r+0x80>
 8019ab0:	6825      	ldr	r5, [r4, #0]
 8019ab2:	6909      	ldr	r1, [r1, #16]
 8019ab4:	eba5 0901 	sub.w	r9, r5, r1
 8019ab8:	6965      	ldr	r5, [r4, #20]
 8019aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019ac2:	3301      	adds	r3, #1
 8019ac4:	444b      	add	r3, r9
 8019ac6:	106d      	asrs	r5, r5, #1
 8019ac8:	429d      	cmp	r5, r3
 8019aca:	bf38      	it	cc
 8019acc:	461d      	movcc	r5, r3
 8019ace:	0553      	lsls	r3, r2, #21
 8019ad0:	d531      	bpl.n	8019b36 <__ssputs_r+0xa0>
 8019ad2:	4629      	mov	r1, r5
 8019ad4:	f7fd ff4a 	bl	801796c <_malloc_r>
 8019ad8:	4606      	mov	r6, r0
 8019ada:	b950      	cbnz	r0, 8019af2 <__ssputs_r+0x5c>
 8019adc:	230c      	movs	r3, #12
 8019ade:	f8ca 3000 	str.w	r3, [sl]
 8019ae2:	89a3      	ldrh	r3, [r4, #12]
 8019ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ae8:	81a3      	strh	r3, [r4, #12]
 8019aea:	f04f 30ff 	mov.w	r0, #4294967295
 8019aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019af2:	6921      	ldr	r1, [r4, #16]
 8019af4:	464a      	mov	r2, r9
 8019af6:	f7fd feb9 	bl	801786c <memcpy>
 8019afa:	89a3      	ldrh	r3, [r4, #12]
 8019afc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b04:	81a3      	strh	r3, [r4, #12]
 8019b06:	6126      	str	r6, [r4, #16]
 8019b08:	6165      	str	r5, [r4, #20]
 8019b0a:	444e      	add	r6, r9
 8019b0c:	eba5 0509 	sub.w	r5, r5, r9
 8019b10:	6026      	str	r6, [r4, #0]
 8019b12:	60a5      	str	r5, [r4, #8]
 8019b14:	463e      	mov	r6, r7
 8019b16:	42be      	cmp	r6, r7
 8019b18:	d900      	bls.n	8019b1c <__ssputs_r+0x86>
 8019b1a:	463e      	mov	r6, r7
 8019b1c:	4632      	mov	r2, r6
 8019b1e:	6820      	ldr	r0, [r4, #0]
 8019b20:	4641      	mov	r1, r8
 8019b22:	f7fd feb1 	bl	8017888 <memmove>
 8019b26:	68a3      	ldr	r3, [r4, #8]
 8019b28:	6822      	ldr	r2, [r4, #0]
 8019b2a:	1b9b      	subs	r3, r3, r6
 8019b2c:	4432      	add	r2, r6
 8019b2e:	60a3      	str	r3, [r4, #8]
 8019b30:	6022      	str	r2, [r4, #0]
 8019b32:	2000      	movs	r0, #0
 8019b34:	e7db      	b.n	8019aee <__ssputs_r+0x58>
 8019b36:	462a      	mov	r2, r5
 8019b38:	f000 fd02 	bl	801a540 <_realloc_r>
 8019b3c:	4606      	mov	r6, r0
 8019b3e:	2800      	cmp	r0, #0
 8019b40:	d1e1      	bne.n	8019b06 <__ssputs_r+0x70>
 8019b42:	6921      	ldr	r1, [r4, #16]
 8019b44:	4650      	mov	r0, sl
 8019b46:	f7fd fec1 	bl	80178cc <_free_r>
 8019b4a:	e7c7      	b.n	8019adc <__ssputs_r+0x46>

08019b4c <_svfiprintf_r>:
 8019b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b50:	4698      	mov	r8, r3
 8019b52:	898b      	ldrh	r3, [r1, #12]
 8019b54:	061b      	lsls	r3, r3, #24
 8019b56:	b09d      	sub	sp, #116	; 0x74
 8019b58:	4607      	mov	r7, r0
 8019b5a:	460d      	mov	r5, r1
 8019b5c:	4614      	mov	r4, r2
 8019b5e:	d50e      	bpl.n	8019b7e <_svfiprintf_r+0x32>
 8019b60:	690b      	ldr	r3, [r1, #16]
 8019b62:	b963      	cbnz	r3, 8019b7e <_svfiprintf_r+0x32>
 8019b64:	2140      	movs	r1, #64	; 0x40
 8019b66:	f7fd ff01 	bl	801796c <_malloc_r>
 8019b6a:	6028      	str	r0, [r5, #0]
 8019b6c:	6128      	str	r0, [r5, #16]
 8019b6e:	b920      	cbnz	r0, 8019b7a <_svfiprintf_r+0x2e>
 8019b70:	230c      	movs	r3, #12
 8019b72:	603b      	str	r3, [r7, #0]
 8019b74:	f04f 30ff 	mov.w	r0, #4294967295
 8019b78:	e0d1      	b.n	8019d1e <_svfiprintf_r+0x1d2>
 8019b7a:	2340      	movs	r3, #64	; 0x40
 8019b7c:	616b      	str	r3, [r5, #20]
 8019b7e:	2300      	movs	r3, #0
 8019b80:	9309      	str	r3, [sp, #36]	; 0x24
 8019b82:	2320      	movs	r3, #32
 8019b84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b8c:	2330      	movs	r3, #48	; 0x30
 8019b8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019d38 <_svfiprintf_r+0x1ec>
 8019b92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b96:	f04f 0901 	mov.w	r9, #1
 8019b9a:	4623      	mov	r3, r4
 8019b9c:	469a      	mov	sl, r3
 8019b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ba2:	b10a      	cbz	r2, 8019ba8 <_svfiprintf_r+0x5c>
 8019ba4:	2a25      	cmp	r2, #37	; 0x25
 8019ba6:	d1f9      	bne.n	8019b9c <_svfiprintf_r+0x50>
 8019ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8019bac:	d00b      	beq.n	8019bc6 <_svfiprintf_r+0x7a>
 8019bae:	465b      	mov	r3, fp
 8019bb0:	4622      	mov	r2, r4
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	4638      	mov	r0, r7
 8019bb6:	f7ff ff6e 	bl	8019a96 <__ssputs_r>
 8019bba:	3001      	adds	r0, #1
 8019bbc:	f000 80aa 	beq.w	8019d14 <_svfiprintf_r+0x1c8>
 8019bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bc2:	445a      	add	r2, fp
 8019bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8019bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	f000 80a2 	beq.w	8019d14 <_svfiprintf_r+0x1c8>
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8019bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019bda:	f10a 0a01 	add.w	sl, sl, #1
 8019bde:	9304      	str	r3, [sp, #16]
 8019be0:	9307      	str	r3, [sp, #28]
 8019be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019be6:	931a      	str	r3, [sp, #104]	; 0x68
 8019be8:	4654      	mov	r4, sl
 8019bea:	2205      	movs	r2, #5
 8019bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019bf0:	4851      	ldr	r0, [pc, #324]	; (8019d38 <_svfiprintf_r+0x1ec>)
 8019bf2:	f7e6 faed 	bl	80001d0 <memchr>
 8019bf6:	9a04      	ldr	r2, [sp, #16]
 8019bf8:	b9d8      	cbnz	r0, 8019c32 <_svfiprintf_r+0xe6>
 8019bfa:	06d0      	lsls	r0, r2, #27
 8019bfc:	bf44      	itt	mi
 8019bfe:	2320      	movmi	r3, #32
 8019c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c04:	0711      	lsls	r1, r2, #28
 8019c06:	bf44      	itt	mi
 8019c08:	232b      	movmi	r3, #43	; 0x2b
 8019c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8019c12:	2b2a      	cmp	r3, #42	; 0x2a
 8019c14:	d015      	beq.n	8019c42 <_svfiprintf_r+0xf6>
 8019c16:	9a07      	ldr	r2, [sp, #28]
 8019c18:	4654      	mov	r4, sl
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	f04f 0c0a 	mov.w	ip, #10
 8019c20:	4621      	mov	r1, r4
 8019c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c26:	3b30      	subs	r3, #48	; 0x30
 8019c28:	2b09      	cmp	r3, #9
 8019c2a:	d94e      	bls.n	8019cca <_svfiprintf_r+0x17e>
 8019c2c:	b1b0      	cbz	r0, 8019c5c <_svfiprintf_r+0x110>
 8019c2e:	9207      	str	r2, [sp, #28]
 8019c30:	e014      	b.n	8019c5c <_svfiprintf_r+0x110>
 8019c32:	eba0 0308 	sub.w	r3, r0, r8
 8019c36:	fa09 f303 	lsl.w	r3, r9, r3
 8019c3a:	4313      	orrs	r3, r2
 8019c3c:	9304      	str	r3, [sp, #16]
 8019c3e:	46a2      	mov	sl, r4
 8019c40:	e7d2      	b.n	8019be8 <_svfiprintf_r+0x9c>
 8019c42:	9b03      	ldr	r3, [sp, #12]
 8019c44:	1d19      	adds	r1, r3, #4
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	9103      	str	r1, [sp, #12]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	bfbb      	ittet	lt
 8019c4e:	425b      	neglt	r3, r3
 8019c50:	f042 0202 	orrlt.w	r2, r2, #2
 8019c54:	9307      	strge	r3, [sp, #28]
 8019c56:	9307      	strlt	r3, [sp, #28]
 8019c58:	bfb8      	it	lt
 8019c5a:	9204      	strlt	r2, [sp, #16]
 8019c5c:	7823      	ldrb	r3, [r4, #0]
 8019c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8019c60:	d10c      	bne.n	8019c7c <_svfiprintf_r+0x130>
 8019c62:	7863      	ldrb	r3, [r4, #1]
 8019c64:	2b2a      	cmp	r3, #42	; 0x2a
 8019c66:	d135      	bne.n	8019cd4 <_svfiprintf_r+0x188>
 8019c68:	9b03      	ldr	r3, [sp, #12]
 8019c6a:	1d1a      	adds	r2, r3, #4
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	9203      	str	r2, [sp, #12]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	bfb8      	it	lt
 8019c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c78:	3402      	adds	r4, #2
 8019c7a:	9305      	str	r3, [sp, #20]
 8019c7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019d48 <_svfiprintf_r+0x1fc>
 8019c80:	7821      	ldrb	r1, [r4, #0]
 8019c82:	2203      	movs	r2, #3
 8019c84:	4650      	mov	r0, sl
 8019c86:	f7e6 faa3 	bl	80001d0 <memchr>
 8019c8a:	b140      	cbz	r0, 8019c9e <_svfiprintf_r+0x152>
 8019c8c:	2340      	movs	r3, #64	; 0x40
 8019c8e:	eba0 000a 	sub.w	r0, r0, sl
 8019c92:	fa03 f000 	lsl.w	r0, r3, r0
 8019c96:	9b04      	ldr	r3, [sp, #16]
 8019c98:	4303      	orrs	r3, r0
 8019c9a:	3401      	adds	r4, #1
 8019c9c:	9304      	str	r3, [sp, #16]
 8019c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ca2:	4826      	ldr	r0, [pc, #152]	; (8019d3c <_svfiprintf_r+0x1f0>)
 8019ca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019ca8:	2206      	movs	r2, #6
 8019caa:	f7e6 fa91 	bl	80001d0 <memchr>
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	d038      	beq.n	8019d24 <_svfiprintf_r+0x1d8>
 8019cb2:	4b23      	ldr	r3, [pc, #140]	; (8019d40 <_svfiprintf_r+0x1f4>)
 8019cb4:	bb1b      	cbnz	r3, 8019cfe <_svfiprintf_r+0x1b2>
 8019cb6:	9b03      	ldr	r3, [sp, #12]
 8019cb8:	3307      	adds	r3, #7
 8019cba:	f023 0307 	bic.w	r3, r3, #7
 8019cbe:	3308      	adds	r3, #8
 8019cc0:	9303      	str	r3, [sp, #12]
 8019cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc4:	4433      	add	r3, r6
 8019cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8019cc8:	e767      	b.n	8019b9a <_svfiprintf_r+0x4e>
 8019cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8019cce:	460c      	mov	r4, r1
 8019cd0:	2001      	movs	r0, #1
 8019cd2:	e7a5      	b.n	8019c20 <_svfiprintf_r+0xd4>
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	3401      	adds	r4, #1
 8019cd8:	9305      	str	r3, [sp, #20]
 8019cda:	4619      	mov	r1, r3
 8019cdc:	f04f 0c0a 	mov.w	ip, #10
 8019ce0:	4620      	mov	r0, r4
 8019ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ce6:	3a30      	subs	r2, #48	; 0x30
 8019ce8:	2a09      	cmp	r2, #9
 8019cea:	d903      	bls.n	8019cf4 <_svfiprintf_r+0x1a8>
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d0c5      	beq.n	8019c7c <_svfiprintf_r+0x130>
 8019cf0:	9105      	str	r1, [sp, #20]
 8019cf2:	e7c3      	b.n	8019c7c <_svfiprintf_r+0x130>
 8019cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	2301      	movs	r3, #1
 8019cfc:	e7f0      	b.n	8019ce0 <_svfiprintf_r+0x194>
 8019cfe:	ab03      	add	r3, sp, #12
 8019d00:	9300      	str	r3, [sp, #0]
 8019d02:	462a      	mov	r2, r5
 8019d04:	4b0f      	ldr	r3, [pc, #60]	; (8019d44 <_svfiprintf_r+0x1f8>)
 8019d06:	a904      	add	r1, sp, #16
 8019d08:	4638      	mov	r0, r7
 8019d0a:	f7fd ff29 	bl	8017b60 <_printf_float>
 8019d0e:	1c42      	adds	r2, r0, #1
 8019d10:	4606      	mov	r6, r0
 8019d12:	d1d6      	bne.n	8019cc2 <_svfiprintf_r+0x176>
 8019d14:	89ab      	ldrh	r3, [r5, #12]
 8019d16:	065b      	lsls	r3, r3, #25
 8019d18:	f53f af2c 	bmi.w	8019b74 <_svfiprintf_r+0x28>
 8019d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019d1e:	b01d      	add	sp, #116	; 0x74
 8019d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d24:	ab03      	add	r3, sp, #12
 8019d26:	9300      	str	r3, [sp, #0]
 8019d28:	462a      	mov	r2, r5
 8019d2a:	4b06      	ldr	r3, [pc, #24]	; (8019d44 <_svfiprintf_r+0x1f8>)
 8019d2c:	a904      	add	r1, sp, #16
 8019d2e:	4638      	mov	r0, r7
 8019d30:	f7fe f9ba 	bl	80180a8 <_printf_i>
 8019d34:	e7eb      	b.n	8019d0e <_svfiprintf_r+0x1c2>
 8019d36:	bf00      	nop
 8019d38:	0801b004 	.word	0x0801b004
 8019d3c:	0801b00e 	.word	0x0801b00e
 8019d40:	08017b61 	.word	0x08017b61
 8019d44:	08019a97 	.word	0x08019a97
 8019d48:	0801b00a 	.word	0x0801b00a

08019d4c <__sfputc_r>:
 8019d4c:	6893      	ldr	r3, [r2, #8]
 8019d4e:	3b01      	subs	r3, #1
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	b410      	push	{r4}
 8019d54:	6093      	str	r3, [r2, #8]
 8019d56:	da08      	bge.n	8019d6a <__sfputc_r+0x1e>
 8019d58:	6994      	ldr	r4, [r2, #24]
 8019d5a:	42a3      	cmp	r3, r4
 8019d5c:	db01      	blt.n	8019d62 <__sfputc_r+0x16>
 8019d5e:	290a      	cmp	r1, #10
 8019d60:	d103      	bne.n	8019d6a <__sfputc_r+0x1e>
 8019d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d66:	f000 b98f 	b.w	801a088 <__swbuf_r>
 8019d6a:	6813      	ldr	r3, [r2, #0]
 8019d6c:	1c58      	adds	r0, r3, #1
 8019d6e:	6010      	str	r0, [r2, #0]
 8019d70:	7019      	strb	r1, [r3, #0]
 8019d72:	4608      	mov	r0, r1
 8019d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d78:	4770      	bx	lr

08019d7a <__sfputs_r>:
 8019d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d7c:	4606      	mov	r6, r0
 8019d7e:	460f      	mov	r7, r1
 8019d80:	4614      	mov	r4, r2
 8019d82:	18d5      	adds	r5, r2, r3
 8019d84:	42ac      	cmp	r4, r5
 8019d86:	d101      	bne.n	8019d8c <__sfputs_r+0x12>
 8019d88:	2000      	movs	r0, #0
 8019d8a:	e007      	b.n	8019d9c <__sfputs_r+0x22>
 8019d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d90:	463a      	mov	r2, r7
 8019d92:	4630      	mov	r0, r6
 8019d94:	f7ff ffda 	bl	8019d4c <__sfputc_r>
 8019d98:	1c43      	adds	r3, r0, #1
 8019d9a:	d1f3      	bne.n	8019d84 <__sfputs_r+0xa>
 8019d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019da0 <_vfiprintf_r>:
 8019da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da4:	460d      	mov	r5, r1
 8019da6:	b09d      	sub	sp, #116	; 0x74
 8019da8:	4614      	mov	r4, r2
 8019daa:	4698      	mov	r8, r3
 8019dac:	4606      	mov	r6, r0
 8019dae:	b118      	cbz	r0, 8019db8 <_vfiprintf_r+0x18>
 8019db0:	6983      	ldr	r3, [r0, #24]
 8019db2:	b90b      	cbnz	r3, 8019db8 <_vfiprintf_r+0x18>
 8019db4:	f7ff fa30 	bl	8019218 <__sinit>
 8019db8:	4b89      	ldr	r3, [pc, #548]	; (8019fe0 <_vfiprintf_r+0x240>)
 8019dba:	429d      	cmp	r5, r3
 8019dbc:	d11b      	bne.n	8019df6 <_vfiprintf_r+0x56>
 8019dbe:	6875      	ldr	r5, [r6, #4]
 8019dc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dc2:	07d9      	lsls	r1, r3, #31
 8019dc4:	d405      	bmi.n	8019dd2 <_vfiprintf_r+0x32>
 8019dc6:	89ab      	ldrh	r3, [r5, #12]
 8019dc8:	059a      	lsls	r2, r3, #22
 8019dca:	d402      	bmi.n	8019dd2 <_vfiprintf_r+0x32>
 8019dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dce:	f7ff fac6 	bl	801935e <__retarget_lock_acquire_recursive>
 8019dd2:	89ab      	ldrh	r3, [r5, #12]
 8019dd4:	071b      	lsls	r3, r3, #28
 8019dd6:	d501      	bpl.n	8019ddc <_vfiprintf_r+0x3c>
 8019dd8:	692b      	ldr	r3, [r5, #16]
 8019dda:	b9eb      	cbnz	r3, 8019e18 <_vfiprintf_r+0x78>
 8019ddc:	4629      	mov	r1, r5
 8019dde:	4630      	mov	r0, r6
 8019de0:	f000 f9b6 	bl	801a150 <__swsetup_r>
 8019de4:	b1c0      	cbz	r0, 8019e18 <_vfiprintf_r+0x78>
 8019de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019de8:	07dc      	lsls	r4, r3, #31
 8019dea:	d50e      	bpl.n	8019e0a <_vfiprintf_r+0x6a>
 8019dec:	f04f 30ff 	mov.w	r0, #4294967295
 8019df0:	b01d      	add	sp, #116	; 0x74
 8019df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df6:	4b7b      	ldr	r3, [pc, #492]	; (8019fe4 <_vfiprintf_r+0x244>)
 8019df8:	429d      	cmp	r5, r3
 8019dfa:	d101      	bne.n	8019e00 <_vfiprintf_r+0x60>
 8019dfc:	68b5      	ldr	r5, [r6, #8]
 8019dfe:	e7df      	b.n	8019dc0 <_vfiprintf_r+0x20>
 8019e00:	4b79      	ldr	r3, [pc, #484]	; (8019fe8 <_vfiprintf_r+0x248>)
 8019e02:	429d      	cmp	r5, r3
 8019e04:	bf08      	it	eq
 8019e06:	68f5      	ldreq	r5, [r6, #12]
 8019e08:	e7da      	b.n	8019dc0 <_vfiprintf_r+0x20>
 8019e0a:	89ab      	ldrh	r3, [r5, #12]
 8019e0c:	0598      	lsls	r0, r3, #22
 8019e0e:	d4ed      	bmi.n	8019dec <_vfiprintf_r+0x4c>
 8019e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e12:	f7ff faa5 	bl	8019360 <__retarget_lock_release_recursive>
 8019e16:	e7e9      	b.n	8019dec <_vfiprintf_r+0x4c>
 8019e18:	2300      	movs	r3, #0
 8019e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e1c:	2320      	movs	r3, #32
 8019e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e26:	2330      	movs	r3, #48	; 0x30
 8019e28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019fec <_vfiprintf_r+0x24c>
 8019e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e30:	f04f 0901 	mov.w	r9, #1
 8019e34:	4623      	mov	r3, r4
 8019e36:	469a      	mov	sl, r3
 8019e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e3c:	b10a      	cbz	r2, 8019e42 <_vfiprintf_r+0xa2>
 8019e3e:	2a25      	cmp	r2, #37	; 0x25
 8019e40:	d1f9      	bne.n	8019e36 <_vfiprintf_r+0x96>
 8019e42:	ebba 0b04 	subs.w	fp, sl, r4
 8019e46:	d00b      	beq.n	8019e60 <_vfiprintf_r+0xc0>
 8019e48:	465b      	mov	r3, fp
 8019e4a:	4622      	mov	r2, r4
 8019e4c:	4629      	mov	r1, r5
 8019e4e:	4630      	mov	r0, r6
 8019e50:	f7ff ff93 	bl	8019d7a <__sfputs_r>
 8019e54:	3001      	adds	r0, #1
 8019e56:	f000 80aa 	beq.w	8019fae <_vfiprintf_r+0x20e>
 8019e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e5c:	445a      	add	r2, fp
 8019e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8019e60:	f89a 3000 	ldrb.w	r3, [sl]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	f000 80a2 	beq.w	8019fae <_vfiprintf_r+0x20e>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8019e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e74:	f10a 0a01 	add.w	sl, sl, #1
 8019e78:	9304      	str	r3, [sp, #16]
 8019e7a:	9307      	str	r3, [sp, #28]
 8019e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e80:	931a      	str	r3, [sp, #104]	; 0x68
 8019e82:	4654      	mov	r4, sl
 8019e84:	2205      	movs	r2, #5
 8019e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e8a:	4858      	ldr	r0, [pc, #352]	; (8019fec <_vfiprintf_r+0x24c>)
 8019e8c:	f7e6 f9a0 	bl	80001d0 <memchr>
 8019e90:	9a04      	ldr	r2, [sp, #16]
 8019e92:	b9d8      	cbnz	r0, 8019ecc <_vfiprintf_r+0x12c>
 8019e94:	06d1      	lsls	r1, r2, #27
 8019e96:	bf44      	itt	mi
 8019e98:	2320      	movmi	r3, #32
 8019e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e9e:	0713      	lsls	r3, r2, #28
 8019ea0:	bf44      	itt	mi
 8019ea2:	232b      	movmi	r3, #43	; 0x2b
 8019ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8019eac:	2b2a      	cmp	r3, #42	; 0x2a
 8019eae:	d015      	beq.n	8019edc <_vfiprintf_r+0x13c>
 8019eb0:	9a07      	ldr	r2, [sp, #28]
 8019eb2:	4654      	mov	r4, sl
 8019eb4:	2000      	movs	r0, #0
 8019eb6:	f04f 0c0a 	mov.w	ip, #10
 8019eba:	4621      	mov	r1, r4
 8019ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ec0:	3b30      	subs	r3, #48	; 0x30
 8019ec2:	2b09      	cmp	r3, #9
 8019ec4:	d94e      	bls.n	8019f64 <_vfiprintf_r+0x1c4>
 8019ec6:	b1b0      	cbz	r0, 8019ef6 <_vfiprintf_r+0x156>
 8019ec8:	9207      	str	r2, [sp, #28]
 8019eca:	e014      	b.n	8019ef6 <_vfiprintf_r+0x156>
 8019ecc:	eba0 0308 	sub.w	r3, r0, r8
 8019ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8019ed4:	4313      	orrs	r3, r2
 8019ed6:	9304      	str	r3, [sp, #16]
 8019ed8:	46a2      	mov	sl, r4
 8019eda:	e7d2      	b.n	8019e82 <_vfiprintf_r+0xe2>
 8019edc:	9b03      	ldr	r3, [sp, #12]
 8019ede:	1d19      	adds	r1, r3, #4
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	9103      	str	r1, [sp, #12]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	bfbb      	ittet	lt
 8019ee8:	425b      	neglt	r3, r3
 8019eea:	f042 0202 	orrlt.w	r2, r2, #2
 8019eee:	9307      	strge	r3, [sp, #28]
 8019ef0:	9307      	strlt	r3, [sp, #28]
 8019ef2:	bfb8      	it	lt
 8019ef4:	9204      	strlt	r2, [sp, #16]
 8019ef6:	7823      	ldrb	r3, [r4, #0]
 8019ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8019efa:	d10c      	bne.n	8019f16 <_vfiprintf_r+0x176>
 8019efc:	7863      	ldrb	r3, [r4, #1]
 8019efe:	2b2a      	cmp	r3, #42	; 0x2a
 8019f00:	d135      	bne.n	8019f6e <_vfiprintf_r+0x1ce>
 8019f02:	9b03      	ldr	r3, [sp, #12]
 8019f04:	1d1a      	adds	r2, r3, #4
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	9203      	str	r2, [sp, #12]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	bfb8      	it	lt
 8019f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f12:	3402      	adds	r4, #2
 8019f14:	9305      	str	r3, [sp, #20]
 8019f16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019ffc <_vfiprintf_r+0x25c>
 8019f1a:	7821      	ldrb	r1, [r4, #0]
 8019f1c:	2203      	movs	r2, #3
 8019f1e:	4650      	mov	r0, sl
 8019f20:	f7e6 f956 	bl	80001d0 <memchr>
 8019f24:	b140      	cbz	r0, 8019f38 <_vfiprintf_r+0x198>
 8019f26:	2340      	movs	r3, #64	; 0x40
 8019f28:	eba0 000a 	sub.w	r0, r0, sl
 8019f2c:	fa03 f000 	lsl.w	r0, r3, r0
 8019f30:	9b04      	ldr	r3, [sp, #16]
 8019f32:	4303      	orrs	r3, r0
 8019f34:	3401      	adds	r4, #1
 8019f36:	9304      	str	r3, [sp, #16]
 8019f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f3c:	482c      	ldr	r0, [pc, #176]	; (8019ff0 <_vfiprintf_r+0x250>)
 8019f3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f42:	2206      	movs	r2, #6
 8019f44:	f7e6 f944 	bl	80001d0 <memchr>
 8019f48:	2800      	cmp	r0, #0
 8019f4a:	d03f      	beq.n	8019fcc <_vfiprintf_r+0x22c>
 8019f4c:	4b29      	ldr	r3, [pc, #164]	; (8019ff4 <_vfiprintf_r+0x254>)
 8019f4e:	bb1b      	cbnz	r3, 8019f98 <_vfiprintf_r+0x1f8>
 8019f50:	9b03      	ldr	r3, [sp, #12]
 8019f52:	3307      	adds	r3, #7
 8019f54:	f023 0307 	bic.w	r3, r3, #7
 8019f58:	3308      	adds	r3, #8
 8019f5a:	9303      	str	r3, [sp, #12]
 8019f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f5e:	443b      	add	r3, r7
 8019f60:	9309      	str	r3, [sp, #36]	; 0x24
 8019f62:	e767      	b.n	8019e34 <_vfiprintf_r+0x94>
 8019f64:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f68:	460c      	mov	r4, r1
 8019f6a:	2001      	movs	r0, #1
 8019f6c:	e7a5      	b.n	8019eba <_vfiprintf_r+0x11a>
 8019f6e:	2300      	movs	r3, #0
 8019f70:	3401      	adds	r4, #1
 8019f72:	9305      	str	r3, [sp, #20]
 8019f74:	4619      	mov	r1, r3
 8019f76:	f04f 0c0a 	mov.w	ip, #10
 8019f7a:	4620      	mov	r0, r4
 8019f7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f80:	3a30      	subs	r2, #48	; 0x30
 8019f82:	2a09      	cmp	r2, #9
 8019f84:	d903      	bls.n	8019f8e <_vfiprintf_r+0x1ee>
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	d0c5      	beq.n	8019f16 <_vfiprintf_r+0x176>
 8019f8a:	9105      	str	r1, [sp, #20]
 8019f8c:	e7c3      	b.n	8019f16 <_vfiprintf_r+0x176>
 8019f8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f92:	4604      	mov	r4, r0
 8019f94:	2301      	movs	r3, #1
 8019f96:	e7f0      	b.n	8019f7a <_vfiprintf_r+0x1da>
 8019f98:	ab03      	add	r3, sp, #12
 8019f9a:	9300      	str	r3, [sp, #0]
 8019f9c:	462a      	mov	r2, r5
 8019f9e:	4b16      	ldr	r3, [pc, #88]	; (8019ff8 <_vfiprintf_r+0x258>)
 8019fa0:	a904      	add	r1, sp, #16
 8019fa2:	4630      	mov	r0, r6
 8019fa4:	f7fd fddc 	bl	8017b60 <_printf_float>
 8019fa8:	4607      	mov	r7, r0
 8019faa:	1c78      	adds	r0, r7, #1
 8019fac:	d1d6      	bne.n	8019f5c <_vfiprintf_r+0x1bc>
 8019fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fb0:	07d9      	lsls	r1, r3, #31
 8019fb2:	d405      	bmi.n	8019fc0 <_vfiprintf_r+0x220>
 8019fb4:	89ab      	ldrh	r3, [r5, #12]
 8019fb6:	059a      	lsls	r2, r3, #22
 8019fb8:	d402      	bmi.n	8019fc0 <_vfiprintf_r+0x220>
 8019fba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fbc:	f7ff f9d0 	bl	8019360 <__retarget_lock_release_recursive>
 8019fc0:	89ab      	ldrh	r3, [r5, #12]
 8019fc2:	065b      	lsls	r3, r3, #25
 8019fc4:	f53f af12 	bmi.w	8019dec <_vfiprintf_r+0x4c>
 8019fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fca:	e711      	b.n	8019df0 <_vfiprintf_r+0x50>
 8019fcc:	ab03      	add	r3, sp, #12
 8019fce:	9300      	str	r3, [sp, #0]
 8019fd0:	462a      	mov	r2, r5
 8019fd2:	4b09      	ldr	r3, [pc, #36]	; (8019ff8 <_vfiprintf_r+0x258>)
 8019fd4:	a904      	add	r1, sp, #16
 8019fd6:	4630      	mov	r0, r6
 8019fd8:	f7fe f866 	bl	80180a8 <_printf_i>
 8019fdc:	e7e4      	b.n	8019fa8 <_vfiprintf_r+0x208>
 8019fde:	bf00      	nop
 8019fe0:	0801ae64 	.word	0x0801ae64
 8019fe4:	0801ae84 	.word	0x0801ae84
 8019fe8:	0801ae44 	.word	0x0801ae44
 8019fec:	0801b004 	.word	0x0801b004
 8019ff0:	0801b00e 	.word	0x0801b00e
 8019ff4:	08017b61 	.word	0x08017b61
 8019ff8:	08019d7b 	.word	0x08019d7b
 8019ffc:	0801b00a 	.word	0x0801b00a

0801a000 <__sread>:
 801a000:	b510      	push	{r4, lr}
 801a002:	460c      	mov	r4, r1
 801a004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a008:	f000 fac0 	bl	801a58c <_read_r>
 801a00c:	2800      	cmp	r0, #0
 801a00e:	bfab      	itete	ge
 801a010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a012:	89a3      	ldrhlt	r3, [r4, #12]
 801a014:	181b      	addge	r3, r3, r0
 801a016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a01a:	bfac      	ite	ge
 801a01c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a01e:	81a3      	strhlt	r3, [r4, #12]
 801a020:	bd10      	pop	{r4, pc}

0801a022 <__swrite>:
 801a022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a026:	461f      	mov	r7, r3
 801a028:	898b      	ldrh	r3, [r1, #12]
 801a02a:	05db      	lsls	r3, r3, #23
 801a02c:	4605      	mov	r5, r0
 801a02e:	460c      	mov	r4, r1
 801a030:	4616      	mov	r6, r2
 801a032:	d505      	bpl.n	801a040 <__swrite+0x1e>
 801a034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a038:	2302      	movs	r3, #2
 801a03a:	2200      	movs	r2, #0
 801a03c:	f000 f9f8 	bl	801a430 <_lseek_r>
 801a040:	89a3      	ldrh	r3, [r4, #12]
 801a042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a04a:	81a3      	strh	r3, [r4, #12]
 801a04c:	4632      	mov	r2, r6
 801a04e:	463b      	mov	r3, r7
 801a050:	4628      	mov	r0, r5
 801a052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a056:	f000 b869 	b.w	801a12c <_write_r>

0801a05a <__sseek>:
 801a05a:	b510      	push	{r4, lr}
 801a05c:	460c      	mov	r4, r1
 801a05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a062:	f000 f9e5 	bl	801a430 <_lseek_r>
 801a066:	1c43      	adds	r3, r0, #1
 801a068:	89a3      	ldrh	r3, [r4, #12]
 801a06a:	bf15      	itete	ne
 801a06c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a06e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a076:	81a3      	strheq	r3, [r4, #12]
 801a078:	bf18      	it	ne
 801a07a:	81a3      	strhne	r3, [r4, #12]
 801a07c:	bd10      	pop	{r4, pc}

0801a07e <__sclose>:
 801a07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a082:	f000 b8f1 	b.w	801a268 <_close_r>
	...

0801a088 <__swbuf_r>:
 801a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a08a:	460e      	mov	r6, r1
 801a08c:	4614      	mov	r4, r2
 801a08e:	4605      	mov	r5, r0
 801a090:	b118      	cbz	r0, 801a09a <__swbuf_r+0x12>
 801a092:	6983      	ldr	r3, [r0, #24]
 801a094:	b90b      	cbnz	r3, 801a09a <__swbuf_r+0x12>
 801a096:	f7ff f8bf 	bl	8019218 <__sinit>
 801a09a:	4b21      	ldr	r3, [pc, #132]	; (801a120 <__swbuf_r+0x98>)
 801a09c:	429c      	cmp	r4, r3
 801a09e:	d12b      	bne.n	801a0f8 <__swbuf_r+0x70>
 801a0a0:	686c      	ldr	r4, [r5, #4]
 801a0a2:	69a3      	ldr	r3, [r4, #24]
 801a0a4:	60a3      	str	r3, [r4, #8]
 801a0a6:	89a3      	ldrh	r3, [r4, #12]
 801a0a8:	071a      	lsls	r2, r3, #28
 801a0aa:	d52f      	bpl.n	801a10c <__swbuf_r+0x84>
 801a0ac:	6923      	ldr	r3, [r4, #16]
 801a0ae:	b36b      	cbz	r3, 801a10c <__swbuf_r+0x84>
 801a0b0:	6923      	ldr	r3, [r4, #16]
 801a0b2:	6820      	ldr	r0, [r4, #0]
 801a0b4:	1ac0      	subs	r0, r0, r3
 801a0b6:	6963      	ldr	r3, [r4, #20]
 801a0b8:	b2f6      	uxtb	r6, r6
 801a0ba:	4283      	cmp	r3, r0
 801a0bc:	4637      	mov	r7, r6
 801a0be:	dc04      	bgt.n	801a0ca <__swbuf_r+0x42>
 801a0c0:	4621      	mov	r1, r4
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	f000 f966 	bl	801a394 <_fflush_r>
 801a0c8:	bb30      	cbnz	r0, 801a118 <__swbuf_r+0x90>
 801a0ca:	68a3      	ldr	r3, [r4, #8]
 801a0cc:	3b01      	subs	r3, #1
 801a0ce:	60a3      	str	r3, [r4, #8]
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	1c5a      	adds	r2, r3, #1
 801a0d4:	6022      	str	r2, [r4, #0]
 801a0d6:	701e      	strb	r6, [r3, #0]
 801a0d8:	6963      	ldr	r3, [r4, #20]
 801a0da:	3001      	adds	r0, #1
 801a0dc:	4283      	cmp	r3, r0
 801a0de:	d004      	beq.n	801a0ea <__swbuf_r+0x62>
 801a0e0:	89a3      	ldrh	r3, [r4, #12]
 801a0e2:	07db      	lsls	r3, r3, #31
 801a0e4:	d506      	bpl.n	801a0f4 <__swbuf_r+0x6c>
 801a0e6:	2e0a      	cmp	r6, #10
 801a0e8:	d104      	bne.n	801a0f4 <__swbuf_r+0x6c>
 801a0ea:	4621      	mov	r1, r4
 801a0ec:	4628      	mov	r0, r5
 801a0ee:	f000 f951 	bl	801a394 <_fflush_r>
 801a0f2:	b988      	cbnz	r0, 801a118 <__swbuf_r+0x90>
 801a0f4:	4638      	mov	r0, r7
 801a0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0f8:	4b0a      	ldr	r3, [pc, #40]	; (801a124 <__swbuf_r+0x9c>)
 801a0fa:	429c      	cmp	r4, r3
 801a0fc:	d101      	bne.n	801a102 <__swbuf_r+0x7a>
 801a0fe:	68ac      	ldr	r4, [r5, #8]
 801a100:	e7cf      	b.n	801a0a2 <__swbuf_r+0x1a>
 801a102:	4b09      	ldr	r3, [pc, #36]	; (801a128 <__swbuf_r+0xa0>)
 801a104:	429c      	cmp	r4, r3
 801a106:	bf08      	it	eq
 801a108:	68ec      	ldreq	r4, [r5, #12]
 801a10a:	e7ca      	b.n	801a0a2 <__swbuf_r+0x1a>
 801a10c:	4621      	mov	r1, r4
 801a10e:	4628      	mov	r0, r5
 801a110:	f000 f81e 	bl	801a150 <__swsetup_r>
 801a114:	2800      	cmp	r0, #0
 801a116:	d0cb      	beq.n	801a0b0 <__swbuf_r+0x28>
 801a118:	f04f 37ff 	mov.w	r7, #4294967295
 801a11c:	e7ea      	b.n	801a0f4 <__swbuf_r+0x6c>
 801a11e:	bf00      	nop
 801a120:	0801ae64 	.word	0x0801ae64
 801a124:	0801ae84 	.word	0x0801ae84
 801a128:	0801ae44 	.word	0x0801ae44

0801a12c <_write_r>:
 801a12c:	b538      	push	{r3, r4, r5, lr}
 801a12e:	4d07      	ldr	r5, [pc, #28]	; (801a14c <_write_r+0x20>)
 801a130:	4604      	mov	r4, r0
 801a132:	4608      	mov	r0, r1
 801a134:	4611      	mov	r1, r2
 801a136:	2200      	movs	r2, #0
 801a138:	602a      	str	r2, [r5, #0]
 801a13a:	461a      	mov	r2, r3
 801a13c:	f7e8 fc03 	bl	8002946 <_write>
 801a140:	1c43      	adds	r3, r0, #1
 801a142:	d102      	bne.n	801a14a <_write_r+0x1e>
 801a144:	682b      	ldr	r3, [r5, #0]
 801a146:	b103      	cbz	r3, 801a14a <_write_r+0x1e>
 801a148:	6023      	str	r3, [r4, #0]
 801a14a:	bd38      	pop	{r3, r4, r5, pc}
 801a14c:	20001a04 	.word	0x20001a04

0801a150 <__swsetup_r>:
 801a150:	4b32      	ldr	r3, [pc, #200]	; (801a21c <__swsetup_r+0xcc>)
 801a152:	b570      	push	{r4, r5, r6, lr}
 801a154:	681d      	ldr	r5, [r3, #0]
 801a156:	4606      	mov	r6, r0
 801a158:	460c      	mov	r4, r1
 801a15a:	b125      	cbz	r5, 801a166 <__swsetup_r+0x16>
 801a15c:	69ab      	ldr	r3, [r5, #24]
 801a15e:	b913      	cbnz	r3, 801a166 <__swsetup_r+0x16>
 801a160:	4628      	mov	r0, r5
 801a162:	f7ff f859 	bl	8019218 <__sinit>
 801a166:	4b2e      	ldr	r3, [pc, #184]	; (801a220 <__swsetup_r+0xd0>)
 801a168:	429c      	cmp	r4, r3
 801a16a:	d10f      	bne.n	801a18c <__swsetup_r+0x3c>
 801a16c:	686c      	ldr	r4, [r5, #4]
 801a16e:	89a3      	ldrh	r3, [r4, #12]
 801a170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a174:	0719      	lsls	r1, r3, #28
 801a176:	d42c      	bmi.n	801a1d2 <__swsetup_r+0x82>
 801a178:	06dd      	lsls	r5, r3, #27
 801a17a:	d411      	bmi.n	801a1a0 <__swsetup_r+0x50>
 801a17c:	2309      	movs	r3, #9
 801a17e:	6033      	str	r3, [r6, #0]
 801a180:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a184:	81a3      	strh	r3, [r4, #12]
 801a186:	f04f 30ff 	mov.w	r0, #4294967295
 801a18a:	e03e      	b.n	801a20a <__swsetup_r+0xba>
 801a18c:	4b25      	ldr	r3, [pc, #148]	; (801a224 <__swsetup_r+0xd4>)
 801a18e:	429c      	cmp	r4, r3
 801a190:	d101      	bne.n	801a196 <__swsetup_r+0x46>
 801a192:	68ac      	ldr	r4, [r5, #8]
 801a194:	e7eb      	b.n	801a16e <__swsetup_r+0x1e>
 801a196:	4b24      	ldr	r3, [pc, #144]	; (801a228 <__swsetup_r+0xd8>)
 801a198:	429c      	cmp	r4, r3
 801a19a:	bf08      	it	eq
 801a19c:	68ec      	ldreq	r4, [r5, #12]
 801a19e:	e7e6      	b.n	801a16e <__swsetup_r+0x1e>
 801a1a0:	0758      	lsls	r0, r3, #29
 801a1a2:	d512      	bpl.n	801a1ca <__swsetup_r+0x7a>
 801a1a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a1a6:	b141      	cbz	r1, 801a1ba <__swsetup_r+0x6a>
 801a1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a1ac:	4299      	cmp	r1, r3
 801a1ae:	d002      	beq.n	801a1b6 <__swsetup_r+0x66>
 801a1b0:	4630      	mov	r0, r6
 801a1b2:	f7fd fb8b 	bl	80178cc <_free_r>
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	6363      	str	r3, [r4, #52]	; 0x34
 801a1ba:	89a3      	ldrh	r3, [r4, #12]
 801a1bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a1c0:	81a3      	strh	r3, [r4, #12]
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	6063      	str	r3, [r4, #4]
 801a1c6:	6923      	ldr	r3, [r4, #16]
 801a1c8:	6023      	str	r3, [r4, #0]
 801a1ca:	89a3      	ldrh	r3, [r4, #12]
 801a1cc:	f043 0308 	orr.w	r3, r3, #8
 801a1d0:	81a3      	strh	r3, [r4, #12]
 801a1d2:	6923      	ldr	r3, [r4, #16]
 801a1d4:	b94b      	cbnz	r3, 801a1ea <__swsetup_r+0x9a>
 801a1d6:	89a3      	ldrh	r3, [r4, #12]
 801a1d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a1dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a1e0:	d003      	beq.n	801a1ea <__swsetup_r+0x9a>
 801a1e2:	4621      	mov	r1, r4
 801a1e4:	4630      	mov	r0, r6
 801a1e6:	f000 f959 	bl	801a49c <__smakebuf_r>
 801a1ea:	89a0      	ldrh	r0, [r4, #12]
 801a1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1f0:	f010 0301 	ands.w	r3, r0, #1
 801a1f4:	d00a      	beq.n	801a20c <__swsetup_r+0xbc>
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	60a3      	str	r3, [r4, #8]
 801a1fa:	6963      	ldr	r3, [r4, #20]
 801a1fc:	425b      	negs	r3, r3
 801a1fe:	61a3      	str	r3, [r4, #24]
 801a200:	6923      	ldr	r3, [r4, #16]
 801a202:	b943      	cbnz	r3, 801a216 <__swsetup_r+0xc6>
 801a204:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a208:	d1ba      	bne.n	801a180 <__swsetup_r+0x30>
 801a20a:	bd70      	pop	{r4, r5, r6, pc}
 801a20c:	0781      	lsls	r1, r0, #30
 801a20e:	bf58      	it	pl
 801a210:	6963      	ldrpl	r3, [r4, #20]
 801a212:	60a3      	str	r3, [r4, #8]
 801a214:	e7f4      	b.n	801a200 <__swsetup_r+0xb0>
 801a216:	2000      	movs	r0, #0
 801a218:	e7f7      	b.n	801a20a <__swsetup_r+0xba>
 801a21a:	bf00      	nop
 801a21c:	200000f0 	.word	0x200000f0
 801a220:	0801ae64 	.word	0x0801ae64
 801a224:	0801ae84 	.word	0x0801ae84
 801a228:	0801ae44 	.word	0x0801ae44

0801a22c <__assert_func>:
 801a22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a22e:	4614      	mov	r4, r2
 801a230:	461a      	mov	r2, r3
 801a232:	4b09      	ldr	r3, [pc, #36]	; (801a258 <__assert_func+0x2c>)
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	4605      	mov	r5, r0
 801a238:	68d8      	ldr	r0, [r3, #12]
 801a23a:	b14c      	cbz	r4, 801a250 <__assert_func+0x24>
 801a23c:	4b07      	ldr	r3, [pc, #28]	; (801a25c <__assert_func+0x30>)
 801a23e:	9100      	str	r1, [sp, #0]
 801a240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a244:	4906      	ldr	r1, [pc, #24]	; (801a260 <__assert_func+0x34>)
 801a246:	462b      	mov	r3, r5
 801a248:	f000 f8e0 	bl	801a40c <fiprintf>
 801a24c:	f7fd facc 	bl	80177e8 <abort>
 801a250:	4b04      	ldr	r3, [pc, #16]	; (801a264 <__assert_func+0x38>)
 801a252:	461c      	mov	r4, r3
 801a254:	e7f3      	b.n	801a23e <__assert_func+0x12>
 801a256:	bf00      	nop
 801a258:	200000f0 	.word	0x200000f0
 801a25c:	0801b015 	.word	0x0801b015
 801a260:	0801b022 	.word	0x0801b022
 801a264:	0801b050 	.word	0x0801b050

0801a268 <_close_r>:
 801a268:	b538      	push	{r3, r4, r5, lr}
 801a26a:	4d06      	ldr	r5, [pc, #24]	; (801a284 <_close_r+0x1c>)
 801a26c:	2300      	movs	r3, #0
 801a26e:	4604      	mov	r4, r0
 801a270:	4608      	mov	r0, r1
 801a272:	602b      	str	r3, [r5, #0]
 801a274:	f7e8 fb83 	bl	800297e <_close>
 801a278:	1c43      	adds	r3, r0, #1
 801a27a:	d102      	bne.n	801a282 <_close_r+0x1a>
 801a27c:	682b      	ldr	r3, [r5, #0]
 801a27e:	b103      	cbz	r3, 801a282 <_close_r+0x1a>
 801a280:	6023      	str	r3, [r4, #0]
 801a282:	bd38      	pop	{r3, r4, r5, pc}
 801a284:	20001a04 	.word	0x20001a04

0801a288 <__sflush_r>:
 801a288:	898a      	ldrh	r2, [r1, #12]
 801a28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a28e:	4605      	mov	r5, r0
 801a290:	0710      	lsls	r0, r2, #28
 801a292:	460c      	mov	r4, r1
 801a294:	d458      	bmi.n	801a348 <__sflush_r+0xc0>
 801a296:	684b      	ldr	r3, [r1, #4]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	dc05      	bgt.n	801a2a8 <__sflush_r+0x20>
 801a29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a29e:	2b00      	cmp	r3, #0
 801a2a0:	dc02      	bgt.n	801a2a8 <__sflush_r+0x20>
 801a2a2:	2000      	movs	r0, #0
 801a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2aa:	2e00      	cmp	r6, #0
 801a2ac:	d0f9      	beq.n	801a2a2 <__sflush_r+0x1a>
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2b4:	682f      	ldr	r7, [r5, #0]
 801a2b6:	602b      	str	r3, [r5, #0]
 801a2b8:	d032      	beq.n	801a320 <__sflush_r+0x98>
 801a2ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2bc:	89a3      	ldrh	r3, [r4, #12]
 801a2be:	075a      	lsls	r2, r3, #29
 801a2c0:	d505      	bpl.n	801a2ce <__sflush_r+0x46>
 801a2c2:	6863      	ldr	r3, [r4, #4]
 801a2c4:	1ac0      	subs	r0, r0, r3
 801a2c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a2c8:	b10b      	cbz	r3, 801a2ce <__sflush_r+0x46>
 801a2ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a2cc:	1ac0      	subs	r0, r0, r3
 801a2ce:	2300      	movs	r3, #0
 801a2d0:	4602      	mov	r2, r0
 801a2d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2d4:	6a21      	ldr	r1, [r4, #32]
 801a2d6:	4628      	mov	r0, r5
 801a2d8:	47b0      	blx	r6
 801a2da:	1c43      	adds	r3, r0, #1
 801a2dc:	89a3      	ldrh	r3, [r4, #12]
 801a2de:	d106      	bne.n	801a2ee <__sflush_r+0x66>
 801a2e0:	6829      	ldr	r1, [r5, #0]
 801a2e2:	291d      	cmp	r1, #29
 801a2e4:	d82c      	bhi.n	801a340 <__sflush_r+0xb8>
 801a2e6:	4a2a      	ldr	r2, [pc, #168]	; (801a390 <__sflush_r+0x108>)
 801a2e8:	40ca      	lsrs	r2, r1
 801a2ea:	07d6      	lsls	r6, r2, #31
 801a2ec:	d528      	bpl.n	801a340 <__sflush_r+0xb8>
 801a2ee:	2200      	movs	r2, #0
 801a2f0:	6062      	str	r2, [r4, #4]
 801a2f2:	04d9      	lsls	r1, r3, #19
 801a2f4:	6922      	ldr	r2, [r4, #16]
 801a2f6:	6022      	str	r2, [r4, #0]
 801a2f8:	d504      	bpl.n	801a304 <__sflush_r+0x7c>
 801a2fa:	1c42      	adds	r2, r0, #1
 801a2fc:	d101      	bne.n	801a302 <__sflush_r+0x7a>
 801a2fe:	682b      	ldr	r3, [r5, #0]
 801a300:	b903      	cbnz	r3, 801a304 <__sflush_r+0x7c>
 801a302:	6560      	str	r0, [r4, #84]	; 0x54
 801a304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a306:	602f      	str	r7, [r5, #0]
 801a308:	2900      	cmp	r1, #0
 801a30a:	d0ca      	beq.n	801a2a2 <__sflush_r+0x1a>
 801a30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a310:	4299      	cmp	r1, r3
 801a312:	d002      	beq.n	801a31a <__sflush_r+0x92>
 801a314:	4628      	mov	r0, r5
 801a316:	f7fd fad9 	bl	80178cc <_free_r>
 801a31a:	2000      	movs	r0, #0
 801a31c:	6360      	str	r0, [r4, #52]	; 0x34
 801a31e:	e7c1      	b.n	801a2a4 <__sflush_r+0x1c>
 801a320:	6a21      	ldr	r1, [r4, #32]
 801a322:	2301      	movs	r3, #1
 801a324:	4628      	mov	r0, r5
 801a326:	47b0      	blx	r6
 801a328:	1c41      	adds	r1, r0, #1
 801a32a:	d1c7      	bne.n	801a2bc <__sflush_r+0x34>
 801a32c:	682b      	ldr	r3, [r5, #0]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d0c4      	beq.n	801a2bc <__sflush_r+0x34>
 801a332:	2b1d      	cmp	r3, #29
 801a334:	d001      	beq.n	801a33a <__sflush_r+0xb2>
 801a336:	2b16      	cmp	r3, #22
 801a338:	d101      	bne.n	801a33e <__sflush_r+0xb6>
 801a33a:	602f      	str	r7, [r5, #0]
 801a33c:	e7b1      	b.n	801a2a2 <__sflush_r+0x1a>
 801a33e:	89a3      	ldrh	r3, [r4, #12]
 801a340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a344:	81a3      	strh	r3, [r4, #12]
 801a346:	e7ad      	b.n	801a2a4 <__sflush_r+0x1c>
 801a348:	690f      	ldr	r7, [r1, #16]
 801a34a:	2f00      	cmp	r7, #0
 801a34c:	d0a9      	beq.n	801a2a2 <__sflush_r+0x1a>
 801a34e:	0793      	lsls	r3, r2, #30
 801a350:	680e      	ldr	r6, [r1, #0]
 801a352:	bf08      	it	eq
 801a354:	694b      	ldreq	r3, [r1, #20]
 801a356:	600f      	str	r7, [r1, #0]
 801a358:	bf18      	it	ne
 801a35a:	2300      	movne	r3, #0
 801a35c:	eba6 0807 	sub.w	r8, r6, r7
 801a360:	608b      	str	r3, [r1, #8]
 801a362:	f1b8 0f00 	cmp.w	r8, #0
 801a366:	dd9c      	ble.n	801a2a2 <__sflush_r+0x1a>
 801a368:	6a21      	ldr	r1, [r4, #32]
 801a36a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a36c:	4643      	mov	r3, r8
 801a36e:	463a      	mov	r2, r7
 801a370:	4628      	mov	r0, r5
 801a372:	47b0      	blx	r6
 801a374:	2800      	cmp	r0, #0
 801a376:	dc06      	bgt.n	801a386 <__sflush_r+0xfe>
 801a378:	89a3      	ldrh	r3, [r4, #12]
 801a37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a37e:	81a3      	strh	r3, [r4, #12]
 801a380:	f04f 30ff 	mov.w	r0, #4294967295
 801a384:	e78e      	b.n	801a2a4 <__sflush_r+0x1c>
 801a386:	4407      	add	r7, r0
 801a388:	eba8 0800 	sub.w	r8, r8, r0
 801a38c:	e7e9      	b.n	801a362 <__sflush_r+0xda>
 801a38e:	bf00      	nop
 801a390:	20400001 	.word	0x20400001

0801a394 <_fflush_r>:
 801a394:	b538      	push	{r3, r4, r5, lr}
 801a396:	690b      	ldr	r3, [r1, #16]
 801a398:	4605      	mov	r5, r0
 801a39a:	460c      	mov	r4, r1
 801a39c:	b913      	cbnz	r3, 801a3a4 <_fflush_r+0x10>
 801a39e:	2500      	movs	r5, #0
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	bd38      	pop	{r3, r4, r5, pc}
 801a3a4:	b118      	cbz	r0, 801a3ae <_fflush_r+0x1a>
 801a3a6:	6983      	ldr	r3, [r0, #24]
 801a3a8:	b90b      	cbnz	r3, 801a3ae <_fflush_r+0x1a>
 801a3aa:	f7fe ff35 	bl	8019218 <__sinit>
 801a3ae:	4b14      	ldr	r3, [pc, #80]	; (801a400 <_fflush_r+0x6c>)
 801a3b0:	429c      	cmp	r4, r3
 801a3b2:	d11b      	bne.n	801a3ec <_fflush_r+0x58>
 801a3b4:	686c      	ldr	r4, [r5, #4]
 801a3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d0ef      	beq.n	801a39e <_fflush_r+0xa>
 801a3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a3c0:	07d0      	lsls	r0, r2, #31
 801a3c2:	d404      	bmi.n	801a3ce <_fflush_r+0x3a>
 801a3c4:	0599      	lsls	r1, r3, #22
 801a3c6:	d402      	bmi.n	801a3ce <_fflush_r+0x3a>
 801a3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3ca:	f7fe ffc8 	bl	801935e <__retarget_lock_acquire_recursive>
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	4621      	mov	r1, r4
 801a3d2:	f7ff ff59 	bl	801a288 <__sflush_r>
 801a3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3d8:	07da      	lsls	r2, r3, #31
 801a3da:	4605      	mov	r5, r0
 801a3dc:	d4e0      	bmi.n	801a3a0 <_fflush_r+0xc>
 801a3de:	89a3      	ldrh	r3, [r4, #12]
 801a3e0:	059b      	lsls	r3, r3, #22
 801a3e2:	d4dd      	bmi.n	801a3a0 <_fflush_r+0xc>
 801a3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3e6:	f7fe ffbb 	bl	8019360 <__retarget_lock_release_recursive>
 801a3ea:	e7d9      	b.n	801a3a0 <_fflush_r+0xc>
 801a3ec:	4b05      	ldr	r3, [pc, #20]	; (801a404 <_fflush_r+0x70>)
 801a3ee:	429c      	cmp	r4, r3
 801a3f0:	d101      	bne.n	801a3f6 <_fflush_r+0x62>
 801a3f2:	68ac      	ldr	r4, [r5, #8]
 801a3f4:	e7df      	b.n	801a3b6 <_fflush_r+0x22>
 801a3f6:	4b04      	ldr	r3, [pc, #16]	; (801a408 <_fflush_r+0x74>)
 801a3f8:	429c      	cmp	r4, r3
 801a3fa:	bf08      	it	eq
 801a3fc:	68ec      	ldreq	r4, [r5, #12]
 801a3fe:	e7da      	b.n	801a3b6 <_fflush_r+0x22>
 801a400:	0801ae64 	.word	0x0801ae64
 801a404:	0801ae84 	.word	0x0801ae84
 801a408:	0801ae44 	.word	0x0801ae44

0801a40c <fiprintf>:
 801a40c:	b40e      	push	{r1, r2, r3}
 801a40e:	b503      	push	{r0, r1, lr}
 801a410:	4601      	mov	r1, r0
 801a412:	ab03      	add	r3, sp, #12
 801a414:	4805      	ldr	r0, [pc, #20]	; (801a42c <fiprintf+0x20>)
 801a416:	f853 2b04 	ldr.w	r2, [r3], #4
 801a41a:	6800      	ldr	r0, [r0, #0]
 801a41c:	9301      	str	r3, [sp, #4]
 801a41e:	f7ff fcbf 	bl	8019da0 <_vfiprintf_r>
 801a422:	b002      	add	sp, #8
 801a424:	f85d eb04 	ldr.w	lr, [sp], #4
 801a428:	b003      	add	sp, #12
 801a42a:	4770      	bx	lr
 801a42c:	200000f0 	.word	0x200000f0

0801a430 <_lseek_r>:
 801a430:	b538      	push	{r3, r4, r5, lr}
 801a432:	4d07      	ldr	r5, [pc, #28]	; (801a450 <_lseek_r+0x20>)
 801a434:	4604      	mov	r4, r0
 801a436:	4608      	mov	r0, r1
 801a438:	4611      	mov	r1, r2
 801a43a:	2200      	movs	r2, #0
 801a43c:	602a      	str	r2, [r5, #0]
 801a43e:	461a      	mov	r2, r3
 801a440:	f7e8 fac4 	bl	80029cc <_lseek>
 801a444:	1c43      	adds	r3, r0, #1
 801a446:	d102      	bne.n	801a44e <_lseek_r+0x1e>
 801a448:	682b      	ldr	r3, [r5, #0]
 801a44a:	b103      	cbz	r3, 801a44e <_lseek_r+0x1e>
 801a44c:	6023      	str	r3, [r4, #0]
 801a44e:	bd38      	pop	{r3, r4, r5, pc}
 801a450:	20001a04 	.word	0x20001a04

0801a454 <__swhatbuf_r>:
 801a454:	b570      	push	{r4, r5, r6, lr}
 801a456:	460e      	mov	r6, r1
 801a458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a45c:	2900      	cmp	r1, #0
 801a45e:	b096      	sub	sp, #88	; 0x58
 801a460:	4614      	mov	r4, r2
 801a462:	461d      	mov	r5, r3
 801a464:	da07      	bge.n	801a476 <__swhatbuf_r+0x22>
 801a466:	2300      	movs	r3, #0
 801a468:	602b      	str	r3, [r5, #0]
 801a46a:	89b3      	ldrh	r3, [r6, #12]
 801a46c:	061a      	lsls	r2, r3, #24
 801a46e:	d410      	bmi.n	801a492 <__swhatbuf_r+0x3e>
 801a470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a474:	e00e      	b.n	801a494 <__swhatbuf_r+0x40>
 801a476:	466a      	mov	r2, sp
 801a478:	f000 f8a8 	bl	801a5cc <_fstat_r>
 801a47c:	2800      	cmp	r0, #0
 801a47e:	dbf2      	blt.n	801a466 <__swhatbuf_r+0x12>
 801a480:	9a01      	ldr	r2, [sp, #4]
 801a482:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a486:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a48a:	425a      	negs	r2, r3
 801a48c:	415a      	adcs	r2, r3
 801a48e:	602a      	str	r2, [r5, #0]
 801a490:	e7ee      	b.n	801a470 <__swhatbuf_r+0x1c>
 801a492:	2340      	movs	r3, #64	; 0x40
 801a494:	2000      	movs	r0, #0
 801a496:	6023      	str	r3, [r4, #0]
 801a498:	b016      	add	sp, #88	; 0x58
 801a49a:	bd70      	pop	{r4, r5, r6, pc}

0801a49c <__smakebuf_r>:
 801a49c:	898b      	ldrh	r3, [r1, #12]
 801a49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4a0:	079d      	lsls	r5, r3, #30
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	460c      	mov	r4, r1
 801a4a6:	d507      	bpl.n	801a4b8 <__smakebuf_r+0x1c>
 801a4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a4ac:	6023      	str	r3, [r4, #0]
 801a4ae:	6123      	str	r3, [r4, #16]
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	6163      	str	r3, [r4, #20]
 801a4b4:	b002      	add	sp, #8
 801a4b6:	bd70      	pop	{r4, r5, r6, pc}
 801a4b8:	ab01      	add	r3, sp, #4
 801a4ba:	466a      	mov	r2, sp
 801a4bc:	f7ff ffca 	bl	801a454 <__swhatbuf_r>
 801a4c0:	9900      	ldr	r1, [sp, #0]
 801a4c2:	4605      	mov	r5, r0
 801a4c4:	4630      	mov	r0, r6
 801a4c6:	f7fd fa51 	bl	801796c <_malloc_r>
 801a4ca:	b948      	cbnz	r0, 801a4e0 <__smakebuf_r+0x44>
 801a4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4d0:	059a      	lsls	r2, r3, #22
 801a4d2:	d4ef      	bmi.n	801a4b4 <__smakebuf_r+0x18>
 801a4d4:	f023 0303 	bic.w	r3, r3, #3
 801a4d8:	f043 0302 	orr.w	r3, r3, #2
 801a4dc:	81a3      	strh	r3, [r4, #12]
 801a4de:	e7e3      	b.n	801a4a8 <__smakebuf_r+0xc>
 801a4e0:	4b0d      	ldr	r3, [pc, #52]	; (801a518 <__smakebuf_r+0x7c>)
 801a4e2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a4e4:	89a3      	ldrh	r3, [r4, #12]
 801a4e6:	6020      	str	r0, [r4, #0]
 801a4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4ec:	81a3      	strh	r3, [r4, #12]
 801a4ee:	9b00      	ldr	r3, [sp, #0]
 801a4f0:	6163      	str	r3, [r4, #20]
 801a4f2:	9b01      	ldr	r3, [sp, #4]
 801a4f4:	6120      	str	r0, [r4, #16]
 801a4f6:	b15b      	cbz	r3, 801a510 <__smakebuf_r+0x74>
 801a4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4fc:	4630      	mov	r0, r6
 801a4fe:	f000 f877 	bl	801a5f0 <_isatty_r>
 801a502:	b128      	cbz	r0, 801a510 <__smakebuf_r+0x74>
 801a504:	89a3      	ldrh	r3, [r4, #12]
 801a506:	f023 0303 	bic.w	r3, r3, #3
 801a50a:	f043 0301 	orr.w	r3, r3, #1
 801a50e:	81a3      	strh	r3, [r4, #12]
 801a510:	89a0      	ldrh	r0, [r4, #12]
 801a512:	4305      	orrs	r5, r0
 801a514:	81a5      	strh	r5, [r4, #12]
 801a516:	e7cd      	b.n	801a4b4 <__smakebuf_r+0x18>
 801a518:	080191b1 	.word	0x080191b1

0801a51c <__ascii_mbtowc>:
 801a51c:	b082      	sub	sp, #8
 801a51e:	b901      	cbnz	r1, 801a522 <__ascii_mbtowc+0x6>
 801a520:	a901      	add	r1, sp, #4
 801a522:	b142      	cbz	r2, 801a536 <__ascii_mbtowc+0x1a>
 801a524:	b14b      	cbz	r3, 801a53a <__ascii_mbtowc+0x1e>
 801a526:	7813      	ldrb	r3, [r2, #0]
 801a528:	600b      	str	r3, [r1, #0]
 801a52a:	7812      	ldrb	r2, [r2, #0]
 801a52c:	1e10      	subs	r0, r2, #0
 801a52e:	bf18      	it	ne
 801a530:	2001      	movne	r0, #1
 801a532:	b002      	add	sp, #8
 801a534:	4770      	bx	lr
 801a536:	4610      	mov	r0, r2
 801a538:	e7fb      	b.n	801a532 <__ascii_mbtowc+0x16>
 801a53a:	f06f 0001 	mvn.w	r0, #1
 801a53e:	e7f8      	b.n	801a532 <__ascii_mbtowc+0x16>

0801a540 <_realloc_r>:
 801a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a542:	4607      	mov	r7, r0
 801a544:	4614      	mov	r4, r2
 801a546:	460e      	mov	r6, r1
 801a548:	b921      	cbnz	r1, 801a554 <_realloc_r+0x14>
 801a54a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a54e:	4611      	mov	r1, r2
 801a550:	f7fd ba0c 	b.w	801796c <_malloc_r>
 801a554:	b922      	cbnz	r2, 801a560 <_realloc_r+0x20>
 801a556:	f7fd f9b9 	bl	80178cc <_free_r>
 801a55a:	4625      	mov	r5, r4
 801a55c:	4628      	mov	r0, r5
 801a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a560:	f000 f856 	bl	801a610 <_malloc_usable_size_r>
 801a564:	42a0      	cmp	r0, r4
 801a566:	d20f      	bcs.n	801a588 <_realloc_r+0x48>
 801a568:	4621      	mov	r1, r4
 801a56a:	4638      	mov	r0, r7
 801a56c:	f7fd f9fe 	bl	801796c <_malloc_r>
 801a570:	4605      	mov	r5, r0
 801a572:	2800      	cmp	r0, #0
 801a574:	d0f2      	beq.n	801a55c <_realloc_r+0x1c>
 801a576:	4631      	mov	r1, r6
 801a578:	4622      	mov	r2, r4
 801a57a:	f7fd f977 	bl	801786c <memcpy>
 801a57e:	4631      	mov	r1, r6
 801a580:	4638      	mov	r0, r7
 801a582:	f7fd f9a3 	bl	80178cc <_free_r>
 801a586:	e7e9      	b.n	801a55c <_realloc_r+0x1c>
 801a588:	4635      	mov	r5, r6
 801a58a:	e7e7      	b.n	801a55c <_realloc_r+0x1c>

0801a58c <_read_r>:
 801a58c:	b538      	push	{r3, r4, r5, lr}
 801a58e:	4d07      	ldr	r5, [pc, #28]	; (801a5ac <_read_r+0x20>)
 801a590:	4604      	mov	r4, r0
 801a592:	4608      	mov	r0, r1
 801a594:	4611      	mov	r1, r2
 801a596:	2200      	movs	r2, #0
 801a598:	602a      	str	r2, [r5, #0]
 801a59a:	461a      	mov	r2, r3
 801a59c:	f7e8 f9b6 	bl	800290c <_read>
 801a5a0:	1c43      	adds	r3, r0, #1
 801a5a2:	d102      	bne.n	801a5aa <_read_r+0x1e>
 801a5a4:	682b      	ldr	r3, [r5, #0]
 801a5a6:	b103      	cbz	r3, 801a5aa <_read_r+0x1e>
 801a5a8:	6023      	str	r3, [r4, #0]
 801a5aa:	bd38      	pop	{r3, r4, r5, pc}
 801a5ac:	20001a04 	.word	0x20001a04

0801a5b0 <__ascii_wctomb>:
 801a5b0:	b149      	cbz	r1, 801a5c6 <__ascii_wctomb+0x16>
 801a5b2:	2aff      	cmp	r2, #255	; 0xff
 801a5b4:	bf85      	ittet	hi
 801a5b6:	238a      	movhi	r3, #138	; 0x8a
 801a5b8:	6003      	strhi	r3, [r0, #0]
 801a5ba:	700a      	strbls	r2, [r1, #0]
 801a5bc:	f04f 30ff 	movhi.w	r0, #4294967295
 801a5c0:	bf98      	it	ls
 801a5c2:	2001      	movls	r0, #1
 801a5c4:	4770      	bx	lr
 801a5c6:	4608      	mov	r0, r1
 801a5c8:	4770      	bx	lr
	...

0801a5cc <_fstat_r>:
 801a5cc:	b538      	push	{r3, r4, r5, lr}
 801a5ce:	4d07      	ldr	r5, [pc, #28]	; (801a5ec <_fstat_r+0x20>)
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	4604      	mov	r4, r0
 801a5d4:	4608      	mov	r0, r1
 801a5d6:	4611      	mov	r1, r2
 801a5d8:	602b      	str	r3, [r5, #0]
 801a5da:	f7e8 f9dc 	bl	8002996 <_fstat>
 801a5de:	1c43      	adds	r3, r0, #1
 801a5e0:	d102      	bne.n	801a5e8 <_fstat_r+0x1c>
 801a5e2:	682b      	ldr	r3, [r5, #0]
 801a5e4:	b103      	cbz	r3, 801a5e8 <_fstat_r+0x1c>
 801a5e6:	6023      	str	r3, [r4, #0]
 801a5e8:	bd38      	pop	{r3, r4, r5, pc}
 801a5ea:	bf00      	nop
 801a5ec:	20001a04 	.word	0x20001a04

0801a5f0 <_isatty_r>:
 801a5f0:	b538      	push	{r3, r4, r5, lr}
 801a5f2:	4d06      	ldr	r5, [pc, #24]	; (801a60c <_isatty_r+0x1c>)
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	4604      	mov	r4, r0
 801a5f8:	4608      	mov	r0, r1
 801a5fa:	602b      	str	r3, [r5, #0]
 801a5fc:	f7e8 f9db 	bl	80029b6 <_isatty>
 801a600:	1c43      	adds	r3, r0, #1
 801a602:	d102      	bne.n	801a60a <_isatty_r+0x1a>
 801a604:	682b      	ldr	r3, [r5, #0]
 801a606:	b103      	cbz	r3, 801a60a <_isatty_r+0x1a>
 801a608:	6023      	str	r3, [r4, #0]
 801a60a:	bd38      	pop	{r3, r4, r5, pc}
 801a60c:	20001a04 	.word	0x20001a04

0801a610 <_malloc_usable_size_r>:
 801a610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a614:	1f18      	subs	r0, r3, #4
 801a616:	2b00      	cmp	r3, #0
 801a618:	bfbc      	itt	lt
 801a61a:	580b      	ldrlt	r3, [r1, r0]
 801a61c:	18c0      	addlt	r0, r0, r3
 801a61e:	4770      	bx	lr

0801a620 <_init>:
 801a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a622:	bf00      	nop
 801a624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a626:	bc08      	pop	{r3}
 801a628:	469e      	mov	lr, r3
 801a62a:	4770      	bx	lr

0801a62c <_fini>:
 801a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a62e:	bf00      	nop
 801a630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a632:	bc08      	pop	{r3}
 801a634:	469e      	mov	lr, r3
 801a636:	4770      	bx	lr
